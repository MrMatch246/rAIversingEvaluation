{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_memory_00113dfe",
                "param_1": "inputValue",
                "param_2": "newValue",
                "lVar1": "resultAddr"
            },
            "code": "\nvoid updateMemory_00113dfe(undefined4 inputValue,undefined newValue)\n\n{\n  long resultAddr;\n  \n  resultAddr = FUN_00112904(3,inputValue);\n  if (resultAddr != 0) {\n    *(undefined *)(resultAddr + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "update_memory_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "param_1": "baseAddress",
                "param_2": "prefix",
                "param_3": "unusedParameter1",
                "param_4": "unusedParameter2",
                "uVar1": "pointerValue",
                "lVar2": "pointerValue2",
                "auVar3": "result",
                "sVar4": "prefixLength",
                "pcVar5": "existingString",
                "sVar6": "existingStringLength",
                "auVar7": "newResult"
            },
            "code": "\nundefined  [16] updateStringWithPrefix_0010ab4d(long baseAddress,char *prefix,undefined8 unusedParameter1,undefined8 unusedParameter2)\n\n{\n  ulong pointerValue;\n  long pointerValue2;\n  undefined result [16];\n  size_t prefixLength;\n  char *existingString;\n  size_t existingStringLength;\n  undefined newResult [16];\n  \n  pointerValue = *(ulong *)(baseAddress + 0x60);\n  if ((pointerValue != 0) && (*(long *)(pointerValue + 0x20) != 0)) {\n    existingString = *(char **)(pointerValue + 0x30);\n    prefixLength = strlen(prefix);\n    if (existingString == (char *)0x0) {\n      existingString = (char *)xmalloc(prefixLength + 3);\n      *existingString = '\\0';\n    }\n    else {\n      existingStringLength = strlen(existingString);\n      existingString = (char *)xrealloc(existingString,prefixLength + 4 + existingStringLength);\n    }\n    prefixLength = strlen(existingString);\n    sprintf(existingString + prefixLength,\"%s::\",prefix);\n    pointerValue2 = *(long *)(baseAddress + 0x60);\n    *(char **)(pointerValue2 + 0x30) = existingString;\n    newResult._1_7_ = (undefined7)((ulong)pointerValue2 >> 8);\n    newResult[0] = 1;\n    newResult._8_8_ = unusedParameter2;\n    return newResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = pointerValue;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "sprintf",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_with_prefix_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "update_debug_name_type_0010c218",
                "param_1": "file_context",
                "param_2": "condition_1",
                "param_3": "condition_2",
                "uVar1": "translated_message",
                "lVar2": "new_file_type",
                "pauVar3": "new_pointer",
                "lVar4": "new_file_context"
            },
            "code": "\n\n\nlong update_debug_name_type_0010c218(long file_context,long condition_1,long condition_2)\n\n{\n  undefined8 translated_message;\n  long new_file_type;\n  undefined (*new_pointer) [16];\n  long new_file_context;\n  \n  if ((condition_1 != 0) && (condition_2 != 0)) {\n    if ((*(long *)(file_context + 8) == 0) || (*(long *)(file_context + 0x10) == 0)) {\n      translated_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",translated_message);\n    }\n    else {\n      new_file_type = FUN_00112904(0x16,0);\n      if (new_file_type != 0) {\n        new_pointer = (undefined (*) [16])xmalloc(0x10);\n        new_file_context = *(long *)(file_context + 0x10);\n        *new_pointer = ZEXT816(0);\n        *(long *)(*new_pointer + 8) = condition_2;\n        *(undefined (**) [16])(new_file_type + 0x10) = new_pointer;\n        new_file_context = FUN_00112925(new_file_context + 0x10,condition_1,0,3);\n        if (new_file_context != 0) {\n          *(long *)(new_file_context + 0x20) = new_file_type;\n          *(long *)*new_pointer = new_file_context;\n          return new_file_type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_001279e8 = FUN_00113f20();\n  DAT_001279e0 = FUN_00113f20();\n  DAT_001279d8 = FUN_00113f20();\n  DAT_001279d0 = FUN_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278c8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = FUN_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    FUN_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = FUN_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = FUN_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    FUN_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "textdomain",
                "dup",
                "bfd_set_error_program_name",
                "mkstemp",
                "bfd_scan_arch",
                "FUN_00108c86",
                "fclose",
                "bfd_set_default_target",
                "fread",
                "bfd_errmsg",
                "FUN_00114190",
                "fseek",
                "FUN_00108916",
                "free",
                "FUN_0011a390",
                "htab_create_alloc",
                "getopt_long",
                "bfd_get_error",
                "getc",
                "xmalloc_set_program_name",
                "FUN_00119dd0",
                "FUN_00114c80",
                "filename_cmp",
                "strtol",
                "strcasecmp",
                "htab_find_slot",
                "FUN_00114d60",
                "FUN_001054af",
                "setlocale",
                "xstrdup",
                "strncasecmp",
                "FUN_00113f50",
                "FUN_00108800",
                "FUN_00114c20",
                "strtoul",
                "memmove",
                "FUN_00113fb0",
                "free",
                "strcpy",
                "memcpy",
                "FUN_001126c0",
                "FUN_00119940",
                "xmalloc",
                "strncpy",
                "FUN_00108d9a",
                "fprintf",
                "FUN_00119ed0",
                "bindtextdomain",
                "unlink_if_ordinary",
                "FUN_00108a2a",
                "fopen",
                "FUN_00119970",
                "strchr",
                "FUN_0011a480",
                "FUN_00113fe0",
                "ftell",
                "FUN_00114460",
                "strcmp",
                "ferror",
                "FUN_00115970",
                "FUN_00114cf0",
                "bfd_init",
                "htab_elements",
                "strlen",
                "__errno_location",
                "malloc",
                "FUN_001199d0",
                "strerror",
                "xexit",
                "stat",
                "FUN_00114690",
                "FUN_00113f20",
                "xcalloc",
                "xrealloc",
                "FUN_00108898"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_0010be88",
                "param_1": "blockPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "tempPointer1",
                "uVar2": "result",
                "puVar3": "allocatedMemory",
                "puVar4": "tempPointer2",
                "lVar5": "tempLong",
                "puVar6": "tempPointer3",
                "puVar7": "tempPointer4",
                "bVar8": "tempByte",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startBlock_0010be88(long blockPointer,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *tempPointer1;\n  undefined8 result;\n  undefined4 *allocatedMemory;\n  undefined8 *tempPointer2;\n  long tempLong;\n  undefined8 *tempPointer3;\n  undefined4 *tempPointer4;\n  byte tempByte;\n  undefined returnValue [16];\n  \n  tempByte = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    allocatedMemory = (undefined4 *)xmalloc(0x30);\n    tempPointer4 = allocatedMemory;\n    for (tempLong = 0xc; tempLong != 0; tempLong = tempLong + -1) {\n      *tempPointer4 = 0;\n      tempPointer4 = tempPointer4 + (ulong)tempByte * -2 + 1;\n    }\n    tempLong = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(allocatedMemory + 6) = param2;\n    *(undefined8 *)(allocatedMemory + 8) = 0xffffffffffffffff;\n    *(long *)(allocatedMemory + 2) = tempLong;\n    tempPointer1 = *(undefined8 **)(tempLong + 0x10);\n    tempPointer3 = (undefined8 *)(tempLong + 0x10);\n    while (tempPointer2 = tempPointer1, tempPointer2 != (undefined8 *)0x0) {\n      tempPointer3 = tempPointer2;\n      tempPointer1 = (undefined8 *)*tempPointer2;\n    }\n    *tempPointer3 = allocatedMemory;\n    result = 1;\n    *(undefined4 **)(blockPointer + 0x20) = allocatedMemory;\n  }\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "construct_message_0010ba08",
                "param_1": "functionParams",
                "param_2": "fieldName",
                "param_3": "paramValue",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "flag",
                "iVar2": "size",
                "lVar3": "length",
                "__s": "message",
                "sVar4": "paramSize",
                "sVar5": "fieldNameSize",
                "sVar6": "messageSize",
                "__s_00": "newMessage",
                "uVar7": "warning",
                "uVar8": "result",
                "pcVar9": "fieldTypeStr"
            },
            "code": "\nundefined8\nconstructMessage_0010ba08(undefined8 *functionParams,char *fieldName,undefined8 paramValue,ulong fieldSize,int fieldType)\n\n{\n  char flag;\n  int size;\n  long length;\n  char *message;\n  size_t paramSize;\n  size_t fieldNameSize;\n  size_t messageSize;\n  char *newMessage;\n  undefined8 warning;\n  undefined8 result;\n  char *fieldTypeStr;\n  \n  flag = *(char *)(functionParams[0xc] + 0x1c);\n  size = *(int *)(functionParams[0xc] + 0x18);\n  message = (char *)FUN_00109b2f();\n  if (*(char **)(functionParams[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    paramSize = strlen(*(char **)(functionParams[0xc] + 0x20));\n    fieldNameSize = strlen(fieldName);\n    messageSize = strlen(message);\n    newMessage = (char *)xmalloc(paramSize + 0x32 + fieldNameSize + messageSize);\n    if (fieldType == 1) {\n      fieldTypeStr = \"/1\";\n    }\n    else {\n      fieldTypeStr = \"/0\";\n      if ((fieldType != 2) && (fieldTypeStr = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(size * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*functionParams;\n      warning = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warning,result,fieldName);\n    }\n    sprintf(newMessage,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(functionParams[0xc] + 0x20),fieldName,fieldTypeStr,message,\n            paramValue,fieldSize);\n    free(*(void **)(functionParams[0xc] + 0x20));\n    length = functionParams[0xc];\n    *(char **)(length + 0x20) = newMessage;\n    if (flag != '\\0') {\n      *(undefined *)(length + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)length >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "create_record_0010aa53",
                "param_1": "recordIndex",
                "param_2": "recordData",
                "param_3": "flag",
                "param_4": "mode",
                "cVar1": "recordFlag",
                "__s": "stringValue",
                "sVar5": "stringLength",
                "pcVar6": "newRecord",
                "cVar3": "modeFlag",
                "lVar2": "recordPointer",
                "uVar8": "result",
                "uVar9": "loopCounter",
                "uVar10": "maxLoopCounter",
                "uVar4": "loopIndex",
                "lVar7": "reallocResult"
            },
            "code": "\nundefined8 createRecord_0010aa53(long recordIndex,undefined8 recordData,char flag,int mode)\n\n{\n  char recordFlag;\n  long recordPointer;\n  char modeFlag;\n  uint loopIndex;\n  char *stringValue;\n  size_t stringLength;\n  char *newRecord;\n  long reallocResult;\n  undefined8 result;\n  ulong loopCounter;\n  ulong maxLoopCounter;\n  \n  recordFlag = *(char *)(*(long *)(recordIndex + 0x60) + 0x1c);\n  stringValue = (char *)FUN_00109b2f();\n  stringLength = strlen(stringValue);\n  newRecord = (char *)xmalloc(stringLength + 0x19);\n  *newRecord = flag + '0';\n  if (mode == 1) {\n    modeFlag = '1';\n  }\n  else {\n    modeFlag = '0';\n    if ((mode != 2) && (modeFlag = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  newRecord[1] = modeFlag;\n  sprintf(newRecord + 2,\"%ld,%s;\",recordData);\n  free(stringValue);\n  recordPointer = *(long *)(recordIndex + 0x60);\n  result = 0;\n  if ((recordPointer != 0) && (*(long *)(recordPointer + 0x20) != 0)) {\n    recordPointer = *(long *)(recordPointer + 0x28);\n    maxLoopCounter = 0;\n    if (recordPointer != 0) {\n      loopIndex = 0;\n      do {\n        loopCounter = (ulong)loopIndex;\n        maxLoopCounter = (ulong)loopIndex;\n        loopIndex = loopIndex + 1;\n      } while (*(long *)(recordPointer + loopCounter * 8) != 0);\n    }\n    reallocResult = xrealloc(recordPointer,(ulong)((int)maxLoopCounter + 2) << 3);\n    *(char **)(reallocResult + maxLoopCounter * 8) = newRecord;\n    *(undefined8 *)(reallocResult + (ulong)((int)maxLoopCounter + 1) * 8) = 0;\n    recordPointer = *(long *)(recordIndex + 0x60);\n    *(long *)(recordPointer + 0x28) = reallocResult;\n    if (recordFlag != '\\0') {\n      *(undefined *)(recordPointer + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_record_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_function_0011173a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "cVar1": "tempChar",
                "bVar2": "tempByte",
                "__ptr": "ptr",
                "cVar3": "tempChar2",
                "uVar4": "tempUndefined",
                "iVar5": "tempInt",
                "puVar6": "ptrVar",
                "plVar7": "longVar",
                "pcVar8": "charPtr",
                "uVar9": "tempUndefined8",
                "lVar10": "longVar2",
                "lVar11": "longVar3",
                "lVar12": "longVar4",
                "pplVar13": "ptrToLongPtr",
                "uVar14": "ulongVar1",
                "uVar15": "ulongVar2",
                "pcVar16": "charPtr2",
                "uVar17": "uintVar",
                "dVar19": "doubleVar",
                "local_48": "localCharPtr1",
                "local_40": "localLongPtrArray2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parseFunction_0011173a(undefined8 param1,long *param2,int param3,int param4,ulong param5,\n                      char *param6)\n\n{\n  char tempChar;\n  byte tempByte;\n  void *ptr;\n  char tempChar2;\n  undefined tempUndefined;\n  int tempInt;\n  undefined8 *ptrVar;\n  long *longVar;\n  char *charPtr;\n  undefined8 tempUndefined8;\n  long longVar2;\n  long longVar3;\n  long longVar4;\n  long **ptrToLongPtr;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *charPtr2;\n  uint uintVar;\n  long **pplVar18;\n  double doubleVar;\n  char *localCharPtr1;\n  long **localLongPtrArray2 [2];\n  \n  if (param2[4] != 0) {\n    if (((param3 == 100) && (*param6 != '\\0')) && (param2[5] == param5)) goto LAB_00111a06;\n    tempChar2 = FUN_0010bbd3(param1);\n    if (tempChar2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param2 + 0x44) = 0;\n    *(undefined4 *)(param2 + 8) = 0;\n    param2[9] = param2[4];\n    if (*(char *)(param2 + 1) == '\\0') {\n      param2[6] = param2[5];\n    }\n    *(undefined4 *)(param2 + 0x10) = 1;\n    ptrVar = (undefined8 *)xmalloc(8);\n    param2[0x11] = (long)ptrVar;\n    *ptrVar = 0;\n    param2[4] = 0;\n  }\n  strlen(param6);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    tempUndefined = FUN_00108f08(param1,param6);\n    return tempUndefined;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      tempInt = strcmp(param6,\"gcc2_compiled.\");\n      if (tempInt == 0) {\n        *(undefined4 *)(param2 + 8) = 2;\n        return 1;\n      }\n      tempInt = strcmp(param6,\"gcc_compiled.\");\n      if (tempInt == 0) {\n        *(undefined4 *)(param2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param2 + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(param2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param2 + 1) != '\\0') {\n            param5 = param5 + param2[7];\n          }\n          tempChar2 = FUN_0010c1c6(param1,param2);\n          if (tempChar2 != '\\0') {\n            tempChar2 = FUN_0010be1a(param1,param5);\n            if (tempChar2 != '\\0') {\n              *(undefined *)(param2 + 0xc) = 0;\n              param2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param2 + 0xc) != '\\0') &&\n           ((param5 < (ulong)param2[0xd] || (param2[0xd] == 0xffffffffffffffff)))) {\n          param2[0xd] = param5;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param2 + 0xc) != '\\0') {\n          ulongVar1 = param5;\n          if (((*param6 != '\\0') && (ulongVar2 = param2[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar1 = ulongVar2, param5 < ulongVar2)) {\n            ulongVar1 = param5;\n          }\n          tempChar2 = FUN_0010c1c6(param1,param2);\n          if (tempChar2 == '\\0') {\n            return 0;\n          }\n          tempChar2 = FUN_0010be1a(param1,ulongVar1);\n          if (tempChar2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param2 + 0xc) = 0;\n          param2[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param2[4];\n        if (ptr == (void *)0x0) {\n          longVar4 = xstrdup(param6);\n          param2[4] = longVar4;\n        }\n        else {\n          if (*param6 == '/') {\n            longVar4 = xstrdup(param6);\n          }\n          else {\n            longVar4 = concat(ptr,param6,0);\n          }\n          param2[4] = longVar4;\n          free(ptr);\n        }\n        param2[5] = param5;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          longVar4 = 0;\n          if (*(char *)(param2 + 0xc) != '\\0') {\n            longVar4 = param2[7];\n          }\n          tempUndefined = FUN_0010bf86(param1,(long)param4,longVar4 + param5);\n          return tempUndefined;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        longVar = (long *)xmalloc();\n        tempInt = *(int *)(param2 + 0x10);\n        longVar2 = param2[10];\n        longVar3 = param2[0xb];\n        longVar[5] = 0;\n        longVar4 = param2[0x11];\n        *(int *)(longVar + 4) = tempInt;\n        uintVar = tempInt + 1;\n        *(uint *)(param2 + 0x10) = uintVar;\n        *longVar = longVar3;\n        longVar[1] = longVar2;\n        longVar[2] = (long)param6;\n        longVar[3] = param5;\n        param2[10] = (long)longVar;\n        param2[0xb] = (long)longVar;\n        longVar4 = xrealloc(longVar4,(ulong)uintVar << 3);\n        uintVar = *(uint *)(longVar + 4);\n        param2[0x11] = longVar4;\n        *(undefined8 *)(longVar4 + (ulong)uintVar * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charPtr = strchr(param6,0x3a);\n    if ((charPtr != (char *)0x0) && ((charPtr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param2 + 0xc) != '\\0') {\n        ulongVar1 = param2[0xd];\n        ulongVar2 = param5;\n        if ((ulongVar1 != 0xffffffffffffffff) && (ulongVar2 = ulongVar1, param5 < ulongVar1)) {\n          ulongVar2 = param5;\n        }\n        tempChar2 = FUN_0010c1c6(param1,param2);\n        if (tempChar2 == '\\0') {\n          return 0;\n        }\n        tempChar2 = FUN_0010be1a(param1,ulongVar2);\n        if (tempChar2 == '\\0') {\n          return 0;\n        }\n        param2[0xd] = -1;\n      }\n      if (*(char *)(param2 + 1) != '\\0') {\n        param2[7] = param5;\n      }\n      *(undefined *)(param2 + 0xc) = 1;\n    }\n    localCharPtr1 = strchr(param6,0x3a);\n    if (localCharPtr1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharPtr1[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      tempChar2 = param6[1];\n      charPtr2 = \"eh_throw\";\n      if (tempChar2 != 'e') {\n        if (tempChar2 < 'f') {\n          if ((tempChar2 != 'X') && (tempChar2 != '_')) {\nLAB_00111d1a:\n            tempUndefined8 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(param6,tempUndefined8);\n          }\n        }\n        else {\n          charPtr2 = \"this\";\n          if (tempChar2 == 't') goto LAB_00111d62;\n          if (tempChar2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charPtr2 = (char *)0x0;\n      if ((param6 != localCharPtr1) && ((*param6 != ' ' || (localCharPtr1 != param6 + 1)))) {\n        charPtr2 = (char *)FUN_00109a0b(param6,(int)localCharPtr1 - (int)param6);\n      }\n    }\nLAB_00111d62:\n    tempByte = localCharPtr1[1];\n    charPtr = localCharPtr1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)tempByte * 2) >> 2) & 1 |\n        (tempByte == 0x2d || tempByte == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 4;\n      goto LAB_001123e8;\n    }\n    if (tempByte == 0) goto switchD_00111de5_caseD_44;\n    charPtr = localCharPtr1 + 2;\n    tempChar2 = localCharPtr1[1];\n    switch(tempChar2) {\n    case 'C':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      charPtr = \"debug_record_label: not implemented\";\n      if (longVar4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempChar2 = FUN_0010bc80(param1,charPtr2,longVar4,tempChar2 == 'F',param5);\n      if (tempChar2 != '\\0') {\n        do {\n          if (*localCharPtr1 != ';') {\n            return 1;\n          }\n          localCharPtr1 = localCharPtr1 + 1;\n          longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charPtr2 == (char *)0x0) goto LAB_0011208f;\n      longVar2 = param2[3];\n      longVar = (long *)param2[2];\n      tempChar2 = *(char *)(*(long *)(*param2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        localCharPtr1 = charPtr;\n        do {\n          if (*localCharPtr1 != ';') {\n            return 1;\n          }\n          localCharPtr1 = localCharPtr1 + 1;\n          longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 2;\n      break;\n    case 'S':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      tempChar2 = localCharPtr1[2];\n      if (tempChar2 == 't') {\n        charPtr = localCharPtr1 + 3;\n      }\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,charPtr2,&localCharPtr1,localLongPtrArray2);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charPtr2 == (char *)0x0) {\n        return 1;\n      }\n      tempChar = *(char *)(param2 + 0x35);\n      longVar = (long *)FUN_0010c6be(param1,charPtr2,longVar4);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrArray2[0] != (long **)0x0) {\n        *localLongPtrArray2[0] = longVar;\n      }\n      if (tempChar != '\\0') goto LAB_001122f0;\n      ptrToLongPtr = (long **)(param2 + 0x34);\n      pplVar18 = (long **)param2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charPtr = localCharPtr1 + 3;\n      if (((localCharPtr1[2] != '\\0') && (charPtr = localCharPtr1 + 4, localCharPtr1[3] == 'n')) &&\n         (charPtr = localCharPtr1 + 5, charPtr2 = localCharPtr1 + 4, localCharPtr1 = charPtr, *charPtr2 == '0')) {\n        for (; charPtr = localCharPtr1, *localCharPtr1 != '\\0'; localCharPtr1 = localCharPtr1 + 1) {\n          if (*localCharPtr1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 4;\n      break;\n    case 'c':\n      if (localCharPtr1[2] == '=') {\n        charPtr = localCharPtr1 + 4;\n        tempChar2 = localCharPtr1[3];\n        localCharPtr1 = charPtr;\n        if (tempChar2 == 'i') {\n          longVar4 = strtol(charPtr,(char **)0x0,10);\n          if (charPtr2 == (char *)0x0) {\n            return 0;\n          }\n          longVar2 = FUN_00112996(param1,charPtr2,4);\n          if (longVar2 != 0) {\n            *(long *)(longVar2 + 0x20) = (long)(int)longVar4;\n            return 1;\n          }\n          return 0;\n        }\n        if (tempChar2 == 'r') {\n          doubleVar = strtod(charPtr,(char **)0x0);\n          if (charPtr2 == (char *)0x0) {\n            return 0;\n          }\n          longVar4 = FUN_00112996(param1,charPtr2,5);\n          if (longVar4 != 0) {\n            *(double *)(longVar4 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (tempChar2 == 'e') {\n          longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n          if (longVar4 == 0) {\n            return 0;\n          }\n          charPtr = localCharPtr1;\n          if (*localCharPtr1 == ',') {\n            longVar2 = strtol(localCharPtr1,(char **)0x0,10);\n            if (charPtr2 == (char *)0x0) {\n              return 0;\n            }\n            longVar3 = FUN_00112996(param1,charPtr2,6);\n            if (longVar3 != 0) {\n              longVar = (long *)xmalloc(0x10);\n              *longVar = longVar4;\n              longVar[1] = (long)(int)longVar2;\n              *(long **)(longVar3 + 0x20) = longVar;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharPtr1[2] == 'F') {\n        localCharPtr1 = localCharPtr1 + 3;\n        longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n        if (longVar4 == 0) {\n          return 0;\n        }\n        tempUndefined8 = FUN_00113ce0(longVar4,0,0);\n        longVar4 = FUN_00113d3a(tempUndefined8);\n      }\n      else {\n        localCharPtr1 = charPtr;\n        longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      }\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 1;\n      break;\n    case 'r':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 5;\nLAB_001123e8:\n      tempChar2 = FUN_0010c139(param1,param2,charPtr2,longVar4,tempUndefined8,param5);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,charPtr2,&localCharPtr1,localLongPtrArray2);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charPtr2 == (char *)0x0) {\n        return 1;\n      }\n      longVar = (long *)FUN_0010c218(param1,charPtr2,longVar4);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localLongPtrArray2[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrArray2[0] = longVar;\n      return 1;\n    case 'v':\n      localCharPtr1 = charPtr;\n      longVar4 = FUNC_0010ee3f(param1,param2,0,&localCharPtr1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      tempUndefined8 = 3;\n    }\n    tempChar2 = FUN_0010bd62(param1,charPtr2,longVar4,tempUndefined8,param5);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    tempChar2 = FUN_0010c1c6(param1,param2);\n    if (tempChar2 == '\\0') {\n      return 0;\n    }\n    tempChar2 = FUN_0010bf20(param1,param2[7] + param2[6] + param5);\n    if (tempChar2 == '\\0') {\n      return 0;\n    }\n    param2 = param2 + 0xe;\n    *(int *)param2 = *(int *)param2 + -1;\n    charPtr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        charPtr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charPtr = \"debug_end_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      tempUndefined8 = dcgettext(0,charPtr,5);\n      fprintf(_stderr,\"%s\\n\",tempUndefined8);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        tempInt = *(int *)(param2 + 0x10);\n        *(uint *)(param2 + 0x10) = tempInt + 1U;\n        longVar4 = xrealloc(param2[0x11],(ulong)(tempInt + 1U) << 3);\n        ptrVar = (undefined8 *)param2[0xb];\n        param2[0x11] = longVar4;\n        while( true ) {\n          if (ptrVar == (undefined8 *)0x0) {\n            tempUndefined8 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(param6,tempUndefined8);\n            *(undefined8 *)(param2[0x11] + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param5 == ptrVar[3]) && (tempInt = strcmp((char *)ptrVar[2],param6), tempInt == 0))\n          break;\n          ptrVar = (undefined8 *)*ptrVar;\n        }\n        *(undefined8 *)(longVar4 + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = ptrVar[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        longVar4 = param2[10];\n        if (longVar4 != 0) {\n          longVar2 = *(long *)(longVar4 + 8);\n          uintVar = *(uint *)(longVar4 + 0x20);\n          param2[10] = longVar2;\n          if ((uintVar < *(uint *)(param2 + 0x10)) &&\n             (*(undefined8 *)(longVar4 + 0x28) = *(undefined8 *)(param2[0x11] + (ulong)uintVar * 8),\n             longVar2 != 0)) {\n            param6 = *(char **)(longVar2 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)param2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param2 + 0xc) != '\\0') {\n      tempChar2 = FUN_0010be88(param1,param2[7] + param2[6] + param5);\n      if (tempChar2 == '\\0') {\n        return 0;\n      }\n      tempChar2 = FUN_0010c1c6(param1,param2);\n      if (tempChar2 != '\\0') {\n        *(int *)(param2 + 0xe) = *(int *)(param2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charPtr = \"N_LBRAC not within function\\n\";\n  }\n  charPtr = (char *)dcgettext(0,charPtr,5);\n  fprintf(_stderr,charPtr);\n  return 0;\ncode_r0x00111cc7:\n  localCharPtr1 = localCharPtr1 + 2;\n  localCharPtr1 = strchr(localCharPtr1,0x3a);\n  if (localCharPtr1 == (char *)0x0) {\n    charPtr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharPtr1 = charPtr;\n    FUN_00108fb9(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (tempChar2 != 't') {\n      return 1;\n    }\n    longVar = (long *)FUN_0010c218(param1,charPtr2,longVar);\n    if (longVar != (long *)0x0) {\n      if (localLongPtrArray2[0] == (long **)0x0) {\n        return 1;\n      }\n      *localLongPtrArray2[0] = longVar;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charPtr2) &&\n     (tempInt = strcmp((char *)pplVar18[1],charPtr2), tempInt == 0)) {\n    pplVar18[3] = longVar;\n    *ptrToLongPtr = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrToLongPtr = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar2 < 1) {\nLAB_0011208f:\n    tempUndefined8 = 1;\nLAB_001121c4:\n    tempChar2 = FUN_0010c05d(param1,charPtr2,longVar4,tempUndefined8,param5);\njoined_r0x001123f8:\n    if (tempChar2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charPtr = *(char **)(*longVar + 8);\n  if ((tempChar2 != '\\0') && (tempChar2 == *charPtr)) {\n    charPtr = charPtr + 1;\n  }\n  if ((*charPtr == *charPtr2) && (tempInt = strcmp(charPtr,charPtr2), tempInt == 0)) {\n    param5 = *(long *)(*longVar + 0x10) + *(long *)(*(long *)(*longVar + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar2 = longVar2 + -1;\n  longVar = longVar + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "xmalloc",
                "fprintf",
                "FUN_00108fe8",
                "FUN_0010c139",
                "FUN_00108fb9",
                "strchr",
                "free",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "strtod",
                "strcmp",
                "FUN_0010bbd3",
                "strtol",
                "FUN_00112996",
                "concat",
                "FUN_0010be88",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_00109a0b",
                "strlen",
                "xstrdup",
                "FUN_0010c1c6",
                "FUN_0010c05d",
                "FUN_0010c218",
                "xrealloc",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_function_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "binaryHandle",
                "param_2": "binaryInfo",
                "param_3": "binarySize",
                "cVar1": "result",
                "iVar2": "errorCode",
                "uVar3": "relocInfo",
                "lVar4": "relocSize",
                "puVar5": "relocTable",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "newRelocTable",
                "puVar8": "newRelocEntry",
                "uVar9": "index",
                "uStack_38": "unusedStackVar"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 binaryHandle,undefined8 *binaryInfo,long binarySize)\n\n{\n  char result;\n  int errorCode;\n  undefined8 relocInfo;\n  long relocSize;\n  undefined8 *relocTable;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *newRelocTable;\n  undefined8 *newRelocEntry;\n  ulong index;\n  undefined8 unusedStackVar;\n  \n  result = FUN_00115f50(binaryHandle,binaryInfo,0);\n  if (result != '\\0') {\n    return;\n  }\n  relocInfo = binaryInfo[0xc];\n  if ((((*(byte *)(binarySize + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (relocSize = FUN_00114190(*binaryInfo,0,0x100), relocSize == 0)) {\n    relocSize = bfd_get_reloc_upper_bound(binaryHandle,binaryInfo);\n    if (relocSize < 0) {\n      if ((relocSize != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a20 = 1;\n        relocInfo = 0;\nLAB_00108315:\n        FUN_001126c0(0,binaryHandle,binaryInfo,relocInfo,unusedStackVar);\n        return;\n      }\n    }\n    else if (relocSize != 0) {\n      relocTable = (undefined8 *)binaryInfo[0xe];\n      if (relocTable == (undefined8 *)0x0) {\n        relocTable = (undefined8 *)bfd_alloc(binarySize);\n        if (relocTable == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(binaryHandle,binaryInfo,relocTable,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          relocInfo = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(binaryInfo + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        newRelocTable = relocTable;\n        for (index = 0; index != relocCount; index = index + 1) {\n          newRelocEntry = newRelocTable;\n          if (((*(long **)relocTable[index] != (long *)0x0) &&\n              (relocSize = **(long **)relocTable[index], relocSize != 0)) &&\n             (result = FUN_00115d70(*(undefined8 *)(relocSize + 8),DAT_00127a08), result != '\\0')) {\n            newRelocEntry = newRelocTable + 1;\n            *newRelocTable = relocTable[index];\n          }\n          newRelocTable = newRelocEntry;\n        }\n        *newRelocTable = 0;\n        relocCount = (long)newRelocTable - (long)relocTable >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(binarySize + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocTable = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocTable = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(binarySize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(binarySize,relocInfo,relocTable,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "FUN_00114190",
                "xexit",
                "bfd_alloc",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00115f50",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "extract_and_process_data_0010d559",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "data_length",
                "bVar1": "second_byte",
                "pbVar2": "current_byte",
                "cVar3": "result",
                "uVar4": "buffer_length",
                "iVar5": "comparison_result",
                "ppcVar6": "temp_buffer",
                "sVar7": "str_length",
                "lVar8": "result_length",
                "plVar9": "temp_pointer",
                "pcVar10": "temp_string",
                "__s1": "comparison_string",
                "__ptr": "temp_data",
                "pbVar11": "updated_byte",
                "uVar12": "data_type",
                "local_64": "remaining_iterations",
                "local_40": "temp_strings"
            },
            "code": "\nundefined8 extract_and_process_data_0010d559(undefined8 *output_buffer,byte **input_buffer,long *data_length)\n\n{\n  byte second_byte;\n  byte *current_byte;\n  char result;\n  uint buffer_length;\n  int comparison_result;\n  char **temp_buffer;\n  size_t str_length;\n  long result_length;\n  long *temp_pointer;\n  char *temp_string;\n  char *comparison_string;\n  void *temp_data;\n  byte *updated_byte;\n  undefined8 data_type;\n  byte *__nptr;\n  int remaining_iterations;\n  char *temp_strings [2];\n  \n  current_byte = *input_buffer;\n  second_byte = current_byte[1];\n  if ((char)second_byte < ':') {\n    if ((char)second_byte < '1') goto LAB_0010d5d8;\n    remaining_iterations = (char)second_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_buffer = current_byte + 1;\n    }\n    updated_byte = *input_buffer + 2;\n  }\n  else {\n    if (((second_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_byte + 2;\n    result_length = strtol((char *)__nptr,(char **)0x0,10);\n    remaining_iterations = (int)result_length;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updated_byte = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_buffer = updated_byte;\n  temp_buffer = (char **)0x0;\n  if (data_length != (long *)0x0) {\n    temp_buffer = temp_strings;\n  }\n  result_length = 0;\n  while( true ) {\n    while( true ) {\n      remaining_iterations = remaining_iterations + -1;\n      if (remaining_iterations == -1) {\n        if (data_length != (long *)0x0) {\n          *data_length = result_length;\n        }\n        return 1;\n      }\n      if (**input_buffer == 0x5f) {\n        *input_buffer = *input_buffer + 1;\n      }\n      if (**input_buffer != 0x74) break;\n      result = FUN_0010d21c(output_buffer,input_buffer,temp_buffer);\n      temp_string = temp_strings[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (data_length != (long *)0x0) {\n        str_length = strlen(temp_strings[0]);\n        result_length = FUN_0010afd5(*output_buffer,output_buffer[1],temp_string,str_length & 0xffffffff,9);\n        free(temp_string);\n        if (result_length == 0) {\n          return 0;\n        }\n      }\n    }\n    buffer_length = FUN_00108e76(input_buffer);\n    str_length = strlen((char *)*input_buffer);\n    if (str_length < buffer_length) break;\n    if (data_length != (long *)0x0) {\n      if ((result_length != 0) && (temp_pointer = (long *)FUN_00113b1e(result_length), temp_pointer != (long *)0x0)) {\n        temp_string = (char *)FUN_00109a0b(*input_buffer,buffer_length);\n        for (; result_length = *temp_pointer, result_length != 0; temp_pointer = temp_pointer + 1) {\n          result_length = *(long *)(result_length + 8);\n          if (result_length == 0) {\n            free(temp_string);\n            return 0;\n          }\n          comparison_string = (char *)FUN_001129f4(result_length);\n          if ((comparison_string != (char *)0x0) && (comparison_result = strcmp(comparison_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result_length != 0) goto LAB_0010d7ad;\n      }\n      data_type = 9;\n      if (remaining_iterations == 0) {\n        temp_data = (void *)FUN_00109a0b(*input_buffer,buffer_length);\n        result_length = FUN_0010914e(*output_buffer,temp_data);\n        free(temp_data);\n        if (result_length != 0) goto LAB_0010d7ad;\n        data_type = 0;\n      }\n      result_length = FUN_0010afd5(*output_buffer,output_buffer[1],*input_buffer,buffer_length,data_type);\n      if (result_length == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_buffer = *input_buffer + buffer_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010914e",
                "strtol",
                "FUN_0010afd5",
                "free",
                "FUN_0010911f",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "extract_and_process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "arguments"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_001275e0);\n  vfprintf(_stderr,errorMessage,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "close_free_function_00108466",
                "param_7": "closeParameter"
            },
            "code": "\nvoid closeFreeFunction_00108466(void)\n\n{\n  void *closeParameter;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0);\n  free(closeParameter);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "close_free_function_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "param_1": "ptr_byte",
                "bVar1": "current_byte",
                "iVar2": "parsed_integer"
            },
            "code": "\nint parse_integer_00108e76(byte **ptr_byte)\n\n{\n  byte current_byte;\n  int parsed_integer;\n  \n  parsed_integer = 0;\n  while( true ) {\n    current_byte = **ptr_byte;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *ptr_byte = *ptr_byte + 1;\n    parsed_integer = parsed_integer * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return parsed_integer;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_integer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "initialize_hash_function_0010bb52",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "newHash",
                "bfd_hash_allocate": "allocateHash",
                "bfd_hash_newfunc": "createNewHash"
            },
            "code": "\nlong initializeHashFunction_0010bb52(long inputValue,undefined8 param2,undefined8 param3)\n\n{\n  long newHash;\n  \n  if (((inputValue != 0) || (inputValue = bfd_hash_allocate(param2,0x30), inputValue != 0)) &&\n     (newHash = bfd_hash_newfunc(inputValue,param2,param3), newHash != 0)) {\n    *(undefined8 *)(newHash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(newHash + 0x18) = 0;\n    *(undefined4 *)(newHash + 0x28) = 0;\n    return newHash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "initialize_hash_function_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_and_call_thunk_0010e439",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "code": "\nvoid set_param_and_call_thunk_0010e439(long data_ptr,undefined8 new_value)\n\n{\n  *(undefined8 *)(data_ptr + 0x210) = new_value;\n  FUN_0010e2f0(data_ptr,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_call_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "file_path",
                "param_2": "default_directory",
                "sStack_a8": "stat_result",
                "iVar1": "access_result"
            },
            "code": "\nchar * check_directory_access_0011283f(char *file_path,char *default_directory)\n\n{\n  int access_result;\n  stat stat_result;\n  \n  if ((default_directory == (char *)0x0) && (file_path != (char *)0x0)) {\n    access_result = access(file_path,7);\n    if (access_result == 0) {\n      access_result = stat(file_path,&stat_result);\n      if ((access_result == 0) && ((stat_result.st_mode & 0xf000) == 0x4000)) {\n        default_directory = file_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "piVar2": "errnoPtr",
                "iVar1": "originalError",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeFileAndReturnError_00108237(void)\n\n{\n  int originalError;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  originalError = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = originalError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "context",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "debug_flag",
                "uVar1": "error_message",
                "plVar2": "record",
                "puVar3": "debug_info",
                "lVar4": "counter",
                "puVar5": "ptr",
                "pcVar6": "default_filename",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long context,char *filename,long size,uint debug_flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record;\n  undefined4 *debug_info;\n  long counter;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(context + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      record = (long *)xmalloc(0x18);\n      *record = size;\n      *(undefined (*) [16])(record + 1) = ZEXT816(0);\n      debug_info = (undefined4 *)xmalloc(0x30);\n      *(long **)(context + 0x18) = record;\n      record[2] = (long)debug_info;\n      ptr = debug_info;\n      for (counter = 0xc; counter != 0; counter = counter + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(context + 0x20) = debug_info;\n      counter = *(long *)(context + 0x10);\n      *(undefined8 *)(debug_info + 6) = param_5;\n      *(undefined8 *)(debug_info + 8) = 0xffffffffffffffff;\n      counter = FUN_00112925(counter + 0x10,default_filename,3,(debug_flag & 0xff) + 1);\n      if (counter != 0) {\n        *(long **)(counter + 0x20) = record;\n        error_message = CONCAT71((int7)((ulong)counter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "inputPath",
                "pcVar1": "lastSlashPtr",
                "lVar2": "inputPathLen",
                "lVar3": "newPathLen",
                "lVar4": "slashPosition",
                "pcVar5": "newPathPtr",
                "bVar6": "foundSlash",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *inputPath)\n\n{\n  char *lastSlashPtr;\n  long inputPathLen;\n  long newPathLen;\n  long slashPosition;\n  char *newPathPtr;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlashPtr = strrchr(inputPath,0x2f);\n  if (lastSlashPtr == (char *)0x0) {\n    lastSlashPtr = (char *)xmalloc(9);\n    newPathLen = 0;\n  }\n  else {\n    slashPosition = (long)lastSlashPtr - (long)inputPath;\n    lastSlashPtr = (char *)xmalloc(slashPosition + 0xb);\n    newPathLen = slashPosition + 1;\n    newPathPtr = lastSlashPtr;\n    for (inputPathLen = slashPosition; inputPathLen != 0; inputPathLen = inputPathLen + -1) {\n      *newPathPtr = *inputPath;\n      inputPath = inputPath + (ulong)foundSlash * -2 + 1;\n      newPathPtr = newPathPtr + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlashPtr[slashPosition] = '/';\n  }\n  *(undefined8 *)(lastSlashPtr + newPathLen) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashPtr + newPathLen) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "flag_char",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "local_41": "flag_value",
                "iVar2": "variable1",
                "lVar7": "counter",
                "iVar3": "variable2",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long data,long start_index,long end_index,byte flag)\n\n{\n  char flag_char;\n  int variable1;\n  int variable2;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long counter;\n  byte flag_value;\n  \n  flag_char = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  flag_value = 1;\n  if (flag_char == '\\0') {\n    flag_value = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  variable1 = *(int *)(*(long *)(data + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    flag_value = flag_value & 1;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    flag_value = flag;\n  }\n  length1 = strlen(resultString);\n  sprintf(resultString + length1,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  free(string1);\n  free(string2);\n  variable2 = 0;\n  if (start_index <= end_index) {\n    variable2 = variable1 * (((int)end_index - (int)start_index) + 1);\n  }\n  returnValue = FUN_00109b52(data,resultString,counter,flag_value,variable2);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "pcVar4": "headerFormat",
                "sVar5": "headerLength",
                "pcVar6": "tempFilePath",
                "uVar7": "result",
                "piVar8": "errorCode",
                "iVar9": "targetIndex",
                "lVar10": "loopIndex",
                "lVar11": "innerLoopIndex",
                "ppcVar12": "archMachArray",
                "uVar13": "maxArchMachLength",
                "uVar14": "strLength",
                "local_70": "archMachIndex",
                "_stderr": "stderrFile",
                "_stdout": "stdoutFile",
                "mkstemps": "createTempFile",
                "__errno_location": "getErrorLocation",
                "strerror": "getErrorMessage",
                "getenv": "getEnvironmentVariable",
                "printf": "print",
                "strlen": "getStringLength",
                "xmalloc": "allocateMemory",
                "strcpy": "copyString",
                "unlink": "removeFile",
                "free": "freeMemory",
                "fputs": "putString",
                "strtol": "convertToLong",
                "malloc": "allocateMemory"
            },
            "code": "\n\n\nvoid printBFDHeaderInfo_001199d0(void)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  char *headerFormat;\n  size_t headerLength;\n  char *tempFilePath;\n  undefined8 result;\n  int *errorCode;\n  int targetIndex;\n  long loopIndex;\n  long innerLoopIndex;\n  char **archMachArray;\n  uint maxArchMachLength;\n  ulong strLength;\n  int archMachIndex;\n  \n  headerFormat = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerFormat,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerFormat = getenv(\"TMPDIR\");\n    result = FUN_0011283f(headerFormat,0);\n    headerFormat = getenv(\"TMP\");\n    result = FUN_0011283f(headerFormat,result);\n    headerFormat = getenv(\"TEMP\");\n    result = FUN_0011283f(headerFormat,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    headerFormat = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (headerFormat == (char *)0x0) {\n      headerFormat = \".\";\n    }\n    headerLength = strlen(headerFormat);\n    tempFilePath = (char *)xmalloc((int)headerLength + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerFormat);\n    DAT_001278c0[headerLength & 0xffffffff] = '/';\n    DAT_001278c0[(int)headerLength + 1] = '\\0';\n  }\n  headerFormat = DAT_001278c0;\n  headerLength = strlen(DAT_001278c0);\n  loopIndex = (long)(int)headerLength;\n  tempFilePath = (char *)malloc(loopIndex + 9);\n  strcpy(tempFilePath,headerFormat);\n  *(undefined2 *)(tempFilePath + loopIndex) = 0x6363;\n  *(undefined4 *)(tempFilePath + loopIndex + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + loopIndex + 2) + 3) = 0x585858;\n  tempFilePath[loopIndex + 8] = '\\0';\n  iVar2 = mkstemps(tempFilePath,0);\n  if (iVar2 == -1) {\n    errorCode = __errno_location();\n    tempFilePath = strerror(*errorCode);\n    fprintf(stderrFile,\"Cannot create temporary file in %s: %s\\n\",headerFormat,tempFilePath);\n                    \n    abort();\n  }\n  iVar2 = close(iVar2);\n  if (iVar2 != 0) {\n                    \n    abort();\n  }\n  maxArchMachLength = 0;\n  iVar2 = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFilePath);\n  freeMemory(tempFilePath);\n  archMachIndex = 0;\n  do {\n    headerFormat = (char *)bfd_printfable_arch_mach(iVar2);\n    headerLength = strlen(headerFormat);\n    if ((int)maxArchMachLength < (int)(uint)headerLength) {\n      maxArchMachLength = (uint)headerLength;\n    }\n    iVar2 = iVar2 + 1;\n  } while (iVar2 != 0x57);\n  headerFormat = getenv(\"COLUMNS\");\n  iVar2 = archMachIndex;\n  if (headerFormat != (char *)0x0) {\n    loopIndex = strtol(headerFormat,(char **)0x0,10);\n    iVar1 = (int)loopIndex;\n    if (iVar1 != 0) goto LAB_00119b11;\n  }\n  iVar1 = 0x50;\nLAB_00119b11:\n  do {\n    archMachIndex = iVar2;\n    if (-1 < archMachIndex) {\n      return;\n    }\n    innerLoopIndex = (long)archMachIndex;\n    targetIndex = (iVar1 - maxArchMachLength) + -1;\n    loopIndex = innerLoopIndex;\n    do {\n      iVar2 = (int)loopIndex;\n      if (-1 < iVar2) break;\n      headerLength = strlen(*(char **)(loopIndex * 0x60));\n      loopIndex = loopIndex + 1;\n      targetIndex = (targetIndex - (int)headerLength) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLength + 1),&DAT_0011b4a1);\n    for (archMachArray = (char **)(innerLoopIndex * 0x60);\n        ((ulong)(uint)(iVar2 - archMachIndex) + innerLoopIndex) * 0x60 - (long)archMachArray != 0;\n        archMachArray = archMachArray + 0xc) {\n      printf(\"%s \",*archMachArray);\n    }\n    targetIndex = 2;\n    putc(10,stdoutFile);\n    do {\n      headerFormat = (char *)bfd_printfable_arch_mach(targetIndex,0);\n      iVar3 = strcmp(headerFormat,\"UNKNOWN!\");\n      if (iVar3 != 0) {\n        result = bfd_printfable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchMachLength,result);\n        archMachArray = (char **)(innerLoopIndex * 0x60);\n        iVar3 = archMachIndex;\n        while (iVar2 != iVar3) {\n          if (*(char *)((long)archMachArray + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            headerLength = strlen(*archMachArray);\n            for (strLength = headerLength & 0xffffffff; (int)strLength != 0; strLength = (ulong)((int)strLength - 1)) {\n              putc(0x2d,stdoutFile);\n            }\n          }\n          else {\n            fputs(*archMachArray,stdoutFile);\n          }\n          iVar3 = iVar3 + 1;\n          if (iVar2 != iVar3) {\n            putc(0x20,stdoutFile);\n          }\n          archMachArray = archMachArray + 0xc;\n        }\n        putc(10,stdoutFile);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_00119f70",
                "xmalloc",
                "bfd_iterate_over_targets",
                "fprintf",
                "abort",
                "unlink",
                "FUN_00104943",
                "strlen",
                "__errno_location",
                "strerror",
                "bfd_printable_arch_mach",
                "free",
                "printf",
                "mkstemps",
                "strcpy",
                "FUN_0011283f",
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_header_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a"
            },
            "code": "\nvoid executeInitialization_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "input_data",
                "param_2": "byte_array",
                "param_3": "output_string",
                "bVar1": "byte_variable_1",
                "pbVar2": "byte_pointer_1",
                "bVar3": "byte_variable_2",
                "cVar4": "char_variable_1",
                "bVar5": "byte_variable_3",
                "uVar6": "return_value",
                "iVar7": "int_variable_1",
                "uVar8": "uint_variable_1",
                "sVar9": "size_variable",
                "pbVar10": "byte_pointer_2",
                "__ptr": "ptr_variable_1",
                "__ptr_00": "ptr_variable_2",
                "__haystack": "haystack_string",
                "pcVar11": "char_pointer_1",
                "uVar12": "uint_variable_2",
                "pcVar13": "char_pointer_2",
                "bVar14": "byte_variable_4",
                "pcVar15": "char_pointer_3",
                "bVar16": "byte_variable_5",
                "bVar17": "byte_variable_6",
                "bVar18": "byte_variable_7",
                "bVar19": "byte_variable_8",
                "uVar20": "uint_variable_3",
                "uVar21": "ulong_variable",
                "local_3c": "array_of_uints"
            },
            "code": "\nundefined4 reverse_and_improve_0010d21c(undefined8 input_data,byte **byte_array,undefined8 *output_string)\n\n{\n  byte byte_variable_1;\n  byte *byte_pointer_1;\n  byte byte_variable_2;\n  char char_variable_1;\n  byte byte_variable_3;\n  undefined4 return_value;\n  int int_variable_1;\n  uint uint_variable_1;\n  size_t size_variable;\n  byte *byte_pointer_2;\n  void *ptr_variable_1;\n  void *ptr_variable_2;\n  char *haystack_string;\n  char *char_pointer_1;\n  undefined8 uint_variable_2;\n  char *char_pointer_2;\n  byte byte_variable_4;\n  char *char_pointer_3;\n  byte byte_variable_5;\n  byte byte_variable_6;\n  byte byte_variable_7;\n  byte byte_variable_8;\n  uint uint_variable_3;\n  ulong ulong_variable;\n  uint array_of_uints [3];\n  \n  byte_pointer_1 = *byte_array;\n  *byte_array = byte_pointer_1 + 1;\n  array_of_uints[0] = FUN_00108e76(byte_array);\n  ulong_variable = (ulong)array_of_uints[0];\n  if (array_of_uints[0] != 0) {\n    byte_pointer_2 = *byte_array;\n    size_variable = strlen((char *)byte_pointer_2);\n    if (ulong_variable <= size_variable) {\n      *byte_array = byte_pointer_2 + ulong_variable;\n      uint_variable_3 = 0;\n      return_value = FUN_00108ea1(byte_array,array_of_uints);\n      if ((char)return_value != '\\0') {\nLAB_0010d2b4:\n        if (array_of_uints[0] <= uint_variable_3) {\n          if (output_string == (undefined8 *)0x0) {\n            return return_value;\n          }\n          ptr_variable_1 = (void *)FUN_00109a0b(byte_pointer_1,(int)*byte_array - (int)byte_pointer_1);\n          ptr_variable_2 = (void *)concat(\"NoSuchStrinG__\",ptr_variable_1,0);\n          free(ptr_variable_1);\n          haystack_string = (char *)cplus_demangle(ptr_variable_2,2);\n          free(ptr_variable_2);\n          if ((haystack_string != (char *)0x0) &&\n             (char_pointer_1 = strstr(haystack_string,\"::NoSuchStrinG\"), char_pointer_2 = haystack_string,\n             char_pointer_3 = haystack_string, char_pointer_1 != (char *)0x0)) {\n            for (; char_pointer_2 != char_pointer_1; char_pointer_2 = char_pointer_2 + 1) {\n              if ((*char_pointer_2 != ' ') ||\n                 (((char_pointer_2[1] == '>' && (haystack_string < char_pointer_2)) && (char_pointer_2[-1] == '>')))) {\n                *char_pointer_3 = *char_pointer_2;\n                char_pointer_3 = char_pointer_3 + 1;\n              }\n            }\n            uint_variable_2 = FUN_00109a0b(haystack_string,(int)char_pointer_3 - (int)haystack_string);\n            *output_string = uint_variable_2;\n            free(haystack_string);\n            return return_value;\n          }\n          FUN_0010911f(byte_pointer_1);\n          free(haystack_string);\n          return 0;\n        }\n        byte_pointer_2 = *byte_array;\n        if (*byte_pointer_2 != 0x5a) {\n          byte_variable_3 = FUN_0010c95e(input_data,byte_array,0);\n          if (byte_variable_3 == 0) {\n            return 0;\n          }\n          byte_variable_2 = 0;\n          byte_variable_4 = 0;\n          byte_variable_7 = 0;\n          byte_variable_6 = 0;\n          byte_variable_8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_variable_5 = byte_variable_2;\n              byte_variable_1 = *byte_pointer_2;\n              if ((byte_variable_4 | byte_variable_1 == 0) != 0) {\n                byte_variable_3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_variable_2 = byte_variable_3;\n              byte_variable_4 = byte_variable_3;\n            } while ('v' < (char)byte_variable_1);\n            if ((char)byte_variable_1 < 'b') {\n              if ((char)byte_variable_1 < 'U') {\n                if ((char)byte_variable_1 < 'C') goto LAB_0010d2e9;\n                ulong_variable = 1L << (byte_variable_1 + 0xbd & 0x3f);\n                if ((ulong_variable & 0x11409) == 0) {\n                  if ((ulong_variable & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_variable_1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_variable_1 + 0xab)) goto LAB_0010d2e9;\n              byte_pointer_2 = byte_pointer_2 + 1;\n              byte_variable_2 = byte_variable_5;\n              byte_variable_4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_variable_1) {\n            case 0x62:\n              byte_variable_2 = byte_variable_5;\n              byte_variable_7 = byte_variable_3;\n              break;\n            case 99:\n              byte_variable_2 = byte_variable_5;\n              byte_variable_8 = byte_variable_3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_variable_2 = byte_variable_5;\n              byte_variable_6 = byte_variable_3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_array = byte_pointer_2 + 1;\n        char_variable_1 = FUN_0010c95e(input_data,byte_array,0);\n        if (char_variable_1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(byte_pointer_1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_variable_5 == 0) {\n    if (byte_variable_8 == 0) {\n      if (byte_variable_7 == 0) {\n        if (byte_variable_6 == 0) {\n          if (byte_variable_3 != 0) {\n            uint_variable_1 = FUN_00108e76(byte_array);\n            if (uint_variable_1 == 0) goto LAB_0010d280;\n            *byte_array = *byte_array + uint_variable_1;\n          }\n        }\n        else {\n          if (**byte_array == 0x6d) {\n            *byte_array = *byte_array + 1;\n          }\n          while( true ) {\n            byte_pointer_2 = *byte_array;\n            if (((&_sch_istable)[(ulong)*byte_pointer_2 * 2] & 4) == 0) break;\n            *byte_array = byte_pointer_2 + 1;\n          }\n          if (*byte_pointer_2 == 0x2e) {\n            do {\n              byte_pointer_2 = byte_pointer_2 + 1;\n              *byte_array = byte_pointer_2;\n            } while (((&_sch_istable)[(ulong)*byte_pointer_2 * 2] & 4) != 0);\n          }\n          byte_pointer_2 = *byte_array;\n          if (*byte_pointer_2 == 0x65) {\n            do {\n              byte_pointer_2 = byte_pointer_2 + 1;\n              *byte_array = byte_pointer_2;\n            } while (((&_sch_istable)[(ulong)*byte_pointer_2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_variable_1 = FUN_00108e76(byte_array);\n        if (1 < uint_variable_1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_array == 0x6d) {\n        *byte_array = *byte_array + 1;\n      }\n      int_variable_1 = FUN_00108e76(byte_array);\n      if (int_variable_1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_array == 0x6d) {\n      *byte_array = *byte_array + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_array * 2] & 4) != 0) {\n      *byte_array = *byte_array + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_variable_3 = uint_variable_3 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "concat",
                "free",
                "cplus_demangle",
                "FUN_0010911f",
                "strstr",
                "abort",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strlen",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "initialize_data_structure_0010c139",
                "param_1": "param1",
                "param_2": "ptrData",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "oldValue",
                "cVar2": "charValue",
                "uVar3": "returnValue",
                "puVar4": "newDataPtr",
                "in_R10": "param7",
                "unaff_R15": "param8"
            },
            "code": "\nulong initializeDataStructure_0010c139(undefined8 param1,long ptrData,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 oldValue;\n  char charValue;\n  ulong returnValue;\n  undefined8 *newDataPtr;\n  undefined8 param7;\n  undefined8 param8;\n  \n  charValue = *(char *)(ptrData + 0x60);\n  if ((charValue != '\\0') && ((*(int *)(ptrData + 0x40) != 0 || (*(char *)(ptrData + 0x44) == '\\0')))) {\n    newDataPtr = (undefined8 *)xmalloc(0x28);\n    oldValue = *(undefined8 *)(ptrData + 0x78);\n    *(undefined8 *)((long)newDataPtr + 0x1c) = 0;\n    newDataPtr[2] = param4;\n    *(undefined4 *)(newDataPtr + 3) = param5;\n    newDataPtr[4] = param6;\n    *(undefined8 **)(ptrData + 0x78) = newDataPtr;\n    *newDataPtr = oldValue;\n    newDataPtr[1] = param3;\n    return CONCAT71((int7)((ulong)param8 >> 8),charValue) & 0xffffffff;\n  }\n  returnValue = FUN_0010c05d(param1,param3,param4,param5,param6,param7);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "store_param2_in_memory_0010e439",
                "param_1": "memoryOffset",
                "param_2": "paramValue"
            },
            "code": "\nvoid storeParam2InMemory_0010e439(long memoryOffset,undefined8 paramValue)\n\n{\n  *(undefined8 *)(memoryOffset + 0x210) = paramValue;\n  FUN_0010e2f0(memoryOffset,0x84,0,0,paramValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "store_param2_in_memory_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010e842",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_00109dfe",
                "FUN_0010ee3f",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00115530",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_001199d0",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_00113fb0",
                "FUN_0010a377",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "inputData",
                "param_2": "size",
                "uVar1": "defaultVal"
            },
            "code": "\nvoid processData_00109d3e(undefined8 inputData,int size)\n\n{\n  undefined8 defaultVal;\n  \n  defaultVal = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    defaultVal = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  FUN_00109cf4(inputData,defaultVal,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_conditions_and_return_00112502",
                "param_1": "input",
                "param_2": "data",
                "param_3": "limit",
                "uVar1": "counter",
                "puVar2": "ptr_array",
                "uVar3": "value",
                "cVar4": "result"
            },
            "code": "\nundefined check_conditions_and_return_00112502(long input,undefined8 data,ulong limit)\n\n{\n  uint counter;\n  undefined8 *ptr_array;\n  undefined8 value;\n  char result;\n  \n  do {\n    ptr_array = *(undefined8 **)(input + 0x40);\n    if (ptr_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(input + 0x48), counter < 10 && (ptr_array[(ulong)counter + 2] != -1))) {\n      if (limit <= (ulong)ptr_array[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(data,*(undefined8 *)(ptr_array[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(input + 0x48) = *(int *)(input + 0x48) + 1;\n    }\n    value = *ptr_array;\n    *(undefined4 *)(input + 0x48) = 0;\n    *(undefined8 *)(input + 0x40) = value;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_conditions_and_return_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_configuration_file_00104cc1",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "linePtr",
                "unaff_R13": "errorString",
                "unaff_R14": "lastChar",
                "unaff_R15": "currentChar",
                "param_7": "formatString",
                "param_8": "outputParam",
                "param_9": "inputParam",
                "uVar1": "translatedString",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "currentChar",
                "bVar4": "currentChar",
                "pbVar5": "linePtr"
            },
            "code": "\nvoid parseConfigurationFile_00104cc1(void)\n\n{\n  undefined8 translatedString;\n  byte **hashTableSlot;\n  byte *currentChar;\n  byte currentChar;\n  byte *currentLine;\n  byte *linePtr;\n  int lineNumber;\n  byte *linePtr;\n  undefined8 errorString;\n  byte *lastChar;\n  byte *currentChar;\n  undefined8 formatString;\n  undefined8 *outputParam;\n  byte *inputParam;\n  \ncode_r0x00104cc1:\n  inputParam = linePtr;\n  translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(translatedString,formatString,lineNumber);\n  linePtr = currentLine;\n  linePtr = inputParam;\nLAB_00114599:\n  do {\n    *linePtr = 0;\n    if (currentChar < linePtr) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentChar;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = linePtr;\n    if (lastChar[1] == 0) {\n      *outputParam = errorString;\n      return;\n    }\n    for (; currentChar = *currentChar, lastChar = currentChar, currentChar != 10; currentChar = currentChar + 1) {\n      if ((char)currentChar < '\\v') {\n        if (currentChar == 0) {\n          currentLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentChar == 0xd) {\n          *currentChar = 0;\n          currentLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            currentLine = currentChar + 2;\n            lastChar = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      lastChar = currentChar + 1;\n      currentLine = currentChar + 2;\n    }\n    else {\n      currentLine = currentChar + 1;\n    }\nLAB_00114553:\n    currentChar = *linePtr;\n    currentChar = linePtr;\n    while ((currentChar == 0x20 || (linePtr = currentChar, currentChar == 9))) {\n      linePtr = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentChar = *linePtr;\n    }\n    do {\n      linePtr = currentLine;\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentChar = linePtr[1];\n    if ((((((currentChar == 9) || (currentChar == 0x20)) && ((currentChar = linePtr[2], currentChar == 9 || (currentChar == 0x20)))\n          ) && ((currentChar = linePtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n        ((currentChar = linePtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n       ((currentChar = linePtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n      currentChar = linePtr[6];\n      currentChar = linePtr + 6;\n      if ((currentChar == 9) || (currentChar == 0x20)) {\n        do {\n          do {\n            currentChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (currentChar == 0x20);\n        } while (currentChar == 9);\n      }\n    }\n    if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104d1c",
                "htab_find_slot",
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_configuration_file_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_00109c2e",
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010b6ea",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_new_linked_list_node_00113bfa",
                "param_1": "node_value",
                "param_2": "next_node_value",
                "lVar1": "allocated_memory_address",
                "plVar2": "new_node_pointer"
            },
            "code": "\nlong create_new_linked_list_node_00113bfa(long node_value,long next_node_value)\n\n{\n  long allocated_memory_address;\n  long *new_node_pointer;\n  \n  if (((node_value != 0) && (next_node_value != 0)) && (allocated_memory_address = FUN_00112904(0x12,0), allocated_memory_address != 0)) {\n    new_node_pointer = (long *)xmalloc(0x10);\n    *new_node_pointer = node_value;\n    new_node_pointer[1] = next_node_value;\n    *(long **)(allocated_memory_address + 0x10) = new_node_pointer;\n    return allocated_memory_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_new_linked_list_node_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_share_flag_00108375",
                "param_1": "unused_param",
                "param_2": "param_array",
                "param_3": "param_value",
                "uVar1": "first_element",
                "uVar2": "warning_message",
                "unaff_EBX": "result"
            },
            "code": "\nuint check_share_flag_00108375(undefined8 unused_param,undefined8 *param_array,undefined8 param_value)\n\n{\n  undefined8 first_element;\n  undefined8 warning_message;\n  uint result;\n  \n  if (*(int *)(param_array[1] + 8) != 2) {\n    first_element = *param_array;\n    result = result & 0xf7ffffff;\n    warning_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(warning_message,first_element,param_value);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_share_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_send_data_00109e76",
                "param_1": "func_param_1",
                "param_2": "func_param_2",
                "lVar1": "local_var_1",
                "local_5a": "data_string"
            },
            "code": "\nvoid update_and_send_data_00109e76(long func_param_1,uint func_param_2)\n\n{\n  long local_var_1;\n  char data_string [58];\n  \n  local_var_1 = *(long *)(func_param_1 + 0x68);\n  *(long *)(func_param_1 + 0x68) = local_var_1 + 1;\n  sprintf(data_string,\"%ld=r%ld;%u;0;\",local_var_1,local_var_1,(ulong)func_param_2);\n  FUN_00109b52(func_param_1,data_string,local_var_1,1,func_param_2 * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_send_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "index",
                "lVar2": "currentIdx",
                "lVar3": "offset",
                "uVar4": "duplicatedStr"
            },
            "code": "\nulong updateData_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int index;\n  long currentIdx;\n  long offset;\n  undefined8 duplicatedStr;\n  \n  currentIdx = (long)DAT_001278a0;\n  offset = currentIdx * 0x18;\n  free((void *)(&DAT_00127730)[currentIdx * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = newValue1;\n  *(undefined4 *)(&DAT_00127724 + offset) = newValue2;\n  *(undefined8 *)(&DAT_00127728 + offset) = newValue3;\n  duplicatedStr = xstrdup(newValue4);\n  (&DAT_00127730)[currentIdx * 3] = duplicatedStr;\n  index = DAT_001278a0 + 1;\n  DAT_001278a0 = index % 0x10;\n  return (long)index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "param_1": "array_ptr",
                "param_2": "struct_ptr",
                "param_3": "ptr_1",
                "param_4": "val_1",
                "param_5": "val_2",
                "param_6": "ptr_2",
                "__s2": "string_1",
                "puVar2": "ptr_3",
                "uVar3": "result",
                "lVar4": "value",
                "puVar5": "ptr_4",
                "puVar6": "ptr_5",
                "bVar7": "byte_val",
                "auVar8": "result_array"
            },
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *array_ptr,long struct_ptr,undefined8 ptr_1,undefined4 val_1,\n            undefined4 val_2,undefined8 ptr_2)\n\n{\n  int iVar1;\n  char *string_1;\n  undefined8 *ptr_3;\n  undefined8 result;\n  long value;\n  undefined8 *ptr_4;\n  undefined4 *ptr_5;\n  byte byte_val;\n  undefined result_array [16];\n  \n  byte_val = 0;\n  string_1 = (char *)FUN_00109a0b(ptr_1,val_1);\n  for (array_ptr = (undefined8 *)*array_ptr; array_ptr != (undefined8 *)0x0;\n      array_ptr = (undefined8 *)*array_ptr) {\n    for (ptr_3 = (undefined8 *)array_ptr[1]; ptr_3 != (undefined8 *)0x0;\n        ptr_3 = (undefined8 *)*ptr_3) {\n      if ((undefined8 *)ptr_3[2] != (undefined8 *)0x0) {\n        for (ptr_4 = *(undefined8 **)(undefined8 *)ptr_3[2]; ptr_4 != (undefined8 *)0x0;\n            ptr_4 = (undefined8 *)*ptr_4) {\n          if ((*(int *)((long)ptr_4 + 0x14) == 1) && (*(char *)ptr_4[1] == *string_1)) {\n            iVar1 = strcmp((char *)ptr_4[1],string_1);\n            if (iVar1 == 0) {\n              value = ptr_4[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(string_1);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  ptr_3 = *(undefined8 **)(struct_ptr + 0x1a0);\n  do {\n    if (ptr_3 == (undefined8 *)0x0) {\n      ptr_3 = (undefined8 *)xmalloc(0x28);\n      result = *(undefined8 *)(struct_ptr + 0x1a0);\n      ptr_5 = (undefined4 *)((long)ptr_3 + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *ptr_5 = 0;\n        ptr_5 = ptr_5 + (ulong)byte_val * -2 + 1;\n      }\n      *(undefined4 *)(ptr_3 + 2) = val_2;\n      *ptr_3 = result;\n      ptr_3[1] = string_1;\n      result = FUN_00113e23(ptr_3 + 3,string_1);\n      *(undefined8 **)(struct_ptr + 0x1a0) = ptr_3;\n      ptr_3[4] = result;\nLAB_0010b0e7:\n      value = ptr_3[4];\nLAB_0010b0eb:\n      result_array._8_8_ = ptr_2;\n      result_array._0_8_ = value;\n      return result_array;\n    }\n    if (*(char *)ptr_3[1] == *string_1) {\n      iVar1 = strcmp((char *)ptr_3[1],string_1);\n      if (iVar1 == 0) {\n        if (*(int *)(ptr_3 + 2) == 0) {\n          *(undefined4 *)(ptr_3 + 2) = val_2;\n        }\n        free(string_1);\n        goto LAB_0010b0e7;\n      }\n    }\n    ptr_3 = (undefined8 *)*ptr_3;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "free",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_matching_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00108fe8",
                "sprintf",
                "FUN_0010d882",
                "FUN_00108fb9",
                "free",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_00112b6e",
                "FUN_0010d559",
                "strtol",
                "concat",
                "FUN_0010afd5",
                "FUN_00113d6e",
                "cplus_demangle_init_info",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00109a0b",
                "strncmp",
                "FUN_00113e5e",
                "FUN_00113bfa",
                "FUN_00113fb0",
                "strcpy",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "strcat",
                "xmalloc",
                "fprintf",
                "FUN_00109ab1",
                "strchr",
                "FUN_00113e17",
                "FUN_00109022",
                "cplus_demangle_mangled_name",
                "FUN_00109a32",
                "strcmp",
                "FUN_00113b4a",
                "strstr",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "strlen",
                "malloc",
                "strspn",
                "FUN_001129f4",
                "FUN_00112904",
                "FUN_00113da9",
                "xrealloc",
                "FUN_00113df2",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00107880",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "__format": "stabs_message",
                "lVar1": "stab_name",
                "lVar2": "loop_index",
                "lVar3": "stab_offset",
                "piVar4": "stab_entry",
                "iVar5": "iteration_count"
            },
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 arg1,undefined8 arg2,undefined8 arg3)\n\n{\n  char *stabs_message;\n  long stab_name;\n  long loop_index;\n  long stab_offset;\n  int *stab_entry;\n  int iteration_count;\n  \n  stabs_message = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,stabs_message);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iteration_count = DAT_001278a0;\n  do {\n    loop_index = (long)iteration_count;\n    stab_offset = loop_index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + stab_offset);\n    if ((&DAT_00127730)[loop_index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + stab_offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + stab_offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[loop_index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iteration_count = (iteration_count + 1) % 0x10;\n  } while (DAT_001278a0 != iteration_count);\n  return arg3;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_stab_name",
                "fputc",
                "fwrite",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_copy_data_00109c2e",
                "param_1": "ptr_data",
                "param_2": "data",
                "param_3": "total_size",
                "param_4": "code",
                "param_5": "code_ptr",
                "param_6": "result",
                "lVar1": "new_data_index",
                "plVar2": "new_data_ptr",
                "lVar3": "copy_length",
                "puVar4": "temp_ptr",
                "uVar5": "current_size",
                "bVar6": "condition",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16]\nresizeAndCopyData_00109c2e(long ptr_data,long data,ulong total_size,int code,undefined4 *code_ptr,\n            undefined8 result)\n\n{\n  long new_data_index;\n  long *new_data_ptr;\n  long copy_length;\n  undefined *temp_ptr;\n  ulong current_size;\n  byte condition;\n  undefined return_value [16];\n  \n  condition = 0;\n  total_size = total_size & 0xffffffff;\n  current_size = *(ulong *)(ptr_data + 0x1b0);\n  if (current_size <= total_size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= total_size; current_size = current_size * 2) {\n    }\n    new_data_index = xrealloc(*(undefined8 *)(ptr_data + 0x1a8),current_size * 0x18);\n    *(long *)(ptr_data + 0x1a8) = new_data_index;\n    temp_ptr = (undefined *)(*(long *)(ptr_data + 0x1b0) * 0x18 + new_data_index);\n    for (copy_length = (current_size - *(long *)(ptr_data + 0x1b0)) * 0x18; copy_length != 0; copy_length = copy_length + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)condition * -2 + 1;\n    }\n    *(ulong *)(ptr_data + 0x1b0) = current_size;\n  }\n  new_data_ptr = (long *)(total_size * 0x18 + *(long *)(ptr_data + 0x1a8));\n  if (*new_data_ptr == 0) {\n    new_data_index = *(long *)(ptr_data + 0x68);\n    *new_data_ptr = new_data_index;\n    *(long *)(ptr_data + 0x68) = new_data_index + 1;\n    new_data_ptr[1] = data;\n    *(int *)(new_data_ptr + 2) = code;\n  }\n  if (code == 0) {\n    *(undefined4 *)(new_data_ptr + 2) = 0;\n    *(undefined4 *)((long)new_data_ptr + 0x14) = *code_ptr;\n  }\n  else {\n    *code_ptr = *(undefined4 *)((long)new_data_ptr + 0x14);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = *new_data_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_copy_data_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_bad_format_error_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "translateText"
            },
            "code": "\nvoid displayBadFormatError_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "validate_and_process_param_00112996",
                "param_1": "param_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 validate_and_process_param_00112996(long param_ptr,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(param_ptr + 8) != 0) && (*(long *)(param_ptr + 0x10) != 0)) {\n    offset = *(long *)(param_ptr + 0x10) + 0x10;\n    if (*(long *)(param_ptr + 0x20) != 0) {\n      offset = *(long *)(param_ptr + 0x20) + 0x28;\n    }\n    result = FUN_00112925(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "validate_and_process_param_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "find_debug_info_0010c7a0",
                "param_1": "debuggingContext",
                "param_2": "classId",
                "param_3": "type",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "lVar3": "tempVar3",
                "piVar4": "tempVar4",
                "__s1": "tempVar5",
                "cVar5": "tempVar6",
                "iVar6": "tempVar7",
                "puVar7": "tempVar8",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] findDebugInfo_0010c7a0(long debuggingContext,char *classId,int *type,undefined8 param_4)\n\n{\n  undefined8 tempVar1;\n  uint tempVar2;\n  long tempVar3;\n  int *tempVar4;\n  char *tempVar5;\n  char tempVar6;\n  int tempVar7;\n  undefined8 *tempVar8;\n  undefined result [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  tempVar3 = *(long *)(type + 4);\n  tempVar8 = (undefined8 *)(ulong)*(uint *)(tempVar3 + 0xc);\n  if (*(uint *)(tempVar3 + 0xc) <= *(uint *)(debuggingContext + 0x38)) {\n    for (tempVar8 = *(undefined8 **)(debuggingContext + 0x50); tempVar8 != (undefined8 *)0x0;\n        tempVar8 = (undefined8 *)*tempVar8) {\n      tempVar4 = (int *)tempVar8[1];\n      if (*tempVar4 == *type) {\n        tempVar5 = (char *)tempVar8[2];\n        if (classId == (char *)0x0) {\n          if (tempVar5 == (char *)0x0) {\nLAB_0010c82c:\n            tempVar6 = FUN_0010922b(debuggingContext,tempVar4,type);\n            if (tempVar6 != '\\0') {\n              tempVar2 = *(uint *)(*(long *)(tempVar8[1] + 0x10) + 0xc);\n              tempVar8 = (undefined8 *)(ulong)tempVar2;\n              *(uint *)(tempVar3 + 0xc) = tempVar2;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((tempVar5 != (char *)0x0) && (*tempVar5 == *classId)) &&\n                (tempVar7 = strcmp(tempVar5,classId), tempVar7 == 0)) goto LAB_0010c82c;\n      }\n    }\n    tempVar7 = *(int *)(debuggingContext + 0x34) + 1;\n    *(int *)(debuggingContext + 0x34) = tempVar7;\n    *(int *)(tempVar3 + 0xc) = tempVar7;\n    tempVar8 = (undefined8 *)xmalloc(0x18);\n    tempVar1 = *(undefined8 *)(debuggingContext + 0x50);\n    tempVar8[2] = classId;\n    *(undefined8 **)(debuggingContext + 0x50) = tempVar8;\n    *tempVar8 = tempVar1;\n    tempVar8[1] = type;\n  }\nLAB_0010c884:\n  result._1_7_ = (undefined7)((ulong)tempVar8 >> 8);\n  result[0] = 1;\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "find_debug_info_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "source1",
                "param_3": "source2",
                "uVar1": "source1Type",
                "uVar2": "source2Type",
                "pplVar3": "source2ptrptr",
                "ppcVar4": "source1ptrptr",
                "ppcVar5": "source2ptrptr",
                "lVar6": "source1ptr1",
                "lVar7": "source1ptr2",
                "lVar8": "source2ptr2",
                "pcVar9": "source1charptr",
                "pcVar10": "source2charptr",
                "cVar11": "checkResult",
                "bVar12": "comparisonResult",
                "iVar13": "stringComparisonResult",
                "uVar14": "temp1",
                "uVar15": "temp2",
                "puVar16": "tempPtr1",
                "puVar17": "tempPtr2",
                "plVar18": "source1ptr",
                "lVar19": "sourcePtrOffset",
                "plVar20": "source2ptr",
                "plVar21": "source1ptrarray",
                "lVar22": "sourcePtr",
                "local_70": "source2ptrarray",
                "local_58": "localList",
                "plStack_50": "plStack",
                "local_48": "localResultPtr"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *source1,long *source2)\n\n{\n  uint source1Type;\n  uint source2Type;\n  long **source2ptrptr;\n  char **source1ptrptr;\n  char **source2ptrptr;\n  long source1ptr1;\n  long source1ptr2;\n  long source2ptr2;\n  char *source1charptr;\n  char *source2charptr;\n  char checkResult;\n  byte comparisonResult;\n  int stringComparisonResult;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 *tempPtr1;\n  undefined8 *tempPtr2;\n  long *source1ptr;\n  long sourcePtrOffset;\n  long *source2ptr;\n  long *source1ptrarray;\n  long sourcePtr;\n  long *source2ptrarray;\n  undefined8 *localList;\n  long *plStack;\n  long *localResultPtr;\n  \n  source1ptr = source2;\n  if (source1 == (long *)0x0) {\nLAB_00109241:\n    return source2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (source1ptr == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    source1Type = *(uint *)source1;\n    if (source1Type == 1) goto code_r0x00109263;\n    while (source2Type = *(uint *)source2, source2Type == 1) {\n      source2 = **(long ***)source2[2];\n      if (source2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (source1 == source2) {\n      return true;\n    }\n    if (source1Type != 0x16) break;\n    if (source2Type != 0x17) goto LAB_001092cb;\n    source1 = *(long **)(source1[2] + 8);\n    if (source1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((source1Type == 0x17) && (source2Type == 0x16)) {\n    source2 = *(long **)(source2[2] + 8);\n    source1ptr = source2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*source1 != *source2) {\n    return false;\n  }\n  if (source1Type == 3) {\n    return *(char *)(source1 + 2) == *(char *)(source2 + 2);\n  }\n  if (source1Type < 4) {\n    if (source1Type == 2) {\n      return true;\n    }\n  }\n  else if (source1Type - 4 < 3) {\n    return true;\n  }\n  localList = *(undefined8 **)(param1 + 0x58);\n  for (tempPtr2 = localList; tempPtr2 != (undefined8 *)0x0; tempPtr2 = (undefined8 *)*tempPtr2) {\n    if (((long *)tempPtr2[1] == source1) && ((long *)tempPtr2[2] == source2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &localList;\n  plStack = source1;\n  localResultPtr = source2;\n  switch(source1Type) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    source1ptr = (long *)source1[2];\n    source2ptrptr = (long **)source2[2];\n    if (source1ptr == (long *)0x0) {\n      comparisonResult = source2ptrptr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (source2ptrptr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)source1ptr + 0xc)) &&\n       (*(uint *)((long)source1ptr + 0xc) == *(uint *)((long)source2ptrptr + 0xc))) goto LAB_001097af;\n    tempPtr2 = (undefined8 *)*source1ptr;\n    source2ptrarray = *source2ptrptr;\n    if (((tempPtr2 == (undefined8 *)0x0) == (source2ptrarray == (long *)0x0)) &&\n       ((((source1ptr[2] == 0) == (source2ptrptr[2] == (long *)0x0) &&\n         ((source1ptr[3] == 0) == (source2ptrptr[3] == (long *)0x0))) &&\n        ((source1ptr[4] == 0) == (source2ptrptr[4] == (long *)0x0))))) {\n      if (tempPtr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((source1ptr[4] != 0) &&\n           (checkResult = checkEquality_0010922b(param1,source1ptr[4],source2ptrptr[4]), checkResult == '\\0'))\n        goto LAB_00109382;\n        source1ptrarray = (long *)source1ptr[2];\n        if (source1ptrarray == (long *)0x0) {\nLAB_00109540:\n          tempPtr2 = (undefined8 *)source1ptr[3];\n          if (tempPtr2 == (undefined8 *)0x0) goto LAB_001097af;\n          source1ptr = source2ptrptr[3];\n          while( true ) {\n            source2ptrptr = (char **)*tempPtr2;\n            if (source2ptrptr == (char **)0x0) {\n              comparisonResult = *source1ptr == 0;\n              goto LAB_001099c4;\n            }\n            source1ptrptr = (char **)*source1ptr;\n            if (source1ptrptr == (char **)0x0) break;\n            if ((**source2ptrptr != **source1ptrptr) || (stringComparisonResult = strcmp(*source2ptrptr,*source1ptrptr), stringComparisonResult != 0))\n            break;\n            source1charptr = source2ptrptr[1];\n            source2charptr = source1ptrptr[1];\n            if ((source1charptr == (char *)0x0) != (source2charptr == (char *)0x0)) break;\n            if (source1charptr != (char *)0x0) {\n              sourcePtr = 0;\n              while( true ) {\n                source2ptrptr = *(char ***)(source1charptr + sourcePtr);\n                source1ptrptr = *(char ***)(source2charptr + sourcePtr);\n                if (source2ptrptr == (char **)0x0) break;\n                if (source1ptrptr == (char **)0x0) goto LAB_00109382;\n                if ((((**source2ptrptr != **source1ptrptr) ||\n                     ((((ulong)source2ptrptr[2] ^ (ulong)source1ptrptr[2]) & 0xffffffffffff) != 0)) ||\n                    ((source2ptrptr[3] != source1ptrptr[3] ||\n                     ((((source2ptrptr[4] == (char *)0x0) != (source1ptrptr[4] == (char *)0x0) ||\n                       (stringComparisonResult = strcmp(*source2ptrptr,*source1ptrptr), stringComparisonResult != 0)) ||\n                      (checkResult = checkEquality_0010922b(param1,source2ptrptr[1],source1ptrptr[1]), checkResult == '\\0')))))) ||\n                   ((source2ptrptr[4] != (char *)0x0 &&\n                    (checkResult = checkEquality_0010922b(param1,source2ptrptr[4],source1ptrptr[4]), checkResult == '\\0'))))\n                goto LAB_00109382;\n                sourcePtr = sourcePtr + 8;\n              }\n              if (source1ptrptr == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            tempPtr2 = tempPtr2 + 1;\n            source1ptr = source1ptr + 1;\n          }\n        }\n        else {\n          source2ptr = source2ptrptr[2];\n          for (; tempPtr2 = (undefined8 *)*source1ptrarray, tempPtr2 != (undefined8 *)0x0;\n              source1ptrarray = source1ptrarray + 1) {\n            tempPtr1 = (undefined8 *)*source2ptr;\n            if ((((tempPtr1 == (undefined8 *)0x0) ||\n                 (((tempPtr2[1] ^ tempPtr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(tempPtr2 + 2) != *(int *)(tempPtr1 + 2))) ||\n               (checkResult = checkEquality_0010922b(param1,*tempPtr2,*tempPtr1), checkResult == '\\0'))\n            goto LAB_00109382;\n            source2ptr = source2ptr + 1;\n          }\n          if (*source2ptr == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; source2ptrptr = (char **)*tempPtr2, source2ptrptr != (char **)0x0; tempPtr2 = tempPtr2 + 1) {\n          source1ptrptr = (char **)*source2ptrarray;\n          if (source1ptrptr == (char **)0x0) goto LAB_00109382;\n          source1charptr = *source1ptrptr;\n          source2charptr = *source2ptrptr;\n          if ((*source2charptr != *source1charptr) ||\n             ((((ulong)source2ptrptr[2] ^ (ulong)source1ptrptr[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)source2ptrptr + 0x14) == '\\0') {\n            if (source2ptrptr[3] == source1ptrptr[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          stringComparisonResult = strcmp(source2ptrptr[3],source1ptrptr[3]);\n          if (stringComparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          stringComparisonResult = strcmp(source2charptr,source1charptr);\n          if (((stringComparisonResult != 0) || (source2ptrptr[1] == (char *)0x0)) || (source1ptrptr[1] == (char *)0x0))\n          goto LAB_00109382;\n          temp1 = FUN_00112b6e(source1ptrptr[1],0);\n          temp2 = FUN_00112b6e(source2ptrptr[1],0);\n          checkResult = checkEquality_0010922b(param1,temp2,temp1);\n          if (checkResult == '\\0') goto LAB_00109382;\n          source2ptrarray = source2ptrarray + 1;\n        }\n        if (*source2ptrarray == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    source1ptr = (long *)source1[2];\n    source1ptrarray = (long *)source2[2];\n    if (source1ptr == (long *)0x0) {\n      comparisonResult = source1ptrarray == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (source1ptrarray == (long *)0x0) goto LAB_00109382;\n    sourcePtr = *source1ptr;\n    source1ptr1 = *source1ptrarray;\n    sourcePtrOffset = 0;\n    source1ptr2 = source1ptr[1];\n    source2ptr2 = source1ptrarray[1];\n    do {\n      source1charptr = *(char **)(sourcePtr + sourcePtrOffset);\n      if (source1charptr == (char *)0x0) {\n        comparisonResult = *(long *)(source1ptr1 + sourcePtrOffset) == 0;\n        goto LAB_001099c1;\n      }\n      source2charptr = *(char **)(source1ptr1 + sourcePtrOffset);\n      if (((source2charptr == (char *)0x0) || (*source1charptr != *source2charptr)) ||\n         (*(long *)(source1ptr2 + sourcePtrOffset) != *(long *)(source2ptr2 + sourcePtrOffset))) break;\n      stringComparisonResult = strcmp(source1charptr,source2charptr);\n      sourcePtrOffset = sourcePtrOffset + 8;\n    } while (stringComparisonResult == 0);\nLAB_00109964:\n    comparisonResult = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    comparisonResult = checkEquality_0010922b(param1,source1[2],source2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)source1[2] + 2) == *(char *)((undefined8 *)source2[2] + 2)) &&\n       (checkResult = checkEquality_0010922b(param1,*(undefined8 *)source1[2],*(undefined8 *)source2[2]),\n       checkResult != '\\0')) {\n      source1ptr = *(long **)(source1[2] + 8);\n      source1ptrarray = *(long **)(source2[2] + 8);\n      if ((source1ptr == (long *)0x0) == (source1ptrarray == (long *)0x0)) {\n        if (source1ptr == (long *)0x0) goto LAB_001097af;\n        while (((*source1ptr != 0 && (*source1ptrarray != 0)) &&\n               (checkResult = checkEquality_0010922b(param1), checkResult != '\\0'))) {\n          source1ptr = source1ptr + 1;\n          source1ptrarray = source1ptrarray + 1;\n        }\nLAB_0010995d:\n        if (*source1ptr != 0) goto LAB_00109964;\n        comparisonResult = *source1ptrarray == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    tempPtr2 = (undefined8 *)source2[2];\n    tempPtr1 = (undefined8 *)source1[2];\n    comparisonResult = 0;\n    if ((tempPtr1[1] == tempPtr2[1]) && (tempPtr1[2] == tempPtr2[2])) {\nLAB_00109862:\n      comparisonResult = checkEquality_0010922b(param1,*tempPtr1,*tempPtr2);\n    }\n    break;\n  case 0x10:\n    tempPtr2 = (undefined8 *)source2[2];\n    tempPtr1 = (undefined8 *)source1[2];\n    comparisonResult = 0;\n    if (((tempPtr1[2] == tempPtr2[2]) && (tempPtr1[3] == tempPtr2[3])) &&\n       (*(char *)(tempPtr1 + 4) == *(char *)(tempPtr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    tempPtr2 = (undefined8 *)source2[2];\n    tempPtr1 = (undefined8 *)source1[2];\n    comparisonResult = 0;\n    if (*(char *)(tempPtr1 + 1) == *(char *)(tempPtr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    checkResult = checkEquality_0010922b(param1,*(undefined8 *)source1[2],*(undefined8 *)source2[2]);\n    comparisonResult = 0;\n    if (checkResult != '\\0') {\n      comparisonResult = checkEquality_0010922b(param1,*(undefined8 *)(source1[2] + 8),*(undefined8 *)(source2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)source1[2] + 3) == *(char *)((undefined8 *)source2[2] + 3)) &&\n        (checkResult = checkEquality_0010922b(param1,*(undefined8 *)source1[2],*(undefined8 *)source2[2]),\n        checkResult != '\\0')) &&\n       (checkResult = checkEquality_0010922b(param1,*(undefined8 *)(source1[2] + 8),\n                              *(undefined8 *)(source2[2] + 8)), checkResult != '\\0')) {\n      source1ptr = *(long **)(source1[2] + 0x10);\n      source1ptrarray = *(long **)(source2[2] + 0x10);\n      if ((source1ptr == (long *)0x0) == (source1ptrarray == (long *)0x0)) {\n        if (source1ptr != (long *)0x0) {\n          while (((*source1ptr != 0 && (*source1ptrarray != 0)) &&\n                 (checkResult = checkEquality_0010922b(param1), checkResult != '\\0'))) {\n            source1ptr = source1ptr + 1;\n            source1ptrarray = source1ptrarray + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        comparisonResult = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    comparisonResult = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    source1ptr = (long *)source2[2];\n    source1ptrarray = (long *)source1[2];\n    stringComparisonResult = strcmp(*(char **)(*source1ptrarray + 8),*(char **)(*source1ptr + 8));\n    comparisonResult = 0;\n    if (stringComparisonResult == 0) {\n      comparisonResult = checkEquality_0010922b(param1,source1ptrarray[1],source1ptr[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  comparisonResult = comparisonResult & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = localList;\n  return comparisonResult;\ncode_r0x00109263:\n  source1 = **(long ***)source1[2];\n  source1ptr = source1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "FUN_0010922b",
                "strcmp",
                "FUN_00112b6e",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "archivePath",
                "cVar1": "formatCheck",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "statParameters",
                "lVar5": "breadResult",
                "uVar6": "errorMessage",
                "__format": "messageFormat",
                "puVar7": "tempDir",
                "piVar8": "errno",
                "uVar9": "errorString",
                "in_RAX": "archiveOffset",
                "pcVar10": "currentChar",
                "ppcVar11": "archiveFile",
                "lVar12": "fileSize",
                "pvVar13": "tempBuffer",
                "pcVar14": "closeFunc",
                "lVar15": "remainingSize",
                "pcVar16": "nextChar",
                "psVar17": "statInfo",
                "unaff_R14": "currentTempDir",
                "unaff_R15": "archiveInfo",
                "bVar18": "byteValue",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "extractedPaths",
                "in_stack_00000010": "currFilePtr",
                "in_stack_00000018": "tempDirPath",
                "in_stack_00000020": "archiveSource",
                "in_stack_00000028": "writeMode",
                "in_stack_00000030": "useGivenMode",
                "in_stack_000000f8": "fileMode",
                "in_stack_00000110": "bytesToRead"
            },
            "code": "\nvoid extractAndCopyArchive_001052a2(undefined8 param1,undefined8 param2,char *archivePath)\n\n{\n  char formatCheck;\n  int archType;\n  int statResult;\n  char **statParameters;\n  long breadResult;\n  undefined8 errorMessage;\n  char *messageFormat;\n  undefined8 *tempDir;\n  int *errno;\n  undefined8 errorString;\n  long archiveOffset;\n  char *currentChar;\n  char **archiveFile;\n  long fileSize;\n  void *tempBuffer;\n  code *closeFunc;\n  long remainingSize;\n  char *nextChar;\n  stat *statInfo;\n  undefined8 *currentTempDir;\n  char **archiveInfo;\n  byte byteValue;\n  undefined8 returnAddress;\n  undefined8 *extractedPaths;\n  long *currFilePtr;\n  char *tempDirPath;\n  undefined8 *archiveSource;\n  undefined8 writeMode;\n  undefined8 useGivenMode;\n  uint fileMode;\n  long bytesToRead;\n  \n  byteValue = 0;\n  currentChar = (char *)(archiveOffset + 1);\n  do {\n    if (*currentChar == '/') {\n      extractAndCopyArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(tempDirPath,&DAT_0011b47d);\n      statResult = stat(currentChar,(stat *)&stack0x00000050);\n      tempDir = currentTempDir;\n      if (-1 < statResult) {\n        fileSize = FUN_0011a0e0(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errno = __errno_location();\n          currentChar = strerror(*errno);\n          errorString = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorString,currentChar);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        currentChar = *archiveInfo;\n        *tempDir = currentTempDir;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      statResult = 0;\n      if (DAT_001279cb != '\\0') {\n        statInfo = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statInfo->st_dev = 0;\n          statInfo = (stat *)((long)statInfo + (ulong)byteValue * -8 + 4);\n        }\n        archiveFile = (char **)archiveInfo[0x1d];\n        if ((char **)archiveInfo[0x1d] == (char **)0x0) {\n          archiveFile = archiveInfo;\n        }\n        statResult = (**(code **)(archiveFile[1] + 0x1e8))(archiveInfo,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          nextChar = *archiveInfo;\n          errorString = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorString,nextChar);\n        }\n      }\n      currentTempDir = (undefined8 *)xmalloc(0x18);\n      currentTempDir[1] = currentChar;\n      *currentTempDir = tempDir;\n      currentTempDir[2] = 0;\n      formatCheck = bfd_check_format(archiveInfo,1);\n      if (formatCheck == '\\0') {\n        errorString = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,archiveInfo,0,errorString);\n        archiveFile = (char **)bfd_openw(currentChar,writeMode);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        statParameters = (char **)archiveInfo[0x1d];\n        if ((char **)archiveInfo[0x1d] == (char **)0x0) {\n          statParameters = archiveInfo;\n        }\n        archType = (**(code **)(statParameters[1] + 0x1e8))(archiveInfo,&stack0x000000e0);\n        fileSize = bytesToRead;\n        if (archType == 0) {\n          if (bytesToRead < 0) {\n            errorString = FUN_001125fa(archiveInfo);\n            errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(errorMessage,errorString);\n          }\n          else {\n            archType = bfd_seek(archiveInfo,0,0);\n            if (archType == 0) {\n              if (DAT_001279c9 != '\\0') {\n                nextChar = *archiveFile;\n                errorString = FUN_001125fa(archiveInfo);\n                messageFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(messageFormat,errorString,nextChar);\n              }\n              tempBuffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - remainingSize) {\n                remainingSize = 0x2000;\n                if (fileSize < 0x2001) {\n                  remainingSize = fileSize;\n                }\n                breadResult = bfd_bread(tempBuffer,remainingSize,archiveInfo);\n                statParameters = archiveInfo;\n                if ((remainingSize != breadResult) ||\n                   (breadResult = bfd_bwrite(tempBuffer,remainingSize,archiveFile), statParameters = archiveFile, remainingSize != breadResult\n                   )) {\n                  FUN_001126c0(0,statParameters,0,0);\n                  free(tempBuffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archiveFile,fileMode | 0x100);\n              free(tempBuffer);\n              formatCheck = bfd_close_all_done(archiveFile);\n              if (formatCheck == '\\0') {\n                FUN_001126c0(currentChar,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorString = FUN_001125fa(archiveInfo);\n            FUN_0011a110(errorString);\n          }\n        }\n        else {\n          FUN_001126c0(0,archiveInfo,0,0);\n        }\nLAB_00104f00:\n        formatCheck = bfd_close_all_done(archiveFile);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (useGivenMode._7_1_ == '\\0') {\n          archiveFile = (char **)bfd_openw(currentChar,*(undefined8 *)archiveInfo[1]);\n        }\n        else {\n          archiveFile = (char **)bfd_openw(currentChar,writeMode);\n        }\n        if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatCheck = FUNC_00114e50(archiveInfo,archiveFile,returnAddress);\n        if (formatCheck == '\\0') {\n          archType = bfd_get_arch(archiveInfo);\n          if (archType == 0) goto LAB_00104d75;\n          formatCheck = bfd_close_all_done(archiveFile);\n          if (formatCheck == '\\0') {\n            FUN_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatCheck = bfd_close(archiveFile);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (statResult == 0)) {\n          FUN_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,writeMode);\n        currentTempDir[2] = fileSize;\n        *currFilePtr = fileSize;\n        currFilePtr = (long *)(fileSize + 0xf0);\n        archiveFile = (char **)bfd_openr_next_archived_file(archiveSource,archiveInfo);\n        bfd_close(archiveInfo);\n        archiveInfo = archiveFile;\n      }\n      if ((DAT_00127a20 != 0) || (archiveInfo == (char **)0x0)) {\n        *currFilePtr = 0;\n        tempBuffer = (void *)xstrdup(*extractedPaths);\n        if (DAT_00127a20 == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatCheck = (*closeFunc)(extractedPaths);\n        if (formatCheck == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(tempBuffer,0,0,0);\n        }\n        free(tempBuffer);\n        tempBuffer = (void *)xstrdup(*archiveSource);\n        formatCheck = bfd_close(archiveSource);\n        if (formatCheck == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(tempBuffer,0,0,0);\n        }\n        free(tempBuffer);\n        goto LAB_00114b4b;\n      }\n      currentChar = *archiveInfo;\n      archivePath = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    nextChar = currentChar;\n    if ((*currentChar == '.') && (nextChar = currentChar + 1, currentChar[1] == '.')) {\n      nextChar = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorString = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorString,archivePath);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (currentTempDir != (undefined8 *)0x0) {\n          if (currentTempDir[2] == 0) {\n            rmdir((char *)currentTempDir[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)currentTempDir[1]);\n          }\n          free((void *)currentTempDir[1]);\n          tempDir = (undefined8 *)*currentTempDir;\n          free(currentTempDir);\n          currentTempDir = tempDir;\n        }\n        rmdir(tempDirPath);\n        free(tempDirPath);\n        return;\n      }\n    }\n    for (; (currentChar = nextChar, *nextChar != '\\0' && (*nextChar != '/')); nextChar = nextChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "execute_command_0010e453",
                "param_1": "command",
                "param_2": "target",
                "param_3": "arguments",
                "lVar1": "arg_length",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formatted_command",
                "uVar4": "success",
                "lVar5": "total_length",
                "ppcVar6": "arg_ptr",
                "lVar7": "offset"
            },
            "code": "\nundefined8 execute_command_0010e453(long command,char *target,char **arguments)\n\n{\n  long arg_length;\n  char result;\n  size_t length;\n  undefined2 *formatted_command;\n  undefined8 success;\n  long total_length;\n  char **arg_ptr;\n  long offset;\n  \n  if (arguments == (char **)0x0) {\n    if (target != (char *)0x0) {\n      length = strlen(target);\n      formatted_command = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formatted_command,\"xe%s:\",target);\nLAB_0010e578:\n      result = FUN_00109b52(command,formatted_command,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    success = 0;\n  }\n  else {\n    total_length = 10;\n    arg_ptr = arguments;\n    if (target != (char *)0x0) {\n      length = strlen(target);\n      total_length = length + 10;\n    }\n    for (; *arg_ptr != (char *)0x0; arg_ptr = arg_ptr + 1) {\n      length = strlen(*arg_ptr);\n      total_length = total_length + 0x14 + length;\n    }\n    formatted_command = (undefined2 *)xmalloc(total_length);\n    if (target == (char *)0x0) {\n      *formatted_command = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(command + 0x68);\n      *(long *)(command + 0x68) = total_length + 1;\n      sprintf((char *)formatted_command,\"%s:T%ld=e\",target,total_length);\n    }\n    offset = 0;\n    while( true ) {\n      arg_length = *(long *)((long)arguments + offset);\n      length = strlen((char *)formatted_command);\n      if (arg_length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_command + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_command + length) = 0x3b;\n    if (target == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(command,0x80,0,0,formatted_command);\n    if ((result == '\\0') || (result = FUN_00109cf4(command,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_command);\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_command_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_process_data_00109d5c",
                "param_1": "data",
                "lVar1": "timestamp",
                "uVar2": "result"
            },
            "code": "\nundefined8 checkAndProcessData_00109d5c(undefined8 data)\n\n{\n  long timestamp;\n  undefined8 result;\n  \n  timestamp = FUN_00109c2e();\n  if (-1 < timestamp) {\n    result = FUN_00109cf4(data,timestamp,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "extra_param",
                "extraout_RDX": "extra_result",
                "in_R10": "auxiliary_param",
                "cVar1": "success_flag",
                "iVar2": "counter",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] update_max_value_0010ed2c(long data,ulong new_value,undefined8 extra_param)\n\n{\n  char success_flag;\n  int counter;\n  undefined8 extra_result;\n  ulong result;\n  undefined8 auxiliary_param;\n  undefined return_value [16];\n  \n  if (*(ulong *)(data + 0x1f0) < new_value) {\n    *(ulong *)(data + 0x1f0) = new_value;\n  }\n  if (*(long *)(data + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data + 0x1f8) != 0) {\n      counter = *(int *)(data + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(data + 0x1f8) = counter;\n      if (counter != 0) {\n        return_value = FUN_0010e2f0(data,0xe0,0,new_value - *(long *)(data + 0x200),0,auxiliary_param);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success_flag = FUN_0010e2f0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (success_flag != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      extra_param = extra_result;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  return_value._0_8_ = result & 0xffffffff;\n  return_value._8_8_ = auxiliary_param;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_max_value_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "memoryBlock1",
                "param_2": "memoryBlock2",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "block1Size",
                "uVar2": "block2Size",
                "iVar3": "comparisonResult",
                "extraout_var": "extraVar",
                "uVar4": "finalResult",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *memoryBlock1,ulong *memoryBlock2,undefined8 param1,undefined8 param2)\n\n{\n  ulong block1Size;\n  ulong block2Size;\n  int comparisonResult;\n  undefined4 extraVar;\n  ulong finalResult;\n  undefined returnValue [16];\n  \n  finalResult = *memoryBlock1;\n  if (*memoryBlock2 <= *memoryBlock1) {\n    finalResult = *memoryBlock2;\n  }\n  comparisonResult = memcmp((void *)(memoryBlock1[3] + 3),(void *)(memoryBlock2[3] + 3),finalResult - 3);\n  finalResult = CONCAT44(extraVar,comparisonResult);\n  if (comparisonResult == 0) {\n    block1Size = memoryBlock1[8];\n    if (block1Size < memoryBlock2[7]) {\n      finalResult = 0xffffffff;\n    }\n    else {\n      block2Size = memoryBlock2[8];\n      if (block2Size < memoryBlock1[7]) {\n        finalResult = 1;\n      }\n      else {\n        finalResult = 0xffffffff;\n        if (memoryBlock2[7] <= memoryBlock1[7]) {\n          if (block2Size < block1Size) {\n            finalResult = 1;\n          }\n          else {\n            finalResult = 0xffffffff;\n            if (block2Size <= block1Size) {\n              if (memoryBlock1[2] == 0x100) {\n                finalResult = (ulong)-(uint)(memoryBlock2[2] != 0x100);\n              }\n              else {\n                finalResult = (ulong)(memoryBlock2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = param2;\n  returnValue._0_8_ = finalResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_relocs_001163d0",
                "param_1": "param_elf_header",
                "param_2": "param_program_header",
                "param_3": "param_size",
                "param_4": "param_output",
                "uVar1": "result",
                "uVar2": "elf_header_copy",
                "uVar3": "program_header_copy",
                "bVar4": "is_valid",
                "puVar5": "ptr",
                "iVar6": "size_check",
                "uVar7": "warning_msg",
                "lVar8": "length",
                "__ptr": "ptr_relocs",
                "uVar9": "temp",
                "uVar10": "temp1",
                "puVar17": "ptr_reloc_entry",
                "uVar11": "reloc_entry_temp1",
                "uVar12": "reloc_entry_temp2",
                "uVar13": "reloc_entry_temp3",
                "uVar14": "temp2",
                "uVar15": "temp3",
                "uVar16": "reloc_remaining",
                "puVar18": "reloc_description",
                "cVar19": "reloc_note_type",
                "puVar20": "reloc_name",
                "iVar21": "loop_counter",
                "puVar22": "reloc_entry",
                "puVar23": "ptr_reloc",
                "uVar24": "uVar24_temp",
                "__nmemb": "array_length",
                "puVar25": "ptr_reloc_entry_temp",
                "bVar26": "bVar26_temp",
                "local_88": "local_var1",
                "uStack_80": "local_var2",
                "local_70": "local_var3",
                "local_68": "remaining_size",
                "local_60": "relocs_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_relocs_001163d0(undefined8 *param_elf_header,undefined8 *param_program_header,ulong param_size,undefined *param_output)\n\n{\n  ulong result;\n  undefined8 elf_header_copy;\n  undefined8 program_header_copy;\n  bool is_valid;\n  ulong *ptr;\n  int size_check;\n  undefined8 warning_msg;\n  long length;\n  void *ptr_relocs;\n  ulong temp;\n  ulong temp1;\n  ulong reloc_entry_temp1;\n  ulong reloc_entry_temp2;\n  undefined *ptr_relocs_00;\n  ulong reloc_entry_temp3;\n  ulong temp2;\n  ulong temp3;\n  ulong reloc_remaining;\n  ulong *ptr_reloc_entry;\n  undefined *reloc_description;\n  char reloc_note_type;\n  undefined *reloc_name;\n  int loop_counter;\n  undefined *reloc_entry;\n  ulong *ptr_reloc;\n  ulong uVar24_temp;\n  size_t array_length;\n  ulong *ptr_reloc_entry_temp;\n  byte bVar26_temp;\n  ulong local_var1;\n  ulong local_var2;\n  ulong local_var3;\n  ulong remaining_size;\n  ulong *relocs_array;\n  \n  bVar26_temp = 0;\n  length = bfd_get_reloc_upper_bound();\n  remaining_size = param_size;\n  if (0 < length) {\n    ptr_relocs = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param_elf_header,param_program_header,ptr_relocs,DAT_001278b0);\n    free(ptr_relocs);\n    if (length != 0) {\n      if (_DAT_00127a24 == 0) {\n        elf_header_copy = *param_elf_header;\n        program_header_copy = *param_program_header;\n        warning_msg = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(warning_msg,elf_header_copy,program_header_copy);\n      }\n      relocs_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  relocs_array = (ulong *)xcalloc(param_size / 0xc,0x48,param_size % 0xc);\n  local_var1 = 0;\n  local_var3 = 0;\n  reloc_remaining = param_size;\n  temp3 = 0;\n  ptr_reloc = relocs_array;\n  temp2 = 0;\n  reloc_entry = param_output;\n  while (0xb < reloc_remaining) {\n    temp1 = (**(code **)(param_elf_header[1] + 0x40))(reloc_entry);\n    *ptr_reloc = temp1;\n    temp1 = (**(code **)(param_elf_header[1] + 0x40))(reloc_entry + 4);\n    ptr_reloc[1] = temp1;\n    reloc_entry_temp1 = (**(code **)(param_elf_header[1] + 0x40))(reloc_entry + 8);\n    temp1 = *ptr_reloc;\n    ptr_reloc[2] = reloc_entry_temp1;\n    reloc_entry_temp2 = ptr_reloc[1];\n    reloc_entry_temp3 = temp1 + 3 & 0xfffffffffffffffc;\n    ptr_reloc[6] = reloc_entry_temp3;\n    if (reloc_entry_temp2 != (reloc_entry_temp2 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < reloc_entry_temp1 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = reloc_entry_temp3 + reloc_entry_temp2 + 0xc;\n    if (reloc_remaining < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp1 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr_reloc[3] = (ulong)(reloc_entry + 0xc);\n    ptr_reloc[4] = (ulong)(reloc_entry + reloc_entry_temp3 + 0xc);\n    reloc_remaining = reloc_remaining + (-0xc - (reloc_entry_temp3 + reloc_entry_temp2));\n    if (temp1 != 2) {\n      if (reloc_entry[0xc] == '$') {\n        if ((reloc_entry[0xd] == '\\x01') && (reloc_entry[0xe] == '1')) {\n          reloc_remaining = FUN_00116490();\n          return reloc_remaining;\n        }\n      }\n      else if ((((4 < temp1) && (reloc_entry[0xc] == 'G')) && (reloc_entry[0xd] == 'A')) &&\n              ((reloc_entry[0xe] == '$' && (reloc_entry[0xf] == '\\x01')))) {\n        if (reloc_entry[0x10] == '2') {\n          reloc_remaining = FUN_00116490();\n          return reloc_remaining;\n        }\n        if (reloc_entry[0x10] == '3') {\n          reloc_remaining = FUN_00116490();\n          return reloc_remaining;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp = temp3;\n    uVar24_temp = temp2;\n    if (reloc_entry_temp2 == 0) {\n      if (reloc_entry_temp1 == 0x100) {\n        ptr_reloc[7] = local_var1;\nLAB_001164af:\n        reloc_entry_temp2 = temp2;\n        uVar24_temp = temp2;\n      }\n      else {\n        ptr_reloc[7] = local_var3;\nLAB_0011669e:\n        temp = temp3;\n        reloc_entry_temp2 = temp3;\n      }\n    }\n    else {\n      if (reloc_entry_temp2 != 0x10) {\n        if (reloc_entry_temp2 < 0x11) {\n          if (reloc_entry_temp2 == 4) {\n            reloc_entry_temp1 = (**(code **)(param_elf_header[1] + 0x40))();\n            reloc_entry_temp2 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (reloc_entry_temp2 == 8) {\n            reloc_remaining = FUN_001086af();\n            return reloc_remaining;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      reloc_entry_temp1 = (**(code **)(param_elf_header[1] + 0x28))(reloc_entry + reloc_entry_temp3 + 0xc);\n      reloc_entry_temp2 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (reloc_entry_temp2 < reloc_entry_temp1) {\n        reloc_entry_temp1 = reloc_entry_temp2;\n      }\nLAB_00116631:\n      if (ptr_reloc[2] == 0x100) {\n        if (reloc_entry_temp1 == 0) {\n          reloc_entry_temp1 = local_var1;\n        }\n        temp1 = *ptr_reloc;\n        ptr_reloc[7] = reloc_entry_temp1;\n        uVar24_temp = reloc_entry_temp2;\n        local_var1 = reloc_entry_temp1;\n        if (reloc_entry_temp2 == 0) goto LAB_001164af;\n      }\n      else {\n        if (reloc_entry_temp1 == 0) {\n          reloc_entry_temp1 = local_var3;\n        }\n        temp1 = *ptr_reloc;\n        ptr_reloc[7] = reloc_entry_temp1;\n        temp = reloc_entry_temp2;\n        local_var3 = reloc_entry_temp1;\n        if (reloc_entry_temp2 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr_reloc[8] = reloc_entry_temp2;\n    if (*(char *)((ptr_reloc[3] - 1) + temp1) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_reloc = ptr_reloc + 9;\n    temp3 = temp;\n    temp2 = uVar24_temp;\n    reloc_entry = reloc_entry + result;\n  }\n  if (reloc_remaining == 0) {\n    elf_header_copy = *param_elf_header;\n    program_header_copy = *param_program_header;\n    warning_msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(warning_msg,elf_header_copy,program_header_copy);\n    array_length = ((long)ptr_reloc - (long)relocs_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(relocs_array,array_length,0x48,FUN_0011a1b0);\n    for (ptr_reloc_entry = relocs_array; ptr_reloc_entry < ptr_reloc; ptr_reloc_entry = ptr_reloc_entry + 9) {\n      reloc_remaining = ptr_reloc_entry[2];\n      if (reloc_remaining != 0) {\n        temp3 = ptr_reloc_entry[7];\n        temp2 = ptr_reloc_entry[8];\n        ptr_reloc_entry_temp = ptr_reloc_entry;\n        loop_counter = 0;\n        if (temp3 == temp2) {\n          ptr_reloc_entry[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = ptr_reloc_entry_temp;\n              ptr_reloc_entry_temp = ptr + -9;\n              if (ptr_reloc_entry_temp < relocs_array) goto LAB_001167f5;\n              temp1 = ptr[-7];\n            } while (temp1 == 0);\n            if ((*ptr_reloc_entry_temp != *ptr_reloc_entry) ||\n               (size_check = memcmp((void *)ptr[-6],(void *)ptr_reloc_entry[3],*ptr_reloc_entry), size_check != 0)) break;\n            reloc_entry_temp2 = ptr[-2];\n            reloc_entry_temp1 = ptr[-1];\n            if (temp3 == reloc_entry_temp2) {\n              if (temp2 == reloc_entry_temp1) {\n                ptr_reloc_entry[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp2 <= reloc_entry_temp1) {\n                ptr_reloc_entry[2] = 0;\n                break;\n              }\n              if (reloc_entry_temp1 < temp3) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < reloc_entry_temp1) || (temp3 <= (reloc_entry_temp1 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((reloc_remaining == 0x101) == (temp1 == 0x101)) {\n                if (reloc_entry_temp1 <= temp2) {\n                  reloc_entry_temp1 = temp2;\n                }\n                if (reloc_entry_temp2 < temp3) {\n                  temp3 = reloc_entry_temp2;\n                }\n                ptr[-1] = reloc_entry_temp1;\n                ptr[-2] = temp3;\n                ptr_reloc_entry[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (reloc_entry_temp2 <= temp3) goto LAB_001167a6;\n              if (reloc_entry_temp1 < temp3) goto LAB_0010852c;\n              if (temp2 < temp3) {\n                if ((0xfffffffffffffff0 < temp2) || (reloc_entry_temp2 <= (temp2 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp2 != reloc_entry_temp1) goto LAB_001167b8;\n            }\nFUN_00116852:\n            is_valid = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (is_valid);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(relocs_array,array_length,0x48,FUN_0011a250);\n    ptr_relocs_00 = (undefined *)xmalloc(param_size * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    reloc_entry = ptr_relocs_00;\n    for (ptr_reloc_entry = relocs_array; ptr_reloc_entry < ptr_reloc; ptr_reloc_entry = ptr_reloc_entry + 9) {\n      if (ptr_reloc_entry[2] != 0) {\n        reloc_description = reloc_entry + 0xc;\n        if ((ptr_reloc_entry[7] == local_var3) && (ptr_reloc_entry[8] == local_var2)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*ptr_reloc_entry,reloc_entry);\n          (**(code **)(param_elf_header[1] + 0x50))(0,reloc_entry + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(ptr_reloc_entry[2],reloc_entry + 8);\n          temp3 = ptr_reloc_entry[6];\n          reloc_remaining = *ptr_reloc_entry;\n          reloc_entry = (undefined *)ptr_reloc_entry[3];\n          reloc_name = reloc_description;\n          for (temp2 = reloc_remaining; temp2 != 0; temp2 = temp2 - 1) {\n            *reloc_name = *reloc_entry;\n            reloc_entry = reloc_entry + (ulong)bVar26_temp * -2 + 1;\n            reloc_name = reloc_name + (ulong)bVar26_temp * -2 + 1;\n          }\n          if (reloc_remaining < temp3) {\n            for (length = temp3 - reloc_remaining; length != 0; length = length + -1) {\n              *reloc_name = 0;\n              reloc_name = reloc_name + (ulong)bVar26_temp * -2 + 1;\n            }\n          }\n          reloc_entry = reloc_description + temp3;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            reloc_note_type = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            reloc_note_type = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(reloc_note_type,reloc_entry + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(ptr_reloc_entry[2],reloc_entry + 8);\n          reloc_remaining = *ptr_reloc_entry;\n          reloc_entry = (undefined *)ptr_reloc_entry[3];\n          reloc_name = reloc_description;\n          for (temp3 = reloc_remaining; temp3 != 0; temp3 = temp3 - 1) {\n            *reloc_name = *reloc_entry;\n            reloc_entry = reloc_entry + (ulong)bVar26_temp * -2 + 1;\n            reloc_name = reloc_name + (ulong)bVar26_temp * -2 + 1;\n          }\n          temp3 = ptr_reloc_entry[6];\n          if (reloc_remaining < temp3) {\n            for (length = temp3 - reloc_remaining; length != 0; length = length + -1) {\n              *reloc_name = 0;\n              reloc_name = reloc_name + (ulong)bVar26_temp * -2 + 1;\n            }\n          }\n          length = param_elf_header[1];\n          reloc_description = reloc_description + temp3;\n          reloc_entry = reloc_description + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptr_reloc_entry[7],reloc_description);\n            (**(code **)(param_elf_header[1] + 0x38))(ptr_reloc_entry[8],reloc_entry);\n            reloc_entry = reloc_description + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptr_reloc_entry[7],reloc_description);\n            (**(code **)(param_elf_header[1] + 0x50))(ptr_reloc_entry[8],reloc_description + 4);\n          }\n          local_var3 = ptr_reloc_entry[7];\n          local_var2 = ptr_reloc_entry[8];\n        }\n      }\n    }\n    temp3 = (long)reloc_entry - (long)ptr_relocs_00;\n    reloc_remaining = temp3;\n    reloc_entry = ptr_relocs_00;\n    remaining_size = param_size;\n    if (temp3 < param_size) {\n      for (; remaining_size = temp3, reloc_remaining != 0; reloc_remaining = reloc_remaining - 1) {\n        *param_output = *reloc_entry;\n        reloc_entry = reloc_entry + (ulong)bVar26_temp * -2 + 1;\n        param_output = param_output + (ulong)bVar26_temp * -2 + 1;\n      }\n    }\n    free(ptr_relocs_00);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param_elf_header,param_program_header,length);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(relocs_array);\n  return remaining_size;\n}\n\n",
            "called": [
                "xcalloc",
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_relocs_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "localizedMessage"
            },
            "code": "\nvoid printUsageAndExit_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *localizedMessage;\n  \n  programName = DAT_001275e0;\n  localizedMessage = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedMessage,programName);\n  localizedMessage = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedMessage);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    localizedMessage = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_file_format_and_arch_00108c86",
                "param_1": "filePointer",
                "cVar1": "fileFormatCheck",
                "iVar2": "archCheck",
                "sVar3": "stringLength",
                "puVar4": "allocatedMemory",
                "lVar5": "filePointerOffset",
                "__s": "fileContent",
                "__s1": "architecture",
                "puVar6": "allocatedMemoryOffset",
                "uVar7": "returnValue",
                "bVar8": "byteCheck"
            },
            "code": "\nundefined8 extractFileFormatAndArch_00108c86(long *filePointer)\n\n{\n  char fileFormatCheck;\n  int archCheck;\n  size_t stringLength;\n  undefined2 *allocatedMemory;\n  long filePointerOffset;\n  char *fileContent;\n  char *architecture;\n  undefined2 *allocatedMemoryOffset;\n  undefined8 returnValue;\n  byte byteCheck;\n  \n  byteCheck = 0;\n  filePointerOffset = *filePointer;\n  fileContent = (char *)(filePointerOffset + 4);\n  fileFormatCheck = FUN_00113fb0(fileContent,&DAT_0011b73b);\n  if (fileFormatCheck == '\\0') {\n    fileFormatCheck = FUN_00113fb0(fileContent,\"bsdrv-\");\n    if (fileFormatCheck == '\\0') {\n      fileFormatCheck = FUN_00113fb0(fileContent,\"rtdrv-\");\n      if (fileFormatCheck == '\\0') {\n        return 0xffffffff;\n      }\n      fileContent = (char *)(filePointerOffset + 6);\n      returnValue = 0xc;\n    }\n    else {\n      fileContent = (char *)(filePointerOffset + 6);\n      returnValue = 0xb;\n    }\n  }\n  else {\n    returnValue = 10;\n  }\n  stringLength = strlen(fileContent);\n  allocatedMemory = (undefined2 *)xmalloc(stringLength + 8);\n  architecture = fileContent + 4;\n  allocatedMemoryOffset = allocatedMemory;\n  for (filePointerOffset = stringLength + 1; filePointerOffset != 0; filePointerOffset = filePointerOffset + -1) {\n    *(char *)allocatedMemoryOffset = *fileContent;\n    fileContent = fileContent + (ulong)byteCheck * -2 + 1;\n    allocatedMemoryOffset = (undefined2 *)((long)allocatedMemoryOffset + (ulong)byteCheck * -2 + 1);\n  }\n  *(undefined *)(allocatedMemory + 1) = 0x69;\n  *allocatedMemory = 0x6570;\n  archCheck = strcmp(architecture,\"ia32\");\n  if (archCheck == 0) {\n    *(undefined *)((long)allocatedMemory + 7) = 0x36;\n    *(undefined2 *)((long)allocatedMemory + 5) = 0x3833;\n  }\n  else {\n    archCheck = strcmp(architecture,\"x86_64\");\n    if (archCheck == 0) {\n      *(undefined *)((long)allocatedMemory + 7) = 0x2d;\n    }\n    else {\n      archCheck = strcmp(architecture,\"aarch64\");\n      if (archCheck == 0) {\n        *(undefined8 *)((long)allocatedMemory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *filePointer = (long)allocatedMemory;\n  return returnValue;\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_file_format_and_arch_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatMessage;\n  \n  formatMessage = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatMessage,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_and_return_value_001053d5",
                "unaff_R12": "ptr",
                "unaff_R14": "ptrArray"
            },
            "code": "\nundefined4 closeAndReturnValue_001053d5(void)\n\n{\n  long ptr;\n  undefined8 *ptrArray;\n  \n  FUN_0011a110(*ptrArray);\n  *(undefined4 *)(ptr + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptr + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "close_and_return_value_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "verify_and_set_attributes_00104bba",
                "in_EAX": "eaxFlag",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpFlag",
                "unaff_R14": "r14Offset"
            },
            "code": "\nvoid verifyAndSetAttributes_00104bba(void)\n\n{\n  uint eaxFlag;\n  undefined8 errorMessage;\n  uint ebpFlag;\n  long r14Offset;\n  \n  if ((eaxFlag & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((eaxFlag & 8) == 0) || ((ebpFlag & 0x10) == 0)) && ((ebpFlag & 0x18) != 0x18)) {\n    if ((((eaxFlag & 0x20) == 0) || ((ebpFlag & 0x40) == 0)) && ((ebpFlag & 0x60) != 0x60)) {\n      *(uint *)(r14Offset + 0x14) = eaxFlag | ebpFlag;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "verify_and_set_attributes_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_string_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "newString",
                "lVar2": "i",
                "puVar3": "destination",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminateString_00109a0b(undefined *source,int length)\n\n{\n  undefined *newString;\n  long i;\n  undefined *destination;\n  byte increment;\n  \n  increment = 0;\n  newString = (undefined *)xmalloc((long)(length + 1));\n  destination = newString;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *destination = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destination = destination + (ulong)increment * -2 + 1;\n  }\n  newString[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_or_get_memory_0010da0b",
                "param_1": "memory",
                "param_2": "slotIndex",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "errorMessage",
                "plVar2": "newMemory",
                "lVar3": "offset",
                "lVar4": "counter",
                "uVar5": "remainingSlots",
                "bVar6": "isFirstIteration",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocateOrGetMemory_0010da0b(long **memory,ulong slotIndex,undefined8 arg1,undefined8 arg2)\n\n{\n  undefined8 errorMessage;\n  long *newMemory;\n  long offset;\n  long counter;\n  ulong remainingSlots;\n  byte isFirstIteration;\n  undefined result [16];\n  \n  isFirstIteration = 0;\n  remainingSlots = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*memory == (long *)0x0) {\n        newMemory = (long *)xmalloc(0x88);\n        *memory = newMemory;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)newMemory = 0;\n          newMemory = (long *)((long)newMemory + (ulong)isFirstIteration * -8 + 4);\n        }\n      }\n      memory = (long **)*memory;\n    }\n    offset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      offset = 0;\n    }\n    if (*memory == (long *)0x0) {\n      newMemory = (long *)xmalloc(0x88);\n      *memory = newMemory;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)newMemory = 0;\n        newMemory = (long *)((long)newMemory + (ulong)isFirstIteration * -8 + 4);\n      }\n    }\n    result._8_8_ = arg2;\n    result._0_8_ = *memory + slotIndex + offset + 1;\n    return result;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_or_get_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "puVar1": "data_structure",
                "puVar2": "ptr",
                "lVar3": "counter",
                "bVar4": "constant_value"
            },
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 input_1,undefined input_2,undefined8 input_3,undefined8 input_4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *ptr;\n  long counter;\n  byte constant_value;\n  \n  constant_value = 0;\n  data_structure = (undefined8 *)xmalloc(0x1b0);\n  ptr = data_structure;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)constant_value * -8 + 4);\n  }\n  *data_structure = input_1;\n  *(undefined *)(data_structure + 1) = input_2;\n  data_structure[2] = input_3;\n  data_structure[3] = input_4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = ptr;\n  *ptr = 0;\n  return data_structure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "deallocate_and_return_next_node_00109b2f",
                "param_1": "nodePtr",
                "__ptr": "node",
                "puVar1": "nextNode"
            },
            "code": "\nundefined8 * deallocateAndReturnNextNode_00109b2f(long nodePtr)\n\n{\n  undefined8 *node;\n  undefined8 *nextNode;\n  \n  node = *(undefined8 **)(nodePtr + 0x60);\n  if (node != (undefined8 *)0x0) {\n    nextNode = (undefined8 *)node[1];\n    *(undefined8 *)(nodePtr + 0x60) = *node;\n    free(node);\n    return nextNode;\n  }\n  return node;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e918",
                "FUN_0010a0e9",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a424",
                "FUN_0010a2b9",
                "FUN_0010e7c2",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010a83e"
            ],
            "imported": false,
            "current_name": "deallocate_and_return_next_node_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinitions_00108d9a",
                "param_1": "filename",
                "param_2": "symbol1",
                "param_3": "symbol2",
                "param_4": "result",
                "ppcVar1": "symbol_ptrs",
                "pcVar2": "symbol_ptr",
                "lVar3": "symbol_exists",
                "uVar4": "error_message",
                "plVar5": "slot_ptr"
            },
            "code": "\nundefined8 check_redefinitions_00108d9a(undefined8 filename,char *symbol1,char *symbol2,undefined8 result)\n\n{\n  char **symbol_ptrs;\n  char *symbol_ptr;\n  long symbol_exists;\n  undefined8 error_message;\n  long *slot_ptr;\n  \n  symbol_ptrs = (char **)xmalloc(0x10);\n  symbol_ptr = strdup(symbol1);\n  *symbol_ptrs = symbol_ptr;\n  symbol_ptr = strdup(symbol2);\n  error_message = DAT_001278d0;\n  symbol_ptrs[1] = symbol_ptr;\n  symbol_exists = htab_find(error_message,symbol_ptrs);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(error_message,filename,symbol1);\n  }\n  symbol_exists = htab_find(DAT_001278c8,symbol2);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(error_message,filename,symbol2);\n  }\n  slot_ptr = (long *)htab_find_slot(DAT_001278d0,symbol_ptrs,1);\n  error_message = DAT_001278c8;\n  *slot_ptr = (long)symbol_ptrs;\n  symbol_ptr = symbol_ptrs[1];\n  symbol_ptrs = (char **)htab_find_slot(error_message,symbol_ptr,1);\n  *symbol_ptrs = symbol_ptr;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_redefinitions_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "generate_formatted_string_0010e9a0",
                "param_1": "inputNumber",
                "param_2": "inputString",
                "param_3": "formatType",
                "param_4": "additionalParameter",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "randomString",
                "__s_00": "formattedString",
                "sVar3": "inputStringLength",
                "sVar4": "randomStringLength",
                "__s_01": "finalString",
                "pcVar5": "formatChar",
                "uVar6": "formatValue"
            },
            "code": "\nundefined4 generateFormattedString_0010e9a0(long inputNumber,char *inputString,undefined4 formatType,undefined8 additionalParameter)\n\n{\n  long counter;\n  undefined4 result;\n  byte *randomString;\n  byte *formattedString;\n  size_t inputStringLength;\n  size_t randomStringLength;\n  char *finalString;\n  char *formatChar;\n  undefined8 formatValue;\n  \n  randomString = (byte *)FUN_00109b2f();\n  switch(formatType) {\n  case 1:\n    formatChar = \"G\";\n    formatValue = 0x20;\n    break;\n  case 2:\n    formatChar = \"S\";\n    formatValue = 0x26;\n    break;\n  case 3:\n    formatChar = \"V\";\n    formatValue = 0x26;\n    break;\n  case 4:\n    formatChar = \"\";\n    formatValue = 0x80;\n    if (((&_sch_istable)[(ulong)*randomString * 2] & 4) == 0) {\n      counter = *(long *)(inputNumber + 0x68);\n      *(long *)(inputNumber + 0x68) = counter + 1;\n      inputStringLength = strlen((char *)randomString);\n      formattedString = (byte *)xmalloc(inputStringLength + 0x14);\n      sprintf((char *)formattedString,\"%ld=%s\",counter,randomString);\n      free(randomString);\n      randomString = formattedString;\n    }\n    break;\n  case 5:\n    formatChar = \"r\";\n    formatValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputStringLength = strlen(inputString);\n  randomStringLength = strlen((char *)randomString);\n  finalString = (char *)xmalloc(inputStringLength + 3 + randomStringLength);\n  sprintf(finalString,\"%s:%s%s\",inputString,formatChar,randomString);\n  free(randomString);\n  result = FUN_0010e2f0(inputNumber,formatValue,0,additionalParameter,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorString",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "xcalloc",
                "htab_eq_string",
                "free",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00108d9a",
                "FUN_00104cc1",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_001126c0",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "alignmentMsg",
                "lVar2": "var2",
                "cVar3": "result",
                "lVar4": "errMsg",
                "lVar5": "var5",
                "unaff_RBX": "param1",
                "unaff_RBP": "param2",
                "unaff_R12": "param3",
                "unaff_R14B": "param4",
                "unaff_R15": "param5"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long alignmentMsg;\n  long var2;\n  char result;\n  long errMsg;\n  long var5;\n  long param1;\n  long param2;\n  long param3;\n  char param4;\n  long param5;\n  \n  errMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(param5 + 0xb4) = *(undefined4 *)(param1 + 0xb4);\n  *(byte *)(param5 + 0x28) =\n       *(byte *)(param5 + 0x28) & 0xcf | *(byte *)(param1 + 0x28) & 0x30;\n  *(long *)(param1 + 0x60) = param5;\n  *(undefined8 *)(param1 + 0x58) = 0;\n  if ((*(byte *)(param1 + 0x27) & 2) != 0) {\n    alignmentMsg = *(long *)(param1 + 0xd0);\n    var5 = FUN_00115d00(alignmentMsg,*(undefined8 *)(param1 + 0xe0));\n    if ((var5 != 0) &&\n       (var2 = *(long *)(param3 + 8), *(uint *)(var5 + 0x18) = *(uint *)(var5 + 0x18) | 0x20,\n       *(int *)(var2 + 8) == 5)) {\n      *(long *)(alignmentMsg + 0xb0) = var5;\n      result = (**(code **)(*(long *)(param2 + 8) + 0x158))();\n      if (result == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(param2 + 8) + 0x158))();\n  if (result == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (param4 != '\\0') {\n    *(undefined4 *)(*(long *)(param5 + 0xd0) + 4) = 8;\n  }\n  if (errMsg != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "allocate_memory_for_type_00109022",
                "param_1": "fileNumber",
                "param_2": "typeIndices",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "currentIndex",
                "pcVar2": "errorMessage",
                "plVar3": "typePointer",
                "lVar4": "loopCounter",
                "uVar5": "typeIndex",
                "pplVar6": "typeList",
                "bVar7": "byteValue",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] allocateMemoryForType_00109022(long fileNumber,uint *typeIndices,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  uint currentIndex;\n  char *errorMessage;\n  long *typePointer;\n  long loopCounter;\n  uint typeIndex;\n  long **typeList;\n  byte byteValue;\n  undefined returnValue [16];\n  \n  byteValue = 0;\n  typeIndex = *typeIndices;\n  currentIndex = typeIndices[1];\n  if (((int)typeIndex < 0) || (*(uint *)(fileNumber + 0x80) <= typeIndex)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)typeIndex);\n  }\n  else {\n    if (-1 < (int)currentIndex) {\n      typeList = (long **)(*(long *)(fileNumber + 0x88) + (long)(int)typeIndex * 8);\n      for (typeIndex = currentIndex; 0xf < (int)typeIndex; typeIndex = typeIndex - 0x10) {\n        if (*typeList == (long *)0x0) {\n          typePointer = (long *)xmalloc(0x88);\n          *typeList = typePointer;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)typePointer = 0;\n            typePointer = (long *)((long)typePointer + (ulong)byteValue * -8 + 4);\n          }\n        }\n        typeList = (long **)*typeList;\n      }\n      if (*typeList == (long *)0x0) {\n        typePointer = (long *)xmalloc(0x88);\n        *typeList = typePointer;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)typePointer = 0;\n          typePointer = (long *)((long)typePointer + (ulong)byteValue * -8 + 4);\n        }\n      }\n      typePointer = *typeList + (long)(int)((currentIndex >> 4) * -0x10 + currentIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)currentIndex);\n  }\n  typePointer = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = typePointer;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_memory_for_type_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "auVar1": "output1",
                "uVar2": "result",
                "piVar3": "ptr1",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "file_address",
                "piVar7": "ptr2",
                "bVar8": "byte_value",
                "auVar9": "output2"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long input1,long input2,ulong input3,int input4,undefined8 input5,\n            undefined8 input6)\n\n{\n  undefined output1 [16];\n  undefined8 result;\n  int *ptr1;\n  char flag;\n  long counter;\n  long file_address;\n  int *ptr2;\n  byte byte_value;\n  undefined output2 [16];\n  \n  byte_value = 0;\n  if (input2 == 0) {\n    output1._8_8_ = 0;\n    output1._0_8_ = input3;\n    return output1 << 0x40;\n  }\n  if (input3 != 0) {\n    if ((*(long *)(input1 + 8) == 0) || (file_address = *(long *)(input1 + 0x10), file_address == 0)) {\n      result = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (input4 - 1U < 2) {\n        file_address = file_address + 0x10;\n        flag = (input4 == 1) + '\\x01';\n      }\n      else if (*(long *)(input1 + 0x20) == 0) {\n        file_address = file_address + 0x10;\n        flag = '\\0';\n      }\n      else {\n        file_address = *(long *)(input1 + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      file_address = FUN_00112925(file_address,input2,2,flag);\n      if (file_address != 0) {\n        ptr1 = (int *)xmalloc(0x18);\n        ptr2 = ptr1 + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)byte_value * -2 + 1;\n        }\n        *ptr1 = input4;\n        result = 1;\n        *(ulong *)(ptr1 + 2) = input3;\n        *(undefined8 *)(ptr1 + 4) = input5;\n        *(int **)(file_address + 0x20) = ptr1;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  output2._8_8_ = input6;\n  output2._0_8_ = result;\n  return output2;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "format_and_print_number_00109d97",
                "param_1": "inputNumber",
                "lVar1": "currentNumber",
                "local_40": "formattedNumber"
            },
            "code": "\nvoid formatAndPrintNumber_00109d97(long inputNumber)\n\n{\n  long currentNumber;\n  char formattedNumber [40];\n  \n  if (*(long *)(inputNumber + 0x70) != 0) {\n    FUN_00109cf4(inputNumber,*(long *)(inputNumber + 0x70),0);\n    return;\n  }\n  currentNumber = *(long *)(inputNumber + 0x68);\n  *(long *)(inputNumber + 0x68) = currentNumber + 1;\n  sprintf(formattedNumber,\"%ld=%ld\",currentNumber,currentNumber);\n  FUN_00109b52(inputNumber,formattedNumber,currentNumber,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "format_and_print_number_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "in_RCX": "input",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "temp3",
                "uVar9": "minimumValue",
                "uVar10": "currentValue",
                "uVar11": "value",
                "__ptr": "buffer",
                "in_stack_00000030": "stackVar1",
                "in_stack_00000038": "stackVar2",
                "param_13": "version1",
                "param_8": "version2",
                "unaff_retaddr": "returnValue",
                "param_10": "bufferSize",
                "param_9": "defaultValue",
                "param_11": "notes",
                "unaff_R14": "pointers1",
                "param_14": "pointers2",
                "param_7": "inputValue",
                "unaff_RBX": "loopCounter",
                "unaff_RBP": "temp4",
                "puVar15": "currentNote",
                "puVar16": "name",
                "cVar17": "charVar",
                "puVar18": "ptr1",
                "puVar19": "ptr2",
                "unaff_R12": "notePointer",
                "unaff_R13": "temp5",
                "uVar20": "temp6",
                "__nmemb": "count"
            },
            "code": "\nulong processBuildAttributeNotes_001086af(void)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 temp3;\n  ulong minimumValue;\n  ulong currentValue;\n  ulong value;\n  undefined *buffer;\n  ulong input;\n  ulong result2;\n  ulong result3;\n  ulong result4;\n  ulong loopCounter;\n  ulong temp4;\n  ulong *currentNote;\n  undefined *name;\n  char charVar;\n  undefined *ptr1;\n  undefined *ptr2;\n  ulong *notePointer;\n  ulong temp5;\n  ulong temp6;\n  size_t count;\n  undefined8 *pointers1;\n  ulong *ptemp11;\n  byte bVar22;\n  int iVar23;\n  ulong returnValue;\n  ulong inputValue;\n  uint version2;\n  ulong defaultValue;\n  ulong bufferSize;\n  ulong *notes;\n  undefined *stackVar1;\n  uint stackVar2;\n  uint version1;\n  undefined8 *pointers2;\n  \n  bVar22 = 0;\n  inputValue = input;\n  minimumValue = (**(code **)(pointers1[1] + 0x40))();\n  currentValue = (**(code **)(pointers1[1] + 0x40))(notePointer[4] + 4);\nLAB_0011662a:\n  result3 = temp4;\n  temp6 = temp5;\n  if (currentValue < minimumValue) {\n    minimumValue = currentValue;\n  }\n  do {\n    value = inputValue;\n    result2 = inputValue;\n    currentNote = notePointer;\n    if (notePointer[2] == 0x100) {\n      if (minimumValue == 0) {\n        minimumValue = returnValue;\n      }\n      result4 = *notePointer;\n      notePointer[7] = minimumValue;\n      temp4 = result3;\n      temp5 = currentValue;\n      returnValue = minimumValue;\n      if (currentValue == 0) goto LAB_001164af;\n    }\n    else {\n      if (minimumValue == 0) {\n        minimumValue = defaultValue;\n      }\n      result4 = *notePointer;\n      notePointer[7] = minimumValue;\n      temp4 = currentValue;\n      temp5 = temp6;\n      defaultValue = minimumValue;\n      if (currentValue == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    currentNote[8] = currentValue;\n    if (*(char *)((currentNote[3] - 1) + result4) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    notePointer = currentNote + 9;\n    if (loopCounter < 0xc) {\n      if (loopCounter != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stackVar2 | version1 | version2) != 0) {\n        if (((version1 | version2) == 0) || (stackVar2 == 0)) {\n          if (version1 == 0) {\n            if (version2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (version2 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp1 = *pointers1;\n      temp2 = *pointers2;\n      temp3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(temp3,temp1,temp2);\nLAB_0011671b:\n      count = ((long)notePointer - (long)notes >> 3) * -0x71c71c71c71c71c7;\n      qsort(notes,count,0x48,FUN_0011a1b0);\n      currentNote = notes;\n      goto LAB_001167f9;\n    }\n    currentValue = (**(code **)(pointers1[1] + 0x40))(result2);\n    *notePointer = currentValue;\n    currentValue = (**(code **)(pointers1[1] + 0x40))(result2 + 4);\n    currentNote[10] = currentValue;\n    minimumValue = (**(code **)(pointers1[1] + 0x40))(result2 + 8);\n    result4 = *notePointer;\n    currentNote[0xb] = minimumValue;\n    currentValue = currentNote[10];\n    result3 = result4 + 3 & 0xfffffffffffffffc;\n    currentNote[0xf] = result3;\n    if (currentValue != (currentValue + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < minimumValue - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    value = result3 + currentValue + 0xc;\n    if (loopCounter < value) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (result4 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    currentNote[0xc] = result2 + 0xc;\n    result = result2 + 0xc + result3;\n    currentNote[0xd] = result;\n    loopCounter = loopCounter + (-0xc - (result3 + currentValue));\n    value = result2 + value;\n    if (result4 != 2) {\n      if (*(char *)(result2 + 0xc) == '$') {\n        if ((*(char *)(result2 + 0xd) == '\\x01') && (*(char *)(result2 + 0xe) == '1')) {\n          currentValue = FUN_00116490();\n          return currentValue;\n        }\n      }\n      else if ((((4 < result4) && (*(char *)(result2 + 0xc) == 'G')) &&\n               (*(char *)(result2 + 0xd) == 'A')) &&\n              ((*(char *)(result2 + 0xe) == '$' && (*(char *)(result2 + 0xf) == '\\x01')))) {\n        if (*(char *)(result2 + 0x10) == '2') {\n          currentValue = FUN_00116490();\n          return currentValue;\n        }\n        if (*(char *)(result2 + 0x10) == '3') {\n          currentValue = FUN_00116490();\n          return currentValue;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    result3 = temp4;\n    temp6 = temp5;\n    if (currentValue == 0) {\n      if (minimumValue == 0x100) {\n        currentNote[0x10] = returnValue;\nLAB_001164af:\n        result2 = value;\n        currentValue = temp6;\n        currentNote = notePointer;\n        temp5 = temp6;\n      }\n      else {\n        currentNote[0x10] = defaultValue;\nLAB_0011669e:\n        temp4 = result3;\n        result2 = value;\n        currentValue = result3;\n        currentNote = notePointer;\n        temp5 = temp6;\n      }\n      goto LAB_001164bb;\n    }\n    if (currentValue == 0x10) break;\n    if (0x10 < currentValue) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,pointers1,pointers2,length);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (currentValue != 4) {\n      if (currentValue == 8) {\n        currentValue = processBuildAttributeNotes_001086af();\n        return currentValue;\n      }\n      goto LAB_00116679;\n    }\n    inputValue = value;\n    minimumValue = (**(code **)(pointers1[1] + 0x40))();\n    currentValue = 0xffffffffffffffff;\n  } while( true );\n  inputValue = value;\n  minimumValue = (**(code **)(pointers1[1] + 0x28))(result);\n  currentValue = (**(code **)(pointers1[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (notePointer <= currentNote) {\n    qsort(notes,count,0x48,FUN_0011a250);\n    buffer = (undefined *)xmalloc(bufferSize * 2);\n    inputValue = 0;\n    defaultValue = 0;\n    ptr2 = buffer;\n    for (currentNote = notes; currentNote < notePointer; currentNote = currentNote + 9) {\n      if (currentNote[2] != 0) {\n        ptr1 = ptr2 + 4;\n        name = ptr2 + 0xc;\n        if ((currentNote[7] == defaultValue) && (currentNote[8] == inputValue)) {\n          (**(code **)(pointers1[1] + 0x50))(*currentNote,ptr2);\n          (**(code **)(pointers1[1] + 0x50))(0,ptr1);\n          (**(code **)(pointers1[1] + 0x50))(currentNote[2],ptr2 + 8);\n          minimumValue = currentNote[6];\n          currentValue = *currentNote;\n          ptr2 = (undefined *)currentNote[3];\n          ptr1 = name;\n          for (result3 = currentValue; result3 != 0; result3 = result3 - 1) {\n            *ptr1 = *ptr2;\n            ptr2 = ptr2 + (ulong)bVar22 * -2 + 1;\n            ptr1 = ptr1 + (ulong)bVar22 * -2 + 1;\n          }\n          if (currentValue < minimumValue) {\n            for (length = minimumValue - currentValue; length != 0; length = length + -1) {\n              *ptr1 = 0;\n              ptr1 = ptr1 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          ptr2 = name + minimumValue;\n        }\n        else {\n          (**(code **)(pointers1[1] + 0x50))();\n          if (*(int *)(pointers1[1] + 8) == 5) {\n            charVar = (*(char *)(pointers1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar = '\\b';\n          }\n          (**(code **)(pointers1[1] + 0x50))(charVar,ptr1);\n          (**(code **)(pointers1[1] + 0x50))(currentNote[2],ptr2 + 8);\n          currentValue = *currentNote;\n          ptr2 = (undefined *)currentNote[3];\n          ptr1 = name;\n          for (minimumValue = currentValue; minimumValue != 0; minimumValue = minimumValue - 1) {\n            *ptr1 = *ptr2;\n            ptr2 = ptr2 + (ulong)bVar22 * -2 + 1;\n            ptr1 = ptr1 + (ulong)bVar22 * -2 + 1;\n          }\n          minimumValue = currentNote[6];\n          if (currentValue < minimumValue) {\n            for (length = minimumValue - currentValue; length != 0; length = length + -1) {\n              *ptr1 = 0;\n              ptr1 = ptr1 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          length = pointers1[1];\n          name = name + minimumValue;\n          ptr2 = name + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(pointers1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(currentNote[7],name);\n            (**(code **)(pointers1[1] + 0x38))(currentNote[8],ptr2);\n            ptr2 = name + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(currentNote[7],name);\n            (**(code **)(pointers1[1] + 0x50))(currentNote[8],name + 4);\n          }\n          defaultValue = currentNote[7];\n          inputValue = currentNote[8];\n        }\n      }\n    }\n    minimumValue = (long)ptr2 - (long)buffer;\n    currentValue = minimumValue;\n    ptr2 = buffer;\n    if (minimumValue < bufferSize) {\n      for (; bufferSize = minimumValue, currentValue != 0; currentValue = currentValue - 1) {\n        *stackVar1 = *ptr2;\n        ptr2 = ptr2 + (ulong)bVar22 * -2 + 1;\n        stackVar1 = stackVar1 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(buffer);\nLAB_001166f8:\n    free(notes);\n    return bufferSize;\n  }\n  if (currentNote[2] != 0) {\n    currentValue = currentNote[7];\n    minimumValue = currentNote[8];\n    result3 = currentNote[2];\n    ptemp11 = currentNote;\n    iVar23 = 0;\n    if (currentValue == minimumValue) {\n      currentNote[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr = ptemp11;\n          ptemp11 = ptr + -9;\n          if (ptemp11 < notes) goto LAB_001167f5;\n          temp6 = ptr[-7];\n        } while (temp6 == 0);\n        inputValue = result3;\n        if ((*ptemp11 != *currentNote) ||\n           (index = memcmp((void *)ptr[-6],(void *)currentNote[3],*currentNote), index != 0)) break;\n        result3 = ptr[-2];\n        value = ptr[-1];\n        if (currentValue == result3) {\n          if (minimumValue == value) {\n            currentNote[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (minimumValue <= value) {\n            currentNote[2] = 0;\n            break;\n          }\n          if (value < currentValue) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < value) || (currentValue <= (value + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((inputValue == 0x101) == (temp6 == 0x101)) {\n            if (value <= minimumValue) {\n              value = minimumValue;\n            }\n            if (result3 < currentValue) {\n              currentValue = result3;\n            }\n            ptr[-1] = value;\n            ptr[-2] = currentValue;\n            currentNote[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (result3 <= currentValue) goto LAB_001167a6;\n          if (value < currentValue) goto LAB_0010852c;\n          if (minimumValue < currentValue) {\n            if ((0xfffffffffffffff0 < minimumValue) || (result3 <= (minimumValue + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (minimumValue != value) goto LAB_001167b8;\n        }\nFUN_00116852:\n        flag = iVar23 < 0x11;\n        result3 = inputValue;\n        iVar23 = iVar23 + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  currentNote = currentNote + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "FUN_00116490",
                "qsort",
                "FUN_00119ed0",
                "FUN_0010847a",
                "bfd_set_error",
                "FUN_0011a1b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_0010add5"
            },
            "code": "\nvoid initialize_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_components_00113e17"
            },
            "code": "\nvoid initializeComponents_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_components_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "baseAddress",
                "param_2": "sourceString",
                "param_3": "additionalData",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "tempVar1",
                "puVar2": "allocatedMemory",
                "uVar3": "tempVar2"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long baseAddress,undefined8 sourceString,undefined8 additionalData,undefined flag,\n                      undefined4 value)\n\n{\n  undefined8 tempVar1;\n  undefined8 *allocatedMemory;\n  undefined8 tempVar2;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  tempVar2 = xstrdup(sourceString);\n  allocatedMemory[2] = additionalData;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(baseAddress + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = flag;\n  *(undefined4 *)(allocatedMemory + 3) = value;\n  *(undefined8 **)(baseAddress + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVar1;\n  allocatedMemory[1] = tempVar2;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010a181",
                "FUN_00109dfe",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010a2b9",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010a377",
                "FUN_0010a77a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_number_00109a32",
                "param_1": "inputString",
                "param_2": "validNumberFlag",
                "param_3": "endPointer",
                "param_4": "param4",
                "param_5": "param5",
                "__nptr": "currentPointer",
                "piVar1": "errnoPtr",
                "uVar2": "parsedNumber",
                "uVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nparseUnsignedNumber_00109a32(char **inputString,undefined *validNumberFlag,char *endPointer,undefined8 param4,undefined8 param5)\n\n{\n  char *currentPointer;\n  int *errnoPtr;\n  ulong parsedNumber;\n  undefined8 errorString;\n  undefined returnValue [16];\n  \n  if (validNumberFlag != (undefined *)0x0) {\n    *validNumberFlag = 0;\n  }\n  currentPointer = *inputString;\n  if ((currentPointer < endPointer) && (*currentPointer != '\\0')) {\n    errnoPtr = __errno_location();\n    *errnoPtr = 0;\n    parsedNumber = strtoul(currentPointer,inputString,0);\n    if ((parsedNumber != 0xffffffffffffffff) || (*errnoPtr == 0)) goto LAB_00109aa9;\n    if (validNumberFlag == (undefined *)0x0) {\n      errorString = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(currentPointer,errorString);\n    }\n    else {\n      *validNumberFlag = 1;\n    }\n  }\n  parsedNumber = 0;\nLAB_00109aa9:\n  returnValue._8_8_ = param5;\n  returnValue._0_8_ = parsedNumber;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strtoul",
                "FUN_00108fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_unsigned_number_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "iVar1": "comparison_result",
                "uVar2": "translation",
                "piVar3": "dynamic_memory",
                "pauVar4": "dynamic_array",
                "lVar5": "file_offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_0010c6be(long input_param_1,char *input_param_2,int *input_param_3)\n\n{\n  int comparison_result;\n  undefined8 translation;\n  int *dynamic_memory;\n  undefined (*dynamic_array) [16];\n  long file_offset;\n  char *error_message;\n  \n  if ((input_param_2 != (char *)0x0) && (input_param_3 != (int *)0x0)) {\n    if (*(long *)(input_param_1 + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*input_param_3 != 0x17) {\n        dynamic_memory = (int *)FUN_00112904(0x17,0);\n        if (dynamic_memory == (int *)0x0) {\n          return (int *)0x0;\n        }\n        dynamic_array = (undefined (*) [16])xmalloc(0x10);\n        file_offset = *(long *)(input_param_1 + 0x10);\n        *dynamic_array = ZEXT816(0);\n        *(int **)(*dynamic_array + 8) = input_param_3;\n        *(undefined (**) [16])(dynamic_memory + 4) = dynamic_array;\n        file_offset = FUN_00112925(file_offset + 0x10,input_param_2,1,3);\n        if (file_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(file_offset + 0x20) = dynamic_memory;\n        *(long *)*dynamic_array = file_offset;\n        return dynamic_memory;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(input_param_3 + 4) + 8),input_param_2);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return input_param_3;\n      }\n    }\n    translation = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translation);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00119970"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist_ptr",
                "param_4": "has_error",
                "__ptr": "result_ptr",
                "__format": "error_msg",
                "lVar1": "result",
                "uVar2": "result_index",
                "uVar3": "result_capacity",
                "uVar4": "new_index",
                "local_39": "type_str"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist_ptr,undefined *has_error)\n\n{\n  void *result_ptr;\n  char *error_msg;\n  long result;\n  ulong result_index;\n  ulong result_capacity;\n  uint new_index;\n  char type_str [9];\n  \n  result_capacity = 10;\n  result_index = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *has_error = 0;\n  for (; arglist_ptr != (int *)0x0; arglist_ptr = *(int **)(arglist_ptr + 6)) {\n    if (*arglist_ptr != 0x2e) {\n      error_msg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_msg);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist_ptr + 4) == 0) break;\n    result = FUN_0010b0fa(arg1,arg2,*(long *)(arglist_ptr + 4),0,type_str);\n    if (result == 0) {\n      if (type_str[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *has_error = 1;\n    }\n    else {\n      new_index = (int)result_index + 1;\n      if ((uint)result_capacity <= new_index) {\n        result_capacity = (ulong)((uint)result_capacity + 10);\n        result_ptr = (void *)xrealloc(result_ptr,result_capacity << 3);\n      }\n      *(long *)((long)result_ptr + result_index * 8) = result;\n      result_index = (ulong)new_index;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + result_index * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "fprintf",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "section_info",
                "param_2": "binary",
                "uVar1": "section_name",
                "uVar2": "error_message",
                "lVar3": "section_info_ptr",
                "lVar4": "section_ptr"
            },
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_info_ptr;\n  long section_ptr;\n  \n  section_info_ptr = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info_ptr + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info_ptr + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info_ptr + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_name);\n    }\n  }\n  *(long *)(section_info_ptr + 0x20) = section_ptr;\n  return section_info_ptr;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_data_0010e8a9",
                "param_1": "input_string",
                "param_2": "output_address",
                "param_3": "data_string",
                "__s": "allocated_memory"
            },
            "code": "\nundefined4 process_data_0010e8a9(undefined8 input_string,undefined8 output_address,char *data_string)\n\n{\n  undefined4 uVar1;\n  size_t sVar2;\n  char *allocated_memory;\n  \n  sVar2 = strlen(data_string);\n  allocated_memory = (char *)xmalloc(sVar2 + 0x14);\n  sprintf(allocated_memory,\"%s:c=f%g\",input_string,data_string);\n  uVar1 = FUN_0010e2f0(output_address,0x80,0,0,allocated_memory);\n  if ((char)uVar1 != '\\0') {\n    free(allocated_memory);\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionName",
                "__s": "currentFlag",
                "unaff_RBP": "nextFlag",
                "iVar1": "comparisonResult",
                "pcVar3": "delimiter",
                "sVar4": "stringLength",
                "iVar5": "comparisonLength",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *delimiter;\n  char *nextFlag;\n  char *currentFlag;\n  size_t stringLength;\n  int comparisonLength;\n  uint sectionFlags;\n  char *sectionName;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    currentFlag = nextFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (currentFlag == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              delimiter = strchr(currentFlag,0x2c);\n              if (delimiter == (char *)0x0) {\n                stringLength = strlen(currentFlag);\n                comparisonLength = (int)stringLength;\n                nextFlag = (char *)0x0;\n              }\n              else {\n                nextFlag = delimiter + 1;\n                comparisonLength = (int)delimiter - (int)currentFlag;\n              }\n              stringLength = (size_t)comparisonLength;\n              comparisonResult = strncasecmp(sectionName,currentFlag,stringLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              currentFlag = nextFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",currentFlag,stringLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            currentFlag = nextFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",currentFlag,stringLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          currentFlag = nextFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",currentFlag,stringLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        currentFlag = nextFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",currentFlag,stringLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",currentFlag,stringLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        currentFlag = nextFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",currentFlag,stringLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          currentFlag = nextFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",currentFlag,stringLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            currentFlag = nextFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",currentFlag,stringLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              currentFlag = nextFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",currentFlag,stringLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                currentFlag = nextFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",currentFlag,stringLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  currentFlag = nextFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",currentFlag,stringLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    currentFlag = nextFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",currentFlag,stringLength);\n                    if (comparisonResult != 0) {\n                      delimiter = (char *)xmalloc((long)(comparisonLength + 1));\n                      strncpy(delimiter,currentFlag,stringLength);\n                      delimiter[stringLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,delimiter);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    currentFlag = nextFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "strncasecmp",
                "FUN_00119dd0",
                "strchr",
                "xmalloc",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_is_equal_to_0x100_001087da",
                "in_RAX": "value_of_rax",
                "auVar1": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] check_if_rax_is_equal_to_0x100_001087da(void)\n\n{\n  long value_of_rax;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = value_of_rax == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_is_equal_to_0x100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit_ptr",
                "param_2": "type_name",
                "param_3": "var_8",
                "param_4": "var_14",
                "lVar1": "current_comp_unit",
                "iVar2": "var_10",
                "uVar3": "error_msg",
                "puVar4": "ptr_1",
                "lVar5": "ptr_2",
                "puVar6": "ptr_3",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit_ptr,char *type_name,undefined8 var_8,undefined8 var_14)\n\n{\n  long current_comp_unit;\n  int var_10;\n  undefined8 error_msg;\n  undefined8 *ptr_1;\n  long ptr_2;\n  undefined8 *ptr_3;\n  undefined result [16];\n  \n  current_comp_unit = *(long *)(compilation_unit_ptr + 8);\n  if (current_comp_unit == 0) {\n    error_msg = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_msg);\n  }\n  else {\n    for (ptr_2 = *(long *)(compilation_unit_ptr + 0x20); ptr_2 != 0; ptr_2 = *(long *)(ptr_2 + 8)) {\n      if (*(undefined8 **)(ptr_2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr_1 = (undefined8 *)**(undefined8 **)(ptr_2 + 0x28); ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              var_10 = strcmp((char *)ptr_1[1],type_name);\n              if (var_10 == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr_3 = *(undefined8 **)(current_comp_unit + 8); ptr_3 != (undefined8 *)0x0;\n        ptr_3 = (undefined8 *)*ptr_3) {\n      if ((undefined8 *)ptr_3[2] != (undefined8 *)0x0) {\n        for (ptr_1 = *(undefined8 **)(undefined8 *)ptr_3[2]; ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              var_10 = strcmp((char *)ptr_1[1],type_name);\n              if (var_10 == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_msg = 0;\nLAB_00109223:\n  result._8_8_ = var_14;\n  result._0_8_ = error_msg;\n  return result;\nLAB_00109216:\n  error_msg = ptr_1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_condition_and_execute_0010829e",
                "unaff_EBP": "conditionParameter",
                "uVar1": "returnValue"
            },
            "code": "\nundefined8 checkConditionAndExecute_0010829e(void)\n\n{\n  undefined8 returnValue;\n  int conditionParameter;\n  \n  if (conditionParameter == 5) {\n    returnValue = FUN_00113ede();\n    return returnValue;\n  }\n  if ((conditionParameter != 4) && (conditionParameter == 6)) {\n    returnValue = FUN_001082b3();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_condition_and_execute_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_arch_machine_info_00104943",
                "in_RAX": "inputString",
                "iVar1": "number",
                "iVar2": "comparisonResult",
                "lVar3": "convertedNumber",
                "sVar4": "stringLength",
                "pcVar5": "printableString",
                "uVar6": "archMachInfo",
                "iVar7": "archIter",
                "lVar8": "paramIter",
                "iVar9": "param7",
                "unaff_R15D": "stackValue",
                "uVar10": "loopIter",
                "uVar11": "archIndex",
                "param_7": "maxParams",
                "uStack000000000000000c": "stackValue2",
                "param_11": "param11",
                "param_13": "param13"
            },
            "code": "\n\n\nvoid printArchMachineInfo_00104943(void)\n\n{\n  int number;\n  int comparisonResult;\n  char *inputString;\n  long convertedNumber;\n  size_t stringLength;\n  char *printableString;\n  undefined8 archMachInfo;\n  int archIter;\n  long paramIter;\n  int param7;\n  uint stackValue;\n  ulong loopIter;\n  uint archIndex;\n  int maxParams;\n  uint stackValue2;\n  undefined8 param11;\n  long param13;\n  \n  convertedNumber = strtol(inputString,(char **)0x0,10);\n  number = (int)convertedNumber;\n  param7 = maxParams;\n  stackValue2 = stackValue;\n  if (number == 0) {\n    number = 0x50;\n  }\n  do {\n    maxParams = param7;\n    if (param11._4_4_ <= maxParams) {\n      return;\n    }\n    paramIter = (long)maxParams;\n    archIter = (number - stackValue2) + -1;\n    convertedNumber = paramIter;\n    do {\n      param7 = (int)convertedNumber;\n      if (param11._4_4_ <= param7) break;\n      stringLength = strlen(*(char **)(param13 + convertedNumber * 0x60));\n      convertedNumber = convertedNumber + 1;\n      archIter = (archIter - (int)stringLength) + -1;\n    } while (-1 < archIter);\n    printf(\"\\n%*s\",(ulong)(stackValue2 + 1),&DAT_0011b4a1);\n    for (convertedNumber = paramIter * 0x60; ((ulong)(uint)(param7 - maxParams) + paramIter) * 0x60 - convertedNumber != 0;\n        convertedNumber = convertedNumber + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param13 + convertedNumber));\n    }\n    archIter = 2;\n    putc(10,_stdout);\n    do {\n      printableString = (char *)bfd_printable_arch_mach(archIter,0);\n      comparisonResult = strcmp(printableString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        archMachInfo = bfd_printable_arch_mach(archIter,0);\n        printf(\"%*s \",(ulong)stackValue2,archMachInfo);\n        archIndex = archIter - 2;\n        convertedNumber = paramIter * 0x60;\n        comparisonResult = maxParams;\n        while (param7 != comparisonResult) {\n          printableString = *(char **)(param13 + convertedNumber);\n          if (*(char *)((long)(char **)(param13 + convertedNumber) + (ulong)archIndex + 8) == '\\0') {\n            stringLength = strlen(printableString);\n            for (loopIter = stringLength & 0xffffffff; (int)loopIter != 0; loopIter = (ulong)((int)loopIter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableString,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (param7 != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          convertedNumber = convertedNumber + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIter = archIter + 1;\n    } while (archIter != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_arch_machine_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "allocate_and_store_data_00113e23",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "result",
                "puVar2": "allocatedData"
            },
            "code": "\nlong allocateAndStoreData_00113e23(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *allocatedData;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    allocatedData = (undefined8 *)xmalloc(0x10);\n    *allocatedData = data1;\n    allocatedData[1] = data2;\n    *(undefined8 **)(result + 0x10) = allocatedData;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stabText",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stabText)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_from_string_00108ea1",
                "pbVar2": "current_char_ptr",
                "pbVar3": "next_char_ptr",
                "uVar4": "result"
            },
            "code": "\nulong parse_integer_from_string_00108ea1(byte **param_1,int *param_2)\n\n{\n  int iVar1;\n  byte *current_char_ptr;\n  byte *next_char_ptr;\n  ulong result;\n  \n  current_char_ptr = *param_1;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_char_ptr * 2] & 4) != 0) {\n    next_char_ptr = current_char_ptr + 1;\n    iVar1 = (char)*current_char_ptr + -0x30;\n    *param_2 = iVar1;\n    *param_1 = next_char_ptr;\n    if (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0) {\n      do {\n        current_char_ptr = next_char_ptr;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_char_ptr;\n        next_char_ptr = current_char_ptr + 1;\n      } while (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0);\n      if (current_char_ptr[1] == 0x5f) {\n        next_char_ptr = current_char_ptr + 2;\n        *param_1 = next_char_ptr;\n        *param_2 = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char_ptr >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_memory_layout_00108072",
                "unaff_RBX": "parameters",
                "unaff_RBP": "basePointer",
                "unaff_R12": "additionalData",
                "unaff_R14B": "flag",
                "unaff_R15": "result",
                "bVar1": "byteVar",
                "uVar2": "unsignedVar",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "lVar5": "errorMessage",
                "lVar6": "tempVar1",
                "lVar7": "tempVar2",
                "lVar8": "tempVar3"
            },
            "code": "\n\n\nvoid setMemoryLayout_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 unsignedVar;\n  char charVar;\n  uint uintVar;\n  long errorMessage;\n  long tempVar1;\n  long tempVar2;\n  undefined8 *parameters;\n  long basePointer;\n  long additionalData;\n  long tempVar3;\n  char flag;\n  long result;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  tempVar3 = parameters[6];\n  tempVar1 = FUN_00114190(*parameters,0,0x18);\n  if (tempVar1 == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    unsignedVar = *parameters;\n    tempVar3 = tempVar3 + _DAT_00127990;\n    *(long *)(result + 0x30) = tempVar3;\n    *(long *)(result + 0x38) = tempVar3;\n    tempVar3 = parameters[7];\n    tempVar1 = FUN_00114190(unsignedVar,0,0x60);\n    if (tempVar1 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar2 = *(long *)(tempVar1 + 0x20);\n    if ((*(byte *)(tempVar1 + 0x14) & 0x40) != 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(long *)(result + 0x38) = tempVar2;\n    tempVar3 = FUN_00114190(*parameters,0,0x200);\n    if (tempVar3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)parameters + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    tempVar2 = *(long *)(tempVar1 + 0x18);\n    if ((*(byte *)(tempVar1 + 0x14) & 8) == 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    unsignedVar = *parameters;\n    *(long *)(result + 0x30) = tempVar2;\n    *(long *)(result + 0x38) = tempVar2;\n    tempVar3 = parameters[7];\n    tempVar1 = FUN_00114190(unsignedVar,0,0x60);\n    if (tempVar1 != 0) goto LAB_00115860;\nLAB_00115695:\n    unsignedVar = *parameters;\n    *(long *)(result + 0x38) = tempVar3 + _DAT_00127990;\n    tempVar3 = FUN_00114190(unsignedVar,0,0x200);\n    if (tempVar3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(tempVar3 + 0x2c);\n    if (0x3e < uintVar) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = uintVar;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    tempVar3 = parameters[0x1a];\n    tempVar1 = FUN_00115d00(tempVar3,parameters[0x1c]);\n    if ((tempVar1 != 0) &&\n       (tempVar2 = *(long *)(additionalData + 8), *(uint *)(tempVar1 + 0x18) = *(uint *)(tempVar1 + 0x18) | 0x20,\n       *(int *)(tempVar2 + 8) == 5)) {\n      *(long *)(tempVar3 + 0xb0) = tempVar1;\n      charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_memory_layout_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "var1",
                "param_4": "var2",
                "cVar1": "char1",
                "__s": "string1",
                "sVar2": "stringLength",
                "__s_00": "dynamicString",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long dataPtr,char flag,undefined8 var1,undefined8 var2)\n\n{\n  char char1;\n  char *string1;\n  size_t stringLength;\n  char *dynamicString;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  stringLength = strlen(string1);\n  dynamicString = (char *)xmalloc(stringLength + 0x1e);\n  if (flag == '\\0') {\n    *dynamicString = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(dataPtr + 0x68);\n    *(long *)(dataPtr + 0x68) = counter + 1;\n    sprintf(dynamicString,\"%ld=@S;\",counter);\n  }\n  stringLength = strlen(dynamicString);\n  sprintf(dynamicString + stringLength,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = FUN_00109b52(dataPtr,dynamicString,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(dynamicString);\n  }\n  result._8_8_ = var2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_data_0010ec73",
                "param_1": "dataArray",
                "param_2": "newValue",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "counter",
                "cVar2": "checkVar"
            },
            "code": "\nundefined updateData_0010ec73(long *dataArray,long newValue,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int counter;\n  char checkVar;\n  \n  if (dataArray[0x3c] != -1) {\n    (**(code **)(*(long *)(*dataArray + 8) + 0x50))(newValue,dataArray[1] + 8 + dataArray[0x3c]);\n    dataArray[0x3c] = -1;\n  }\n  if (dataArray[0x3d] != -1) {\n    (**(code **)(*(long *)(*dataArray + 8) + 0x50))(newValue,dataArray[1] + 8 + dataArray[0x3d]);\n    dataArray[0x3d] = -1;\n  }\n  counter = *(int *)(dataArray + 0x3f);\n  *(int *)(dataArray + 0x3f) = counter + 1;\n  if (counter == 0) {\n    dataArray[0x40] = newValue;\n  }\n  else {\n    if ((dataArray[0x41] != -1) &&\n       (checkVar = FUN_0010e2f0(dataArray,0xc0,0,dataArray[0x41],0,param6,param4), checkVar == '\\0')) {\n      return 0;\n    }\n    dataArray[0x41] = newValue - dataArray[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "determine_endianness_00114e00",
                "param_1": "endiannessType",
                "dcgettext": "getEndiannessMessage"
            },
            "code": "\nvoid determineEndianness_00114e00(int endiannessType)\n\n{\n  if (endiannessType == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessType == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "determine_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_remove_file_00115970",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "permissions",
                "param_4": "timestamp",
                "param_5": "removeSource",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copyStatus",
                "auVar6": "returnVal"
            },
            "code": "\nundefined  [16]\nCopyAndRemoveFile_00115970(char *sourceFile,char *destinationFile,undefined4 permissions,undefined8 timestamp,char removeSource,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copyStatus;\n  undefined returnVal [16];\n  \n  if (destinationFile == sourceFile) {\n    copyStatus = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(permissions,destinationFile,timestamp);\n    copyStatus = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationFile,errorString);\n    }\n    unlink(sourceFile);\n  }\n  if (removeSource != '\\0') {\n    FUN_0011a350(destinationFile,timestamp);\n  }\n  returnVal._8_8_ = result;\n  returnVal._0_8_ = copyStatus;\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_0010adf2"
            },
            "code": "\nvoid initialize_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "uVar1": "value1",
                "cVar2": "result",
                "uVar3": "returnValue",
                "lVar4": "tempValue",
                "plVar5": "localArray",
                "uVar6": "newSize",
                "local_40": "outputArray"
            },
            "code": "\nundefined4\nprocessData_0010d7d4(undefined8 arg1,undefined8 *arg2,long *arg3,uint *arg4,uint *arg5)\n\n{\n  undefined8 value1;\n  char result;\n  undefined4 returnValue;\n  long tempValue;\n  long *localArray;\n  uint newSize;\n  long outputArray [2];\n  \n  value1 = *arg2;\n  localArray = outputArray;\n  if (arg3 == (long *)0x0) {\n    localArray = (long *)0x0;\n  }\n  result = FUN_0010c95e(arg1,arg2,localArray);\n  if ((result != '\\0') &&\n     (returnValue = FUN_00109be3(arg1,value1,(int)*arg2 - (int)value1), (char)returnValue != '\\0')) {\n    if (arg3 == (long *)0x0) {\n      return returnValue;\n    }\n    if (outputArray[0] != 0) {\n      if (*arg5 <= *arg4 + 1) {\n        newSize = *arg5 + 10;\n        tempValue = *arg3;\n        *arg5 = newSize;\n        tempValue = xrealloc(tempValue,(ulong)newSize << 3);\n        *arg3 = tempValue;\n      }\n      newSize = *arg4;\n      *(long *)(*arg3 + (ulong)newSize * 8) = outputArray[0];\n      *arg4 = newSize + 1;\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "xrealloc",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_size_directory_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPointer",
                "uVar3": "errorMessage",
                "pcVar4": "errorString",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFileSizeDirectory_00113f50(char *filePath)\n\n{\n  int status;\n  int *errnoPointer;\n  undefined8 errorMessage;\n  char *errorString;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      errnoPointer = __errno_location();\n      if (*errnoPointer == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorString = strerror(*errnoPointer);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filePath,errorString);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "check_file_size_directory_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_system_001087fd"
            },
            "code": "\nundefined8 initialize_system_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_system_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "globalVar",
                "__format": "formatMessage",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 globalVar;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  globalVar = DAT_001275e0;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,globalVar);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_001126c0",
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "parse_binary_0011378f",
                "param_1": "binary_file",
                "param_2": "output",
                "param_3": "symbol_table",
                "param_4": "entry_point",
                "param_5": "strings",
                "param_6": "base_address",
                "auVar1": "hash_result",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "buffer",
                "sVar6": "size",
                "lVar7": "index",
                "puVar8": "current_entry",
                "puVar9": "hash_table",
                "__dest": "destination",
                "puVar10": "current_node",
                "plVar11": "current_list",
                "bVar12": "flag",
                "local_258": "binary_file_ptr",
                "local_250": "memory_block",
                "local_248": "hash_table_initialization_result",
                "uStack_244": "hash_table_initialization_result_2",
                "uStack_240": "constant_500",
                "uStack_23c": "constant_0",
                "local_238": "hash_value",
                "local_228": "constant_1",
                "local_220": "hash_table_buffer",
                "local_1f8": "constant_0",
                "local_1f0": "constant_1",
                "local_1e8": "symbol_flags",
                "local_a0": "second_hash_table_buffer",
                "local_78": "constant_negative_1",
                "uStack_70": "constant_negative_1",
                "local_68": "constant_0",
                "local_60": "constant_0",
                "local_58": "constant_0",
                "uStack_54": "constant_0",
                "uStack_50": "constant_negative_1",
                "uStack_4c": "constant_negative_1"
            },
            "code": "\nundefined4\nparse_binary_0011378f(undefined8 *binary_file,undefined8 *output,long *symbol_table,undefined8 *entry_point,\n            undefined8 *strings,undefined8 *base_address)\n\n{\n  undefined hash_result [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *buffer;\n  size_t size;\n  long index;\n  undefined8 *current_entry;\n  undefined4 *hash_table;\n  char *destination;\n  undefined8 *current_node;\n  long *current_list;\n  byte flag;\n  undefined8 *binary_file_ptr;\n  long memory_block;\n  undefined4 hash_table_initialization_result;\n  undefined4 hash_table_initialization_result_2;\n  undefined4 constant_500;\n  undefined4 constant_0;\n  undefined hash_value [16];\n  undefined8 constant_1;\n  undefined hash_table_buffer [40];\n  undefined8 constant_0;\n  undefined8 constant_1;\n  undefined4 symbol_flags [82];\n  undefined second_hash_table_buffer [40];\n  undefined constant_negative_1 [8];\n  undefined8 constant_negative_1;\n  undefined8 constant_0;\n  undefined4 constant_0;\n  undefined4 constant_0;\n  undefined4 constant_0;\n  undefined4 constant_negative_1;\n  undefined4 constant_negative_1;\n  \n  flag = 0;\n  hash_table_initialization_result = 0;\n  hash_table_initialization_result_2 = 0;\n  constant_500 = 500;\n  constant_0 = 0;\n  binary_file_ptr = binary_file;\n  memory_block = xmalloc(500);\n  constant_1 = 1;\n  hash_value = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table_buffer,FUN_0010bb52,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(second_hash_table_buffer,FUN_0010bb52,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    constant_0 = 0;\n    unique0x100000e9 = 0xffffffff;\n    constant_negative_1 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    hash_table = symbol_flags;\n    for (index = 0x52; index != 0; index = index + -1) {\n      *hash_table = 0;\n      hash_table = hash_table + (ulong)flag * -2 + 1;\n    }\n    constant_0 = 0;\n    constant_0 = 0;\n    constant_1 = 1;\n    constant_0 = 0;\n    constant_0 = 0;\n    constant_negative_1 = 0xffffffff;\n    constant_negative_1 = 0xffffffff;\n    result = FUN_0010e2f0(&binary_file_ptr,0,0,0,0);\n    hash_result = _constant_negative_1;\n    if (result != '\\0') {\n      constant_negative_1._4_4_ = hash_table_initialization_result_2;\n      constant_negative_1._0_4_ = hash_table_initialization_result;\n      constant_negative_1 = hash_result._8_8_;\n      result = FUN_0010e2f0(&binary_file_ptr,100,0,0,*binary_file);\n      if (result != '\\0') {\n        *(int *)(output + 6) = *(int *)(output + 6) + 1;\n        output[10] = 0;\n        current_node = (undefined8 *)*output;\n        *(undefined4 *)(output + 7) = *(undefined4 *)((long)output + 0x34);\n        for (; current_node != (undefined8 *)0x0; current_node = (undefined8 *)*current_node) {\n          output[8] = current_node[2];\n          *(undefined4 *)(output + 9) = 0;\n          result = thunk_FUN_0010e439(&binary_file_ptr,*(undefined8 *)(current_node[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          current_list = (long *)current_node[1];\n          if (current_list != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)current_list[2] != (undefined8 *)0x0) {\n                for (current_entry = *(undefined8 **)(undefined8 *)current_list[2]; current_entry != (undefined8 *)0x0;\n                    current_entry = (undefined8 *)*current_entry) {\n                  result = FUN_001135a5(output,&binary_file_ptr);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              current_list = (long *)*current_list;\n              if (current_list == (long *)0x0) break;\n              result = FUN_0010e439(&binary_file_ptr,current_list[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = FUN_00112502(output,&binary_file_ptr,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(constant_negative_1,constant_negative_1) == -1) &&\n           (error_code = FUN_0010e2f0(&binary_file_ptr,100,0,constant_0,0), (char)error_code != '\\0')) {\n          (**(code **)(binary_file[1] + 0x50))(constant_1,memory_block + 8);\n          *symbol_table = memory_block;\n          *entry_point = CONCAT44(hash_table_initialization_result_2,hash_table_initialization_result);\n          *base_address = constant_1;\n          buffer = (undefined *)xmalloc();\n          *buffer = 0;\n          destination = buffer + 1;\n          *strings = buffer;\n          for (index = hash_value._0_8_; index != 0; index = *(long *)(index + 0x18)) {\n            strcpy(destination,*(char **)(index + 8));\n            size = strlen(destination);\n            destination = destination + size + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010bb52",
                "FUN_00112502",
                "FUN_0010e2f0",
                "FUN_0010e439",
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "bfd_errmsg",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "file_not_found_error_00104966",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 fileNotFoundError_00104966(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errorPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "file_not_found_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a0a0(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x26,4,dataPointer + 0x198,dataPointer + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "decode_and_process_data_00119ed0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "param_6": "input_param6",
                "param_7": "input_param7",
                "param_8": "input_param8",
                "param_9": "input_param9",
                "param_10": "input_param10",
                "param_11": "input_param11",
                "param_12": "input_param12",
                "param_13": "input_param13",
                "param_14": "input_param14",
                "in_AL": "flag",
                "local_d8": "bytes_to_copy",
                "local_d4": "max_size",
                "local_d0": "copy_from_address",
                "local_c8": "copy_to_address",
                "local_b8": "local_buffer",
                "local_b0": "param10_clone",
                "local_a8": "param11_clone",
                "local_a0": "param12_clone",
                "local_98": "param13_clone",
                "local_90": "param14_clone",
                "local_88": "decoded_param1",
                "local_78": "decoded_param2",
                "local_68": "decoded_param3",
                "local_58": "decoded_param4",
                "local_48": "decoded_param5",
                "local_38": "decoded_param6",
                "local_28": "decoded_param7",
                "local_18": "decoded_param8"
            },
            "code": "\nvoid decode_and_process_data_00119ed0(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4,\n                 undefined4 input_param5,undefined4 input_param6,undefined4 input_param7,undefined4 input_param8,\n                 undefined8 input_param9,undefined8 input_param10,undefined8 input_param11,undefined8 input_param12,\n                 undefined8 input_param13,undefined8 input_param14)\n\n{\n  char flag;\n  undefined4 bytes_to_copy;\n  undefined4 max_size;\n  undefined *copy_from_address;\n  undefined *copy_to_address;\n  undefined local_buffer [8];\n  undefined8 param10_clone;\n  undefined8 param11_clone;\n  undefined8 param12_clone;\n  undefined8 param13_clone;\n  undefined8 param14_clone;\n  undefined4 decoded_param1;\n  undefined4 decoded_param2;\n  undefined4 decoded_param3;\n  undefined4 decoded_param4;\n  undefined4 decoded_param5;\n  undefined4 decoded_param6;\n  undefined4 decoded_param7;\n  undefined4 decoded_param8;\n  \n  if (flag != '\\0') {\n    decoded_param1 = input_param1;\n    decoded_param2 = input_param2;\n    decoded_param3 = input_param3;\n    decoded_param4 = input_param4;\n    decoded_param5 = input_param5;\n    decoded_param6 = input_param6;\n    decoded_param7 = input_param7;\n    decoded_param8 = input_param8;\n  }\n  copy_from_address = &stack0x00000008;\n  bytes_to_copy = 8;\n  copy_to_address = local_buffer;\n  max_size = 0x30;\n  param10_clone = input_param10;\n  param11_clone = input_param11;\n  param12_clone = input_param12;\n  param13_clone = input_param13;\n  param14_clone = input_param14;\n  FUN_00119e70(input_param9,&bytes_to_copy);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00107880",
                "FUN_0010e2f0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00104cc1",
                "FUN_0010e6a8",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_0010b800",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_00108375",
                "FUN_00114690",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00105828",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "write_debug_type_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "type",
                "param_4": "currentType",
                "plVar1": "typeInfo",
                "lVar2": "typeValue",
                "puVar3": "ptr1",
                "puVar4": "ptr2",
                "cVar5": "result",
                "piVar6": "ptr3",
                "uVar7": "returnValue",
                "uVar8": "value1",
                "iVar9": "code",
                "uVar10": "value2",
                "uVar11": "value3",
                "uVar12": "index",
                "uVar13": "value4",
                "bVar14": "flag",
                "local_3c": "temp"
            },
            "code": "\n\n\nundefined8 writeDebugType_00112c1f(ulong info,undefined8 name,int *type,long currentType)\n\n{\n  long *typeInfo;\n  long typeValue;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  char result;\n  int *ptr3;\n  undefined8 returnValue;\n  undefined8 value1;\n  int code;\n  undefined4 value2;\n  undefined8 value3;\n  ulong index;\n  uint value4;\n  bool flag;\n  uint temp;\n  \n  index = info;\nLAB_00112c39:\n  if (type != (int *)0x0) {\n    code = *type;\n    if (code - 0x16U < 2) {\n      do {\n        typeInfo = *(long **)(type + 4);\n        value4 = *(uint *)(info + 0x30);\n        index = (ulong)value4;\n        typeValue = *typeInfo;\n        if (*(uint *)(typeValue + 0x10) == value4) {\n          if (code == 0x16) {\n            returnValue = FUN_0010bba1(name,*(undefined8 *)(typeValue + 8));\n            return returnValue;\n          }\nLAB_00112c94:\n          ptr3 = (int *)FUN_00112b6e(type,0);\n          if (ptr3 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr3 - 7U < 4) && (*(long *)(ptr3 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr3 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (result = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(type + 4) + 8),ptr3),\n               result == '\\0')) {\n              return 0;\n            }\n            value4 = *(uint *)(*(long *)(ptr3 + 4) + 0xc);\n          }\n          else {\n            value4 = 0;\n          }\n          code = *ptr3;\n          returnValue = *(undefined8 *)(**(long **)(type + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (code == 0x17) {\n          if (typeValue != currentType) goto LAB_00112c94;\n          *(uint *)(currentType + 0x10) = value4;\n          currentType = *typeInfo;\n          type = (int *)typeInfo[1];\n          goto LAB_00112c39;\n        }\n        if (currentType != 0) {\n          *(uint *)(currentType + 0x10) = value4;\n        }\n        type = (int *)typeInfo[1];\n        if (type == (int *)0x0) goto LAB_00112dd6;\n        code = *type;\n        currentType = 0;\n      } while (code - 0x16U < 2);\nLAB_00112d74:\n      returnValue = 0;\n    }\n    else {\n      if (currentType == 0) goto LAB_00112d74;\n      *(undefined4 *)(currentType + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(currentType + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      returnValue = *(undefined8 *)(currentType + 8);\n    }\n    switch(code) {\n    case 0:\n      returnValue = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      returnValue = FUN_00109dfe(name);\n      return returnValue;\n    case 3:\n      returnValue = FUN_0010b800(name,type[1],*(undefined *)(type + 4));\n      return returnValue;\n    case 4:\n      returnValue = FUN_0010b948(name,type[1]);\n      return returnValue;\n    case 5:\n      returnValue = FUN_00109e76(name,type[1]);\n      return returnValue;\n    case 6:\n      returnValue = FUN_00109d3e(name,type[1]);\n      return returnValue;\n    case 7:\n    case 8:\n      if (*(long *)(type + 4) != 0) {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (result = FUN_0010c7a0(info,returnValue,type), result == '\\0')) {\n          return 0;\n        }\n        typeValue = *(long *)(type + 4);\n        if (*(int *)(info + 0x30) == *(int *)(typeValue + 8)) {\n          value4 = *(uint *)(typeValue + 0xc);\n          if (value4 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          code = *type;\nLAB_00112ed2:\n          returnValue = FUN_00109d5c(name,returnValue,value4,code);\n          return returnValue;\n        }\n        *(int *)(typeValue + 8) = *(int *)(info + 0x30);\n      }\n      value2 = 0;\n      if (*(long *)(type + 4) != 0) {\n        value2 = *(undefined4 *)(*(long *)(type + 4) + 0xc);\n      }\n      result = FUN_0010a69a(name,returnValue,value2,*type == 7,type[1]);\n      if (result == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type + 4) != (long *)0x0) && (index = 0, **(long **)(type + 4) != 0)) {\n        while( true ) {\n          ptr2 = *(undefined8 **)(**(long **)(type + 4) + index * 8);\n          if (ptr2 == (undefined8 *)0x0) break;\n          result = writeDebugType_00112c1f(info,name,ptr2[1],0);\n          if (result == '\\0') {\n            return 0;\n          }\n          result = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3),\n                               *(undefined4 *)((long)ptr2 + 0x1c),*(undefined4 *)(ptr2 + 2));\n          if (result == '\\0') {\n            return 0;\n          }\n          index = (ulong)((int)index + 1);\n        }\n      }\n      returnValue = FUN_0010a77a(name);\n      return returnValue;\n    case 9:\n    case 10:\n      if (*(long *)(type + 4) == 0) {\n        value4 = 0;\n        ptr3 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (index = info, result = FUN_0010c7a0(info,returnValue,type), result == '\\0')) {\n          return 0;\n        }\n        typeValue = *(long *)(type + 4);\n        value4 = *(uint *)(typeValue + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(typeValue + 8)) {\n          if (value4 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          code = *type;\n          goto LAB_00112ed2;\n        }\n        ptr3 = *(int **)(typeValue + 0x20);\n        *(int *)(typeValue + 8) = *(int *)(info + 0x30);\n        if (((ptr3 != (int *)0x0) && (type != ptr3)) &&\n           (index = info, result = writeDebugType_00112c1f(info,name,ptr3,0), result == '\\0')) {\n          return 0;\n        }\n      }\n      result = FUN_0010a83e(name,returnValue,value4,*type == 9,type[1],ptr3 != (int *)0x0,\n                           type == ptr3,index);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type + 4) != (long *)0x0) {\n        value4 = 0;\n        if (**(long **)(type + 4) != 0) {\n          while (ptr2 = *(undefined8 **)(**(long **)(type + 4) + (ulong)value4 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = writeDebugType_00112c1f(info,name,ptr2[1],0);\n            if (result == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr2 + 0x14) == '\\0') {\n              result = FUN_0010ba08(name,*ptr2,*(undefined4 *)(ptr2 + 3));\n            }\n            else {\n              result = FUN_0010a94e(name,*ptr2,ptr2[3]);\n            }\n            if (result == '\\0') {\n              return 0;\n            }\n            value4 = value4 + 1;\n          }\n        }\n        value4 = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x10) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x10) + (ulong)value4 * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = writeDebugType_00112c1f(info,name,*ptr2,0);\n            if (result == '\\0') {\n              return 0;\n            }\n            result = FUN_0010aa53(name,*(undefined4 *)(ptr2 + 1),\n                                 *(undefined *)((long)ptr2 + 0xc));\n            if (result == '\\0') {\n              return 0;\n            }\n            value4 = value4 + 1;\n          }\n        }\n        temp = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x18) != 0) {\n          while (ptr2 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x18) + (ulong)temp * 8),\n                ptr2 != (undefined8 *)0x0) {\n            result = FUN_0010ab4d(name,*ptr2);\n            if (result == '\\0') {\n              return 0;\n            }\n            value4 = 0;\n            while (ptr1 = *(undefined8 **)(ptr2[1] + (ulong)value4 * 8),\n                  ptr1 != (undefined8 *)0x0) {\n              if ((ptr1[4] != 0) &&\n                 (result = writeDebugType_00112c1f(info,name,ptr1[4],0), result == '\\0')) {\n                return 0;\n              }\n              result = writeDebugType_00112c1f(info,name,ptr1[1],0);\n              if (result == '\\0') {\n                return 0;\n              }\n              if (ptr1[3] == -1) {\n                result = FUN_0010adf2(name,*ptr1,*(undefined4 *)(ptr1 + 2),\n                                     *(undefined *)((long)ptr1 + 0x14),\n                                     *(undefined *)((long)ptr1 + 0x15));\n              }\n              else {\n                result = FUN_0010add5(name);\n              }\n              if (result == '\\0') {\n                return 0;\n              }\n              value4 = value4 + 1;\n            }\n            result = FUN_00109bbb(name);\n            if (result == '\\0') {\n              return 0;\n            }\n            temp = temp + 1;\n          }\n        }\n      }\n      returnValue = FUN_0010ae0e(name);\n      return returnValue;\n    case 0xb:\n      ptr2 = *(undefined8 **)(type + 4);\n      if (ptr2 == (undefined8 *)0x0) {\n        value1 = 0;\n        value3 = 0;\n      }\n      else {\n        value1 = ptr2[1];\n        value3 = *ptr2;\n      }\n      returnValue = FUN_0010e453(name,returnValue,value3,value1);\n      return returnValue;\n    case 0xc:\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a083(name);\n      return returnValue;\n    case 0xd:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      index = 0;\n      if (*(long *)(*(long *)(type + 4) + 8) == 0) {\n        index = 0xffffffff;\n      }\n      else {\n        while (typeValue = *(long *)(*(long *)(*(long *)(type + 4) + 8) + index * 8), typeValue != 0) {\n          index = index + 1;\n          result = writeDebugType_00112c1f(info,name,typeValue,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        index = index & 0xffffffff;\n      }\n      returnValue = FUN_0010e5db(name,index,*(undefined *)(*(long *)(type + 4) + 0x10));\n      return returnValue;\n    case 0xe:\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a0a0(name);\n      return returnValue;\n    case 0xf:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(type + 4) + 8),\n                           *(undefined8 *)(*(long *)(type + 4) + 0x10));\n      return returnValue;\n    case 0x10:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      typeValue = *(long *)(type + 4);\n      returnValue = FUN_0010a181(name,*(undefined8 *)(typeValue + 0x10),*(undefined8 *)(typeValue + 0x18),\n                           *(undefined *)(typeValue + 0x20));\n      return returnValue;\n    case 0x11:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a2b9(name,*(undefined *)(*(long *)(type + 4) + 8));\n      return returnValue;\n    case 0x12:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a377(name);\n      return returnValue;\n    case 0x13:\n      result = writeDebugType_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      index = 0;\n      if (*(long *)(*(long *)(type + 4) + 0x10) == 0) {\n        index = 0xffffffff;\n      }\n      else {\n        while (typeValue = *(long *)(*(long *)(*(long *)(type + 4) + 0x10) + index * 8), typeValue != 0)\n        {\n          index = index + 1;\n          result = writeDebugType_00112c1f(info,name,typeValue,0);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type + 4) + 8) != 0) &&\n         (result = writeDebugType_00112c1f(info,name,*(long *)(*(long *)(type + 4) + 8),0),\n         result == '\\0')) {\n        return 0;\n      }\n      returnValue = FUN_0010a424(name,*(long *)(*(long *)(type + 4) + 8) != 0,index & 0xffffffff,\n                           *(undefined *)(*(long *)(type + 4) + 0x18));\n      return returnValue;\n    case 0x14:\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a0bd(name);\n      return returnValue;\n    case 0x15:\n      result = writeDebugType_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (result == '\\0') {\n        return 0;\n      }\n      returnValue = FUN_0010a0d3(name);\n      return returnValue;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag = *(int **)**(undefined8 **)(type + 4) == type;\n  type = *(int **)**(undefined8 **)(type + 4);\n  if (flag) {\nLAB_00112dd6:\n    returnValue = FUN_00109d97(name);\n    return returnValue;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "dcgettext",
                "FUN_0010bba1",
                "FUN_0010a0e9",
                "FUN_0010adf2",
                "FUN_0010a0d3",
                "fprintf",
                "FUN_00109d5c",
                "FUN_0010a083",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "FUN_0010e453",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_00109e76",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "FUN_0010a0a0",
                "abort",
                "FUN_0010a181",
                "__assert_fail",
                "FUN_00109dfe",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "write_debug_type_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "flag",
                "unaff_R15": "baseAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char flag;\n  long baseAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(baseAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "warningMessage",
                "param_2": "fileName",
                "in_RAX": "errorDescription",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 warningMessage,undefined8 fileName)\n\n{\n  undefined8 errorDescription;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,fileName,warningMessage,errorDescription);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_00109a32",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "get_architecture_info_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "inputFileName",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 get_architecture_info_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 inputFileName;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    inputFileName = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFileName);\n  }\n  else {\n    inputFileName = bfd_get_mach();\n    machine = bfd_get_arch();\n    inputFileName = bfd_printable_arch_mach(machine,inputFileName);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFileName);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "FUN_001125fa",
                "FUN_00119ed0",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "get_architecture_info_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "FUN_00114cf0",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_execute_0010bba1",
                "param_1": "inputParam",
                "param_2": "inputValue",
                "lVar1": "hashResult",
                "uVar2": "functionResult"
            },
            "code": "\nundefined8 lookupAndExecute_0010bba1(long inputParam,undefined8 inputValue)\n\n{\n  long hashResult;\n  undefined8 functionResult;\n  \n  hashResult = bfd_hash_lookup(inputParam + 0x1b8,inputValue,0,0);\n  if ((hashResult != 0) && (0 < *(long *)(hashResult + 0x20))) {\n    functionResult = FUN_00109cf4(inputParam,*(long *)(hashResult + 0x20),*(undefined4 *)(hashResult + 0x28));\n    return functionResult;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_execute_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_0010e6a8",
                "param_1": "input",
                "param_2": "string",
                "param_3": "value1",
                "param_4": "value2",
                "__s": "dynamicString",
                "sVar3": "stringLength",
                "sVar4": "dynamicStringLength",
                "__s_00": "resultString",
                "lVar5": "hashLookupResult",
                "lVar8": "counter",
                "uVar1": "hashResult",
                "uVar2": "errorCode",
                "uVar6": "errorMessage",
                "uVar7": "errorFormat",
                "uVar9": "returnValue",
                "auVar10": "returnTuple"
            },
            "code": "\nundefined  [16] processString_0010e6a8(long input,char *string,undefined8 value1,undefined8 value2)\n\n{\n  uint hashResult;\n  undefined4 errorCode;\n  char *dynamicString;\n  size_t stringLength;\n  size_t dynamicStringLength;\n  char *resultString;\n  long hashLookupResult;\n  undefined8 errorMessage;\n  undefined8 errorFormat;\n  long counter;\n  ulong returnValue;\n  undefined returnTuple [16];\n  \n  counter = *(long *)(*(long *)(input + 0x60) + 0x10);\n  errorCode = *(undefined4 *)(*(long *)(input + 0x60) + 0x18);\n  dynamicString = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  dynamicStringLength = strlen(dynamicString);\n  resultString = (char *)xmalloc(stringLength + 0x14 + dynamicStringLength);\n  if (counter < 1) {\n    counter = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = counter + 1;\n    sprintf(resultString,\"%s:t%ld=%s\",string,counter,dynamicString);\n  }\n  else {\n    sprintf(resultString,\"%s:t%s\",string,dynamicString);\n  }\n  free(dynamicString);\n  hashResult = FUN_0010e2f0(input,0x80,0,0,resultString);\n  returnValue = (ulong)hashResult;\n  if ((char)hashResult != '\\0') {\n    free(resultString);\n    hashLookupResult = bfd_hash_lookup(input + 0x1b8,string,1,0);\n    if (hashLookupResult != 0) {\n      *(long *)(hashLookupResult + 0x20) = counter;\n      *(undefined4 *)(hashLookupResult + 0x28) = errorCode;\n      goto LAB_0010e7b3;\n    }\n    errorCode = bfd_get_error();\n    errorMessage = bfd_errmsg(errorCode);\n    errorFormat = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(errorFormat,errorMessage);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnTuple._8_8_ = value2;\n  returnTuple._0_8_ = returnValue;\n  return returnTuple;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00119ed0",
                "sprintf",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_message_0010e7c2",
                "param_1": "param1",
                "param_2": "message",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "auxString",
                "sVar1": "messageLength",
                "sVar2": "auxStringLength",
                "__s_00": "formattedMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] formatMessage_0010e7c2(undefined8 param1,char *message,undefined8 param3,undefined8 param4)\n\n{\n  char *auxString;\n  size_t messageLength;\n  size_t auxStringLength;\n  char *formattedMessage;\n  undefined returnValue [16];\n  \n  auxString = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  auxStringLength = strlen(auxString);\n  formattedMessage = (char *)xmalloc(messageLength + 3 + auxStringLength);\n  sprintf(formattedMessage,\"%s:T%s\",message,auxString);\n  free(auxString);\n  returnValue._0_4_ = FUN_0010e2f0(param1,0x80,0,0,formattedMessage);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(formattedMessage);\n  }\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_message_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_function_00119dd0",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6",
                "param_7": "parameter7",
                "param_8": "parameter8",
                "param_9": "parameter9",
                "param_10": "parameter10",
                "param_11": "parameter11",
                "param_12": "parameter12",
                "param_13": "parameter13",
                "param_14": "parameter14",
                "in_AL": "inputBoolean",
                "local_d8": "bufferSize",
                "local_d4": "arraySize",
                "local_d0": "buffer",
                "local_c8": "localArray",
                "local_b8": "temporaryArray",
                "local_b0": "localVar1",
                "local_a8": "localVar2",
                "local_a0": "localVar3",
                "local_98": "localVar4",
                "local_90": "localVar5",
                "local_88": "localVar6",
                "local_78": "localVar7",
                "local_68": "localVar8",
                "local_58": "localVar9",
                "local_48": "localVar10",
                "local_38": "localVar11",
                "local_28": "localVar12",
                "local_18": "localVar13"
            },
            "code": "\nvoid initializeFunction_00119dd0(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3,undefined4 parameter4,\n                 undefined4 parameter5,undefined4 parameter6,undefined4 parameter7,undefined4 parameter8,\n                 undefined8 parameter9,undefined8 parameter10,undefined8 parameter11,undefined8 parameter12,\n                 undefined8 parameter13,undefined8 parameter14)\n\n{\n  char inputBoolean;\n  undefined4 bufferSize;\n  undefined4 arraySize;\n  undefined *buffer;\n  undefined *localArray;\n  undefined temporaryArray [8];\n  undefined8 localVar1;\n  undefined8 localVar2;\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  \n  if (inputBoolean != '\\0') {\n    localVar6 = parameter1;\n    localVar7 = parameter2;\n    localVar8 = parameter3;\n    localVar9 = parameter4;\n    localVar10 = parameter5;\n    localVar11 = parameter6;\n    localVar12 = parameter7;\n    localVar13 = parameter8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localArray = temporaryArray;\n  arraySize = 0x30;\n  localVar1 = parameter10;\n  localVar2 = parameter11;\n  localVar3 = parameter12;\n  localVar4 = parameter13;\n  localVar5 = parameter14;\n  FUN_00119e70(parameter9,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00104920",
                "FUN_0010da0b",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00115b70",
                "FUN_001083de",
                "FUN_00114190",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "initialize_function_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "functionPointer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *functionPointer;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*functionPointer);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "data",
                "in_R10": "index",
                "in_R11": "condition",
                "param_7": "param7",
                "param_9": "param9",
                "param_10": "outputSize",
                "param_11": "inputArray",
                "param_12": "outputArray",
                "param_13": "param13",
                "param_14": "inputSize",
                "pcVar2": "compareFunc",
                "iVar3": "result",
                "uVar4": "counter",
                "uVar5": "minValue",
                "uVar6": "maxValue",
                "lVar7": "loopCount",
                "uVar8": "tempValue",
                "__ptr": "dynamicArray",
                "puVar9": "pointer1",
                "cVar10": "charValue",
                "puVar11": "pointer2",
                "puVar12": "pointer3",
                "psVar13": "pointer4",
                "bVar14": "byteValue"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t sVar1;\n  code *compareFunc;\n  int result;\n  uint counter;\n  undefined *dynamicArray;\n  size_t *data;\n  ulong minValue;\n  ulong maxValue;\n  long loopCount;\n  ulong tempValue;\n  size_t unaff_RBX;\n  size_t *unaff_RBP;\n  undefined *pointer1;\n  char charValue;\n  undefined *pointer2;\n  ulong index;\n  undefined *pointer3;\n  size_t condition;\n  size_t *unaff_R13;\n  size_t *unaff_R14;\n  size_t unaff_R15;\n  size_t *pointer4;\n  byte byteValue;\n  size_t param7;\n  size_t param9;\n  ulong outputSize;\n  size_t *inputArray;\n  undefined *outputArray;\n  long param13;\n  size_t inputSize;\n  \n  byteValue = 0;\ncode_r0x00116852:\n  counter = (int)index + 1;\n  if (0x10 < (int)index) goto LAB_001167f5;\nLAB_00116863:\n  unaff_R14 = unaff_R14 + -9;\n  do {\n    if (unaff_R13 <= unaff_R14) {\n      sVar1 = unaff_R14[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      tempValue = (ulong)counter;\n      if ((*unaff_R14 == *unaff_RBP) &&\n         (result = memcmp((void *)unaff_R14[3],(void *)unaff_RBP[3],*unaff_RBP), result == 0)) {\n        maxValue = unaff_R14[7];\n        minValue = unaff_R14[8];\n        index = tempValue & 0xffffffff;\n        if (unaff_R15 == maxValue) {\n          if (unaff_RBX != minValue) goto LAB_001167a6;\n          unaff_RBP[2] = 0;\n        }\n        else {\n          if (unaff_R15 < maxValue) {\n            if (minValue < unaff_R15) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minValue) || (unaff_R15 <= (minValue + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < unaff_R15) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (maxValue <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == minValue) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= minValue) {\n              unaff_RBP[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minValue < unaff_R15) goto LAB_0010852c;\n          }\n          if ((condition == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (minValue <= unaff_RBX) {\n            minValue = unaff_RBX;\n          }\n          if (maxValue < unaff_R15) {\n            unaff_R15 = maxValue;\n          }\n          unaff_R14[8] = minValue;\n          unaff_R14[7] = unaff_R15;\n          unaff_RBP[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        unaff_R14 = unaff_RBP;\n        unaff_RBP = unaff_R14 + 9;\n        if (data <= unaff_RBP) {\n          qsort(inputArray,inputSize,0x48,FUN_0011a250);\n          dynamicArray = (undefined *)xmalloc(outputSize * 2);\n          param7 = 0;\n          pointer3 = dynamicArray;\n          for (pointer4 = inputArray; pointer4 < data; pointer4 = pointer4 + 9) {\n            if (pointer4[2] != 0) {\n              pointer2 = pointer3 + 4;\n              pointer1 = pointer3 + 0xc;\n              compareFunc = *(code **)(*(long *)(param13 + 8) + 0x50);\n              if ((pointer4[7] == param9) && (pointer4[8] == param7)) {\n                (*compareFunc)(*pointer4,pointer3);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(0,pointer2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(pointer4[2],pointer3 + 8);\n                maxValue = pointer4[6];\n                tempValue = *pointer4;\n                pointer3 = (undefined *)pointer4[3];\n                pointer2 = pointer1;\n                for (minValue = tempValue; minValue != 0; minValue = minValue - 1) {\n                  *pointer2 = *pointer3;\n                  pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n                  pointer2 = pointer2 + (ulong)byteValue * -2 + 1;\n                }\n                if (tempValue < maxValue) {\n                  for (loopCount = maxValue - tempValue; loopCount != 0; loopCount = loopCount + -1) {\n                    *pointer2 = 0;\n                    pointer2 = pointer2 + (ulong)byteValue * -2 + 1;\n                  }\n                }\n                pointer3 = pointer1 + maxValue;\n              }\n              else {\n                (*compareFunc)();\n                if (*(int *)(*(long *)(param13 + 8) + 8) == 5) {\n                  charValue = (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charValue = '\\b';\n                }\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(charValue,pointer2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(pointer4[2],pointer3 + 8);\n                tempValue = *pointer4;\n                pointer3 = (undefined *)pointer4[3];\n                pointer2 = pointer1;\n                for (maxValue = tempValue; maxValue != 0; maxValue = maxValue - 1) {\n                  *pointer2 = *pointer3;\n                  pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n                  pointer2 = pointer2 + (ulong)byteValue * -2 + 1;\n                }\n                maxValue = pointer4[6];\n                if (tempValue < maxValue) {\n                  for (loopCount = maxValue - tempValue; loopCount != 0; loopCount = loopCount + -1) {\n                    *pointer2 = 0;\n                    pointer2 = pointer2 + (ulong)byteValue * -2 + 1;\n                  }\n                }\n                loopCount = *(long *)(param13 + 8);\n                pointer1 = pointer1 + maxValue;\n                pointer3 = pointer1 + 8;\n                if ((*(int *)(loopCount + 8) == 5) &&\n                   (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopCount + 0x38))(pointer4[7],pointer1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x38))(pointer4[8],pointer3);\n                  pointer3 = pointer1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopCount + 0x50))(pointer4[7],pointer1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x50))(pointer4[8],pointer1 + 4);\n                }\n                param9 = pointer4[7];\n                param7 = pointer4[8];\n              }\n            }\n          }\n          maxValue = (long)pointer3 - (long)dynamicArray;\n          tempValue = maxValue;\n          pointer3 = dynamicArray;\n          if (maxValue < outputSize) {\n            for (; outputSize = maxValue, tempValue != 0; tempValue = tempValue - 1) {\n              *outputArray = *pointer3;\n              pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n              outputArray = outputArray + (ulong)byteValue * -2 + 1;\n            }\n          }\n          free(dynamicArray);\n          free(inputArray);\n          return outputSize;\n        }\n        condition = unaff_R14[0xb];\n      } while (condition == 0);\n      unaff_R15 = unaff_R14[0x10];\n      unaff_RBX = unaff_R14[0x11];\n      counter = 0;\n      if (unaff_R15 != unaff_RBX) break;\n      unaff_R14[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "memcmp",
                "xmalloc",
                "qsort",
                "free",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "get_linked_value_00113d3a",
                "param_1": "inputValue",
                "lVar1": "linkedValue"
            },
            "code": "\nlong getLinkedValue_00113d3a(long inputValue)\n\n{\n  long linkedValue;\n  \n  if (inputValue != 0) {\n    linkedValue = *(long *)(inputValue + 8);\n    if (linkedValue == 0) {\n      linkedValue = FUN_00112904(0xc,0);\n      if (linkedValue == 0) {\n        linkedValue = 0;\n      }\n      else {\n        *(long *)(linkedValue + 0x10) = inputValue;\n        *(long *)(inputValue + 8) = linkedValue;\n      }\n    }\n    return linkedValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_linked_value_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "initialize_data_0010a0d3",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a0d3(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x42,*(undefined4 *)(*(long *)(dataPointer + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "lVar1": "currentComparison",
                "pcVar2": "currentString",
                "ppcVar3": "stringList",
                "cVar4": "result",
                "iVar5": "comparisonResult",
                "uVar6": "tempVariable",
                "sVar7": "length1",
                "sVar8": "length2",
                "lVar9": "temporaryValue",
                "pcVar10": "outputString",
                "pcVar11": "tempString",
                "pcVar12": "tempString2",
                "uVar13": "flags",
                "bVar14": "flag",
                "local_50": "errorMessage",
                "local_48": "currentString2",
                "local_40": "sizeArray"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid createOutputSection_00115530(long param_1,char **param_2,long param_3)\n\n{\n  long currentComparison;\n  char *currentString;\n  char **stringList;\n  char result;\n  int comparisonResult;\n  uint tempVariable;\n  size_t length1;\n  size_t length2;\n  long temporaryValue;\n  char *outputString;\n  char *tempString;\n  char *tempString2;\n  uint flags;\n  bool flag;\n  long errorMessage;\n  char *currentString2;\n  long sizeArray [2];\n  \n  result = FUN_001159d0(param_2);\n  if (result != '\\0') {\n    return;\n  }\n  outputString = *param_2;\n  flags = *(uint *)((long)param_2 + 0x24);\n  currentString2 = outputString;\n  stringList = DAT_001278d8;\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(param_1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; stringList != (char **)0x0; stringList = (char **)stringList[3]) {\n    comparisonResult = strcmp(*stringList,outputString);\n    if (comparisonResult == 0) {\n      if (*(uint *)(stringList + 2) != 0xffffffff) {\n        flags = *(uint *)(stringList + 2);\n      }\n      if (outputString != stringList[1]) {\n        currentString2 = stringList[1];\n        flags = FUN_00115f30(flags,param_3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (outputString = DAT_001278f8, (*(byte *)((long)param_2 + 0x24) & 1) != 0)) ||\n     (outputString = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    length1 = strlen(outputString);\n    length2 = strlen(currentString2);\n    tempString2 = (char *)xmalloc(length1 + 1 + length2);\n    outputString = strcpy(tempString2,outputString);\n    currentString2 = strcat(outputString,currentString2);\n  }\n  temporaryValue = FUN_00114190(*param_2,0,0x80);\n  flag = false;\n  if (temporaryValue == 0) {\n    if ((DAT_00127a2c == 4) && ((flags & 0x2000001) != 0)) {\n      comparisonResult = *(int *)(*(long *)(param_1 + 8) + 8);\n      if (comparisonResult == 5) {\n        if (*(int *)(param_2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            flag = (flags & 0x2000000) == 0;\n            tempVariable = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param_2 + 0x24) = *(uint *)((long)param_2 + 0x24) & tempVariable;\n          }\n          else {\n            tempVariable = 0xfdfffefd;\n          }\n          flags = flags & tempVariable;\n        }\n      }\n      else if ((comparisonResult != 2) || (comparisonResult = strcmp(*param_2,\".buildid\"), comparisonResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = FUN_00115f30(flags & 0x104 | *(uint *)(temporaryValue + 0x28),param_3,*param_2);\n  }\n  result = bfd_convert_section_setup(param_1,param_2,param_3,&currentString2,sizeArray);\n  if (result == '\\0') {\n    outputString = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  outputString = (char *)bfd_make_section_anyway_with_flags(param_3,currentString2,flags);\n  if (outputString == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      sizeArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(outputString,sizeArray[0]);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    sizeArray[0] = ((((long)DAT_00127a1c - 1U) + sizeArray[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(outputString);\n    if (result == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  errorMessage = 0;\n  tempString2 = param_2[6];\n  temporaryValue = FUN_00114190(*param_2,0,0x18);\n  if (temporaryValue == 0) {\n    outputString[0x28] = outputString[0x28] | 1;\n    tempString = *param_2;\n    tempString2 = tempString2 + _DAT_00127990;\n    *(char **)(outputString + 0x30) = tempString2;\n    *(char **)(outputString + 0x38) = tempString2;\n    tempString2 = param_2[7];\n    temporaryValue = FUN_00114190(tempString,0,0x60);\n    if (temporaryValue == 0) goto LAB_00115695;\nLAB_00115860:\n    tempString = *(char **)(temporaryValue + 0x20);\n    if ((*(byte *)(temporaryValue + 0x14) & 0x40) != 0) {\n      tempString = tempString + (long)tempString2;\n    }\n    *(char **)(outputString + 0x38) = tempString;\n    temporaryValue = FUN_00114190(*param_2,0,0x200);\n    if (temporaryValue != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)param_2 + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(outputString + 0xb4) = *(undefined4 *)((long)param_2 + 0xb4);\n    outputString[0x28] = outputString[0x28] & 0xcfU | *(byte *)(param_2 + 5) & 0x30;\n    param_2[0xc] = outputString;\n    param_2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_2,param_3,outputString);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    tempString = *(char **)(temporaryValue + 0x18);\n    if ((*(byte *)(temporaryValue + 0x14) & 8) == 0) {\n      tempString = tempString + (long)tempString2;\n    }\n    outputString[0x28] = outputString[0x28] | 1;\n    currentString = *param_2;\n    *(char **)(outputString + 0x30) = tempString;\n    *(char **)(outputString + 0x38) = tempString;\n    tempString2 = param_2[7];\n    temporaryValue = FUN_00114190(currentString,0,0x60);\n    if (temporaryValue != 0) goto LAB_00115860;\nLAB_00115695:\n    tempString = *param_2;\n    *(char **)(outputString + 0x38) = tempString2 + _DAT_00127990;\n    temporaryValue = FUN_00114190(tempString,0,0x200);\n    if (temporaryValue == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(temporaryValue + 0x2c);\n    if (0x3e < flags) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(outputString + 0x7c) = flags;\n    *(undefined4 *)(outputString + 0xb4) = *(undefined4 *)((long)param_2 + 0xb4);\n    outputString[0x28] = outputString[0x28] & 0xcfU | *(byte *)(param_2 + 5) & 0x30;\n    param_2[0xc] = outputString;\n    param_2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempString2 = param_2[0x1a];\n    temporaryValue = FUN_00115d00(tempString2,param_2[0x1c]);\n    if ((temporaryValue == 0) ||\n       (currentComparison = *(long *)(param_1 + 8), *(uint *)(temporaryValue + 0x18) = *(uint *)(temporaryValue + 0x18) | 0x20,\n       *(int *)(currentComparison + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempString2 + 0xb0) = temporaryValue;\n    result = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,param_2,param_3,outputString);\n    if (result == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (flag) {\n    *(undefined4 *)(*(long *)(outputString + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  FUN_001126c0(0,param_3,outputString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00115f30",
                "bfd_set_section_size",
                "xmalloc",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "strlen",
                "FUN_001159d0",
                "FUN_00114190",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "FUNC_0010a0bd"
            },
            "code": "\nvoid FUNC_0010a0bd(long param_1)\n\n{\n  FUN_00109ed3(param_1,0x6b,*(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "FUNC_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_parse_input_00113e5e",
                "param_1": "output",
                "param_2": "input",
                "param_3": "length",
                "cVar1": "result"
            },
            "code": "\nundefined8 validate_and_parse_input_00113e5e(undefined8 output,char **input,long length)\n\n{\n  char result;\n  char *local_20 [2];\n  \n  local_20[0] = *input;\n  *input = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)local_20[0] < 5) ||\n      (result = FUN_00113fb0(local_20[0],\"type\"), result == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  result = FUN_0010c95e(output,local_20,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_and_parse_input_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "update_data_0010abdd",
                "param_1": "data",
                "param_2": "str",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "data_ptr",
                "pcVar2": "str_ptr",
                "bVar3": "byte_val",
                "pcVar4": "returned_str",
                "__s": "extra_str",
                "sVar5": "str_len1",
                "sVar6": "str_len2",
                "sVar7": "str_len3",
                "sVar8": "extra_str_len",
                "uVar9": "result",
                "cVar10": "char_val1",
                "cVar11": "char_val2",
                "local_52": "local_byte"
            },
            "code": "\nundefined8\nupdateData_0010abdd(long data,char *str,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long data_ptr;\n  char *str_ptr;\n  byte byte_val;\n  char *returned_str;\n  char *extra_str;\n  size_t str_len1;\n  size_t str_len2;\n  size_t str_len3;\n  size_t extra_str_len;\n  undefined8 result;\n  char char_val1;\n  char char_val2;\n  byte local_byte;\n  \n  extra_str = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  returned_str = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    extra_str = (char *)FUN_00109b2f(data);\n  }\n  data_ptr = *(long *)(data + 0x60);\n  if ((data_ptr == 0) || (str_ptr = *(char **)(data_ptr + 0x30), str_ptr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char_val2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char_val2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char_val1 = '?';\n    if (flag1 == '\\0') {\n      char_val1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    str_len1 = strlen(str_ptr);\n    str_len2 = strlen(returned_str);\n    str_len3 = strlen(str);\n    extra_str_len = 0;\n    if (flag4 != '\\0') {\n      extra_str_len = strlen(extra_str);\n    }\n    result = xrealloc(str_ptr,str_len3 + str_len1 + 0x28 + str_len2 + extra_str_len);\n    *(undefined8 *)(data_ptr + 0x30) = result;\n    str_ptr = *(char **)(*(long *)(data + 0x60) + 0x30);\n    str_len1 = strlen(str_ptr);\n    sprintf(str_ptr + str_len1,\"%s:%s;%c%c%c\",returned_str,str,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char_val2,(ulong)(uint)(int)char_val1,str_len1);\n    free(returned_str);\n    if (flag4 != '\\0') {\n      returned_str = *(char **)(*(long *)(data + 0x60) + 0x30);\n      str_len1 = strlen(returned_str);\n      sprintf(returned_str + str_len1,\"%ld;%s;\",value,extra_str);\n      free(extra_str);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "imported": false,
            "current_name": "update_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "outputFormat",
                "uVar1": "var1",
                "uVar2": "var2"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *params,undefined8 outputFormat)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    var1 = *params;\n    flags = flags & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(var2,var1,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "pointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *pointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    pointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*pointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*pointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_complement_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint calculateComplement_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_complement_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "decompile_function_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "parameter",
                "param_5": "flags",
                "param_6": "tempdir",
                "param_7": "options",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "integerVar1",
                "iVar5": "integerVar2",
                "ppcVar6": "pointerToCharPtrArray1",
                "pvVar7": "pointerToVoid",
                "lVar8": "longVar1",
                "puVar9": "pointerToUInt64",
                "piVar10": "pointerToInt",
                "uVar11": "ulongVar1",
                "uVar12": "ulongVar2",
                "lVar13": "length",
                "puVar14": "pointerToBfd",
                "pcVar15": "tempdirPath",
                "ppcVar16": "pointerToCharPtrArray2",
                "ppcVar19": "pointerToCharPtrArray3",
                "pcVar20": "pointerToCode",
                "lVar21": "longVar2",
                "uVar22": "uintVar1",
                "pcVar23": "pointerToChar1",
                "psVar24": "pointerToStat",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localVar1",
                "local_198": "localVar2",
                "local_158": "localStat",
                "uStack_b0": "localStackVar1",
                "lStack_98": "localStackVar2"
            },
            "code": "\n\n\nvoid decompileFunction_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 parameter,\n                 undefined8 flags,long tempdir,undefined8 options)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int integerVar1;\n  int integerVar2;\n  char **pointerToCharPtrArray1;\n  void *pointerToVoid;\n  long longVar1;\n  undefined8 *pointerToUInt64;\n  int *pointerToInt;\n  undefined8 ulongVar1;\n  undefined8 ulongVar2;\n  long length;\n  undefined8 *pointerToBfd;\n  char *tempdirPath;\n  char **pointerToCharPtrArray2;\n  char *pcVar17;\n  char *pcVar18;\n  undefined8 *__ptr;\n  char **pointerToCharPtrArray3;\n  code *pointerToCode;\n  long longVar2;\n  uint uintVar1;\n  char *pointerToChar1;\n  stat *pointerToStat;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localVar1;\n  long *localVar2;\n  stat localStat;\n  void *local_c8 [3];\n  uint localStackVar1;\n  long localStackVar2;\n  \n  byteVar2 = 0;\n  length = FUN_00113f50();\n  if (length < 1) {\n    if (length == 0) {\n      ulongVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(ulongVar2,inputFile);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  pointerToBfd = (undefined8 *)bfd_openr(inputFile,flags);\n  if ((pointerToBfd == (undefined8 *)0x0) || (integerVar2 = bfd_stat(pointerToBfd,parameter), integerVar2 != 0)) {\n    FUN_001126c0(inputFile,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)pointerToBfd + 0x44) = *(uint *)((long)pointerToBfd + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(pointerToBfd,2);\n  if (charVar1 != '\\0') {\n    if (tempdir == 0) {\n      charVar1 = '\\0';\n      tempdir = *(long *)pointerToBfd[1];\n    }\n    if (fileDescriptor < 0) {\n      localVar1 = (undefined8 *)bfd_openw(outputFile,tempdir);\n    }\n    else {\n      localVar1 = (undefined8 *)bfd_fdopenw(outputFile,tempdir,fileDescriptor);\n    }\n    if (localVar1 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        ulongVar2 = *pointerToBfd;\n        ulongVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(ulongVar1,ulongVar2);\n        DAT_00127a10 = 0;\n      }\n      FUN_00114d50(localVar1,pointerToBfd,DAT_001264b4);\n      localVar2 = localVar1 + 0x1f;\n      if ((*(byte *)((long)pointerToBfd + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        ulongVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,pointerToBfd,0,ulongVar2);\n        return;\n      }\n      tempdirPath = (char *)FUN_0011a0e0(*localVar1);\n      if (tempdirPath == (char *)0x0) {\n        pointerToInt = __errno_location();\n        tempdirPath = strerror(*pointerToInt);\n        ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(ulongVar2,tempdirPath);\n      }\n      if (DAT_00127a2c == 7) {\n        byteVar1 = *(byte *)((long)pointerToBfd + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerToBfd + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)localVar1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localVar1 + 0x44) = *(uint *)((long)localVar1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointerToCharPtrArray2 = (char **)bfd_openr_next_archived_file(pointerToBfd,0);\n      charVar2 = bfd_set_format(localVar1,*(byte *)(pointerToBfd + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(0,localVar1,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (pointerToCharPtrArray2 != (char **)0x0))) {\n        pcVar18 = *pointerToCharPtrArray2;\n        pcVar17 = pcVar18;\n        if (*pcVar18 == '/') {\nLAB_0010527d:\n          ulongVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(ulongVar2,pcVar18);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pcVar17 != '\\0') {\n          pointerToChar1 = pcVar17;\n          if ((*pcVar17 == '.') && (pointerToChar1 = pcVar17 + 1, pcVar17[1] == '.')) {\n            pointerToChar1 = pcVar17 + 2;\n            if ((pcVar17[2] == '\\0') || (pcVar17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerToChar1 != '\\0' && (*pointerToChar1 != '/')); pointerToChar1 = pointerToChar1 + 1) {\n          }\n          pcVar17 = pointerToChar1;\n          if (*pointerToChar1 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        pcVar18 = (char *)concat(tempdirPath,&DAT_0011b47d);\n        integerVar2 = stat(pcVar18,&localStat);\n        pointerToUInt64 = __ptr;\n        if (-1 < integerVar2) {\n          length = FUN_0011a0e0(pcVar18);\n          free(pcVar18);\n          if (length == 0) {\n            pointerToInt = __errno_location();\n            pcVar18 = strerror(*pointerToInt);\n            ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(ulongVar2,pcVar18);\n            goto LAB_00104e93;\n          }\n          pointerToUInt64 = (undefined8 *)xmalloc(0x18);\n          pcVar18 = *pointerToCharPtrArray2;\n          *pointerToUInt64 = __ptr;\n          pointerToUInt64[2] = 0;\n          pointerToUInt64[1] = length;\n          pcVar18 = (char *)concat(length,&DAT_0011b47d,pcVar18);\n        }\n        integerVar2 = 0;\n        if (DAT_001279cb != '\\0') {\n          pointerToStat = &localStat;\n          for (length = 0x24; length != 0; length = length + -1) {\n            *(undefined4 *)&pointerToStat->st_dev = 0;\n            pointerToStat = (stat *)((long)pointerToStat + (ulong)byteVar2 * -8 + 4);\n          }\n          pointerToCharPtrArray3 = (char **)pointerToCharPtrArray2[0x1d];\n          if ((char **)pointerToCharPtrArray2[0x1d] == (char **)0x0) {\n            pointerToCharPtrArray3 = pointerToCharPtrArray2;\n          }\n          integerVar2 = (**(code **)(pointerToCharPtrArray3[1] + 0x1e8))(pointerToCharPtrArray2,&localStat);\n          if (integerVar2 != 0) {\n            pcVar17 = *pointerToCharPtrArray2;\n            ulongVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(ulongVar2,pcVar17);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pcVar18;\n        *__ptr = pointerToUInt64;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(pointerToCharPtrArray2,1);\n        if (charVar2 == '\\0') {\n          ulongVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,pointerToCharPtrArray2,0,ulongVar2);\n          pointerToCharPtrArray3 = (char **)bfd_openw(pcVar18,tempdir);\n          if (pointerToCharPtrArray3 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(pcVar18,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToCharPtrArray1 = (char **)pointerToCharPtrArray2[0x1d];\n          if ((char **)pointerToCharPtrArray2[0x1d] == (char **)0x0) {\n            pointerToCharPtrArray1 = pointerToCharPtrArray2;\n          }\n          integerVar1 = (**(code **)(pointerToCharPtrArray1[1] + 0x1e8))(pointerToCharPtrArray2);\n          length = localStackVar2;\n          if (integerVar1 == 0) {\n            if (localStackVar2 < 0) {\n              FUN_001125fa(pointerToCharPtrArray2);\n              ulongVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(ulongVar2);\n            }\n            else {\n              integerVar1 = bfd_seek(pointerToCharPtrArray2,0,0);\n              if (integerVar1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  pcVar17 = *pointerToCharPtrArray3;\n                  ulongVar2 = FUN_001125fa(pointerToCharPtrArray2);\n                  pointerToChar1 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerToChar1,ulongVar2,pcVar17);\n                }\n                pointerToVoid = (void *)xmalloc(0x2000);\n                for (; length != 0; length = length - longVar2) {\n                  longVar2 = 0x2000;\n                  if (length < 0x2001) {\n                    longVar2 = length;\n                  }\n                  longVar1 = bfd_bread(pointerToVoid,longVar2,pointerToCharPtrArray2);\n                  pointerToCharPtrArray1 = pointerToCharPtrArray2;\n                  if ((longVar2 != longVar1) ||\n                     (longVar1 = bfd_bwrite(pointerToVoid,longVar2,pointerToCharPtrArray3), pointerToCharPtrArray1 = pointerToCharPtrArray3,\n                     longVar2 != longVar1)) {\n                    FUN_001126c0(0,pointerToCharPtrArray1,0,0);\n                    free(pointerToVoid);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointerToCharPtrArray3,localStackVar1 | 0x100);\n                free(pointerToVoid);\n                charVar2 = bfd_close_all_done(pointerToCharPtrArray3);\n                if (charVar2 == '\\0') {\n                  FUN_001126c0(pcVar18,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              ulongVar2 = FUN_001125fa(pointerToCharPtrArray2);\n              FUN_0011a110(ulongVar2);\n            }\n          }\n          else {\n            FUN_001126c0(0,pointerToCharPtrArray2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pointerToCharPtrArray3);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(pcVar18,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pcVar18);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pointerToCharPtrArray3 = (char **)bfd_openw(pcVar18,*(undefined8 *)pointerToCharPtrArray2[1]);\n          }\n          else {\n            pointerToCharPtrArray3 = (char **)bfd_openw(pcVar18,tempdir);\n          }\n          if (pointerToCharPtrArray3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(pointerToCharPtrArray2,pointerToCharPtrArray3,options);\n          if (charVar2 == '\\0') {\n            integerVar1 = bfd_get_arch(pointerToCharPtrArray2);\n            if (integerVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pointerToCharPtrArray3);\n            if (charVar2 == '\\0') {\n              FUN_001126c0(pcVar18,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pointerToCharPtrArray3);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(pcVar18,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (integerVar2 == 0)) {\n            FUN_0011a350(pcVar18,&localStat);\n          }\n          length = bfd_openr(pcVar18,tempdir);\n          __ptr[2] = length;\n          *localVar2 = length;\n          localVar2 = (long *)(length + 0xf0);\n          pointerToCharPtrArray3 = (char **)bfd_openr_next_archived_file(pointerToBfd);\n          bfd_close(pointerToCharPtrArray2);\n          pointerToCharPtrArray2 = pointerToCharPtrArray3;\n        }\n      }\n      *localVar2 = 0;\n      pointerToVoid = (void *)xstrdup(*localVar1);\n      if (DAT_00127a20 == 0) {\n        pointerToCode = bfd_close;\n      }\n      else {\n        pointerToCode = bfd_close_all_done;\n      }\n      charVar1 = (*pointerToCode)(localVar1);\n      if (charVar1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(pointerToVoid,0,0,0);\n      }\n      free(pointerToVoid);\n      pointerToVoid = (void *)xstrdup(*pointerToBfd);\n      charVar1 = bfd_close(pointerToBfd);\n      if (charVar1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(pointerToVoid,0,0,0);\n      }\n      free(pointerToVoid);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerToBfd = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerToBfd;\n      }\n      rmdir(tempdirPath);\n      free(tempdirPath);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    FUN_001126c0(outputFile,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(pointerToBfd,1,local_c8);\n  if (charVar1 == '\\0') {\n    integerVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(pointerToBfd,3,&localStat);\n    if (charVar1 == '\\0') {\n      integerVar1 = bfd_get_error();\n      if (integerVar2 != integerVar1) {\n        bfd_set_error(integerVar2);\n      }\n      FUN_001126c0(inputFile,0,0,0);\n      if (integerVar2 == 0xd) {\n        FUN_0011256b(local_c8[0]);\n      }\n      if (integerVar1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      FUN_0011256b(localStat.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (integerVar2 == 0xd) {\n      free(local_c8[0]);\n    }\n  }\n  if (tempdir == 0) {\n    tempdir = *(long *)pointerToBfd[1];\n  }\n  if (fileDescriptor < 0) {\n    length = bfd_openw(outputFile,tempdir);\n  }\n  else {\n    length = bfd_fdopenw(outputFile,tempdir,fileDescriptor);\n  }\n  if (length == 0) goto LAB_00105231;\n  FUN_00114d50(length,pointerToBfd,DAT_001264b4);\n  charVar1 = FUNC_00114e50(pointerToBfd,length,options);\n  if (charVar1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charVar1 = bfd_close(length);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(length);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(pointerToBfd);\n  if (charVar1 == '\\0') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "FUN_00114e50",
                "bfd_check_format_matches",
                "bfd_check_format",
                "bfd_set_format",
                "free",
                "FUN_00114d50",
                "bfd_close",
                "bfd_close_all_done",
                "bfd_get_error",
                "bfd_fdopenw",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_set_error",
                "bfd_openr",
                "bfd_openw",
                "__errno_location",
                "FUN_00113f50",
                "strerror",
                "bfd_stat",
                "FUN_0011a0e0",
                "FUN_0011256b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decompile_function_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptrToLong",
                "uVar2": "returnValue",
                "sVar3": "stringLength",
                "lVar4": "value",
                "lVar5": "bitmask",
                "local_8c": "outputString",
                "auStack_8a": "arrayStack"
            },
            "code": "\nundefined8 processStabIntType_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *ptrToLong;\n  undefined8 returnValue;\n  size_t stringLength;\n  long value;\n  long bitmask;\n  undefined2 outputString;\n  undefined4 arrayStack [24];\n  \n  if (size - 1U < 8) {\n    value = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      value = baseAddress + 0x78;\n    }\n    ptrToLong = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptrToLong;\n    if (value != 0) {\n      returnValue = FUN_00109cf4(baseAddress,value,size);\n      return returnValue;\n    }\n    value = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = value + 1;\n    *ptrToLong = value;\n    sprintf((char *)&outputString,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bitmask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&outputString);\n      sprintf((char *)((long)&outputString + stringLength),\"%ld;%ld;\",-bitmask,bitmask + -1);\n    }\n    else {\n      stringLength = strlen((char *)&outputString);\n      *(undefined2 *)((long)&outputString + stringLength) = 0x3b30;\n      *(undefined *)((long)&outputString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&outputString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&outputString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = FUN_00109b52(baseAddress,&outputString,value,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "mode",
                "param_4": "dynamicArray",
                "param_5": "arraySize",
                "uVar1": "elemCount",
                "uVar2": "tempCount",
                "cVar3": "result",
                "pcVar4": "tempString",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "index",
                "__ptr": "memoryPointer",
                "uVar7": "returnValue",
                "uVar8": "isTemporay",
                "lVar9": "iteration",
                "uVar10": "newSize",
                "puVar11": "pointer",
                "bVar12": "byteValue"
            },
            "code": "\nundefined8 processData_00109ed3(long data,uint flag,undefined4 mode,long *dynamicArray,ulong *arraySize)\n\n{\n  ulong elemCount;\n  ulong tempCount;\n  char result;\n  char *tempString;\n  size_t stringLength;\n  char *formattedString;\n  long index;\n  void *memoryPointer;\n  undefined8 returnValue;\n  undefined isTemporay;\n  long iteration;\n  ulong newSize;\n  undefined *pointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  index = *(long *)(data + 0x60);\n  if (index != 0) {\n    elemCount = *(ulong *)(index + 0x10);\n    if (((long)elemCount < 1) || (dynamicArray == (long *)0x0)) {\n      isTemporay = *(undefined *)(index + 0x1c);\n      tempString = (char *)FUN_00109b2f(data);\n      stringLength = strlen(tempString);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)flag,tempString);\n      free(tempString);\n      index = 0;\n    }\n    else {\n      newSize = *arraySize;\n      if (newSize <= elemCount) {\n        if (newSize == 0) {\n          newSize = 10;\n        }\n        for (; newSize <= elemCount; newSize = newSize * 2) {\n        }\n        index = xrealloc(*dynamicArray,newSize * 8);\n        tempCount = *arraySize;\n        *dynamicArray = index;\n        pointer = (undefined *)(index + tempCount * 8);\n        for (iteration = (newSize - tempCount) * 8; iteration != 0; iteration = iteration + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)byteValue * -2 + 1;\n        }\n        *arraySize = newSize;\n      }\n      index = *(long *)(*dynamicArray + elemCount * 8);\n      if ((index != 0) && (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0')) {\n        memoryPointer = (void *)FUN_00109b2f(data);\n        free(memoryPointer);\n        returnValue = FUN_00109cf4(data,index,mode);\n        return returnValue;\n      }\n      index = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = index + 1;\n      tempString = (char *)FUN_00109b2f(data);\n      stringLength = strlen(tempString);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",index,(ulong)flag,tempString);\n      free(tempString);\n      isTemporay = 1;\n      *(long *)(*dynamicArray + elemCount * 8) = index;\n    }\n    result = FUN_00109b52(data,formattedString,index,isTemporay,mode);\n    if (result != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "xrealloc",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00113c43",
                "FUN_0010d882",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_00114190",
                "FUN_0010aa53",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010bbd3",
                "FUN_0010e918",
                "FUN_00114c80",
                "FUN_00116852",
                "FUN_0010da0b",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_00113ce0",
                "FUN_0010ab4d",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_00109a0b",
                "FUN_00112894",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_00113bfa",
                "FUN_00109b52",
                "FUN_0010c218",
                "FUN_0010c7a0",
                "FUN_0010bd62",
                "FUN_00113b98",
                "FUN_0011173a",
                "FUN_00113e23",
                "FUN_00107880",
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_00112925",
                "FUN_0010ae0e",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010bc80",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00116030",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_00114cf0",
                "FUN_0010ebb0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00112904",
                "FUN_0010eafe",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_data_structures_0010bbd3",
                "param_1": "dataStruct",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "counter",
                "puVar5": "ptr4",
                "pcVar6": "name",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initializeDataStructures_0010bbd3(long *dataStruct,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long counter;\n  undefined4 *ptr4;\n  char *name;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  name = \"\";\n  if (filename != (char *)0x0) {\n    name = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = name;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  dataStruct[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)flag * -2 + 1;\n  }\n  ptr1 = (undefined8 *)dataStruct[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*dataStruct != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *dataStruct = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  dataStruct[1] = (long)ptr3;\n  dataStruct[5] = 0;\n  *(undefined (*) [16])(dataStruct + 3) = ZEXT816(0);\n  result._8_8_ = param4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_001125fa",
                "FUN_00119ed0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_data_00115d00",
                "param_1": "dataItem",
                "param_2": "binaryInfo",
                "uVar1": "matchCount",
                "lVar2": "matchingData"
            },
            "code": "\nlong findMatchingData_00115d00(long dataItem,long binaryInfo)\n\n{\n  uint matchCount;\n  long matchingData;\n  \n  matchingData = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binaryInfo + 8) + 8) == 5) {\n      if (*(int *)(dataItem + 0x28) == *(int *)(*(long *)(binaryInfo + 0x110) + 0xd40)) {\n        matchCount = *(uint *)(dataItem + 0x2c);\n        if (matchCount == 0) {\n          matchingData = 0;\n        }\n        else if ((ulong)matchCount <\n                 *(ulong *)(*(long *)(binaryInfo + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryInfo + 8) + 0x380) + 0x340) + 5))\n        {\n          matchingData = *(long *)(DAT_001278b0 + (ulong)(matchCount - 1) * 8);\n        }\n        else {\n          matchingData = 0;\n        }\n      }\n      else {\n        matchingData = 0;\n      }\n    }\n    else {\n      matchingData = 0;\n    }\n  }\n  return matchingData;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_matching_data_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_structure_00113c43",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "lVar1": "allocated_memory",
                "plVar2": "new_structure",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_structure_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long allocated_memory;\n  long *new_structure;\n  undefined return_value [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    allocated_memory = FUN_00112904(0x10,0);\n    if (allocated_memory != 0) {\n      new_structure = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)new_structure + 0x21) = 0;\n      *new_structure = input_param_1;\n      *(undefined4 *)((long)new_structure + 0x24) = 0;\n      new_structure[1] = input_param_2;\n      new_structure[2] = input_param_3;\n      new_structure[3] = input_param_4;\n      *(undefined *)(new_structure + 4) = input_param_5;\n      *(long **)(allocated_memory + 0x10) = new_structure;\n      goto LAB_00113caa;\n    }\n  }\n  allocated_memory = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_param_6;\n  return_value._0_8_ = allocated_memory;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_data_00112a33",
                "param_1": "result",
                "param_2": "dataPtr",
                "param_3": "outputPtr",
                "param_4": "inputType",
                "param_5": "param1",
                "param_6": "param2",
                "param_7": "param3",
                "uVar1": "returnValue",
                "lVar2": "temp1",
                "plVar3": "temp2"
            },
            "code": "\nbool processData_00112a33(undefined8 result,long dataPtr,undefined8 outputPtr,byte inputType,undefined8 param1\n                 ,undefined8 param2,uint param3)\n\n{\n  undefined returnValue;\n  long temp1;\n  long *temp2;\n  \n  if (inputType < 0x12) {\n    if (inputType != 0) {\n      switch(inputType) {\n      case 1:\n        returnValue = FUN_0010c05d(param1,*(undefined8 *)(dataPtr + 8),param2,4,\n                             *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = FUN_0010c05d(param1,*(undefined8 *)(dataPtr + 8),param2,(param3 & 0xff) + 2,\n                             *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 4:\n        returnValue = FUN_0010c05d(param1,*(undefined8 *)(dataPtr + 8),param2,5,\n                             *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 9:\n        returnValue = FUN_0010bd62(param1,*(undefined8 *)(dataPtr + 8),param2,1,\n                             *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        temp1 = FUN_0010c6be(param1,*(undefined8 *)(dataPtr + 8));\n        if (temp1 == 0) {\n          return false;\n        }\n        temp2 = (long *)FUN_0010da0b(result,outputPtr);\n        *temp2 = temp1;\n        break;\n      case 0xd:\n        temp1 = FUN_0010c218(param1,*(undefined8 *)(dataPtr + 8));\n        return temp1 != 0;\n      case 0x11:\n        returnValue = FUN_0010bd62(param1,*(undefined8 *)(dataPtr + 8),param2,2,\n                             *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (inputType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = FUN_0010c05d(param1,*(undefined8 *)(dataPtr + 8),param2,1,\n                         *(long *)(dataPtr + 0x10) + *(long *)(*(long *)(dataPtr + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bd62",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "convert_xcoff_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "typeCode",
                "pcVar2": "typeName",
                "uVar3": "convertedType",
                "lVar4": "result",
                "plVar5": "ptrResult",
                "uVar6": "negativeTypeCode",
                "fprintf": "printErrorMessage",
                "dcgettext": "getErrorMessage",
                "_stderr": "standardError"
            },
            "code": "\n\n\nlong convertXCOFFType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint typeCode;\n  char *typeName;\n  undefined8 convertedType;\n  long result;\n  long *ptrResult;\n  uint negativeTypeCode;\n  \n  if ((*param3 == 0) && (typeCode = param3[1], (int)typeCode < 0)) {\n    negativeTypeCode = ~typeCode;\n    if (negativeTypeCode < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)negativeTypeCode * 8);\n      if (result == 0) {\n        switch(negativeTypeCode) {\n        case 1:\n          convertedType = FUN_00113dfe(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          convertedType = FUN_00113dfe(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          convertedType = FUN_00113dfe(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          convertedType = FUN_00113dfe(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          convertedType = FUN_00113dfe(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          convertedType = FUN_00113dfe(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          convertedType = FUN_00113dfe(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          convertedType = FUN_00113dfe(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          convertedType = FUN_00113dfe(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          convertedType = FUN_00113e17();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          convertedType = FUN_00113df2(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          convertedType = FUN_00113df2(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          convertedType = FUN_00113df2(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          convertedType = FUN_00113dfe(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          convertedType = FUN_00112904(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          convertedType = FUN_00113df2(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          convertedType = FUN_00113df2(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          convertedType = 0;\n          break;\n        case 0x13:\n          convertedType = FUN_00113dfe(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          convertedType = FUN_00112904(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          convertedType = FUN_00112904(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          convertedType = FUN_00112904(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          convertedType = FUN_00112904(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          convertedType = FUN_00112904(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          convertedType = FUN_00112904(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          convertedType = FUN_00113dfe(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          convertedType = FUN_00113dfe(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          convertedType = FUN_00113dfe(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          convertedType = FUN_00113dfe(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          convertedType = FUN_00113dfe(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          convertedType = FUN_00113dfe(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          convertedType = FUN_00112904(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          convertedType = FUN_00113dfe(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          convertedType = FUN_00113dfe(4,0);\n          typeName = \"int\";\n        }\n        result = FUN_0010c218(param1,typeName,convertedType);\n        *(long *)(param2 + 0x90 + (ulong)negativeTypeCode * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(standardError,typeName,(ulong)typeCode);\n  }\n  else {\n    ptrResult = (long *)FUN_00109022(param2);\n    if (ptrResult != (long *)0x0) {\n      if (*ptrResult == 0) {\n        result = FUN_00113e23(ptrResult,0);\n        return result;\n      }\n      return *ptrResult;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "fprintf",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "convert_xcoff_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_symbol_table_0010e07c",
                "param_1": "bfdHandle",
                "param_2": "coffSymbols",
                "param_3": "symbolTable",
                "param_4": "symbolTableSize",
                "param_5": "bfdSection",
                "param_6": "bfdError",
                "lVar1": "symbolTableSizeLimit",
                "lVar2": "symbolTableEntry",
                "lVar3": "numEntries",
                "cVar4": "getSymbolResult",
                "uVar5": "bfdError",
                "__ptr": "symbolTableEntries",
                "uVar6": "symbolValue",
                "uVar7": "bfdErrorMessage",
                "puVar8": "newSymbolEntry",
                "pcVar9": "errorMessage",
                "puVar10": "auxiliaryData",
                "uVar11": "auxiliaryValue",
                "lVar12": "numValidEntries",
                "iVar13": "symbolSize",
                "iVar14": "symbolTableEntryLimit",
                "local_a8": "symbolValueLower",
                "uStack_a4": "symbolValueUpper",
                "uStack_a0": "symbolOffsetLower",
                "uStack_9c": "symbolOffsetUpper",
                "local_88": "symbolName",
                "local_6a": "symbolType",
                "local_68": "symbolTag",
                "local_67": "hasAuxiliary",
                "local_60": "auxiliaryDataBuffer",
                "local_56": "symbolOther"
            },
            "code": "\nundefined8\nparseSymbolTable_0010e07c(undefined8 bfdHandle,long *coffSymbols,undefined8 symbolTable,int symbolTableSize,long bfdSection,\n            undefined8 bfdError)\n\n{\n  long symbolTableSizeLimit;\n  long symbolTableEntry;\n  long numEntries;\n  char getSymbolResult;\n  undefined4 bfdError;\n  void *symbolTableEntries;\n  undefined8 symbolValue;\n  undefined8 bfdErrorMessage;\n  undefined4 *newSymbolEntry;\n  char *errorMessage;\n  undefined *auxiliaryData;\n  uint auxiliaryValue;\n  long numValidEntries;\n  int symbolSize;\n  int symbolTableEntryLimit;\n  undefined4 symbolValueLower;\n  undefined4 symbolValueUpper;\n  undefined4 symbolOffsetLower;\n  undefined4 symbolOffsetUpper;\n  undefined symbolName [30];\n  undefined2 symbolType;\n  byte symbolTag;\n  byte hasAuxiliary;\n  undefined auxiliaryDataBuffer [10];\n  ushort symbolOther;\n  \n  symbolTableEntryLimit = 10;\n  numValidEntries = 0;\n  symbolTableSizeLimit = *(long *)(bfdSection + 0x18);\n  symbolTableEntries = (void *)xmalloc(0x50);\n  while ((coffSymbols[3] < symbolTableSizeLimit && (coffSymbols[2] < coffSymbols[1]))) {\n    symbolTableEntry = *(long *)(*coffSymbols + coffSymbols[2] * 8);\n    getSymbolResult = bfd_coff_get_syment(bfdHandle,symbolTableEntry,symbolName);\n    if (getSymbolResult == '\\0') {\n      bfdError = bfd_get_error();\n      symbolValue = bfd_errmsg(bfdError);\n      errorMessage = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      bfdErrorMessage = dcgettext(0,errorMessage,5);\n      FUN_00119ed0(bfdErrorMessage,symbolValue);\n      free(symbolTableEntries);\n      return 0;\n    }\n    numEntries = coffSymbols[3];\n    auxiliaryData = (undefined *)0x0;\n    coffSymbols[2] = coffSymbols[2] + 1;\n    coffSymbols[3] = numEntries + 1 + (ulong)hasAuxiliary;\n    if (hasAuxiliary != 0) {\n      auxiliaryData = auxiliaryDataBuffer;\n      getSymbolResult = bfd_coff_get_auxent(bfdHandle,symbolTableEntry,0,auxiliaryData);\n      if (getSymbolResult == '\\0') {\n        bfdError = bfd_get_error();\n        symbolValue = bfd_errmsg(bfdError);\n        errorMessage = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolTag == 0x12) {\n      auxiliaryValue = (uint)symbolOther;\n      symbolSize = (int)*(undefined8 *)(symbolTableEntry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30);\n    }\n    else {\n      if (symbolTag < 0x13) {\n        if ((symbolTag == 8) || (symbolTag == 0xb)) {\n          auxiliaryValue = 0;\n          symbolSize = ((int)*(undefined8 *)(symbolTableEntry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolTableEntry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolTag == 0x66) break;\n      auxiliaryValue = 0;\n      symbolSize = 0;\n    }\nLAB_0010e214:\n    bfdErrorMessage = FUN_0010dac0(bfdHandle,coffSymbols,symbolTable,numEntries,symbolType,auxiliaryData,1);\n    symbolValue = *(undefined8 *)(symbolTableEntry + 8);\n    newSymbolEntry = (undefined4 *)xmalloc(0x20);\n    symbolValueLower = (undefined4)symbolValue;\n    symbolValueUpper = (undefined4)((ulong)symbolValue >> 0x20);\n    symbolOffsetLower = (undefined4)bfdErrorMessage;\n    symbolOffsetUpper = (undefined4)((ulong)bfdErrorMessage >> 0x20);\n    *(undefined8 *)(newSymbolEntry + 5) = 0;\n    newSymbolEntry[6] = symbolSize;\n    newSymbolEntry[7] = auxiliaryValue;\n    newSymbolEntry[4] = 0;\n    *newSymbolEntry = symbolValueLower;\n    newSymbolEntry[1] = symbolValueUpper;\n    newSymbolEntry[2] = symbolOffsetLower;\n    newSymbolEntry[3] = symbolOffsetUpper;\n    if (symbolTableEntryLimit <= (int)numValidEntries + 1) {\n      symbolTableEntryLimit = symbolTableEntryLimit + 10;\n      symbolTableEntries = (void *)xrealloc(symbolTableEntries,(long)symbolTableEntryLimit << 3,newSymbolEntry,0,bfdError);\n    }\n    *(undefined4 **)((long)symbolTableEntries + numValidEntries * 8) = newSymbolEntry;\n    numValidEntries = numValidEntries + 1;\n  }\n  *(undefined8 *)((long)symbolTableEntries + (long)(int)numValidEntries * 8) = 0;\n  symbolValue = FUN_00113da9(symbolTableSize == 8,*(undefined2 *)(bfdSection + 10),symbolTableEntries);\n  return symbolValue;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "FUN_00113da9",
                "xrealloc",
                "bfd_coff_get_auxent",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_symbol_table_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_app_001082c3",
                "undefined8": "void"
            },
            "code": "\nvoid initializeApp_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_app_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "parse_file_00114460",
                "param_1": "filename",
                "param_2": "symbolTable",
                "param_3": "fileContent",
                "iVar1": "lineNumber",
                "piVar2": "errorCode",
                "pcVar3": "errorString",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "slotAddress",
                "pbVar7": "currentCharacter",
                "bVar8": "currentByte",
                "pbVar9": "nextCharacter",
                "pbVar10": "currentByteAddress",
                "pbVar11": "nextByteAddress",
                "pbVar12": "lineStartAddress"
            },
            "code": "\nvoid parseFile_00114460(char *filename,undefined8 symbolTable,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errorCode;\n  char *errorString;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *buffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **slotAddress;\n  byte *currentCharacter;\n  byte currentByte;\n  byte *nextCharacter;\n  byte *currentByteAddress;\n  byte *nextByteAddress;\n  byte *lineStartAddress;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorCode = __errno_location();\n      errorString = strerror(*errorCode);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translatedString,filename,errorString);\n    }\n    bytesRead = fread(buffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translatedString,filename);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentByte = *buffer;\n    lineStartAddress = buffer;\n    while (currentByteAddress = lineStartAddress, currentByte != 0) {\n      for (; currentByte = *currentByteAddress, nextByteAddress = currentByteAddress, currentByte != 10; currentByteAddress = currentByteAddress + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextCharacter = currentByteAddress + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentByteAddress = 0;\n            nextCharacter = currentByteAddress + 1;\n            if (currentByteAddress[1] == 10) {\n              nextCharacter = currentByteAddress + 2;\n              nextByteAddress = currentByteAddress + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentByteAddress = 0;\n      if (currentByteAddress[1] == 0xd) {\n        nextByteAddress = currentByteAddress + 1;\n        nextCharacter = currentByteAddress + 2;\n      }\n      else {\n        nextCharacter = currentByteAddress + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartAddress;\n      while ((currentByte == 0x20 || (currentByteAddress = lineStartAddress, currentByte == 9))) {\n        currentByteAddress = lineStartAddress + 1;\n        lineStartAddress = lineStartAddress + 1;\n        currentByte = *currentByteAddress;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentByteAddress[1];\n        currentByteAddress = currentByteAddress + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentByteAddress[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentByteAddress[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentByteAddress[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentByteAddress[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentByteAddress[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentByteAddress[6];\n          currentCharacter = currentByteAddress + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentCharacter[1];\n                currentCharacter = currentCharacter + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translatedString,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentByteAddress = 0;\n      if (lineStartAddress < currentByteAddress) {\n        slotAddress = (byte **)htab_find_slot(symbolTable,lineStartAddress,1);\n        *slotAddress = lineStartAddress;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartAddress = nextCharacter;\n      currentByte = nextByteAddress[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "fread",
                "FUN_00113f50",
                "strerror",
                "FUN_00119dd0",
                "fopen",
                "xmalloc",
                "ferror",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "parse_and_store_data_0010a94e",
                "param_1": "binaryData",
                "param_2": "inputParam1",
                "param_3": "inputParam2",
                "param_4": "inputOption",
                "cVar1": "flag",
                "lVar2": "dataPtr",
                "__s": "result1",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "newData",
                "uVar8": "returnValue",
                "pcVar9": "option"
            },
            "code": "\nundefined8 parseAndStoreData_0010a94e(long binaryData,char *inputParam1,char *inputParam2,int inputOption)\n\n{\n  char flag;\n  long dataPtr;\n  char *result1;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *newData;\n  undefined8 returnValue;\n  char *option;\n  \n  flag = *(char *)(*(long *)(binaryData + 0x60) + 0x1c);\n  result1 = (char *)FUN_00109b2f();\n  newData = *(char **)(*(long *)(binaryData + 0x60) + 0x20);\n  if (newData == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    len1 = strlen(newData);\n    len2 = strlen(inputParam1);\n    len3 = strlen(result1);\n    len4 = strlen(inputParam2);\n    newData = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (inputOption == 1) {\n      option = \"/1\";\n    }\n    else {\n      option = \"/0\";\n      if ((inputOption != 2) && (option = \"\", inputOption != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(newData,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(binaryData + 0x60) + 0x20),inputParam1,option,\n            result1,inputParam2,*(long *)(binaryData + 0x60));\n    free(*(void **)(*(long *)(binaryData + 0x60) + 0x20));\n    dataPtr = *(long *)(binaryData + 0x60);\n    *(char **)(dataPtr + 0x20) = newData;\n    if (flag != '\\0') {\n      *(undefined *)(dataPtr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "parse_and_store_data_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_data_from_binary_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "output_data",
                "param_4": "input_data",
                "auVar1": "output_data_container",
                "piVar2": "data_ptr",
                "uVar3": "extracted_data",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] extract_data_from_binary_00113b1e(long input_param,undefined8 unused_param,ulong output_data,undefined8 input_data)\n\n{\n  undefined output_data_container [16];\n  int *data_ptr;\n  undefined8 extracted_data;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    data_ptr = (int *)FUN_00112b6e(input_param,0);\n    if ((data_ptr == (int *)0x0) || (3 < *data_ptr - 7U)) {\n      extracted_data = 0;\n    }\n    else {\n      extracted_data = **(undefined8 **)(data_ptr + 4);\n    }\n    result._8_8_ = input_data;\n    result._0_8_ = extracted_data;\n    return result;\n  }\n  output_data_container._8_8_ = 0;\n  output_data_container._0_8_ = output_data;\n  return output_data_container << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "send_data_request_0010a0e9",
                "param_1": "dataStruct",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "valueToCheck",
                "uVar2": "result",
                "__s": "string",
                "sVar3": "stringLength",
                "__s_00": "modifiedString"
            },
            "code": "\nundefined4 sendDataRequest_0010a0e9(long dataStruct,undefined8 value1,undefined8 value2)\n\n{\n  undefined valueToCheck;\n  undefined4 result;\n  char *string;\n  size_t stringLength;\n  char *modifiedString;\n  \n  valueToCheck = *(undefined *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(dataStruct + 0x60) + 0x18);\n  string = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  modifiedString = (char *)xmalloc(stringLength + 100);\n  sprintf(modifiedString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  result = FUN_00109b52(dataStruct,modifiedString,0,valueToCheck,result);\n  if ((char)result != '\\0') {\n    free(modifiedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "send_data_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_duplicate_entry_00115f50",
                "param_1": "entryId",
                "param_2": "entryNames",
                "param_3": "includeAttributes",
                "__s1": "currentName",
                "uVar1": "comparisonResult",
                "uVar2": "resultFlag",
                "extraout_EDX": "extraOutputEDX",
                "plVar3": "currentEntry",
                "auVar4": "attributeResult"
            },
            "code": "\nuint checkDuplicateEntry_00115f50(long entryId,char **entryNames,char includeAttributes)\n\n{\n  char *currentName;\n  uint comparisonResult;\n  undefined4 resultFlag;\n  undefined4 extraOutputEDX;\n  long *currentEntry;\n  undefined attributeResult [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  attributeResult = FUN_001159d0(entryNames);\n  if (attributeResult[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      currentName = *entryNames;\n      currentEntry = DAT_001279b8;\n      do {\n        comparisonResult = strcmp(currentName,(char *)currentEntry[1]);\n        attributeResult._4_4_ = 0;\n        attributeResult._0_4_ = comparisonResult;\n        attributeResult._8_4_ = extraOutputEDX;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        currentEntry = (long *)*currentEntry;\n      } while (currentEntry != (long *)0x0);\n    }\n    resultFlag = attributeResult._8_4_;\n    if (((((includeAttributes == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (attributeResult._8_4_ = resultFlag, attributeResult._0_8_ = *(long *)(entryId + 8),\n         *(int *)(*(long *)(entryId + 8) + 8) != 5)) ||\n        ((attributeResult._0_8_ = (ulong)entryNames[0x1a], *(int *)(entryNames[0x1a] + 4) != 7 ||\n         (attributeResult = FUN_00113fb0(*entryNames,\".gnu.build.attributes\"), attributeResult[0] == '\\0')))) &&\n       ((*(byte *)((long)entryNames + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(attributeResult._1_7_,entryNames[8] == (char *)0x0) |\n             CONCAT31(attributeResult._9_3_,entryNames[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001159d0",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_duplicate_entry_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_section_bytes_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseSectionBytes_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_section_bytes_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataAddress",
                "param_2": "size",
                "lVar1": "result",
                "cVar2": "condition",
                "__ptr": "stringPointer",
                "uVar3": "sizeVar",
                "uVar4": "sizeMinusOne",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long dataAddress,uint size)\n\n{\n  long result;\n  char condition;\n  void *stringPointer;\n  ulong sizeVar;\n  uint sizeMinusOne;\n  char formattedString [50];\n  \n  sizeMinusOne = size - 1;\n  sizeVar = (ulong)size;\n  if ((sizeMinusOne < 0x10) && (result = *(long *)(dataAddress + 0xf8 + (ulong)sizeMinusOne * 8), result != 0)) {\n    FUN_00109cf4(dataAddress,result,sizeVar);\n    return;\n  }\n  condition = FUN_0010b800(dataAddress,4,0);\n  if (condition != '\\0') {\n    stringPointer = (void *)FUN_00109b2f(dataAddress);\n    result = *(long *)(dataAddress + 0x68);\n    *(long *)(dataAddress + 0x68) = result + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(dataAddress + 0xf8 + (ulong)sizeMinusOne * 8) = result;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",result,stringPointer,sizeVar);\n    free(stringPointer);\n    FUN_00109b52(dataAddress,formattedString,result,1,sizeVar);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010914e",
                "FUN_00108072",
                "FUN_00119f70",
                "FUN_00108fe8",
                "FUN_0010882c",
                "FUN_00115b70",
                "FUN_00114e50",
                "FUN_00114190",
                "FUN_00108fb9",
                "FUN_00108916",
                "FUN_0010543c",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010da0b",
                "FUN_00112996",
                "FUN_00115530",
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_001083de",
                "FUN_0010b800",
                "FUN_00113f50",
                "FUN_001152b6",
                "FUN_00108179",
                "FUN_0010c218",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_0010808f",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_00104920",
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00114e00",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00107976",
                "FUN_00108a2a",
                "FUN_0010e07c",
                "FUN_00116490",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_00108375",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00109a32",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_0010e6a8",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010827b",
                "FUN_001086af",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_00114690",
                "FUN_0010bf20",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "inputArray",
                "param_2": "debugInfoArray",
                "iVar1": "arraySize",
                "__format": "formatString",
                "piVar3": "resultArray",
                "plVar4": "debugInfoPtr",
                "bVar5": "isCircular",
                "local_18": "tempDebugInfoArray",
                "local_10": "tempInputArray",
                "uVar2": "formattedString",
                "_stderr": "stderr"
            },
            "code": "\n\n\nint * getRealType_00112b6e(int *inputArray,long *debugInfoArray)\n\n{\n  int arraySize;\n  undefined8 formattedString;\n  char *formatString;\n  int *resultArray;\n  long *debugInfoPtr;\n  bool isCircular;\n  long *tempDebugInfoArray;\n  int *tempInputArray;\n  \n  arraySize = *inputArray;\n  if ((arraySize != 1) && (1 < arraySize - 0x16U)) {\n    return inputArray;\n  }\n  debugInfoPtr = debugInfoArray;\n  while (debugInfoPtr != (long *)0x0) {\n    if ((inputArray == (int *)debugInfoPtr[1]) ||\n       (isCircular = debugInfoPtr == (long *)*debugInfoPtr, debugInfoPtr = (long *)*debugInfoPtr, isCircular)) {\n      formattedString = FUN_001129f4(inputArray,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(stderr,formatString,formattedString);\n      return (int *)0x0;\n    }\n  }\n  tempDebugInfoArray = debugInfoArray;\n  tempInputArray = inputArray;\n  if (arraySize - 0x16U < 2) {\n    resultArray = (int *)getRealType_00112b6e((*(undefined8 **)(inputArray + 4))[1],&tempDebugInfoArray);\n    return resultArray;\n  }\n  resultArray = *(int **)**(undefined8 **)(inputArray + 4);\n  if (inputArray == resultArray) {\n    return inputArray;\n  }\n  if (resultArray == (int *)0x0) {\n    return inputArray;\n  }\n  resultArray = (int *)getRealType_00112b6e(resultArray,&tempDebugInfoArray);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001129f4",
                "FUN_00112b6e",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_address",
                "param_2": "param_address",
                "param_3": "size1",
                "param_4": "param4",
                "param_5": "size2",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "string_length",
                "cVar3": "char_value"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data_address,undefined8 param_address,ulong size1,undefined param4,ulong size2,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_address + 0x60) + 0x1c);\n    string1 = (char *)FUN_00109b2f();\n    size2 = size2 & 0xffffffff;\n    size1 = size1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data_address,param_address,size1,param4,size2);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_address + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_address + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_address + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_address + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "puVar2": "allocatedData"
            },
            "code": "\nlong allocateAndStoreData_00113d6e(undefined8 input1,undefined8 input2)\n\n{\n  long result;\n  undefined8 *allocatedData;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocatedData = (undefined8 *)xmalloc(0x10);\n    *allocatedData = input1;\n    allocatedData[1] = input2;\n    *(undefined8 **)(result + 0x10) = allocatedData;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010e842",
                "FUN_0010aa53",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_00108863",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104a35",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_0011256b",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_001081e9",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_00116030",
                "FUN_0010c95e",
                "FUN_00114b84",
                "FUN_00104ea2",
                "FUN_0010b948",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_operation_00114d50",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "operationType"
            },
            "code": "\nvoid executeOperation_00114d50(long arg1,long arg2,uint operationType)\n\n{\n  if (*(int *)(*(long *)(arg1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((operationType == 2) && (*(int *)(*(long *)(arg2 + 8) + 8) == 2)) {\n    operationType = (uint)*(byte *)(*(long *)(*(long *)(arg2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(arg1 + 8) + 0x380) + 0x78))(arg1,operationType != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_operation_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "defaultMessage",
                "pcVar2": "localizedMessage"
            },
            "code": "\nvoid printUsage_00108916(FILE *file,int errorCode)\n\n{\n  undefined8 defaultMessage;\n  char *localizedMessage;\n  \n  defaultMessage = DAT_001275e0;\n  localizedMessage = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,localizedMessage,defaultMessage);\n  localizedMessage = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,localizedMessage);\n  FUN_00104a35(DAT_001275e0,file);\n  if (errorCode == 0) {\n    localizedMessage = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,localizedMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "handle_bfd_load_error_001126c0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "inputFlag",
                "iVar1": "errorStatus",
                "uVar2": "errorString",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localArray",
                "local_c8": "localVar5",
                "local_c0": "localVar6",
                "local_b8": "localVar7",
                "local_a8": "localVar8",
                "local_98": "localVar9",
                "local_88": "localVar10",
                "local_78": "localVar11",
                "local_68": "localVar12",
                "local_58": "localVar13",
                "local_48": "localVar14",
                "_stdout": "stdout",
                "_stderr": "stderr",
                "stdout": "_stdout",
                "stderr": "_stderr"
            },
            "code": "\n\n\nvoid handleBFDLoadError_001126c0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long errorMessage,long param10,long *param11,char *param12,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char inputFlag;\n  int errorStatus;\n  undefined8 errorString;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localArray [32];\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  \n  if (inputFlag != '\\0') {\n    localVar7 = errorCode;\n    localVar8 = param2;\n    localVar9 = param3;\n    localVar10 = param4;\n    localVar11 = param5;\n    localVar12 = param6;\n    localVar13 = param7;\n    localVar14 = param8;\n  }\n  localVar5 = param13;\n  localVar6 = param14;\n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg();\n  }\n  fflush(stdout);\n  fputs(DAT_001275e0,stderr);\n  if (param10 != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(param10);\n    }\n    if ((param11 != (long *)0x0) && (*param11 != 0)) {\n      fprintf(stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (param12 != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localArray;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,stderr);\n    vfprintf(stderr,param12,&localVar1);\n  }\n  fprintf(stderr,\": %s\\n\",errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "fputs",
                "fwrite",
                "fflush",
                "FUN_001125fa",
                "vfprintf",
                "fprintf",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_0010551d",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00108466"
            ],
            "imported": false,
            "current_name": "handle_bfd_load_error_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_memory_00113b4a",
                "param_1": "value",
                "lVar1": "memoryBlock"
            },
            "code": "\nlong initializeMemory_00113b4a(long value)\n\n{\n  long memoryBlock;\n  \n  if (value != 0) {\n    memoryBlock = FUN_00112904(0x15,0);\n    if (memoryBlock == 0) {\n      memoryBlock = 0;\n    }\n    else {\n      *(long *)(memoryBlock + 0x10) = value;\n    }\n    return memoryBlock;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_information_0010edb4",
                "param_1": "fileContext",
                "param_2": "filename",
                "param_3": "fileType",
                "param_4": "fileSize",
                "cVar1": "success",
                "iVar2": "comparisonResult",
                "uVar3": "result",
                "in_R10": "extraParam"
            },
            "code": "\nundefined8 updateFileInformation_0010edb4(long fileContext,undefined8 filename,undefined4 fileType,ulong fileSize)\n\n{\n  char success;\n  int comparisonResult;\n  undefined8 result;\n  undefined8 extraParam;\n  \n  if (*(long *)(fileContext + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileContext + 0x1f0) < fileSize) {\n    *(ulong *)(fileContext + 0x1f0) = fileSize;\n  }\n  comparisonResult = filename_cmp(filename);\n  if (comparisonResult != 0) {\n    success = FUN_0010e2f0(fileContext,0x84,0,fileSize,filename);\n    if (success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileContext + 0x210) = filename;\n  }\n  result = FUN_0010e2f0(fileContext,0x44,fileType,fileSize - *(long *)(fileContext + 0x200),0,extraParam);\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_information_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010914e",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_00108fe8",
                "FUN_00119e70",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00112996",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bf20",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "data",
                "param_2": "iterationCount",
                "cVar1": "result",
                "__ptr": "allocatedMemory",
                "__s": "tempString",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "additionalData",
                "iVar3": "counter",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long data,int iterationCount)\n\n{\n  char result;\n  void *allocatedMemory;\n  char *tempString;\n  size_t stringLength;\n  char *modifiedString;\n  ulong additionalData;\n  int counter;\n  undefined returnValue [16];\n  \n  counter = 0;\n  do {\n    if (iterationCount <= counter) {\n      returnValue = FUN_00109ed3(data,0x66,0,data + 0x188,data + 400,additionalData);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0') {\n      allocatedMemory = (void *)FUN_00109b2f(data);\n      free(allocatedMemory);\n    }\n    else {\n      tempString = (char *)FUN_00109b2f(data);\n      stringLength = strlen(tempString);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",tempString);\n      free(tempString);\n      result = FUN_0010e2f0(data,0x80,0,0,modifiedString);\n      if (result == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = additionalData;\n        return returnValue << 0x40;\n      }\n      free(modifiedString);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_application_00104d25",
                "param_7": "unusedParameter"
            },
            "code": "\nvoid initializeApplication_00104d25(void)\n\n{\n  undefined8 unusedParameter;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0,unusedParameter,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_application_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "parse_and_dump_debug_sections_0010551d",
                "puVar1": "ptr",
                "bVar2": "byteFlag",
                "puVar3": "ptrVar",
                "pcVar4": "codePtr",
                "puVar5": "ptrVar2",
                "uVar6": "result",
                "uVar7": "result",
                "__s": "str1",
                "cVar8": "charFlag",
                "cVar9": "charFlag",
                "uVar10": "uintVar",
                "iVar11": "intVar",
                "uVar12": "uintVar",
                "uVar13": "uintVar",
                "iVar14": "intVar",
                "plVar15": "longVar1",
                "uVar16": "result",
                "uVar17": "result",
                "sVar18": "sizeVar",
                "pcVar19": "strPtr",
                "lVar21": "longVar2",
                "uVar22": "uintVar",
                "piVar23": "intPtr",
                "uVar24": "result",
                "lVar25": "longVar1",
                "uVar30": "uintVar",
                "iVar31": "intVar",
                "lVar32": "longVar1",
                "pcVar33": "str1",
                "unaff_RBX": "longPtr",
                "ppcVar35": "ptrPtr",
                "unaff_R13": "longPtr2",
                "pvVar36": "voidPtr",
                "unaff_R14": "longPtr3",
                "ppuVar37": "ptrPtr2",
                "bVar38": "boolFlag",
                "bVar39": "byteFlag",
                "in_stack_00000008": "param1",
                "in_stack_00000010": "param2",
                "in_stack_00000118": "ushortVar",
                "in_stack_00000140": "str2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong parseAndDumpDebugSections_0010551d(void)\n\n{\n  uint *ptr;\n  byte byteFlag;\n  undefined *ptrVar;\n  code *codePtr;\n  undefined8 *ptrVar2;\n  ulong result;\n  ulong result;\n  char *str1;\n  char charFlag;\n  char charFlag;\n  uint uintVar;\n  int intVar;\n  uint uintVar;\n  undefined4 uintVar;\n  int intVar;\n  long *longVar1;\n  undefined8 result;\n  undefined8 result;\n  size_t sizeVar;\n  char *strPtr;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long longVar2;\n  ulong uintVar;\n  int *intPtr;\n  ulong result;\n  long longVar1;\n  FILE *str1_00;\n  size_t sVar26;\n  long lVar27;\n  long *longPtr;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uintVar;\n  int intVar;\n  long unaff_RBP;\n  long *plongVar1;\n  char *str1;\n  undefined4 *ptrVar4;\n  char **ptrPtr;\n  long *longPtr2;\n  void *voidPtr;\n  undefined8 *longPtr3;\n  undefined **ptrPtr2;\n  bool boolFlag;\n  byte byteFlag;\n  long param1;\n  ulong param2;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort ushortVar;\n  char *str2;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteFlag = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(longPtr);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(longPtr3[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charFlag = FUN_00113fb0(), charFlag == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longVar1 = *(long *)(unaff_RBP + 0x40), longVar1 == 0))))\n    goto LAB_001151a2;\n    longPtr = (long *)xmalloc(0x20);\n    longPtr[1] = 0;\n    charFlag = bfd_get_full_section_contents();\n    if (charFlag != '\\0') {\n      lVar27 = FUN_001163d0();\n      longPtr[2] = lVar27;\n      if ((lVar27 == longVar1) || (charFlag = bfd_set_section_size(), charFlag != '\\0')) {\n        longPtr[3] = (long)longPtr2;\n        *longPtr = unaff_RBP;\n        longPtr2 = longPtr;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param1,unaff_RBP);\n        free((void *)longPtr[1]);\n        free(longPtr);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar1 = *(long *)(unaff_RBP + 8); longVar1 != 0; longVar1 = *(long *)(longVar1 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    longVar1 = bfd_get_section_by_name();\n    if (longVar1 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(longVar1 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeVar = *(size_t *)(longVar1 + 0x40);\n      str1_00 = fopen((char *)puVar29[2],\"w\");\n      if (str1_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charFlag = bfd_malloc_and_get_section();\n        if (charFlag == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeVar != 0) &&\n                (sVar26 = fwrite(str2,1,sizeVar,str1_00), sVar26 != sizeVar)) {\n          intPtr = __errno_location();\n          str1 = strerror(*intPtr);\n          result = puVar29[2];\n          result = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(result,result,str1);\n          free(str2);\n          fclose(str1_00);\n          return 0;\n        }\n        fclose(str1_00);\n        free(str2);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar1 = bfd_get_section_by_name(param1,\".gnu_debuglink\");\n    if (longVar1 != 0) {\n      result = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(result);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param1);\n    longVar1 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      result = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param1,0,result,longVar1);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param1 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (result = *(ulong *)(param1 + 0x90); result != 0;\n          result = *(ulong *)(result + 8)) {\n        uintVar = *(ulong *)(result + 0x30);\n        uintVar = uVar20;\n        result = result;\n        result = uVar20;\n        if (uintVar != 0) {\n          while ((uintVar = result, result != 0 &&\n                 (uintVar = result, uintVar <= *(ulong *)(uVar20 + 0x30)))) {\n            result = *(ulong *)(result + 8);\n            if (result == 0) goto LAB_00107db8;\n            uintVar = *(ulong *)(result + 0x30);\n            result = uVar20;\n            result = uintVar;\n          }\n        }\n        uVar20 = uintVar;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        result = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        result = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          result = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = result;\n      *(ulong *)(lStack0000000000000078 + 0x38) = result;\n    }\n  }\n  plongVar1 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param1 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    result = FUN_0010554f();\n    return result;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ptrPtr2 = &PTR_sstr1tab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrVar4 = puStack0000000000000020;\n    for (longVar1 = 0x18; longVar1 != 0; longVar1 = longVar1 + -1) {\n      *ptrVar4 = 0;\n      ptrVar4 = ptrVar4 + (ulong)byteFlag * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrVar = *ptrPtr2;\n      longVar1 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((longVar1 != 0) && (lVar27 != 0)) {\n        longVar1 = *(long *)(longVar1 + 0x40);\n        __ptr = (void *)xmalloc(longVar1);\n        charFlag = bfd_get_section_contents();\n        if (charFlag == '\\0') {\n          uintVar = bfd_get_error();\n          bfd_errmsg(uintVar);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*longPtr3);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          result = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(result + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar = bfd_get_error();\n            bfd_errmsg(uintVar);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*longPtr3);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + result) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (voidPtr = __ptr; voidPtr <= (void *)((long)__ptr + longVar1 + -0xc);\n                  voidPtr = (void *)((long)voidPtr + 0xc)) {\n                uVar20 = (**(code **)(longPtr3[1] + 0x40))(voidPtr);\n                byteFlag = *(byte *)((long)voidPtr + 4);\n                uintVar = (**(code **)(longPtr3[1] + 0x58))((long)voidPtr + 6);\n                lVar27 = (**(code **)(longPtr3[1] + 0x40))((long)voidPtr + 8);\n                if (byteFlag == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uintVar = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uintVar < result) {\n                    str1 = (char *)((long)__ptr_00 + uintVar);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar = strlen(str1);\n                      if (((sizeVar == 0) || (pcVar28 = str1 + (sizeVar - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + longVar1) < (long)voidPtr + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      voidPtr = (void *)((long)voidPtr + 0xc);\n                      intVar = (**(code **)(longPtr3[1] + 0x40))(voidPtr);\n                      uVar20 = (ulong)(uint)(intVar + (int)lStack0000000000000088);\n                      if (result <= uVar20) break;\n                      str1 = (char *)concat(str1,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = str1;\n                    }\n                    result = *longPtr3;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,result,ptrVar,((long)voidPtr - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteFlag,uintVar,lVar27,str1);\n                    charFlag = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteFlag);\n                    if (charFlag == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    result = *longPtr3;\n                    str1 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,str1,result,ptrVar,((long)voidPtr - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteFlag,((long)voidPtr - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ptrPtr2 = ptrPtr2 + 2;\n    } while (ptrPtr2 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charFlag = FUN_0010c892(), charFlag == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(longPtr3[1] + 8) == 1) {\n      longVar1 = 0;\n      for (longVar1 = plongVar1; longVar1 < plongVar1 + param2; longVar1 = longVar1 + 1) {\n        (**(code **)(longPtr3[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar1 != 0) || (longVar1 = FUN_00112894(), longVar1 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            str1 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sizeVar = strlen(pcVar28), pcVar28[sizeVar - 1] == '\\')) &&\n                   (longVar1 + 1 < plongVar1 + param2))) {\n              strPtr = (char *)xstrdup(pcVar28);\n              sizeVar = strlen(strPtr);\n              strPtr[sizeVar - 1] = '\\0';\n              pcVar28 = (char *)concat(strPtr,*(undefined8 *)(longVar1[1] + 8),0);\n              free(strPtr);\n              free(str1);\n              longVar1 = longVar1 + 1;\n              str1 = pcVar28;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,str2,\n                         pcVar28);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,longVar1,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((longVar1 != 0) && (charFlag = FUN_0010c892(), charFlag == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(longPtr3[1] + 8) != 2) || (param2 == 0)) {\n        str1 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      str2 = (char *)0x0;\n      in_stack_000000c0 = plongVar1;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = param2;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (longVar1 = 0x22; longVar1 != 0; longVar1 = longVar1 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)byteFlag * -8 + 4);\n      }\n      charFlag = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)param2 <= in_stack_000000d0) break;\n        longVar1 = plongVar1[in_stack_000000d0];\n        charFlag = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charFlag == '\\0') {\n          uintVar = bfd_get_error();\n          bfd_errmsg(uintVar);\n          str1 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          result = dcgettext(0,str1,5);\n          FUN_00119ed0(result);\n          goto LAB_00105981;\n        }\n        str1 = *(char **)(longVar1 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charFlag = bfd_coff_get_auxent(), charFlag == '\\0')) {\n          uintVar = bfd_get_error();\n          bfd_errmsg(uintVar);\n          str1 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charFlag = FUN_0010bbd3(puStack0000000000000020);\n            if (charFlag == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charFlag = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(longPtr3[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(longPtr3[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(longPtr3[1] + 0x238))();\n                pcStack0000000000000038 = str1;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar = strcmp(str1,\".bb\");\n              if (intVar == 0) {\n                charFlag = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar = strcmp(str1,\".eb\");\n              if (intVar == 0) {\n                charFlag = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar = strcmp(str1,\".bf\");\n              if (intVar == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = FUN_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charFlag = FUN_0010bc80(puStack0000000000000020), charFlag == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar = ushortVar - 1;\n                    }\n                    longVar1 = *(long *)(*(long *)(longVar1 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar = _uStack0000000000000048[4];\n                      if (intVar == 0) break;\n                      charFlag = FUN_0010bf86(puStack0000000000000020,intVar + intVar,\n                                           *(long *)(_uStack0000000000000048 + 6) + longVar1);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charFlag == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                str1 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar = strcmp(str1,\".ef\");\n                if (intVar != 0) goto switchD_00106e1a_caseD_68;\n                if (charFlag != '\\0') {\n                  charFlag = FUN_0010be1a(puStack0000000000000020);\n                  if (charFlag == '\\0') goto LAB_00105981;\n                  charFlag = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                str1 = \"%ld: unexpected .ef\\n\";\n              }\n              result = dcgettext(0,str1,5);\n              FUN_00119ed0(result);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar2 = FUN_0010dac0();\n          if (longVar2 == 0) goto LAB_00105981;\n          charFlag = FUN_00112a33(&stack0x00000140,longVar1,lVar27);\n        }\njoined_r0x00107247:\n        if (charFlag == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(param1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(param1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param1 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param2 != 0) {\n        plongVar1 = DAT_001278b0 + param2;\n        longVar1 = DAT_001278b0;\n        do {\n          uintVar = *(uint *)(*longVar1 + 0x18);\n          if ((uintVar & 0x1000000) != 0) {\n            *(uint *)(*longVar1 + 0x18) = uintVar & 0xfeffffff;\n          }\n          longVar1 = longVar1 + 1;\n        } while (plongVar1 != longVar1);\n      }\n    }\n    else {\n      for (longVar1 = *(long *)(param1 + 0x90); longVar1 != 0; longVar1 = *(long *)(longVar1 + 8)\n          ) {\n        if (*(long *)(longVar1 + 0xe8) != 0) {\n          ptr = (uint *)(*(long *)(longVar1 + 0xe8) + 0x18);\n          *ptr = *ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar = bfd_get_error();\n      if (intVar != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    longVar1 = xmalloc();\n    plongVar1 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)longPtr3 + 0x44) & 0x42;\n    DAT_001278a8 = longVar1;\n    if (param2 == 0) {\n      result = 0;\n    }\n    else {\n      result = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar = DAT_001279a0;\n        longVar1 = (long *)plongVar1[_in_stack_00000018];\n        codePtr = (code *)longVar1[4];\n        uintVar = *(uint *)(longVar1 + 3);\n        str1 = (char *)longVar1[1];\n        pcVar28 = str1;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          intVar = 0;\n          puVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar <= intVar) || (strPtr = (char *)puVar29[5], strPtr == (char *)0x0))\n            goto LAB_00105ad5;\n            if (strPtr != \"\") break;\nLAB_0010750b:\n            intVar = intVar + 1;\n          }\n          intVar = strcmp(strPtr,str1);\n          if (intVar != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(strPtr);\n          uVar20 = result + 1;\n          puVar29[5] = \"\";\n          result = FUN_0011a2e0(puVar29);\n          result = DAT_001278d0;\n          *(undefined8 *)(longVar1 + result * 8) = result;\n          lVar27 = htab_elements(result);\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charFlag = *str1;\n          if (charFlag != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          str1 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param1 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = longPtr3[1];\n            charFlag = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278d0);\n        uVar20 = result;\n        if ((lVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (str1 != (char *)0x0) {\nLAB_001064eb:\n          if (((*str1 == '_') && (str1[1] == '_')) &&\n             (intVar = strcmp(str1 + (str1[2] == '_'),\"__gnu_lto_slim\"), intVar == 0)) {\n            result = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(result);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        str2 = str1;\n        lVar27 = htab_find(DAT_001278d0);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), str1 == pcVar28)) &&\n           (pcVar28 = str1, ptrPtr = DAT_001278d8, (uintVar & 0x100) != 0)) {\n          for (; ptrPtr != (char **)0x0; ptrPtr = (char **)ptrPtr[3]) {\n            intVar = strcmp(*ptrPtr,str1);\n            if (intVar == 0) {\n              pcVar28 = ptrPtr[1];\n              break;\n            }\n          }\n        }\n        longVar1[1] = (long)pcVar28;\n        charFlag = *pcVar28;\n        if (charFlag == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        str1 = DAT_00127908;\n        lVar27 = longPtr3[1];\n        if (*(char *)(lVar27 + 0x1c) == charFlag) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintVar & 0x82) == 0 && (codePtr != bfd_map_over_sections)) &&\n                ((*(byte *)(longVar1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            longVar1[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charFlag = *(char *)(*(long *)(param1 + 8) + 0x1c);\n          if (charFlag == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            longVar1[1] = (long)pcVar28;\n            sizeVar = strlen(pcVar28);\n            lVar27 = sizeVar + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charFlag;\n          longVar1[1] = (long)pcVar28;\n          result = uVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param1 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            result = uVar20;\n            if (str1 == (char *)0x0) goto LAB_00105b32;\n            sizeVar = strlen(pcVar28);\n            sVar26 = strlen(str1);\n            str1 = (char *)xmalloc(sVar26 + sizeVar + 1);\n            strPtr = str1;\n          }\n          else {\nLAB_0010668d:\n            str1 = DAT_00127908;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charFlag != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar = strlen(pcVar28);\n            lVar27 = sizeVar + 2;\n            if (str1 == (char *)0x0) {\n              strPtr = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar = strlen(str1);\n              strPtr = (char *)xmalloc(sizeVar + lVar27);\n            }\n            str1 = strPtr + 1;\n            *strPtr = *(char *)(*(long *)(param1 + 8) + 0x1c);\n          }\n          str1 = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(str1,DAT_00127908);\n            sizeVar = strlen(str1);\n            str1 = str1 + sizeVar;\n          }\n          strcpy(str1,pcVar28);\n          longVar1[1] = (long)strPtr;\n          pcVar28 = strPtr;\n          result = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintVar & 0x20) == 0) &&\n           (((uintVar & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(longVar1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar & 0x82) != 0 || ((*(byte *)(longVar1[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar = bfd_decode_symclass(longVar1), intVar == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              str2 = pcVar28;\n              htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar & 0x82) == 0) && (codePtr != bfd_map_over_sections)) &&\n                  ((*(byte *)(longVar1[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar & 4) == 0) {\n              if (((*(int *)(longPtr3[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(longVar1[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charFlag = bfd_is_local_label(longPtr3);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charFlag = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charFlag == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            result = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(result);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          str2 = pcVar28;\n          htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            str2 = pcVar28;\n            htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintVar & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            str2 = pcVar28;\n            htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charFlag = FUN_001159d0(longVar1[4]);\n          if (charFlag == '\\0') {\n            if (((uintVar & 0x800002) == 0) && (codePtr != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar & 0x82) != 0) {\n                charFlag = FUN_00115d70(pcVar28);\n                if ((charFlag == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                    (charFlag = FUN_00115d70(pcVar28), charFlag != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintVar = *(uint *)(longVar1 + 3), (uintVar & 0x200000) != 0)) ||\n                       (lVar27 = *longVar1, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)longVar1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar = *(uint *)(longVar1 + 3);\n                }\n                *(uint *)(longVar1 + 3) = uintVar & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar & 1) != 0) && (charFlag = FUN_00115d70(pcVar28), charFlag != '\\0')) {\n                *(uint *)(longVar1 + 3) = *(uint *)(longVar1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charFlag = FUN_00115d70(pcVar28), charFlag != '\\0')) {\n                *(uint *)(longVar1 + 3) = *(uint *)(longVar1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (codePtr != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar1 + result * 8) = longVar1;\n            result = result + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (param2 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279a8;\n      intVar = DAT_001279a0;\n      for (lVar27 = 0; lVar27 < intVar; lVar27 = lVar27 + 1) {\n        str1 = (char *)puVar29[5];\n        if (str1 == (char *)0x0) {\n          longVar2 = result * 8;\n          result = result + 1;\n          result = FUN_0011a2e0(puVar29,param1);\n          *(undefined8 *)(longVar1 + longVar2) = result;\n          intVar = DAT_001279a0;\n        }\n        else if (str1 != \"\") {\n          result = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(result,str1);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    boolFlag = DAT_00127980 != '\\0';\n    *(undefined8 *)(longVar1 + result * 8) = 0;\n    if ((boolFlag) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar = *(int *)(*(undefined8 **)(param1 + 8) + 1);\n      if ((intVar != 5) && (intVar != 2)) {\n        result = **(undefined8 **)(param1 + 8);\n        result = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param1,0,result,result);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charFlag = FUN_0011378f(param1,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charFlag == '\\0') goto LAB_00105d8c;\n      longVar1 = bfd_make_section_with_flags(param1,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(param1,\".stabstr\",0x2108);\n      if ((((longVar1 == 0) || (lVar27 == 0)) ||\n          (charFlag = bfd_set_section_size(longVar1,in_stack_00000110), charFlag == '\\0')) ||\n         (charFlag = bfd_set_section_size(lVar27,str2), charFlag == '\\0')) {\n        str1 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        result = dcgettext(0,str1,5);\n        FUN_001126c0(0,param1,0,result);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar1 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charFlag = bfd_set_section_contents\n                        (param1,longVar1,in_stack_000000c0,0,in_stack_00000110);\n      if ((charFlag == '\\0') ||\n         (charFlag = bfd_set_section_contents\n                            (param1,lVar27,in_stack_000000e0,0,str2),\n         charFlag == '\\0')) {\n        str1 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    param2 = result & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longVar1 = htab_elements(DAT_001279f8);\n    if (((longVar1 != 0) ||\n        (((((((longVar1 = htab_elements(DAT_00127a08), longVar1 != 0 ||\n              (longVar1 = htab_elements(DAT_001279e8), longVar1 != 0)) ||\n             (longVar1 = htab_elements(DAT_001279e0), longVar1 != 0)) ||\n            ((longVar1 = htab_elements(DAT_001279d8), longVar1 != 0 ||\n             (longVar1 = htab_elements(DAT_001279d0), longVar1 != 0)))) ||\n           (longVar1 = htab_elements(DAT_001278d0), longVar1 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(param1,DAT_001278a8,param2 & 0xffffffff);\n  bfd_map_over_sections(longPtr3,FUN_00115dc0,param1);\n  bfd_map_over_sections(longPtr3,FUN_00116110,param1);\n  for (puVar29 = DAT_001279c0; ptrVar2 = DAT_001279b8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charFlag = bfd_set_section_contents(param1,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charFlag == '\\0') {\n      FUN_001126c0(0,param1,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; ptrVar2 != (undefined8 *)0x0; ptrVar2 = (undefined8 *)*ptrVar2) {\n    result = *(undefined8 *)(ptrVar2[5] + 0x60);\n    charFlag = bfd_set_section_contents(param1,result,ptrVar2[4],0,ptrVar2[3]);\n    if (charFlag == '\\0') {\n      FUN_001126c0(0,param1,result,0);\n      return 0;\n    }\n  }\n  if (longPtr2 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      result = *longPtr3;\n      result = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(result,result);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charFlag = bfd_fill_in_gnu_debuglink_section(param1,lStack0000000000000078),\n       longVar1 = DAT_00127a10, charFlag != '\\0')) {\n      uintVar = (**(code **)(*(long *)(param1 + 8) + 0x140))(longPtr3);\n      result = (ulong)uintVar;\n      if ((char)uintVar != '\\0') {\n        if (DAT_00127910 == 0) {\n          return result;\n        }\n        charFlag = bfd_alt_mach_code(param1,DAT_00127910 & 0xffffffff);\n        uVar20 = DAT_00127910;\n        if (charFlag != '\\0') {\n          return result;\n        }\n        result = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(result,uVar20);\n        if (*(int *)(*(long *)(param1 + 8) + 8) != 5) {\n          result = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(result);\n          return result;\n        }\n        result = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(result);\n        *(short *)(*(long *)(param1 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return result;\n      }\n      result = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param1,0,result);\n    }\n    else {\n      result = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param1,0,result,longVar1);\n    }\n    return 0;\n  }\n  plongVar1 = (long *)0x0;\n  puVar29 = *(undefined8 **)(param1 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plongVar1 = (long *)longPtr2[3];\n        free((void *)longPtr2[1]);\n        free(longPtr2);\n        longPtr2 = plongVar1;\n      } while (plongVar1 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param1 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charFlag = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), charFlag != '\\0')) {\n      if (plongVar1 == (long *)0x0) {\n        plongVar1 = longPtr2;\n      }\n      longVar1 = longPtr2;\n      if (*(undefined8 **)(*plongVar1 + 0x60) == puVar29) {\nLAB_0010625f:\n        str1 = \"error: failed to merge notes\";\n        if (plongVar1[1] != 0) {\n          charFlag = bfd_set_section_contents(param1,puVar29,plongVar1[1],0,plongVar1[2]);\n          if (charFlag == '\\0') {\n            result = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,param1,puVar29,result);\n            return 0;\n          }\n          plongVar1 = (long *)plongVar1[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plongVar1 = longVar1;\n          if (*(undefined8 **)(*longVar1 + 0x60) == puVar29) goto LAB_0010625f;\n          plongVar1 = (long *)longVar1[3];\n          longVar1 = plongVar1;\n        } while (plongVar1 != (long *)0x0);\n        str1 = \"error: failed to locate merged notes\";\n      }\n      result = dcgettext(0,str1,5);\n      FUN_001126c0(0,param1,puVar29,result);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_and_dump_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_linked_list_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextNode",
                "cVar2": "result",
                "__ptr": "currentNode"
            },
            "code": "\nundefined processLinkedList_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextNode;\n  char result;\n  undefined8 *currentNode;\n  \n  currentNode = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentNode == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(param1,currentNode[1],currentNode[2],*(undefined4 *)(currentNode + 3),currentNode[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    nextNode = (undefined8 *)*currentNode;\n    free(currentNode);\n    currentNode = nextNode;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_linked_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "framePointer",
                "puVar4": "resultArray",
                "puVar5": "currentResult",
                "uVar1": "numElements",
                "lVar2": "currentValue",
                "cVar3": "status",
                "uVar6": "currentIndex",
                "unaff_R13": "dataArray"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint numElements;\n  long currentValue;\n  char status;\n  long baseAddress;\n  undefined8 *resultArray;\n  undefined8 *currentResult;\n  long framePointer;\n  ulong currentIndex;\n  undefined8 *dataArray;\n  \n  numElements = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a2c == 7) {\n    resultArray = dataArray;\n    for (currentIndex = 0; currentIndex != numElements; currentIndex = currentIndex + 1) {\n      currentResult = resultArray;\n      if (((*(long **)dataArray[currentIndex] != (long *)0x0) &&\n          (currentValue = **(long **)dataArray[currentIndex], currentValue != 0)) &&\n         (status = FUN_00115d70(*(undefined8 *)(currentValue + 8),DAT_00127a08), status != '\\0')) {\n        currentResult = resultArray + 1;\n        *resultArray = dataArray[currentIndex];\n      }\n      resultArray = currentResult;\n    }\n    *resultArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(framePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_process_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofStatus",
                "piVar2": "errnoLoc",
                "pcVar3": "errorString",
                "__stream": "filePointer",
                "uVar4": "errorFormat",
                "uVar5": "file",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndProcessFile_00114d60(long fileInfo)\n\n{\n  int eofStatus;\n  int *errnoLoc;\n  char *errorString;\n  undefined8 errorFormat;\n  FILE *filePointer;\n  undefined8 file;\n  size_t bytesRead;\n  long totalBytesRead;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errnoLoc = __errno_location();\n    errorString = strerror(*errnoLoc);\n    file = *(undefined8 *)(fileInfo + 0x10);\n    errorFormat = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(errorFormat,file,errorString);\n  }\n  bufferSize = 0x1000;\n  totalBytesRead = 0;\n  file = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = file;\n  while( true ) {\n    eofStatus = feof(filePointer);\n    if (eofStatus != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (totalBytesRead == bufferSize) {\n      bufferSize = totalBytesRead * 2;\n      file = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = file;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,bufferSize - totalBytesRead,filePointer);\n    eofStatus = ferror(filePointer);\n    if (eofStatus != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  file = *(undefined8 *)(fileInfo + 0x10);\n  errorFormat = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(errorFormat,file);\n}\n\n",
            "called": [
                "fopen",
                "FUN_0010543c",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage",
                "unaff_RBP": "basePointer"
            },
            "code": "\nvoid findAndPrintSection_00108808(void)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionPointer = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionPointer);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_and_print_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineCounter",
                "unaff_R13": "errorHandler",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "lineName",
                "in_stack_00000010": "returnAddress",
                "uVar1": "errorMessage",
                "ppbVar2": "hashTableSlot",
                "pbVar3": "tempChar",
                "bVar4": "currentCharValue",
                "pbVar5": "nextLine",
                "pbVar6": "tempCharPtr",
                "pbVar7": "linePtr"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 errorMessage;\n  byte **hashTableSlot;\n  byte *tempChar;\n  byte currentCharValue;\n  byte *nextLine;\n  int lineCounter;\n  byte *tempCharPtr;\n  undefined8 errorHandler;\n  byte *linePtr;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 lineName;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentCharValue = *currentLine;\n    linePtr = currentLine;\n    if (currentCharValue == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        linePtr = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentCharValue < '\\v') {\n      if (currentCharValue != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentCharValue != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        linePtr = currentLine + 1;\n      }\n    }\n    currentCharValue = *currentChar;\n    while ((currentCharValue == 0x20 || (tempCharPtr = currentChar, currentCharValue == 9))) {\n      tempCharPtr = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentCharValue = *tempCharPtr;\n    }\n    do {\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = tempCharPtr[1];\n      tempCharPtr = tempCharPtr + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentCharValue = tempCharPtr[1];\n      if ((((((currentCharValue == 9) || (currentCharValue == 0x20)) &&\n            ((currentCharValue = tempCharPtr[2], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n           ((currentCharValue = tempCharPtr[3], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n          ((currentCharValue = tempCharPtr[4], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n         ((currentCharValue = tempCharPtr[5], currentCharValue == 9 || (currentCharValue == 0x20)))) {\n        currentCharValue = tempCharPtr[6];\n        tempChar = tempCharPtr + 6;\n        if ((currentCharValue == 9) || (currentCharValue == 0x20)) {\n          do {\n            do {\n              currentCharValue = tempChar[1];\n              tempChar = tempChar + 1;\n            } while (currentCharValue == 0x20);\n          } while (currentCharValue == 9);\n        }\n      }\n      if ((0xd < currentCharValue) || ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(errorMessage,lineName,lineCounter);\n      }\n    }\nLAB_00114599:\n    *tempCharPtr = 0;\n    if (currentChar < tempCharPtr) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentChar;\n    }\n    lineCounter = lineCounter + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (linePtr[1] == 0) {\n      *returnAddress = errorHandler;\n      return;\n    }\n  } while( true );\n  if (currentCharValue == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_display_error_message_00119940",
                "param_1": "inputValue",
                "param_2": "errorMessage",
                "uVar1": "translatedMessage",
                "local_20": "scannedValue"
            },
            "code": "\nvoid checkAndDisplayErrorMessage_00119940(undefined8 inputValue,undefined8 errorMessage)\n\n{\n  undefined8 translatedMessage;\n  char *scannedValue [2];\n  \n  bfd_scan_vma(inputValue,scannedValue,0);\n  if (*scannedValue[0] == '\\0') {\n    return;\n  }\n  translatedMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(translatedMessage,errorMessage,inputValue);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_display_error_message_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "traverse_and_process_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "dataStructPtr",
                "param_4": "customParam1",
                "param_5": "customParam2",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptr",
                "auVar4": "tempArray"
            },
            "code": "\nundefined8\ntraverseAndProcess_00113a4d(undefined8 input1,undefined8 input2,long dataStructPtr,undefined8 customParam1,\n            undefined8 customParam2)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  undefined tempArray [16];\n  \n  result = FUN_00112502(input1,input2,*(undefined8 *)(dataStructPtr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(dataStructPtr + 0x28) == 0 && (*(long *)(dataStructPtr + 8) != 0)) ||\n      (result = FUN_0010ec73(input2,*(undefined8 *)(dataStructPtr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(dataStructPtr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(dataStructPtr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(dataStructPtr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = traverseAndProcess_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    tempArray = FUN_00112502(input1,input2,*(undefined8 *)(dataStructPtr + 0x20));\n    if (tempArray[0] != '\\0') {\n      if ((*(long *)(dataStructPtr + 0x28) == 0) && (*(long *)(dataStructPtr + 8) != 0)) {\n        return tempArray._0_8_;\n      }\n      returnValue = FUN_0010ed2c(input2,*(undefined8 *)(dataStructPtr + 0x20),tempArray._8_8_,customParam2);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_001135a5",
                "FUN_0010ed2c",
                "FUN_00113a4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "traverse_and_process_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "retval",
                "unaff_RBX": "memoryPointer",
                "param_7": "retval"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 retval;\n  void *memoryPointer;\n  undefined8 retval;\n  \n  retval = retval;\n  free(memoryPointer);\n  return retval;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010922b",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "allocate_memory_00113b71",
                "param_1": "size",
                "lVar1": "allocated_memory"
            },
            "code": "\nlong allocate_memory_00113b71(long size)\n\n{\n  long allocated_memory;\n  \n  if (size != 0) {\n    allocated_memory = FUN_00112904(0x14,0);\n    if (allocated_memory == 0) {\n      allocated_memory = 0;\n    }\n    else {\n      *(long *)(allocated_memory + 0x10) = size;\n    }\n    return allocated_memory;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_memory_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_param_00109dfe",
                "param_1": "param",
                "lVar1": "counter",
                "local_40": "formatString"
            },
            "code": "\nvoid processParam_00109dfe(long param)\n\n{\n  long counter;\n  char formatString [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    FUN_00109cf4(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  counter = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = counter + 1;\n  *(long *)(param + 0x70) = counter;\n  sprintf(formatString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(param,formatString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_param_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_update_string_00109bbb",
                "param_1": "input",
                "__s": "stringPtr",
                "sVar1": "stringLen"
            },
            "code": "\nbool checkAndUpdateString_00109bbb(long input)\n\n{\n  char *stringPtr;\n  size_t stringLen;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLen = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLen) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_update_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "construct_final_string_0010ae0e",
                "param_1": "ptrParam",
                "lVar1": "ptrData1",
                "lVar2": "ptrData2",
                "__ptr": "ptrVoid",
                "pcVar3": "ptrChar",
                "sVar4": "length1",
                "sVar5": "length2",
                "pcVar6": "ptrResult",
                "uVar7": "returnValue",
                "lVar8": "resultLength",
                "uVar9": "loopCount",
                "uVar10": "additionalCount"
            },
            "code": "\nundefined8 constructFinalString_0010ae0e(long ptrParam)\n\n{\n  long ptrData1;\n  long ptrData2;\n  void *ptrVoid;\n  char *ptrChar;\n  size_t length1;\n  size_t length2;\n  char *ptrResult;\n  undefined8 returnValue;\n  long resultLength;\n  uint loopCount;\n  ulong additionalCount;\n  \n  returnValue = 0;\n  ptrData1 = *(long *)(ptrParam + 0x60);\n  if (((ptrData1 != 0) && (*(char **)(ptrData1 + 8) != (char *)0x0)) &&\n     (ptrResult = *(char **)(ptrData1 + 0x20), ptrResult != (char *)0x0)) {\n    length1 = strlen(*(char **)(ptrData1 + 8));\n    length2 = strlen(ptrResult);\n    ptrData2 = *(long *)(ptrData1 + 0x28);\n    if (ptrData2 == 0) {\n      resultLength = length1 + length2 + 10;\n      additionalCount = 0;\n    }\n    else {\n      resultLength = length1 + length2 + 0x1e;\n      additionalCount = 0;\n      while( true ) {\n        ptrResult = *(char **)(ptrData2 + additionalCount * 8);\n        if (ptrResult == (char *)0x0) break;\n        length1 = strlen(ptrResult);\n        additionalCount = (ulong)((int)additionalCount + 1);\n        resultLength = resultLength + length1;\n      }\n    }\n    if (*(char **)(ptrData1 + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(ptrData1 + 0x30));\n      resultLength = resultLength + length1;\n    }\n    if (*(char **)(ptrData1 + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(ptrData1 + 0x38));\n      resultLength = resultLength + length1;\n    }\n    ptrResult = (char *)xmalloc(resultLength);\n    ptrData1 = *(long *)(ptrParam + 0x60);\n    strcpy(ptrResult,*(char **)(ptrData1 + 8));\n    if (*(long *)(ptrData1 + 0x28) != 0) {\n      loopCount = 0;\n      length1 = strlen(ptrResult);\n      sprintf(ptrResult + length1,\"!%u,\",additionalCount);\n      while( true ) {\n        ptrData1 = *(long *)(ptrParam + 0x60);\n        additionalCount = (ulong)loopCount;\n        ptrVoid = *(void **)(ptrData1 + 0x28);\n        ptrChar = *(char **)((long)ptrVoid + additionalCount * 8);\n        if (ptrChar == (char *)0x0) break;\n        loopCount = loopCount + 1;\n        strcat(ptrResult,ptrChar);\n        free(*(void **)(*(long *)(ptrData1 + 0x28) + additionalCount * 8));\n      }\n      free(ptrVoid);\n      *(undefined8 *)(*(long *)(ptrParam + 0x60) + 0x28) = 0;\n    }\n    ptrData1 = *(long *)(ptrParam + 0x60);\n    strcat(ptrResult,*(char **)(ptrData1 + 0x20));\n    free(*(void **)(ptrData1 + 0x20));\n    ptrData1 = *(long *)(ptrParam + 0x60);\n    *(undefined8 *)(ptrData1 + 0x20) = 0;\n    if (*(char **)(ptrData1 + 0x30) != (char *)0x0) {\n      strcat(ptrResult,*(char **)(ptrData1 + 0x30));\n      free(*(void **)(ptrData1 + 0x30));\n      *(undefined8 *)(*(long *)(ptrParam + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(ptrResult);\n    ptrData1 = *(long *)(ptrParam + 0x60);\n    *(undefined2 *)(ptrResult + length1) = 0x3b;\n    ptrChar = *(char **)(ptrData1 + 0x38);\n    if (ptrChar != (char *)0x0) {\n      strcpy(ptrResult + length1 + 1,ptrChar);\n      free(*(void **)(ptrData1 + 0x38));\n      *(undefined8 *)(*(long *)(ptrParam + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(ptrParam + 0x60) + 8));\n    ptrData1 = *(long *)(ptrParam + 0x60);\n    *(char **)(ptrData1 + 8) = ptrResult;\n    returnValue = CONCAT71((int7)((ulong)ptrData1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_final_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "execute_operation_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operation",
                "iVar1": "index",
                "cVar2": "isSuccessful",
                "uVar3": "result",
                "puVar4": "currentNode",
                "puVar5": "linkedList",
                "abort": "terminateProgram"
            },
            "code": "\nundefined8 executeOperation_001135a5(undefined8 input1,undefined8 input2,long operation)\n\n{\n  int index;\n  char isSuccessful;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *linkedList;\n  \n  if (6 < *(uint *)(operation + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(operation + 0x14)) {\n  case 0:\n    isSuccessful = FUN_00112c1f(input1,input2,*(undefined8 *)(operation + 0x20),operation);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e6a8(input2,*(undefined8 *)(operation + 8));\n      return result;\n    }\n    break;\n  case 1:\n    isSuccessful = FUN_00112c1f(input1,input2,*(undefined8 *)(operation + 0x20),operation);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e7c2(input2,*(undefined8 *)(operation + 8));\n      return result;\n    }\n    break;\n  case 2:\n    isSuccessful = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(operation + 0x20) + 8),0);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e9a0(input2,*(undefined8 *)(operation + 8),**(undefined4 **)(operation + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(operation + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    linkedList = *(undefined8 **)(operation + 0x20);\n    index = *(int *)(operation + 0x18);\n    result = *(undefined8 *)(operation + 8);\n    isSuccessful = FUN_00112502(input1,input2,*(undefined8 *)(linkedList[2] + 0x18));\n    if (((isSuccessful != '\\0') && (isSuccessful = FUN_00112c1f(input1,input2,*linkedList,0), isSuccessful != '\\0')) &&\n       (isSuccessful = FUN_0010eafe(input2,result,index == 2), isSuccessful != '\\0')) {\n      for (currentNode = (undefined8 *)linkedList[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        isSuccessful = FUN_00112c1f(input1,input2,currentNode[2],0);\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n        isSuccessful = FUN_0010ebb0(input2,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n      }\n      linkedList = (undefined8 *)linkedList[2];\n      while( true ) {\n        if (linkedList == (undefined8 *)0x0) {\n          result = FUN_00108f05(input2);\n          return result;\n        }\n        isSuccessful = FUN_00113a4d(input1,input2,linkedList);\n        if (isSuccessful == '\\0') break;\n        linkedList = (undefined8 *)*linkedList;\n      }\n    }\n    break;\n  case 4:\n    result = FUN_0010e842(input2,*(undefined8 *)(operation + 8),*(undefined8 *)(operation + 0x20));\n    return result;\n  case 5:\n    result = FUN_0010e8a9(*(undefined8 *)(operation + 0x20),input2,*(undefined8 *)(operation + 8));\n    return result;\n  case 6:\n    isSuccessful = FUN_00112c1f(input1,input2,**(undefined8 **)(operation + 0x20),0);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e918(input2,*(undefined8 *)(operation + 8),\n                           *(undefined8 *)(*(long *)(operation + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "abort",
                "FUN_0010ebb0",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112c1f",
                "FUN_00113a4d",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "execute_operation_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001152b6",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "FUN_001125fa",
                "printf",
                "bfd_get_arch",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ae0e",
                "FUN_00115530",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "reverse_function_0010b0fa",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "array",
                "param_4": "length",
                "param_5": "result",
                "uVar1": "value",
                "iVar2": "comparison",
                "pcVar3": "output",
                "plVar4": "ptrArray",
                "pcVar5": "message",
                "sVar6": "size",
                "__ptr": "ptr",
                "lVar7": "length2",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * reverseFunction_0010b0fa(undefined8 input1,undefined8 input2,uint *array,long length,\n                   undefined *result)\n\n{\n  uint value;\n  int comparison;\n  char *output;\n  long *ptrArray;\n  char *message;\n  size_t size;\n  void *ptr;\n  long length2;\n  undefined localArray [16];\n  \n  if (result != (undefined *)0x0) {\n    *result = 0;\n  }\n  while( true ) {\n    value = *array;\n    if (0x29 < value) break;\n    if (0x17 < value) {\n      switch(value) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        output = (char *)reverseFunction_0010b0fa(input1,input2,*(undefined8 *)(array + 4),0,0);\n        if (output != (char *)0x0) {\n          switch(*array) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            output = (char *)FUN_00113b4a(output);\n            return output;\n          case 0x1b:\n            output = (char *)FUN_00113b71(output);\n            return output;\n          default:\n                    \n            abort();\n          case 0x22:\n            output = (char *)FUN_00113d3a(output);\n            return output;\n          case 0x23:\n            output = (char *)FUN_00113cb9(output);\n            return output;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        output = (char *)cplus_demangle_print(3,array,0x14,localArray);\n        if (output == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          output = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison = strcmp(output,\"signed char\");\n        if (comparison == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"bool\");\n        if (comparison == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"char\");\n        if (comparison == 0) goto LAB_0010b406;\n        comparison = strcmp(output,\"double\");\n        if ((comparison == 0) || (comparison = strcmp(output,\"long double\"), comparison == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"float\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"__float128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"unsigned char\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"int\");\n        if (comparison == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"unsigned int\");\n        if (comparison == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"long\");\n        if (comparison == 0) goto LAB_0010b504;\n        comparison = strcmp(output,\"unsigned long\");\n        if (comparison == 0) goto LAB_0010b528;\n        comparison = strcmp(output,\"__int128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"unsigned __int128\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"short\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"unsigned short\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"void\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"wchar_t\");\n        if (comparison == 0) goto LAB_0010b528;\n        comparison = strcmp(output,\"long long\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"unsigned long long\");\n        if (comparison == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison = strcmp(output,\"...\");\n        if (comparison == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (result == (undefined *)0x0) goto LAB_0010b6a9;\n          *result = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(output);\n        return message;\n      case 0x29:\n        if (*(long *)(array + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)reverseFunction_0010b0fa(input1,input2,*(long *)(array + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          length2 = FUN_0010b6ea(input1,input2,*(undefined8 *)(array + 6),localArray);\n          if (length2 != 0) {\n            output = (char *)FUN_00113ce0(ptr,length2,localArray[0]);\n            return output;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (value != 1) {\n      if (value == 4) {\n        output = (char *)cplus_demangle_print(3,array,0x14,localArray);\n        message = \"Failed to print demangled template\\n\";\n        if (output != (char *)0x0) {\n          size = strlen(output);\n          message = (char *)FUN_0010afd5(input1,input2,output,size & 0xffffffff,9);\n          free(output);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return output;\n      }\n      if (value == 0) {\n        if ((length == 0) || (ptrArray = (long *)FUN_00113b1e(length), ptrArray == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    length = reverseFunction_0010b0fa(input1,input2,*(undefined8 *)(array + 4),length,0);\n    if (length == 0) goto LAB_0010b38c;\n    array = *(uint **)(array + 6);\n    result = (undefined *)0x0;\n  }\n  output = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,output,(ulong)value);\nLAB_0010b38c:\n  output = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return output;\nLAB_0010b1a5:\n  if (*ptrArray == 0) {\nswitchD_0010b158_caseD_18:\n    output = (char *)FUN_0010afd5(input1,input2,*(undefined8 *)(array + 4),array[6],0);\n    return output;\n  }\n  output = *(char **)(*ptrArray + 8);\n  if (output == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(output);\n  if (message != (char *)0x0) {\n    size = strlen(message);\n    if ((array[6] == (uint)size) &&\n       (comparison = strncmp(message,*(char **)(array + 4),(long)(int)array[6]), comparison == 0)) {\n      return output;\n    }\n  }\n  ptrArray = ptrArray + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "abort",
                "strlen",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "FUN_0010b6ea",
                "free",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "reverse_function_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "lineBuffer",
                "unaff_EBP": "lineNumber",
                "pbVar5": "linePointer",
                "unaff_R13": "dcgettextArg1",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "resultPointer",
                "ppbVar2": "htabSlotPointer",
                "pbVar3": "nextLinePointer",
                "pbVar2": "htabSlot"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 uVar1;\n  byte **htabSlotPointer;\n  byte *nextLinePointer;\n  byte currentChar;\n  byte nextChar;\n  byte *lineBuffer;\n  int lineNumber;\n  byte *linePointer;\n  undefined8 dcgettextArg1;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 formatString;\n  undefined8 *resultPointer;\n  \n  do {\n    linePointer = lineEnd;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = linePointer[1];\n      linePointer = linePointer + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = linePointer[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = linePointer[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = linePointer[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = linePointer[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = linePointer[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = linePointer[6];\n        nextLinePointer = linePointer + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = nextLinePointer[1];\n              nextLinePointer = nextLinePointer + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(uVar1,formatString,lineNumber);\n      }\n    }\nLAB_00114599:\n    *linePointer = 0;\n    if (lineEnd < linePointer) {\n      htabSlotPointer = (byte **)htab_find_slot();\n      *htabSlotPointer = lineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    linePointer = lineBuffer;\n    if (lineStart[1] == 0) {\n      *resultPointer = dcgettextArg1;\n      return;\n    }\n    for (; nextChar = *linePointer, lineStart = linePointer, nextChar != 10; linePointer = linePointer + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          nextLinePointer = linePointer + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *linePointer = 0;\n          nextLinePointer = linePointer + 1;\n          if (linePointer[1] == 10) {\n            nextLinePointer = linePointer + 2;\n            lineStart = linePointer + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *linePointer = 0;\n    if (linePointer[1] == 0xd) {\n      lineStart = linePointer + 1;\n      nextLinePointer = linePointer + 2;\n    }\n    else {\n      nextLinePointer = linePointer + 1;\n    }\nLAB_00114553:\n    currentChar = *lineBuffer;\n    lineEnd = lineBuffer;\n    while (lineBuffer = nextLinePointer, currentChar == 0x20) {\nLAB_00104c3f:\n      linePointer = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      nextLinePointer = lineBuffer;\n      currentChar = *linePointer;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "decompile_function_0010554f",
                "param_8": "section_count",
                "param_14": "section_sizes",
                "param_17": "section_pointers",
                "param_40": "section_sizes_sorted",
                "param_42": "section_names_sorted",
                "param_43": "padding_flag",
                "param_44": "padding_value",
                "lVar14": "section_size",
                "lVar23": "padding_size",
                "lVar37": "section_index",
                "uVar5": "padding_byte",
                "uVar6": "section_flags",
                "puVar1": "section_flags_ptr",
                "ppcVar34": "section_strings",
                "param_15": "alternative_machine_code_count",
                "puVar4": "alternative_machine_code_strings",
                "uVar21": "alternative_machine_code_value",
                "uVar24": "alternative_machine_code_flag",
                "bVar2": "section_type",
                "cVar7": "success_flag",
                "param_9": "debug_link_file_name",
                "uVar9": "success_value"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 decompile_function_0010554f(void)\n\n{\n  uint *section_flags_ptr;\n  byte section_type;\n  code *pcVar3;\n  undefined8 *alternative_machine_code_strings;\n  undefined padding_byte;\n  ushort section_flags;\n  char success_flag;\n  char cVar8;\n  undefined4 success_value;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long section_size;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong alternative_machine_code_value;\n  char *__s;\n  char *pcVar22;\n  long padding_size;\n  ulong alternative_machine_code_flag;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **section_strings;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long section_index;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong section_count;\n  char debug_link_file_name;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *section_sizes;\n  uint alternative_machine_code_count;\n  long *section_pointers;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *section_sizes_sorted;\n  char param_41;\n  char *section_names_sorted;\n  undefined padding_flag;\n  short padding_value;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    param_12 = 0;\n    section_sizes = (undefined *)0x0;\n    section_pointers = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    section_size = (ulong)in_stack_00000068._4_4_ * 8;\n    section_pointers = (long *)xmalloc(section_size);\n    section_sizes_sorted = section_pointers;\n    bfd_map_over_sections(param_7,FUN_0010870e,&stack0x00000140);\n    qsort(section_pointers,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    section_sizes = (undefined *)xmalloc(section_size);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = section_sizes;\n    for (; section_size != 0; section_size = section_size + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(section_sizes + uVar29 * 8);\n        plVar28 = section_pointers + uVar29;\n        alternative_machine_code_value = param_12;\n        do {\n          param_12 = alternative_machine_code_value;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          section_size = *plVar28;\n          if ((*(uint *)(section_size + 0x24) & 0x102) != 0x102) break;\n          alternative_machine_code_value = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          alternative_machine_code_flag = (ulong)uVar12 * *(long *)(section_size + 0x38) + *(long *)(section_size + 0x40);\n          if (alternative_machine_code_value <= alternative_machine_code_flag) break;\n          alternative_machine_code_value = alternative_machine_code_value - alternative_machine_code_flag;\n          success_flag = bfd_set_section_size();\n          if (success_flag == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,param_7,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = alternative_machine_code_value;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < alternative_machine_code_value);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      section_size = section_pointers[in_stack_00000068._4_4_ - 1];\n      alternative_machine_code_value = DAT_00127970 * (ulong)uVar12;\n      alternative_machine_code_flag = *(long *)(section_size + 0x40) + (ulong)uVar12 * *(long *)(section_size + 0x38);\n      if (alternative_machine_code_flag < alternative_machine_code_value) {\n        success_flag = bfd_set_section_size();\n        if (success_flag == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,param_7,section_pointers[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = alternative_machine_code_value - alternative_machine_code_flag;\n          *(ulong *)(section_sizes + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (section_size = 0x18; section_size != 0; section_size = section_size + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      section_size = bfd_get_section_by_name(unaff_R14,puVar33);\n      section_index = bfd_get_section_by_name();\n      if ((section_size != 0) && (section_index != 0)) {\n        padding_size = *(long *)(section_size + 0x40);\n        __ptr_00 = (void *)xmalloc(padding_size);\n        success_flag = bfd_get_section_contents(unaff_R14,section_size,__ptr_00,0,padding_size);\n        if (success_flag == '\\0') {\n          success_value = bfd_get_error();\n          bfd_errmsg(success_value);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(section_index + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          debug_link_file_name = bfd_get_section_contents(unaff_R14,section_index,__ptr_01,0);\n          if (debug_link_file_name == '\\0') {\n            success_value = bfd_get_error();\n            bfd_errmsg(success_value);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + padding_size + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                alternative_machine_code_value = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                section_type = *(byte *)((long)pvVar35 + 4);\n                success_value = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                section_size = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (section_type == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + section_size;\n                }\n                else {\n                  alternative_machine_code_flag = (alternative_machine_code_value & 0xffffffff) + param_23;\n                  if (alternative_machine_code_flag < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + alternative_machine_code_flag);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + padding_size) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      alternative_machine_code_value = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= alternative_machine_code_value) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + alternative_machine_code_value,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)section_type,success_value,section_size,pcVar31);\n                    success_flag = FUN_0011173a(__ptr_02,param_13,section_type);\n                    if (success_flag == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            alternative_machine_code_value & 0xffffffff,(ulong)section_type,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (success_flag = FUN_0010c892(), success_flag == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      section_size = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + section_count; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((section_size == 0) && (section_size = FUN_00112894(unaff_R14,0,plVar28), section_size == 0)) ||\n             ((section_names_sorted == (char *)0x0 || (*section_names_sorted == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = section_names_sorted;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + section_count))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(padding_flag,(int)padding_value,section_sizes_sorted,pcVar22);\n          debug_link_file_name = FUN_0011173a(__ptr_02,section_size,padding_flag);\n          if (debug_link_file_name == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((section_size != 0) && (success_flag = FUN_0010c892(), success_flag == '\\0')) goto LAB_00105981;\n    }\n    if (debug_link_file_name == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (section_count != 0)) {\n        section_sizes_sorted = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = section_count;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (section_size = 0x22; section_size != 0; section_size = section_size + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        success_flag = '\\0';\n        _alternative_machine_code_count = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)section_count <= param_32) goto LAB_00105590;\n            section_size = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,section_size,&stack0x000000e0);\n            section_index = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              success_value = bfd_get_error();\n              bfd_errmsg(success_value);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(section_size + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,section_size,0);\n              if (cVar8 == '\\0') {\n                success_value = bfd_get_error();\n                bfd_errmsg(success_value);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)section_index) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          section_flags = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            padding_size = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (padding_size == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,section_size,section_index);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _alternative_machine_code_count = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)section_flags;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  section_index = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,section_index,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((section_index == 0) || (success_flag = FUN_0010bc80(__ptr_02), success_flag == '\\0'))\n                  goto LAB_00105981;\n                  if (_alternative_machine_code_count != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    section_size = *(long *)(*(long *)(section_size + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _alternative_machine_code_count[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_alternative_machine_code_count + 6) + section_size);\n                      _alternative_machine_code_count = _alternative_machine_code_count + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _alternative_machine_code_count = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (success_flag != '\\0') {\n                  success_flag = FUN_0010be1a(__ptr_02);\n                  if (success_flag == '\\0') goto LAB_00105981;\n                  success_flag = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (section_count != 0) {\n        plVar28 = DAT_001278b0 + section_count;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (section_size = *(long *)(param_7 + 0x90); section_size != 0; section_size = *(long *)(section_size + 8)) {\n        if (*(long *)(section_size + 0xe8) != 0) {\n          section_flags_ptr = (uint *)(*(long *)(section_size + 0xe8) + 0x18);\n          *section_flags_ptr = *section_flags_ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      section_size = xmalloc();\n      plVar28 = DAT_001278b0;\n      alternative_machine_code_count = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = section_size;\n      if (section_count == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _debug_link_file_name = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_debug_link_file_name];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  alternative_machine_code_value = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(section_size + uVar29 * 8) = uVar16;\n                  section_index = htab_elements(uVar17);\n                  if ((section_index != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          section_index = htab_elements(DAT_001278d0);\n          alternative_machine_code_value = uVar29;\n          if ((section_index != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            section_sizes_sorted = plVar20;\n            section_index = htab_find(DAT_001278d0);\n            if (((section_index == 0) || (plVar25 = *(long **)(section_index + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, section_strings = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; section_strings != (char **)0x0; section_strings = (char **)section_strings[3]) {\n                iVar10 = strcmp(*section_strings,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)section_strings[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            success_flag = *(char *)plVar25;\n            if (success_flag != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              section_index = unaff_R14[1];\n              success_flag = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          success_flag = *(char *)plVar20;\n          if (success_flag == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          section_index = unaff_R14[1];\n          if (*(char *)(section_index + 0x1c) == success_flag) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            success_flag = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (success_flag == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              section_index = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + section_index);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = success_flag;\n            plVar15[1] = (long)plVar25;\n            uVar29 = alternative_machine_code_value;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = alternative_machine_code_value;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(section_index + 0x1c) != '\\0') && (success_flag != *(char *)(section_index + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              section_index = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(section_index);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = alternative_machine_code_value;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((alternative_machine_code_count == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                section_index = htab_find();\n                if (section_index == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                section_sizes_sorted = plVar25;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (section_index = *(long *)(plVar15[4] + 0xd0), section_index == 0)) ||\n                   (*(long *)(section_index + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    success_flag = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              success_flag = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (success_flag == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            section_index = htab_find();\n            if (section_index != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            section_sizes_sorted = plVar25;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              section_sizes_sorted = plVar25;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            section_index = htab_find();\n            if (section_index == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              section_index = htab_find();\n              if (section_index != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              section_sizes_sorted = plVar25;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            success_flag = FUN_001159d0(plVar15[4]);\n            if (success_flag == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  success_flag = FUN_00115d70(plVar25);\n                  if ((success_flag == '\\0') &&\n                     ((section_index = htab_elements(DAT_001279d8), section_index == 0 ||\n                      (success_flag = FUN_00115d70(plVar25), success_flag != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (section_index = *plVar15, section_index == 0)) ||\n                        ((*(int *)(*(long *)(section_index + 8) + 8) != 5 ||\n                         (*(long *)(section_index + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (success_flag = FUN_00115d70(plVar25), success_flag != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (success_flag = FUN_00115d70(plVar25), success_flag != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_size + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _debug_link_file_name = _debug_link_file_name + 1;\n        } while (section_count != _debug_link_file_name);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (section_index = 0; section_index < iVar10; section_index = section_index + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            padding_size = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,param_7);\n            *(undefined8 *)(section_size + padding_size) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(section_size + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        section_count = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        success_flag = FUN_0011378f(param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (success_flag != '\\0') {\n          section_size = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          section_index = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((section_size == 0) || (section_index == 0)) ||\n              (success_flag = bfd_set_section_size(section_size,param_38), success_flag == '\\0')) ||\n             (success_flag = bfd_set_section_size(section_index,section_sizes_sorted), success_flag == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_size + 0x7c) = 2;\n            *(undefined4 *)(section_index + 0x7c) = 0;\n            success_flag = bfd_set_section_contents(param_7,section_size,param_30,0,param_38);\n            if ((success_flag != '\\0') &&\n               (success_flag = bfd_set_section_contents(param_7,section_index,param_33,0,section_sizes_sorted), success_flag != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    section_size = htab_elements(DAT_001279f8);\n    if (((section_size != 0) ||\n        ((((section_size = htab_elements(DAT_00127a08), section_size != 0 ||\n           (section_size = htab_elements(DAT_001279e8), section_size != 0)) ||\n          (section_size = htab_elements(DAT_001279e0), section_size != 0)) ||\n         ((section_size = htab_elements(DAT_001279d8), section_size != 0 ||\n          (section_size = htab_elements(DAT_001279d0), section_size != 0)))))) ||\n       ((((section_size = htab_elements(DAT_001278d0), section_size != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,section_count & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar26 = DAT_001279c0; alternative_machine_code_strings = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      success_flag = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (success_flag == '\\0') {\n        FUN_001126c0(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; alternative_machine_code_strings != (undefined8 *)0x0; alternative_machine_code_strings = (undefined8 *)*alternative_machine_code_strings) {\n      uVar17 = *(undefined8 *)(alternative_machine_code_strings[5] + 0x60);\n      success_flag = bfd_set_section_contents(param_7,uVar17,alternative_machine_code_strings[4],0,alternative_machine_code_strings[3]);\n      if (success_flag == '\\0') {\n        FUN_001126c0(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (success_flag = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), success_flag != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              success_flag = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (success_flag == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (success_flag = bfd_fill_in_gnu_debuglink_section(param_7,param_21), section_size = DAT_00127a10,\n       success_flag != '\\0')) {\n      if (section_sizes != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        section_size = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        padding_byte = DAT_00127979;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = padding_byte;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)section_size < in_stack_00000068._4_4_; section_size = section_size + 1) {\n          uVar29 = *(ulong *)(section_sizes + section_size * 8);\n          if (uVar29 != 0) {\n            section_index = *(long *)(*section_pointers + 0x40) - uVar29;\n            do {\n              alternative_machine_code_value = 0x2000;\n              if (uVar29 < 0x2001) {\n                alternative_machine_code_value = uVar29;\n              }\n              success_flag = bfd_set_section_contents(param_7,*section_pointers,__ptr,section_index,alternative_machine_code_value);\n              if (success_flag == '\\0') {\n                FUN_001126c0(0,param_7,*section_pointers,0);\n                free(__ptr);\n                return 0;\n              }\n              section_index = section_index + alternative_machine_code_value;\n              uVar29 = uVar29 - alternative_machine_code_value;\n            } while (uVar29 != 0);\n          }\n          section_pointers = section_pointers + 1;\n        }\n        free(__ptr);\n        free(section_sizes);\n      }\n      success_value = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)success_value != '\\0') {\n        if (DAT_00127910 == 0) {\n          return success_value;\n        }\n        success_flag = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (success_flag == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return success_value;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return success_value;\n        }\n        return success_value;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,section_size);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "bfd_is_local_label",
                "bfd_errmsg",
                "free",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010875d",
                "FUN_00108863",
                "bfd_get_error",
                "FUN_00112a33",
                "FUN_0010bbd3",
                "FUN_00119dd0",
                "bfd_set_section_size",
                "concat",
                "bfd_set_error",
                "bfd_make_section_with_flags",
                "FUN_001159d0",
                "xstrdup",
                "bfd_decode_symclass",
                "bfd_octets_per_byte",
                "FUN_00112894",
                "FUN_00113fb0",
                "strcpy",
                "bfd_set_section_contents",
                "FUN_0011173a",
                "htab_traverse",
                "FUN_00115d70",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_001126c0",
                "xmalloc",
                "qsort",
                "fprintf",
                "FUN_00119ed0",
                "FUN_001088ae",
                "bfd_coff_get_auxent",
                "FUN_0011378f",
                "FUN_0011a2e0",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00116030",
                "strcmp",
                "FUN_0010c892",
                "bfd_map_over_sections",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116110",
                "htab_find",
                "bfd_fill_in_gnu_debuglink_section",
                "bfd_alt_mach_code",
                "htab_elements",
                "strlen",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_0010870e",
                "FUN_0010bf20",
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decompile_function_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_print_number_00109cf4",
                "param_1": "outputStream",
                "param_2": "inputNumber",
                "param_3": "formatSpecifier",
                "local_3c": "convertedNumber"
            },
            "code": "\nvoid convertAndPrintNumber_00109cf4(undefined8 outputStream,undefined8 inputNumber,undefined4 formatSpecifier)\n\n{\n  char convertedNumber [28];\n  \n  sprintf(convertedNumber,\"%ld\",inputNumber);\n  FUN_00109b52(outputStream,convertedNumber,inputNumber,0,formatSpecifier);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010b800",
                "FUN_0010bba1",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "convert_and_print_number_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_param_1",
                "param_3": "output_param_2",
                "uVar1": "result_1",
                "pcVar2": "current_char",
                "uVar3": "result_2",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_arguments_00109ab1(char **input_string,undefined4 *output_param_1,undefined8 output_param_2,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 result_1;\n  char *current_char;\n  undefined8 result_2;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    result_1 = FUN_00109a32(input_string,0);\n    *output_param_1 = result_1;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      result_1 = FUN_00109a32(input_string,0,output_param_2);\n      output_param_1[1] = result_1;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    result_2 = 0;\n  }\n  else {\n    *output_param_1 = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    output_param_1[1] = (int)current_char;\nLAB_00109b25:\n    result_2 = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result_2;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_condition_and_proceed_001159d0",
                "param_1": "address",
                "uVar1": "result",
                "cVar2": "flag",
                "uVar3": "returnValue",
                "lVar4": "tempValue1",
                "lVar5": "tempValue2"
            },
            "code": "\nundefined4 checkConditionAndProceed_001159d0(long address)\n\n{\n  undefined8 result;\n  char flag;\n  undefined4 returnValue;\n  long tempValue1;\n  long tempValue2;\n  \n  returnValue = FUN_00115b70();\n  if ((char)returnValue == '\\0') {\n    if ((*(byte *)(address + 0x27) & 2) == 0) {\n      return returnValue;\n    }\n    tempValue1 = FUN_00115d00(*(undefined8 *)(address + 0xd0),*(undefined8 *)(address + 0xe0));\n    if ((tempValue1 != 0) &&\n       (((result = *(undefined8 *)(tempValue1 + 8), DAT_00127a2c != 7 ||\n         (flag = FUN_00115d70(result,DAT_00127a08), flag != '\\0')) &&\n        (flag = FUN_00115d70(result,DAT_001279f8), flag == '\\0')))) {\n      tempValue1 = *(long *)(*(long *)(address + 0xd0) + 0xc0);\n      tempValue2 = tempValue1;\n      do {\n        if (tempValue2 == 0) {\n          return 1;\n        }\n        flag = FUN_00115b70(tempValue2);\n        if (flag == '\\0') {\n          return returnValue;\n        }\n        tempValue2 = *(long *)(*(long *)(tempValue2 + 0xd0) + 0xc0);\n      } while (tempValue1 != tempValue2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d70",
                "FUN_00115d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_condition_and_proceed_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "data",
                "uVar1": "flag",
                "lVar2": "dataPtr",
                "__s": "string1",
                "uVar3": "value",
                "uVar4": "result",
                "__s_00": "string2",
                "sVar5": "string2Length",
                "sVar6": "string1Length",
                "__s_01": "combinedString"
            },
            "code": "\nundefined4 processData_0010a77a(long data)\n\n{\n  undefined flag;\n  long dataPtr;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t string2Length;\n  size_t string1Length;\n  char *combinedString;\n  \n  dataPtr = *(long *)(data + 0x60);\n  if ((dataPtr != 0) && (string1 = *(char **)(dataPtr + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(dataPtr + 0x18);\n    flag = *(undefined *)(dataPtr + 0x1c);\n    value = *(undefined8 *)(dataPtr + 0x10);\n    string2 = (char *)FUN_00109b2f();\n    string2Length = strlen(string2);\n    string1Length = strlen(string1);\n    combinedString = (char *)xmalloc(string2Length + 2 + string1Length);\n    sprintf(combinedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = FUN_00109b52(data,combinedString,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_error_0010543c",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar1": "fileHandle",
                "uVar4": "localizedErrorMessage",
                "unaff_RBP": "stackPointer"
            },
            "code": "\nvoid openError_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  long stackPointer;\n  \n  errnoLocation = __errno_location();\n  errorMessage = strerror(*errnoLocation);\n  fileHandle = *(undefined8 *)(stackPointer + 0x10);\n  localizedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(localizedErrorMessage,fileHandle,errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "perform_action_0010a424",
                "param_1": "input_param",
                "param_2": "flag_param",
                "param_3": "length_param",
                "param_4": "char_param",
                "cVar1": "result",
                "bVar2": "condition",
                "iVar3": "temp_var",
                "uVar4": "return_value",
                "pcVar5": "string1",
                "__ptr": "dynamic_array",
                "uVar6": "temp_value",
                "__s": "string2",
                "sVar7": "size1",
                "sVar8": "size2",
                "__s_00": "result_string",
                "lVar9": "loop_var",
                "bVar10": "flag",
                "lVar11": "loop_var2",
                "uVar12": "temp_flag"
            },
            "code": "\nundefined4 performAction_0010a424(long input_param,char flag_param,int length_param,char char_param)\n\n{\n  char result;\n  byte condition;\n  int temp_var;\n  undefined4 return_value;\n  char *string1;\n  undefined8 *dynamic_array;\n  undefined8 temp_value;\n  char *string2;\n  size_t size1;\n  size_t size2;\n  char *result_string;\n  long loop_var;\n  byte flag;\n  long loop_var2;\n  undefined temp_flag;\n  \n  if ((flag_param == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  flag = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f(input_param);\n  if (length_param < 0) {\n    dynamic_array = (undefined8 *)0x0;\n    length_param = 0;\nLAB_0010a582:\n    temp_flag = 1;\n    if (flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (length_param != 0) {\n      temp_var = length_param + 1;\n      dynamic_array = (undefined8 *)xmalloc((long)temp_var * 8);\n      loop_var = (long)(length_param + -1);\n      do {\n        condition = 1;\n        if (flag == 0) {\n          condition = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n        }\n        temp_value = FUN_00109b2f(input_param);\n        flag = condition & 1;\n        dynamic_array[loop_var] = temp_value;\n        loop_var = loop_var + -1;\n      } while ((int)loop_var != -1);\n      if (char_param == '\\0') {\n        result = FUN_00109d97(input_param);\n        if (result == '\\0') {\n          return 0;\n        }\n        condition = 1;\n        if (flag == 0) {\n          condition = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n        }\n        flag = condition & 1;\n        temp_value = FUN_00109b2f(input_param);\n        dynamic_array[(long)temp_var + -1] = temp_value;\n        length_param = temp_var;\n      }\n      goto LAB_0010a582;\n    }\n    dynamic_array = (undefined8 *)0x0;\n    if (char_param != '\\0') goto LAB_0010a582;\n    dynamic_array = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(input_param);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag != 0) || (*(char *)(*(long *)(input_param + 0x60) + 0x1c) != '\\0')) {\n      temp_value = FUN_00109b2f(input_param);\n      length_param = 1;\n      temp_flag = 1;\n      *dynamic_array = temp_value;\n      goto LAB_0010a596;\n    }\n    temp_value = FUN_00109b2f(input_param);\n    length_param = 1;\n    *dynamic_array = temp_value;\n  }\n  temp_flag = *(undefined *)(*(long *)(input_param + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)FUN_00109b2f(input_param);\n  size1 = strlen(string1);\n  size2 = strlen(string2);\n  loop_var = size1 + 10 + size2;\n  for (loop_var2 = 0; (int)loop_var2 < length_param; loop_var2 = loop_var2 + 1) {\n    size1 = strlen((char *)dynamic_array[loop_var2]);\n    loop_var = loop_var + size1;\n  }\n  result_string = (char *)xmalloc(loop_var);\n  sprintf(result_string,\"#%s,%s\",string1,string2);\n  loop_var = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    size1 = strlen(result_string);\n    if (length_param <= (int)loop_var) break;\n    *(undefined2 *)(result_string + size1) = 0x2c;\n    string1 = (char *)dynamic_array[loop_var];\n    loop_var = loop_var + 1;\n    strcpy(result_string + size1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(result_string + size1) = 0x3b;\n  free(dynamic_array);\n  return_value = FUN_00109b52(input_param,result_string,0,temp_flag,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  free(result_string);\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109d97",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "perform_action_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_binutils_version_00119970",
                "param_1": "name",
                "pcVar1": "copyRightString"
            },
            "code": "\nvoid printBinutilsVersion_00119970(undefined8 name)\n\n{\n  char *copyRightString;\n  \n  printf(\"GNU %s %s\\n\",name,\"(GNU Binutils for Debian) 2.40\");\n  copyRightString = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightString);\n  copyRightString = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightString);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binutils_version_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_param_00114c80",
                "param_1": "input_string",
                "param_2": "param_two",
                "param_3": "param_three",
                "param_4": "param_four",
                "pcVar1": "delimiter_ptr",
                "uVar2": "result",
                "auVar3": "parsed_data"
            },
            "code": "\nundefined  [16] parse_param_00114c80(char *input_string,undefined8 param_two,undefined8 param_three,undefined8 param_four)\n\n{\n  char *delimiter_ptr;\n  undefined8 result;\n  undefined parsed_data [16];\n  \n  delimiter_ptr = strchr(input_string,0x3d);\n  if (delimiter_ptr != (char *)0x0) {\n    parsed_data._0_8_ = (undefined8 *)xmalloc(0x30);\n    result = FUN_0011a480(input_string,(long)delimiter_ptr - (long)input_string);\n    parsed_data._0_8_[2] = delimiter_ptr + 1;\n    parsed_data._0_8_[1] = result;\n    parsed_data._0_8_[4] = 0;\n    parsed_data._0_8_[3] = 0;\n    *parsed_data._0_8_ = param_two;\n    parsed_data._8_8_ = param_four;\n    return parsed_data;\n  }\n  result = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(result,param_three);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_0011a480",
                "FUN_001053b5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_param_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "write_to_pointer_0010870e",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "pointer",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid writeToPointer_0010870e(undefined8 destination,undefined8 value,long *pointer)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointer;\n  *currentPointer = value;\n  *pointer = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "write_to_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_header",
                "param_2": "symbol_table",
                "param_3": "type_section",
                "param_4": "ctx",
                "param_5": "type_code",
                "param_6": "type_name",
                "param_7": "is_pointer",
                "param_8": "translation_domain",
                "lVar1": "curr_symbol",
                "cVar2": "success",
                "uVar3": "bfd_error",
                "uVar4": "result",
                "lVar5": "return_value",
                "uVar6": "error_message",
                "plVar7": "ptr",
                "__ptr": "alloc_1",
                "__ptr_00": "alloc_2",
                "bVar8": "bit_offset",
                "iVar9": "iteration_count",
                "pcVar10": "type_name",
                "uVar11": "type_mask",
                "lVar12": "idx",
                "uVar13": "tmp_var_1",
                "uVar14": "tmp_var_2",
                "uVar15": "tmp_var_3",
                "local_68": "local_buffer",
                "local_48": "local_flag",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_header,long *symbol_table,long type_section,undefined8 ctx,uint type_code,\n                 long *type_name,char is_pointer,undefined8 translation_domain)\n\n{\n  long curr_symbol;\n  char success;\n  undefined4 bfd_error;\n  undefined8 result;\n  long return_value;\n  undefined8 error_message;\n  long *ptr;\n  void *alloc_1;\n  void *alloc_2;\n  byte bit_offset;\n  int iteration_count;\n  char *type_name;\n  ulong type_mask;\n  long idx;\n  uint tmp_var_1;\n  uint tmp_var_2;\n  undefined8 tmp_var_3;\n  undefined local_buffer [32];\n  char local_flag;\n  byte local_byte;\n  \n  return_value = *(long *)(coff_header + 0x110);\n  if ((~*(uint *)(return_value + 0x38) & type_code) != 0) {\n    tmp_var_1 = (int)type_code >> ((byte)*(undefined4 *)(return_value + 0x44) & 0x1f);\n    type_mask = (ulong)(type_code & *(uint *)(return_value + 0x40));\n    bit_offset = (byte)*(undefined4 *)(return_value + 0x3c);\n    tmp_var_1 = (tmp_var_1 ^ type_code) & *(uint *)(return_value + 0x38) ^ tmp_var_1;\n    if (type_mask == 1L << (bit_offset & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_header,symbol_table,type_section,ctx,tmp_var_1,type_name,is_pointer,translation_domain);\n      return_value = FUN_00113d3a(result);\n      return return_value;\n    }\n    if (type_mask != 2L << (bit_offset & 0x3f)) {\n      if (type_mask != 3L << (bit_offset & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(return_value + 0x3c),\n                          tmp_var_1);\n        FUN_00119ed0(result,type_code);\n        return 0;\n      }\n      tmp_var_2 = 0;\n      if (type_name != (long *)0x0) {\n        tmp_var_2 = (uint)*(ushort *)(type_name + 2);\n        ptr = type_name + 2;\n        for (iteration_count = 0; (*(short *)ptr != 0 && (iteration_count != 3)); iteration_count = iteration_count + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      tmp_var_3 = 0;\n      result = translation_domain;\n      error_message = parse_coff_type_0010dac0(coff_header,symbol_table,type_section,ctx,tmp_var_1,type_name,0);\n      return_value = *(long *)(type_section + 0x28);\n      if (return_value == 0) {\n        result = FUN_00113dfe(4,0,tmp_var_3,result);\n        return_value = FUN_0010c218(translation_domain,\"int\",result);\n        *(long *)(type_section + 0x28) = return_value;\n      }\n      return_value = FUN_00113c43(error_message,return_value,0,(long)(int)(tmp_var_2 - 1),0);\n      return return_value;\n    }\n    result = parse_coff_type_0010dac0(coff_header,symbol_table,type_section,ctx,tmp_var_1,type_name,is_pointer,translation_domain);\n    return_value = FUN_00113ce0(result,0,0);\n    return return_value;\n  }\n  if ((type_name != (long *)0x0) && (0 < *type_name)) {\n    ptr = (long *)FUN_0010da0b(type_section);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    return_value = FUN_00113e23(ptr,0);\n    return return_value;\n  }\n  if (is_pointer == '\\0') {\n    type_name = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    return_value = FUN_00113e17();\n    return return_value;\n  }\n  return_value = *(long *)(type_section + 8 + (long)(int)type_code * 8);\n  if (return_value != 0) {\n    return return_value;\n  }\n  switch(type_code) {\n  default:\n    result = FUN_00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    result = FUN_00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result = FUN_00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result = FUN_00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result = FUN_00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result = FUN_00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result = FUN_00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (type_name == (long *)0x0) {\n      return_value = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_name == (long *)0x0) {\n      return_value = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    return_value = FUN_0010e07c(coff_header,symbol_table,type_section,result,type_name,translation_domain);\nLAB_0010e046:\n    ptr = (long *)FUN_0010da0b(type_section,ctx);\n    *ptr = return_value;\n    return return_value;\n  case 10:\n    if (type_name == (long *)0x0) {\n      return_value = FUN_00113d6e(0,0);\n    }\n    else {\n      return_value = type_name[3];\n      alloc_1 = (void *)xmalloc(0x50);\n      alloc_2 = (void *)xmalloc(0x50);\n      idx = 0;\n      do {\n        while( true ) {\n          if ((return_value <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          iteration_count = (int)idx;\n          curr_symbol = *(long *)(*symbol_table + symbol_table[2] * 8);\n          success = bfd_coff_get_syment(coff_header,curr_symbol,local_buffer);\n          idx = (long)iteration_count;\n          if (success == '\\0') {\n            bfd_error = bfd_get_error();\n            result = bfd_errmsg(bfd_error);\n            error_message = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(error_message,result);\n            free(alloc_1);\n            free(alloc_2);\n            return_value = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_flag != '\\x10') break;\n          if ((int)type_code <= iteration_count + 1) {\n            type_code = type_code + 10;\n            alloc_1 = (void *)xrealloc(alloc_1);\n            alloc_2 = (void *)xrealloc(alloc_2,(long)(int)type_code << 3);\n          }\n          idx = *(long *)(curr_symbol + 0x20);\n          *(undefined8 *)((long)alloc_1 + (long)iteration_count * 8) = *(undefined8 *)(curr_symbol + 8);\n          *(long *)((long)alloc_2 + (long)iteration_count * 8) =\n               *(long *)(curr_symbol + 0x10) + *(long *)(idx + 0x30);\n          idx = (long)(iteration_count + 1);\n        }\n      } while (local_flag != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)alloc_1 + idx * 8) = 0;\n      return_value = FUN_00113d6e(alloc_1,alloc_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    return_value = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = FUN_00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result = FUN_00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result = FUN_00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result = FUN_00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result = FUN_00113df2(0xc);\n    type_name = \"long double\";\n  }\n  return_value = FUN_0010c218(translation_domain,type_name,result);\nLAB_0010e065:\n  *(long *)(type_section + 8 + (long)(int)type_code * 8) = return_value;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010da0b",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_0010dac0",
                "bfd_errmsg",
                "FUN_0010e07c",
                "bfd_coff_get_syment",
                "free",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00113df2",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "string2Length",
                "extraout_var": "extraOutput",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t string2Length;\n  undefined4 extraOutput;\n  undefined result [16];\n  \n  string2Length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,string2Length);\n  result._1_7_ = (undefined7)(CONCAT44(extraOutput,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_error_message_0010882c",
                "piVar1": "ptrErrno",
                "uVar2": "translatedMessage"
            },
            "code": "\nvoid printTimeErrorMessage_0010882c(void)\n\n{\n  int *ptrErrno;\n  undefined8 translatedMessage;\n  \n  ptrErrno = __errno_location();\n  strerror(*ptrErrno);\n  translatedMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(translatedMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "param_1": "param1",
                "param_2": "message",
                "param_3": "length",
                "param_4": "param4",
                "__s": "result",
                "uVar2": "lengthMinusOne",
                "uVar3": "returnValue",
                "__s_00": "formattedData",
                "cVar1": "character",
                "sVar4": "messageLength",
                "sVar5": "resultLength"
            },
            "code": "\nundefined4 formatAndSendData_0010ebb0(undefined8 param1,char *message,int length,undefined8 param4)\n\n{\n  char character;\n  uint lengthMinusOne;\n  undefined4 returnValue;\n  char *result;\n  size_t messageLength;\n  size_t resultLength;\n  char *formattedData;\n  \n  result = (char *)FUN_00109b2f();\n  lengthMinusOne = length - 1;\n  if (lengthMinusOne < 4) {\n    returnValue = *(undefined4 *)(&DAT_00121340 + (ulong)lengthMinusOne * 4);\n    character = (&DAT_00121334)[lengthMinusOne];\n    messageLength = strlen(message);\n    resultLength = strlen(result);\n    formattedData = (char *)xmalloc(messageLength + 3 + resultLength);\n    sprintf(formattedData,\"%s:%c%s\",message,(ulong)(uint)(int)character,result);\n    free(result);\n    returnValue = FUN_0010e2f0(param1,returnValue,0,param4,formattedData);\n    if ((char)returnValue != '\\0') {\n      free(formattedData);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_data_structure_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "result",
                "plVar2": "dataStructure"
            },
            "code": "\nlong createDataStructure_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long result;\n  long *dataStructure;\n  \n  if ((input1 != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    dataStructure = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)dataStructure + 0x19) = 0;\n    *dataStructure = input1;\n    *(undefined4 *)((long)dataStructure + 0x1c) = 0;\n    dataStructure[1] = input2;\n    dataStructure[2] = input3;\n    *(undefined *)(dataStructure + 3) = input4;\n    *(long **)(result + 0x10) = dataStructure;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "find_or_traverse_00115d70",
                "param_1": "key",
                "param_2": "table",
                "lVar1": "result",
                "local_18": "found_key",
                "local_10": "is_found"
            },
            "code": "\nundefined find_or_traverse_00115d70(undefined8 key,undefined8 table)\n\n{\n  long result;\n  undefined8 found_key;\n  undefined is_found;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(table,key);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    found_key = key;\n    htab_traverse(table,FUN_0011a170,&found_key);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "FUN_0011a170",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "imported": false,
            "current_name": "find_or_traverse_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "dataStorage",
                "param_2": "newData",
                "param_3": "newValue",
                "uVar1": "expandedData",
                "puVar2": "dataPointer",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long dataStorage,undefined8 newData,undefined4 newValue)\n\n{\n  undefined8 expandedData;\n  undefined8 *dataPointer;\n  uint currentSize;\n  \n  if (*(uint *)(dataStorage + 0x2c) <= *(uint *)(dataStorage + 0x28)) {\n    currentSize = *(uint *)(dataStorage + 0x2c) + 10;\n    *(uint *)(dataStorage + 0x2c) = currentSize;\n    expandedData = xrealloc(*(undefined8 *)(dataStorage + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStorage + 0x20) = expandedData;\n  }\n  currentSize = *(uint *)(dataStorage + 0x28);\n  dataPointer = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStorage + 0x20));\n  *dataPointer = newData;\n  *(undefined4 *)(dataPointer + 1) = newValue;\n  *(uint *)(dataStorage + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)dataPointer >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strnlen",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "generate_string_0010e918",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "returnValue",
                "__s": "randomString",
                "sVar2": "input2Length",
                "sVar3": "randomStringLength",
                "__s_00": "combinedString"
            },
            "code": "\nundefined4 generateString_0010e918(undefined8 input1,char *input2,undefined8 input3)\n\n{\n  undefined4 returnValue;\n  char *randomString;\n  size_t input2Length;\n  size_t randomStringLength;\n  char *combinedString;\n  \n  randomString = (char *)FUN_00109b2f();\n  input2Length = strlen(input2);\n  randomStringLength = strlen(randomString);\n  combinedString = (char *)xmalloc(input2Length + 0x14 + randomStringLength);\n  sprintf(combinedString,\"%s:c=e%s,%ld\",input2,randomString,input3);\n  free(randomString);\n  returnValue = FUN_0010e2f0(input1,0x80,0,0,combinedString);\n  if ((char)returnValue != '\\0') {\n    free(combinedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_string_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "bfd_source",
                "param_2": "section_header",
                "param_3": "bfd_destination",
                "uVar1": "temp_byte",
                "uVar2": "source_address",
                "uVar7": "error_message",
                "lVar3": "section_header_address",
                "iVar4": "half_size",
                "iVar5": "full_size",
                "cVar6": "result",
                "__ptr": "buffer",
                "lVar8": "index",
                "uVar9": "index2",
                "iVar10": "divisor",
                "uVar11": "offset",
                "puVar12": "source_pointer",
                "lVar13": "remaining_size",
                "puVar14": "buffer_pointer",
                "puVar15": "buffer_end",
                "pvVar16": "destination_pointer",
                "uVar17": "temp_offset",
                "uVar18": "alignment",
                "uVar19": "temp_offset2",
                "bVar20": "flag",
                "local_38": "section_size",
                "local_30": "section_contents"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 bfd_source,undefined8 *section_header,undefined8 bfd_destination)\n\n{\n  undefined temp_byte;\n  undefined8 source_address;\n  long section_header_address;\n  int half_size;\n  int full_size;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long index;\n  ulong index2;\n  int divisor;\n  ulong offset;\n  undefined *source_pointer;\n  long remaining_size;\n  undefined8 *buffer_pointer;\n  undefined8 *buffer_end;\n  void *destination_pointer;\n  ulong temp_offset;\n  ulong alignment;\n  ulong temp_offset2;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  result = FUN_00115f50(bfd_source,section_header,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_header[8];\n  section_header_address = section_header[0xc];\n  if (((*(byte *)((long)section_header + 0x25) & 1) == 0) || ((*(byte *)(section_header_address + 0x25) & 1) == 0)) {\n    remaining_size = FUN_00114190(*section_header,0,0x80);\n    if (remaining_size == 0) {\n      return;\n    }\n    if ((*(byte *)(remaining_size + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    buffer_end = buffer;\n    if (7 < section_size) {\n      for (alignment = section_size >> 3; alignment != 0; alignment = alignment - 1) {\n        *buffer_end = 0;\n        buffer_end = buffer_end + (ulong)flag * -2 + 1;\n      }\n    }\n    buffer_pointer = buffer_end;\n    if ((section_size & 4) != 0) {\n      buffer_pointer = (undefined8 *)((long)buffer_end + (ulong)flag * -8 + 4);\n      *(undefined4 *)buffer_end = 0;\n    }\n    buffer_end = buffer_pointer;\n    if ((section_size & 2) != 0) {\n      buffer_end = (undefined8 *)((long)buffer_pointer + (ulong)flag * -4 + 2);\n      *(undefined2 *)buffer_pointer = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)buffer_end = 0;\n    }\n    result = bfd_set_section_contents(bfd_destination,section_header_address,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,bfd_destination,section_header_address,0);\n    free(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = bfd_get_full_section_contents(bfd_source,section_header,&section_contents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(bfd_source,section_header,bfd_destination,&section_contents,&section_size),\n     divisor = DAT_001278e8, result == '\\0')) {\n    bfd_set_section_size(section_header_address,0);\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,bfd_source,section_header,0);\n    free(section_contents);\n    return;\n  }\n  half_size = DAT_001264b8;\n  full_size = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    alignment = (ulong)DAT_001278e8;\n    if (section_size % alignment != 0) {\n      source_address = *section_header;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(error_message,source_address,divisor);\n    }\n    divisor = DAT_001278e8 / 2;\n    offset = 0;\n    while (temp_offset2 = offset, half_size = DAT_001264b8, full_size = DAT_001264bc, temp_offset2 < section_size) {\n      offset = alignment + temp_offset2;\n      temp_offset = offset;\n      for (index2 = 0; index2 < (ulong)(long)divisor; index2 = index2 + 1) {\n        temp_offset = temp_offset - 1;\n        source_pointer = (undefined *)(temp_offset2 + index2 + (long)section_contents);\n        temp_byte = *source_pointer;\n        *source_pointer = *(undefined *)((long)section_contents + temp_offset);\n        *(undefined *)((long)section_contents + temp_offset) = temp_byte;\n      }\n    }\n  }\n  DAT_001264b8 = half_size;\n  DAT_001264bc = full_size;\n  if (-1 < full_size) {\n    alignment = (ulong)DAT_00127a1c;\n    divisor = (int)((ulong)section_header[7] % alignment);\n    offset = ((long)full_size - (long)divisor) + (long)section_contents;\n    if (full_size < divisor) {\n      offset = offset + alignment;\n    }\n    remaining_size = (section_size + (long)section_contents) - offset;\n    destination_pointer = section_contents;\n    for (; offset < section_size + (long)section_contents; offset = offset + alignment) {\n      for (index = 0; ((int)index < half_size && (index != remaining_size)); index = index + 1) {\n        *(undefined *)((long)destination_pointer + index) = *(undefined *)(offset + index);\n      }\n      destination_pointer = (void *)((long)destination_pointer + index);\n      remaining_size = remaining_size - alignment;\n    }\n    section_size = ((((alignment - 1) + section_size) - (long)full_size) / alignment) * (long)half_size;\n    alignment = *(ulong *)(section_header_address + 0x38) / alignment;\n    *(ulong *)(section_header_address + 0x38) = alignment;\n    if (full_size < divisor) {\n      *(ulong *)(section_header_address + 0x38) = alignment + 1;\n      result = bfd_set_section_contents(bfd_destination,section_header_address,section_contents,0,section_size);\n      if (result == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(bfd_destination,section_header_address,section_contents,0,section_size);\n  if (result == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "FUN_00114190",
                "FUN_001126c0",
                "bfd_get_full_section_contents",
                "xmalloc",
                "bfd_set_section_size",
                "free",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00115f50",
                "FUN_00108466"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "stdoutBuffer",
                "_stderr": "stderrBuffer"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(stdoutBuffer);\n  if (errorCode != 0) {\n    fprintf(stderrBuffer,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(stderrBuffer,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_0010bf20",
                "param_1": "blockPtr",
                "param_2": "newBlockPtr",
                "param_3": "unused1",
                "param_4": "unused2",
                "lVar1": "currentBlock",
                "uVar2": "errMsg",
                "pcVar3": "errorMsg",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endBlock_0010bf20(long blockPtr,undefined8 newBlockPtr,undefined8 unused1,undefined8 unused2)\n\n{\n  long currentBlock;\n  undefined8 errMsg;\n  char *errorMsg;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlock = *(long *)(blockPtr + 0x20), currentBlock == 0)) {\n    errorMsg = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newBlockPtr;\n      errMsg = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMsg = \"debug_end_block: attempt to close top level block\";\n  }\n  errMsg = dcgettext(0,errorMsg,5);\n  fprintf(_stderr,\"%s\\n\",errMsg);\n  errMsg = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = errMsg;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_and_validate_0010c95e",
                "param_1": "inputParams",
                "param_2": "byteString",
                "param_3": "outputValue",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "currentPtr",
                "bVar4": "isSigned",
                "bVar5": "isShort",
                "bVar6": "isUnsigned",
                "cVar7": "returnValue",
                "uVar8": "byteCount",
                "pbVar9": "nextPtr",
                "lVar10": "tmpValue",
                "uVar11": "returnValue",
                "pcVar12": "typeName",
                "sVar13": "stringLength",
                "uVar14": "byteLength",
                "__ptr": "stringPtr",
                "lVar15": "parsedValue",
                "pcVar19": "typeName",
                "ppcVar18": "strings",
                "puVar16": "unsignedLongPtr",
                "puVar17": "unsignedCharPtr",
                "local_49": "localIsShort",
                "local_48": "localByteValue",
                "local_40": "localStrings"
            },
            "code": "\nundefined8 parseAndValidate_0010c95e(undefined8 *inputParams,byte **byteString,long *outputValue)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *currentPtr;\n  bool isSigned;\n  bool isShort;\n  bool isUnsigned;\n  char returnValue;\n  uint byteCount;\n  byte *nextPtr;\n  long tmpValue;\n  undefined8 returnValue;\n  char *typeName;\n  size_t stringLength;\n  ulong byteLength;\n  void *stringPtr;\n  long parsedValue;\n  ulong *unsignedLongPtr;\n  undefined *unsignedCharPtr;\n  char **strings;\n  char *typeName;\n  byte *pnextByte0;\n  undefined localIsShort;\n  ulong localByteValue;\n  char *localStrings [2];\n  \n  while( true ) {\n    pnextByte0 = *byteString;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      parsedValue = 0;\n      currentPtr = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteString = pnextByte0 + 1;\n      returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (outputValue == (long *)0x0) {\n        return 1;\n      }\n      parsedValue = FUN_00113b71(*outputValue);\n      *outputValue = parsedValue;\n      return 1;\n    case 0x46:\n      *byteString = pnextByte0 + 1;\n      if (outputValue == (long *)0x0) {\n        unsignedLongPtr = (ulong *)0x0;\n        strings = (char **)0x0;\n      }\n      else {\n        unsignedLongPtr = &localByteValue;\n        strings = localStrings;\n      }\n      returnValue = FUN_0010d882(inputParams,byteString,strings,unsignedLongPtr);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (**byteString == 0x5f) {\n        *byteString = *byteString + 1;\n        returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputValue == (long *)0x0) {\n          return 1;\n        }\n        parsedValue = FUN_00113ce0(*outputValue,localStrings[0],localByteValue & 0xff);\n        *outputValue = parsedValue;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteString = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      localIsShort = 0;\n      localStrings[0] = (char *)0x0;\n      localByteValue = 0;\n      *byteString = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        strings = localStrings;\n        if (outputValue == (long *)0x0) {\n          strings = (char **)0x0;\n        }\n        returnValue = FUN_0010d559(inputParams,byteString,strings);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        byteCount = FUN_00108e76(byteString);\n        currentPtr = *byteString;\n        stringLength = strlen((char *)currentPtr);\n        if (stringLength < byteCount) goto switchD_0010cdf9_caseD_60;\n        *byteString = currentPtr + byteCount;\n        if ((outputValue != (long *)0x0) &&\n           (localStrings[0] = (char *)FUN_0010afd5(*inputParams,inputParams[1],currentPtr,byteCount,9),\n           localStrings[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **byteString;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *byteString = *byteString + 1;\n        }\n        if (**byteString != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteString = *byteString + 1;\n        if (outputValue == (long *)0x0) {\n          unsignedCharPtr = (undefined *)0x0;\n          unsignedLongPtr = (ulong *)0x0;\n        }\n        else {\n          unsignedCharPtr = &localIsShort;\n          unsignedLongPtr = &localByteValue;\n        }\n        returnValue = FUN_0010d882(inputParams,byteString,unsignedLongPtr,unsignedCharPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteString == 0x5f) {\n        *byteString = *byteString + 1;\n        returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputValue == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          parsedValue = FUN_00113bfa(localStrings[0],*outputValue);\n          *outputValue = parsedValue;\n          return 1;\n        }\n        parsedValue = FUN_00113b98(*outputValue,localStrings[0],localByteValue,localIsShort);\n        *outputValue = parsedValue;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnValue = FUN_0010d559(inputParams,byteString,outputValue);\n      return returnValue;\n    case 0x52:\n      *byteString = pnextByte0 + 1;\n      returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (outputValue == (long *)0x0) {\n        return 1;\n      }\n      parsedValue = FUN_00113cb9(*outputValue);\n      *outputValue = parsedValue;\n      return 1;\n    case 0x54:\n      *byteString = pnextByte0 + 1;\n      returnValue = FUN_00108ea1(byteString,&localByteValue);\n      if (returnValue != '\\0') {\n        if ((uint)localByteValue < *(uint *)(inputParams + 5)) {\n          localStrings[0] = *(char **)((localByteValue & 0xffffffff) * 0x10 + inputParams[4]);\n          returnValue = parseAndValidate_0010c95e(inputParams,localStrings,outputValue);\n          if (returnValue == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteString = pnextByte0 + 1;\n    returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (outputValue == (long *)0x0) {\n      return 1;\n    }\n    parsedValue = FUN_00113d3a(*outputValue);\n    *outputValue = parsedValue;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isUnsigned = false;\n  isSigned = false;\n  returnValue = '\\0';\n  isShort = false;\n  do {\n    currentPtr = *byteString;\n    currentByte = *currentPtr;\n    if (currentByte == 0x55) {\n      returnValue = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        isUnsigned = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (outputValue == (long *)0x0) {\nLAB_0010d0aa:\n          *byteString = currentPtr + 1;\n          return 1;\n        }\n        parsedValue = FUN_0010914e(*inputParams,&DAT_00120436);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00112904(6,4);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned char\";\n        if ((returnValue == '\\0') && (typeName = \"char\", isSigned)) {\n          typeName = \"signed char\";\n        }\n        parsedValue = FUN_0010914e(*inputParams,typeName);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113dfe(1,returnValue);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        parsedValue = FUN_0010914e(*inputParams,\"float\");\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113df2(4);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned int\";\n        typeName = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long unsigned int\";\n        typeName = \"long int\";\nLAB_0010ced2:\n        if (returnValue == '\\0') {\n          typeName = typeName;\n        }\n        parsedValue = FUN_0010914e(*inputParams,typeName);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113dfe(4,returnValue);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        typeName = \"long double\";\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        parsedValue = FUN_0010914e(*inputParams,typeName);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113df2(8);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"short unsigned int\";\n        if (returnValue == '\\0') {\n          typeName = \"short int\";\n        }\n        parsedValue = FUN_0010914e(*inputParams,typeName);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113dfe(2,returnValue);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        strings = localStrings;\n        if (outputValue == (long *)0x0) {\n          strings = (char **)0x0;\n        }\n        returnValue = FUN_0010d21c(inputParams,byteString,strings);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputValue == (long *)0x0) {\n          return 1;\n        }\n        stringLength = strlen(localStrings[0]);\n        parsedValue = FUN_0010afd5(*inputParams,inputParams[1],localStrings[0],stringLength & 0xffffffff,9);\n        *outputValue = parsedValue;\n        free(localStrings[0]);\n        parsedValue = *outputValue;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        parsedValue = FUN_0010914e(*inputParams,&DAT_00120495);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113e17();\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        parsedValue = FUN_0010914e(*inputParams,\"__wchar_t\");\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113dfe(2,1);\n          *outputValue = parsedValue;\n          *byteString = *byteString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (outputValue == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long long unsigned int\";\n        if (returnValue == '\\0') {\n          typeName = \"long long int\";\n        }\n        parsedValue = FUN_0010914e(*inputParams,typeName);\n        *outputValue = parsedValue;\n        if (parsedValue == 0) {\n          parsedValue = FUN_00113dfe(8,returnValue);\n          *outputValue = parsedValue;\n        }\n      }\n      *byteString = *byteString + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      isShort = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *byteString = currentPtr + 1;\n  } while( true );\nLAB_0010ca26:\n  nextPtr = currentPtr + 1;\n  *byteString = nextPtr;\n  currentByte = *nextPtr;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *byteString = currentPtr + 2;\n    returnValue = parseAndValidate_0010c95e(inputParams,byteString,outputValue);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (outputValue == (long *)0x0) {\n      return 1;\n    }\n    tmpValue = FUN_0010914e(*inputParams,\"int\");\n    if (tmpValue == 0) {\n      tmpValue = FUN_00113dfe(4,0);\n    }\n    parsedValue = FUN_00113c43(*outputValue,tmpValue,0,parsedValue,0);\n    *outputValue = parsedValue;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  parsedValue = parsedValue * 10 + (long)((char)currentByte + -0x30);\n  currentPtr = nextPtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pnextByte0);\n      if (outputValue == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*byteString = currentPtr + 1, ((&_sch_istable)[(ulong)currentPtr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *byteString;\n  byteCount = FUN_00108e76(byteString);\n  currentPtr = *byteString;\n  stringLength = strlen((char *)currentPtr);\n  byteLength = (ulong)byteCount;\n  if (byteLength <= stringLength) {\n    *byteString = currentPtr + byteLength;\n    if (outputValue == (long *)0x0) {\n      return 1;\n    }\n    stringPtr = (void *)FUN_00109a0b(currentPtr,byteLength);\n    parsedValue = FUN_0010914e(*inputParams,stringPtr);\n    *outputValue = parsedValue;\n    free(stringPtr);\n    if (*outputValue == 0) {\n      parsedValue = FUN_0010afd5(*inputParams,inputParams[1],currentPtr,(int)*byteString - (int)currentPtr,0);\n      *outputValue = parsedValue;\njoined_r0x0010d1d8:\n      if (parsedValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isShort) {\n      parsedValue = FUN_00113b71(*outputValue);\n      *outputValue = parsedValue;\n    }\n    if (isUnsigned) {\n      parsedValue = FUN_00113b4a(*outputValue);\n      *outputValue = parsedValue;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010d21c",
                "strlen",
                "FUN_00109a0b",
                "FUN_00112904",
                "free",
                "FUN_00113bfa",
                "FUN_0010911f",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00108ea1",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010c95e",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_00113e5e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_validate_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f30",
                "FUN_0010554f",
                "FUN_00119ed0",
                "fclose",
                "fopen",
                "FUN_00114190",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_0010551d",
                "free",
                "bfd_set_format",
                "bfd_get_section_by_name",
                "FUN_001163d0",
                "FUN_00105828",
                "bfd_set_section_size",
                "FUN_00115530",
                "bfd_get_arch",
                "bfd_make_section_with_flags",
                "__errno_location",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "bfd_malloc_and_get_section"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "formattedErrorMessage",
                "local_38": "oldTimeSec",
                "uStack_34": "oldTimeNsec",
                "uStack_30": "newTimeSec",
                "uStack_2c": "newTimeNsec",
                "local_28": "atimeSec",
                "uStack_24": "atimeNsec",
                "uStack_20": "mtimeSec",
                "uStack_1c": "mtimeNsec"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 formattedErrorMessage;\n  undefined4 oldTimeSec;\n  undefined4 oldTimeNsec;\n  undefined4 newTimeSec;\n  undefined4 newTimeNsec;\n  undefined4 atimeSec;\n  undefined4 atimeNsec;\n  undefined4 mtimeSec;\n  undefined4 mtimeNsec;\n  \n  atimeSec = *(undefined4 *)(fileInfo + 0x58);\n  atimeNsec = *(undefined4 *)(fileInfo + 0x5c);\n  mtimeSec = *(undefined4 *)(fileInfo + 0x60);\n  mtimeNsec = *(undefined4 *)(fileInfo + 100);\n  oldTimeSec = *(undefined4 *)(fileInfo + 0x48);\n  oldTimeNsec = *(undefined4 *)(fileInfo + 0x4c);\n  newTimeSec = *(undefined4 *)(fileInfo + 0x50);\n  newTimeNsec = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&oldTimeSec,0);\n  if (result != 0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    formattedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(formattedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 extraInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorDescription,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramArray",
                "param_2": "paramFlag",
                "param_3": "paramInt",
                "param_4": "paramLong",
                "param_5": "paramString",
                "lVar1": "tempLong1",
                "uVar2": "tempVar1",
                "lVar3": "tempLong2",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "sVar6": "stringLength",
                "lVar7": "tempLong3",
                "local_44": "localVar1",
                "uStack_40": "uStackTop1",
                "uStack_3f": "uStackTop2",
                "uStack_3e": "uStackTop3",
                "local_3c": "localArray",
                "bfd_hash_lookup": "lookupHash",
                "bfd_get_error": "getBfdError",
                "bfd_errmsg": "getBfdErrorMsg",
                "dcgettext": "getDcGetText",
                "strlen": "getStringLength",
                "xrealloc": "reallocateMemory",
                "CONCAT26": "concatenate26",
                "CONCAT15": "concatenate15",
                "CONCAT14": "concatenate14",
                "param_1[6]": "paramArrayElem6",
                "param_1[5]": "paramArrayElem5",
                "param_1[4]": "paramArrayElem4",
                "param_1[3]": "paramArrayElem3",
                "param_1[2]": "paramArrayElem2",
                "xrealloc(param_1[1])": "reallocateMemory(paramArrayElem1)",
                "param_1[1]": "paramArrayElem1"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramArray,undefined paramFlag,int paramInt,undefined8 paramLong,char *paramString)\n\n{\n  long tempLong1;\n  undefined4 tempVar1;\n  long tempLong2;\n  undefined8 tempVar2;\n  undefined8 tempVar3;\n  size_t stringLength;\n  long tempLong3;\n  undefined4 localVar1;\n  undefined uStackTop1;\n  undefined uStackTop2;\n  undefined2 uStackTop3;\n  undefined4 localArray [3];\n  \n  if (paramString == (char *)0x0) {\n    tempLong3 = 0;\n  }\n  else {\n    tempLong2 = bfd_hash_lookup(paramArray + 7,paramString,1,1);\n    if (tempLong2 == 0) {\n      tempVar1 = bfd_get_error();\n      tempVar2 = bfd_errmsg(tempVar1);\n      tempVar3 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(tempVar3,tempVar2);\n      return 0;\n    }\n    tempLong3 = *(long *)(tempLong2 + 0x20);\n    if (tempLong3 == -1) {\n      tempLong3 = paramArrayElem6;\n      tempLong1 = paramArrayElem5;\n      *(long *)(tempLong2 + 0x20) = tempLong3;\n      if (tempLong1 == 0) {\n        paramArrayElem4 = tempLong2;\n      }\n      else {\n        *(long *)(tempLong1 + 0x18) = tempLong2;\n      }\n      paramArrayElem5 = tempLong2;\n      stringLength = strlen(paramString);\n      paramArrayElem6 = tempLong3 + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(tempLong3,&localVar1);\n  uStackTop2 = 0;\n  uStackTop1 = paramFlag;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)paramInt,&uStackTop3);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(paramLong,localArray);\n  if ((ulong)paramArrayElem3 < paramArrayElem2 + 0xcU) {\n    paramArrayElem3 = paramArrayElem3 * 2;\n    tempLong3 = xrealloc(paramArrayElem1);\n    paramArrayElem1 = tempLong3;\n  }\n  tempLong3 = paramArrayElem2;\n  tempLong2 = paramArrayElem1;\n  *(ulong *)(tempLong2 + tempLong3) = concatenate26(uStackTop3,concatenate15(uStackTop2,concatenate14(uStackTop1,localVar1)));\n  *(undefined4 *)(tempLong2 + 8 + tempLong3) = localArray[0];\n  paramArrayElem2 = paramArrayElem2 + 0xc;\n  return CONCAT71((int7)((ulong)tempLong3 >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "xrealloc",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e918",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errorMessage",
                "pcVar3": "commaPos",
                "pcVar4": "nextSectionFlag",
                "sVar5": "sectionFlagLength",
                "iVar6": "sectionFlagIndex",
                "uVar7": "flagValue",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errorMessage;\n  char *commaPos;\n  char *nextSectionFlag;\n  size_t sectionFlagLength;\n  int sectionFlagIndex;\n  uint flagValue;\n  undefined returnValue [16];\n  \n  flagValue = 0;\n  do {\n    commaPos = strchr(sectionFlags,0x2c);\n    if (commaPos == (char *)0x0) {\n      sectionFlagLength = strlen(sectionFlags);\n      sectionFlagIndex = (int)sectionFlagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPos + 1;\n      sectionFlagIndex = (int)commaPos - (int)sectionFlags;\n    }\n    sectionFlagLength = (size_t)sectionFlagIndex;\n    result = strncasecmp(\"alloc\",sectionFlags,sectionFlagLength);\n    if (result == 0) {\n      flagValue = flagValue | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,sectionFlagLength);\n      if (result == 0) {\n        flagValue = flagValue | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,sectionFlagLength);\n        if (result == 0) {\n          flagValue = flagValue | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,sectionFlagLength);\n          if (result == 0) {\n            flagValue = flagValue | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,sectionFlagLength);\n            if (result == 0) {\n              flagValue = flagValue | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,sectionFlagLength);\n              if (result == 0) {\n                flagValue = flagValue | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,sectionFlagLength);\n                if (result == 0) {\n                  flagValue = flagValue | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,sectionFlagLength);\n                  if (result == 0) {\n                    flagValue = flagValue | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,sectionFlagLength);\n                    if (result == 0) {\n                      flagValue = flagValue | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,sectionFlagLength);\n                      if (result == 0) {\n                        flagValue = flagValue | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,sectionFlagLength);\n                        if (result == 0) {\n                          flagValue = flagValue | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,sectionFlagLength);\n                          if (result == 0) {\n                            flagValue = flagValue | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,sectionFlagLength);\n                            if (result != 0) {\n                              commaPos = (char *)xmalloc((long)(sectionFlagIndex + 1));\n                              strncpy(commaPos,sectionFlags,sectionFlagLength);\n                              commaPos[sectionFlagLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorMessage,commaPos);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            flagValue = flagValue | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  returnValue._4_4_ = 0;\n  returnValue._0_4_ = flagValue;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_modified_filename_001125fa",
                "param_1": "args",
                "uVar1": "totalLength",
                "ppcVar2": "ppcVar",
                "sVar3": "firstStrLength",
                "sVar4": "secondStrLength",
                "__s": "originalFilename"
            },
            "code": "\nchar * generateModifiedFilename_001125fa(char **args)\n\n{\n  ulong totalLength;\n  char **ppcVar;\n  size_t firstStrLength;\n  size_t secondStrLength;\n  char *originalFilename;\n  \n  if (args == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ppcVar = (char **)args[0x1d];\n  originalFilename = *args;\n  if ((ppcVar != (char **)0x0) && ((*(byte *)((long)ppcVar + 0x49) & 0x10) == 0)) {\n    firstStrLength = strlen(*ppcVar);\n    secondStrLength = strlen(originalFilename);\n    totalLength = firstStrLength + 3 + secondStrLength;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)args[0x1d],*args);\n    originalFilename = DAT_00127a30;\n  }\n  return originalFilename;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "generate_modified_filename_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "check_if_valid_00108f05"
            },
            "code": "\nundefined check_if_valid_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "check_if_valid_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "currentPointer",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *currentPointer;\n  undefined4 *nextPointer;\n  \n  currentPointer = (undefined4 *)&DAT_00127720;\n  do {\n    nextPointer = currentPointer + 6;\n    free(*(void **)(currentPointer + 4));\n    *(undefined8 *)(currentPointer + 4) = 0;\n    currentPointer = nextPointer;\n  } while (nextPointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "undefined": "parameters"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(parameters *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "find_or_create_source_00108f08",
                "param_1": "sourceManager",
                "param_2": "filename",
                "iVar1": "comparisonResult",
                "uVar2": "result",
                "puVar3": "currentNode",
                "puVar4": "tempNode",
                "lVar5": "loopCounter",
                "puVar6": "headNode",
                "pcVar7": "currentFilename",
                "puVar8": "newNode",
                "bVar9": "zeroFlag"
            },
            "code": "\n\n\nundefined8 findOrCreateSource_00108f08(long sourceManager,char *filename)\n\n{\n  int comparisonResult;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *tempNode;\n  long loopCounter;\n  undefined8 *headNode;\n  char *currentFilename;\n  undefined8 *newNode;\n  byte zeroFlag;\n  \n  zeroFlag = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(sourceManager + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (currentNode = *(undefined8 **)(*(long *)(sourceManager + 8) + 8); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      comparisonResult = filename_cmp(currentNode[1],currentFilename);\n      if (comparisonResult == 0) goto LAB_00108fad;\n    }\n    currentNode = (undefined8 *)xmalloc(0x18);\n    headNode = *(undefined8 **)(sourceManager + 0x10);\n    newNode = currentNode;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)newNode = 0;\n      newNode = (undefined8 *)((long)newNode + (ulong)zeroFlag * -8 + 4);\n    }\n    currentNode[1] = currentFilename;\n    newNode = (undefined8 *)*headNode;\n    while (tempNode = newNode, tempNode != (undefined8 *)0x0) {\n      headNode = tempNode;\n      newNode = (undefined8 *)*tempNode;\n    }\n    *headNode = currentNode;\nLAB_00108fad:\n    *(undefined8 **)(sourceManager + 0x10) = currentNode;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "find_or_create_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_input_00114190",
                "param_1": "inputArray",
                "param_2": "isExactMatch",
                "param_3": "matchFlags",
                "uVar1": "flags",
                "plVar2": "currentPattern",
                "pplVar3": "currentNode",
                "iVar4": "matchResult",
                "uVar5": "errorString",
                "pplVar6": "nextNode",
                "pplVar7": "currentNode",
                "pplVar8": "nextNode"
            },
            "code": "\nlong ** processInput_00114190(long *inputArray,char isExactMatch,uint matchFlags)\n\n{\n  uint flags;\n  long *currentPattern;\n  long **currentNode;\n  int matchResult;\n  undefined8 errorString;\n  long **nextNode;\n  long **currentNode;\n  long **nextNode;\n  \n  currentNode = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (isExactMatch == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isExactMatch == '\\0') {\n    if ((matchFlags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      nextNode = (long **)*currentNode;\n      if (nextNode == (long **)0x0) {\n        return (long **)0x0;\n      }\n      currentNode = (long **)0x0;\n    }\n    else {\n      currentPattern = DAT_001278e0[1];\n      if (*(char *)currentPattern == '!') {\n        matchResult = fnmatch((char *)((long)currentPattern + 1),(char *)inputArray,0);\n        nextNode = currentNode;\n        if (matchResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      matchResult = fnmatch((char *)currentPattern,(char *)inputArray,0);\n      if (matchResult != 0) goto LAB_001141e5;\n      nextNode = (long **)*currentNode;\n      if (nextNode == (long **)0x0) goto LAB_00114245;\n    }\n    if ((matchFlags & *(uint *)((long)nextNode + 0x14)) != 0) {\n      currentPattern = nextNode[1];\n      if (*(char *)currentPattern == '!') {\n        matchResult = fnmatch((char *)((long)currentPattern + 1),(char *)inputArray,0);\n        if (matchResult == 0) {\nLAB_0011438e:\n          *(undefined *)(nextNode + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        matchResult = fnmatch((char *)currentPattern,(char *)inputArray,0);\n        if ((currentNode == (long **)0x0) && (matchResult == 0)) {\n          nextNode = (long **)*nextNode;\n          currentNode = nextNode;\n          if (nextNode == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextNode = (long **)*nextNode;\n    nextNode = currentNode;\n    if (nextNode != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    matchResult = strcmp((char *)DAT_001278e0[1],(char *)inputArray);\n    if (matchResult == 0) {\nLAB_001143cd:\n      flags = *(uint *)((long)currentNode + 0x14);\n      if ((((flags & 1) != 0) && ((matchFlags & 2) != 0)) ||\n         (((matchFlags & 1) != 0 && ((flags & 2) != 0)))) {\n        errorString = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorString,inputArray);\n      }\n      if ((((flags & 8) != 0) && ((matchFlags & 0x10) != 0)) || ((matchFlags & 0x18) == 0x18)) {\n        errorString = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorString,inputArray);\n      }\n      if ((((flags & 0x20) == 0) || ((matchFlags & 0x40) == 0)) && ((matchFlags & 0x60) != 0x60)) {\n        *(uint *)((long)currentNode + 0x14) = flags | matchFlags;\n        return currentNode;\n      }\n      errorString = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorString,inputArray);\n    }\n    currentNode = (long **)*currentNode;\n    if (currentNode == (long **)0x0) goto LAB_001142a9;\n    matchResult = strcmp((char *)currentNode[1],(char *)inputArray);\n    if (matchResult == 0) goto LAB_001143cd;\n    nextNode = (long **)*currentNode;\n    nextNode = (long **)0x0;\n    if (nextNode == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      currentNode = nextNode;\n      if (isExactMatch == '\\0') {\n        while (nextNode = nextNode, currentNode = currentNode, nextNode = nextNode,\n              (matchFlags & *(uint *)((long)nextNode + 0x14)) != 0) {\n          currentPattern = nextNode[1];\n          if (*(char *)currentPattern == '!') {\n            matchResult = fnmatch((char *)((long)currentPattern + 1),(char *)inputArray,0);\n            if (matchResult == 0) goto LAB_0011438e;\n            nextNode = (long **)*nextNode;\n            if ((long **)*nextNode == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            matchResult = fnmatch((char *)currentPattern,(char *)inputArray,0);\n            if ((currentNode == (long **)0x0) && (matchResult == 0)) {\n              currentNode = nextNode;\n              nextNode = (long **)*nextNode;\n              if ((long **)*nextNode == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextNode = (long **)*nextNode;\n              if ((long **)*nextNode == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        matchResult = strcmp((char *)nextNode[1],(char *)inputArray);\n        currentNode = nextNode;\n        currentNode = nextNode;\n        if (matchResult == 0) goto LAB_001143cd;\n      }\n      nextNode = currentNode;\n      nextNode = (long **)*nextNode;\n      currentNode = nextNode;\n    } while (nextNode != (long **)0x0);\nLAB_001142a1:\n    if (isExactMatch != '\\0') {\nLAB_001142a9:\n      nextNode = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(nextNode + 3) = (undefined  [16])0x0;\n      *(undefined *)(nextNode + 2) = 0;\n      *(uint *)((long)nextNode + 0x14) = matchFlags;\n      nextNode[5] = (long *)0x0;\n      currentNode = nextNode;\n      *nextNode = (long *)DAT_001278e0;\n      DAT_001278e0 = currentNode;\n      nextNode[1] = inputArray;\n      return nextNode;\n    }\n  }\nLAB_00114212:\n  if (currentNode == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(currentNode + 2) = 1;\n  return currentNode;\n}\n\n",
            "called": [
                "fnmatch",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_input_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "reverse_and_improve_note_attributes_00116490",
                "param_1": "param1",
                "param_2": "noteType",
                "param_3": "noteName",
                "param_4": "noteDescriptionPtr",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "index",
                "lVar7": "descSize",
                "uVar8": "temp4",
                "in_RAX": "noteVersion",
                "uVar9": "temp5",
                "uVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "__ptr": "bufferPtr",
                "uVar13": "temp9",
                "unaff_RBX": "bufferSize",
                "unaff_RBP": "prevNoteType",
                "puVar14": "notePtr",
                "puVar15": "ptr2",
                "cVar16": "charTemp",
                "puVar17": "ptr3",
                "puVar18": "ptr4",
                "in_R11": "descSizeAndVersion",
                "unaff_R12": "noteEntry",
                "puVar19": "noteEntryPtr",
                "unaff_R13": "temp10",
                "__nmemb": "numNotes",
                "unaff_R14": "context",
                "puVar20": "ptr5",
                "bVar21": "byteTemp",
                "iVar22": "loopIndex",
                "unaff_retaddr": "returnAddress",
                "param_7": "descSizeAndVersionSum",
                "param_8": "flag1",
                "param_9": "prevNoteDescription",
                "in_stack_00000020": "bufferSize2",
                "in_stack_00000028": "noteEntries",
                "in_stack_00000030": "bufferPtr2",
                "in_stack_00000038": "flag2",
                "in_stack_00000040": "flag3",
                "in_stack_00000048": "stringArrayPtr"
            },
            "code": "\nulong reverseAndImproveNoteAttributes_00116490(undefined8 param1,ulong noteType,ulong noteName,long noteDescriptionPtr)\n\n{\n  undefined8 temp1;\n  undefined8 temp2;\n  ulong temp3;\n  bool flag;\n  ulong *ptr1;\n  int index;\n  long descSize;\n  undefined8 temp4;\n  ulong noteVersion;\n  ulong temp5;\n  ulong temp6;\n  ulong temp7;\n  ulong temp8;\n  undefined *bufferPtr;\n  ulong temp9;\n  ulong bufferSize;\n  ulong prevNoteType;\n  ulong *notePtr;\n  undefined *ptr2;\n  char charTemp;\n  undefined *ptr3;\n  undefined *ptr4;\n  ulong descSizeAndVersion;\n  ulong *noteEntry;\n  ulong *noteEntryPtr;\n  ulong temp10;\n  size_t numNotes;\n  undefined8 *context;\n  ulong *ptr5;\n  byte byteTemp;\n  int loopIndex;\n  ulong returnAddress;\n  ulong descSizeAndVersionSum;\n  uint flag1;\n  ulong prevNoteDescription;\n  ulong bufferSize2;\n  ulong *noteEntries;\n  undefined *bufferPtr2;\n  uint flag2;\n  uint flag3;\n  undefined8 *stringArrayPtr;\n  \n  byteTemp = 0;\ncode_r0x00116490:\n  descSize = noteDescriptionPtr;\n  temp6 = prevNoteType;\n  temp9 = temp10;\n  if (noteVersion == 0) {\n    if (noteType == 0x100) {\n      noteEntry[7] = returnAddress;\n      temp7 = returnAddress;\nLAB_001164af:\n      temp5 = temp10;\n      temp9 = temp10;\n      returnAddress = temp7;\n    }\n    else {\n      noteEntry[7] = prevNoteDescription;\nLAB_0011669e:\n      temp6 = prevNoteType;\n      temp5 = prevNoteType;\n    }\nLAB_001164bb:\n    noteEntry[8] = temp5;\n    if (*(char *)((noteEntry[3] - 1) + noteName) != '\\0') {\n      descSize = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    noteEntryPtr = noteEntry + 9;\n    if (0xb < bufferSize) {\n      temp5 = (**(code **)(context[1] + 0x40))(descSize);\n      *noteEntryPtr = temp5;\n      temp5 = (**(code **)(context[1] + 0x40))(descSize + 4);\n      noteEntry[10] = temp5;\n      noteType = (**(code **)(context[1] + 0x40))(descSize + 8);\n      noteName = *noteEntryPtr;\n      noteEntry[0xb] = noteType;\n      noteVersion = noteEntry[10];\n      temp5 = noteName + 3 & 0xfffffffffffffffc;\n      noteEntry[0xf] = temp5;\n      if (noteVersion != (noteVersion + 3 & 0xfffffffffffffffc)) {\n        descSize = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteType - 0x100) {\n        descSize = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp7 = temp5 + noteVersion + 0xc;\n      if (bufferSize < temp7) {\n        descSize = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteName < 2) {\n        descSize = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      noteEntry[0xc] = descSize + 0xc;\n      descSizeAndVersion = descSize + 0xc + temp5;\n      noteEntry[0xd] = descSizeAndVersion;\n      bufferSize = bufferSize + (-0xc - (temp5 + noteVersion));\n      noteDescriptionPtr = descSize + temp7;\n      prevNoteType = temp6;\n      noteEntry = noteEntryPtr;\n      temp10 = temp9;\n      if (noteName != 2) {\n        if (*(char *)(descSize + 0xc) == '$') {\n          if ((*(char *)(descSize + 0xd) == '\\x01') && (*(char *)(descSize + 0xe) == '1')) {\n            temp6 = reverseAndImproveNoteAttributes_00116490();\n            return temp6;\n          }\n        }\n        else if ((((4 < noteName) && (*(char *)(descSize + 0xc) == 'G')) &&\n                 (*(char *)(descSize + 0xd) == 'A')) &&\n                ((*(char *)(descSize + 0xe) == '$' && (*(char *)(descSize + 0xf) == '\\x01')))) {\n          if (*(char *)(descSize + 0x10) == '2') {\n            temp6 = reverseAndImproveNoteAttributes_00116490();\n            return temp6;\n          }\n          if (*(char *)(descSize + 0x10) == '3') {\n            temp6 = reverseAndImproveNoteAttributes_00116490();\n            return temp6;\n          }\n          descSize = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (bufferSize != 0) {\n      descSize = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag2 | flag3 | flag1) == 0) {\n      temp1 = *context;\n      temp2 = *stringArrayPtr;\n      temp4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(temp4,temp1,temp2);\nLAB_0011671b:\n      numNotes = ((long)noteEntryPtr - (long)noteEntries >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteEntries,numNotes,0x48,FUN_0011a1b0);\n      for (notePtr = noteEntries; notePtr < noteEntryPtr; notePtr = notePtr + 9) {\n        temp6 = notePtr[2];\n        if (temp6 != 0) {\n          temp9 = notePtr[7];\n          temp5 = notePtr[8];\n          ptr5 = notePtr;\n          loopIndex = 0;\n          if (temp9 == temp5) {\n            notePtr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr1 = ptr5;\n                ptr5 = ptr1 + -9;\n                if (ptr5 < noteEntries) goto LAB_001167f5;\n                temp7 = ptr1[-7];\n              } while (temp7 == 0);\n              if ((*ptr5 != *notePtr) ||\n                 (index = memcmp((void *)ptr1[-6],(void *)notePtr[3],*notePtr), index != 0))\n              break;\n              temp3 = ptr1[-2];\n              temp8 = ptr1[-1];\n              if (temp9 == temp3) {\n                if (temp5 == temp8) {\n                  notePtr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp5 <= temp8) {\n                  notePtr[2] = 0;\n                  break;\n                }\n                if (temp8 < temp9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp8) ||\n                     (temp9 <= (temp8 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((temp6 == 0x101) == (temp7 == 0x101)) {\n                  if (temp8 <= temp5) {\n                    temp8 = temp5;\n                  }\n                  if (temp3 < temp9) {\n                    temp9 = temp3;\n                  }\n                  ptr1[-1] = temp8;\n                  ptr1[-2] = temp9;\n                  notePtr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp3 <= temp9) goto LAB_001167a6;\n                if (temp8 < temp9) goto LAB_0010852c;\n                if (temp5 < temp9) {\n                  if ((0xfffffffffffffff0 < temp5) || (temp3 <= (temp5 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp5 != temp8) goto LAB_001167b8;\n              }\nFUN_00116852:\n              flag = loopIndex < 0x11;\n              loopIndex = loopIndex + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteEntries,numNotes,0x48,FUN_0011a250);\n      bufferPtr = (undefined *)xmalloc(bufferSize2 * 2);\n      descSizeAndVersionSum = 0;\n      prevNoteDescription = 0;\n      ptr4 = bufferPtr;\n      for (notePtr = noteEntries; notePtr < noteEntryPtr; notePtr = notePtr + 9) {\n        if (notePtr[2] != 0) {\n          ptr3 = ptr4 + 4;\n          ptr2 = ptr4 + 0xc;\n          if ((notePtr[7] == prevNoteDescription) && (notePtr[8] == descSizeAndVersionSum)) {\n            (**(code **)(context[1] + 0x50))(*notePtr,ptr4);\n            (**(code **)(context[1] + 0x50))(0,ptr3);\n            (**(code **)(context[1] + 0x50))(notePtr[2],ptr4 + 8);\n            temp9 = notePtr[6];\n            temp6 = *notePtr;\n            ptr4 = (undefined *)notePtr[3];\n            ptr3 = ptr2;\n            for (temp5 = temp6; temp5 != 0; temp5 = temp5 - 1) {\n              *ptr3 = *ptr4;\n              ptr4 = ptr4 + (ulong)byteTemp * -2 + 1;\n              ptr3 = ptr3 + (ulong)byteTemp * -2 + 1;\n            }\n            if (temp6 < temp9) {\n              for (descSize = temp9 - temp6; descSize != 0; descSize = descSize + -1) {\n                *ptr3 = 0;\n                ptr3 = ptr3 + (ulong)byteTemp * -2 + 1;\n              }\n            }\n            ptr4 = ptr2 + temp9;\n          }\n          else {\n            (**(code **)(context[1] + 0x50))();\n            if (*(int *)(context[1] + 8) == 5) {\n              charTemp = (*(char *)(context[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charTemp = '\\b';\n            }\n            (**(code **)(context[1] + 0x50))(charTemp,ptr3);\n            (**(code **)(context[1] + 0x50))(notePtr[2],ptr4 + 8);\n            temp6 = *notePtr;\n            ptr4 = (undefined *)notePtr[3];\n            ptr3 = ptr2;\n            for (temp9 = temp6; temp9 != 0; temp9 = temp9 - 1) {\n              *ptr3 = *ptr4;\n              ptr4 = ptr4 + (ulong)byteTemp * -2 + 1;\n              ptr3 = ptr3 + (ulong)byteTemp * -2 + 1;\n            }\n            temp9 = notePtr[6];\n            if (temp6 < temp9) {\n              for (descSize = temp9 - temp6; descSize != 0; descSize = descSize + -1) {\n                *ptr3 = 0;\n                ptr3 = ptr3 + (ulong)byteTemp * -2 + 1;\n              }\n            }\n            descSize = context[1];\n            ptr2 = ptr2 + temp9;\n            ptr4 = ptr2 + 8;\n            if ((*(int *)(descSize + 8) == 5) && (*(char *)(context[0x22] + 4) == '\\x02')) {\n              (**(code **)(descSize + 0x38))(notePtr[7],ptr2);\n              (**(code **)(context[1] + 0x38))(notePtr[8],ptr4);\n              ptr4 = ptr2 + 0x10;\n            }\n            else {\n              (**(code **)(descSize + 0x50))(notePtr[7],ptr2);\n              (**(code **)(context[1] + 0x50))(notePtr[8],ptr2 + 4);\n            }\n            prevNoteDescription = notePtr[7];\n            descSizeAndVersionSum = notePtr[8];\n          }\n        }\n      }\n      temp9 = (long)ptr4 - (long)bufferPtr;\n      temp6 = temp9;\n      ptr4 = bufferPtr;\n      if (temp9 < bufferSize2) {\n        for (; bufferSize2 = temp9, temp6 != 0; temp6 = temp6 - 1) {\n          *bufferPtr2 = *ptr4;\n          ptr4 = ptr4 + (ulong)byteTemp * -2 + 1;\n          bufferPtr2 = bufferPtr2 + (ulong)byteTemp * -2 + 1;\n        }\n      }\n      free(bufferPtr);\nLAB_001166f8:\n      free(noteEntries);\n      return bufferSize2;\n    }\n    if (((flag3 | flag1) == 0) || (flag2 == 0)) {\n      if (flag3 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    descSize = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteVersion == 0x10) {\n      temp7 = (**(code **)(context[1] + 0x28))(descSizeAndVersion);\n      temp5 = (**(code **)(context[1] + 0x28))(noteEntry[4] + 8);\n      if (temp5 < temp7) {\n        temp7 = temp5;\n      }\nLAB_00116631:\n      if (noteEntry[2] == 0x100) {\n        if (temp7 == 0) {\n          temp7 = returnAddress;\n        }\n        noteName = *noteEntry;\n        noteEntry[7] = temp7;\n        temp9 = temp5;\n        returnAddress = temp7;\n        if (temp5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp7 == 0) {\n          temp7 = prevNoteDescription;\n        }\n        noteName = *noteEntry;\n        noteEntry[7] = temp7;\n        temp6 = temp5;\n        prevNoteDescription = temp7;\n        if (temp5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteVersion < 0x11) {\n      if (noteVersion == 4) {\n        temp7 = (**(code **)(context[1] + 0x40))(descSizeAndVersion);\n        temp5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteVersion == 8) {\n        temp6 = FUN_001086af();\n        return temp6;\n      }\n    }\n    descSize = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (descSize != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,context,stringArrayPtr,descSize);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_note_attributes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "free",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_with_debug_0010be1a",
                "param_1": "functionData",
                "param_2": "endMessage",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "lVar1": "blockData",
                "uVar2": "localizedMessage",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endFunctionWithDebug_0010be1a(long functionData,undefined8 endMessage,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long blockData;\n  undefined8 localizedMessage;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockData = *(long *)(functionData + 0x20), blockData == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockData + 8) == 0) {\n      *(undefined8 *)(blockData + 0x20) = endMessage;\n      localizedMessage = CONCAT71((int7)((ulong)blockData >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  localizedMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",localizedMessage);\n  localizedMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = localizedMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_function_with_debug_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "allocate_and_initialize_array_00113da9",
                "param_1": "byte_length",
                "param_2": "unused_param_2",
                "param_3": "value",
                "param_4": "unused_param_4",
                "puVar1": "array_ptr",
                "lVar2": "loop_counter",
                "puVar3": "current_ptr",
                "bVar4": "bVar",
                "auVar5": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_array_00113da9(byte byte_length,undefined8 unused_param_2,undefined8 value,undefined8 unused_param_4)\n\n{\n  undefined8 *array_ptr;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte bVar;\n  undefined return_value [16];\n  \n  bVar = 0;\n  return_value._0_8_ = FUN_00112904(8 - (uint)byte_length);\n  if (return_value._0_8_ != 0) {\n    array_ptr = (undefined8 *)xmalloc(0x28);\n    current_ptr = array_ptr + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)bVar * -8 + 4);\n    }\n    *array_ptr = value;\n    *(undefined8 **)(return_value._0_8_ + 0x10) = array_ptr;\n  }\n  return_value._8_8_ = unused_param_4;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_id"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_id;\n  \n  record1_id = record1[2];\n  if (record1_id == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_id == 0) || ((record1_id != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "flag",
                "param_4": "charFlag",
                "param_5": "num",
                "uVar1": "result",
                "lVar2": "length",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "hasPrefix",
                "local_60": "buffer"
            },
            "code": "\nundefined4 processData_0010a69a(long data,undefined8 ptr,int flag,char charFlag,uint num)\n\n{\n  undefined4 result;\n  long length;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined hasPrefix;\n  char buffer [48];\n  \n  if (flag == 0) {\n    buffer[0] = '\\0';\n    hasPrefix = 0;\n    length = 0;\n  }\n  else {\n    length = FUN_00109c2e();\n    if (length < 0) {\n      return 0;\n    }\n    hasPrefix = 1;\n    sprintf(buffer,\"%ld=\",length);\n  }\n  stringLength = strlen(buffer);\n  sprintf(buffer + stringLength,\"%c%u\",(ulong)((-(uint)(charFlag == '\\0') & 2) + 0x73),(ulong)num);\n  result = FUN_00109b52(data,buffer,length,hasPrefix,num);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  length = *(long *)(data + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(length + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109c2e",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "sections",
                "pcVar1": "section_name",
                "iVar2": "strcmp_result",
                "iVar3": "section_type",
                "lVar4": "section_size",
                "lVar5": "section_offset",
                "uVar6": "error_message",
                "plVar7": "section_list"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **sections)\n\n{\n  char *section_name;\n  int strcmp_result;\n  int section_type;\n  long section_size;\n  long section_offset;\n  undefined8 error_message;\n  long *section_list;\n  \n  section_size = FUN_00114190(*sections,0,4);\n  if (section_size == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      section_size = FUN_00114190(*sections,0,1);\n      section_offset = FUN_00114190(*sections,0,2);\n      if (section_size != 0) {\n        if (section_offset != 0) {\n          section_name = *sections;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(error_message,section_name);\n        }\n        if (section_size != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          section_name = *sections;\n          section_list = DAT_001279b8;\n          do {\n            section_type = strcmp(section_name,(char *)section_list[1]);\n            if (section_type == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(error_message,section_name);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (section_offset == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)sections + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        section_name = *sections;\n        strcmp_result = strcmp(section_name,\".gnu_debugaltlink\");\n        if ((strcmp_result != 0) && (strcmp_result = strcmp(section_name,\".gnu_debuglink\"), strcmp_result != 0)) {\n          section_type = strcmp(section_name,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          error_message = FUN_0010829e();\n          return error_message;\n        }\n      }\n      if (section_type == 5) {\n        error_message = FUN_00113ede(sections);\n        return error_message;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      error_message = FUN_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00114190",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_table_00116030",
                "param_1": "file_data",
                "param_2": "file_size",
                "plVar1": "reloc_entry",
                "lVar2": "entry_value",
                "lVar3": "data_section_start",
                "lVar4": "data_section_end",
                "iVar5": "error_code",
                "in_RAX": "original_value",
                "lVar6": "reloc_section_start",
                "__ptr": "reloc_buffer",
                "lVar7": "reloc_count",
                "extraout_RAX": "result",
                "lVar8": "index",
                "uStack_28": "default_value"
            },
            "code": "\n\n\nundefined8 process_reloc_table_00116030(undefined8 *file_data,long file_size)\n\n{\n  long *reloc_entry;\n  long entry_value;\n  long data_section_start;\n  long data_section_end;\n  int error_code;\n  undefined8 original_value;\n  long reloc_section_start;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 result;\n  long index;\n  undefined8 default_value;\n  \n  if (*(long *)(file_size + 0x60) == 0) {\n    return original_value;\n  }\n  reloc_section_start = bfd_get_reloc_upper_bound();\n  if (reloc_section_start < 0) {\n    if ((reloc_section_start != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*file_data);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_section_start != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(file_data,file_size,reloc_buffer);\n    data_section_end = _DAT_00128680;\n    data_section_start = _DAT_00128568;\n    reloc_section_start = _fwrite;\n    if (reloc_count < 0) {\n      FUN_0011a110(*file_data);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((reloc_entry != (long *)0x0) && (entry_value = *reloc_entry, entry_value != 0)) && (entry_value != reloc_section_start)) &&\n           ((entry_value != data_section_end && (entry_value != data_section_start)))) {\n          *(uint *)(entry_value + 0x18) = *(uint *)(entry_value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_buffer);\n    return result;\n  }\n  return default_value;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "xmalloc",
                "free",
                "FUN_001083b7",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_table_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "extract_and_process_string_00113ede",
                "param_1": "string_ptr",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 extract_and_process_string_00113ede(char **string_ptr)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_ptr == (char **)0x0) {\n    return 0;\n  }\n  string = *string_ptr;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "extract_and_process_string_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "initialize_data_structures_0010c892",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "charFlag",
                "lVar2": "tempVar",
                "lVar3": "dataVar",
                "uVar4": "returnValue",
                "puVar5": "ptrToData",
                "iVar6": "intVar"
            },
            "code": "\n\n\nundefined8 initializeDataStructures_0010c892(undefined8 param1,long param2)\n\n{\n  char charFlag;\n  long tempVar;\n  long dataVar;\n  undefined8 returnValue;\n  undefined8 *ptrToData;\n  int intVar;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptrToData = *(undefined8 **)(param2 + 0x1a0); ptrToData != (undefined8 *)0x0;\n        ptrToData = (undefined8 *)*ptrToData) {\n      intVar = *(int *)(ptrToData + 2);\n      dataVar = ptrToData[1];\n      if (intVar != 0) {\n        if (dataVar != 0) {\n          if (intVar - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        ptrToData[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (dataVar == 0) goto LAB_0010c910;\n      intVar = 7;\nLAB_0010c8d5:\n      tempVar = FUN_00112904(intVar,0);\n      if (tempVar == 0) goto LAB_0010c910;\n      dataVar = FUN_0010c6be(param1,dataVar,tempVar);\n      ptrToData[3] = dataVar;\n      if (dataVar == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    charFlag = FUN_0010c1c6();\n    if (charFlag != '\\0') {\n      charFlag = FUN_0010be1a(param1,*(undefined8 *)(param2 + 0x68));\n      if (charFlag != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904",
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "allocate_and_initialize_array_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "arrayPointer"
            },
            "code": "\nvoid allocateAndInitializeArray_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *arrayPointer;\n  \n  arrayPointer = (undefined4 *)xmalloc(0x18);\n  *arrayPointer = input1;\n  arrayPointer[1] = input2;\n  *(undefined (*) [16])(arrayPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113c43",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00113bfa",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnAddress",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnAddress;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00107880",
                "FUN_00109a32",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00115b70",
                "FUN_0010922b",
                "FUN_00114190",
                "FUN_0010c7a0",
                "FUN_00108898",
                "FUN_0011173a",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_functions_in_list_0011a390",
                "lVar1": "index",
                "lVar2": "innerIndex",
                "lVar3": "outerIndex",
                "plVar4": "functionList",
                "uVar5": "length"
            },
            "code": "\nvoid executeFunctionsInList_0011a390(void)\n\n{\n  long index;\n  long innerIndex;\n  long outerIndex;\n  long *functionList;\n  uint length;\n  \n  functionList = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      length = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)length) {\n        index = (long)(int)length;\n        length = length & 7;\n        (*(code *)functionList[index + 2])();\n        innerIndex = index + -1;\n        if (-1 < (int)innerIndex) {\n          outerIndex = innerIndex;\n          if (length != 0) {\n            if (length != 1) {\n              if (length != 2) {\n                if (length != 3) {\n                  if (length != 4) {\n                    if (length != 5) {\n                      if (length != 6) {\n                        (*(code *)functionList[index + 1])();\n                        innerIndex = index + -2;\n                      }\n                      (*(code *)functionList[innerIndex + 2])();\n                      innerIndex = innerIndex + -1;\n                    }\n                    (*(code *)functionList[innerIndex + 2])();\n                    innerIndex = innerIndex + -1;\n                  }\n                  (*(code *)functionList[innerIndex + 2])();\n                  innerIndex = innerIndex + -1;\n                }\n                (*(code *)functionList[innerIndex + 2])();\n                innerIndex = innerIndex + -1;\n              }\n              (*(code *)functionList[innerIndex + 2])();\n              innerIndex = innerIndex + -1;\n            }\n            (*(code *)functionList[innerIndex + 2])();\n            outerIndex = innerIndex + -1;\n            if ((int)(innerIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionList[outerIndex + 2])();\n            index = outerIndex + -1;\n            (*(code *)functionList[outerIndex + 1])();\n            (*(code *)functionList[outerIndex])();\n            (*(code *)functionList[index])();\n            (*(code *)functionList[outerIndex + -2])();\n            (*(code *)functionList[outerIndex + -3])();\n            (*(code *)functionList[outerIndex + -4])();\n            (*(code *)functionList[outerIndex + -5])();\n            outerIndex = outerIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_functions_in_list_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_send_message_0010e842",
                "param_1": "data",
                "param_2": "message",
                "param_3": "counter",
                "param_4": "callback",
                "sVar1": "message_length",
                "__s": "formatted_message",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] format_and_send_message_0010e842(undefined8 data,char *message,undefined8 counter,undefined8 callback)\n\n{\n  size_t message_length;\n  char *formatted_message;\n  undefined result [16];\n  \n  message_length = strlen(message);\n  formatted_message = (char *)xmalloc(message_length + 0x14);\n  sprintf(formatted_message,\"%s:c=i%ld\",message,counter);\n  result._0_4_ = FUN_0010e2f0(data,0x80,0,0,formatted_message);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_message);\n  }\n  result._8_8_ = callback;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_message_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_value_00113cb9",
                "param_1": "value",
                "lVar1": "result"
            },
            "code": "\nlong initializeValue_00113cb9(long value)\n\n{\n  long result;\n  \n  if (value != 0) {\n    result = FUN_00112904(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_value_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_and_send_data_0010eafe",
                "param_1": "dataStruct",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "resultString",
                "sVar2": "inputLen",
                "sVar3": "resultLen",
                "__s_00": "combinedString",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 processAndSendData_0010eafe(long dataStruct,char *inputString,char flag)\n\n{\n  undefined4 returnValue;\n  char *resultString;\n  size_t inputLen;\n  size_t resultLen;\n  char *combinedString;\n  \n  if ((*(int *)(dataStruct + 0x1f8) == 0) && (*(long *)(dataStruct + 0x1e8) == -1)) {\n    resultString = (char *)FUN_00109b2f();\n    inputLen = strlen(inputString);\n    resultLen = strlen(resultString);\n    combinedString = (char *)xmalloc(inputLen + 3 + resultLen);\n    sprintf(combinedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),resultString);\n    *(undefined8 *)(dataStruct + 0x1e8) = *(undefined8 *)(dataStruct + 0x10);\n    returnValue = FUN_0010e2f0(dataStruct,0x24,0,0,combinedString);\n    if ((char)returnValue != '\\0') {\n      free(combinedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_00113df2",
                "param_1": "data"
            },
            "code": "\nvoid initialize_00113df2(undefined4 data)\n\n{\n  FUN_00112904(4,data);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "update_data_0010a377",
                "param_1": "dataPointer",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "resultString",
                "uVar2": "returnValue",
                "cVar1": "character",
                "uVar5": "useDefaultValue"
            },
            "code": "\nundefined4 updateData_0010a377(long dataPointer)\n\n{\n  char character;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  undefined useDefaultValue;\n  \n  useDefaultValue = 1;\n  character = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  if (character == '\\0') {\n    useDefaultValue = *(undefined *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  }\n  string2 = (char *)FUN_00109b2f(dataPointer);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(resultString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  returnValue = FUN_00109b52(dataPointer,resultString,0,useDefaultValue,0);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "iteration",
                "pcVar2": "pointer2",
                "cVar3": "character",
                "lVar4": "allocated_memory",
                "pcVar5": "pointer5",
                "uVar6": "index",
                "bVar7": "condition",
                "local_50": "counter",
                "local_4c": "constant",
                "local_48": "value",
                "local_44": "flag",
                "local_40": "array"
            },
            "code": "\nundefined8 process_data_0010d882(long param1,char **param2,long *param3,undefined *param4)\n\n{\n  int iteration;\n  char *pointer2;\n  char character;\n  long allocated_memory;\n  char *pointer5;\n  ulong index;\n  bool condition;\n  uint counter;\n  undefined4 constant;\n  uint value;\n  int flag;\n  undefined8 array [2];\n  \n  pointer2 = *param2;\n  constant = 10;\n  if (param3 != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *param3 = allocated_memory;\n    *param4 = 0;\n  }\n  counter = 0;\n  while( true ) {\n    pointer5 = *param2;\n    character = *pointer5;\n    if ((character == '_' || character == '\\0') || (character == 'e')) break;\n    if ((character == 'N') || (character == 'T')) {\n      *param2 = pointer5 + 1;\n      if (character == 'T') {\n        flag = 1;\n      }\n      else {\n        character = FUN_00108ea1(param2,&flag);\n        if (character == '\\0') goto LAB_0010d958;\n      }\n      character = FUN_00108ea1(param2,&value);\n      if ((character == '\\0') || (*(uint *)(param1 + 0x28) <= value)) {\nLAB_0010d958:\n        FUN_0010911f(pointer2);\n        return 0;\n      }\n      index = (ulong)value;\n      while (iteration = flag + -1, condition = flag != 0, flag = iteration, condition) {\n        array[0] = *(undefined8 *)(*(long *)(param1 + 0x20) + index * 0x10);\n        character = FUN_0010d7d4(param1,array,param3,&counter,&constant);\n        if (character == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      character = FUN_0010d7d4(param1,param2,param3,&counter,&constant);\n      if (character == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (param3 == (long *)0x0) {\n    if (character != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*param3 + (ulong)counter * 8) = 0;\n    if (*pointer5 != 'e') goto LAB_0010d9fa;\n    *param4 = 1;\n  }\n  pointer5 = pointer5 + 1;\n  *param2 = pointer5;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)pointer5 >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_0010d7d4",
                "FUN_00108ea1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryBlock",
                "param_2": "address",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr",
                "pauVar2": "existingMemoryBlock",
                "lVar3": "loopCounter",
                "puVar4": "ptr2",
                "bVar5": "loopVar"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryBlock) [16],undefined8 address,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *ptr;\n  undefined (*existingMemoryBlock) [16];\n  long loopCounter;\n  undefined4 *ptr2;\n  byte loopVar;\n  \n  loopVar = 0;\n  ptr = (undefined4 *)xmalloc(0x28);\n  ptr2 = ptr;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr2 = 0;\n    ptr2 = ptr2 + (ulong)loopVar * -2 + 1;\n  }\n  existingMemoryBlock = *memoryBlock;\n  *(undefined8 *)(ptr + 2) = address;\n  ptr[5] = param3;\n  ptr[6] = param4;\n  if (existingMemoryBlock == (undefined (*) [16])0x0) {\n    existingMemoryBlock = (undefined (*) [16])xmalloc(0x10);\n    *existingMemoryBlock = ZEXT816(0);\n    *memoryBlock = existingMemoryBlock;\n    *(undefined (**) [16])(*existingMemoryBlock + 8) = existingMemoryBlock;\n  }\n  **(undefined8 **)(*existingMemoryBlock + 8) = ptr;\n  *(undefined4 **)(*existingMemoryBlock + 8) = ptr;\n  return ptr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_00112996",
                "FUN_0010bc80",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010c6be"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "data",
                "param_2": "unit",
                "param_3": "line",
                "uVar1": "errorMessage",
                "puVar2": "debugUnitPtr",
                "uVar3": "index",
                "puVar4": "debugLinePtr",
                "lVar5": "counter",
                "puVar6": "iterator",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long data,undefined8 unit,undefined8 line)\n\n{\n  undefined8 errorMessage;\n  undefined8 *debugUnitPtr;\n  ulong index;\n  undefined4 *debugLinePtr;\n  long counter;\n  undefined4 *iterator;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(data + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    counter = *(long *)(data + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(data + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          debugUnitPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)debugUnitPtr * 8) = unit;\n          *(undefined8 *)(counter + 0x60 + (long)debugUnitPtr * 8) = line;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    debugLinePtr = (undefined4 *)xmalloc(0xb0);\n    iterator = debugLinePtr;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *iterator = 0;\n      iterator = iterator + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(data + 0x10);\n    *(undefined8 *)(debugLinePtr + 4) = unit;\n    *(undefined8 *)(debugLinePtr + 2) = errorMessage;\n    *(undefined8 *)(debugLinePtr + 0x18) = line;\n    iterator = debugLinePtr + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)iterator = 0xff;\n      iterator = (undefined4 *)((long)iterator + (ulong)flag * -2 + 1);\n    }\n    debugUnitPtr = *(undefined8 **)(data + 0x28);\n    if (debugUnitPtr == (undefined8 *)0x0) {\n      debugUnitPtr = *(undefined8 **)(data + 8);\n      debugUnitPtr[2] = debugLinePtr;\n    }\n    else {\n      *debugUnitPtr = debugLinePtr;\n    }\n    *(undefined4 **)(data + 0x28) = debugLinePtr;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)debugUnitPtr >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint checkPatternMatch_0011a170(char **pattern,char **input)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "collect_debug_info_0010bd62",
                "param_1": "function_ptr",
                "param_2": "param_ptr",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "debug_info_ptr",
                "puVar1": "prev_node",
                "uVar2": "error_msg",
                "puVar3": "new_node",
                "puVar4": "next_node",
                "lVar5": "i",
                "puVar6": "last_node",
                "puVar7": "current_node",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\ncollect_debug_info_0010bd62(long function_ptr,long param_ptr,long param_size,undefined4 param_type,undefined8 debug_info_ptr)\n\n{\n  undefined8 *prev_node;\n  undefined8 error_msg;\n  undefined4 *new_node;\n  undefined8 *next_node;\n  long i;\n  undefined8 *last_node;\n  undefined4 *current_node;\n  byte flag;\n  \n  flag = 0;\n  if (param_ptr == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_node = (undefined4 *)xmalloc(0x28);\n      current_node = new_node;\n      for (i = 10; i != 0; i = i + -1) {\n        *current_node = 0;\n        current_node = current_node + (ulong)flag * -2 + 1;\n      }\n      i = *(long *)(function_ptr + 0x18);\n      *(long *)(new_node + 2) = param_ptr;\n      *(long *)(new_node + 4) = param_size;\n      new_node[6] = param_type;\n      prev_node = *(undefined8 **)(i + 8);\n      *(undefined8 *)(new_node + 8) = debug_info_ptr;\n      last_node = (undefined8 *)(i + 8);\n      while (next_node = prev_node, next_node != (undefined8 *)0x0) {\n        last_node = next_node;\n        prev_node = (undefined8 *)*next_node;\n      }\n      *last_node = new_node;\n      return 1;\n    }\n    error_msg = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_msg);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "collect_debug_info_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_file_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "writeMode",
                "ppcVar6": "archiveFile",
                "unaff_R15": "nextFile",
                "cVar1": "success",
                "iVar2": "archType",
                "unaff_RBP": "fileStat",
                "lVar12": "fileSize",
                "param_9": "tempDir",
                "param_10": "tempPath",
                "param_7": "inputFile",
                "param_8": "outputFile",
                "puVar8": "tempFile",
                "uVar11": "errMsg",
                "pvVar4": "buffer",
                "pcVar13": "bfdClose"
            },
            "code": "\nvoid extractAndCopyFile_00104ea2(void)\n\n{\n  char success;\n  int archType;\n  char **ppcVar3;\n  void *buffer;\n  long lVar5;\n  char **archiveFile;\n  char *pcVar7;\n  undefined8 *tempFile;\n  int *piVar9;\n  char *psuccess0;\n  undefined8 errMsg;\n  long fileSize;\n  code *bfdClose;\n  long lVar14;\n  int unaff_EBX;\n  stat *fileStat;\n  char *psuccess5;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *unaff_R13;\n  char **nextFile;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *inputFile;\n  long *outputFile;\n  char *tempDir;\n  undefined8 *tempPath;\n  undefined8 writeMode;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  archiveFile = (char **)bfd_openw(archivePath,writeMode);\n  if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    success = FUNC_00114e50(nextFile,archiveFile,unaff_retaddr);\n    if (success == '\\0') {\n      archType = bfd_get_arch(nextFile);\n      if (archType == 0) goto LAB_00104d75;\n      success = bfd_close_all_done(archiveFile);\n      if (success != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    success = bfd_close(archiveFile);\n    archiveFile = nextFile;\n    if (success == '\\0') {\n      FUN_001126c0(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (unaff_EBX == 0)) {\n      FUN_0011a350(archivePath,fileStat);\n    }\n    fileSize = bfd_openr(archivePath,writeMode);\n    unaff_R13[2] = fileSize;\n    *outputFile = fileSize;\n    outputFile = (long *)(fileSize + 0xf0);\n    nextFile = (char **)bfd_openr_next_archived_file(tempPath,archiveFile);\n    bfd_close(archiveFile);\n    while ((DAT_00127a20 == 0 && (nextFile != (char **)0x0))) {\n      psuccess0 = *nextFile;\n      pcVar7 = psuccess0;\n      if (*psuccess0 == '/') {\nLAB_0010527d:\n        errMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errMsg,psuccess0);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        psuccess5 = pcVar7;\n        if ((*pcVar7 == '.') && (psuccess5 = pcVar7 + 1, pcVar7[1] == '.')) {\n          psuccess5 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*psuccess5 != '\\0' && (*psuccess5 != '/')); psuccess5 = psuccess5 + 1) {\n        }\n        pcVar7 = psuccess5;\n        if (*psuccess5 == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDir,&DAT_0011b47d);\n      archType = stat(archivePath,fileStat);\n      tempFile = unaff_R13;\n      if (-1 < archType) {\n        fileSize = FUN_0011a0e0(archivePath);\n        free(archivePath);\n        if (fileSize == 0) {\n          piVar9 = __errno_location();\n          psuccess0 = strerror(*piVar9);\n          errMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errMsg,psuccess0);\n          goto LAB_00104e93;\n        }\n        tempFile = (undefined8 *)xmalloc(0x18);\n        psuccess0 = *nextFile;\n        *tempFile = unaff_R13;\n        tempFile[2] = 0;\n        tempFile[1] = fileSize;\n        archivePath = (char *)concat(fileSize,&DAT_0011b47d,psuccess0);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = fileStat;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        archiveFile = (char **)nextFile[0x1d];\n        if ((char **)nextFile[0x1d] == (char **)0x0) {\n          archiveFile = nextFile;\n        }\n        unaff_EBX = (**(code **)(archiveFile[1] + 0x1e8))(nextFile,fileStat);\n        if (unaff_EBX != 0) {\n          psuccess0 = *nextFile;\n          errMsg = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errMsg,psuccess0);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = archivePath;\n      *unaff_R13 = tempFile;\n      unaff_R13[2] = 0;\n      success = bfd_check_format(nextFile,1);\n      if (success != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archiveFile = (char **)bfd_openw(archivePath,*(undefined8 *)nextFile[1]);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,nextFile,0,errMsg);\n      archiveFile = (char **)bfd_openw(archivePath,writeMode);\n      if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)nextFile[0x1d];\n      if ((char **)nextFile[0x1d] == (char **)0x0) {\n        ppcVar3 = nextFile;\n      }\n      archType = (**(code **)(ppcVar3[1] + 0x1e8))(nextFile);\n      fileSize = param_19;\n      if (archType == 0) {\n        if (param_19 < 0) {\n          FUN_001125fa(nextFile);\n          errMsg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(errMsg);\n        }\n        else {\n          archType = bfd_seek(nextFile,0,0);\n          if (archType == 0) {\n            if (DAT_001279c9 != '\\0') {\n              psuccess0 = *archiveFile;\n              errMsg = FUN_001125fa(nextFile);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,errMsg,psuccess0);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*archiveFile,param_18 | 0x100);\n                free(buffer);\n                success = bfd_close_all_done(archiveFile);\n                archiveFile = nextFile;\n                if (success == '\\0') {\n                  FUN_001126c0(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (fileSize < 0x2001) {\n                lVar14 = fileSize;\n              }\n              lVar5 = bfd_bread(buffer,lVar14,nextFile);\n              ppcVar3 = nextFile;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(buffer,lVar14,archiveFile), ppcVar3 = archiveFile, lVar14 != lVar5))\n              break;\n              fileSize = fileSize - lVar14;\n            }\n            FUN_001126c0(0,ppcVar3,0,0);\n            free(buffer);\n          }\n          else {\n            errMsg = FUN_001125fa(nextFile);\n            FUN_0011a110(errMsg);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,nextFile,0,0);\n      }\n      success = bfd_close_all_done(archiveFile);\n      if (success == '\\0') {\n        FUN_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *outputFile = 0;\n    buffer = (void *)xstrdup(*inputFile);\n    if (DAT_00127a20 == 0) {\n      bfdClose = bfd_close;\n    }\n    else {\n      bfdClose = bfd_close_all_done;\n    }\n    success = (*bfdClose)(inputFile);\n    if (success == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*tempPath);\n    success = bfd_close(tempPath);\n    if (success == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    tempFile = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = tempFile;\n  }\n  rmdir(tempDir);\n  free(tempDir);\n  return;\n}\n\n",
            "called": [
                "bfd_bread",
                "dcgettext",
                "bfd_seek",
                "bfd_bwrite",
                "FUN_001126c0",
                "FUN_0011a350",
                "xmalloc",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "bfd_close",
                "FUN_00114e50",
                "rmdir",
                "bfd_check_format",
                "free",
                "printf",
                "bfd_close",
                "bfd_close_all_done",
                "FUN_00114b84",
                "bfd_close_all_done",
                "FUN_00104ea2",
                "concat",
                "chmod",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_openr",
                "unlink",
                "bfd_openw",
                "xstrdup",
                "__errno_location",
                "FUN_0011a110",
                "strerror",
                "stat",
                "FUN_001125fa",
                "FUN_0011a0e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_file_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_store_data_00113ce0",
                "param_1": "input_value",
                "param_2": "secondary_value",
                "param_5": "callback_function",
                "lVar1": "allocated_memory",
                "plVar2": "allocated_data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nallocate_and_store_data_00113ce0(long input_value,long secondary_value,undefined param_3,undefined8 param_4,undefined8 callback_function)\n\n{\n  long allocated_memory;\n  long *allocated_data;\n  undefined result [16];\n  \n  if (input_value != 0) {\n    allocated_memory = FUN_00112904(0xd,0);\n    if (allocated_memory != 0) {\n      allocated_data = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_data + 0x11) = 0;\n      *allocated_data = input_value;\n      *(undefined4 *)((long)allocated_data + 0x14) = 0;\n      allocated_data[1] = secondary_value;\n      *(undefined *)(allocated_data + 2) = param_3;\n      *(long **)(allocated_memory + 0x10) = allocated_data;\n      goto LAB_00113d2f;\n    }\n  }\n  allocated_memory = 0;\nLAB_00113d2f:\n  result._8_8_ = callback_function;\n  result._0_8_ = allocated_memory;\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "iVar1": "errorFlag",
                "uVar2": "errorMessage",
                "uVar3": "translatedErrorMessage",
                "sVar4": "bytesRead",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startPosition",
                "unaff_R14": "endPosition"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long startPosition;\n  long endPosition;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + startPosition),1,endPosition - startPosition,\n                  file);\n    errorFlag = ferror(file);\n    if (errorFlag != 0) {\n      translatedErrorMessage = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,translatedErrorMessage);\n    }\n    startPosition = startPosition + bytesRead;\n    errorFlag = feof(file);\n    if (errorFlag != 0) break;\n    if (startPosition == endPosition) {\n      endPosition = startPosition * 2;\n      translatedErrorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),endPosition);\n      *(undefined8 *)(buffer + 0x20) = translatedErrorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = startPosition;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00119dd0",
                "ferror",
                "FUN_00114dc7",
                "xrealloc",
                "feof",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "initialize_bfd_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "format1",
                "cVar2": "result",
                "iVar3": "count",
                "uVar4": "format2",
                "uVar5": "format3",
                "__format": "formatString",
                "lVar6": "memorySize",
                "uVar7": "headerData",
                "lVar8": "reallocPtr"
            },
            "code": "\nundefined4 initializeBFD_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 format1;\n  char result;\n  int count;\n  undefined8 format2;\n  undefined8 format3;\n  char *formatString;\n  long memorySize;\n  undefined8 headerData;\n  long reallocPtr;\n  \n  count = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = count;\n  if ((ulong)data[2] < (ulong)((long)count * 0x60)) {\n    memorySize = 0x3000;\n    if (0x3f < count) {\n      memorySize = (long)count * 0xc0;\n    }\n    reallocPtr = xrealloc(data[3]);\n    data[3] = reallocPtr;\n    memset((void *)(reallocPtr + data[2]),0,memorySize - data[2]);\n    data[2] = memorySize;\n  }\n  format1 = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  format2 = FUN_00114e00(format1);\n  format3 = FUN_00114e00(*(undefined4 *)(header + 2));\n  headerData = *header;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerData,format3,format2);\n  memorySize = bfd_openw(*data,*header);\n  if (memorySize == 0) {\n    FUN_0011a110(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    count = 2;\n    result = bfd_set_format(memorySize,1);\n    if (result == '\\0') {\n      count = bfd_get_error();\n      if (count != 5) {\n        FUN_0011a110(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(memorySize + 8) + 0x2a0))(memorySize,count,0);\n        if (result != '\\0') {\n          headerData = bfd_printable_arch_mach(count,0);\n          printf(\"  %s\\n\",headerData);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(count - 2)) =\n               1;\n        }\n        count = count + 1;\n      } while (count != 0x57);\n    }\n    bfd_close_all_done(memorySize);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "bfd_printable_arch_mach",
                "FUN_00114e00",
                "bfd_set_format",
                "printf",
                "xrealloc",
                "FUN_001053d5",
                "memset",
                "bfd_close_all_done",
                "bfd_openw",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "initialize_bfd_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_and_set_permissions_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "permissionData",
                "_Var3": "seekResult",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "originalError",
                "__fd": "destinationFileDescriptor",
                "iVar2": "readResult",
                "piVar6": "errorLocation",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFileAndSetPermissions_00115a90(int sourceFileDescriptor,char *destinationFilePath,long permissionData)\n\n{\n  int originalError;\n  int destinationFileDescriptor;\n  int readResult;\n  __off_t seekResult;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errorLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (seekResult = lseek(sourceFileDescriptor,0,0), seekResult == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesRead = FUN_00108237();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(sourceFileDescriptor,buffer,0x2000);\n      readResult = (int)bytesRead;\n      if (readResult < 1) {\n        errorLocation = __errno_location();\n        originalError = *errorLocation;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(permissionData + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readResult != 0) {\n          *errorLocation = originalError;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)readResult);\n    } while (bytesWritten == (long)readResult);\n    errorLocation = __errno_location();\n    readResult = *errorLocation;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errorLocation = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108237",
                "close",
                "fchmod",
                "write",
                "read",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_set_permissions_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldCopy",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldCopy;\n  ulong errorCode;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(errorMessage);\n  unlink(filePath);\n  if (shouldCopy != '\\0') {\n    FUN_0011a350();\n  }\n  result._0_8_ = errorCode & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_0011a350",
                "FUN_00119ed0",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 277067,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}