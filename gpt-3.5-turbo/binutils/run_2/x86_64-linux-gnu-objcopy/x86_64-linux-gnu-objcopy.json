{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "initialize_memory_and_set_param_00113dfe",
                "param_1": "memorySize",
                "param_2": "paramValue",
                "lVar1": "memoryAddress"
            },
            "code": "\nvoid initializeMemoryAndSetParam_00113dfe(undefined4 memorySize,undefined paramValue)\n\n{\n  long memoryAddress;\n  \n  memoryAddress = initialize_memory_00112904(3,memorySize);\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 0x10) = paramValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_set_param_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_to_buffer_0010ab4d",
                "param_1": "bufferPointer",
                "param_2": "string",
                "param_3": "unusedPointer",
                "param_4": "unusedValue",
                "uVar1": "bufferAddress",
                "lVar2": "bufferPointerCopy",
                "auVar3": "returnValue",
                "sVar4": "stringLength",
                "pcVar5": "buffer",
                "sVar6": "bufferLength",
                "auVar7": "updatedReturnValue"
            },
            "code": "\nundefined  [16] appendToBuffer_0010ab4d(long bufferPointer,char *string,undefined8 unusedPointer,undefined8 unusedValue)\n\n{\n  ulong bufferAddress;\n  long bufferPointerCopy;\n  undefined returnValue [16];\n  size_t stringLength;\n  char *buffer;\n  size_t bufferLength;\n  undefined updatedReturnValue [16];\n  \n  bufferAddress = *(ulong *)(bufferPointer + 0x60);\n  if ((bufferAddress != 0) && (*(long *)(bufferAddress + 0x20) != 0)) {\n    buffer = *(char **)(bufferAddress + 0x30);\n    stringLength = strlen(string);\n    if (buffer == (char *)0x0) {\n      buffer = (char *)xmalloc(stringLength + 3);\n      *buffer = '\\0';\n    }\n    else {\n      bufferLength = strlen(buffer);\n      buffer = (char *)xrealloc(buffer,stringLength + 4 + bufferLength);\n    }\n    stringLength = strlen(buffer);\n    sprintf(buffer + stringLength,\"%s::\",string);\n    bufferPointerCopy = *(long *)(bufferPointer + 0x60);\n    *(char **)(bufferPointerCopy + 0x30) = buffer;\n    updatedReturnValue._1_7_ = (undefined7)((ulong)bufferPointerCopy >> 8);\n    updatedReturnValue[0] = 1;\n    updatedReturnValue._8_8_ = unusedValue;\n    return updatedReturnValue;\n  }\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = bufferAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "xrealloc",
                "strlen",
                "xmalloc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_to_buffer_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_and_allocate_memory_0010c218",
                "param_1": "file_info",
                "param_2": "debug_name_type",
                "param_3": "current_file",
                "uVar1": "error_message",
                "lVar2": "memory_address",
                "pauVar3": "memory_pointer",
                "lVar4": "initialized_memory"
            },
            "code": "\n\n\nlong initialize_and_allocate_memory_0010c218(long file_info,long debug_name_type,long current_file)\n\n{\n  undefined8 error_message;\n  long memory_address;\n  undefined (*memory_pointer) [16];\n  long initialized_memory;\n  \n  if ((debug_name_type != 0) && (current_file != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      memory_address = initialize_memory_00112904(0x16,0);\n      if (memory_address != 0) {\n        memory_pointer = (undefined (*) [16])xmalloc(0x10);\n        initialized_memory = *(long *)(file_info + 0x10);\n        *memory_pointer = ZEXT816(0);\n        *(long *)(*memory_pointer + 8) = current_file;\n        *(undefined (**) [16])(memory_address + 0x10) = memory_pointer;\n        initialized_memory = initialize_memory_00112925(initialized_memory + 0x10,debug_name_type,0,3);\n        if (initialized_memory != 0) {\n          *(long *)(initialized_memory + 0x20) = memory_address;\n          *(long *)*memory_pointer = initialized_memory;\n          return memory_address;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c2d2",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = initialize_hash_table_00113f20();\n  DAT_001279f0 = initialize_hash_table_00113f20();\n  DAT_00127a08 = initialize_hash_table_00113f20();\n  DAT_001279e8 = initialize_hash_table_00113f20();\n  DAT_001279e0 = initialize_hash_table_00113f20();\n  DAT_001279d8 = initialize_hash_table_00113f20();\n  DAT_001279d0 = initialize_hash_table_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_callbacks_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_entry_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        find_and_modify_entry_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        find_and_modify_entry_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    process_bfd_header_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = extract_and_compare_string_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = extract_and_compare_string_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)extract_filepath_segments_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_files_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_set_file_time_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = check_file_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)extract_filepath_segments_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    process_files_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_set_file_time_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_entry_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_and_modify_entry_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = parse_param_string_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_and_store_file_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_and_null_terminate_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_and_null_terminate_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_and_null_terminate_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_and_modify_entry_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = parse_param_string_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    process_file_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    process_file_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_and_modify_entry_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    process_file_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    process_file_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_and_modify_entry_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_and_modify_entry_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_and_modify_entry_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    process_file_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    process_file_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = parse_param_string_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_and_store_file_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    process_file_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "setlocale",
                "strncpy",
                "FUN_001054af",
                "FUN_00119940",
                "strcasecmp",
                "htab_create_alloc",
                "fopen",
                "FUN_00114cf0",
                "FUN_00114d60",
                "__errno_location",
                "FUN_00108800",
                "strchr",
                "FUN_00114c20",
                "FUN_00108d9a",
                "strerror",
                "textdomain",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "xexit",
                "strcmp",
                "FUN_00113fb0",
                "FUN_00114460",
                "strlen",
                "fprintf",
                "FUN_00108c86",
                "htab_elements",
                "FUN_00108a2a",
                "FUN_00113fe0",
                "xstrdup",
                "unlink_if_ordinary",
                "memcpy",
                "FUN_00114690",
                "strtoul",
                "xcalloc",
                "FUN_00119970",
                "stat",
                "bfd_set_error_program_name",
                "getc",
                "FUN_00113f50",
                "close",
                "free",
                "xmalloc",
                "bfd_set_default_target",
                "malloc",
                "htab_find_slot",
                "FUN_00108916",
                "strncasecmp",
                "memmove",
                "fclose",
                "ftell",
                "xrealloc",
                "FUN_00113f20",
                "getopt_long",
                "FUN_00119ed0",
                "FUN_001199d0",
                "strcpy",
                "FUN_00119dd0",
                "ferror",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00115970",
                "mkstemp",
                "xmalloc_set_program_name",
                "bfd_init",
                "strtol",
                "dup",
                "bfd_scan_arch",
                "bindtextdomain",
                "free",
                "FUN_00108898",
                "FUN_0011a390",
                "filename_cmp",
                "bfd_get_error",
                "fread",
                "fseek"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "initialize_debug_block_0010be88",
                "param_1": "blockPointer",
                "param_2": "dataPointer",
                "param_3": "unusedParameter",
                "param_4": "returnAddress",
                "puVar1": "currentPointer",
                "uVar2": "errorMessage",
                "puVar3": "allocatedMemory",
                "puVar4": "nextPointer",
                "puVar6": "lastPointer",
                "puVar7": "memoryIterator",
                "bVar8": "byteVariable",
                "auVar9": "returnValue",
                "lVar5": "blockValue"
            },
            "code": "\n\n\nundefined  [16] initializeDebugBlock_0010be88(long blockPointer,undefined8 dataPointer,undefined8 unusedParameter,undefined8 returnAddress)\n\n{\n  undefined8 *currentPointer;\n  undefined8 errorMessage;\n  undefined4 *allocatedMemory;\n  undefined8 *nextPointer;\n  long blockValue;\n  undefined8 *lastPointer;\n  undefined4 *memoryIterator;\n  byte byteVariable;\n  undefined returnValue [16];\n  \n  byteVariable = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    errorMessage = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    allocatedMemory = (undefined4 *)xmalloc(0x30);\n    memoryIterator = allocatedMemory;\n    for (blockValue = 0xc; blockValue != 0; blockValue = blockValue + -1) {\n      *memoryIterator = 0;\n      memoryIterator = memoryIterator + (ulong)byteVariable * -2 + 1;\n    }\n    blockValue = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(allocatedMemory + 6) = dataPointer;\n    *(undefined8 *)(allocatedMemory + 8) = 0xffffffffffffffff;\n    *(long *)(allocatedMemory + 2) = blockValue;\n    currentPointer = *(undefined8 **)(blockValue + 0x10);\n    lastPointer = (undefined8 *)(blockValue + 0x10);\n    while (nextPointer = currentPointer, nextPointer != (undefined8 *)0x0) {\n      lastPointer = nextPointer;\n      currentPointer = (undefined8 *)*nextPointer;\n    }\n    *lastPointer = allocatedMemory;\n    errorMessage = 1;\n    *(undefined4 **)(blockPointer + 0x20) = allocatedMemory;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_00115dc0",
                "FUN_0011378f",
                "FUN_001083b7",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011a110",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_formatted_string_0010ba08",
                "param_1": "pointers",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "fieldSize",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "fieldCount",
                "lVar3": "length",
                "__s": "extractedPointer",
                "sVar4": "sourceStrLength",
                "sVar5": "fieldNameLength",
                "sVar6": "extractedPointerLength",
                "__s_00": "formattedString",
                "uVar7": "errorString",
                "uVar8": "returnValue",
                "pcVar9": "flaggedStr",
                "print_error_00119ed0": "printWarning"
            },
            "code": "\nundefined8\ngenerateFormattedString_0010ba08(undefined8 *pointers,char *fieldName,undefined8 param3,ulong fieldSize,int param5)\n\n{\n  char flag;\n  int fieldCount;\n  long length;\n  char *extractedPointer;\n  size_t sourceStrLength;\n  size_t fieldNameLength;\n  size_t extractedPointerLength;\n  char *formattedString;\n  undefined8 errorString;\n  undefined8 returnValue;\n  char *flaggedStr;\n  \n  flag = *(char *)(pointers[0xc] + 0x1c);\n  fieldCount = *(int *)(pointers[0xc] + 0x18);\n  extractedPointer = (char *)extract_pointers_00109b2f();\n  if (*(char **)(pointers[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    sourceStrLength = strlen(*(char **)(pointers[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    extractedPointerLength = strlen(extractedPointer);\n    formattedString = (char *)xmalloc(sourceStrLength + 0x32 + fieldNameLength + extractedPointerLength);\n    if (param5 == 1) {\n      flaggedStr = \"/1\";\n    }\n    else {\n      flaggedStr = \"/0\";\n      if ((param5 != 2) && (flaggedStr = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(fieldCount * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*pointers;\n      errorString = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      printWarning(errorString,returnValue,fieldName);\n    }\n    sprintf(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(pointers[0xc] + 0x20),fieldName,flaggedStr,extractedPointer,\n            param3,fieldSize);\n    free(*(void **)(pointers[0xc] + 0x20));\n    length = pointers[0xc];\n    *(char **)(length + 0x20) = formattedString;\n    if (flag != '\\0') {\n      *(undefined *)(length + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)length >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "dcgettext",
                "xmalloc",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "format_and_store_data_0010aa53",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "cVar1": "character",
                "__s": "pointerString",
                "sVar5": "stringLength",
                "pcVar6": "formattedData",
                "cVar3": "modeCharacter",
                "lVar2": "structurePointer",
                "uVar8": "success",
                "uVar9": "counter",
                "uVar10": "counter2",
                "uVar4": "loopCounter",
                "lVar7": "reallocPointer"
            },
            "code": "\nundefined8 formatAndStoreData_0010aa53(long dataPointer,undefined8 value,char flag,int mode)\n\n{\n  char character;\n  long structurePointer;\n  char modeCharacter;\n  uint loopCounter;\n  char *pointerString;\n  size_t stringLength;\n  char *formattedData;\n  long reallocPointer;\n  undefined8 success;\n  ulong counter;\n  ulong counter2;\n  \n  character = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  pointerString = (char *)extract_pointers_00109b2f();\n  stringLength = strlen(pointerString);\n  formattedData = (char *)xmalloc(stringLength + 0x19);\n  *formattedData = flag + '0';\n  if (mode == 1) {\n    modeCharacter = '1';\n  }\n  else {\n    modeCharacter = '0';\n    if ((mode != 2) && (modeCharacter = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedData[1] = modeCharacter;\n  sprintf(formattedData + 2,\"%ld,%s;\",value);\n  free(pointerString);\n  structurePointer = *(long *)(dataPointer + 0x60);\n  success = 0;\n  if ((structurePointer != 0) && (*(long *)(structurePointer + 0x20) != 0)) {\n    structurePointer = *(long *)(structurePointer + 0x28);\n    counter2 = 0;\n    if (structurePointer != 0) {\n      loopCounter = 0;\n      do {\n        counter = (ulong)loopCounter;\n        counter2 = (ulong)loopCounter;\n        loopCounter = loopCounter + 1;\n      } while (*(long *)(structurePointer + counter * 8) != 0);\n    }\n    reallocPointer = xrealloc(structurePointer,(ulong)((int)counter2 + 2) << 3);\n    *(char **)(reallocPointer + counter2 * 8) = formattedData;\n    *(undefined8 *)(reallocPointer + (ulong)((int)counter2 + 1) * 8) = 0;\n    structurePointer = *(long *)(dataPointer + 0x60);\n    *(long *)(structurePointer + 0x28) = reallocPointer;\n    if (character != '\\0') {\n      *(undefined *)(structurePointer + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_store_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "debug_info_function_0011173a",
                "param_2": "debug_info",
                "param_3": "opcode",
                "param_5": "address",
                "param_6": "name",
                "cVar1": "char_var1",
                "bVar2": "byte_var2",
                "__ptr": "ptr",
                "cVar3": "char_var3",
                "uVar4": "undefined_var4",
                "iVar5": "int_var5",
                "puVar6": "ptr_var6",
                "plVar7": "long_var7",
                "pcVar8": "char_var8",
                "uVar9": "undefined_var9",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lVar12": "long_var12",
                "pplVar13": "ptr_ptr_var13",
                "uVar14": "ulong_var14",
                "uVar15": "ulong_var15",
                "pcVar16": "char_var16",
                "uVar17": "uint_var17",
                "dVar19": "double_var19",
                "local_48": "local_ptr48",
                "local_40": "local_ptr40"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined debug_info_function_0011173a(undefined8 param_1,long *debug_info,int opcode,int param_4,ulong address,\n                      char *name)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var3;\n  undefined undefined_var4;\n  int int_var5;\n  undefined8 *ptr_var6;\n  long *long_var7;\n  char *char_var8;\n  undefined8 undefined_var9;\n  long long_var10;\n  long long_var11;\n  long long_var12;\n  long **ptr_ptr_var13;\n  ulong ulong_var14;\n  ulong ulong_var15;\n  char *char_var16;\n  uint uint_var17;\n  long **pplVar18;\n  double double_var19;\n  char *local_ptr48;\n  long **local_ptr40 [2];\n  \n  if (debug_info[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debug_info[5] == address)) goto LAB_00111a06;\n    char_var3 = initialize_debug_info_0010bbd3(param_1);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debug_info + 0x44) = 0;\n    *(undefined4 *)(debug_info + 8) = 0;\n    debug_info[9] = debug_info[4];\n    if (*(char *)(debug_info + 1) == '\\0') {\n      debug_info[6] = debug_info[5];\n    }\n    *(undefined4 *)(debug_info + 0x10) = 1;\n    ptr_var6 = (undefined8 *)xmalloc(8);\n    debug_info[0x11] = (long)ptr_var6;\n    *ptr_var6 = 0;\n    debug_info[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefined_var4 = debug_start_source_00108f08(param_1,name);\n    return undefined_var4;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      int_var5 = strcmp(name,\"gcc2_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(debug_info + 8) = 2;\n        return 1;\n      }\n      int_var5 = strcmp(name,\"gcc_compiled.\");\n      if (int_var5 == 0) {\n        *(undefined4 *)(debug_info + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debug_info + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debug_info + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debug_info + 1) != '\\0') {\n            address = address + debug_info[7];\n          }\n          char_var3 = deallocate_memory_0010c1c6(param_1,debug_info);\n          if (char_var3 != '\\0') {\n            char_var3 = end_debugging_function_0010be1a(param_1,address);\n            if (char_var3 != '\\0') {\n              *(undefined *)(debug_info + 0xc) = 0;\n              debug_info[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debug_info + 0xc) != '\\0') &&\n           ((address < (ulong)debug_info[0xd] || (debug_info[0xd] == 0xffffffffffffffff)))) {\n          debug_info[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debug_info + 0xc) != '\\0') {\n          ulong_var14 = address;\n          if (((*name != '\\0') && (ulong_var15 = debug_info[0xd], ulong_var15 != 0xffffffffffffffff)) &&\n             (ulong_var14 = ulong_var15, address < ulong_var15)) {\n            ulong_var14 = address;\n          }\n          char_var3 = deallocate_memory_0010c1c6(param_1,debug_info);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          char_var3 = end_debugging_function_0010be1a(param_1,ulong_var14);\n          if (char_var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debug_info + 0xc) = 0;\n          debug_info[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debug_info[4];\n        if (ptr == (void *)0x0) {\n          long_var12 = xstrdup(name);\n          debug_info[4] = long_var12;\n        }\n        else {\n          if (*name == '/') {\n            long_var12 = xstrdup(name);\n          }\n          else {\n            long_var12 = concat(ptr,name,0);\n          }\n          debug_info[4] = long_var12;\n          free(ptr);\n        }\n        debug_info[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          long_var12 = 0;\n          if (*(char *)(debug_info + 0xc) != '\\0') {\n            long_var12 = debug_info[7];\n          }\n          undefined_var4 = update_record_line_0010bf86(param_1,(long)param_4,long_var12 + address);\n          return undefined_var4;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        long_var7 = (long *)xmalloc();\n        int_var5 = *(int *)(debug_info + 0x10);\n        long_var10 = debug_info[10];\n        long_var11 = debug_info[0xb];\n        long_var7[5] = 0;\n        long_var12 = debug_info[0x11];\n        *(int *)(long_var7 + 4) = int_var5;\n        uint_var17 = int_var5 + 1;\n        *(uint *)(debug_info + 0x10) = uint_var17;\n        *long_var7 = long_var11;\n        long_var7[1] = long_var10;\n        long_var7[2] = (long)name;\n        long_var7[3] = address;\n        debug_info[10] = (long)long_var7;\n        debug_info[0xb] = (long)long_var7;\n        long_var12 = xrealloc(long_var12,(ulong)uint_var17 << 3);\n        uint_var17 = *(uint *)(long_var7 + 4);\n        debug_info[0x11] = long_var12;\n        *(undefined8 *)(long_var12 + (ulong)uint_var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_var8 = strchr(name,0x3a);\n    if ((char_var8 != (char *)0x0) && ((char_var8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debug_info + 0xc) != '\\0') {\n        ulong_var14 = debug_info[0xd];\n        ulong_var15 = address;\n        if ((ulong_var14 != 0xffffffffffffffff) && (ulong_var15 = ulong_var14, address < ulong_var14)) {\n          ulong_var15 = address;\n        }\n        char_var3 = deallocate_memory_0010c1c6(param_1,debug_info);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        char_var3 = end_debugging_function_0010be1a(param_1,ulong_var15);\n        if (char_var3 == '\\0') {\n          return 0;\n        }\n        debug_info[0xd] = -1;\n      }\n      if (*(char *)(debug_info + 1) != '\\0') {\n        debug_info[7] = address;\n      }\n      *(undefined *)(debug_info + 0xc) = 1;\n    }\n    local_ptr48 = strchr(name,0x3a);\n    if (local_ptr48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_ptr48[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      char_var3 = name[1];\n      char_var16 = \"eh_throw\";\n      if (char_var3 != 'e') {\n        if (char_var3 < 'f') {\n          if ((char_var3 != 'X') && (char_var3 != '_')) {\nLAB_00111d1a:\n            undefined_var9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_00108fe8(name,undefined_var9);\n          }\n        }\n        else {\n          char_var16 = \"this\";\n          if (char_var3 == 't') goto LAB_00111d62;\n          if (char_var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_var16 = (char *)0x0;\n      if ((name != local_ptr48) && ((*name != ' ' || (local_ptr48 != name + 1)))) {\n        char_var16 = (char *)copy_and_null_terminate_00109a0b(name,(int)local_ptr48 - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_ptr48[1];\n    char_var8 = local_ptr48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_var8 = local_ptr48 + 2;\n    char_var3 = local_ptr48[1];\n    switch(char_var3) {\n    case 'C':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      char_var8 = \"debug_record_label: not implemented\";\n      if (long_var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      char_var3 = record_debug_function_0010bc80(param_1,char_var16,long_var12,char_var3 == 'F',address);\n      if (char_var3 != '\\0') {\n        do {\n          if (*local_ptr48 != ';') {\n            return 1;\n          }\n          local_ptr48 = local_ptr48 + 1;\n          long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_var16 == (char *)0x0) goto LAB_0011208f;\n      long_var10 = debug_info[3];\n      long_var7 = (long *)debug_info[2];\n      char_var3 = *(char *)(*(long *)(*debug_info + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        local_ptr48 = char_var8;\n        do {\n          if (*local_ptr48 != ';') {\n            return 1;\n          }\n          local_ptr48 = local_ptr48 + 1;\n          long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      break;\n    case 'S':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var3 = local_ptr48[2];\n      if (char_var3 == 't') {\n        char_var8 = local_ptr48 + 3;\n      }\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,char_var16,&local_ptr48,local_ptr40);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_var16 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(debug_info + 0x35);\n      long_var7 = (long *)parse_debug_tag_0010c6be(param_1,char_var16,long_var12);\n      if (long_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr40[0] != (long **)0x0) {\n        *local_ptr40[0] = long_var7;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      ptr_ptr_var13 = (long **)(debug_info + 0x34);\n      pplVar18 = (long **)debug_info[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_var8 = local_ptr48 + 3;\n      if (((local_ptr48[2] != '\\0') && (char_var8 = local_ptr48 + 4, local_ptr48[3] == 'n')) &&\n         (char_var8 = local_ptr48 + 5, char_var16 = local_ptr48 + 4, local_ptr48 = char_var8, *char_var16 == '0')) {\n        for (; char_var8 = local_ptr48, *local_ptr48 != '\\0'; local_ptr48 = local_ptr48 + 1) {\n          if (*local_ptr48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 4;\n      break;\n    case 'c':\n      if (local_ptr48[2] == '=') {\n        char_var8 = local_ptr48 + 4;\n        char_var3 = local_ptr48[3];\n        local_ptr48 = char_var8;\n        if (char_var3 == 'i') {\n          long_var12 = strtol(char_var8,(char **)0x0,10);\n          if (char_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var10 = initialize_or_print_error_00112996(param_1,char_var16,4);\n          if (long_var10 != 0) {\n            *(long *)(long_var10 + 0x20) = (long)(int)long_var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'r') {\n          double_var19 = strtod(char_var8,(char **)0x0);\n          if (char_var16 == (char *)0x0) {\n            return 0;\n          }\n          long_var12 = initialize_or_print_error_00112996(param_1,char_var16,5);\n          if (long_var12 != 0) {\n            *(double *)(long_var12 + 0x20) = double_var19;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var3 == 'e') {\n          long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n          if (long_var12 == 0) {\n            return 0;\n          }\n          char_var8 = local_ptr48;\n          if (*local_ptr48 == ',') {\n            long_var10 = strtol(local_ptr48,(char **)0x0,10);\n            if (char_var16 == (char *)0x0) {\n              return 0;\n            }\n            long_var11 = initialize_or_print_error_00112996(param_1,char_var16,6);\n            if (long_var11 != 0) {\n              long_var7 = (long *)xmalloc(0x10);\n              *long_var7 = long_var12;\n              long_var7[1] = (long)(int)long_var10;\n              *(long **)(long_var11 + 0x20) = long_var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_ptr48[2] == 'F') {\n        local_ptr48 = local_ptr48 + 3;\n        long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n        if (long_var12 == 0) {\n          return 0;\n        }\n        undefined_var9 = initialize_and_allocate_memory_00113ce0(long_var12,0,0);\n        long_var12 = initialize_or_get_memory_00113d3a(undefined_var9);\n      }\n      else {\n        local_ptr48 = char_var8;\n        long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      }\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 1;\n      break;\n    case 'r':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 5;\nLAB_001123e8:\n      char_var3 = initialize_or_get_debug_variable_0010c139(param_1,debug_info,char_var16,long_var12,undefined_var9,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,char_var16,&local_ptr48,local_ptr40);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_var16 == (char *)0x0) {\n        return 1;\n      }\n      long_var7 = (long *)initialize_and_allocate_memory_0010c218(param_1,char_var16,long_var12);\n      if (long_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr40[0] = long_var7;\n      return 1;\n    case 'v':\n      local_ptr48 = char_var8;\n      long_var12 = FUNC_0010ee3f(param_1,debug_info,0,&local_ptr48,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var9 = 3;\n    }\n    char_var3 = record_parameter_debug_0010bd62(param_1,char_var16,long_var12,undefined_var9,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    char_var3 = deallocate_memory_0010c1c6(param_1,debug_info);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    char_var3 = debug_end_block_0010bf20(param_1,debug_info[7] + debug_info[6] + address);\n    if (char_var3 == '\\0') {\n      return 0;\n    }\n    debug_info = debug_info + 0xe;\n    *(int *)debug_info = *(int *)debug_info + -1;\n    char_var8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debug_info) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        char_var8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_var8 = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var9 = dcgettext(0,char_var8,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var9);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        int_var5 = *(int *)(debug_info + 0x10);\n        *(uint *)(debug_info + 0x10) = int_var5 + 1U;\n        long_var12 = xrealloc(debug_info[0x11],(ulong)(int_var5 + 1U) << 3);\n        ptr_var6 = (undefined8 *)debug_info[0xb];\n        debug_info[0x11] = long_var12;\n        while( true ) {\n          if (ptr_var6 == (undefined8 *)0x0) {\n            undefined_var9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_00108fe8(name,undefined_var9);\n            *(undefined8 *)(debug_info[0x11] + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr_var6[3]) && (int_var5 = strcmp((char *)ptr_var6[2],name), int_var5 == 0))\n          break;\n          ptr_var6 = (undefined8 *)*ptr_var6;\n        }\n        *(undefined8 *)(long_var12 + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        long_var12 = debug_info[10];\n        if (long_var12 != 0) {\n          long_var10 = *(long *)(long_var12 + 8);\n          uint_var17 = *(uint *)(long_var12 + 0x20);\n          debug_info[10] = long_var10;\n          if ((uint_var17 < *(uint *)(debug_info + 0x10)) &&\n             (*(undefined8 *)(long_var12 + 0x28) = *(undefined8 *)(debug_info[0x11] + (ulong)uint_var17 * 8),\n             long_var10 != 0)) {\n            name = *(char **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debug_info[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(debug_info + 0xc) != '\\0') {\n      char_var3 = initialize_debug_block_0010be88(param_1,debug_info[7] + debug_info[6] + address);\n      if (char_var3 == '\\0') {\n        return 0;\n      }\n      char_var3 = deallocate_memory_0010c1c6(param_1,debug_info);\n      if (char_var3 != '\\0') {\n        *(int *)(debug_info + 0xe) = *(int *)(debug_info + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_var8 = \"N_LBRAC not within function\\n\";\n  }\n  char_var8 = (char *)dcgettext(0,char_var8,5);\n  fprintf(_stderr,char_var8);\n  return 0;\ncode_r0x00111cc7:\n  local_ptr48 = local_ptr48 + 2;\n  local_ptr48 = strchr(local_ptr48,0x3a);\n  if (local_ptr48 == (char *)0x0) {\n    char_var8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_ptr48 = char_var8;\n    print_bad_stab_error_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var3 != 't') {\n      return 1;\n    }\n    long_var7 = (long *)initialize_and_allocate_memory_0010c218(param_1,char_var16,long_var7);\n    if (long_var7 != (long *)0x0) {\n      if (local_ptr40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr40[0] = long_var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *char_var16) &&\n     (int_var5 = strcmp((char *)pplVar18[1],char_var16), int_var5 == 0)) {\n    pplVar18[3] = long_var7;\n    *ptr_ptr_var13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptr_ptr_var13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var9 = 1;\nLAB_001121c4:\n    char_var3 = initialize_debug_variable_0010c05d(param_1,char_var16,long_var12,undefined_var9,address);\njoined_r0x001123f8:\n    if (char_var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_var8 = *(char **)(*long_var7 + 8);\n  if ((char_var3 != '\\0') && (char_var3 == *char_var8)) {\n    char_var8 = char_var8 + 1;\n  }\n  if ((*char_var8 == *char_var16) && (int_var5 = strcmp(char_var8,char_var16), int_var5 == 0)) {\n    address = *(long *)(*long_var7 + 0x10) + *(long *)(*(long *)(*long_var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  long_var7 = long_var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strtod",
                "FUN_0010be88",
                "FUN_00108fe8",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "xmalloc",
                "FUN_00112996",
                "FUN_0010bf20",
                "xrealloc",
                "strchr",
                "FUN_0010c1c6",
                "concat",
                "FUN_0010c05d",
                "strcmp",
                "FUN_00108f08",
                "strlen",
                "fprintf",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_0010c139",
                "strtol",
                "FUN_00109a0b",
                "xstrdup",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "free",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010bc80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_info_function_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_data_entry_00115dc0",
                "param_1": "entry",
                "param_2": "data",
                "param_3": "param",
                "cVar1": "checkResult",
                "iVar2": "error",
                "uVar3": "relocOffset",
                "lVar4": "result",
                "puVar5": "relocData",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "puVar7": "currentReloc",
                "puVar8": "nextReloc",
                "uVar9": "index",
                "uStack_38": "stackData",
                "print_error_message_001126c0": "printErrorMessage",
                "find_and_modify_entry_00114190": "findAndModifyEntry",
                "bfd_get_reloc_upper_bound": "getRelocUpperBound",
                "bfd_get_error": "getBfdError",
                "print_error_0011a110": "printError",
                "xexit": "exit",
                "bfd_alloc": "allocateMemory",
                "bfd_canonicalize_reloc": "canonicalizeReloc",
                "dcgettext": "getTranslation",
                "check_data_entry_00115f50": "checkDataEntry",
                "check_match_00115d70": "checkMatch"
            },
            "code": "\nvoid processDataEntry_00115dc0(undefined8 entry,undefined8 *data,long param)\n\n{\n  char checkResult;\n  int error;\n  undefined8 relocOffset;\n  long result;\n  undefined8 *relocData;\n  ulong relocCount;\n  code *jumptable;\n  undefined8 *currentReloc;\n  undefined8 *nextReloc;\n  ulong index;\n  undefined8 stackData;\n  \n  checkResult = checkDataEntry(entry,data,0);\n  if (checkResult != '\\0') {\n    return;\n  }\n  relocOffset = data[0xc];\n  if ((((*(byte *)(param + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (result = findAndModifyEntry(*data,0,0x100), result == 0)) {\n    result = bfd_get_reloc_upper_bound(entry,data);\n    if (result < 0) {\n      if ((result != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a20 = 1;\n        relocOffset = 0;\nLAB_00108315:\n        printErrorMessage(0,entry,data,relocOffset,stackData);\n        return;\n      }\n    }\n    else if (result != 0) {\n      relocData = (undefined8 *)data[0xe];\n      if (relocData == (undefined8 *)0x0) {\n        relocData = (undefined8 *)bfd_alloc(param);\n        if (relocData == (undefined8 *)0x0) {\n          printError(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(entry,data,relocData,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          relocOffset = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(data + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        currentReloc = relocData;\n        for (index = 0; index != relocCount; index = index + 1) {\n          nextReloc = currentReloc;\n          if (((*(long **)relocData[index] != (long *)0x0) &&\n              (result = **(long **)relocData[index], result != 0)) &&\n             (checkResult = checkMatch(*(undefined8 *)(result + 8),DAT_00127a08), checkResult != '\\0')) {\n            nextReloc = currentReloc + 1;\n            *currentReloc = relocData[index];\n          }\n          currentReloc = nextReloc;\n        }\n        *currentReloc = 0;\n        relocCount = (long)currentReloc - (long)relocData >> 3;\n      }\n      jumptable = *(code **)(*(long *)(param + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocData = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocData = (undefined8 *)0x0;\n  jumptable = *(code **)(*(long *)(param + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(param,relocOffset,relocData,relocCount);\n  return;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "FUN_001082df",
                "bfd_alloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00114190",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_entry_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_count_0010d559",
                "param_1": "params",
                "param_2": "string_ptr",
                "param_3": "count_ptr",
                "bVar1": "byte_var1",
                "pbVar2": "byte_ptr",
                "cVar3": "char_var",
                "uVar4": "uint_var",
                "iVar5": "int_var",
                "ppcVar6": "str_array_ptr",
                "sVar7": "size",
                "lVar8": "long_var",
                "plVar9": "long_ptr",
                "pcVar10": "char_ptr",
                "__s1": "string_ptr1",
                "__ptr": "ptr",
                "pbVar11": "byte_ptr1",
                "uVar12": "uint_var1",
                "__nptr": "byte_ptr2",
                "local_64": "local_num",
                "local_40": "local_str_array"
            },
            "code": "\nundefined8 parse_and_count_0010d559(undefined8 *params,byte **string_ptr,long *count_ptr)\n\n{\n  byte byte_var1;\n  byte *byte_ptr;\n  char char_var;\n  uint uint_var;\n  int int_var;\n  char **str_array_ptr;\n  size_t size;\n  long long_var;\n  long *long_ptr;\n  char *char_ptr;\n  char *string_ptr1;\n  void *ptr;\n  byte *byte_ptr1;\n  undefined8 uint_var1;\n  byte *byte_ptr2;\n  int local_num;\n  char *local_str_array [2];\n  \n  byte_ptr = *string_ptr;\n  byte_var1 = byte_ptr[1];\n  if ((char)byte_var1 < ':') {\n    if ((char)byte_var1 < '1') goto LAB_0010d5d8;\n    local_num = (char)byte_var1 + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *string_ptr = byte_ptr + 1;\n    }\n    byte_ptr1 = *string_ptr + 2;\n  }\n  else {\n    if (((byte_var1 != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr2 = byte_ptr + 2;\n    long_var = strtol((char *)byte_ptr2,(char **)0x0,10);\n    local_num = (int)long_var;\n    while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0) {\n      byte_ptr2 = byte_ptr2 + 1;\n    }\n    byte_ptr1 = byte_ptr2 + 1;\n    if (*byte_ptr2 != 0x5f) goto LAB_0010d5d8;\n  }\n  *string_ptr = byte_ptr1;\n  str_array_ptr = (char **)0x0;\n  if (count_ptr != (long *)0x0) {\n    str_array_ptr = local_str_array;\n  }\n  long_var = 0;\n  while( true ) {\n    while( true ) {\n      local_num = local_num + -1;\n      if (local_num == -1) {\n        if (count_ptr != (long *)0x0) {\n          *count_ptr = long_var;\n        }\n        return 1;\n      }\n      if (**string_ptr == 0x5f) {\n        *string_ptr = *string_ptr + 1;\n      }\n      if (**string_ptr != 0x74) break;\n      char_var = parse_and_process_data_0010d21c(params,string_ptr,str_array_ptr);\n      char_ptr = local_str_array[0];\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (count_ptr != (long *)0x0) {\n        size = strlen(local_str_array[0]);\n        long_var = find_and_free_memory_0010afd5(*params,params[1],char_ptr,size & 0xffffffff,9);\n        free(char_ptr);\n        if (long_var == 0) {\n          return 0;\n        }\n      }\n    }\n    uint_var = parse_number_00108e76(string_ptr);\n    size = strlen((char *)*string_ptr);\n    if (size < uint_var) break;\n    if (count_ptr != (long *)0x0) {\n      if ((long_var != 0) && (long_ptr = (long *)extract_debug_info_00113b1e(long_var), long_ptr != (long *)0x0)) {\n        char_ptr = (char *)copy_and_null_terminate_00109a0b(*string_ptr,uint_var);\n        for (; long_var = *long_ptr, long_var != 0; long_ptr = long_ptr + 1) {\n          long_var = *(long *)(long_var + 8);\n          if (long_var == 0) {\n            free(char_ptr);\n            return 0;\n          }\n          string_ptr1 = (char *)extract_data_001129f4(long_var);\n          if ((string_ptr1 != (char *)0x0) && (int_var = strcmp(string_ptr1,char_ptr), int_var == 0)) break;\n        }\n        free(char_ptr);\n        if (long_var != 0) goto LAB_0010d7ad;\n      }\n      uint_var1 = 9;\n      if (local_num == 0) {\n        ptr = (void *)copy_and_null_terminate_00109a0b(*string_ptr,uint_var);\n        long_var = find_named_type_0010914e(*params,ptr);\n        free(ptr);\n        if (long_var != 0) goto LAB_0010d7ad;\n        uint_var1 = 0;\n      }\n      long_var = find_and_free_memory_0010afd5(*params,params[1],*string_ptr,uint_var,uint_var1);\n      if (long_var == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *string_ptr = *string_ptr + uint_var;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00108e76",
                "strlen",
                "FUN_00113b1e",
                "free",
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_count_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_00119e70",
                "param_1": "errorMessage",
                "param_2": "args"
            },
            "code": "\n\n\nvoid printError_00119e70(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_001275e0);\n  vfprintf(_stderr,errorMessage,args);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_number_00108e76",
                "param_1": "data",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint parseNumber_00108e76(byte **data)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **data;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *data = *data + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "initialize_hash_function_0010bb52",
                "param_1": "inputValue",
                "param_2": "allocateParam",
                "param_3": "newFuncParam",
                "lVar1": "hashValue"
            },
            "code": "\nlong initializeHashFunction_0010bb52(long inputValue,undefined8 allocateParam,undefined8 newFuncParam)\n\n{\n  long hashValue;\n  \n  if (((inputValue != 0) || (inputValue = bfd_hash_allocate(allocateParam,0x30), inputValue != 0)) &&\n     (hashValue = bfd_hash_newfunc(inputValue,allocateParam,newFuncParam), hashValue != 0)) {\n    *(undefined8 *)(hashValue + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hashValue + 0x18) = 0;\n    *(undefined4 *)(hashValue + 0x28) = 0;\n    return hashValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "initialize_hash_function_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_string_and_process_thunk_0010e439",
                "param_1": "objectPtr",
                "param_2": "newString",
                "process_string_0010e2f0": "processString"
            },
            "code": "\nvoid setStringAndProcess_thunk_0010e439(long objectPtr,undefined8 newString)\n\n{\n  *(undefined8 *)(objectPtr + 0x210) = newString;\n  processString(objectPtr,0x84,0,0,newString);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_string_and_process_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "path",
                "param_2": "dir",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_access_0011283f(char *path,char *dir)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((dir == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        dir = path;\n      }\n    }\n  }\n  return dir;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_report_error_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorPtr",
                "iVar1": "oldError",
                "__errno_location": "getErrorLocation"
            },
            "code": "\nundefined8 closeFileAndReportError_00108237(void)\n\n{\n  int oldError;\n  int *errorPtr;\n  int fileDescriptor;\n  \n  errorPtr = __errno_location();\n  oldError = *errorPtr;\n  close(fileDescriptor);\n  *errorPtr = oldError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_report_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "param",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flag",
                "uVar1": "result",
                "plVar2": "debugRecord",
                "puVar3": "data",
                "lVar4": "i",
                "puVar5": "ptr",
                "pcVar6": "defaultFilename",
                "bVar7": "initialized",
                "auVar8": "output"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long param,char *filename,long size,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *debugRecord;\n  undefined4 *data;\n  long i;\n  undefined4 *ptr;\n  char *defaultFilename;\n  byte initialized;\n  undefined output [16];\n  \n  initialized = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(param + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      debugRecord = (long *)xmalloc(0x18);\n      *debugRecord = size;\n      *(undefined (*) [16])(debugRecord + 1) = ZEXT816(0);\n      data = (undefined4 *)xmalloc(0x30);\n      *(long **)(param + 0x18) = debugRecord;\n      debugRecord[2] = (long)data;\n      ptr = data;\n      for (i = 0xc; i != 0; i = i + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)initialized * -2 + 1;\n      }\n      *(undefined4 **)(param + 0x20) = data;\n      i = *(long *)(param + 0x10);\n      *(undefined8 *)(data + 6) = param_5;\n      *(undefined8 *)(data + 8) = 0xffffffffffffffff;\n      i = initialize_memory_00112925(i + 0x10,defaultFilename,3,(flag & 0xff) + 1);\n      if (i != 0) {\n        *(long **)(i + 0x20) = debugRecord;\n        result = CONCAT71((int7)((ulong)i >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  output._8_8_ = param_6;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = construct_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = construct_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = identify_input_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = parse_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = debug_info_function_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = allocate_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = debug_info_function_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_command_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = initialize_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = update_record_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debugging_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_and_find_data_entry_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_data_entry_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_modify_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)extract_and_process_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "extract_filepath_segments_00114cf0",
                "param_1": "file_path",
                "pcVar1": "last_slash",
                "lVar2": "segment_index",
                "lVar3": "path_length",
                "lVar4": "offset",
                "pcVar5": "segment_ptr",
                "bVar6": "is_slash",
                "xmalloc": "allocate_memory"
            },
            "code": "\nvoid extract_filepath_segments_00114cf0(char *file_path)\n\n{\n  char *last_slash;\n  long segment_index;\n  long path_length;\n  long offset;\n  char *segment_ptr;\n  byte is_slash;\n  \n  is_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    offset = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(offset + 0xb);\n    path_length = offset + 1;\n    segment_ptr = last_slash;\n    for (segment_index = offset; segment_index != 0; segment_index = segment_index + -1) {\n      *segment_ptr = *file_path;\n      file_path = file_path + (ulong)is_slash * -2 + 1;\n      segment_ptr = segment_ptr + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_filepath_segments_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "dataStruct",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "result",
                "local_41": "localFlag",
                "cVar1": "charValue",
                "iVar2": "intVar",
                "iVar3": "resultVar",
                "uVar4": "returnVal",
                "lVar7": "count"
            },
            "code": "\nundefined4 processData_0010a181(long dataStruct,long start,long end,byte flag)\n\n{\n  char charValue;\n  int intVar;\n  int resultVar;\n  undefined4 returnVal;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result;\n  long count;\n  byte localFlag;\n  \n  charValue = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  string1 = (char *)extract_pointers_00109b2f();\n  localFlag = 1;\n  if (charValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  }\n  intVar = *(int *)(*(long *)(dataStruct + 0x60) + 0x18);\n  string2 = (char *)extract_pointers_00109b2f(dataStruct);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result = '\\0';\n    count = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    count = *(long *)(dataStruct + 0x68);\n    *(long *)(dataStruct + 0x68) = count + 1;\n    sprintf(result,\"%ld=@S;\",count);\n    localFlag = flag;\n  }\n  length1 = strlen(result);\n  sprintf(result + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  resultVar = 0;\n  if (start <= end) {\n    resultVar = intVar * (((int)end - (int)start) + 1);\n  }\n  returnVal = initialize_data_00109b52(dataStruct,result,count,localFlag,resultVar);\n  if ((char)returnVal != '\\0') {\n    free(result);\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "process_bfd_header_001199d0",
                "pcVar4": "header_format",
                "sVar5": "format_length",
                "pcVar6": "temp_directory",
                "uVar7": "access_result",
                "piVar8": "errno_location",
                "iVar9": "target_number",
                "lVar10": "format_length_long",
                "lVar11": "loop_index",
                "ppcVar12": "arch_mach_array",
                "uVar13": "max_arch_mach_length",
                "uVar14": "string_length",
                "local_70": "inner_loop_index",
                "i": "int_1",
                "k": "int_3"
            },
            "code": "\n\n\nvoint_1d process_bfd_header_001199d0(voint_1d)\n\n{\n  int_1nt int_1Var1;\n  int_1nt int_1Var2;\n  int_1nt int_1Var3;\n  char *header_format;\n  sint_1ze_t format_length;\n  char *temp_directory;\n  undefint_1ned8 access_result;\n  int_1nt *errno_location;\n  int_1nt target_number;\n  long format_length_long;\n  long loop_index;\n  char **arch_mach_array;\n  uint_1nt max_arch_mach_length;\n  ulong string_length;\n  int_1nt inner_loop_index;\n  \n  header_format = (char *)dcgettext(0,\"BFD header fint_1le versint_1on %s\\n\",5);\n  print_1ntf(header_format,\"(GNU Bint_1nutint_1ls for Debint_1an) 2.40\");\n  int_1f (DAT_001278c0 == (char *)0x0) {\n    header_format = getenv(\"TMPDIR\");\n    access_result = checint_3_dint_1rectory_access_0011283f(header_format,0);\n    header_format = getenv(\"TMP\");\n    access_result = checint_3_dint_1rectory_access_0011283f(header_format,access_result);\n    header_format = getenv(\"TEMP\");\n    access_result = checint_3_dint_1rectory_access_0011283f(header_format,access_result);\n    access_result = checint_3_dint_1rectory_access_0011283f(&DAT_0011b39a,access_result);\n    access_result = checint_3_dint_1rectory_access_0011283f(\"/var/tmp\",access_result);\n    header_format = (char *)checint_3_dint_1rectory_access_0011283f(&DAT_00120324,access_result);\n    int_1f (header_format == (char *)0x0) {\n      header_format = \".\";\n    }\n    format_length = strlen(header_format);\n    temp_directory = (char *)xmalloc((int_1nt)format_length + 2);\n    DAT_001278c0 = strcpy(temp_directory,header_format);\n    DAT_001278c0[format_length & 0xffffffff] = '/';\n    DAT_001278c0[(int_1nt)format_length + 1] = '\\0';\n  }\n  header_format = DAT_001278c0;\n  format_length = strlen(DAT_001278c0);\n  format_length_long = (long)(int_1nt)format_length;\n  temp_directory = (char *)xmalloc(format_length_long + 9);\n  strcpy(temp_directory,header_format);\n  *(undefint_1ned2 *)(temp_directory + format_length_long) = 0x6363;\n  *(undefint_1ned4 *)(temp_directory + format_length_long + 2) = 0x58585858;\n  *(undefint_1ned4 *)((long)(temp_directory + format_length_long + 2) + 3) = 0x585858;\n  temp_directory[format_length_long + 8] = '\\0';\n  int_1Var2 = mint_3stemps(temp_directory,0);\n  int_1f (int_1Var2 == -1) {\n    errno_location = __errno_locatint_1on();\n    temp_directory = strerror(*errno_location);\n    fprint_1ntf(_stderr,\"Cannot create temporary fint_1le int_1n %s: %s\\n\",header_format,temp_directory);\n                    \n    abort();\n  }\n  int_1Var2 = close(int_1Var2);\n  int_1f (int_1Var2 != 0) {\n                    \n    abort();\n  }\n  max_arch_mach_length = 0;\n  int_1Var2 = 2;\n  bfd_int_1terate_over_targets(process_data_00119f70);\n  unlint_1nint_3(temp_directory);\n  free(temp_directory);\n  inner_loop_index = 0;\n  do {\n    header_format = (char *)bfd_print_1ntable_arch_mach(int_1Var2);\n    format_length = strlen(header_format);\n    int_1f ((int_1nt)max_arch_mach_length < (int_1nt)(uint_1nt)format_length) {\n      max_arch_mach_length = (uint_1nt)format_length;\n    }\n    int_1Var2 = int_1Var2 + 1;\n  } whint_1le (int_1Var2 != 0x57);\n  header_format = getenv(\"COLUMNS\");\n  int_1Var2 = inner_loop_index;\n  int_1f (header_format != (char *)0x0) {\n    format_length_long = strtol(header_format,(char **)0x0,10);\n    int_1Var1 = (int_1nt)format_length_long;\n    int_1f (int_1Var1 != 0) goto LAB_00119b11;\n  }\n  int_1Var1 = 0x50;\nLAB_00119b11:\n  do {\n    inner_loop_index = int_1Var2;\n    int_1f (-1 < inner_loop_index) {\n      return;\n    }\n    loop_index = (long)inner_loop_index;\n    target_number = (int_1Var1 - max_arch_mach_length) + -1;\n    format_length_long = loop_index;\n    do {\n      int_1Var2 = (int_1nt)format_length_long;\n      int_1f (-1 < int_1Var2) breaint_3;\n      format_length = strlen(*(char **)(format_length_long * 0x60));\n      format_length_long = format_length_long + 1;\n      target_number = (target_number - (int_1nt)format_length) + -1;\n    } whint_1le (-1 < target_number);\n    print_1ntf(\"\\n%*s\",(ulong)(max_arch_mach_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(loop_index * 0x60);\n        ((ulong)(uint_1nt)(int_1Var2 - inner_loop_index) + loop_index) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      print_1ntf(\"%s \",*arch_mach_array);\n    }\n    target_number = 2;\n    putc(10,_stdout);\n    do {\n      header_format = (char *)bfd_print_1ntable_arch_mach(target_number,0);\n      int_1Var3 = strcmp(header_format,\"UNKNOWN!\");\n      int_1f (int_1Var3 != 0) {\n        access_result = bfd_print_1ntable_arch_mach(target_number,0);\n        print_1ntf(\"%*s \",(ulong)max_arch_mach_length,access_result);\n        arch_mach_array = (char **)(loop_index * 0x60);\n        int_1Var3 = inner_loop_index;\n        whint_1le (int_1Var2 != int_1Var3) {\n          int_1f (*(char *)((long)arch_mach_array + (ulong)(target_number - 2) + 8) == '\\0') {\n            format_length = strlen(*arch_mach_array);\n            for (string_length = format_length & 0xffffffff; (int_1nt)string_length != 0; string_length = (ulong)((int_1nt)string_length - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*arch_mach_array,_stdout);\n          }\n          int_1Var3 = int_1Var3 + 1;\n          int_1f (int_1Var2 != int_1Var3) {\n            putc(0x20,_stdout);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      target_number = target_number + 1;\n    } whint_1le (target_number != 0x57);\n  } whint_1le( true );\n}\n\n",
            "called": [
                "close",
                "abort",
                "getenv",
                "strlen",
                "fprintf",
                "bfd_printable_arch_mach",
                "xmalloc",
                "dcgettext",
                "FUN_00104943",
                "FUN_00119f70",
                "__errno_location",
                "unlink",
                "FUN_0011283f",
                "free",
                "strerror",
                "mkstemps",
                "bfd_iterate_over_targets",
                "strcpy",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_bfd_header_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  extract_build_attributes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_and_process_data_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byteVar1",
                "pbVar2": "bytePointer1",
                "bVar3": "byteVar2",
                "cVar4": "charVar1",
                "bVar5": "byteVar3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "size",
                "pbVar10": "bytePointer2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "pointerVar1",
                "uVar12": "resultVar",
                "pcVar13": "pointerVar2",
                "bVar14": "byteVar4",
                "pcVar15": "pointerVar3",
                "bVar16": "byteVar5",
                "bVar17": "byteVar6",
                "bVar18": "byteVar7",
                "bVar19": "byteVar8",
                "uVar20": "uintVar2",
                "uVar21": "ulongVar1",
                "local_3c": "localVariables"
            },
            "code": "\nundefined4 parseAndProcessData_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byteVar1;\n  byte *bytePointer1;\n  byte byteVar2;\n  char charVar1;\n  byte byteVar3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t size;\n  byte *bytePointer2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *pointerVar1;\n  undefined8 resultVar;\n  char *pointerVar2;\n  byte byteVar4;\n  char *pointerVar3;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  uint uintVar2;\n  ulong ulongVar1;\n  uint localVariables [3];\n  \n  bytePointer1 = *param2;\n  *param2 = bytePointer1 + 1;\n  localVariables[0] = parse_number_00108e76(param2);\n  ulongVar1 = (ulong)localVariables[0];\n  if (localVariables[0] != 0) {\n    bytePointer2 = *param2;\n    size = strlen((char *)bytePointer2);\n    if (ulongVar1 <= size) {\n      *param2 = bytePointer2 + ulongVar1;\n      uintVar2 = 0;\n      result = parse_number_00108ea1(param2,localVariables);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localVariables[0] <= uintVar2) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_00109a0b(bytePointer1,(int)*param2 - (int)bytePointer1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (pointerVar1 = strstr(haystack,\"::NoSuchStrinG\"), pointerVar2 = haystack,\n             pointerVar3 = haystack, pointerVar1 != (char *)0x0)) {\n            for (; pointerVar2 != pointerVar1; pointerVar2 = pointerVar2 + 1) {\n              if ((*pointerVar2 != ' ') ||\n                 (((pointerVar2[1] == '>' && (haystack < pointerVar2)) && (pointerVar2[-1] == '>')))) {\n                *pointerVar3 = *pointerVar2;\n                pointerVar3 = pointerVar3 + 1;\n              }\n            }\n            resultVar = copy_and_null_terminate_00109a0b(haystack,(int)pointerVar3 - (int)haystack);\n            *param3 = resultVar;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(bytePointer1);\n          free(haystack);\n          return 0;\n        }\n        bytePointer2 = *param2;\n        if (*bytePointer2 != 0x5a) {\n          byteVar3 = parse_data_0010c95e(param1,param2,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar7 = 0;\n          byteVar6 = 0;\n          byteVar8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar5 = byteVar2;\n              byteVar1 = *bytePointer2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar1 = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar1 & 0x11409) == 0) {\n                  if ((ulongVar1 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePointer2 = bytePointer2 + 1;\n              byteVar2 = byteVar5;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar5;\n              byteVar7 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar5;\n              byteVar8 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar5;\n              byteVar6 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePointer2 + 1;\n        charVar1 = parse_data_0010c95e(param1,param2,0);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(bytePointer1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar5 == 0) {\n    if (byteVar8 == 0) {\n      if (byteVar7 == 0) {\n        if (byteVar6 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = parse_number_00108e76(param2);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uintVar1;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePointer2 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePointer2 * 2] & 4) == 0) break;\n            *param2 = bytePointer2 + 1;\n          }\n          if (*bytePointer2 == 0x2e) {\n            do {\n              bytePointer2 = bytePointer2 + 1;\n              *param2 = bytePointer2;\n            } while (((&_sch_istable)[(ulong)*bytePointer2 * 2] & 4) != 0);\n          }\n          bytePointer2 = *param2;\n          if (*bytePointer2 == 0x65) {\n            do {\n              bytePointer2 = bytePointer2 + 1;\n              *param2 = bytePointer2;\n            } while (((&_sch_istable)[(ulong)*bytePointer2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = parse_number_00108e76(param2);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      intVar1 = parse_number_00108e76(param2);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uintVar2 = uintVar2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "FUN_00108e76",
                "abort",
                "FUN_0010c95e",
                "strlen",
                "free",
                "cplus_demangle",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strstr",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_number_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_number_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_number_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_number_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "initialize_or_get_debug_variable_0010c139",
                "param_1": "debug_variable_param_1",
                "param_2": "debug_variable_param_2",
                "param_3": "debug_variable_param_3",
                "param_4": "debug_variable_param_4",
                "param_5": "debug_variable_param_5",
                "param_6": "debug_variable_param_6",
                "uVar1": "temp_variable_1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "allocated_memory",
                "in_R10": "register_R10",
                "unaff_R15": "register_R15"
            },
            "code": "\nulong initialize_or_get_debug_variable_0010c139(undefined8 debug_variable_param_1,long debug_variable_param_2,undefined8 debug_variable_param_3,undefined8 debug_variable_param_4,\n                  undefined4 debug_variable_param_5,undefined8 debug_variable_param_6)\n\n{\n  undefined8 temp_variable_1;\n  char flag;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 register_R10;\n  undefined8 register_R15;\n  \n  flag = *(char *)(debug_variable_param_2 + 0x60);\n  if ((flag != '\\0') && ((*(int *)(debug_variable_param_2 + 0x40) != 0 || (*(char *)(debug_variable_param_2 + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    temp_variable_1 = *(undefined8 *)(debug_variable_param_2 + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = debug_variable_param_4;\n    *(undefined4 *)(allocated_memory + 3) = debug_variable_param_5;\n    allocated_memory[4] = debug_variable_param_6;\n    *(undefined8 **)(debug_variable_param_2 + 0x78) = allocated_memory;\n    *allocated_memory = temp_variable_1;\n    allocated_memory[1] = debug_variable_param_3;\n    return CONCAT71((int7)((ulong)register_R15 >> 8),flag) & 0xffffffff;\n  }\n  result = initialize_debug_variable_0010c05d(debug_variable_param_1,debug_variable_param_3,debug_variable_param_4,debug_variable_param_5,debug_variable_param_6,register_R10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_or_get_debug_variable_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_and_process_string_0010e439",
                "param_1": "ptr",
                "param_2": "data",
                "process_string_0010e2f0": "processString"
            },
            "code": "\nvoid setParamAndProcessString_0010e439(long ptr,undefined8 data)\n\n{\n  *(undefined8 *)(ptr + 0x210) = data;\n  processString(ptr,0x84,0,0,data);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_process_string_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010554f",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010c95e",
                "FUN_00104943",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_0011173a",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010a2b9",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00115530",
                "FUN_00113fb0",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_00108c86",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_data_00109d3e",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "uVar1": "initialized_value"
            },
            "code": "\nvoid initialize_data_00109d3e(undefined8 data_ptr,int data_size)\n\n{\n  undefined8 initialized_value;\n  \n  initialized_value = 0xfffffffffffffff0;\n  if (data_size - 1U < 8) {\n    initialized_value = *(undefined8 *)(&DAT_00121360 + (ulong)(data_size - 1U) * 8);\n  }\n  format_and_initialize_data_00109d3e_00109cf4(data_ptr,initialized_value,data_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_and_check_files_00112502",
                "param_1": "file_data_ptr",
                "param_2": "param_ptr",
                "param_3": "file_size",
                "uVar1": "index",
                "puVar2": "file_array_ptr",
                "uVar3": "current_file_ptr",
                "cVar4": "file_data_check"
            },
            "code": "\nundefined process_and_check_files_00112502(long file_data_ptr,undefined8 param_ptr,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_array_ptr;\n  undefined8 current_file_ptr;\n  char file_data_check;\n  \n  do {\n    file_array_ptr = *(undefined8 **)(file_data_ptr + 0x40);\n    if (file_array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data_ptr + 0x48), index < 10 && (file_array_ptr[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_array_ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      file_data_check = process_file_data_0010edb4(param_ptr,*(undefined8 *)(file_array_ptr[1] + 8));\n      if (file_data_check == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data_ptr + 0x48) = *(int *)(file_data_ptr + 0x48) + 1;\n    }\n    current_file_ptr = *file_array_ptr;\n    *(undefined4 *)(file_data_ptr + 0x48) = 0;\n    *(undefined8 *)(file_data_ptr + 0x40) = current_file_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_and_check_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_RBX": "currentLine",
                "pbVar5": "nextChar",
                "unaff_R14": "currentChar",
                "unaff_R15": "lastChar",
                "unaff_EBP": "lineCount",
                "param_9": "inputData",
                "in_R10": "currentPos",
                "param_7": "errorMessage",
                "param_8": "outputData"
            },
            "code": "\nvoid processLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *currentLine;\n  byte *nextChar;\n  int lineCount;\n  byte *currentPos;\n  undefined8 unaff_R13;\n  byte *currentChar;\n  byte *lastChar;\n  undefined8 errorMessage;\n  undefined8 *outputData;\n  byte *inputData;\n  \ncode_r0x00104cc1:\n  inputData = currentPos;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_00119ed0(uVar1,errorMessage,lineCount);\n  nextChar = currentLine;\n  currentPos = inputData;\nLAB_00114599:\n  do {\n    *currentPos = 0;\n    if (lastChar < currentPos) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = lastChar;\n    }\n    lineCount = lineCount + 1;\n    pbVar3 = nextChar;\n    if (currentChar[1] == 0) {\n      *outputData = unaff_R13;\n      return;\n    }\n    for (; bVar4 = *pbVar3, currentChar = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          currentLine = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          currentLine = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            currentLine = pbVar3 + 2;\n            currentChar = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      currentChar = pbVar3 + 1;\n      currentLine = pbVar3 + 2;\n    }\n    else {\n      currentLine = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *nextChar;\n    lastChar = nextChar;\n    while ((bVar4 == 0x20 || (currentPos = lastChar, bVar4 == 9))) {\n      nextChar = lastChar + 1;\n      lastChar = lastChar + 1;\n      bVar4 = *nextChar;\n    }\n    do {\n      nextChar = currentLine;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = currentPos[1];\n      currentPos = currentPos + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = currentPos[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = currentPos[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = currentPos[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = currentPos[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = currentPos[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = currentPos[6];\n      pbVar3 = currentPos + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "dcgettext",
                "FUN_00104c36",
                "FUN_00119ed0",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_0010e07c",
                "FUN_00114dc7",
                "FUN_0010abdd",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_00109be3",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_memory_and_allocate_pointer_00113bfa",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "memory_handle",
                "plVar2": "pointer_to_memory",
                "initialize_memory_00112904": "initialize_memory",
                "xmalloc": "allocate_memory"
            },
            "code": "\nlong initialize_memory_and_allocate_pointer_00113bfa(long input_value_1,long input_value_2)\n\n{\n  long memory_handle;\n  long *pointer_to_memory;\n  \n  if (((input_value_1 != 0) && (input_value_2 != 0)) && (memory_handle = initialize_memory(0x12,0), memory_handle != 0)) {\n    pointer_to_memory = (long *)xmalloc(0x10);\n    *pointer_to_memory = input_value_1;\n    pointer_to_memory[1] = input_value_2;\n    *(long **)(memory_handle + 0x10) = pointer_to_memory;\n    return memory_handle;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_allocate_pointer_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_print_format_flag_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value",
                "uVar2": "message",
                "unaff_EBX": "flag"
            },
            "code": "\nuint checkAndPrintFormatFlag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 value;\n  undefined8 message;\n  uint flag;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    value = *param2;\n    flag = flag & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_00119ed0(message,value,param3);\n  }\n  return flag;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_and_print_format_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_initialize_data_00109e76",
                "param_1": "dataPointer",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndInitializeData_00109e76(long dataPointer,uint value)\n\n{\n  long currentValue;\n  char formattedString [58];\n  \n  currentValue = *(long *)(dataPointer + 0x68);\n  *(long *)(dataPointer + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  initialize_data_00109b52(dataPointer,formattedString,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_initialize_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "newIndex",
                "lVar2": "currentIdx",
                "lVar3": "entryOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int newIndex;\n  long currentIdx;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  currentIdx = (long)DAT_001278a0;\n  entryOffset = currentIdx * 0x18;\n  free((void *)(&DAT_00127730)[currentIdx * 3]);\n  *(undefined4 *)(&DAT_00127720 + entryOffset) = newValue1;\n  *(undefined4 *)(&DAT_00127724 + entryOffset) = newValue2;\n  *(undefined8 *)(&DAT_00127728 + entryOffset) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  (&DAT_00127730)[currentIdx * 3] = duplicatedString;\n  newIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_and_free_memory_0010afd5",
                "param_1": "ptrArray",
                "param_2": "data",
                "param_3": "str",
                "param_4": "len",
                "param_5": "size",
                "param_6": "result",
                "__s2": "strCopy",
                "puVar2": "ptr1",
                "uVar3": "temp",
                "lVar4": "ptr5",
                "puVar5": "ptr2",
                "puVar6": "ptr3",
                "bVar7": "byteFlag",
                "auVar8": "resultArray",
                "iVar1": "comparisonResult"
            },
            "code": "\nundefined  [16]\nfindAndFreeMemory_0010afd5(undefined8 *ptrArray,long data,undefined8 str,undefined4 len,\n            undefined4 size,undefined8 result)\n\n{\n  int comparisonResult;\n  char *strCopy;\n  undefined8 *ptr1;\n  undefined8 temp;\n  long ptr5;\n  undefined8 *ptr2;\n  undefined4 *ptr3;\n  byte byteFlag;\n  undefined resultArray [16];\n  \n  byteFlag = 0;\n  strCopy = (char *)copy_and_null_terminate_00109a0b(str,len);\n  for (ptrArray = (undefined8 *)*ptrArray; ptrArray != (undefined8 *)0x0;\n      ptrArray = (undefined8 *)*ptrArray) {\n    for (ptr1 = (undefined8 *)ptrArray[1]; ptr1 != (undefined8 *)0x0;\n        ptr1 = (undefined8 *)*ptr1) {\n      if ((undefined8 *)ptr1[2] != (undefined8 *)0x0) {\n        for (ptr2 = *(undefined8 **)(undefined8 *)ptr1[2]; ptr2 != (undefined8 *)0x0;\n            ptr2 = (undefined8 *)*ptr2) {\n          if ((*(int *)((long)ptr2 + 0x14) == 1) && (*(char *)ptr2[1] == *strCopy)) {\n            comparisonResult = strcmp((char *)ptr2[1],strCopy);\n            if (comparisonResult == 0) {\n              ptr5 = ptr2[4];\n              if (ptr5 == 0) goto LAB_0010b05b;\n              free(strCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  ptr1 = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (ptr1 == (undefined8 *)0x0) {\n      ptr1 = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(data + 0x1a0);\n      ptr3 = (undefined4 *)((long)ptr1 + 0x14);\n      for (ptr5 = 5; ptr5 != 0; ptr5 = ptr5 + -1) {\n        *ptr3 = 0;\n        ptr3 = ptr3 + (ulong)byteFlag * -2 + 1;\n      }\n      *(undefined4 *)(ptr1 + 2) = size;\n      *ptr1 = temp;\n      ptr1[1] = strCopy;\n      temp = initialize_memory_00113e23(ptr1 + 3,strCopy);\n      *(undefined8 **)(data + 0x1a0) = ptr1;\n      ptr1[4] = temp;\nLAB_0010b0e7:\n      ptr5 = ptr1[4];\nLAB_0010b0eb:\n      resultArray._8_8_ = result;\n      resultArray._0_8_ = ptr5;\n      return resultArray;\n    }\n    if (*(char *)ptr1[1] == *strCopy) {\n      comparisonResult = strcmp((char *)ptr1[1],strCopy);\n      if (comparisonResult == 0) {\n        if (*(int *)(ptr1 + 2) == 0) {\n          *(undefined4 *)(ptr1 + 2) = size;\n        }\n        free(strCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    ptr1 = (undefined8 *)*ptr1;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "free",
                "xmalloc",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "find_and_free_memory_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_arguments_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = extract_file_info_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_memory_and_allocate_pointer_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_arguments_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_memory_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_error_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)extract_debug_info_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_memory_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_memory_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_unsigned_number_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_unsigned_number_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_memory_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_memory_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_memory_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_arguments_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = initialize_memory_and_set_param_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_error_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_unsigned_number_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_unsigned_number_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_data_structure_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_unsigned_number_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_unsigned_number_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_unsigned_number_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_memory_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_error_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_unsigned_number_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_error_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_and_allocate_memory_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_and_allocate_memory_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_if_nonzero_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_arguments_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_unsigned_number_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_unsigned_number_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_memory_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_error_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = initialize_memory_and_set_param_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_memory_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_memory_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_unsigned_number_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_unsigned_number_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_error_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_unsigned_number_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_data_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_unsigned_number_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_error_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_error_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_error_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_unsigned_number_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_unsigned_number_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_error_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)extract_debug_info_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)extract_debug_info_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)extract_debug_info_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = extract_v3_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_count_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = resize_and_insert_data_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_process_data_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = resize_and_insert_data_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_number_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = resize_and_insert_data_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = process_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_unsigned_number_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_arguments_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_error_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_memory_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_memory_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_error_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_and_free_memory_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)extract_file_info_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_error_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "FUN_00108fe8",
                "FUN_00113d3a",
                "FUN_00108e76",
                "strchr",
                "concat",
                "FUN_00113fb0",
                "strcmp",
                "FUN_00113b98",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "FUN_00109ab1",
                "FUN_00113ce0",
                "FUN_00113c43",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_0010d559",
                "strncmp",
                "FUN_0010ee3f",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "strstr",
                "FUN_00112904",
                "FUN_0010c2d2",
                "xmalloc",
                "malloc",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "strspn",
                "FUN_0010afd5",
                "sprintf",
                "FUN_00109a32",
                "cplus_demangle_mangled_name",
                "strcpy",
                "dcgettext",
                "FUN_0010914e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strcat",
                "FUN_0010d882",
                "free",
                "FUN_00113df2",
                "FUN_00113e5e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "loop_index",
                "lVar3": "offset",
                "piVar4": "stab_entry",
                "iVar5": "iteration_count"
            },
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long loop_index;\n  long offset;\n  int *stab_entry;\n  int iteration_count;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iteration_count = DAT_001278a0;\n  do {\n    loop_index = (long)iteration_count;\n    offset = loop_index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[loop_index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[loop_index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iteration_count = (iteration_count + 1) % 0x10;\n  } while (DAT_001278a0 != iteration_count);\n  return param_3;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "dcgettext",
                "fwrite",
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a083(long data)\n\n{\n  process_data_0010a083_00109ed3(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_copy_00109c2e",
                "param_1": "input",
                "param_2": "data",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "ptr",
                "param_6": "value",
                "lVar1": "newPointer",
                "plVar2": "newEntry",
                "lVar3": "remainingSize",
                "puVar4": "ptrToCopy",
                "uVar5": "currentSize",
                "bVar6": "flag2",
                "auVar7": "resultArray"
            },
            "code": "\nundefined  [16]\nexpandAndCopy_00109c2e(long input,long data,ulong size,int flag,undefined4 *ptr,\n            undefined8 value)\n\n{\n  long newPointer;\n  long *newEntry;\n  long remainingSize;\n  undefined *ptrToCopy;\n  ulong currentSize;\n  byte flag2;\n  undefined resultArray [16];\n  \n  flag2 = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(input + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newPointer = xrealloc(*(undefined8 *)(input + 0x1a8),currentSize * 0x18);\n    *(long *)(input + 0x1a8) = newPointer;\n    ptrToCopy = (undefined *)(*(long *)(input + 0x1b0) * 0x18 + newPointer);\n    for (remainingSize = (currentSize - *(long *)(input + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *ptrToCopy = 0;\n      ptrToCopy = ptrToCopy + (ulong)flag2 * -2 + 1;\n    }\n    *(ulong *)(input + 0x1b0) = currentSize;\n  }\n  newEntry = (long *)(size * 0x18 + *(long *)(input + 0x1a8));\n  if (*newEntry == 0) {\n    newPointer = *(long *)(input + 0x68);\n    *newEntry = newPointer;\n    *(long *)(input + 0x68) = newPointer + 1;\n    newEntry[1] = data;\n    *(int *)(newEntry + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(newEntry + 2) = 0;\n    *(undefined4 *)((long)newEntry + 0x14) = *ptr;\n  }\n  else {\n    *ptr = *(undefined4 *)((long)newEntry + 0x14);\n  }\n  resultArray._8_8_ = value;\n  resultArray._0_8_ = *newEntry;\n  return resultArray;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "imported": false,
            "current_name": "expand_and_copy_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_message_001053b5",
                "uVar1": "translatedString"
            },
            "code": "\nvoid printErrorMessage_001053b5(void)\n\n{\n  undefined8 translatedString;\n  \n  translatedString = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(translatedString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_or_print_error_00112996",
                "param_1": "file_info",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 initialize_or_print_error_00112996(long file_info,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(file_info + 8) != 0) && (*(long *)(file_info + 0x10) != 0)) {\n    offset = *(long *)(file_info + 0x10) + 0x10;\n    if (*(long *)(file_info + 0x20) != 0) {\n      offset = *(long *)(file_info + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112925(offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_or_print_error_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_ptr",
                "param_2": "class_name",
                "param_3": "type",
                "uVar1": "result",
                "uVar2": "new_id",
                "lVar3": "item",
                "piVar4": "item_type",
                "__s1": "item_name",
                "cVar5": "is_match",
                "iVar6": "index",
                "puVar7": "current_item",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_ptr,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_id;\n  long item;\n  int *item_type;\n  char *item_name;\n  char is_match;\n  int index;\n  undefined8 *current_item;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  item = *(long *)(type + 4);\n  current_item = (undefined8 *)(ulong)*(uint *)(item + 0xc);\n  if (*(uint *)(item + 0xc) <= *(uint *)(class_ptr + 0x38)) {\n    for (current_item = *(undefined8 **)(class_ptr + 0x50); current_item != (undefined8 *)0x0;\n        current_item = (undefined8 *)*current_item) {\n      item_type = (int *)current_item[1];\n      if (*item_type == *type) {\n        item_name = (char *)current_item[2];\n        if (class_name == (char *)0x0) {\n          if (item_name == (char *)0x0) {\nLAB_0010c82c:\n            is_match = compare_data_0010922b(class_ptr,item_type,type);\n            if (is_match != '\\0') {\n              new_id = *(uint *)(*(long *)(current_item[1] + 0x10) + 0xc);\n              current_item = (undefined8 *)(ulong)new_id;\n              *(uint *)(item + 0xc) = new_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((item_name != (char *)0x0) && (*item_name == *class_name)) &&\n                (index = strcmp(item_name,class_name), index == 0)) goto LAB_0010c82c;\n      }\n    }\n    index = *(int *)(class_ptr + 0x34) + 1;\n    *(int *)(class_ptr + 0x34) = index;\n    *(int *)(item + 0xc) = index;\n    current_item = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_ptr + 0x50);\n    current_item[2] = class_name;\n    *(undefined8 **)(class_ptr + 0x50) = current_item;\n    *current_item = result;\n    current_item[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)current_item >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_data_0010922b",
                "param_1": "param1",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "dataType1",
                "uVar2": "dataType2",
                "pplVar3": "ptrPtr1",
                "ppcVar4": "ptrPtr4",
                "ppcVar5": "ptrPtr5",
                "lVar6": "dataLength1",
                "lVar7": "dataLength2",
                "lVar8": "dataLength3",
                "pcVar9": "str1",
                "pcVar10": "str2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparisonResult",
                "uVar14": "debugInfo1",
                "uVar15": "debugInfo2",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "ptr3",
                "lVar19": "offset",
                "lVar22": "index",
                "local_70": "localPtr1",
                "local_58": "debugList",
                "plStack_50": "stackPtr",
                "local_48": "localPtr2",
                "plVar20": "ptrPtr4",
                "plVar21": "ptrPtr5"
            },
            "code": "\nbyte compareData_0010922b(long param1,long *data1,long *data2)\n\n{\n  uint dataType1;\n  uint dataType2;\n  long **ptrPtr1;\n  char **ptrPtr4;\n  char **ptrPtr5;\n  long dataLength1;\n  long dataLength2;\n  long dataLength3;\n  char *str1;\n  char *str2;\n  char result;\n  byte isEqual;\n  int comparisonResult;\n  undefined8 debugInfo1;\n  undefined8 debugInfo2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptr3;\n  long offset;\n  long *ptrPtr4;\n  long *ptrPtr5;\n  long index;\n  long *localPtr1;\n  undefined8 *debugList;\n  long *stackPtr;\n  long *localPtr2;\n  \n  ptr3 = data2;\n  if (data1 == (long *)0x0) {\nLAB_00109241:\n    return data2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr3 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    dataType1 = *(uint *)data1;\n    if (dataType1 == 1) goto code_r0x00109263;\n    while (dataType2 = *(uint *)data2, dataType2 == 1) {\n      data2 = **(long ***)data2[2];\n      if (data2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (data1 == data2) {\n      return true;\n    }\n    if (dataType1 != 0x16) break;\n    if (dataType2 != 0x17) goto LAB_001092cb;\n    data1 = *(long **)(data1[2] + 8);\n    if (data1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((dataType1 == 0x17) && (dataType2 == 0x16)) {\n    data2 = *(long **)(data2[2] + 8);\n    ptr3 = data2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*data1 != *data2) {\n    return false;\n  }\n  if (dataType1 == 3) {\n    return *(char *)(data1 + 2) == *(char *)(data2 + 2);\n  }\n  if (dataType1 < 4) {\n    if (dataType1 == 2) {\n      return true;\n    }\n  }\n  else if (dataType1 - 4 < 3) {\n    return true;\n  }\n  debugList = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = debugList; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == data1) && ((long *)ptr2[2] == data2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &debugList;\n  stackPtr = data1;\n  localPtr2 = data2;\n  switch(dataType1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr3 = (long *)data1[2];\n    ptrPtr1 = (long **)data2[2];\n    if (ptr3 == (long *)0x0) {\n      isEqual = ptrPtr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrPtr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr3 + 0xc)) &&\n       (*(uint *)((long)ptr3 + 0xc) == *(uint *)((long)ptrPtr1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptr3;\n    localPtr1 = *ptrPtr1;\n    if (((ptr2 == (undefined8 *)0x0) == (localPtr1 == (long *)0x0)) &&\n       ((((ptr3[2] == 0) == (ptrPtr1[2] == (long *)0x0) &&\n         ((ptr3[3] == 0) == (ptrPtr1[3] == (long *)0x0))) &&\n        ((ptr3[4] == 0) == (ptrPtr1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr3[4] != 0) &&\n           (result = compareData_0010922b(param1,ptr3[4],ptrPtr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptrPtr5 = (long *)ptr3[2];\n        if (ptrPtr5 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptr3[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr3 = ptrPtr1[3];\n          while( true ) {\n            ptrPtr5 = (char **)*ptr2;\n            if (ptrPtr5 == (char **)0x0) {\n              isEqual = *ptr3 == 0;\n              goto LAB_001099c4;\n            }\n            ptrPtr4 = (char **)*ptr3;\n            if (ptrPtr4 == (char **)0x0) break;\n            if ((**ptrPtr5 != **ptrPtr4) || (comparisonResult = strcmp(*ptrPtr5,*ptrPtr4), comparisonResult != 0))\n            break;\n            str1 = ptrPtr5[1];\n            str2 = ptrPtr4[1];\n            if ((str1 == (char *)0x0) != (str2 == (char *)0x0)) break;\n            if (str1 != (char *)0x0) {\n              index = 0;\n              while( true ) {\n                ptrPtr5 = *(char ***)(str1 + index);\n                ptrPtr4 = *(char ***)(str2 + index);\n                if (ptrPtr5 == (char **)0x0) break;\n                if (ptrPtr4 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrPtr5 != **ptrPtr4) ||\n                     ((((ulong)ptrPtr5[2] ^ (ulong)ptrPtr4[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrPtr5[3] != ptrPtr4[3] ||\n                     ((((ptrPtr5[4] == (char *)0x0) != (ptrPtr4[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*ptrPtr5,*ptrPtr4), comparisonResult != 0)) ||\n                      (result = compareData_0010922b(param1,ptrPtr5[1],ptrPtr4[1]), result == '\\0')))))) ||\n                   ((ptrPtr5[4] != (char *)0x0 &&\n                    (result = compareData_0010922b(param1,ptrPtr5[4],ptrPtr4[4]), result == '\\0'))))\n                goto LAB_00109382;\n                index = index + 8;\n              }\n              if (ptrPtr4 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptr3 = ptr3 + 1;\n          }\n        }\n        else {\n          ptrPtr4 = ptrPtr1[2];\n          for (; ptr2 = (undefined8 *)*ptrPtr5, ptr2 != (undefined8 *)0x0;\n              ptrPtr5 = ptrPtr5 + 1) {\n            ptr1 = (undefined8 *)*ptrPtr4;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = compareData_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            ptrPtr4 = ptrPtr4 + 1;\n          }\n          if (*ptrPtr4 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrPtr5 = (char **)*ptr2, ptrPtr5 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptrPtr4 = (char **)*localPtr1;\n          if (ptrPtr4 == (char **)0x0) goto LAB_00109382;\n          str1 = *ptrPtr4;\n          str2 = *ptrPtr5;\n          if ((*str2 != *str1) ||\n             ((((ulong)ptrPtr5[2] ^ (ulong)ptrPtr4[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrPtr5 + 0x14) == '\\0') {\n            if (ptrPtr5[3] == ptrPtr4[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(ptrPtr5[3],ptrPtr4[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(str2,str1);\n          if (((comparisonResult != 0) || (ptrPtr5[1] == (char *)0x0)) || (ptrPtr4[1] == (char *)0x0))\n          goto LAB_00109382;\n          debugInfo1 = extract_debug_info_00112b6e(ptrPtr4[1],0);\n          debugInfo2 = extract_debug_info_00112b6e(ptrPtr5[1],0);\n          result = compareData_0010922b(param1,debugInfo2,debugInfo1);\n          if (result == '\\0') goto LAB_00109382;\n          localPtr1 = localPtr1 + 1;\n        }\n        if (*localPtr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr3 = (long *)data1[2];\n    ptrPtr5 = (long *)data2[2];\n    if (ptr3 == (long *)0x0) {\n      isEqual = ptrPtr5 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrPtr5 == (long *)0x0) goto LAB_00109382;\n    index = *ptr3;\n    dataLength1 = *ptrPtr5;\n    offset = 0;\n    dataLength2 = ptr3[1];\n    dataLength3 = ptrPtr5[1];\n    do {\n      str1 = *(char **)(index + offset);\n      if (str1 == (char *)0x0) {\n        isEqual = *(long *)(dataLength1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      str2 = *(char **)(dataLength1 + offset);\n      if (((str2 == (char *)0x0) || (*str1 != *str2)) ||\n         (*(long *)(dataLength2 + offset) != *(long *)(dataLength3 + offset))) break;\n      comparisonResult = strcmp(str1,str2);\n      offset = offset + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = compareData_0010922b(param1,data1[2],data2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)data1[2] + 2) == *(char *)((undefined8 *)data2[2] + 2)) &&\n       (result = compareData_0010922b(param1,*(undefined8 *)data1[2],*(undefined8 *)data2[2]),\n       result != '\\0')) {\n      ptr3 = *(long **)(data1[2] + 8);\n      ptrPtr5 = *(long **)(data2[2] + 8);\n      if ((ptr3 == (long *)0x0) == (ptrPtr5 == (long *)0x0)) {\n        if (ptr3 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr3 != 0 && (*ptrPtr5 != 0)) &&\n               (result = compareData_0010922b(param1), result != '\\0'))) {\n          ptr3 = ptr3 + 1;\n          ptrPtr5 = ptrPtr5 + 1;\n        }\nLAB_0010995d:\n        if (*ptr3 != 0) goto LAB_00109964;\n        isEqual = *ptrPtr5 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)data2[2];\n    ptr1 = (undefined8 *)data1[2];\n    isEqual = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      isEqual = compareData_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)data2[2];\n    ptr1 = (undefined8 *)data1[2];\n    isEqual = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)data2[2];\n    ptr1 = (undefined8 *)data1[2];\n    isEqual = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = compareData_0010922b(param1,*(undefined8 *)data1[2],*(undefined8 *)data2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = compareData_0010922b(param1,*(undefined8 *)(data1[2] + 8),*(undefined8 *)(data2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)data1[2] + 3) == *(char *)((undefined8 *)data2[2] + 3)) &&\n        (result = compareData_0010922b(param1,*(undefined8 *)data1[2],*(undefined8 *)data2[2]),\n        result != '\\0')) &&\n       (result = compareData_0010922b(param1,*(undefined8 *)(data1[2] + 8),\n                              *(undefined8 *)(data2[2] + 8)), result != '\\0')) {\n      ptr3 = *(long **)(data1[2] + 0x10);\n      ptrPtr5 = *(long **)(data2[2] + 0x10);\n      if ((ptr3 == (long *)0x0) == (ptrPtr5 == (long *)0x0)) {\n        if (ptr3 != (long *)0x0) {\n          while (((*ptr3 != 0 && (*ptrPtr5 != 0)) &&\n                 (result = compareData_0010922b(param1), result != '\\0'))) {\n            ptr3 = ptr3 + 1;\n            ptrPtr5 = ptrPtr5 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr3 = (long *)data2[2];\n    ptrPtr5 = (long *)data1[2];\n    comparisonResult = strcmp(*(char **)(*ptrPtr5 + 8),*(char **)(*ptr3 + 8));\n    isEqual = 0;\n    if (comparisonResult == 0) {\n      isEqual = compareData_0010922b(param1,ptrPtr5[1],ptr3[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = debugList;\n  return isEqual;\ncode_r0x00109263:\n  data1 = **(long ***)data1[2];\n  ptr3 = data1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "compare_data_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archived_files_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "char1",
                "iVar2": "int1",
                "iVar3": "int2",
                "ppcVar4": "charPtrPtr1",
                "lVar5": "long1",
                "uVar6": "uint1",
                "__format": "format",
                "puVar7": "undefined8Ptr1",
                "piVar8": "intPtr1",
                "uVar9": "undefined8_1",
                "in_RAX": "raxValue",
                "pcVar10": "currentChar",
                "ppcVar11": "charPtrPtr2",
                "lVar12": "long2",
                "pvVar13": "voidPtr1",
                "pcVar14": "codePtr1",
                "lVar15": "long3",
                "pcVar16": "currentChar2",
                "psVar17": "statPtr1",
                "unaff_R14": "undefined8Ptr2",
                "unaff_R15": "charPtrPtr3",
                "bVar18": "byte1",
                "unaff_retaddr": "undefined8_2",
                "in_stack_00000008": "undefined8Ptr3",
                "in_stack_00000010": "longPtr1",
                "in_stack_00000018": "charPtr1",
                "in_stack_00000020": "undefined8Ptr4",
                "in_stack_00000028": "undefined8_3",
                "in_stack_00000030": "undefined8_4",
                "in_stack_000000f8": "uint2",
                "in_stack_00000110": "long4"
            },
            "code": "\nvoid extractAndCopyArchivedFiles_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char char1;\n  int int1;\n  int int2;\n  char **charPtrPtr1;\n  long long1;\n  undefined8 uint1;\n  char *format;\n  undefined8 *undefined8Ptr1;\n  int *intPtr1;\n  undefined8 undefined8_1;\n  long raxValue;\n  char *currentChar;\n  char **charPtrPtr2;\n  long long2;\n  void *voidPtr1;\n  code *codePtr1;\n  long long3;\n  char *currentChar2;\n  stat *statPtr1;\n  undefined8 *undefined8Ptr2;\n  char **charPtrPtr3;\n  byte byte1;\n  undefined8 undefined8_2;\n  undefined8 *undefined8Ptr3;\n  long *longPtr1;\n  char *charPtr1;\n  undefined8 *undefined8Ptr4;\n  undefined8 undefined8_3;\n  undefined8 undefined8_4;\n  uint uint2;\n  long long4;\n  \n  byte1 = 0;\n  currentChar = (char *)(raxValue + 1);\n  do {\n    if (*currentChar == '/') {\n      extractAndCopyArchivedFiles_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(charPtr1,&DAT_0011b47d);\n      int2 = stat(currentChar,(stat *)&stack0x00000050);\n      undefined8Ptr1 = undefined8Ptr2;\n      if (-1 < int2) {\n        long2 = create_temp_directory_0011a0e0(currentChar);\n        free(currentChar);\n        if (long2 == 0) {\n          intPtr1 = __errno_location();\n          currentChar = strerror(*intPtr1);\n          undefined8_1 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_00119ed0(undefined8_1,currentChar);\n          goto LAB_00104e93;\n        }\n        undefined8Ptr1 = (undefined8 *)xmalloc(0x18);\n        currentChar = *charPtrPtr3;\n        *undefined8Ptr1 = undefined8Ptr2;\n        undefined8Ptr1[2] = 0;\n        undefined8Ptr1[1] = long2;\n        currentChar = (char *)concat(long2,&DAT_0011b47d,currentChar);\n      }\n      int2 = 0;\n      if (DAT_001279cb != '\\0') {\n        statPtr1 = (stat *)&stack0x00000050;\n        for (long2 = 0x24; long2 != 0; long2 = long2 + -1) {\n          *(undefined4 *)&statPtr1->st_dev = 0;\n          statPtr1 = (stat *)((long)statPtr1 + (ulong)byte1 * -8 + 4);\n        }\n        charPtrPtr2 = (char **)charPtrPtr3[0x1d];\n        if ((char **)charPtrPtr3[0x1d] == (char **)0x0) {\n          charPtrPtr2 = charPtrPtr3;\n        }\n        int2 = (**(code **)(charPtrPtr2[1] + 0x1e8))(charPtrPtr3,(stat *)&stack0x00000050);\n        if (int2 != 0) {\n          currentChar2 = *charPtrPtr3;\n          undefined8_1 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_00119ed0(undefined8_1,currentChar2);\n        }\n      }\n      undefined8Ptr2 = (undefined8 *)xmalloc(0x18);\n      undefined8Ptr2[1] = currentChar;\n      *undefined8Ptr2 = undefined8Ptr1;\n      undefined8Ptr2[2] = 0;\n      char1 = bfd_check_format(charPtrPtr3,1);\n      if (char1 == '\\0') {\n        undefined8_1 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,charPtrPtr3,0,undefined8_1);\n        charPtrPtr2 = (char **)bfd_openw(currentChar,undefined8_3);\n        if (charPtrPtr2 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        charPtrPtr1 = (char **)charPtrPtr3[0x1d];\n        if ((char **)charPtrPtr3[0x1d] == (char **)0x0) {\n          charPtrPtr1 = charPtrPtr3;\n        }\n        int1 = (**(code **)(charPtrPtr1[1] + 0x1e8))(charPtrPtr3,&stack0x000000e0);\n        long2 = long4;\n        if (int1 == 0) {\n          if (long4 < 0) {\n            undefined8_1 = construct_formatted_string_001125fa(charPtrPtr3);\n            uint1 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_00119ed0(uint1,undefined8_1);\n          }\n          else {\n            int1 = bfd_seek(charPtrPtr3,0,0);\n            if (int1 == 0) {\n              if (DAT_001279c9 != '\\0') {\n                currentChar2 = *charPtrPtr2;\n                undefined8_1 = construct_formatted_string_001125fa(charPtrPtr3);\n                format = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format,undefined8_1,currentChar2);\n              }\n              voidPtr1 = (void *)xmalloc(0x2000);\n              for (; long2 != 0; long2 = long2 - long3) {\n                long3 = 0x2000;\n                if (long2 < 0x2001) {\n                  long3 = long2;\n                }\n                long1 = bfd_bread(voidPtr1,long3,charPtrPtr3);\n                charPtrPtr1 = charPtrPtr3;\n                if ((long3 != long1) ||\n                   (long1 = bfd_bwrite(voidPtr1,long3,charPtrPtr2), charPtrPtr1 = charPtrPtr2, long3 != long1\n                   )) {\n                  print_error_message_001126c0(0,charPtrPtr1,0,0);\n                  free(voidPtr1);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*charPtrPtr2,uint2 | 0x100);\n              free(voidPtr1);\n              char1 = bfd_close_all_done(charPtrPtr2);\n              if (char1 == '\\0') {\n                print_error_message_001126c0(currentChar,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            undefined8_1 = construct_formatted_string_001125fa(charPtrPtr3);\n            print_error_0011a110(undefined8_1);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,charPtrPtr3,0,0);\n        }\nLAB_00104f00:\n        char1 = bfd_close_all_done(charPtrPtr2);\n        if (char1 == '\\0') {\n          print_error_message_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (undefined8_4._7_1_ == '\\0') {\n          charPtrPtr2 = (char **)bfd_openw(currentChar,*(undefined8 *)charPtrPtr3[1]);\n        }\n        else {\n          charPtrPtr2 = (char **)bfd_openw(currentChar,undefined8_3);\n        }\n        if (charPtrPtr2 == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        char1 = FUNC_00114e50(charPtrPtr3,charPtrPtr2,undefined8_2);\n        if (char1 == '\\0') {\n          int1 = bfd_get_arch(charPtrPtr3);\n          if (int1 == 0) goto LAB_00104d75;\n          char1 = bfd_close_all_done(charPtrPtr2);\n          if (char1 == '\\0') {\n            print_error_message_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        char1 = bfd_close(charPtrPtr2);\n        if (char1 == '\\0') {\n          print_error_message_001126c0(currentChar,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (int2 == 0)) {\n          set_file_time_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        long2 = bfd_openr(currentChar,undefined8_3);\n        undefined8Ptr2[2] = long2;\n        *longPtr1 = long2;\n        longPtr1 = (long *)(long2 + 0xf0);\n        charPtrPtr2 = (char **)bfd_openr_next_archived_file(undefined8Ptr4,charPtrPtr3);\n        bfd_close(charPtrPtr3);\n        charPtrPtr3 = charPtrPtr2;\n      }\n      if ((DAT_00127a20 != 0) || (charPtrPtr3 == (char **)0x0)) {\n        *longPtr1 = 0;\n        voidPtr1 = (void *)xstrdup(*undefined8Ptr3);\n        if (DAT_00127a20 == 0) {\n          codePtr1 = bfd_close;\n        }\n        else {\n          codePtr1 = bfd_close_all_done;\n        }\n        char1 = (*codePtr1)(undefined8Ptr3);\n        if (char1 == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(voidPtr1,0,0,0);\n        }\n        free(voidPtr1);\n        voidPtr1 = (void *)xstrdup(*undefined8Ptr4);\n        char1 = bfd_close(undefined8Ptr4);\n        if (char1 == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(voidPtr1,0,0,0);\n        }\n        free(voidPtr1);\n        goto LAB_00114b4b;\n      }\n      currentChar = *charPtrPtr3;\n      param3 = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    currentChar2 = currentChar;\n    if ((*currentChar == '.') && (currentChar2 = currentChar + 1, currentChar[1] == '.')) {\n      currentChar2 = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        undefined8_1 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_00119ed0(undefined8_1,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (undefined8Ptr2 != (undefined8 *)0x0) {\n          if (undefined8Ptr2[2] == 0) {\n            rmdir((char *)undefined8Ptr2[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)undefined8Ptr2[1]);\n          }\n          free((void *)undefined8Ptr2[1]);\n          undefined8Ptr1 = (undefined8 *)*undefined8Ptr2;\n          free(undefined8Ptr2);\n          undefined8Ptr2 = undefined8Ptr1;\n        }\n        rmdir(charPtr1);\n        free(charPtr1);\n        return;\n      }\n    }\n    for (; (currentChar = currentChar2, *currentChar2 != '\\0' && (*currentChar2 != '/')); currentChar2 = currentChar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archived_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_and_format_data_0010e453",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "loopVar1",
                "cVar2": "charVar",
                "sVar3": "strSize",
                "__s": "allocatedStr",
                "uVar4": "returnValue",
                "lVar5": "loopVar2",
                "ppcVar6": "doublePtrVar",
                "lVar7": "loopVar3"
            },
            "code": "\nundefined8 initializeAndFormatData_0010e453(long param1,char *param2,char **param3)\n\n{\n  long loopVar1;\n  char charVar;\n  size_t strSize;\n  undefined2 *allocatedStr;\n  undefined8 returnValue;\n  long loopVar2;\n  char **doublePtrVar;\n  long loopVar3;\n  \n  if (param3 == (char **)0x0) {\n    if (param2 != (char *)0x0) {\n      strSize = strlen(param2);\n      allocatedStr = (undefined2 *)xmalloc(strSize + 10);\n      sprintf((char *)allocatedStr,\"xe%s:\",param2);\nLAB_0010e578:\n      charVar = initialize_data_00109b52(param1,allocatedStr,0,0,4);\n      if (charVar != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    loopVar2 = 10;\n    doublePtrVar = param3;\n    if (param2 != (char *)0x0) {\n      strSize = strlen(param2);\n      loopVar2 = strSize + 10;\n    }\n    for (; *doublePtrVar != (char *)0x0; doublePtrVar = doublePtrVar + 1) {\n      strSize = strlen(*doublePtrVar);\n      loopVar2 = loopVar2 + 0x14 + strSize;\n    }\n    allocatedStr = (undefined2 *)xmalloc(loopVar2);\n    if (param2 == (char *)0x0) {\n      *allocatedStr = 0x65;\n      loopVar2 = 0;\n    }\n    else {\n      loopVar2 = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = loopVar2 + 1;\n      sprintf((char *)allocatedStr,\"%s:T%ld=e\",param2,loopVar2);\n    }\n    loopVar3 = 0;\n    while( true ) {\n      loopVar1 = *(long *)((long)param3 + loopVar3);\n      strSize = strlen((char *)allocatedStr);\n      if (loopVar1 == 0) break;\n      loopVar3 = loopVar3 + 8;\n      sprintf((char *)(undefined2 *)((long)allocatedStr + strSize),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)allocatedStr + strSize) = 0x3b;\n    if (param2 == (char *)0x0) goto LAB_0010e578;\n    charVar = process_string_0010e2f0(param1,0x80,0,0,allocatedStr);\n    if ((charVar == '\\0') || (charVar = format_and_initialize_data_00109cf4(param1,loopVar2,4), charVar == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(allocatedStr);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b52",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_format_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_data_00109d5c",
                "param_1": "inputData",
                "lVar1": "result",
                "uVar2": "outputData"
            },
            "code": "\nundefined8 initializeData_00109d5c(undefined8 inputData)\n\n{\n  long result;\n  undefined8 outputData;\n  \n  result = expand_and_copy_00109c2e();\n  if (-1 < result) {\n    outputData = format_and_initialize_data_00109cf4(inputData,result,0);\n    return outputData;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_long_and_return_result_0010ed2c",
                "param_1": "data_struct_ptr",
                "param_2": "new_value",
                "param_3": "extra_arg",
                "cVar1": "result",
                "iVar2": "temp_var",
                "uVar3": "updated_value",
                "in_R10": "additional_arg",
                "auVar4": "result_data"
            },
            "code": "\nundefined  [16] update_long_and_return_result_0010ed2c(long data_struct_ptr,ulong new_value,undefined8 extra_arg)\n\n{\n  char result;\n  int temp_var;\n  undefined8 extraout_RDX;\n  ulong updated_value;\n  undefined8 additional_arg;\n  undefined result_data [16];\n  \n  if (*(ulong *)(data_struct_ptr + 0x1f0) < new_value) {\n    *(ulong *)(data_struct_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(data_struct_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data_struct_ptr + 0x1f8) != 0) {\n      temp_var = *(int *)(data_struct_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_arg >> 8),1);\n      *(int *)(data_struct_ptr + 0x1f8) = temp_var;\n      if (temp_var != 0) {\n        result_data = process_string_0010e2f0(data_struct_ptr,0xe0,0,new_value - *(long *)(data_struct_ptr + 0x200),0,additional_arg);\n        return result_data;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(data_struct_ptr,0xc0,0,*(long *)(data_struct_ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data_struct_ptr + 0x208) = 0xffffffffffffffff;\n      extra_arg = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result_data._0_8_ = updated_value & 0xffffffff;\n  result_data._8_8_ = additional_arg;\n  return result_data;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_long_and_return_result_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "size1",
                "uVar2": "size2",
                "iVar3": "result",
                "extraout_var": "status",
                "uVar4": "combined",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *buffer1,ulong *buffer2,undefined8 param1,undefined8 param2)\n\n{\n  ulong size1;\n  ulong size2;\n  int result;\n  undefined4 status;\n  ulong combined;\n  undefined returnValue [16];\n  \n  combined = *buffer1;\n  if (*buffer2 <= *buffer1) {\n    combined = *buffer2;\n  }\n  result = memcmp((void *)(buffer1[3] + 3),(void *)(buffer2[3] + 3),combined - 3);\n  combined = CONCAT44(status,result);\n  if (result == 0) {\n    size1 = buffer1[8];\n    if (size1 < buffer2[7]) {\n      combined = 0xffffffff;\n    }\n    else {\n      size2 = buffer2[8];\n      if (size2 < buffer1[7]) {\n        combined = 1;\n      }\n      else {\n        combined = 0xffffffff;\n        if (buffer2[7] <= buffer1[7]) {\n          if (size2 < size1) {\n            combined = 1;\n          }\n          else {\n            combined = 0xffffffff;\n            if (size2 <= size1) {\n              if (buffer1[2] == 0x100) {\n                combined = (ulong)-(uint)(buffer2[2] != 0x100);\n              }\n              else {\n                combined = (ulong)(buffer2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = param2;\n  returnValue._0_8_ = combined;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "extract_and_process_attributes_001163d0",
                "param_1": "param_pointer_1",
                "param_2": "param_pointer_2",
                "param_3": "param_size",
                "param_4": "output_buffer",
                "uVar1": "result_variable",
                "uVar2": "temp_variable_1",
                "uVar3": "temp_variable_2",
                "bVar4": "bool_variable",
                "puVar5": "pointer_variable",
                "iVar6": "int_variable",
                "uVar7": "temp_variable_3",
                "lVar8": "long_variable",
                "__ptr": "temp_buffer",
                "uVar9": "temp_variable_4",
                "uVar10": "temp_variable_5",
                "uVar11": "temp_variable_6",
                "uVar12": "temp_variable_7",
                "__ptr_00": "temp_buffer_2",
                "uVar13": "temp_variable_8",
                "uVar14": "temp_variable_9",
                "uVar15": "temp_variable_10",
                "uVar16": "temp_variable_11",
                "puVar17": "pointer_variable_2",
                "puVar18": "pointer_variable_3",
                "cVar19": "char_variable"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong extract_and_process_attributes_001163d0(undefined8 *param_pointer_1,undefined8 *param_pointer_2,ulong param_size,undefined *output_buffer)\n\n{\n  ulong result_variable;\n  undefined8 temp_variable_1;\n  undefined8 temp_variable_2;\n  bool bool_variable;\n  ulong *pointer_variable;\n  int int_variable;\n  undefined8 temp_variable_3;\n  long long_variable;\n  void *temp_buffer;\n  ulong temp_variable_4;\n  ulong temp_variable_5;\n  ulong temp_variable_6;\n  ulong temp_variable_7;\n  undefined *temp_buffer_2;\n  ulong temp_variable_8;\n  ulong temp_variable_9;\n  ulong temp_variable_10;\n  ulong temp_variable_11;\n  ulong *pointer_variable_2;\n  undefined *pointer_variable_3;\n  char char_variable;\n  undefined *ptemp_variable_10;\n  int iVar21;\n  undefined *ptemp_variable_12;\n  ulong *ptemp_variable_13;\n  ulong temp_variable_14;\n  size_t __nmemb;\n  ulong *ptemp_variable_15;\n  byte bVar26;\n  ulong local_88;\n  ulong uStack_80;\n  ulong local_70;\n  ulong local_68;\n  ulong *local_60;\n  \n  bVar26 = 0;\n  long_variable = bfd_get_reloc_upper_bound();\n  local_68 = param_size;\n  if (0 < long_variable) {\n    temp_buffer = (void *)xmalloc(long_variable);\n    long_variable = bfd_canonicalize_reloc(param_pointer_1,param_pointer_2,temp_buffer,DAT_001278b0);\n    free(temp_buffer);\n    if (long_variable != 0) {\n      if (_DAT_00127a24 == 0) {\n        temp_variable_1 = *param_pointer_1;\n        temp_variable_2 = *param_pointer_2;\n        temp_variable_3 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_00119ed0(temp_variable_3,temp_variable_1,temp_variable_2);\n      }\n      local_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_60 = (ulong *)xcalloc(param_size / 0xc,0x48,param_size % 0xc);\n  local_88 = 0;\n  local_70 = 0;\n  temp_variable_11 = param_size;\n  temp_variable_10 = 0;\n  ptemp_variable_13 = local_60;\n  temp_variable_9 = 0;\n  ptemp_variable_12 = output_buffer;\n  while (0xb < temp_variable_11) {\n    temp_variable_5 = (**(code **)(param_pointer_1[1] + 0x40))(ptemp_variable_12);\n    *ptemp_variable_13 = temp_variable_5;\n    temp_variable_5 = (**(code **)(param_pointer_1[1] + 0x40))(ptemp_variable_12 + 4);\n    ptemp_variable_13[1] = temp_variable_5;\n    temp_variable_6 = (**(code **)(param_pointer_1[1] + 0x40))(ptemp_variable_12 + 8);\n    temp_variable_5 = *ptemp_variable_13;\n    ptemp_variable_13[2] = temp_variable_6;\n    temp_variable_7 = ptemp_variable_13[1];\n    temp_variable_8 = temp_variable_5 + 3 & 0xfffffffffffffffc;\n    ptemp_variable_13[6] = temp_variable_8;\n    if (temp_variable_7 != (temp_variable_7 + 3 & 0xfffffffffffffffc)) {\n      long_variable = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_variable_6 - 0x100) {\n      long_variable = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result_variable = temp_variable_8 + temp_variable_7 + 0xc;\n    if (temp_variable_11 < result_variable) {\n      long_variable = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_variable_5 < 2) {\n      long_variable = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptemp_variable_13[3] = (ulong)(ptemp_variable_12 + 0xc);\n    ptemp_variable_13[4] = (ulong)(ptemp_variable_12 + temp_variable_8 + 0xc);\n    temp_variable_11 = temp_variable_11 + (-0xc - (temp_variable_8 + temp_variable_7));\n    if (temp_variable_5 != 2) {\n      if (ptemp_variable_12[0xc] == '$') {\n        if ((ptemp_variable_12[0xd] == '\\x01') && (ptemp_variable_12[0xe] == '1')) {\n          temp_variable_11 = extract_build_attributes_00116490();\n          return temp_variable_11;\n        }\n      }\n      else if ((((4 < temp_variable_5) && (ptemp_variable_12[0xc] == 'G')) && (ptemp_variable_12[0xd] == 'A')) &&\n              ((ptemp_variable_12[0xe] == '$' && (ptemp_variable_12[0xf] == '\\x01')))) {\n        if (ptemp_variable_12[0x10] == '2') {\n          temp_variable_11 = extract_build_attributes_00116490();\n          return temp_variable_11;\n        }\n        if (ptemp_variable_12[0x10] == '3') {\n          temp_variable_11 = extract_build_attributes_00116490();\n          return temp_variable_11;\n        }\n        long_variable = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_variable_4 = temp_variable_10;\n    temp_variable_14 = temp_variable_9;\n    if (temp_variable_7 == 0) {\n      if (temp_variable_6 == 0x100) {\n        ptemp_variable_13[7] = local_88;\nLAB_001164af:\n        temp_variable_7 = temp_variable_9;\n        temp_variable_14 = temp_variable_9;\n      }\n      else {\n        ptemp_variable_13[7] = local_70;\nLAB_0011669e:\n        temp_variable_4 = temp_variable_10;\n        temp_variable_7 = temp_variable_10;\n      }\n    }\n    else {\n      if (temp_variable_7 != 0x10) {\n        if (temp_variable_7 < 0x11) {\n          if (temp_variable_7 == 4) {\n            temp_variable_6 = (**(code **)(param_pointer_1[1] + 0x40))();\n            temp_variable_7 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_variable_7 == 8) {\n            temp_variable_11 = extract_build_attributes_001086af();\n            return temp_variable_11;\n          }\n        }\n        long_variable = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp_variable_6 = (**(code **)(param_pointer_1[1] + 0x28))(ptemp_variable_12 + temp_variable_8 + 0xc);\n      temp_variable_7 = (**(code **)(param_pointer_1[1] + 0x28))();\n      if (temp_variable_7 < temp_variable_6) {\n        temp_variable_6 = temp_variable_7;\n      }\nLAB_00116631:\n      if (ptemp_variable_13[2] == 0x100) {\n        if (temp_variable_6 == 0) {\n          temp_variable_6 = local_88;\n        }\n        temp_variable_5 = *ptemp_variable_13;\n        ptemp_variable_13[7] = temp_variable_6;\n        temp_variable_14 = temp_variable_7;\n        local_88 = temp_variable_6;\n        if (temp_variable_7 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_variable_6 == 0) {\n          temp_variable_6 = local_70;\n        }\n        temp_variable_5 = *ptemp_variable_13;\n        ptemp_variable_13[7] = temp_variable_6;\n        temp_variable_4 = temp_variable_7;\n        local_70 = temp_variable_6;\n        if (temp_variable_7 == 0) goto LAB_0011669e;\n      }\n    }\n    ptemp_variable_13[8] = temp_variable_7;\n    if (*(char *)((ptemp_variable_13[3] - 1) + temp_variable_5) != '\\0') {\n      long_variable = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptemp_variable_13 = ptemp_variable_13 + 9;\n    temp_variable_10 = temp_variable_4;\n    temp_variable_9 = temp_variable_14;\n    ptemp_variable_12 = ptemp_variable_12 + result_variable;\n  }\n  if (temp_variable_11 == 0) {\n    temp_variable_1 = *param_pointer_1;\n    temp_variable_2 = *param_pointer_2;\n    temp_variable_3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_00119ed0(temp_variable_3,temp_variable_1,temp_variable_2);\n    __nmemb = ((long)ptemp_variable_13 - (long)local_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_60,__nmemb,0x48,compare_memory_0011a1b0);\n    for (pointer_variable_2 = local_60; pointer_variable_2 < ptemp_variable_13; pointer_variable_2 = pointer_variable_2 + 9) {\n      temp_variable_11 = pointer_variable_2[2];\n      if (temp_variable_11 != 0) {\n        temp_variable_10 = pointer_variable_2[7];\n        temp_variable_9 = pointer_variable_2[8];\n        ptemp_variable_15 = pointer_variable_2;\n        iVar21 = 0;\n        if (temp_variable_10 == temp_variable_9) {\n          pointer_variable_2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              pointer_variable = ptemp_variable_15;\n              ptemp_variable_15 = pointer_variable + -9;\n              if (ptemp_variable_15 < local_60) goto LAB_001167f5;\n              temp_variable_5 = pointer_variable[-7];\n            } while (temp_variable_5 == 0);\n            if ((*ptemp_variable_15 != *pointer_variable_2) ||\n               (int_variable = memcmp((void *)pointer_variable[-6],(void *)pointer_variable_2[3],*pointer_variable_2), int_variable != 0)) break;\n            temp_variable_7 = pointer_variable[-2];\n            temp_variable_6 = pointer_variable[-1];\n            if (temp_variable_10 == temp_variable_7) {\n              if (temp_variable_9 == temp_variable_6) {\n                pointer_variable_2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp_variable_9 <= temp_variable_6) {\n                pointer_variable_2[2] = 0;\n                break;\n              }\n              if (temp_variable_6 < temp_variable_10) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp_variable_6) || (temp_variable_10 <= (temp_variable_6 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_00116852;\n              }\nLAB_001167b8:\n              if ((temp_variable_11 == 0x101) == (temp_variable_5 == 0x101)) {\n                if (temp_variable_6 <= temp_variable_9) {\n                  temp_variable_6 = temp_variable_9;\n                }\n                if (temp_variable_7 < temp_variable_10) {\n                  temp_variable_10 = temp_variable_7;\n                }\n                pointer_variable[-1] = temp_variable_6;\n                pointer_variable[-2] = temp_variable_10;\n                pointer_variable_2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_variable_7 <= temp_variable_10) goto LAB_001167a6;\n              if (temp_variable_6 < temp_variable_10) goto LAB_0010852c;\n              if (temp_variable_9 < temp_variable_10) {\n                if ((0xfffffffffffffff0 < temp_variable_9) || (temp_variable_7 <= (temp_variable_9 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp_variable_9 != temp_variable_6) goto LAB_001167b8;\n            }\nprocess_data_00116852:\n            bool_variable = iVar21 < 0x11;\n            iVar21 = iVar21 + 1;\n          } while (bool_variable);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_60,__nmemb,0x48,compare_params_0011a250);\n    temp_buffer_2 = (undefined *)xmalloc(param_size * 2);\n    uStack_80 = 0;\n    local_70 = 0;\n    ptemp_variable_12 = temp_buffer_2;\n    for (pointer_variable_2 = local_60; pointer_variable_2 < ptemp_variable_13; pointer_variable_2 = pointer_variable_2 + 9) {\n      if (pointer_variable_2[2] != 0) {\n        pointer_variable_3 = ptemp_variable_12 + 0xc;\n        if ((pointer_variable_2[7] == local_70) && (pointer_variable_2[8] == uStack_80)) {\n          (**(code **)(param_pointer_1[1] + 0x50))(*pointer_variable_2,ptemp_variable_12);\n          (**(code **)(param_pointer_1[1] + 0x50))(0,ptemp_variable_12 + 4);\n          (**(code **)(param_pointer_1[1] + 0x50))(pointer_variable_2[2],ptemp_variable_12 + 8);\n          temp_variable_10 = pointer_variable_2[6];\n          temp_variable_11 = *pointer_variable_2;\n          ptemp_variable_12 = (undefined *)pointer_variable_2[3];\n          ptemp_variable_10 = pointer_variable_3;\n          for (temp_variable_9 = temp_variable_11; temp_variable_9 != 0; temp_variable_9 = temp_variable_9 - 1) {\n            *ptemp_variable_10 = *ptemp_variable_12;\n            ptemp_variable_12 = ptemp_variable_12 + (ulong)bVar26 * -2 + 1;\n            ptemp_variable_10 = ptemp_variable_10 + (ulong)bVar26 * -2 + 1;\n          }\n          if (temp_variable_11 < temp_variable_10) {\n            for (long_variable = temp_variable_10 - temp_variable_11; long_variable != 0; long_variable = long_variable + -1) {\n              *ptemp_variable_10 = 0;\n              ptemp_variable_10 = ptemp_variable_10 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          ptemp_variable_12 = pointer_variable_3 + temp_variable_10;\n        }\n        else {\n          (**(code **)(param_pointer_1[1] + 0x50))();\n          if (*(int *)(param_pointer_1[1] + 8) == 5) {\n            char_variable = (*(char *)(param_pointer_1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_variable = '\\b';\n          }\n          (**(code **)(param_pointer_1[1] + 0x50))(char_variable,ptemp_variable_12 + 4);\n          (**(code **)(param_pointer_1[1] + 0x50))(pointer_variable_2[2],ptemp_variable_12 + 8);\n          temp_variable_11 = *pointer_variable_2;\n          ptemp_variable_12 = (undefined *)pointer_variable_2[3];\n          ptemp_variable_10 = pointer_variable_3;\n          for (temp_variable_10 = temp_variable_11; temp_variable_10 != 0; temp_variable_10 = temp_variable_10 - 1) {\n            *ptemp_variable_10 = *ptemp_variable_12;\n            ptemp_variable_12 = ptemp_variable_12 + (ulong)bVar26 * -2 + 1;\n            ptemp_variable_10 = ptemp_variable_10 + (ulong)bVar26 * -2 + 1;\n          }\n          temp_variable_10 = pointer_variable_2[6];\n          if (temp_variable_11 < temp_variable_10) {\n            for (long_variable = temp_variable_10 - temp_variable_11; long_variable != 0; long_variable = long_variable + -1) {\n              *ptemp_variable_10 = 0;\n              ptemp_variable_10 = ptemp_variable_10 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          long_variable = param_pointer_1[1];\n          pointer_variable_3 = pointer_variable_3 + temp_variable_10;\n          ptemp_variable_12 = pointer_variable_3 + 8;\n          if ((*(int *)(long_variable + 8) == 5) && (*(char *)(param_pointer_1[0x22] + 4) == '\\x02')) {\n            (**(code **)(long_variable + 0x38))(pointer_variable_2[7],pointer_variable_3);\n            (**(code **)(param_pointer_1[1] + 0x38))(pointer_variable_2[8],ptemp_variable_12);\n            ptemp_variable_12 = pointer_variable_3 + 0x10;\n          }\n          else {\n            (**(code **)(long_variable + 0x50))(pointer_variable_2[7],pointer_variable_3);\n            (**(code **)(param_pointer_1[1] + 0x50))(pointer_variable_2[8],pointer_variable_3 + 4);\n          }\n          local_70 = pointer_variable_2[7];\n          uStack_80 = pointer_variable_2[8];\n        }\n      }\n    }\n    temp_variable_10 = (long)ptemp_variable_12 - (long)temp_buffer_2;\n    temp_variable_11 = temp_variable_10;\n    ptemp_variable_12 = temp_buffer_2;\n    local_68 = param_size;\n    if (temp_variable_10 < param_size) {\n      for (; local_68 = temp_variable_10, temp_variable_11 != 0; temp_variable_11 = temp_variable_11 - 1) {\n        *output_buffer = *ptemp_variable_12;\n        ptemp_variable_12 = ptemp_variable_12 + (ulong)bVar26 * -2 + 1;\n        output_buffer = output_buffer + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(temp_buffer_2);\n  }\n  else {\n    long_variable = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (long_variable != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,param_pointer_1,param_pointer_2,long_variable);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_60);\n  return local_68;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xcalloc",
                "free",
                "xmalloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_process_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "text",
                "dcgettext": "getTranslatedText"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *text;\n  \n  usageString = DAT_001275e0;\n  text = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,text,usageString);\n  text = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  print_supported_targets_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_and_compare_string_00108c86",
                "param_1": "input_ptr",
                "cVar1": "result",
                "iVar2": "string_comparison_result",
                "sVar3": "string_length",
                "puVar4": "new_string_ptr",
                "lVar5": "string_length_loop_index",
                "__s": "input_string",
                "__s1": "input_string_suffix",
                "puVar6": "new_string_ptr_loop",
                "uVar7": "output_value",
                "bVar8": "loop_flag"
            },
            "code": "\nundefined8 extract_and_compare_string_00108c86(long *input_ptr)\n\n{\n  char result;\n  int string_comparison_result;\n  size_t string_length;\n  undefined2 *new_string_ptr;\n  long string_length_loop_index;\n  char *input_string;\n  char *input_string_suffix;\n  undefined2 *new_string_ptr_loop;\n  undefined8 output_value;\n  byte loop_flag;\n  \n  loop_flag = 0;\n  string_length_loop_index = *input_ptr;\n  input_string = (char *)(string_length_loop_index + 4);\n  result = string_comparison_00113fb0(input_string,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = string_comparison_00113fb0(input_string,\"bsdrv-\");\n    if (result == '\\0') {\n      result = string_comparison_00113fb0(input_string,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(string_length_loop_index + 6);\n      output_value = 0xc;\n    }\n    else {\n      input_string = (char *)(string_length_loop_index + 6);\n      output_value = 0xb;\n    }\n  }\n  else {\n    output_value = 10;\n  }\n  string_length = strlen(input_string);\n  new_string_ptr = (undefined2 *)xmalloc(string_length + 8);\n  input_string_suffix = input_string + 4;\n  new_string_ptr_loop = new_string_ptr;\n  for (string_length_loop_index = string_length + 1; string_length_loop_index != 0; string_length_loop_index = string_length_loop_index + -1) {\n    *(char *)new_string_ptr_loop = *input_string;\n    input_string = input_string + (ulong)loop_flag * -2 + 1;\n    new_string_ptr_loop = (undefined2 *)((long)new_string_ptr_loop + (ulong)loop_flag * -2 + 1);\n  }\n  *(undefined *)(new_string_ptr + 1) = 0x69;\n  *new_string_ptr = 0x6570;\n  string_comparison_result = strcmp(input_string_suffix,\"ia32\");\n  if (string_comparison_result == 0) {\n    *(undefined *)((long)new_string_ptr + 7) = 0x36;\n    *(undefined2 *)((long)new_string_ptr + 5) = 0x3833;\n  }\n  else {\n    string_comparison_result = strcmp(input_string_suffix,\"x86_64\");\n    if (string_comparison_result == 0) {\n      *(undefined *)((long)new_string_ptr + 7) = 0x2d;\n    }\n    else {\n      string_comparison_result = strcmp(input_string_suffix,\"aarch64\");\n      if (string_comparison_result == 0) {\n        *(undefined8 *)((long)new_string_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string_ptr;\n  return output_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_and_compare_string_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "localizedFormatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *localizedFormatString;\n  \n  localizedFormatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,localizedFormatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_and_close_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "errorMessagePointer"
            },
            "code": "\nundefined4 printErrorAndClose_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *errorMessagePointer;\n  \n  print_error_0011a110(*errorMessagePointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_and_close_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_update_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "permissions",
                "unaff_R14": "structure_address"
            },
            "code": "\nvoid validate_and_update_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint permissions;\n  long structure_address;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  if ((((flags & 8) == 0) || ((permissions & 0x10) == 0)) && ((permissions & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((permissions & 0x40) == 0)) && ((permissions & 0x60) != 0x60)) {\n      *(uint *)(structure_address + 0x14) = flags | permissions;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(error_message);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_and_update_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "destinationIterator",
                "bVar4": "isReversed"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *destinationIterator;\n  byte isReversed;\n  \n  isReversed = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destinationIterator = destination;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destinationIterator = *source;\n    source = source + (ulong)isReversed * -2 + 1;\n    destinationIterator = destinationIterator + (ulong)isReversed * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010afd5",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_or_update_memory_0010da0b",
                "param_1": "memoryPointer",
                "param_2": "slotIndex",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "errorMessage",
                "plVar2": "newMemoryPointer",
                "lVar3": "initialOffset",
                "lVar4": "secondaryOffset",
                "uVar5": "tempSlotIndex",
                "bVar6": "loopCounter",
                "auVar7": "returnValues"
            },
            "code": "\nundefined  [16] allocateOrUpdateMemory_0010da0b(long **memoryPointer,ulong slotIndex,undefined8 value1,undefined8 value2)\n\n{\n  undefined8 errorMessage;\n  long *newMemoryPointer;\n  long initialOffset;\n  long secondaryOffset;\n  ulong tempSlotIndex;\n  byte loopCounter;\n  undefined returnValues [16];\n  \n  loopCounter = 0;\n  tempSlotIndex = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)tempSlotIndex; tempSlotIndex = tempSlotIndex - 0x10) {\n      if (*memoryPointer == (long *)0x0) {\n        newMemoryPointer = (long *)xmalloc(0x88);\n        *memoryPointer = newMemoryPointer;\n        for (initialOffset = 0x22; initialOffset != 0; initialOffset = initialOffset + -1) {\n          *(undefined4 *)newMemoryPointer = 0;\n          newMemoryPointer = (long *)((long)newMemoryPointer + (ulong)loopCounter * -8 + 4);\n        }\n      }\n      memoryPointer = (long **)*memoryPointer;\n    }\n    initialOffset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      initialOffset = 0;\n    }\n    if (*memoryPointer == (long *)0x0) {\n      newMemoryPointer = (long *)xmalloc(0x88);\n      *memoryPointer = newMemoryPointer;\n      for (secondaryOffset = 0x22; secondaryOffset != 0; secondaryOffset = secondaryOffset + -1) {\n        *(undefined4 *)newMemoryPointer = 0;\n        newMemoryPointer = (long *)((long)newMemoryPointer + (ulong)loopCounter * -8 + 4);\n      }\n    }\n    returnValues._8_8_ = value2;\n    returnValues._0_8_ = *memoryPointer + slotIndex + initialOffset + 1;\n    return returnValues;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_or_update_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "allocate_memory_00112894",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "puVar1": "memory_block",
                "puVar2": "current_ptr",
                "lVar3": "loop_counter",
                "bVar4": "byte_value"
            },
            "code": "\nundefined8 *\nallocate_memory_00112894(undefined8 input_param1,undefined input_param2,undefined8 input_param3,undefined8 input_param4)\n\n{\n  undefined8 *memory_block;\n  undefined8 *current_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  memory_block = (undefined8 *)xmalloc(0x1b0);\n  current_ptr = memory_block;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)current_ptr = 0;\n    current_ptr = (undefined8 *)((long)current_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *memory_block = input_param1;\n  *(undefined *)(memory_block + 1) = input_param2;\n  memory_block[2] = input_param3;\n  memory_block[3] = input_param4;\n  *(undefined4 *)(memory_block + 0x10) = 1;\n  current_ptr = (undefined8 *)xmalloc(8);\n  memory_block[0xd] = 0xffffffffffffffff;\n  memory_block[0x11] = current_ptr;\n  *current_ptr = 0;\n  return memory_block;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "allocate_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_pointers_00109b2f"
            },
            "code": "\nundefined8 * extract_pointers_00109b2f(long param_1)\n\n{\n  undefined8 *__ptr;\n  undefined8 *puVar1;\n  \n  __ptr = *(undefined8 **)(param_1 + 0x60);\n  if (__ptr != (undefined8 *)0x0) {\n    puVar1 = (undefined8 *)__ptr[1];\n    *(undefined8 *)(param_1 + 0x60) = *__ptr;\n    free(__ptr);\n    return puVar1;\n  }\n  return __ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a94e",
                "FUN_0010a0e9",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "extract_pointers_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "input_file",
                "param_2": "symbol_1",
                "param_3": "symbol_2",
                "param_4": "result",
                "ppcVar1": "symbol_entries",
                "pcVar2": "duplicate_symbol",
                "lVar3": "symbol_entry_result",
                "uVar4": "error_message",
                "plVar5": "symbol_entry_slot"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 input_file,char *symbol_1,char *symbol_2,undefined8 result)\n\n{\n  char **symbol_entries;\n  char *duplicate_symbol;\n  long symbol_entry_result;\n  undefined8 error_message;\n  long *symbol_entry_slot;\n  \n  symbol_entries = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_1);\n  *symbol_entries = duplicate_symbol;\n  duplicate_symbol = strdup(symbol_2);\n  error_message = DAT_001278d0;\n  symbol_entries[1] = duplicate_symbol;\n  symbol_entry_result = htab_find(error_message,symbol_entries);\n  if (symbol_entry_result != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,symbol_1);\n  }\n  symbol_entry_result = htab_find(DAT_001278c8,symbol_2);\n  if (symbol_entry_result != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,symbol_2);\n  }\n  symbol_entry_slot = (long *)htab_find_slot(DAT_001278d0,symbol_entries,1);\n  error_message = DAT_001278c8;\n  *symbol_entry_slot = (long)symbol_entries;\n  duplicate_symbol = symbol_entries[1];\n  symbol_entries = (char **)htab_find_slot(error_message,duplicate_symbol,1);\n  *symbol_entries = duplicate_symbol;\n  return result;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strdup",
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_and_send_data_0010e9a0",
                "param_1": "data",
                "param_2": "message",
                "param_3": "type",
                "param_4": "param",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "pointers",
                "__s_00": "tempString",
                "sVar3": "messageLength",
                "sVar4": "pointersLength",
                "__s_01": "finalString",
                "pcVar5": "typeSymbol",
                "uVar6": "flag"
            },
            "code": "\nundefined4 processAndSendData_0010e9a0(long data,char *message,undefined4 type,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *pointers;\n  byte *tempString;\n  size_t messageLength;\n  size_t pointersLength;\n  char *finalString;\n  char *typeSymbol;\n  undefined8 flag;\n  \n  pointers = (byte *)extract_pointers_00109b2f();\n  switch(type) {\n  case 1:\n    typeSymbol = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    typeSymbol = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    typeSymbol = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    typeSymbol = \"\";\n    flag = 0x80;\n    if (((&_sch_istable)[(ulong)*pointers * 2] & 4) == 0) {\n      counter = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = counter + 1;\n      messageLength = strlen((char *)pointers);\n      tempString = (byte *)xmalloc(messageLength + 0x14);\n      sprintf((char *)tempString,\"%ld=%s\",counter,pointers);\n      free(pointers);\n      pointers = tempString;\n    }\n    break;\n  case 5:\n    typeSymbol = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  messageLength = strlen(message);\n  pointersLength = strlen((char *)pointers);\n  finalString = (char *)xmalloc(messageLength + 3 + pointersLength);\n  sprintf(finalString,\"%s:%s%s\",message,typeSymbol,pointers);\n  free(pointers);\n  result = process_string_0010e2f0(data,flag,0,param,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_match_error_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage",
                "print_error_and_exit_00119dd0": "printErrorMessageAndExit"
            },
            "code": "\nvoid handleSectionMatchError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  sectionValue = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  printErrorMessageAndExit(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_section_match_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printErrorAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,isEqualString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "free",
                "htab_hash_string",
                "htab_create_alloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_copy_data_00108179",
                "unaff_RBX": "target_struct_ptr",
                "unaff_RBP": "caller_struct_ptr",
                "unaff_R12": "data_struct_ptr",
                "unaff_R14B": "should_update_alignment",
                "unaff_R15": "source_struct_ptr",
                "lVar1": "target_data_ptr",
                "lVar2": "data_entry",
                "cVar3": "status_flag",
                "lVar4": "error_message",
                "lVar5": "found_data_entry"
            },
            "code": "\nvoid set_alignment_and_copy_data_00108179(void)\n\n{\n  long target_data_ptr;\n  long data_entry;\n  char status_flag;\n  long error_message;\n  long found_data_entry;\n  long target_struct_ptr;\n  long caller_struct_ptr;\n  long data_struct_ptr;\n  char should_update_alignment;\n  long source_struct_ptr;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(source_struct_ptr + 0xb4) = *(undefined4 *)(target_struct_ptr + 0xb4);\n  *(byte *)(source_struct_ptr + 0x28) =\n       *(byte *)(source_struct_ptr + 0x28) & 0xcf | *(byte *)(target_struct_ptr + 0x28) & 0x30;\n  *(long *)(target_struct_ptr + 0x60) = source_struct_ptr;\n  *(undefined8 *)(target_struct_ptr + 0x58) = 0;\n  if ((*(byte *)(target_struct_ptr + 0x27) & 2) != 0) {\n    target_data_ptr = *(long *)(target_struct_ptr + 0xd0);\n    found_data_entry = find_data_entry_00115d00(target_data_ptr,*(undefined8 *)(target_struct_ptr + 0xe0));\n    if ((found_data_entry != 0) &&\n       (data_entry = *(long *)(data_struct_ptr + 8), *(uint *)(found_data_entry + 0x18) = *(uint *)(found_data_entry + 0x18) | 0x20,\n       *(int *)(data_entry + 8) == 5)) {\n      *(long *)(target_data_ptr + 0xb0) = found_data_entry;\n      status_flag = (**(code **)(*(long *)(caller_struct_ptr + 8) + 0x158))();\n      if (status_flag == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  status_flag = (**(code **)(*(long *)(caller_struct_ptr + 8) + 0x158))();\n  if (status_flag == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (should_update_alignment != '\\0') {\n    *(undefined4 *)(*(long *)(source_struct_ptr + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "dcgettext",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_and_copy_data_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_file_info_00109022",
                "param_1": "fileInfoAddress",
                "param_2": "fileIndices",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileIndex",
                "pcVar2": "errorMessage",
                "plVar3": "fileInfo",
                "lVar4": "counter",
                "uVar5": "typeIndex",
                "pplVar6": "fileInfoPtr",
                "bVar7": "byteVar",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] extractFileInfo_00109022(long fileInfoAddress,uint *fileIndices,undefined8 param3,undefined8 param4)\n\n{\n  uint fileIndex;\n  char *errorMessage;\n  long *fileInfo;\n  long counter;\n  uint typeIndex;\n  long **fileInfoPtr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  typeIndex = *fileIndices;\n  fileIndex = fileIndices[1];\n  if (((int)typeIndex < 0) || (*(uint *)(fileInfoAddress + 0x80) <= typeIndex)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)typeIndex);\n  }\n  else {\n    if (-1 < (int)fileIndex) {\n      fileInfoPtr = (long **)(*(long *)(fileInfoAddress + 0x88) + (long)(int)typeIndex * 8);\n      for (typeIndex = fileIndex; 0xf < (int)typeIndex; typeIndex = typeIndex - 0x10) {\n        if (*fileInfoPtr == (long *)0x0) {\n          fileInfo = (long *)xmalloc(0x88);\n          *fileInfoPtr = fileInfo;\n          for (counter = 0x22; counter != 0; counter = counter + -1) {\n            *(undefined4 *)fileInfo = 0;\n            fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileInfoPtr = (long **)*fileInfoPtr;\n      }\n      if (*fileInfoPtr == (long *)0x0) {\n        fileInfo = (long *)xmalloc(0x88);\n        *fileInfoPtr = fileInfo;\n        for (counter = 0x22; counter != 0; counter = counter + -1) {\n          *(undefined4 *)fileInfo = 0;\n          fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileInfo = *fileInfoPtr + (long)(int)((fileIndex >> 4) * -0x10 + fileIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileIndex);\n  }\n  fileInfo = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param4;\n  result._0_8_ = fileInfo;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_file_info_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "initialize_debug_variable_0010c05d",
                "param_1": "file_ptr",
                "param_2": "record_size",
                "param_3": "debug_level",
                "param_4": "record_type",
                "param_5": "message",
                "param_6": "result",
                "auVar1": "return_value",
                "uVar2": "error_message",
                "piVar3": "debug_info",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "memory_location",
                "piVar7": "debug_info_ptr",
                "bVar8": "bool_value",
                "auVar9": "updated_result"
            },
            "code": "\n\n\nundefined  [16]\ninitialize_debug_variable_0010c05d(long file_ptr,long record_size,ulong debug_level,int record_type,undefined8 message,\n            undefined8 result)\n\n{\n  undefined return_value [16];\n  undefined8 error_message;\n  int *debug_info;\n  char flag;\n  long loop_counter;\n  long memory_location;\n  int *debug_info_ptr;\n  byte bool_value;\n  undefined updated_result [16];\n  \n  bool_value = 0;\n  if (record_size == 0) {\n    return_value._8_8_ = 0;\n    return_value._0_8_ = debug_level;\n    return return_value << 0x40;\n  }\n  if (debug_level != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (memory_location = *(long *)(file_ptr + 0x10), memory_location == 0)) {\n      error_message = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      if (record_type - 1U < 2) {\n        memory_location = memory_location + 0x10;\n        flag = (record_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        memory_location = memory_location + 0x10;\n        flag = '\\0';\n      }\n      else {\n        memory_location = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      memory_location = initialize_memory_00112925(memory_location,record_size,2,flag);\n      if (memory_location != 0) {\n        debug_info = (int *)xmalloc(0x18);\n        debug_info_ptr = debug_info + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *debug_info_ptr = 0;\n          debug_info_ptr = debug_info_ptr + (ulong)bool_value * -2 + 1;\n        }\n        *debug_info = record_type;\n        error_message = 1;\n        *(ulong *)(debug_info + 2) = debug_level;\n        *(undefined8 *)(debug_info + 4) = message;\n        *(int **)(memory_location + 0x20) = debug_info;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010c12e:\n  updated_result._8_8_ = result;\n  updated_result._0_8_ = error_message;\n  return updated_result;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "imported": false,
            "current_name": "initialize_debug_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_format_data_00109d97",
                "param_1": "ptr_param",
                "lVar1": "ptr_lVar",
                "local_40": "local_buffer"
            },
            "code": "\nvoid initialize_or_format_data_00109d97(long ptr_param)\n\n{\n  long ptr_lVar;\n  char local_buffer [40];\n  \n  if (*(long *)(ptr_param + 0x70) != 0) {\n    format_and_initialize_data_00109cf4(ptr_param,*(long *)(ptr_param + 0x70),0);\n    return;\n  }\n  ptr_lVar = *(long *)(ptr_param + 0x68);\n  *(long *)(ptr_param + 0x68) = ptr_lVar + 1;\n  sprintf(local_buffer,\"%ld=%ld\",ptr_lVar,ptr_lVar);\n  initialize_data_00109b52(ptr_param,local_buffer,ptr_lVar,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "initialize_or_format_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "extract_build_attributes_001086af",
                "unaff_R14": "function_pointers",
                "param_7": "in_RCX",
                "uVar9": "min_description_size",
                "uVar10": "name_length",
                "uVar13": "min_version",
                "uVar20": "max_version",
                "unaff_RBX": "remaining_size",
                "unaff_RBP": "name_type",
                "unaff_R12": "attribute_data",
                "unaff_R13": "note_type",
                "unaff_retaddr": "default_version",
                "param_9": "default_note_type",
                "param_11": "build_attributes",
                "in_stack_00000030": "output_pointer",
                "param_10": "output_size",
                "in_stack_00000038": "version_note_present",
                "param_13": "attribute_notes_present",
                "param_14": "version_note"
            },
            "code": "\nulong extract_build_attributes_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong min_description_size;\n  ulong name_length;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong min_version;\n  ulong uVar14;\n  ulong remaining_size;\n  ulong name_type;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *attribute_data;\n  ulong note_type;\n  ulong max_version;\n  size_t __nmemb;\n  undefined8 *function_pointers;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong default_version;\n  ulong in_RCX;\n  uint param_8;\n  ulong default_note_type;\n  ulong output_size;\n  ulong *build_attributes;\n  undefined *output_pointer;\n  uint version_note_present;\n  uint attribute_notes_present;\n  undefined8 *version_note;\n  \n  bVar22 = 0;\n  in_RCX = in_RCX;\n  min_description_size = (**(code **)(function_pointers[1] + 0x40))();\n  name_length = (**(code **)(function_pointers[1] + 0x40))(attribute_data[4] + 4);\nLAB_0011662a:\n  min_version = name_type;\n  max_version = note_type;\n  if (name_length < min_description_size) {\n    min_description_size = name_length;\n  }\n  do {\n    uVar11 = in_RCX;\n    uVar12 = in_RCX;\n    puVar15 = attribute_data;\n    if (attribute_data[2] == 0x100) {\n      if (min_description_size == 0) {\n        min_description_size = default_version;\n      }\n      uVar14 = *attribute_data;\n      attribute_data[7] = min_description_size;\n      name_type = min_version;\n      note_type = name_length;\n      default_version = min_description_size;\n      if (name_length == 0) goto LAB_001164af;\n    }\n    else {\n      if (min_description_size == 0) {\n        min_description_size = default_note_type;\n      }\n      uVar14 = *attribute_data;\n      attribute_data[7] = min_description_size;\n      name_type = name_length;\n      note_type = max_version;\n      default_note_type = min_description_size;\n      if (name_length == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = name_length;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attribute_data = puVar15 + 9;\n    if (remaining_size < 0xc) {\n      if (remaining_size != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((version_note_present | attribute_notes_present | param_8) != 0) {\n        if (((attribute_notes_present | param_8) == 0) || (version_note_present == 0)) {\n          if (attribute_notes_present == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *function_pointers;\n      uVar3 = *version_note;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_00119ed0(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)attribute_data - (long)build_attributes >> 3) * -0x71c71c71c71c71c7;\n      qsort(build_attributes,__nmemb,0x48,compare_memory_0011a1b0);\n      puVar15 = build_attributes;\n      goto LAB_001167f9;\n    }\n    name_length = (**(code **)(function_pointers[1] + 0x40))(uVar12);\n    *attribute_data = name_length;\n    name_length = (**(code **)(function_pointers[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = name_length;\n    min_description_size = (**(code **)(function_pointers[1] + 0x40))(uVar12 + 8);\n    uVar14 = *attribute_data;\n    puVar15[0xb] = min_description_size;\n    name_length = puVar15[10];\n    min_version = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = min_version;\n    if (name_length != (name_length + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < min_description_size - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = min_version + name_length + 0xc;\n    if (remaining_size < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + min_version;\n    puVar15[0xd] = uVar1;\n    remaining_size = remaining_size + (-0xc - (min_version + name_length));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          name_length = extract_build_attributes_001086af_00116490();\n          return name_length;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          name_length = extract_build_attributes_001086af_00116490();\n          return name_length;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          name_length = extract_build_attributes_001086af_00116490();\n          return name_length;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    min_version = name_type;\n    max_version = note_type;\n    if (name_length == 0) {\n      if (min_description_size == 0x100) {\n        puVar15[0x10] = default_version;\nLAB_001164af:\n        uVar12 = uVar11;\n        name_length = max_version;\n        puVar15 = attribute_data;\n        note_type = max_version;\n      }\n      else {\n        puVar15[0x10] = default_note_type;\nLAB_0011669e:\n        name_type = min_version;\n        uVar12 = uVar11;\n        name_length = min_version;\n        puVar15 = attribute_data;\n        note_type = max_version;\n      }\n      goto LAB_001164bb;\n    }\n    if (name_length == 0x10) break;\n    if (0x10 < name_length) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,function_pointers,version_note,lVar7);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (name_length != 4) {\n      if (name_length == 8) {\n        name_length = extract_build_attributes_001086af();\n        return name_length;\n      }\n      goto LAB_00116679;\n    }\n    in_RCX = uVar11;\n    min_description_size = (**(code **)(function_pointers[1] + 0x40))();\n    name_length = 0xffffffffffffffff;\n  } while( true );\n  in_RCX = uVar11;\n  min_description_size = (**(code **)(function_pointers[1] + 0x28))(uVar1);\n  name_length = (**(code **)(function_pointers[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (attribute_data <= puVar15) {\n    qsort(build_attributes,__nmemb,0x48,compare_params_0011a250);\n    __ptr = (undefined *)xmalloc(output_size * 2);\n    in_RCX = 0;\n    default_note_type = 0;\n    puVar19 = __ptr;\n    for (puVar15 = build_attributes; puVar15 < attribute_data; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == default_note_type) && (puVar15[8] == in_RCX)) {\n          (**(code **)(function_pointers[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(function_pointers[1] + 0x50))(0,puVar18);\n          (**(code **)(function_pointers[1] + 0x50))(puVar15[2],puVar19 + 8);\n          min_description_size = puVar15[6];\n          name_length = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (min_version = name_length; min_version != 0; min_version = min_version - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (name_length < min_description_size) {\n            for (lVar7 = min_description_size - name_length; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + min_description_size;\n        }\n        else {\n          (**(code **)(function_pointers[1] + 0x50))();\n          if (*(int *)(function_pointers[1] + 8) == 5) {\n            cVar17 = (*(char *)(function_pointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(function_pointers[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(function_pointers[1] + 0x50))(puVar15[2],puVar19 + 8);\n          name_length = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (min_description_size = name_length; min_description_size != 0; min_description_size = min_description_size - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          min_description_size = puVar15[6];\n          if (name_length < min_description_size) {\n            for (lVar7 = min_description_size - name_length; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = function_pointers[1];\n          puVar16 = puVar16 + min_description_size;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(function_pointers[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(function_pointers[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(function_pointers[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          default_note_type = puVar15[7];\n          in_RCX = puVar15[8];\n        }\n      }\n    }\n    min_description_size = (long)puVar19 - (long)__ptr;\n    name_length = min_description_size;\n    puVar19 = __ptr;\n    if (min_description_size < output_size) {\n      for (; output_size = min_description_size, name_length != 0; name_length = name_length - 1) {\n        *output_pointer = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        output_pointer = output_pointer + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(build_attributes);\n    return output_size;\n  }\n  if (puVar15[2] != 0) {\n    name_length = puVar15[7];\n    min_description_size = puVar15[8];\n    min_version = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (name_length == min_description_size) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < build_attributes) goto LAB_001167f5;\n          max_version = puVar5[-7];\n        } while (max_version == 0);\n        in_RCX = min_version;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        min_version = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (name_length == min_version) {\n          if (min_description_size == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (min_description_size <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < name_length) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (name_length <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n          }\nLAB_001167b8:\n          if ((in_RCX == 0x101) == (max_version == 0x101)) {\n            if (uVar11 <= min_description_size) {\n              uVar11 = min_description_size;\n            }\n            if (min_version < name_length) {\n              name_length = min_version;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = name_length;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (min_version <= name_length) goto LAB_001167a6;\n          if (uVar11 < name_length) goto LAB_0010852c;\n          if (min_description_size < name_length) {\n            if ((0xfffffffffffffff0 < min_description_size) || (min_version <= (min_description_size + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n            goto LAB_001167b8;\n          }\n          if (min_description_size != uVar11) goto LAB_001167b8;\n        }\nprocess_data_00116852:\n        bVar4 = iVar23 < 0x11;\n        min_version = in_RCX;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_0011a1b0",
                "qsort",
                "FUN_00116490",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_0010847a",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "concatenate_and_return_0010add5",
                "concatenate_strings_0010abdd": "concatenateStrings"
            },
            "code": "\nvoid concatenateAndReturn_0010add5(void)\n\n{\n  concatenateStrings();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_and_return_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_memory_00113e17"
            },
            "code": "\nvoid initialize_memory_00113e17(void)\n\n{\n  initialize_memory_00113e17_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_00109b52",
                "param_1": "dataStructure",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "dynamicArray",
                "uVar1": "tempVar",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeData_00109b52(long dataStructure,undefined8 inputString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 tempVar;\n  undefined8 *dynamicArray;\n  undefined8 duplicatedString;\n  \n  dynamicArray = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(inputString);\n  dynamicArray[2] = param3;\n  *(undefined (*) [16])(dynamicArray + 4) = ZEXT816(0);\n  *(undefined (*) [16])(dynamicArray + 6) = ZEXT816(0);\n  tempVar = *(undefined8 *)(dataStructure + 0x60);\n  *(undefined *)((long)dynamicArray + 0x1c) = param4;\n  *(undefined4 *)(dynamicArray + 3) = param5;\n  *(undefined8 **)(dataStructure + 0x60) = dynamicArray;\n  *dynamicArray = tempVar;\n  dynamicArray[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010a0e9",
                "FUN_0010a181",
                "FUN_00109d97",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_0010a2b9",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_number_00109a32",
                "param_1": "input_string",
                "param_2": "overflow_flag",
                "param_3": "end_of_buffer",
                "param_4": "unknown_param_4",
                "param_5": "unknown_param_5",
                "__nptr": "number_string",
                "piVar1": "errno_pointer",
                "uVar2": "parsed_number",
                "uVar3": "localized_error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_unsigned_number_00109a32(char **input_string,undefined *overflow_flag,char *end_of_buffer,undefined8 unknown_param_4,undefined8 unknown_param_5)\n\n{\n  char *number_string;\n  int *errno_pointer;\n  ulong parsed_number;\n  undefined8 localized_error_message;\n  undefined return_value [16];\n  \n  if (overflow_flag != (undefined *)0x0) {\n    *overflow_flag = 0;\n  }\n  number_string = *input_string;\n  if ((number_string < end_of_buffer) && (*number_string != '\\0')) {\n    errno_pointer = __errno_location();\n    *errno_pointer = 0;\n    parsed_number = strtoul(number_string,input_string,0);\n    if ((parsed_number != 0xffffffffffffffff) || (*errno_pointer == 0)) goto LAB_00109aa9;\n    if (overflow_flag == (undefined *)0x0) {\n      localized_error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(number_string,localized_error_message);\n    }\n    else {\n      *overflow_flag = 1;\n    }\n  }\n  parsed_number = 0;\nLAB_00109aa9:\n  return_value._8_8_ = unknown_param_5;\n  return_value._0_8_ = parsed_number;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108fe8",
                "dcgettext",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_unsigned_number_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "parse_debug_tag_0010c6be",
                "param_1": "fileOffset",
                "param_2": "tagName",
                "param_3": "debugTag",
                "iVar1": "comparisonResult",
                "uVar2": "errorMessage",
                "piVar3": "newDebugTag",
                "pauVar4": "tagInfo",
                "lVar5": "tempValue",
                "pcVar6": "errorString"
            },
            "code": "\n\n\nint * parseDebugTag_0010c6be(long fileOffset,char *tagName,int *debugTag)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  int *newDebugTag;\n  undefined (*tagInfo) [16];\n  long tempValue;\n  char *errorString;\n  \n  if ((tagName != (char *)0x0) && (debugTag != (int *)0x0)) {\n    if (*(long *)(fileOffset + 0x10) == 0) {\n      errorString = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*debugTag != 0x17) {\n        newDebugTag = (int *)initialize_memory_00112904(0x17,0);\n        if (newDebugTag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagInfo = (undefined (*) [16])xmalloc(0x10);\n        tempValue = *(long *)(fileOffset + 0x10);\n        *tagInfo = ZEXT816(0);\n        *(int **)(*tagInfo + 8) = debugTag;\n        *(undefined (**) [16])(newDebugTag + 4) = tagInfo;\n        tempValue = initialize_memory_00112925(tempValue + 0x10,tagName,1,3);\n        if (tempValue == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(tempValue + 0x20) = newDebugTag;\n        *(long *)*tagInfo = tempValue;\n        return newDebugTag;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(debugTag + 4) + 8),tagName);\n      errorString = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return debugTag;\n      }\n    }\n    errorMessage = dcgettext(0,errorString,5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "parse_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "extract_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "result",
                "uVar2": "result_count",
                "uVar3": "result_size",
                "uVar4": "updated_count",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * extract_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long result;\n  ulong result_count;\n  ulong result_size;\n  uint updated_count;\n  char buffer [9];\n  \n  result_size = 10;\n  result_count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = decompiled_function_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (result == 0) {\n      if (buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      updated_count = (int)result_count + 1;\n      if ((uint)result_size <= updated_count) {\n        result_size = (ulong)((uint)result_size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,result_size << 3);\n      }\n      *(long *)((long)result_ptr + result_count * 8) = result;\n      result_count = (ulong)updated_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + result_count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "xrealloc",
                "fprintf",
                "free",
                "dcgettext",
                "FUN_0010b0fa",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_v3_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "binary_info",
                "uVar1": "section_address",
                "uVar2": "section_error_message",
                "lVar3": "section_info",
                "lVar4": "section_pointer"
            },
            "code": "\nlong extract_section_info_0011a2e0(long binary_info,long param_2)\n\n{\n  undefined8 section_address;\n  undefined8 section_error_message;\n  long section_info;\n  long section_pointer;\n  \n  section_info = (**(code **)(*(long *)(param_2 + 8) + 0x208))(param_2);\n  section_pointer = *(long *)(binary_info + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(binary_info + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(binary_info + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(binary_info + 0x18);\n  if (section_pointer == 0) {\n    section_pointer = 0x128598;\n  }\n  else {\n    section_pointer = bfd_get_section_by_name(param_2);\n    if (section_pointer == 0) {\n      section_address = *(undefined8 *)(binary_info + 0x20);\n      section_error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit_00119dd0(section_error_message,section_address);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_pointer;\n  return section_info;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "param_1": "input_string",
                "param_2": "additional_data",
                "param_3": "suffix",
                "uVar1": "result",
                "sVar2": "suffix_length",
                "__s": "formatted_string"
            },
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_string,undefined8 additional_data,char *suffix)\n\n{\n  undefined4 result;\n  size_t suffix_length;\n  char *formatted_string;\n  \n  suffix_length = strlen(suffix);\n  formatted_string = (char *)xmalloc(suffix_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",input_string,suffix);\n  result = process_string_0010e2f0(additional_data,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionName",
                "sVar4": "sectionLength",
                "iVar5": "sectionLengthInt",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "unaff_R14D": "resultFlags",
                "unaff_R15": "flag",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentFlag;\n  char *sectionName;\n  size_t sectionLength;\n  int sectionLengthInt;\n  uint resultFlags;\n  char *flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    resultFlags = resultFlags | 0x2000;\n    sectionName = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionName == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = resultFlags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionName,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(sectionName);\n                sectionLengthInt = (int)sectionLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                sectionLengthInt = (int)commaPosition - (int)sectionName;\n              }\n              sectionLength = (size_t)sectionLengthInt;\n              comparisonResult = strncasecmp(flag,sectionName,sectionLength);\n              if (comparisonResult != 0) break;\n              resultFlags = resultFlags | 1;\n              sectionName = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionName,sectionLength);\n            if (comparisonResult != 0) break;\n            resultFlags = resultFlags | 2;\n            sectionName = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionName,sectionLength);\n          if (comparisonResult != 0) break;\n          resultFlags = resultFlags | 0x200;\n          sectionName = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionName,sectionLength);\n        if (comparisonResult != 0) break;\n        resultFlags = resultFlags | 8;\n        sectionName = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionName,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionName,sectionLength);\n      if (comparisonResult == 0) {\n        resultFlags = resultFlags | 0x10;\n        sectionName = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionName,sectionLength);\n        if (comparisonResult == 0) {\n          resultFlags = resultFlags | 0x20;\n          sectionName = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionName,sectionLength);\n          if (comparisonResult == 0) {\n            resultFlags = resultFlags | 0x40;\n            sectionName = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionName,sectionLength);\n            if (comparisonResult == 0) {\n              resultFlags = resultFlags | 0x8000;\n              sectionName = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionName,sectionLength);\n              if (comparisonResult == 0) {\n                resultFlags = resultFlags | 0x8000000;\n                sectionName = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionName,sectionLength);\n                if (comparisonResult == 0) {\n                  resultFlags = resultFlags | 0x100;\n                  sectionName = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionName,sectionLength);\n                  if (comparisonResult == 0) {\n                    resultFlags = resultFlags | 0x800000;\n                    sectionName = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionName,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionLengthInt + 1));\n                      strncpy(commaPosition,sectionName,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    resultFlags = resultFlags | 0x1000000;\n                    sectionName = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strncpy",
                "strlen",
                "dcgettext",
                "strchr",
                "xmalloc",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_value_001087da",
                "in_RAX": "value",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkValue_001087da(void)\n\n{\n  long value;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = value == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f",
                "FUN_001125fa"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "baseAddress",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "compilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "ptr1",
                "lVar5": "currentStruct",
                "puVar6": "ptr2",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long baseAddress,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long compilationUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *ptr1;\n  long currentStruct;\n  undefined8 *ptr2;\n  undefined returnValue [16];\n  \n  compilationUnit = *(long *)(baseAddress + 8);\n  if (compilationUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (currentStruct = *(long *)(baseAddress + 0x20); currentStruct != 0; currentStruct = *(long *)(currentStruct + 8)) {\n      if (*(undefined8 **)(currentStruct + 0x28) != (undefined8 *)0x0) {\n        for (ptr1 = (undefined8 *)**(undefined8 **)(currentStruct + 0x28); ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr2 = *(undefined8 **)(compilationUnit + 8); ptr2 != (undefined8 *)0x0;\n        ptr2 = (undefined8 *)*ptr2) {\n      if ((undefined8 *)ptr2[2] != (undefined8 *)0x0) {\n        for (ptr1 = *(undefined8 **)(undefined8 *)ptr2[2]; ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr1[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\nLAB_00109216:\n  errorMessage = ptr1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_unaff_ebp_0010829e",
                "unaff_EBP": "ebp_value",
                "uVar1": "result"
            },
            "code": "\nundefined8 process_unaff_EBP_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = check_and_compare_string_suffix_00113ede();\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = check_and_invert_string_suffix_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_unaff_ebp_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultValue",
                "iVar2": "comparisonResult",
                "pcVar5": "printableArchMach",
                "uVar6": "archMachString",
                "iVar7": "archMach",
                "lVar8": "currentValue",
                "iVar9": "startIndex",
                "unaff_R15D": "stackValue",
                "uVar10": "tempValue",
                "uVar11": "tempIndex",
                "param_7": "maxLength",
                "uStack000000000000000c": "maxArchLength",
                "param_11": "archMachData",
                "param_13": "dataArray",
                "sVar4": "stringLength"
            },
            "code": "\n\n\nvoid printBinaryInfo_00104943(void)\n\n{\n  int defaultValue;\n  int comparisonResult;\n  char *inputString;\n  long convertedValue;\n  size_t stringLength;\n  char *printableArchMach;\n  undefined8 archMachString;\n  int archMach;\n  long currentValue;\n  int startIndex;\n  uint stackValue;\n  ulong tempValue;\n  uint tempIndex;\n  int maxLength;\n  uint maxArchLength;\n  undefined8 archMachData;\n  long dataArray;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedValue;\n  startIndex = maxLength;\n  maxArchLength = stackValue;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    maxLength = startIndex;\n    if (archMachData._4_4_ <= maxLength) {\n      return;\n    }\n    currentValue = (long)maxLength;\n    archMach = (defaultValue - maxArchLength) + -1;\n    convertedValue = currentValue;\n    do {\n      startIndex = (int)convertedValue;\n      if (archMachData._4_4_ <= startIndex) break;\n      stringLength = strlen(*(char **)(dataArray + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archMach = (archMach - (int)stringLength) + -1;\n    } while (-1 < archMach);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (convertedValue = currentValue * 0x60; ((ulong)(uint)(startIndex - maxLength) + currentValue) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataArray + convertedValue));\n    }\n    archMach = 2;\n    putc(10,_stdout);\n    do {\n      printableArchMach = (char *)bfd_printable_arch_mach(archMach,0);\n      comparisonResult = strcmp(printableArchMach,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        archMachString = bfd_printable_arch_mach(archMach,0);\n        printf(\"%*s \",(ulong)maxArchLength,archMachString);\n        tempIndex = archMach - 2;\n        convertedValue = currentValue * 0x60;\n        comparisonResult = maxLength;\n        while (startIndex != comparisonResult) {\n          printableArchMach = *(char **)(dataArray + convertedValue);\n          if (*(char *)((long)(char **)(dataArray + convertedValue) + (ulong)tempIndex + 8) == '\\0') {\n            stringLength = strlen(printableArchMach);\n            for (tempValue = stringLength & 0xffffffff; (int)tempValue != 0; tempValue = (ulong)((int)tempValue - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableArchMach,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (startIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMach = archMach + 1;\n    } while (archMach != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "strlen",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_binary_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "initialize_memory_00113e23",
                "param_1": "firstParameter",
                "param_2": "secondParameter",
                "lVar1": "memoryAddress",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong initializeMemory_00113e23(undefined8 firstParameter,undefined8 secondParameter)\n\n{\n  long memoryAddress;\n  undefined8 *allocatedMemory;\n  \n  memoryAddress = initialize_memory_00112904(1,0);\n  if (memoryAddress != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = firstParameter;\n    allocatedMemory[1] = secondParameter;\n    *(undefined8 **)(memoryAddress + 0x10) = allocatedMemory;\n  }\n  return memoryAddress;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "stabError",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 stabError)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,errorFormat,stabError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input",
                "param_2": "result",
                "iVar1": "current_digit",
                "pbVar2": "ptr_input",
                "pbVar3": "ptr_current_char",
                "uVar4": "concatenated_result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input,int *result)\n\n{\n  int current_digit;\n  byte *ptr_input;\n  byte *ptr_current_char;\n  ulong concatenated_result;\n  \n  ptr_input = *input;\n  concatenated_result = 0;\n  if (((&_sch_istable)[(ulong)*ptr_input * 2] & 4) != 0) {\n    ptr_current_char = ptr_input + 1;\n    current_digit = (char)*ptr_input + -0x30;\n    *result = current_digit;\n    *input = ptr_current_char;\n    if (((&_sch_istable)[(ulong)ptr_input[1] * 2] & 4) != 0) {\n      do {\n        ptr_input = ptr_current_char;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*ptr_input;\n        ptr_current_char = ptr_input + 1;\n      } while (((&_sch_istable)[(ulong)ptr_input[1] * 2] & 4) != 0);\n      if (ptr_input[1] == 0x5f) {\n        ptr_current_char = ptr_input + 2;\n        *input = ptr_current_char;\n        *result = current_digit;\n      }\n    }\n    concatenated_result = CONCAT71((int7)((ulong)ptr_current_char >> 8),1);\n  }\n  return concatenated_result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_alignment_and_copy_data_00108072",
                "unaff_RBX": "parameter1",
                "unaff_RBP": "parameter2",
                "unaff_R12": "parameter3",
                "unaff_R14B": "parameter4",
                "unaff_R15": "parameter5",
                "bVar1": "flag",
                "uVar2": "data",
                "cVar3": "result",
                "uVar4": "value",
                "lVar5": "errorMessage",
                "lVar6": "entry",
                "lVar7": "offset",
                "lVar8": "size"
            },
            "code": "\n\n\nvoid setAlignmentAndCopyData_00108072(void)\n\n{\n  byte flag;\n  undefined8 data;\n  char result;\n  uint value;\n  long errorMessage;\n  long entry;\n  long offset;\n  undefined8 *parameter1;\n  long parameter2;\n  long parameter3;\n  long size;\n  char parameter4;\n  long parameter5;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  size = parameter1[6];\n  entry = find_and_modify_entry_00114190(*parameter1,0,0x18);\n  if (entry == 0) {\n    *(byte *)(parameter5 + 0x28) = *(byte *)(parameter5 + 0x28) | 1;\n    data = *parameter1;\n    size = size + _DAT_00127990;\n    *(long *)(parameter5 + 0x30) = size;\n    *(long *)(parameter5 + 0x38) = size;\n    size = parameter1[7];\n    entry = find_and_modify_entry_00114190(data,0,0x60);\n    if (entry == 0) goto LAB_00115695;\nLAB_00115860:\n    offset = *(long *)(entry + 0x20);\n    if ((*(byte *)(entry + 0x14) & 0x40) != 0) {\n      offset = offset + size;\n    }\n    *(long *)(parameter5 + 0x38) = offset;\n    size = find_and_modify_entry_00114190(*parameter1,0,0x200);\n    if (size != 0) goto LAB_00115889;\nLAB_001156b8:\n    value = *(uint *)((long)parameter1 + 0x7c);\n    if (value < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(parameter5 + 0xb4) = *(undefined4 *)((long)parameter1 + 0xb4);\n    *(byte *)(parameter5 + 0x28) =\n         *(byte *)(parameter5 + 0x28) & 0xcf | *(byte *)(parameter1 + 5) & 0x30;\n    parameter1[0xc] = parameter5;\n    parameter1[0xb] = 0;\n    flag = *(byte *)((long)parameter1 + 0x27);\n  }\n  else {\n    offset = *(long *)(entry + 0x18);\n    if ((*(byte *)(entry + 0x14) & 8) == 0) {\n      offset = offset + size;\n    }\n    *(byte *)(parameter5 + 0x28) = *(byte *)(parameter5 + 0x28) | 1;\n    data = *parameter1;\n    *(long *)(parameter5 + 0x30) = offset;\n    *(long *)(parameter5 + 0x38) = offset;\n    size = parameter1[7];\n    entry = find_and_modify_entry_00114190(data,0,0x60);\n    if (entry != 0) goto LAB_00115860;\nLAB_00115695:\n    data = *parameter1;\n    *(long *)(parameter5 + 0x38) = size + _DAT_00127990;\n    size = find_and_modify_entry_00114190(data,0,0x200);\n    if (size == 0) goto LAB_001156b8;\nLAB_00115889:\n    value = *(uint *)(size + 0x2c);\n    if (0x3e < value) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(parameter5 + 0x7c) = value;\n    *(undefined4 *)(parameter5 + 0xb4) = *(undefined4 *)((long)parameter1 + 0xb4);\n    *(byte *)(parameter5 + 0x28) =\n         *(byte *)(parameter5 + 0x28) & 0xcf | *(byte *)(parameter1 + 5) & 0x30;\n    parameter1[0xc] = parameter5;\n    parameter1[0xb] = 0;\n    flag = *(byte *)((long)parameter1 + 0x27);\n  }\n  if ((flag & 2) != 0) {\n    size = parameter1[0x1a];\n    entry = find_data_entry_00115d00(size,parameter1[0x1c]);\n    if ((entry != 0) &&\n       (offset = *(long *)(parameter3 + 8), *(uint *)(entry + 0x18) = *(uint *)(entry + 0x18) | 0x20,\n       *(int *)(offset + 8) == 5)) {\n      *(long *)(size + 0xb0) = entry;\n      result = (**(code **)(*(long *)(parameter2 + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(parameter2 + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (parameter4 != '\\0') {\n    *(undefined4 *)(*(long *)(parameter5 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "dcgettext",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_alignment_and_copy_data_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "generate_formatted_string_0010a2b9",
                "param_1": "sourceAddress",
                "param_2": "flag",
                "param_3": "pointer1",
                "param_4": "pointer2",
                "cVar1": "char1",
                "__s": "extractedString",
                "sVar2": "stringLength",
                "__s_00": "formattedString",
                "lVar3": "index",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] generateFormattedString_0010a2b9(long sourceAddress,char flag,undefined8 pointer1,undefined8 pointer2)\n\n{\n  char char1;\n  char *extractedString;\n  size_t stringLength;\n  char *formattedString;\n  long index;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(sourceAddress + 0x60) + 0x1c);\n  extractedString = (char *)extract_pointers_00109b2f();\n  stringLength = strlen(extractedString);\n  formattedString = (char *)xmalloc(stringLength + 0x1e);\n  if (flag == '\\0') {\n    *formattedString = '\\0';\n    index = 0;\n    flag = char1;\n  }\n  else {\n    index = *(long *)(sourceAddress + 0x68);\n    *(long *)(sourceAddress + 0x68) = index + 1;\n    sprintf(formattedString,\"%ld=@S;\",index);\n  }\n  stringLength = strlen(formattedString);\n  sprintf(formattedString + stringLength,\"S%s\",extractedString);\n  free(extractedString);\n  result._0_4_ = initialize_data_00109b52(sourceAddress,formattedString,index,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = pointer2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "var3",
                "param_4": "var4",
                "param_5": "var5",
                "param_6": "var6",
                "iVar1": "counter",
                "cVar2": "result",
                "process_string_0010e2f0": "process_string"
            },
            "code": "\nundefined process_data_0010ec73(long *data,long value,undefined8 var3,undefined8 var4,\n                      undefined8 var5,undefined8 var6)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = process_string(data,0xc0,0,data[0x41],0,var6,var4), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "determine_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid determineEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "determine_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_file_time_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "flags",
                "param_4": "fileProtection",
                "param_5": "shouldSetFileTime",
                "param_6": "returnValue",
                "uVar1": "copyResult",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "uVar5": "copyResultULong",
                "auVar6": "result"
            },
            "code": "\nundefined  [16]\ncopyAndSetFileTime_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 flags,undefined8 fileProtection,char shouldSetFileTime,\n            undefined8 returnValue)\n\n{\n  uint copyResult;\n  int *errorNumberPtr;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  ulong copyResultULong;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copyResultULong = 0;\n  }\n  else {\n    copyResult = copy_file_00115a90(flags,destinationFilePath,fileProtection);\n    copyResultULong = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorNumberPtr = __errno_location();\n      errorMessage = strerror(*errorNumberPtr);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_00119ed0(localizedErrorMessage,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetFileTime != '\\0') {\n    set_file_time_0011a350(destinationFilePath,fileProtection);\n  }\n  result._8_8_ = returnValue;\n  result._0_8_ = copyResultULong;\n  return result;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_set_file_time_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "concatenate_strings_0010adf2"
            },
            "code": "\nvoid concatenate_strings_0010adf2(void)\n\n{\n  concatenate_strings_0010adf2_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "insert_and_resize_data_0010d7d4",
                "param_1": "dataPointer",
                "param_2": "sizePointer",
                "param_3": "existingData",
                "param_4": "dataCounter",
                "param_5": "totalDataSize",
                "uVar1": "dataValue",
                "cVar2": "successFlag",
                "uVar3": "returnValue",
                "lVar4": "existingDataPointer",
                "plVar5": "tempDataPointer",
                "uVar6": "newDataCounter",
                "local_40": "tempDataArray"
            },
            "code": "\nundefined4\ninsertAndResizeData_0010d7d4(undefined8 dataPointer,undefined8 *sizePointer,long *existingData,uint *dataCounter,uint *totalDataSize)\n\n{\n  undefined8 dataValue;\n  char successFlag;\n  undefined4 returnValue;\n  long existingDataPointer;\n  long *tempDataPointer;\n  uint newDataCounter;\n  long tempDataArray [2];\n  \n  dataValue = *sizePointer;\n  tempDataPointer = tempDataArray;\n  if (existingData == (long *)0x0) {\n    tempDataPointer = (long *)0x0;\n  }\n  successFlag = parse_data_0010c95e(dataPointer,sizePointer,tempDataPointer);\n  if ((successFlag != '\\0') &&\n     (returnValue = resize_and_insert_data_00109be3(dataPointer,dataValue,(int)*sizePointer - (int)dataValue), (char)returnValue != '\\0')) {\n    if (existingData == (long *)0x0) {\n      return returnValue;\n    }\n    if (tempDataArray[0] != 0) {\n      if (*totalDataSize <= *dataCounter + 1) {\n        newDataCounter = *totalDataSize + 10;\n        existingDataPointer = *existingData;\n        *totalDataSize = newDataCounter;\n        existingDataPointer = xrealloc(existingDataPointer,(ulong)newDataCounter << 3);\n        *existingData = existingDataPointer;\n      }\n      newDataCounter = *dataCounter;\n      *(long *)(*existingData + (ulong)newDataCounter * 8) = tempDataArray[0];\n      *dataCounter = newDataCounter + 1;\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "xrealloc",
                "FUN_00109be3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "insert_and_resize_data_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = resize_and_insert_data_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "file_path",
                "iVar1": "return_value",
                "piVar2": "error_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_info"
            },
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int return_value;\n  int *error_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    return_value = stat(file_path,&file_info);\n    if (return_value < 0) {\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*error_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_00119ed0(error_message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_info.st_size) {\n        return file_info.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "stat",
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_default_value_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "get_default_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "savedLocale",
                "__format": "formatTemplate",
                "plVar2": "currentString",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 savedLocale;\n  char *formatTemplate;\n  long *currentString;\n  \n  fflush(standardOutput);\n  savedLocale = DAT_001275e0;\n  formatTemplate = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatTemplate,savedLocale);\n  for (currentString = formatStrings; *currentString != 0; currentString = currentString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fflush",
                "free",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "process_binary_0011378f",
                "param_1": "inputFiles",
                "param_2": "outputFile",
                "param_3": "fileSize",
                "param_4": "hashTable",
                "param_5": "stringTable",
                "param_6": "error",
                "auVar1": "tempVar1",
                "cVar2": "success",
                "uVar3": "errorValue",
                "uVar4": "errorMessage",
                "puVar5": "ptr",
                "sVar6": "length",
                "lVar7": "index",
                "puVar8": "ptrIter",
                "puVar9": "arrIter",
                "__dest": "destination",
                "puVar10": "ptrIter2",
                "plVar11": "ptrIter3",
                "bVar12": "boolVal"
            },
            "code": "\nundefined4\nprocessBinary_0011378f(undefined8 *inputFiles,undefined8 *outputFile,long *fileSize,undefined8 *hashTable,\n            undefined8 *stringTable,undefined8 *error)\n\n{\n  undefined tempVar1 [16];\n  char success;\n  undefined4 errorValue;\n  undefined8 errorMessage;\n  undefined *ptr;\n  size_t length;\n  long index;\n  undefined8 *ptrIter;\n  undefined4 *arrIter;\n  char *destination;\n  undefined8 *ptrIter2;\n  long *ptrIter3;\n  byte boolVal;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  boolVal = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = inputFiles;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  success = bfd_hash_table_init(local_220,initialize_hash_function_0010bb52,0x30);\n  if ((success == '\\0') || (success = bfd_hash_table_init(local_a0,initialize_hash_function_0010bb52,0x30), success == '\\0')) {\n    errorValue = bfd_get_error();\n    errorMessage = bfd_errmsg(errorValue);\n    print_error_00119ed0(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    arrIter = local_1e8;\n    for (index = 0x52; index != 0; index = index + -1) {\n      *arrIter = 0;\n      arrIter = arrIter + (ulong)boolVal * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    success = process_string_0010e2f0(&local_258,0,0,0,0);\n    tempVar1 = _local_78;\n    if (success != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = tempVar1._8_8_;\n      success = process_string_0010e2f0(&local_258,100,0,0,*inputFiles);\n      if (success != '\\0') {\n        *(int *)(outputFile + 6) = *(int *)(outputFile + 6) + 1;\n        outputFile[10] = 0;\n        ptrIter2 = (undefined8 *)*outputFile;\n        *(undefined4 *)(outputFile + 7) = *(undefined4 *)((long)outputFile + 0x34);\n        for (; ptrIter2 != (undefined8 *)0x0; ptrIter2 = (undefined8 *)*ptrIter2) {\n          outputFile[8] = ptrIter2[2];\n          *(undefined4 *)(outputFile + 9) = 0;\n          success = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(ptrIter2[1] + 8));\n          if (success == '\\0') {\n            return 0;\n          }\n          ptrIter3 = (long *)ptrIter2[1];\n          if (ptrIter3 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptrIter3[2] != (undefined8 *)0x0) {\n                for (ptrIter = *(undefined8 **)(undefined8 *)ptrIter3[2]; ptrIter != (undefined8 *)0x0;\n                    ptrIter = (undefined8 *)*ptrIter) {\n                  success = process_data_001135a5(outputFile,&local_258);\n                  if (success == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptrIter3 = (long *)*ptrIter3;\n              if (ptrIter3 == (long *)0x0) break;\n              success = set_param_and_process_string_0010e439(&local_258,ptrIter3[1]);\n              if (success == '\\0') {\n                return 0;\n              }\n            }\n          }\n          success = process_and_check_files_00112502(outputFile,&local_258,0xffffffffffffffff);\n          if (success == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (errorValue = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)errorValue != '\\0')) {\n          (**(code **)(inputFiles[1] + 0x50))(local_228,local_250 + 8);\n          *fileSize = local_250;\n          *hashTable = CONCAT44(uStack_244,local_248);\n          *error = local_228;\n          ptr = (undefined *)xmalloc();\n          *ptr = 0;\n          destination = ptr + 1;\n          *stringTable = ptr;\n          for (index = local_238._0_8_; index != 0; index = *(long *)(index + 0x18)) {\n            strcpy(destination,*(char **)(index + 8));\n            length = strlen(destination);\n            destination = destination + length + 1;\n          }\n          return errorValue;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010e439",
                "thunk_FUN_0010e439",
                "bfd_errmsg",
                "bfd_hash_table_init",
                "strlen",
                "xmalloc",
                "FUN_0010bb52",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00112502",
                "strcpy",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,initialize_hash_function_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,initialize_hash_function_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_and_check_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_open_error_00104966",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 handle_file_open_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_00119ed0(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_00119ed0(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_open_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "input_data",
                "process_data_00109ed3": "process_data_helper"
            },
            "code": "\nvoid process_data_0010a0a0(long input_data)\n\n{\n  process_data_0010a0a0_helper(input_data,0x26,4,input_data + 0x198,input_data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_00119ed0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "localVar1",
                "param_11": "localVar2",
                "param_12": "localVar3",
                "param_13": "localVar4",
                "param_14": "localVar5",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "bufferPointer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "localVar6",
                "local_a8": "localVar7",
                "local_a0": "localVar8",
                "local_98": "localVar9",
                "local_90": "localVar10",
                "local_88": "localVar11",
                "local_78": "localVar12",
                "local_68": "localVar13",
                "local_58": "localVar14",
                "local_48": "localVar15",
                "local_38": "localVar16",
                "local_28": "localVar17",
                "local_18": "localVar18"
            },
            "code": "\nvoid printError_00119ed0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 localVar1,undefined8 localVar2,undefined8 localVar3,\n                 undefined8 localVar4,undefined8 localVar5)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 offset;\n  undefined *bufferPointer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 localVar6;\n  undefined8 localVar7;\n  undefined8 localVar8;\n  undefined8 localVar9;\n  undefined8 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  undefined4 localVar15;\n  undefined4 localVar16;\n  undefined4 localVar17;\n  undefined4 localVar18;\n  \n  if (flag != '\\0') {\n    localVar11 = errorCode;\n    localVar12 = param2;\n    localVar13 = param3;\n    localVar14 = param4;\n    localVar15 = param5;\n    localVar16 = param6;\n    localVar17 = param7;\n    localVar18 = param8;\n  }\n  bufferPointer = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  offset = 0x30;\n  localVar6 = localVar1;\n  localVar7 = localVar2;\n  localVar8 = localVar3;\n  localVar9 = localVar4;\n  localVar10 = localVar5;\n  print_error_00119e70(errorMessage,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_0010554f",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010e07c",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001163d0",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00108375",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "print_error_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_data_00112c1f",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "plVar1": "ptrVar1",
                "lVar2": "var1",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "cVar5": "charVar",
                "piVar6": "ptrVar6",
                "uVar7": "result",
                "uVar8": "tempVar1",
                "iVar9": "intVar",
                "uVar10": "tempVar2",
                "uVar11": "tempVar3",
                "uVar12": "tempVar4",
                "uVar13": "tempVar5",
                "bVar14": "boolVar",
                "local_3c": "localVar"
            },
            "code": "\n\n\nundefined8 processData_00112c1f(ulong param1,undefined8 param2,int *param3,long param4)\n\n{\n  long *ptrVar1;\n  long var1;\n  undefined8 *ptrVar3;\n  undefined8 *ptrVar4;\n  char charVar;\n  int *ptrVar6;\n  undefined8 result;\n  undefined8 tempVar1;\n  int intVar;\n  undefined4 tempVar2;\n  undefined8 tempVar3;\n  ulong tempVar4;\n  uint tempVar5;\n  bool boolVar;\n  uint localVar;\n  \n  tempVar4 = param1;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    intVar = *param3;\n    if (intVar - 0x16U < 2) {\n      do {\n        ptrVar1 = *(long **)(param3 + 4);\n        tempVar5 = *(uint *)(param1 + 0x30);\n        tempVar4 = (ulong)tempVar5;\n        var1 = *ptrVar1;\n        if (*(uint *)(var1 + 0x10) == tempVar5) {\n          if (intVar == 0x16) {\n            result = lookup_and_initialize_data_0010bba1(param2,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptrVar6 = (int *)extract_debug_info_00112b6e(param3,0);\n          if (ptrVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptrVar6 - 7U < 4) && (*(long *)(ptrVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptrVar6 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (charVar = debug_set_class_id_0010c7a0(param1,*(undefined8 *)(**(long **)(param3 + 4) + 8),ptrVar6),\n               charVar == '\\0')) {\n              return 0;\n            }\n            tempVar5 = *(uint *)(*(long *)(ptrVar6 + 4) + 0xc);\n          }\n          else {\n            tempVar5 = 0;\n          }\n          intVar = *ptrVar6;\n          result = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (intVar == 0x17) {\n          if (var1 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = tempVar5;\n          param4 = *ptrVar1;\n          param3 = (int *)ptrVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = tempVar5;\n        }\n        param3 = (int *)ptrVar1[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        intVar = *param3;\n        param4 = 0;\n      } while (intVar - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(intVar) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = update_or_initialize_data_00109dfe(param2);\n      return result;\n    case 3:\n      result = initialize_data_if_needed_0010b800(param2,param3[1],*(undefined *)(param3 + 4));\n      return result;\n    case 4:\n      result = initialize_or_format_data_0010b948(param2,param3[1]);\n      return result;\n    case 5:\n      result = update_and_initialize_data_00109e76(param2,param3[1]);\n      return result;\n    case 6:\n      result = initialize_data_00109d3e(param2,param3[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (charVar = debug_set_class_id_0010c7a0(param1,result,param3), charVar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(param3 + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(var1 + 8)) {\n          tempVar5 = *(uint *)(var1 + 0xc);\n          if (tempVar5 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          intVar = *param3;\nLAB_00112ed2:\n          result = initialize_data_00109d5c(param2,result,tempVar5,intVar);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(param1 + 0x30);\n      }\n      tempVar2 = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        tempVar2 = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      charVar = process_data_0010a69a(param2,result,tempVar2,*param3 == 7,param3[1]);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (tempVar4 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          ptrVar4 = *(undefined8 **)(**(long **)(param3 + 4) + tempVar4 * 8);\n          if (ptrVar4 == (undefined8 *)0x0) break;\n          charVar = processData_00112c1f(param1,param2,ptrVar4[1],0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          charVar = generate_formatted_string_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3),\n                               *(undefined4 *)((long)ptrVar4 + 0x1c),*(undefined4 *)(ptrVar4 + 2));\n          if (charVar == '\\0') {\n            return 0;\n          }\n          tempVar4 = (ulong)((int)tempVar4 + 1);\n        }\n      }\n      result = process_data_0010a77a(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        tempVar5 = 0;\n        ptrVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (tempVar4 = param1, charVar = debug_set_class_id_0010c7a0(param1,result,param3), charVar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(param3 + 4);\n        tempVar5 = *(uint *)(var1 + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(var1 + 8)) {\n          if (tempVar5 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          intVar = *param3;\n          goto LAB_00112ed2;\n        }\n        ptrVar6 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(param1 + 0x30);\n        if (((ptrVar6 != (int *)0x0) && (param3 != ptrVar6)) &&\n           (tempVar4 = param1, charVar = processData_00112c1f(param1,param2,ptrVar6,0), charVar == '\\0')) {\n          return 0;\n        }\n      }\n      charVar = process_data_0010a83e(param2,result,tempVar5,*param3 == 9,param3[1],ptrVar6 != (int *)0x0,\n                           param3 == ptrVar6,tempVar4);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        tempVar5 = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (ptrVar4 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)tempVar5 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = processData_00112c1f(param1,param2,ptrVar4[1],0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrVar4 + 0x14) == '\\0') {\n              charVar = generate_formatted_string_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3));\n            }\n            else {\n              charVar = extract_pointers_and_build_string_0010a94e(param2,*ptrVar4,ptrVar4[3]);\n            }\n            if (charVar == '\\0') {\n              return 0;\n            }\n            tempVar5 = tempVar5 + 1;\n          }\n        }\n        tempVar5 = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)tempVar5 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = processData_00112c1f(param1,param2,*ptrVar4,0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            charVar = format_and_store_data_0010aa53(param2,*(undefined4 *)(ptrVar4 + 1),\n                                 *(undefined *)((long)ptrVar4 + 0xc));\n            if (charVar == '\\0') {\n              return 0;\n            }\n            tempVar5 = tempVar5 + 1;\n          }\n        }\n        localVar = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)localVar * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = append_to_buffer_0010ab4d(param2,*ptrVar4);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            tempVar5 = 0;\n            while (ptrVar3 = *(undefined8 **)(ptrVar4[1] + (ulong)tempVar5 * 8),\n                  ptrVar3 != (undefined8 *)0x0) {\n              if ((ptrVar3[4] != 0) &&\n                 (charVar = processData_00112c1f(param1,param2,ptrVar3[4],0), charVar == '\\0')) {\n                return 0;\n              }\n              charVar = processData_00112c1f(param1,param2,ptrVar3[1],0);\n              if (charVar == '\\0') {\n                return 0;\n              }\n              if (ptrVar3[3] == -1) {\n                charVar = concatenate_strings_0010adf2(param2,*ptrVar3,*(undefined4 *)(ptrVar3 + 2),\n                                     *(undefined *)((long)ptrVar3 + 0x14),\n                                     *(undefined *)((long)ptrVar3 + 0x15));\n              }\n              else {\n                charVar = concatenate_and_return_0010add5(param2);\n              }\n              if (charVar == '\\0') {\n                return 0;\n              }\n              tempVar5 = tempVar5 + 1;\n            }\n            charVar = append_semicolon_if_not_empty_00109bbb(param2);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            localVar = localVar + 1;\n          }\n        }\n      }\n      result = construct_string_0010ae0e(param2);\n      return result;\n    case 0xb:\n      ptrVar4 = *(undefined8 **)(param3 + 4);\n      if (ptrVar4 == (undefined8 *)0x0) {\n        tempVar1 = 0;\n        tempVar3 = 0;\n      }\n      else {\n        tempVar1 = ptrVar4[1];\n        tempVar3 = *ptrVar4;\n      }\n      result = initialize_and_format_data_0010e453(param2,result,tempVar3,tempVar1);\n      return result;\n    case 0xc:\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(param2);\n      return result;\n    case 0xd:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      tempVar4 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        tempVar4 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + tempVar4 * 8), var1 != 0) {\n          tempVar4 = tempVar4 + 1;\n          charVar = processData_00112c1f(param1,param2,var1,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n        tempVar4 = tempVar4 & 0xffffffff;\n      }\n      result = process_multiple_data_0010e5db(param2,tempVar4,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0xe:\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(param2);\n      return result;\n    case 0xf:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = initialize_data_extraction_0010a0e9(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return result;\n    case 0x10:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(param3 + 4);\n      result = process_data_0010a181(param2,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = generate_formatted_string_0010a2b9(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return result;\n    case 0x12:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = reverse_and_initialize_data_0010a377(param2);\n      return result;\n    case 0x13:\n      charVar = processData_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      tempVar4 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        tempVar4 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + tempVar4 * 8), var1 != 0)\n        {\n          tempVar4 = tempVar4 + 1;\n          charVar = processData_00112c1f(param1,param2,var1,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (charVar = processData_00112c1f(param1,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         charVar == '\\0')) {\n        return 0;\n      }\n      result = format_data_0010a424(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,tempVar4 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return result;\n    case 0x14:\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(param2);\n      return result;\n    case 0x15:\n      charVar = processData_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = process_and_send_data_0010a0d3(param2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    result = initialize_or_format_data_00109d97(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010adf2",
                "FUN_0010e5db",
                "abort",
                "FUN_0010a0e9",
                "FUN_00109d5c",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "fprintf",
                "dcgettext",
                "FUN_0010a0a0",
                "FUN_0010a083",
                "FUN_0010a424",
                "FUN_0010add5",
                "FUN_0010a0d3",
                "FUN_0010a377",
                "FUN_00112c1f",
                "FUN_00109dfe",
                "FUN_00112b6e",
                "FUN_0010a69a",
                "__assert_fail",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopyFailed",
                "unaff_R15": "baseAddress",
                "lVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopyFailed;\n  long baseAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopyFailed != '\\0') {\n    *(undefined4 *)(*(long *)(baseAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "fileName",
                "param_2": "message",
                "in_RAX": "temp",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 fileName,undefined8 message)\n\n{\n  undefined8 temp;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,message,fileName,temp);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "identify_input_format_00105828",
                "iVar1": "architecture",
                "uVar2": "formatResult",
                "uVar3": "archMach",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 identifyInputFormat_00105828(void)\n\n{\n  int architecture;\n  undefined4 formatResult;\n  undefined8 archMach;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    archMach = construct_formatted_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_00119ed0(errorMessage,archMach);\n  }\n  else {\n    archMach = bfd_get_mach();\n    formatResult = bfd_get_arch();\n    archMach = bfd_printable_arch_mach(formatResult,archMach);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_00119ed0(errorMessage,archMach);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "identify_input_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "pcVar1": "temp_directory",
                "extract_filepath_segments_00114cf0": "extract_filepath_segments",
                "mkdtemp": "make_temp_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_directory;\n  \n  template_path = (char *)extract_filepath_segments();\n  temp_directory = mkdtemp(template_path);\n  if (temp_directory == (char *)0x0) {\n    free(template_path);\n  }\n  return temp_directory;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "mkdtemp",
                "FUN_00114cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_0010bba1",
                "param_1": "ptr_hash_table",
                "param_2": "param",
                "lVar1": "lookup_result",
                "uVar2": "formatted_data"
            },
            "code": "\nundefined8 lookup_and_initialize_data_0010bba1(long ptr_hash_table,undefined8 param)\n\n{\n  long lookup_result;\n  undefined8 formatted_data;\n  \n  lookup_result = bfd_hash_lookup(ptr_hash_table + 0x1b8,param,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    formatted_data = format_and_initialize_data_00109cf4(ptr_hash_table,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return formatted_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_initialize_data_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_update_string_0010e6a8",
                "param_1": "input_data",
                "param_2": "string_identifier",
                "__s": "extracted_string",
                "sVar3": "input_length",
                "sVar4": "extracted_length",
                "__s_00": "combined_string",
                "lVar8": "counter",
                "uVar1": "string_processing_result",
                "uVar2": "extracted_value",
                "lVar5": "hash_lookup_result",
                "uVar6": "bfd_error_msg",
                "uVar7": "localized_error_msg",
                "uVar9": "result",
                "auVar10": "return_value"
            },
            "code": "\nundefined  [16] process_and_update_string_0010e6a8(long input_data,char *string_identifier,undefined8 param_3,undefined8 param_4)\n\n{\n  uint string_processing_result;\n  undefined4 extracted_value;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_length;\n  char *combined_string;\n  long hash_lookup_result;\n  undefined8 bfd_error_msg;\n  undefined8 localized_error_msg;\n  long counter;\n  ulong result;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(input_data + 0x60) + 0x10);\n  extracted_value = *(undefined4 *)(*(long *)(input_data + 0x60) + 0x18);\n  extracted_string = (char *)extract_pointers_00109b2f();\n  input_length = strlen(string_identifier);\n  extracted_length = strlen(extracted_string);\n  combined_string = (char *)xmalloc(input_length + 0x14 + extracted_length);\n  if (counter < 1) {\n    counter = *(long *)(input_data + 0x68);\n    *(long *)(input_data + 0x68) = counter + 1;\n    sprintf(combined_string,\"%s:t%ld=%s\",string_identifier,counter,extracted_string);\n  }\n  else {\n    sprintf(combined_string,\"%s:t%s\",string_identifier,extracted_string);\n  }\n  free(extracted_string);\n  string_processing_result = process_string_0010e2f0(input_data,0x80,0,0,combined_string);\n  result = (ulong)string_processing_result;\n  if ((char)string_processing_result != '\\0') {\n    free(combined_string);\n    hash_lookup_result = bfd_hash_lookup(input_data + 0x1b8,string_identifier,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = counter;\n      *(undefined4 *)(hash_lookup_result + 0x28) = extracted_value;\n      goto LAB_0010e7b3;\n    }\n    extracted_value = bfd_get_error();\n    bfd_error_msg = bfd_errmsg(extracted_value);\n    localized_error_msg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_00119ed0(localized_error_msg,bfd_error_msg);\n  }\n  result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "strlen",
                "free",
                "xmalloc",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_update_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "process_and_format_string_0010e7c2",
                "param_1": "input_param",
                "param_2": "prefix_string",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "__s": "extracted_string",
                "sVar1": "prefix_length",
                "sVar2": "extracted_length",
                "__s_00": "formatted_string",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] process_and_format_string_0010e7c2(undefined8 input_param,char *prefix_string,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_pointers_00109b2f();\n  prefix_length = strlen(prefix_string);\n  extracted_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(prefix_length + 3 + extracted_length);\n  sprintf(formatted_string,\"%s:T%s\",prefix_string,extracted_string);\n  free(extracted_string);\n  result._0_4_ = process_string_0010e2f0(input_param,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = unused_param_2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "message",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "input_flag",
                "local_d8": "local_variable1",
                "local_d4": "local_variable2",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "local_variable3",
                "local_a8": "local_variable4",
                "local_a0": "local_variable5",
                "local_98": "local_variable6",
                "local_90": "local_variable7",
                "local_88": "local_variable8",
                "local_78": "local_variable9",
                "local_68": "local_variable10",
                "local_58": "local_variable11",
                "local_48": "local_variable12",
                "local_38": "local_variable13",
                "local_28": "local_variable14",
                "local_18": "local_variable15"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char input_flag;\n  undefined4 local_variable1;\n  undefined4 local_variable2;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 local_variable3;\n  undefined8 local_variable4;\n  undefined8 local_variable5;\n  undefined8 local_variable6;\n  undefined8 local_variable7;\n  undefined4 local_variable8;\n  undefined4 local_variable9;\n  undefined4 local_variable10;\n  undefined4 local_variable11;\n  undefined4 local_variable12;\n  undefined4 local_variable13;\n  undefined4 local_variable14;\n  undefined4 local_variable15;\n  \n  if (input_flag != '\\0') {\n    local_variable8 = error_code;\n    local_variable9 = param2;\n    local_variable10 = param3;\n    local_variable11 = param4;\n    local_variable12 = param5;\n    local_variable13 = param6;\n    local_variable14 = param7;\n    local_variable15 = param8;\n  }\n  pointer1 = &stack0x00000008;\n  local_variable1 = 8;\n  pointer2 = buffer;\n  local_variable2 = 0x30;\n  local_variable3 = param10;\n  local_variable4 = param11;\n  local_variable5 = param12;\n  local_variable6 = param13;\n  local_variable7 = param14;\n  print_error_00119e70(message,&local_variable1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_001083de",
                "FUN_0010554f",
                "FUN_00104ad6",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114dc7",
                "FUN_0010827b",
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_0010da0b"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "errorData",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *errorData;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  print_error_0011a110(*errorData);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "inputArray",
                "unaff_RBX": "minRange",
                "unaff_RBP": "tempArray",
                "unaff_R13": "tempArrayEnd",
                "unaff_R14": "currentArrayElement",
                "unaff_R15": "maxRange",
                "in_R10": "currentIndex",
                "in_R11": "specialValue",
                "param_7": "specialValue1",
                "param_9": "specialValue2",
                "param_10": "outputSize",
                "param_11": "comparisonArray",
                "param_12": "outputArray",
                "param_13": "param13",
                "param_14": "arraySize",
                "__ptr": "tempPtr",
                "uVar4": "increment",
                "uVar5": "loopSize",
                "uVar6": "currentArrayValue",
                "lVar7": "loopCounter",
                "uVar8": "arrayValue",
                "iVar3": "comparisonResult",
                "puVar9": "puVar1",
                "cVar10": "loopCondition",
                "puVar11": "puVar2",
                "puVar12": "puVar3",
                "psVar13": "currentParam",
                "bVar14": "byteSize",
                "sVar1": "tempSize"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t tempSize;\n  code *pcVar2;\n  int comparisonResult;\n  uint increment;\n  undefined *tempPtr;\n  size_t *inputArray;\n  ulong loopSize;\n  ulong currentArrayValue;\n  long loopCounter;\n  ulong arrayValue;\n  size_t minRange;\n  size_t *tempArray;\n  undefined *puVar1;\n  char loopCondition;\n  undefined *puVar2;\n  ulong currentIndex;\n  undefined *puVar3;\n  size_t specialValue;\n  size_t *tempArrayEnd;\n  size_t *currentArrayElement;\n  size_t maxRange;\n  size_t *currentParam;\n  byte byteSize;\n  size_t specialValue1;\n  size_t specialValue2;\n  ulong outputSize;\n  size_t *comparisonArray;\n  undefined *outputArray;\n  long param13;\n  size_t arraySize;\n  \n  byteSize = 0;\ncode_r0x00116852:\n  increment = (int)currentIndex + 1;\n  if (0x10 < (int)currentIndex) goto LAB_001167f5;\nLAB_00116863:\n  currentArrayElement = currentArrayElement + -9;\n  do {\n    if (tempArrayEnd <= currentArrayElement) {\n      tempSize = currentArrayElement[2];\n      if (tempSize == 0) goto LAB_00116863;\n      arrayValue = (ulong)increment;\n      if ((*currentArrayElement == *tempArray) &&\n         (comparisonResult = memcmp((void *)currentArrayElement[3],(void *)tempArray[3],*tempArray), comparisonResult == 0)) {\n        currentArrayValue = currentArrayElement[7];\n        loopSize = currentArrayElement[8];\n        currentIndex = arrayValue & 0xffffffff;\n        if (maxRange == currentArrayValue) {\n          if (minRange != loopSize) goto LAB_001167a6;\n          tempArray[2] = 0;\n        }\n        else {\n          if (maxRange < currentArrayValue) {\n            if (loopSize < maxRange) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < loopSize) || (maxRange <= (loopSize + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minRange < maxRange) {\n              if ((0xfffffffffffffff0 < minRange) ||\n                 (currentArrayValue <= (minRange + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minRange == loopSize) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minRange <= loopSize) {\n              tempArray[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (loopSize < maxRange) goto LAB_0010852c;\n          }\n          if ((specialValue == 0x101) != (tempSize == 0x101)) goto code_r0x00116852;\n          if (loopSize <= minRange) {\n            loopSize = minRange;\n          }\n          if (currentArrayValue < maxRange) {\n            maxRange = currentArrayValue;\n          }\n          currentArrayElement[8] = loopSize;\n          currentArrayElement[7] = maxRange;\n          tempArray[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentArrayElement = tempArray;\n        tempArray = currentArrayElement + 9;\n        if (inputArray <= tempArray) {\n          qsort(comparisonArray,arraySize,0x48,compare_params_0011a250);\n          tempPtr = (undefined *)xmalloc(outputSize * 2);\n          specialValue1 = 0;\n          puVar3 = tempPtr;\n          for (currentParam = comparisonArray; currentParam < inputArray; currentParam = currentParam + 9) {\n            if (currentParam[2] != 0) {\n              puVar2 = puVar3 + 4;\n              puVar1 = puVar3 + 0xc;\n              pcVar2 = *(code **)(*(long *)(param13 + 8) + 0x50);\n              if ((currentParam[7] == specialValue2) && (currentParam[8] == specialValue1)) {\n                (*pcVar2)(*currentParam,puVar3);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(0,puVar2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(currentParam[2],puVar3 + 8);\n                currentArrayValue = currentParam[6];\n                arrayValue = *currentParam;\n                puVar3 = (undefined *)currentParam[3];\n                puVar2 = puVar1;\n                for (loopSize = arrayValue; loopSize != 0; loopSize = loopSize - 1) {\n                  *puVar2 = *puVar3;\n                  puVar3 = puVar3 + (ulong)byteSize * -2 + 1;\n                  puVar2 = puVar2 + (ulong)byteSize * -2 + 1;\n                }\n                if (arrayValue < currentArrayValue) {\n                  for (loopCounter = currentArrayValue - arrayValue; loopCounter != 0; loopCounter = loopCounter + -1) {\n                    *puVar2 = 0;\n                    puVar2 = puVar2 + (ulong)byteSize * -2 + 1;\n                  }\n                }\n                puVar3 = puVar1 + currentArrayValue;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(param13 + 8) + 8) == 5) {\n                  loopCondition = (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  loopCondition = '\\b';\n                }\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(loopCondition,puVar2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(currentParam[2],puVar3 + 8);\n                arrayValue = *currentParam;\n                puVar3 = (undefined *)currentParam[3];\n                puVar2 = puVar1;\n                for (currentArrayValue = arrayValue; currentArrayValue != 0; currentArrayValue = currentArrayValue - 1) {\n                  *puVar2 = *puVar3;\n                  puVar3 = puVar3 + (ulong)byteSize * -2 + 1;\n                  puVar2 = puVar2 + (ulong)byteSize * -2 + 1;\n                }\n                currentArrayValue = currentParam[6];\n                if (arrayValue < currentArrayValue) {\n                  for (loopCounter = currentArrayValue - arrayValue; loopCounter != 0; loopCounter = loopCounter + -1) {\n                    *puVar2 = 0;\n                    puVar2 = puVar2 + (ulong)byteSize * -2 + 1;\n                  }\n                }\n                loopCounter = *(long *)(param13 + 8);\n                puVar1 = puVar1 + currentArrayValue;\n                puVar3 = puVar1 + 8;\n                if ((*(int *)(loopCounter + 8) == 5) &&\n                   (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopCounter + 0x38))(currentParam[7],puVar1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x38))(currentParam[8],puVar3);\n                  puVar3 = puVar1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopCounter + 0x50))(currentParam[7],puVar1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x50))(currentParam[8],puVar1 + 4);\n                }\n                specialValue2 = currentParam[7];\n                specialValue1 = currentParam[8];\n              }\n            }\n          }\n          currentArrayValue = (long)puVar3 - (long)tempPtr;\n          arrayValue = currentArrayValue;\n          puVar3 = tempPtr;\n          if (currentArrayValue < outputSize) {\n            for (; outputSize = currentArrayValue, arrayValue != 0; arrayValue = arrayValue - 1) {\n              *outputArray = *puVar3;\n              puVar3 = puVar3 + (ulong)byteSize * -2 + 1;\n              outputArray = outputArray + (ulong)byteSize * -2 + 1;\n            }\n          }\n          free(tempPtr);\n          free(comparisonArray);\n          return outputSize;\n        }\n        specialValue = currentArrayElement[0xb];\n      } while (specialValue == 0);\n      maxRange = currentArrayElement[0x10];\n      minRange = currentArrayElement[0x11];\n      increment = 0;\n      if (maxRange != minRange) break;\n      currentArrayElement[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "qsort",
                "FUN_00116852",
                "free",
                "xmalloc",
                "memcmp",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_memory_00113d3a",
                "param_1": "memory_address",
                "lVar1": "new_memory_address"
            },
            "code": "\nlong initialize_or_get_memory_00113d3a(long memory_address)\n\n{\n  long new_memory_address;\n  \n  if (memory_address != 0) {\n    new_memory_address = *(long *)(memory_address + 8);\n    if (new_memory_address == 0) {\n      new_memory_address = initialize_memory_00112904(0xc,0);\n      if (new_memory_address == 0) {\n        new_memory_address = 0;\n      }\n      else {\n        *(long *)(new_memory_address + 0x10) = memory_address;\n        *(long *)(memory_address + 8) = new_memory_address;\n      }\n    }\n    return new_memory_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_or_get_memory_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_and_send_data_0010a0d3",
                "param_1": "input_data",
                "process_data_00109ed3": "process_data"
            },
            "code": "\nvoid process_and_send_data_0010a0d3(long input_data)\n\n{\n  process_data(input_data,0x42,*(undefined4 *)(*(long *)(input_data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_binary_function_00115530",
                "param_1": "binaryPointer",
                "param_2": "dataEntries",
                "param_3": "outputData",
                "lVar1": "tempVar1",
                "pcVar2": "tempVar2",
                "ppcVar3": "tempVar3",
                "cVar4": "checkResult",
                "iVar5": "comparisonResult",
                "uVar6": "tempVar6",
                "sVar7": "length1",
                "sVar8": "length2",
                "lVar9": "tempVar9",
                "pcVar10": "currentDataEntry",
                "pcVar11": "tempVar11",
                "pcVar12": "tempVar12",
                "uVar13": "tempVar13",
                "bVar14": "flag",
                "local_50": "errorMessage",
                "local_48": "temporaryDataEntry",
                "local_40": "temporaryArray"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processBinaryFunction_00115530(long binaryPointer,char **dataEntries,long outputData)\n\n{\n  long tempVar1;\n  char *tempVar2;\n  char **tempVar3;\n  char checkResult;\n  int comparisonResult;\n  uint tempVar6;\n  size_t length1;\n  size_t length2;\n  long tempVar9;\n  char *currentDataEntry;\n  char *tempVar11;\n  char *tempVar12;\n  uint tempVar13;\n  bool flag;\n  long errorMessage;\n  char *temporaryDataEntry;\n  long temporaryArray [2];\n  \n  checkResult = check_and_find_data_entry_001159d0(dataEntries);\n  if (checkResult != '\\0') {\n    return;\n  }\n  currentDataEntry = *dataEntries;\n  tempVar13 = *(uint *)((long)dataEntries + 0x24);\n  temporaryDataEntry = currentDataEntry;\n  tempVar3 = DAT_001278d8;\n  if (*(int *)(*(long *)(binaryPointer + 8) + 8) != *(int *)(*(long *)(outputData + 8) + 8)) {\n    tempVar13 = tempVar13 & *(uint *)(*(long *)(binaryPointer + 8) + 0x18) &\n             *(uint *)(*(long *)(outputData + 8) + 0x18);\n  }\n  for (; tempVar3 != (char **)0x0; tempVar3 = (char **)tempVar3[3]) {\n    comparisonResult = strcmp(*tempVar3,currentDataEntry);\n    if (comparisonResult == 0) {\n      if (*(uint *)(tempVar3 + 2) != 0xffffffff) {\n        tempVar13 = *(uint *)(tempVar3 + 2);\n      }\n      if (currentDataEntry != tempVar3[1]) {\n        temporaryDataEntry = tempVar3[1];\n        tempVar13 = remove_share_flag_if_not_coff_00115f30(tempVar13,outputData);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (currentDataEntry = DAT_001278f8, (*(byte *)((long)dataEntries + 0x24) & 1) != 0)) ||\n     (currentDataEntry = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    length1 = strlen(currentDataEntry);\n    length2 = strlen(temporaryDataEntry);\n    tempVar12 = (char *)xmalloc(length1 + 1 + length2);\n    currentDataEntry = strcpy(tempVar12,currentDataEntry);\n    temporaryDataEntry = strcat(currentDataEntry,temporaryDataEntry);\n  }\n  tempVar9 = find_and_modify_entry_00114190(*dataEntries,0,0x80);\n  flag = false;\n  if (tempVar9 == 0) {\n    if ((DAT_00127a2c == 4) && ((tempVar13 & 0x2000001) != 0)) {\n      comparisonResult = *(int *)(*(long *)(binaryPointer + 8) + 8);\n      if (comparisonResult == 5) {\n        if (*(int *)(dataEntries[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(outputData + 8) + 8) == 5) {\n            flag = (tempVar13 & 0x2000000) == 0;\n            tempVar6 = ~((-(uint)((tempVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)dataEntries + 0x24) = *(uint *)((long)dataEntries + 0x24) & tempVar6;\n          }\n          else {\n            tempVar6 = 0xfdfffefd;\n          }\n          tempVar13 = tempVar13 & tempVar6;\n        }\n      }\n      else if ((comparisonResult != 2) || (comparisonResult = strcmp(*dataEntries,\".buildid\"), comparisonResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    tempVar13 = remove_share_flag_if_not_coff_00115f30(tempVar13 & 0x104 | *(uint *)(tempVar9 + 0x28),outputData,*dataEntries);\n  }\n  checkResult = bfd_convert_section_setup(binaryPointer,dataEntries,outputData,&temporaryDataEntry,temporaryArray);\n  if (checkResult == '\\0') {\n    currentDataEntry = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  currentDataEntry = (char *)bfd_make_section_anyway_with_flags(outputData,temporaryDataEntry,tempVar13);\n  if (currentDataEntry == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      temporaryArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    checkResult = bfd_set_section_size(currentDataEntry,temporaryArray[0]);\n    if (checkResult == '\\0') {\n      set_alignment_and_copy_data_00108072();\n      return;\n    }\n  }\n  else {\n    temporaryArray[0] = ((((long)DAT_00127a1c - 1U) + temporaryArray[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    checkResult = bfd_set_section_size(currentDataEntry);\n    if (checkResult == '\\0') {\n      set_alignment_and_copy_data_00108072();\n      return;\n    }\n  }\n  errorMessage = 0;\n  tempVar12 = dataEntries[6];\n  tempVar9 = find_and_modify_entry_00114190(*dataEntries,0,0x18);\n  if (tempVar9 == 0) {\n    currentDataEntry[0x28] = currentDataEntry[0x28] | 1;\n    tempVar11 = *dataEntries;\n    tempVar12 = tempVar12 + _DAT_00127990;\n    *(char **)(currentDataEntry + 0x30) = tempVar12;\n    *(char **)(currentDataEntry + 0x38) = tempVar12;\n    tempVar12 = dataEntries[7];\n    tempVar9 = find_and_modify_entry_00114190(tempVar11,0,0x60);\n    if (tempVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar11 = *(char **)(tempVar9 + 0x20);\n    if ((*(byte *)(tempVar9 + 0x14) & 0x40) != 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    *(char **)(currentDataEntry + 0x38) = tempVar11;\n    tempVar9 = find_and_modify_entry_00114190(*dataEntries,0,0x200);\n    if (tempVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempVar13 = *(uint *)((long)dataEntries + 0x7c);\n    if (tempVar13 < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(currentDataEntry + 0xb4) = *(undefined4 *)((long)dataEntries + 0xb4);\n    currentDataEntry[0x28] = currentDataEntry[0x28] & 0xcfU | *(byte *)(dataEntries + 5) & 0x30;\n    dataEntries[0xc] = currentDataEntry;\n    dataEntries[0xb] = (char *)0x0;\n    if ((*(byte *)((long)dataEntries + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    checkResult = (**(code **)(*(long *)(outputData + 8) + 0x158))(binaryPointer,dataEntries,outputData,currentDataEntry);\n    if (checkResult == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    tempVar11 = *(char **)(tempVar9 + 0x18);\n    if ((*(byte *)(tempVar9 + 0x14) & 8) == 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    currentDataEntry[0x28] = currentDataEntry[0x28] | 1;\n    tempVar2 = *dataEntries;\n    *(char **)(currentDataEntry + 0x30) = tempVar11;\n    *(char **)(currentDataEntry + 0x38) = tempVar11;\n    tempVar12 = dataEntries[7];\n    tempVar9 = find_and_modify_entry_00114190(tempVar2,0,0x60);\n    if (tempVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVar11 = *dataEntries;\n    *(char **)(currentDataEntry + 0x38) = tempVar12 + _DAT_00127990;\n    tempVar9 = find_and_modify_entry_00114190(tempVar11,0,0x200);\n    if (tempVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempVar13 = *(uint *)(tempVar9 + 0x2c);\n    if (0x3e < tempVar13) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(currentDataEntry + 0x7c) = tempVar13;\n    *(undefined4 *)(currentDataEntry + 0xb4) = *(undefined4 *)((long)dataEntries + 0xb4);\n    currentDataEntry[0x28] = currentDataEntry[0x28] & 0xcfU | *(byte *)(dataEntries + 5) & 0x30;\n    dataEntries[0xc] = currentDataEntry;\n    dataEntries[0xb] = (char *)0x0;\n    if ((*(byte *)((long)dataEntries + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempVar12 = dataEntries[0x1a];\n    tempVar9 = find_data_entry_00115d00(tempVar12,dataEntries[0x1c]);\n    if ((tempVar9 == 0) ||\n       (tempVar1 = *(long *)(binaryPointer + 8), *(uint *)(tempVar9 + 0x18) = *(uint *)(tempVar9 + 0x18) | 0x20,\n       *(int *)(tempVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempVar12 + 0xb0) = tempVar9;\n    checkResult = (**(code **)(*(long *)(outputData + 8) + 0x158))(binaryPointer,dataEntries,outputData,currentDataEntry);\n    if (checkResult == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (flag) {\n    *(undefined4 *)(*(long *)(currentDataEntry + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0,outputData,currentDataEntry,errorMessage);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00115f30",
                "strlen",
                "dcgettext",
                "xmalloc",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "FUN_001159d0",
                "strcpy",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_function_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  process_data_0010a0bd_00109ed3(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_execute_operation_00113e5e",
                "param_1": "input",
                "param_2": "output",
                "param_3": "offset",
                "cVar1": "result",
                "local_20": "temp"
            },
            "code": "\nundefined8 validate_and_execute_operation_00113e5e(undefined8 input,char **output,long offset)\n\n{\n  char result;\n  char *temp [2];\n  \n  temp[0] = *output;\n  *output = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)temp[0] < 5) ||\n      (result = string_comparison_00113fb0(temp[0],\"type\"), result == '\\0')) ||\n     ((temp[0][4] != '$' && (temp[0][4] != '.')))) {\n    if (*temp[0] != '_') {\n      return 1;\n    }\n    if (temp[0][1] != '_') {\n      return 1;\n    }\n    if (temp[0][2] != 'o') {\n      return 1;\n    }\n    if (temp[0][3] != 'p') {\n      return 1;\n    }\n    temp[0] = temp[0] + 4;\n  }\n  else {\n    temp[0] = temp[0] + 5;\n  }\n  result = parse_data_0010c95e(input,temp,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_and_execute_operation_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "concatenate_strings_0010abdd",
                "param_1": "paramPtr",
                "param_2": "str1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "ptr1",
                "pcVar2": "ptr2",
                "bVar3": "byteVar",
                "pcVar4": "ptr3",
                "__s": "ptr4",
                "sVar5": "size1",
                "sVar6": "size2",
                "sVar7": "size3",
                "sVar8": "size4",
                "uVar9": "returnValue",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByteVar"
            },
            "code": "\nundefined8\nconcatenateStrings_0010abdd(long paramPtr,char *str1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *ptr2;\n  byte byteVar;\n  char *ptr3;\n  char *ptr4;\n  size_t size1;\n  size_t size2;\n  size_t size3;\n  size_t size4;\n  undefined8 returnValue;\n  char charVar1;\n  char charVar2;\n  byte localByteVar;\n  \n  ptr4 = (char *)0x0;\n  localByteVar = *(byte *)(*(long *)(paramPtr + 0x60) + 0x1c);\n  ptr3 = (char *)extract_pointers_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByteVar == 0) {\n      byteVar = *(byte *)(*(long *)(paramPtr + 0x60) + 0x1c);\n    }\n    localByteVar = byteVar & 1;\n    ptr4 = (char *)extract_pointers_00109b2f(paramPtr);\n  }\n  ptr1 = *(long *)(paramPtr + 0x60);\n  if ((ptr1 == 0) || (ptr2 = *(char **)(ptr1 + 0x30), ptr2 == (char *)0x0)) {\n    returnValue = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    size1 = strlen(ptr2);\n    size2 = strlen(ptr3);\n    size3 = strlen(str1);\n    size4 = 0;\n    if (flag4 != '\\0') {\n      size4 = strlen(ptr4);\n    }\n    returnValue = xrealloc(ptr2,size3 + size1 + 0x28 + size2 + size4);\n    *(undefined8 *)(ptr1 + 0x30) = returnValue;\n    ptr2 = *(char **)(*(long *)(paramPtr + 0x60) + 0x30);\n    size1 = strlen(ptr2);\n    sprintf(ptr2 + size1,\"%s:%s;%c%c%c\",ptr3,str1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,size1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(paramPtr + 0x60) + 0x30);\n      size1 = strlen(ptr3);\n      sprintf(ptr3 + size1,\"%ld;%s;\",value,ptr4);\n      free(ptr4);\n    }\n    if (localByteVar != 0) {\n      *(undefined *)(*(long *)(paramPtr + 0x60) + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "inputFlag",
                "param_2": "inputArray",
                "param_3": "outputFormat",
                "uVar1": "firstInput",
                "uVar2": "errorMsg"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint inputFlag,undefined8 *inputArray,undefined8 outputFormat)\n\n{\n  undefined8 firstInput;\n  undefined8 errorMsg;\n  \n  if (((inputFlag & 0x8000000) != 0) && (*(int *)(inputArray[1] + 8) != 2)) {\n    firstInput = *inputArray;\n    inputFlag = inputFlag & 0xf7ffffff;\n    errorMsg = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_00119ed0(errorMsg,firstInput,outputFormat);\n  }\n  return inputFlag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_data_001129f4",
                "param_1": "input_array",
                "puVar1": "ptr_to_array",
                "piVar2": "current_array_ptr"
            },
            "code": "\nundefined8 extract_data_001129f4(int *input_array)\n\n{\n  undefined8 *ptr_to_array;\n  int *current_array_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    ptr_to_array = (undefined8 *)(input_array + 4);\n    current_array_ptr = **(int ***)(undefined8 *)*ptr_to_array;\n  } while ((input_array != current_array_ptr) && (input_array = current_array_ptr, current_array_ptr != (int *)0x0));\n  return ((undefined8 *)*ptr_to_array)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_data_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_and_invert_string_suffix_001082b3",
                "uVar1": "result",
                "check_and_compare_string_suffix_00113ede": "check_string_suffix"
            },
            "code": "\nuint check_and_invert_string_suffix_001082b3(void)\n\n{\n  uint result;\n  \n  result = check_string_suffix();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_invert_string_suffix_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_files_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "fileStatus",
                "param_5": "fileTarget",
                "param_6": "fileSize",
                "param_7": "fileFilter",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "charPtrPtrVar1",
                "pvVar7": "voidPtrVar1",
                "lVar8": "longVar1",
                "puVar9": "undefined8PtrVar1",
                "piVar10": "intPtrVar1",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "longVar2",
                "puVar14": "undefined8PtrVar2",
                "pcVar15": "charPtr1",
                "pcVar17": "charPtr2",
                "pcVar18": "charPtr3",
                "__ptr": "undefined8PtrVar3",
                "local_1a0": "undefined8PtrVar4",
                "local_198": "longPtrVar2",
                "local_158": "statStructVar1",
                "local_c8": "voidPtrVar2",
                "uStack_b0": "uintStackVar",
                "lStack_98": "longStackVar"
            },
            "code": "\n\n\nvoid processFiles_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 fileStatus,\n                 undefined8 fileTarget,long fileSize,undefined8 fileFilter)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar1;\n  int intVar2;\n  char **charPtrPtrVar1;\n  void *voidPtrVar1;\n  long longVar1;\n  undefined8 *undefined8PtrVar1;\n  int *intPtrVar1;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long longVar2;\n  undefined8 *undefined8PtrVar2;\n  char *charPtr1;\n  char **ppcVar16;\n  char *charPtr2;\n  char *charPtr3;\n  undefined8 *undefined8PtrVar3;\n  char **ppcVar19;\n  code *pcharVar20;\n  long lVar21;\n  uint uVar22;\n  char *pcharVar23;\n  stat *psVar24;\n  bool bVar25;\n  byte bVar26;\n  undefined8 *undefined8PtrVar4;\n  long *longPtrVar2;\n  stat statStructVar1;\n  void *voidPtrVar2 [3];\n  uint uintStackVar;\n  long longStackVar;\n  \n  bVar26 = 0;\n  longVar2 = check_file_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      undefined8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_00119ed0(undefined8Var2,inputFilePath);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  undefined8PtrVar2 = (undefined8 *)bfd_openr(inputFilePath,fileTarget);\n  if ((undefined8PtrVar2 == (undefined8 *)0x0) || (intVar2 = bfd_stat(undefined8PtrVar2,fileStatus), intVar2 != 0)) {\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)undefined8PtrVar2 + 0x44) = *(uint *)((long)undefined8PtrVar2 + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(undefined8PtrVar2,2);\n  if (charVar2 != '\\0') {\n    if (fileSize == 0) {\n      charVar2 = '\\0';\n      fileSize = *(long *)undefined8PtrVar2[1];\n    }\n    if (fileDescriptor < 0) {\n      undefined8PtrVar4 = (undefined8 *)bfd_openw(outputFilePath,fileSize);\n    }\n    else {\n      undefined8PtrVar4 = (undefined8 *)bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n    }\n    if (undefined8PtrVar4 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        undefined8Var2 = *undefined8PtrVar2;\n        undefined8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_00119ed0(undefined8Var1,undefined8Var2);\n        DAT_00127a10 = 0;\n      }\n      process_params_00114d50(undefined8PtrVar4,undefined8PtrVar2,DAT_001264b4);\n      longPtrVar2 = undefined8PtrVar4 + 0x1f;\n      if ((*(byte *)((long)undefined8PtrVar2 + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,undefined8PtrVar2,0,undefined8Var2);\n        return;\n      }\n      charPtr1 = (char *)create_temp_directory_0011a0e0(*undefined8PtrVar4);\n      if (charPtr1 == (char *)0x0) {\n        intPtrVar1 = __errno_location();\n        charPtr1 = strerror(*intPtrVar1);\n        undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(undefined8Var2,charPtr1);\n      }\n      if (DAT_00127a2c == 7) {\n        byteVar1 = *(byte *)((long)undefined8PtrVar2 + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)undefined8PtrVar2 + 0x49);\n        uVar22 = byteVar1 >> 3 & 1;\n      }\n      bVar25 = _DAT_001264b0 != 0;\n      *(byte *)((long)undefined8PtrVar4 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)undefined8PtrVar4 + 0x49) & 0xe7;\n      if (bVar25) {\n        *(uint *)((long)undefined8PtrVar4 + 0x44) = *(uint *)((long)undefined8PtrVar4 + 0x44) | 0x2000;\n      }\n      undefined8PtrVar3 = (undefined8 *)0x0;\n      ppcVar16 = (char **)bfd_openr_next_archived_file(undefined8PtrVar2,0);\n      charVar3 = bfd_set_format(undefined8PtrVar4,*(byte *)(undefined8PtrVar2 + 9) & 7);\n      if (charVar3 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(0,undefined8PtrVar4,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (ppcVar16 != (char **)0x0))) {\n        charPtr3 = *ppcVar16;\n        charPtr2 = charPtr3;\n        if (*charPtr3 == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_00119ed0(undefined8Var2,charPtr3);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*charPtr2 != '\\0') {\n          pcharVar23 = charPtr2;\n          if ((*charPtr2 == '.') && (pcharVar23 = charPtr2 + 1, charPtr2[1] == '.')) {\n            pcharVar23 = charPtr2 + 2;\n            if ((charPtr2[2] == '\\0') || (charPtr2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pcharVar23 != '\\0' && (*pcharVar23 != '/')); pcharVar23 = pcharVar23 + 1) {\n          }\n          charPtr2 = pcharVar23;\n          if (*pcharVar23 == '/') {\n            extract_and_copy_archived_files_001052a2();\n            return;\n          }\n        }\n        charPtr3 = (char *)concat(charPtr1,&DAT_0011b47d);\n        intVar2 = stat(charPtr3,&statStructVar1);\n        undefined8PtrVar1 = undefined8PtrVar3;\n        if (-1 < intVar2) {\n          longVar2 = create_temp_directory_0011a0e0(charPtr3);\n          free(charPtr3);\n          if (longVar2 == 0) {\n            intPtrVar1 = __errno_location();\n            charPtr3 = strerror(*intPtrVar1);\n            undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_00119ed0(undefined8Var2,charPtr3);\n            goto LAB_00104e93;\n          }\n          undefined8PtrVar1 = (undefined8 *)xmalloc(0x18);\n          charPtr3 = *ppcVar16;\n          *undefined8PtrVar1 = undefined8PtrVar3;\n          undefined8PtrVar1[2] = 0;\n          undefined8PtrVar1[1] = longVar2;\n          charPtr3 = (char *)concat(longVar2,&DAT_0011b47d,charPtr3);\n        }\n        intVar2 = 0;\n        if (DAT_001279cb != '\\0') {\n          psVar24 = &statStructVar1;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&psVar24->st_dev = 0;\n            psVar24 = (stat *)((long)psVar24 + (ulong)bVar26 * -8 + 4);\n          }\n          ppcVar19 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            ppcVar19 = ppcVar16;\n          }\n          intVar2 = (**(code **)(ppcVar19[1] + 0x1e8))(ppcVar16,&statStructVar1);\n          if (intVar2 != 0) {\n            charPtr2 = *ppcVar16;\n            undefined8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_00119ed0(undefined8Var2,charPtr2);\n          }\n        }\n        undefined8PtrVar3 = (undefined8 *)xmalloc(0x18);\n        undefined8PtrVar3[1] = charPtr3;\n        *undefined8PtrVar3 = undefined8PtrVar1;\n        undefined8PtrVar3[2] = 0;\n        charVar3 = bfd_check_format(ppcVar16,1);\n        if (charVar3 == '\\0') {\n          undefined8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,ppcVar16,0,undefined8Var2);\n          ppcVar19 = (char **)bfd_openw(charPtr3,fileSize);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(charPtr3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          charPtrPtrVar1 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            charPtrPtrVar1 = ppcVar16;\n          }\n          intVar1 = (**(code **)(charPtrPtrVar1[1] + 0x1e8))(ppcVar16);\n          longVar2 = longStackVar;\n          if (intVar1 == 0) {\n            if (longStackVar < 0) {\n              construct_formatted_string_001125fa(ppcVar16);\n              undefined8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_00119ed0(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(ppcVar16,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  charPtr2 = *ppcVar19;\n                  undefined8Var2 = construct_formatted_string_001125fa(ppcVar16);\n                  pcharVar23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pcharVar23,undefined8Var2,charPtr2);\n                }\n                voidPtrVar1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - lVar21) {\n                  lVar21 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    lVar21 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPtrVar1,lVar21,ppcVar16);\n                  charPtrPtrVar1 = ppcVar16;\n                  if ((lVar21 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPtrVar1,lVar21,ppcVar19), charPtrPtrVar1 = ppcVar19,\n                     lVar21 != longVar1)) {\n                    print_error_message_001126c0(0,charPtrPtrVar1,0,0);\n                    free(voidPtrVar1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,uintStackVar | 0x100);\n                free(voidPtrVar1);\n                charVar3 = bfd_close_all_done(ppcVar19);\n                if (charVar3 == '\\0') {\n                  print_error_message_001126c0(charPtr3,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = construct_formatted_string_001125fa(ppcVar16);\n              print_error_0011a110(undefined8Var2);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,ppcVar16,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(ppcVar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(charPtr3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(charPtr3);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            ppcVar19 = (char **)bfd_openw(charPtr3,*(undefined8 *)ppcVar16[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(charPtr3,fileSize);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          charVar3 = FUNC_00114e50(ppcVar16,ppcVar19,fileFilter);\n          if (charVar3 == '\\0') {\n            intVar1 = bfd_get_arch(ppcVar16);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(ppcVar19);\n            if (charVar3 == '\\0') {\n              print_error_message_001126c0(charPtr3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(ppcVar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(charPtr3,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (intVar2 == 0)) {\n            set_file_time_0011a350(charPtr3,&statStructVar1);\n          }\n          longVar2 = bfd_openr(charPtr3,fileSize);\n          undefined8PtrVar3[2] = longVar2;\n          *longPtrVar2 = longVar2;\n          longPtrVar2 = (long *)(longVar2 + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(undefined8PtrVar2);\n          bfd_close(ppcVar16);\n          ppcVar16 = ppcVar19;\n        }\n      }\n      *longPtrVar2 = 0;\n      voidPtrVar1 = (void *)xstrdup(*undefined8PtrVar4);\n      if (DAT_00127a20 == 0) {\n        pcharVar20 = bfd_close;\n      }\n      else {\n        pcharVar20 = bfd_close_all_done;\n      }\n      charVar2 = (*pcharVar20)(undefined8PtrVar4);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(voidPtrVar1,0,0,0);\n      }\n      free(voidPtrVar1);\n      voidPtrVar1 = (void *)xstrdup(*undefined8PtrVar2);\n      charVar2 = bfd_close(undefined8PtrVar2);\n      if (charVar2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(voidPtrVar1,0,0,0);\n      }\n      free(voidPtrVar1);\nLAB_00114b4b:\n      while (undefined8PtrVar3 != (undefined8 *)0x0) {\n        if (undefined8PtrVar3[2] == 0) {\n          rmdir((char *)undefined8PtrVar3[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)undefined8PtrVar3[1]);\n        }\n        free((void *)undefined8PtrVar3[1]);\n        undefined8PtrVar2 = (undefined8 *)*undefined8PtrVar3;\n        free(undefined8PtrVar3);\n        undefined8PtrVar3 = undefined8PtrVar2;\n      }\n      rmdir(charPtr1);\n      free(charPtr1);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(undefined8PtrVar2,1,voidPtrVar2);\n  if (charVar2 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(undefined8PtrVar2,3,&statStructVar1);\n    if (charVar2 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      print_error_message_001126c0(inputFilePath,0,0,0);\n      if (intVar2 == 0xd) {\n        print_matching_formats_0011256b(voidPtrVar2[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(statStructVar1.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(voidPtrVar2[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)undefined8PtrVar2[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,fileSize);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  process_params_00114d50(longVar2,undefined8PtrVar2,DAT_001264b4);\n  charVar2 = FUNC_00114e50(undefined8PtrVar2,longVar2,fileFilter);\n  if (charVar2 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charVar2 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(undefined8PtrVar2);\n  if (charVar2 == '\\0') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "close",
                "FUN_00113f50",
                "bfd_stat",
                "bfd_set_error",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_00114d50",
                "FUN_0011a0e0",
                "FUN_00119dd0",
                "FUN_00104d25",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_fdopenw",
                "bfd_openr_next_archived_file",
                "FUN_0011256b",
                "bfd_check_format",
                "free",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_files_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_if_needed_0010b800",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptrToData",
                "uVar2": "returnValue",
                "sVar3": "stringLength",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2",
                "local_8c": "stringArray",
                "auStack_8a": "auxiliaryArray"
            },
            "code": "\nundefined8 initializeDataIfNeeded_0010b800(long dataPointer,int size,char flag)\n\n{\n  long *ptrToData;\n  undefined8 returnValue;\n  size_t stringLength;\n  long tempVar1;\n  long tempVar2;\n  undefined2 stringArray;\n  undefined4 auxiliaryArray [24];\n  \n  if (size - 1U < 8) {\n    tempVar1 = dataPointer + 0xb8;\n    if (flag != '\\0') {\n      tempVar1 = dataPointer + 0x78;\n    }\n    ptrToData = (long *)(tempVar1 + (ulong)(size - 1U) * 8);\n    tempVar1 = *ptrToData;\n    if (tempVar1 != 0) {\n      returnValue = format_and_initialize_data_00109cf4(dataPointer,tempVar1,size);\n      return returnValue;\n    }\n    tempVar1 = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = tempVar1 + 1;\n    *ptrToData = tempVar1;\n    sprintf((char *)&stringArray,\"%ld=r%ld;\",tempVar1,tempVar1);\n    if (flag == '\\0') {\n      tempVar2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&stringArray);\n      sprintf((char *)((long)&stringArray + stringLength),\"%ld;%ld;\",-tempVar2,tempVar2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&stringArray);\n      *(undefined2 *)((long)&stringArray + stringLength) = 0x3b30;\n      *(undefined *)((long)&stringArray + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&stringArray + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&stringArray + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = initialize_data_00109b52(dataPointer,&stringArray,tempVar1,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_if_needed_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "inputBuffer",
                "param_2": "character",
                "param_3": "flag",
                "param_4": "outputBuffer",
                "param_5": "outputBufferSize",
                "uVar1": "entryCount",
                "uVar2": "tempSize",
                "cVar3": "successFlag",
                "pcVar4": "extractedString",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "entryIndex",
                "__ptr": "extractedData",
                "uVar7": "result",
                "uVar8": "initializedFlag",
                "lVar9": "loopIndex",
                "uVar10": "tempBufferSize",
                "puVar11": "tempBuffer",
                "bVar12": "isZero"
            },
            "code": "\nundefined8 processData_00109ed3(long inputBuffer,uint character,undefined4 flag,long *outputBuffer,ulong *outputBufferSize)\n\n{\n  ulong entryCount;\n  ulong tempSize;\n  char successFlag;\n  char *extractedString;\n  size_t stringLength;\n  char *formattedString;\n  long entryIndex;\n  void *extractedData;\n  undefined8 result;\n  undefined initializedFlag;\n  long loopIndex;\n  ulong tempBufferSize;\n  undefined *tempBuffer;\n  byte isZero;\n  \n  isZero = 0;\n  entryIndex = *(long *)(inputBuffer + 0x60);\n  if (entryIndex != 0) {\n    entryCount = *(ulong *)(entryIndex + 0x10);\n    if (((long)entryCount < 1) || (outputBuffer == (long *)0x0)) {\n      initializedFlag = *(undefined *)(entryIndex + 0x1c);\n      extractedString = (char *)extract_pointers_00109b2f(inputBuffer);\n      stringLength = strlen(extractedString);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)character,extractedString);\n      free(extractedString);\n      entryIndex = 0;\n    }\n    else {\n      tempBufferSize = *outputBufferSize;\n      if (tempBufferSize <= entryCount) {\n        if (tempBufferSize == 0) {\n          tempBufferSize = 10;\n        }\n        for (; tempBufferSize <= entryCount; tempBufferSize = tempBufferSize * 2) {\n        }\n        entryIndex = xrealloc(*outputBuffer,tempBufferSize * 8);\n        tempSize = *outputBufferSize;\n        *outputBuffer = entryIndex;\n        tempBuffer = (undefined *)(entryIndex + tempSize * 8);\n        for (loopIndex = (tempBufferSize - tempSize) * 8; loopIndex != 0; loopIndex = loopIndex + -1) {\n          *tempBuffer = 0;\n          tempBuffer = tempBuffer + (ulong)isZero * -2 + 1;\n        }\n        *outputBufferSize = tempBufferSize;\n      }\n      entryIndex = *(long *)(*outputBuffer + entryCount * 8);\n      if ((entryIndex != 0) && (*(char *)(*(long *)(inputBuffer + 0x60) + 0x1c) == '\\0')) {\n        extractedData = (void *)extract_pointers_00109b2f(inputBuffer);\n        free(extractedData);\n        result = format_and_initialize_data_00109cf4(inputBuffer,entryIndex,flag);\n        return result;\n      }\n      entryIndex = *(long *)(inputBuffer + 0x68);\n      *(long *)(inputBuffer + 0x68) = entryIndex + 1;\n      extractedString = (char *)extract_pointers_00109b2f(inputBuffer);\n      stringLength = strlen(extractedString);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",entryIndex,(ulong)character,extractedString);\n      free(extractedString);\n      initializedFlag = 1;\n      *(long *)(*outputBuffer + entryCount * 8) = entryIndex;\n    }\n    successFlag = initialize_data_00109b52(inputBuffer,formattedString,entryIndex,initializedFlag,flag);\n    if (successFlag != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00112925",
                "FUN_0010bf86",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_00114cf0",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_00114d60",
                "FUN_0010a2b9",
                "FUN_00108d9a",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "FUN_00115530",
                "FUN_00113b98",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a181",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00108c86",
                "FUN_0010c139",
                "FUN_0010e9a0",
                "FUN_00109022",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010bd62",
                "FUN_001125fa",
                "FUN_00109ed3",
                "FUN_00112904",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bbd3",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010aa53",
                "FUN_0010da0b",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_00113e23",
                "FUN_00109a0b",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010d882",
                "FUN_0010c6be",
                "FUN_00112894",
                "FUN_0010bc80",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptrUnit",
                "puVar2": "ptrXmalloc1",
                "puVar3": "ptrXmalloc2",
                "lVar4": "loopCounter",
                "puVar5": "ptrLoop",
                "pcVar6": "defaultFilename",
                "bVar7": "byteVar",
                "auVar8": "returnVal"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptrUnit;\n  undefined4 *ptrXmalloc1;\n  undefined4 *ptrXmalloc2;\n  long loopCounter;\n  undefined4 *ptrLoop;\n  char *defaultFilename;\n  byte byteVar;\n  undefined returnVal [16];\n  \n  byteVar = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  ptrXmalloc1 = (undefined4 *)xmalloc(0x18);\n  ptrLoop = ptrXmalloc1;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptrLoop = 0;\n    ptrLoop = ptrLoop + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptrXmalloc1 + 2) = defaultFilename;\n  ptrXmalloc2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptrXmalloc1;\n  ptrLoop = ptrXmalloc2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptrLoop = 0;\n    ptrLoop = ptrLoop + (ulong)byteVar * -2 + 1;\n  }\n  ptrUnit = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptrXmalloc2 + 2) = ptrXmalloc1;\n  if (ptrUnit == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptrXmalloc2;\n  }\n  else {\n    *ptrUnit = ptrXmalloc2;\n  }\n  debugInfo[1] = (long)ptrXmalloc2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = 1;\n  return returnVal;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = construct_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = construct_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = construct_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = construct_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = construct_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = construct_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = construct_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = identify_input_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_binary_function_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_and_modify_entry_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_and_modify_entry_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_and_modify_entry_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = parse_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)allocate_memory_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = debug_info_function_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = allocate_memory_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = debug_info_function_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_command_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = initialize_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = record_debug_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = update_record_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_debugging_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_info_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = check_and_find_data_entry_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_match_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_match_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = process_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocation_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_data_entry_00115dc0,param_2);\n    bfd_map_over_sections(param_1,reverse_and_modify_section_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)extract_and_process_attributes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_format",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_00107976",
                "FUN_001125fa",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_data_entry_00115d00",
                "param_1": "data_entry_list",
                "param_2": "binary_data",
                "uVar1": "data_entry_count",
                "lVar2": "result"
            },
            "code": "\nlong find_data_entry_00115d00(long data_entry_list,long binary_data)\n\n{\n  uint data_entry_count;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binary_data + 8) + 8) == 5) {\n      if (*(int *)(data_entry_list + 0x28) == *(int *)(*(long *)(binary_data + 0x110) + 0xd40)) {\n        data_entry_count = *(uint *)(data_entry_list + 0x2c);\n        if (data_entry_count == 0) {\n          result = 0;\n        }\n        else if ((ulong)data_entry_count <\n                 *(ulong *)(*(long *)(binary_data + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binary_data + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(data_entry_count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_data_entry_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "param_6": "data_6",
                "lVar1": "memory_ptr",
                "plVar2": "data_structure_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitialize_data_structure_00113c43(long data_1,long data_2,long data_3,long data_4,undefined data_5,\n            undefined8 data_6)\n\n{\n  long memory_ptr;\n  long *data_structure_ptr;\n  undefined result [16];\n  \n  if ((data_1 != 0) && (data_2 != 0)) {\n    memory_ptr = initialize_memory_00112904(0x10,0);\n    if (memory_ptr != 0) {\n      data_structure_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)data_structure_ptr + 0x21) = 0;\n      *data_structure_ptr = data_1;\n      *(undefined4 *)((long)data_structure_ptr + 0x24) = 0;\n      data_structure_ptr[1] = data_2;\n      data_structure_ptr[2] = data_3;\n      data_structure_ptr[3] = data_4;\n      *(undefined *)(data_structure_ptr + 4) = data_5;\n      *(long **)(memory_ptr + 0x10) = data_structure_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  memory_ptr = 0;\nLAB_00113caa:\n  result._8_8_ = data_6;\n  result._0_8_ = memory_ptr;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_debug_command_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "command",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "parsedValue",
                "plVar3": "allocatedMemoryPtr"
            },
            "code": "\nbool processDebugCommand_00112a33(undefined8 param1,long param2,undefined8 param3,byte command,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long parsedValue;\n  long *allocatedMemoryPtr;\n  \n  if (command < 0x12) {\n    if (command != 0) {\n      switch(command) {\n      case 1:\n        result = initialize_debug_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = initialize_debug_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = initialize_debug_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_debug_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        parsedValue = parse_debug_tag_0010c6be(param5,*(undefined8 *)(param2 + 8));\n        if (parsedValue == 0) {\n          return false;\n        }\n        allocatedMemoryPtr = (long *)allocate_or_update_memory_0010da0b(param1,param3);\n        *allocatedMemoryPtr = parsedValue;\n        break;\n      case 0xd:\n        parsedValue = initialize_and_allocate_memory_0010c218(param5,*(undefined8 *)(param2 + 8));\n        return parsedValue != 0;\n      case 0x11:\n        result = record_parameter_debug_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (command == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = initialize_debug_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_command_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "initialize_data_type_0010c2d2",
                "param_1": "output",
                "param_2": "input",
                "param_3": "dataType",
                "uVar1": "typeCode",
                "pcVar2": "dataTypeStr",
                "uVar3": "initializedDataType",
                "lVar4": "result",
                "plVar5": "fileInfo",
                "uVar6": "negTypeCode"
            },
            "code": "\n\n\nlong initializeDataType_0010c2d2(undefined8 output,long input,int *dataType)\n\n{\n  uint typeCode;\n  char *dataTypeStr;\n  undefined8 initializedDataType;\n  long result;\n  long *fileInfo;\n  uint negTypeCode;\n  \n  if ((*dataType == 0) && (typeCode = dataType[1], (int)typeCode < 0)) {\n    negTypeCode = ~typeCode;\n    if (negTypeCode < 0x22) {\n      result = *(long *)(input + 0x90 + (ulong)negTypeCode * 8);\n      if (result == 0) {\n        switch(negTypeCode) {\n        case 1:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(1,0);\n          dataTypeStr = \"char\";\n          break;\n        case 2:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(2,0);\n          dataTypeStr = \"short\";\n          break;\n        case 3:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,0);\n          dataTypeStr = \"long\";\n          break;\n        case 4:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(1,1);\n          dataTypeStr = \"unsigned char\";\n          break;\n        case 5:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(1,0);\n          dataTypeStr = \"signed char\";\n          break;\n        case 6:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(2,1);\n          dataTypeStr = \"unsigned short\";\n          break;\n        case 7:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,1);\n          dataTypeStr = \"unsigned int\";\n          break;\n        case 8:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,1);\n          dataTypeStr = \"unsigned\";\n          break;\n        case 9:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,1);\n          dataTypeStr = \"unsigned long\";\n          break;\n        case 10:\n          initializedDataType = initialize_memory_00113e17();\n          dataTypeStr = \"void\";\n          break;\n        case 0xb:\n          initializedDataType = initialize_memory_00113df2(4);\n          dataTypeStr = \"float\";\n          break;\n        case 0xc:\n          initializedDataType = initialize_memory_00113df2(8);\n          dataTypeStr = \"double\";\n          break;\n        case 0xd:\n          initializedDataType = initialize_memory_00113df2(8);\n          dataTypeStr = \"long double\";\n          break;\n        case 0xe:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,0);\n          dataTypeStr = \"integer\";\n          break;\n        case 0xf:\n          initializedDataType = initialize_memory_00112904(6,4);\n          dataTypeStr = \"boolean\";\n          break;\n        case 0x10:\n          initializedDataType = initialize_memory_00113df2(4);\n          dataTypeStr = \"short real\";\n          break;\n        case 0x11:\n          initializedDataType = initialize_memory_00113df2(8);\n          dataTypeStr = \"real\";\n          break;\n        case 0x12:\n          dataTypeStr = \"stringptr\";\n          initializedDataType = 0;\n          break;\n        case 0x13:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(1,1);\n          dataTypeStr = \"character\";\n          break;\n        case 0x14:\n          initializedDataType = initialize_memory_00112904(6,1);\n          dataTypeStr = \"logical*1\";\n          break;\n        case 0x15:\n          initializedDataType = initialize_memory_00112904(6,2);\n          dataTypeStr = \"logical*2\";\n          break;\n        case 0x16:\n          initializedDataType = initialize_memory_00112904(6,4);\n          dataTypeStr = \"logical*4\";\n          break;\n        case 0x17:\n          initializedDataType = initialize_memory_00112904(6,4);\n          dataTypeStr = \"logical\";\n          break;\n        case 0x18:\n          initializedDataType = initialize_memory_00112904(5,8);\n          dataTypeStr = \"complex\";\n          break;\n        case 0x19:\n          initializedDataType = initialize_memory_00112904(5,0x10);\n          dataTypeStr = \"double complex\";\n          break;\n        case 0x1a:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(1,0);\n          dataTypeStr = \"integer*1\";\n          break;\n        case 0x1b:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(2,0);\n          dataTypeStr = \"integer*2\";\n          break;\n        case 0x1c:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,0);\n          dataTypeStr = \"integer*4\";\n          break;\n        case 0x1d:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(2,0);\n          dataTypeStr = \"wchar\";\n          break;\n        case 0x1e:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(8,0);\n          dataTypeStr = \"long long\";\n          break;\n        case 0x1f:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(8,1);\n          dataTypeStr = \"unsigned long long\";\n          break;\n        case 0x20:\n          initializedDataType = initialize_memory_00112904(6,8);\n          dataTypeStr = \"logical*8\";\n          break;\n        case 0x21:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(8,0);\n          dataTypeStr = \"integer*8\";\n          break;\n        default:\n          initializedDataType = initialize_memory_and_set_param_00113dfe(4,0);\n          dataTypeStr = \"int\";\n        }\n        result = initialize_and_allocate_memory_0010c218(output,dataTypeStr,initializedDataType);\n        *(long *)(input + 0x90 + (ulong)negTypeCode * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    dataTypeStr = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeStr,(ulong)typeCode);\n  }\n  else {\n    fileInfo = (long *)extract_file_info_00109022(input);\n    if (fileInfo != (long *)0x0) {\n      if (*fileInfo == 0) {\n        result = initialize_memory_00113e23(fileInfo,0);\n        return result;\n      }\n      return *fileInfo;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "fprintf",
                "dcgettext",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00109022",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_0010e07c",
                "param_1": "param1",
                "param_2": "recordTable",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "fileHeader",
                "param_6": "param6",
                "lVar1": "recordSize",
                "lVar2": "recordOffset",
                "lVar3": "numRecords",
                "cVar4": "result",
                "uVar5": "error",
                "__ptr": "recordArray",
                "uVar6": "recordValue1",
                "uVar7": "recordValue2",
                "puVar8": "recordEntry",
                "pcVar9": "errorString",
                "puVar10": "auxEntry",
                "uVar11": "intValue",
                "lVar12": "recordCounter",
                "iVar13": "offsetValue",
                "iVar14": "maxRecords",
                "local_a8": "localValue1",
                "uStack_a4": "localValue2",
                "uStack_a0": "localValue3",
                "uStack_9c": "localValue4",
                "local_88": "symentBuffer",
                "local_6a": "localValue5",
                "local_68": "byte1",
                "local_67": "byte2",
                "local_60": "auxBuffer",
                "local_56": "ushortValue"
            },
            "code": "\nundefined8\nprocessBinary_0010e07c(undefined8 param1,long *recordTable,undefined8 param3,int param4,long fileHeader,\n            undefined8 param6)\n\n{\n  long recordSize;\n  long recordOffset;\n  long numRecords;\n  char result;\n  undefined4 error;\n  void *recordArray;\n  undefined8 recordValue1;\n  undefined8 recordValue2;\n  undefined4 *recordEntry;\n  char *errorString;\n  undefined *auxEntry;\n  uint intValue;\n  long recordCounter;\n  int offsetValue;\n  int maxRecords;\n  undefined4 localValue1;\n  undefined4 localValue2;\n  undefined4 localValue3;\n  undefined4 localValue4;\n  undefined symentBuffer [30];\n  undefined2 localValue5;\n  byte byte1;\n  byte byte2;\n  undefined auxBuffer [10];\n  ushort ushortValue;\n  \n  maxRecords = 10;\n  recordCounter = 0;\n  recordSize = *(long *)(fileHeader + 0x18);\n  recordArray = (void *)xmalloc(0x50);\n  while ((recordTable[3] < recordSize && (recordTable[2] < recordTable[1]))) {\n    recordOffset = *(long *)(*recordTable + recordTable[2] * 8);\n    result = bfd_coff_get_syment(param1,recordOffset,symentBuffer);\n    if (result == '\\0') {\n      error = bfd_get_error();\n      recordValue1 = bfd_errmsg(error);\n      errorString = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      recordValue2 = dcgettext(0,errorString,5);\n      print_error_00119ed0(recordValue2,recordValue1);\n      free(recordArray);\n      return 0;\n    }\n    numRecords = recordTable[3];\n    auxEntry = (undefined *)0x0;\n    recordTable[2] = recordTable[2] + 1;\n    recordTable[3] = numRecords + 1 + (ulong)byte2;\n    if (byte2 != 0) {\n      auxEntry = auxBuffer;\n      result = bfd_coff_get_auxent(param1,recordOffset,0,auxEntry);\n      if (result == '\\0') {\n        error = bfd_get_error();\n        recordValue1 = bfd_errmsg(error);\n        errorString = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (byte1 == 0x12) {\n      intValue = (uint)ushortValue;\n      offsetValue = (int)*(undefined8 *)(recordOffset + 0x10) +\n               (int)*(undefined8 *)(*(long *)(recordOffset + 0x20) + 0x30);\n    }\n    else {\n      if (byte1 < 0x13) {\n        if ((byte1 == 8) || (byte1 == 0xb)) {\n          intValue = 0;\n          offsetValue = ((int)*(undefined8 *)(recordOffset + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(recordOffset + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (byte1 == 0x66) break;\n      intValue = 0;\n      offsetValue = 0;\n    }\nLAB_0010e214:\n    recordValue2 = parse_coff_type_0010dac0(param1,recordTable,param3,numRecords,localValue5,auxEntry,1);\n    recordValue1 = *(undefined8 *)(recordOffset + 8);\n    recordEntry = (undefined4 *)xmalloc(0x20);\n    localValue1 = (undefined4)recordValue1;\n    localValue2 = (undefined4)((ulong)recordValue1 >> 0x20);\n    localValue3 = (undefined4)recordValue2;\n    localValue4 = (undefined4)((ulong)recordValue2 >> 0x20);\n    *(undefined8 *)(recordEntry + 5) = 0;\n    recordEntry[6] = offsetValue;\n    recordEntry[7] = intValue;\n    recordEntry[4] = 0;\n    *recordEntry = localValue1;\n    recordEntry[1] = localValue2;\n    recordEntry[2] = localValue3;\n    recordEntry[3] = localValue4;\n    if (maxRecords <= (int)recordCounter + 1) {\n      maxRecords = maxRecords + 10;\n      recordArray = (void *)xrealloc(recordArray,(long)maxRecords << 3,recordEntry,0,param6);\n    }\n    *(undefined4 **)((long)recordArray + recordCounter * 8) = recordEntry;\n    recordCounter = recordCounter + 1;\n  }\n  *(undefined8 *)((long)recordArray + (long)(int)recordCounter * 8) = 0;\n  recordValue1 = initialize_memory_00113da9(param4 == 8,*(undefined2 *)(fileHeader + 10),recordArray);\n  return recordValue1;\n}\n\n",
            "called": [
                "FUN_00113da9",
                "xrealloc",
                "bfd_errmsg",
                "free",
                "dcgettext",
                "xmalloc",
                "bfd_coff_get_syment",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "FUN_0010dac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_application_001082c3",
                "undefined8": "void"
            },
            "code": "\nvoid initializeApplication_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_application_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "process_file_00114460",
                "param_1": "filename",
                "param_2": "htab",
                "param_3": "fileContent",
                "iVar1": "lineNumber",
                "piVar2": "errnoLoc",
                "pcVar3": "errorMsg",
                "uVar4": "gettextResult",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "slotPtr",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextCharPtr",
                "pbVar10": "currentCharPtr",
                "pbVar11": "nextBytePtr",
                "pbVar12": "lineStartPtr"
            },
            "code": "\nvoid processFile_00114460(char *filename,undefined8 htab,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errnoLoc;\n  char *errorMsg;\n  undefined8 gettextResult;\n  size_t fileSize;\n  byte *buffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **slotPtr;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextCharPtr;\n  byte *currentCharPtr;\n  byte *nextBytePtr;\n  byte *lineStartPtr;\n  \n  fileSize = check_file_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errnoLoc = __errno_location();\n      errorMsg = strerror(*errnoLoc);\n      gettextResult = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(gettextResult,filename,errorMsg);\n    }\n    bytesRead = fread(buffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineNumber = ferror(file), lineNumber != 0)) {\n      gettextResult = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(gettextResult,filename);\n    }\n    lineNumber = 1;\n    fclose(file);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentByte = *buffer;\n    lineStartPtr = buffer;\n    while (currentCharPtr = lineStartPtr, currentByte != 0) {\n      for (; currentByte = *currentCharPtr, nextBytePtr = currentCharPtr, currentByte != 10; currentCharPtr = currentCharPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextCharPtr = currentCharPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentCharPtr = 0;\n            nextCharPtr = currentCharPtr + 1;\n            if (currentCharPtr[1] == 10) {\n              nextCharPtr = currentCharPtr + 2;\n              nextBytePtr = currentCharPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentCharPtr = 0;\n      if (currentCharPtr[1] == 0xd) {\n        nextBytePtr = currentCharPtr + 1;\n        nextCharPtr = currentCharPtr + 2;\n      }\n      else {\n        nextCharPtr = currentCharPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartPtr;\n      while ((currentByte == 0x20 || (currentCharPtr = lineStartPtr, currentByte == 9))) {\n        currentCharPtr = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        currentByte = *currentCharPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentCharPtr[1];\n        currentCharPtr = currentCharPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentCharPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentCharPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentCharPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentCharPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentCharPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentCharPtr[6];\n          currentChar = currentCharPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          gettextResult = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_00119ed0(gettextResult,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentCharPtr = 0;\n      if (lineStartPtr < currentCharPtr) {\n        slotPtr = (byte **)htab_find_slot(htab,lineStartPtr,1);\n        *slotPtr = lineStartPtr;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPtr = nextCharPtr;\n      currentByte = nextBytePtr[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "__errno_location",
                "FUN_00113f50",
                "dcgettext",
                "xmalloc",
                "strerror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "extract_pointers_and_build_string_0010a94e",
                "param_2": "input_string1",
                "param_3": "input_string2",
                "param_4": "flag",
                "cVar1": "flag_value",
                "lVar2": "ptr",
                "__s": "pointers",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "result_string",
                "uVar8": "return_value",
                "pcVar9": "suffix"
            },
            "code": "\nundefined8 extract_pointers_and_build_string_0010a94e(long param_1,char *input_string1,char *input_string2,int flag)\n\n{\n  char flag_value;\n  long ptr;\n  char *pointers;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *result_string;\n  undefined8 return_value;\n  char *suffix;\n  \n  flag_value = *(char *)(*(long *)(param_1 + 0x60) + 0x1c);\n  pointers = (char *)extract_pointers_00109b2f();\n  result_string = *(char **)(*(long *)(param_1 + 0x60) + 0x20);\n  if (result_string == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    len1 = strlen(result_string);\n    len2 = strlen(input_string1);\n    len3 = strlen(pointers);\n    len4 = strlen(input_string2);\n    result_string = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      suffix = \"/1\";\n    }\n    else {\n      suffix = \"/0\";\n      if ((flag != 2) && (suffix = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(result_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param_1 + 0x60) + 0x20),input_string1,suffix,\n            pointers,input_string2,*(long *)(param_1 + 0x60));\n    free(*(void **)(*(long *)(param_1 + 0x60) + 0x20));\n    ptr = *(long *)(param_1 + 0x60);\n    *(char **)(ptr + 0x20) = result_string;\n    if (flag_value != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_pointers_and_build_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_debug_info_00113b1e",
                "param_1": "input_param",
                "param_2": "debug_data",
                "param_3": "default_value",
                "param_4": "result",
                "auVar1": "extracted_result",
                "piVar2": "debug_info",
                "uVar3": "extracted_value",
                "auVar4": "updated_result"
            },
            "code": "\nundefined  [16] extract_debug_info_00113b1e(long input_param,undefined8 debug_data,ulong default_value,undefined8 result)\n\n{\n  undefined extracted_result [16];\n  int *debug_info;\n  undefined8 extracted_value;\n  undefined updated_result [16];\n  \n  if (input_param != 0) {\n    debug_info = (int *)extract_debug_info_00113b1e_00112b6e(input_param,0);\n    if ((debug_info == (int *)0x0) || (3 < *debug_info - 7U)) {\n      extracted_value = 0;\n    }\n    else {\n      extracted_value = **(undefined8 **)(debug_info + 4);\n    }\n    updated_result._8_8_ = result;\n    updated_result._0_8_ = extracted_value;\n    return updated_result;\n  }\n  extracted_result._8_8_ = 0;\n  extracted_result._0_8_ = default_value;\n  return extracted_result << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_debug_info_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "initialize_data_extraction_0010a0e9",
                "param_1": "data_structure",
                "param_2": "value_1",
                "param_3": "value_2",
                "uVar1": "byte_value",
                "uVar2": "return_value",
                "__s": "extracted_string",
                "sVar3": "string_length",
                "__s_00": "allocated_string"
            },
            "code": "\nundefined4 initialize_data_extraction_0010a0e9(long data_structure,undefined8 value_1,undefined8 value_2)\n\n{\n  undefined byte_value;\n  undefined4 return_value;\n  char *extracted_string;\n  size_t string_length;\n  char *allocated_string;\n  \n  byte_value = *(undefined *)(*(long *)(data_structure + 0x60) + 0x1c);\n  return_value = *(undefined4 *)(*(long *)(data_structure + 0x60) + 0x18);\n  extracted_string = (char *)extract_pointers_00109b2f();\n  string_length = strlen(extracted_string);\n  allocated_string = (char *)xmalloc(string_length + 100);\n  sprintf(allocated_string,\"r%s;%ld;%ld;\",extracted_string,value_1,value_2);\n  free(extracted_string);\n  return_value = initialize_data_00109b52(data_structure,allocated_string,0,byte_value,return_value);\n  if ((char)return_value != '\\0') {\n    free(allocated_string);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_extraction_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_entry_00114c20",
                "param_1": "entry",
                "cVar1": "stringMatch",
                "pcVar2": "nextChar",
                "find_and_modify_entry_00114190": "findAndModifyEntry",
                "string_comparison_00113fb0": "compareStrings"
            },
            "code": "\nvoid processEntry_00114c20(long entry)\n\n{\n  char stringMatch;\n  char *nextChar;\n  \n  findAndModifyEntry(entry,1,1);\n  stringMatch = compareStrings(entry,&DAT_0011b499);\n  if (stringMatch != '\\0') {\n    nextChar = (char *)(entry + 5);\n    if (*(char *)(entry + 4) != 'a') {\n      nextChar = (char *)(entry + 4);\n    }\n    if (*nextChar != '\\0') {\n      findAndModifyEntry(nextChar,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_entry_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_data_entry_00115f50",
                "param_1": "inputParam",
                "param_2": "inputArray",
                "param_3": "inputChar",
                "__s1": "inputString",
                "uVar1": "stringComparisonResult",
                "uVar2": "comparisonResult",
                "extraout_EDX": "comparisonResult2",
                "plVar3": "dataEntry",
                "auVar4": "functionResult"
            },
            "code": "\nuint checkDataEntry_00115f50(long inputParam,char **inputArray,char inputChar)\n\n{\n  char *inputString;\n  uint stringComparisonResult;\n  undefined4 comparisonResult;\n  undefined4 comparisonResult2;\n  long *dataEntry;\n  undefined functionResult [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  functionResult = check_and_find_data_entry_001159d0(inputArray);\n  if (functionResult[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      inputString = *inputArray;\n      dataEntry = DAT_001279b8;\n      do {\n        stringComparisonResult = strcmp(inputString,(char *)dataEntry[1]);\n        functionResult._4_4_ = 0;\n        functionResult._0_4_ = stringComparisonResult;\n        functionResult._8_4_ = comparisonResult2;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        dataEntry = (long *)*dataEntry;\n      } while (dataEntry != (long *)0x0);\n    }\n    comparisonResult = functionResult._8_4_;\n    if (((((inputChar == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (functionResult._8_4_ = comparisonResult, functionResult._0_8_ = *(long *)(inputParam + 8),\n         *(int *)(*(long *)(inputParam + 8) + 8) != 5)) ||\n        ((functionResult._0_8_ = (ulong)inputArray[0x1a], *(int *)(inputArray[0x1a] + 4) != 7 ||\n         (functionResult = string_comparison_00113fb0(*inputArray,\".gnu.build.attributes\"), functionResult[0] == '\\0')))) &&\n       ((*(byte *)((long)inputArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(functionResult._1_7_,inputArray[8] == (char *)0x0) |\n             CONCAT31(functionResult._9_3_,inputArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_data_entry_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "section_length_ptr",
                "unaff_EBP": "error_code"
            },
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  undefined8 *section_length_ptr;\n  undefined4 error_code;\n  \n  uVar1 = *section_length_ptr;\n  uVar2 = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(uVar2,uVar1,error_code);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880",
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_or_format_data_0010b948",
                "param_1": "ptr1",
                "param_2": "num",
                "lVar1": "dataPtr",
                "cVar2": "isDataInitialized",
                "__ptr": "dataExtracted",
                "uVar3": "numAsUnsigned",
                "uVar4": "numMinusOne",
                "local_5a": "formattedString"
            },
            "code": "\nvoid initializeOrFormatData_0010b948(long ptr1,uint num)\n\n{\n  long dataPtr;\n  char isDataInitialized;\n  void *dataExtracted;\n  ulong numAsUnsigned;\n  uint numMinusOne;\n  char formattedString [50];\n  \n  numMinusOne = num - 1;\n  numAsUnsigned = (ulong)num;\n  if ((numMinusOne < 0x10) && (dataPtr = *(long *)(ptr1 + 0xf8 + (ulong)numMinusOne * 8), dataPtr != 0)) {\n    format_and_initialize_data_00109cf4(ptr1,dataPtr,numAsUnsigned);\n    return;\n  }\n  isDataInitialized = initialize_data_if_needed_0010b800(ptr1,4,0);\n  if (isDataInitialized != '\\0') {\n    dataExtracted = (void *)extract_pointers_00109b2f(ptr1);\n    dataPtr = *(long *)(ptr1 + 0x68);\n    *(long *)(ptr1 + 0x68) = dataPtr + 1;\n    if (numMinusOne < 0x10) {\n      *(long *)(ptr1 + 0xf8 + (ulong)numMinusOne * 8) = dataPtr;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",dataPtr,dataExtracted,numAsUnsigned);\n    free(dataExtracted);\n    initialize_data_00109b52(ptr1,formattedString,dataPtr,1,numAsUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010b800",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_format_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104966",
                "FUN_00116490",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010827b",
                "FUN_00104cc1",
                "FUN_0010bf20",
                "FUN_00108b3e",
                "FUN_00108072",
                "FUN_00114e50",
                "FUN_00104a35",
                "FUN_00107976",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00115530",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00108fb9",
                "FUN_00115dc0",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0011256b",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_0010e2f0",
                "FUN_00119970",
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010882c",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010be88",
                "FUN_0010543c",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_00112996",
                "FUN_0010dac0",
                "FUN_00108916",
                "FUN_00108808",
                "FUN_0011173a",
                "FUN_0010871c",
                "FUN_001086af",
                "FUN_00109a32",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010808f",
                "FUN_0010da0b",
                "FUN_00108200",
                "FUN_0010551d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010bc80",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_00104920"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "extract_debug_info_00112b6e",
                "param_1": "input_data",
                "param_2": "circular_refs",
                "iVar1": "first_element",
                "__format": "error_message",
                "piVar3": "result",
                "plVar4": "current_element",
                "bVar5": "is_circular",
                "local_18": "temp_circular_refs",
                "local_10": "temp_input_data"
            },
            "code": "\n\n\nint * extract_debug_info_00112b6e(int *input_data,long *circular_refs)\n\n{\n  int first_element;\n  undefined8 uVar2;\n  char *error_message;\n  int *result;\n  long *current_element;\n  bool is_circular;\n  long *temp_circular_refs;\n  int *temp_input_data;\n  \n  first_element = *input_data;\n  if ((first_element != 1) && (1 < first_element - 0x16U)) {\n    return input_data;\n  }\n  current_element = circular_refs;\n  while (current_element != (long *)0x0) {\n    if ((input_data == (int *)current_element[1]) ||\n       (is_circular = current_element == (long *)*current_element, current_element = (long *)*current_element, is_circular)) {\n      uVar2 = extract_data_001129f4(input_data,\"debug_get_real_type: circular debug information for %s\\n\");\n      error_message = (char *)dcgettext(0);\n      fprintf(_stderr,error_message,uVar2);\n      return (int *)0x0;\n    }\n  }\n  temp_circular_refs = circular_refs;\n  temp_input_data = input_data;\n  if (first_element - 0x16U < 2) {\n    result = (int *)extract_debug_info_00112b6e((*(undefined8 **)(input_data + 4))[1],&temp_circular_refs);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_data + 4);\n  if (input_data == result) {\n    return input_data;\n  }\n  if (result == (int *)0x0) {\n    return input_data;\n  }\n  result = (int *)extract_debug_info_00112b6e(result,&temp_circular_refs);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "extract_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "size1",
                "param_4": "unknown",
                "param_5": "size2",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "length",
                "cVar3": "char_var"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 param_ptr,ulong size1,undefined unknown,ulong size2,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length;\n  char char_var;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_var = '\\0';\n  }\n  else {\n    char_var = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string1 = (char *)extract_pointers_00109b2f();\n    size2 = size2 & 0xffffffff;\n    size1 = size1 & 0xffffffff;\n  }\n  result = process_data_0010a83e_0010a69a(data_ptr,param_ptr,size1,unknown,size2);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      length = strlen(string1);\n      string2 = (char *)xmalloc(length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (char_var != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "initialize_and_allocate_memory_00113d6e",
                "param_1": "memory_value_1",
                "param_2": "memory_value_2",
                "lVar1": "memory_ptr",
                "puVar2": "allocated_memory_ptr"
            },
            "code": "\nlong initialize_and_allocate_memory_00113d6e(undefined8 memory_value_1,undefined8 memory_value_2)\n\n{\n  long memory_ptr;\n  undefined8 *allocated_memory_ptr;\n  \n  memory_ptr = initialize_memory_00112904(0xb,0);\n  if (memory_ptr != 0) {\n    allocated_memory_ptr = (undefined8 *)xmalloc(0x10);\n    *allocated_memory_ptr = memory_value_1;\n    allocated_memory_ptr[1] = memory_value_2;\n    *(undefined8 **)(memory_ptr + 0x10) = allocated_memory_ptr;\n  }\n  return memory_ptr;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_00104a35",
                "FUN_0010c1c6",
                "FUN_00109b2f",
                "FUN_0010e918",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_00108466",
                "FUN_001163d0",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0011256b",
                "FUN_0010eafe",
                "FUN_001081e9",
                "FUN_0010ee3f",
                "FUN_00114690",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_00109ed3",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00114b84",
                "FUN_0010a94e",
                "FUN_0010551d",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_0010d21c",
                "FUN_00108863",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010b0fa",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "process_params_00114d50",
                "param_1": "inputData",
                "param_2": "secondaryData",
                "param_3": "actionCode"
            },
            "code": "\nvoid processParams_00114d50(long inputData,long secondaryData,uint actionCode)\n\n{\n  if (*(int *)(*(long *)(inputData + 8) + 8) != 2) {\n    return;\n  }\n  if ((actionCode == 2) && (*(int *)(*(long *)(secondaryData + 8) + 8) == 2)) {\n    actionCode = (uint)*(byte *)(*(long *)(*(long *)(secondaryData + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(inputData + 8) + 0x380) + 0x78))(inputData,actionCode != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "process_params_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00114d60",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "file",
                "param_2": "exitCode",
                "uVar1": "usageMessage",
                "pcVar2": "text"
            },
            "code": "\nvoid printUsage_00108916(FILE *file,int exitCode)\n\n{\n  undefined8 usageMessage;\n  char *text;\n  \n  usageMessage = DAT_001275e0;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,text,usageMessage);\n  text = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,text);\n  print_supported_targets_00104a35(DAT_001275e0,file);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "bfdErrorCode",
                "param_9": "formattedString",
                "param_10": "stringLength",
                "param_12": "formatString",
                "in_AL": "status",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "localPointer1",
                "local_f0": "localPointer2",
                "local_e8": "localBuffer",
                "local_c8": "localParam13",
                "local_c0": "localParam14",
                "local_b8": "localParam1",
                "local_a8": "localParam2",
                "local_98": "localParam3",
                "local_88": "localParam4",
                "local_78": "localParam5",
                "local_68": "localParam6",
                "local_58": "localParam7",
                "local_48": "localParam8"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 bfdErrorCode,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 long formattedString,long stringLength,long *bfdErrorCode1,char *formatString,undefined8 bfdErrorCode3,\n                 undefined8 bfdErrorCode4)\n\n{\n  char status;\n  int error;\n  undefined8 errorMessage;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *localPointer1;\n  undefined *localPointer2;\n  undefined localBuffer [32];\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (status != '\\0') {\n    localParam1 = bfdErrorCode;\n    localParam2 = param_2;\n    localParam3 = param_3;\n    localParam4 = param_4;\n    localParam5 = param_5;\n    localParam6 = param_6;\n    localParam7 = param_7;\n    localParam8 = param_8;\n  }\n  localParam13 = bfdErrorCode3;\n  localParam14 = bfdErrorCode4;\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (stringLength != 0) {\n    if (formattedString == 0) {\n      formattedString = construct_formatted_string_001125fa(stringLength);\n    }\n    if ((bfdErrorCode1 != (long *)0x0) && (*bfdErrorCode1 != 0)) {\n      fprintf(_stderr,\": %s[%s]\",formattedString);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",formattedString);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    localPointer1 = &stack0x00000008;\n    localPointer2 = localBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "bfd_errmsg",
                "fprintf",
                "fflush",
                "dcgettext",
                "fwrite",
                "bfd_get_error",
                "vfprintf",
                "FUN_001125fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_0010554f",
                "FUN_00104d25",
                "FUN_0010551d",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_memory_00113b4a",
                "param_1": "inputValue",
                "lVar1": "memoryPtr"
            },
            "code": "\nlong initializeMemory_00113b4a(long inputValue)\n\n{\n  long memoryPtr;\n  \n  if (inputValue != 0) {\n    memoryPtr = initialize_memory_00112904(0x15,0);\n    if (memoryPtr == 0) {\n      memoryPtr = 0;\n    }\n    else {\n      *(long *)(memoryPtr + 0x10) = inputValue;\n    }\n    return memoryPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_file_data_0010edb4",
                "param_1": "file_data",
                "param_2": "file_name",
                "param_3": "flag",
                "param_4": "file_size",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "uVar3": "string_result",
                "in_R10": "additional_info"
            },
            "code": "\nundefined8 process_file_data_0010edb4(long file_data,undefined8 file_name,undefined4 flag,ulong file_size)\n\n{\n  char result;\n  int comparison_result;\n  undefined8 string_result;\n  undefined8 additional_info;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  comparison_result = filename_cmp(file_name);\n  if (comparison_result != 0) {\n    result = process_string_0010e2f0(file_data,0x84,0,file_size,file_name);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = file_name;\n  }\n  string_result = process_string_0010e2f0(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,additional_info);\n  return string_result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_file_data_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_00112996",
                "FUN_00108916",
                "FUN_0011173a",
                "FUN_0010bf20",
                "FUN_0010871c",
                "FUN_00108b3e",
                "FUN_00104a35",
                "FUN_001126c0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_0010c6be",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_0010bc80"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_multiple_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "iterationCount",
                "__ptr": "pointer",
                "__s": "string",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "additionalData",
                "iVar3": "iterationIndex",
                "auVar4": "returnValue",
                "cVar1": "status"
            },
            "code": "\nundefined  [16] processMultipleData_0010e5db(long dataPointer,int iterationCount)\n\n{\n  char status;\n  void *pointer;\n  char *string;\n  size_t stringLength;\n  char *modifiedString;\n  ulong additionalData;\n  int iterationIndex;\n  undefined returnValue [16];\n  \n  iterationIndex = 0;\n  do {\n    if (iterationCount <= iterationIndex) {\n      returnValue = process_data_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,additionalData);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      pointer = (void *)extract_pointers_00109b2f(dataPointer);\n      free(pointer);\n    }\n    else {\n      string = (char *)extract_pointers_00109b2f(dataPointer);\n      stringLength = strlen(string);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",string);\n      free(string);\n      status = process_string_0010e2f0(dataPointer,0x80,0,0,modifiedString);\n      if (status == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = additionalData;\n        return returnValue << 0x40;\n      }\n      free(modifiedString);\n    }\n    iterationIndex = iterationIndex + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_multiple_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_message_00104d25",
                "param_7": "param1"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00104d25(void)\n\n{\n  undefined8 param1;\n  \n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0,param1,0,0);\n  remove_and_free_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_and_dump_debug_sections_0010551d",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "puVar3": "pointerVar3",
                "pcVar4": "functionPointerVar4",
                "puVar5": "pointerVar5",
                "uVar6": "ulongVar6",
                "uVar7": "ulongVar7",
                "__s": "charArrayVar",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "uVar10": "uintVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "uintVar13",
                "iVar14": "intVar14",
                "plVar15": "pointerVar15",
                "uVar16": "ulongVar16",
                "uVar17": "ulongVar17",
                "sVar18": "sizeVar18",
                "pcVar19": "charPointerVar19",
                "pcVar28": "charPointerVar28",
                "sVar26": "sizeVar26",
                "plVar32": "pointerVar32",
                "puVar29": "pointerVar29",
                "ppuVar37": "pointerPointerVar37",
                "bVar38": "booleanVar38",
                "bVar39": "byteVar39"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractAndDumpDebugSections_0010551d(void)\n\n{\n  uint *pointerVar1;\n  byte byteVar2;\n  undefined *pointerVar3;\n  code *functionPointerVar4;\n  undefined8 *pointerVar5;\n  ulong ulongVar6;\n  ulong ulongVar7;\n  char *charArrayVar;\n  char charVar8;\n  char charVar9;\n  uint uintVar10;\n  int intVar11;\n  uint uintVar12;\n  undefined4 uintVar13;\n  int intVar14;\n  long *pointerVar15;\n  undefined8 ulongVar16;\n  undefined8 ulongVar17;\n  size_t sizeVar18;\n  char *charPointerVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *charArrayVar_00;\n  size_t sizeVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *charPointerVar28;\n  undefined8 *pointerVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *pointerVar32;\n  char *pcVar33;\n  undefined4 *pointerVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pointerPointerVar37;\n  bool booleanVar38;\n  byte byteVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointerVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar9 = string_comparison_00113fb0(), charVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar9 = bfd_get_full_section_contents();\n    if (charVar9 != '\\0') {\n      lVar27 = extract_and_process_attributes_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar9 = bfd_set_section_size(), charVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerVar29 != (undefined8 *)0x0; pointerVar29 = (undefined8 *)*pointerVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sizeVar18 = *(size_t *)(lVar25 + 0x40);\n      charArrayVar_00 = fopen((char *)pointerVar29[2],\"w\");\n      if (charArrayVar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(pointerVar29[2],0,0);\n      }\n      else {\n        charVar9 = bfd_malloc_and_get_section();\n        if (charVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sizeVar18 != 0) &&\n                (sizeVar26 = fwrite(in_stack_00000140,1,sizeVar18,charArrayVar_00), sizeVar26 != sizeVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          ulongVar17 = pointerVar29[2];\n          ulongVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_00119ed0(ulongVar16,ulongVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(charArrayVar_00);\n          return 0;\n        }\n        fclose(charArrayVar_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      ulongVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_00119ed0(ulongVar17);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulongVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        ulongVar6 = uVar24;\n        ulongVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulongVar6, ulongVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongVar6 = uVar20;\n            ulongVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  pointerVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = parse_debug_info_0010554f();\n    return uVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pointerPointerVar37 = &PTR_scharArrayVartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pointerVar34 = 0;\n      pointerVar34 = pointerVar34 + (ulong)byteVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar3 = *pointerPointerVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar9 = bfd_get_section_contents();\n        if (charVar9 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar13 = bfd_get_error();\n            bfd_errmsg(uintVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar2 = *(byte *)((long)pvVar36 + 4);\n                uintVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar18 = strlen(pcVar33);\n                      if (((sizeVar18 == 0) || (charPointerVar28 = pcVar33 + (sizeVar18 - 1), *charPointerVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *charPointerVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *charPointerVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    ulongVar17 = *unaff_R14;\n                    charPointerVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,charPointerVar28,ulongVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byteVar2,uintVar13,lVar27,pcVar33);\n                    charVar9 = debug_info_function_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar2);\n                    if (charVar9 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,ulongVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointerPointerVar37 = pointerPointerVar37 + 2;\n    } while (pointerPointerVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar9 = process_debug_data_0010c892(), charVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (pointerVar15 = pointerVar32; pointerVar15 < pointerVar32 + in_stack_00000010; pointerVar15 = pointerVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = allocate_memory_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            charPointerVar28 = in_stack_00000150;\n            while (((*charPointerVar28 != '\\0' && (sizeVar18 = strlen(charPointerVar28), charPointerVar28[sizeVar18 - 1] == '\\')) &&\n                   (pointerVar15 + 1 < pointerVar32 + in_stack_00000010))) {\n              charPointerVar19 = (char *)xstrdup(charPointerVar28);\n              sizeVar18 = strlen(charPointerVar19);\n              charPointerVar19[sizeVar18 - 1] = '\\0';\n              charPointerVar28 = (char *)concat(charPointerVar19,*(undefined8 *)(pointerVar15[1] + 8),0);\n              free(charPointerVar19);\n              free(pcVar33);\n              pointerVar15 = pointerVar15 + 1;\n              pcVar33 = charPointerVar28;\n            }\n            update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         charPointerVar28);\n            in_stack_00000018 = debug_info_function_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_memory_blocks_00108863();\n      if ((lVar25 != 0) && (charVar9 = process_debug_data_0010c892(), charVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = pointerVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointerVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)pointerVar29 = 0;\n        pointerVar29 = (undefined8 *)((long)pointerVar29 + (ulong)byteVar39 * -8 + 4);\n      }\n      charVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = pointerVar32[in_stack_000000d0];\n        charVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar8 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar17 = dcgettext(0,pcVar33,5);\n          print_error_00119ed0(ulongVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar8 = bfd_coff_get_auxent(), charVar8 == '\\0')) {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar11 = strcmp(pcVar33,\".bb\");\n              if (intVar11 == 0) {\n                charVar8 = initialize_debug_block_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar11 = strcmp(pcVar33,\".eb\");\n              if (intVar11 == 0) {\n                charVar8 = debug_end_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar11 = strcmp(pcVar33,\".bf\");\n              if (intVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVar9 = record_debug_function_0010bc80(puStack0000000000000020), charVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charVar8 = update_record_line_0010bf86(puStack0000000000000020,intVar11 + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar11 = strcmp(pcVar33,\".ef\");\n                if (intVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar9 != '\\0') {\n                  charVar9 = end_debugging_function_0010be1a(puStack0000000000000020);\n                  if (charVar9 == '\\0') goto LAB_00105981;\n                  charVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar17 = dcgettext(0,pcVar33,5);\n              print_error_00119ed0(ulongVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVar8 = process_debug_command_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        pointerVar32 = DAT_001278b0 + in_stack_00000010;\n        pointerVar15 = DAT_001278b0;\n        do {\n          uintVar10 = *(uint *)(*pointerVar15 + 0x18);\n          if ((uintVar10 & 0x1000000) != 0) {\n            *(uint *)(*pointerVar15 + 0x18) = uintVar10 & 0xfeffffff;\n          }\n          pointerVar15 = pointerVar15 + 1;\n        } while (pointerVar32 != pointerVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pointerVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pointerVar1 = *pointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar11 = bfd_get_error();\n      if (intVar11 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    pointerVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar11 = DAT_001279a0;\n        pointerVar15 = (long *)pointerVar32[_in_stack_00000018];\n        functionPointerVar4 = (code *)pointerVar15[4];\n        uintVar10 = *(uint *)(pointerVar15 + 3);\n        pcVar33 = (char *)pointerVar15[1];\n        charPointerVar28 = pcVar33;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          pointerVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar11 <= iVar31) || (charPointerVar19 = (char *)pointerVar29[5], charPointerVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (charPointerVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar14 = strcmp(charPointerVar19,pcVar33);\n          if (intVar14 != 0) {\n            pointerVar29 = (undefined8 *)*pointerVar29;\n            goto LAB_0010750b;\n          }\n          free(charPointerVar19);\n          uVar20 = uVar24 + 1;\n          pointerVar29[5] = \"\";\n          ulongVar16 = extract_section_info_0011a2e0(pointerVar29);\n          ulongVar17 = DAT_001278d0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = ulongVar16;\n          lVar27 = htab_elements(ulongVar17);\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar9 = *pcVar33;\n          if (charVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            charVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278d0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar11 == 0)) {\n            ulongVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(ulongVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(DAT_001278d0);\n        if (((lVar27 == 0) || (charPointerVar28 = *(char **)(lVar27 + 8), pcVar33 == charPointerVar28)) &&\n           (charPointerVar28 = pcVar33, ppcVar35 = DAT_001278d8, (uintVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar11 = strcmp(*ppcVar35,pcVar33);\n            if (intVar11 == 0) {\n              charPointerVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        pointerVar15[1] = (long)charPointerVar28;\n        charVar9 = *charPointerVar28;\n        if (charVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127908;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar9) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintVar10 & 0x82) == 0 && (functionPointerVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            charPointerVar28 = charPointerVar28 + 1;\n            pointerVar15[1] = (long)charPointerVar28;\n            goto joined_r0x00106565;\n          }\n          charVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar9 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            charPointerVar28 = charPointerVar28 + 1;\n            pointerVar15[1] = (long)charPointerVar28;\n            sizeVar18 = strlen(charPointerVar28);\n            lVar27 = sizeVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *charPointerVar28 = charVar9;\n          pointerVar15[1] = (long)charPointerVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeVar18 = strlen(charPointerVar28);\n            sizeVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sizeVar26 + sizeVar18 + 1);\n            charPointerVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127908;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar18 = strlen(charPointerVar28);\n            lVar27 = sizeVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              charPointerVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar18 = strlen(pcVar33);\n              charPointerVar19 = (char *)xmalloc(sizeVar18 + lVar27);\n            }\n            pcVar33 = charPointerVar19 + 1;\n            *charPointerVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          charArrayVar = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127908);\n            sizeVar18 = strlen(charArrayVar);\n            pcVar33 = pcVar33 + sizeVar18;\n          }\n          strcpy(pcVar33,charPointerVar28);\n          pointerVar15[1] = (long)charPointerVar19;\n          charPointerVar28 = charPointerVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintVar10 & 0x20) == 0) &&\n           (((uintVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar10 & 0x82) != 0 || ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar11 = bfd_decode_symclass(pointerVar15), intVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = charPointerVar28;\n              htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar10 & 0x82) == 0) && (functionPointerVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(pointerVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar9 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            ulongVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_00119ed0(ulongVar17);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = charPointerVar28;\n          htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charPointerVar28;\n            htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charPointerVar28;\n            htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar9 = check_and_find_data_entry_001159d0(pointerVar15[4]);\n          if (charVar9 == '\\0') {\n            if (((uintVar10 & 0x800002) == 0) && (functionPointerVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar10 & 0x82) != 0) {\n                charVar9 = check_match_00115d70(charPointerVar28);\n                if ((charVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                    (charVar9 = check_match_00115d70(charPointerVar28), charVar9 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintVar12 = *(uint *)(pointerVar15 + 3), (uintVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *pointerVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar12 = *(uint *)(pointerVar15 + 3);\n                }\n                *(uint *)(pointerVar15 + 3) = uintVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar10 & 1) != 0) && (charVar9 = check_match_00115d70(charPointerVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charVar9 = check_match_00115d70(charPointerVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointerVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = pointerVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointerVar29 = DAT_001279a8;\n      intVar11 = DAT_001279a0;\n      for (lVar27 = 0; lVar27 < intVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)pointerVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          ulongVar17 = extract_section_info_0011a2e0(pointerVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = ulongVar17;\n          intVar11 = DAT_001279a0;\n        }\n        else if (pcVar33 != \"\") {\n          ulongVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(ulongVar17,pcVar33);\n        }\n        pointerVar29 = (undefined8 *)*pointerVar29;\n      }\n    }\n    booleanVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((booleanVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar11 != 5) && (intVar11 != 2)) {\n        ulongVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar16,ulongVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar9 = process_binary_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar9 = bfd_set_section_size(lVar25,in_stack_00000110), charVar9 == '\\0')) ||\n         (charVar9 = bfd_set_section_size(lVar27,in_stack_00000140), charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar17 = dcgettext(0,pcVar33,5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar9 == '\\0') ||\n         (charVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_001279f8);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a08), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_001279e8), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_001279e0), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279d8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279d0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278d0), lVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,process_data_entry_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,reverse_and_modify_section_00116110,in_stack_00000008);\n  for (pointerVar29 = DAT_001279c0; pointerVar5 = DAT_001279b8, pointerVar29 != (undefined8 *)0x0;\n      pointerVar29 = (undefined8 *)*pointerVar29) {\n    charVar9 = bfd_set_section_contents(in_stack_00000008,pointerVar29[5],pointerVar29[4],0,pointerVar29[3]);\n    if (charVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,pointerVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar5 != (undefined8 *)0x0; pointerVar5 = (undefined8 *)*pointerVar5) {\n    ulongVar17 = *(undefined8 *)(pointerVar5[5] + 0x60);\n    charVar9 = bfd_set_section_contents(in_stack_00000008,ulongVar17,pointerVar5[4],0,pointerVar5[3]);\n    if (charVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,ulongVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulongVar17 = *unaff_R14;\n      ulongVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_00119ed0(ulongVar16,ulongVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a10, charVar9 != '\\0')) {\n      uintVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uintVar10;\n      if ((char)uintVar10 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar24;\n        }\n        charVar9 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        uVar20 = DAT_00127910;\n        if (charVar9 != '\\0') {\n          return uVar24;\n        }\n        ulongVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_00119ed0(ulongVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(ulongVar17);\n          return uVar24;\n        }\n        ulongVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_00119ed0(ulongVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return uVar24;\n      }\n      ulongVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17);\n    }\n    else {\n      ulongVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17,lVar25);\n    }\n    return 0;\n  }\n  pointerVar32 = (long *)0x0;\n  pointerVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointerVar29 == (undefined8 *)0x0) {\n      do {\n        pointerVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = pointerVar32;\n      } while (pointerVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointerVar29[0x1a] + 4) == 7)) &&\n       (charVar9 = string_comparison_00113fb0(*pointerVar29,\".gnu.build.attributes\"), charVar9 != '\\0')) {\n      if (pointerVar32 == (long *)0x0) {\n        pointerVar32 = unaff_R13;\n      }\n      pointerVar15 = unaff_R13;\n      if (*(undefined8 **)(*pointerVar32 + 0x60) == pointerVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (pointerVar32[1] != 0) {\n          charVar9 = bfd_set_section_contents(in_stack_00000008,pointerVar29,pointerVar32[1],0,pointerVar32[2]);\n          if (charVar9 == '\\0') {\n            ulongVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,in_stack_00000008,pointerVar29,ulongVar17);\n            return 0;\n          }\n          pointerVar32 = (long *)pointerVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          pointerVar32 = pointerVar15;\n          if (*(undefined8 **)(*pointerVar15 + 0x60) == pointerVar29) goto LAB_0010625f;\n          pointerVar32 = (long *)pointerVar15[3];\n          pointerVar15 = pointerVar32;\n        } while (pointerVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      ulongVar17 = dcgettext(0,pcVar33,5);\n      print_error_message_001126c0(0,in_stack_00000008,pointerVar29,ulongVar17);\n    }\nLAB_001061be:\n    pointerVar29 = (undefined8 *)pointerVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_dump_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00104943",
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800"
            },
            "code": "\nvoid hashString_00108800(undefined8 *param_1)\n\n{\n  htab_hash_string(*param_1);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_memory_0010c1c6",
                "param_1": "ptr_to_debug_info",
                "param_2": "param_ptr",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "param_5": "ptr3",
                "param_6": "ptr4",
                "puVar1": "next_ptr",
                "cVar2": "debug_status",
                "__ptr": "current_ptr",
                "initialize_debug_variable_0010c05d": "initialize_debug_variable"
            },
            "code": "\nundefined deallocate_memory_0010c1c6(undefined8 ptr_to_debug_info,long param_ptr,undefined8 ptr1,undefined8 ptr2,\n                      undefined8 ptr3,undefined8 ptr4)\n\n{\n  undefined8 *next_ptr;\n  char debug_status;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(param_ptr + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param_ptr + 0x78) = 0;\n      return 1;\n    }\n    debug_status = initialize_debug_variable(ptr_to_debug_info,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],ptr4,\n                         ptr3);\n    if (debug_status == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "deallocate_memory_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "unaff_R13": "r13",
                "uVar1": "dataCount",
                "lVar2": "value",
                "cVar3": "matchResult",
                "puVar4": "outputPtr",
                "puVar5": "tempPtr",
                "uVar6": "counter"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint dataCount;\n  long value;\n  char matchResult;\n  long rbx;\n  undefined8 *outputPtr;\n  undefined8 *tempPtr;\n  long rbp;\n  ulong counter;\n  undefined8 *r13;\n  \n  dataCount = *(uint *)(rbx + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputPtr = r13;\n    for (counter = 0; counter != dataCount; counter = counter + 1) {\n      tempPtr = outputPtr;\n      if (((*(long **)r13[counter] != (long *)0x0) &&\n          (value = **(long **)r13[counter], value != 0)) &&\n         (matchResult = check_match_00115d70(*(undefined8 *)(value + 8),DAT_00127a08), matchResult != '\\0')) {\n        tempPtr = outputPtr + 1;\n        *outputPtr = r13[counter];\n      }\n      outputPtr = tempPtr;\n    }\n    *outputPtr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rbp + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofFlag",
                "piVar2": "errPtr",
                "pcVar3": "errMsg",
                "uVar4": "errorText",
                "__stream": "filePtr",
                "uVar5": "tempVar",
                "sVar6": "readSize",
                "lVar7": "totalSizeRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreFile_00114d60(long fileInfo)\n\n{\n  int eofFlag;\n  int *errPtr;\n  char *errMsg;\n  undefined8 errorText;\n  FILE *filePtr;\n  undefined8 tempVar;\n  size_t readSize;\n  long totalSizeRead;\n  long bufferSize;\n  \n  filePtr = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePtr == (FILE *)0x0) {\n    errPtr = __errno_location();\n    errMsg = strerror(*errPtr);\n    tempVar = *(undefined8 *)(fileInfo + 0x10);\n    errorText = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(errorText,tempVar,errMsg);\n  }\n  bufferSize = 0x1000;\n  totalSizeRead = 0;\n  tempVar = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = tempVar;\n  while( true ) {\n    eofFlag = feof(filePtr);\n    if (eofFlag != 0) {\n      *(long *)(fileInfo + 0x18) = totalSizeRead;\n      fclose(filePtr);\n      return;\n    }\n    if (totalSizeRead == bufferSize) {\n      bufferSize = totalSizeRead * 2;\n      tempVar = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = tempVar;\n    }\n    readSize = fread((void *)(*(long *)(fileInfo + 0x20) + totalSizeRead),1,bufferSize - totalSizeRead,filePtr);\n    eofFlag = ferror(filePtr);\n    if (eofFlag != 0) break;\n    totalSizeRead = totalSizeRead + readSize;\n  }\n  tempVar = *(undefined8 *)(fileInfo + 0x10);\n  errorText = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(errorText,tempVar);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "unaff_RBP": "base_pointer",
                "uVar1": "section_address",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_error_if_section_not_found_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "count",
                "unaff_R13": "callback",
                "unaff_R14": "lineStart",
                "unaff_R15": "linePtr",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "result",
                "uVar1": "errMsg",
                "ppbVar2": "slot",
                "pbVar3": "rubbishPtr",
                "bVar4": "currentChar",
                "pbVar5": "nextLineStart",
                "pbVar6": "nextChar",
                "pbVar7": "carriagePtr"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 errMsg;\n  byte **slot;\n  byte *rubbishPtr;\n  byte currentChar;\n  byte *nextLineStart;\n  int count;\n  byte *nextChar;\n  undefined8 callback;\n  byte *carriagePtr;\n  byte *lineStart;\n  byte *linePtr;\n  undefined8 filename;\n  undefined8 *result;\n  \n  *lineStart = 0;\nLAB_00114520:\n  lineStart = lineStart + 1;\n  do {\n    currentChar = *lineStart;\n    carriagePtr = lineStart;\n    if (currentChar == 10) {\n      *lineStart = 0;\n      if (lineStart[1] == 0xd) {\n        carriagePtr = lineStart + 1;\n        nextLineStart = lineStart + 2;\n      }\n      else {\n        nextLineStart = lineStart + 1;\n      }\n    }\n    else if ((char)currentChar < '\\v') {\n      if (currentChar != 0) goto LAB_00114520;\n      nextLineStart = lineStart + 1;\n    }\n    else {\n      if (currentChar != 0xd) break;\n      *lineStart = 0;\n      nextLineStart = lineStart + 1;\n      if (lineStart[1] == 10) {\n        nextLineStart = lineStart + 2;\n        carriagePtr = lineStart + 1;\n      }\n    }\n    currentChar = *linePtr;\n    while ((currentChar == 0x20 || (nextChar = linePtr, currentChar == 9))) {\n      nextChar = linePtr + 1;\n      linePtr = linePtr + 1;\n      currentChar = *nextChar;\n    }\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = nextChar[1];\n      nextChar = nextChar + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentChar = nextChar[1];\n      if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n            ((currentChar = nextChar[2], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = nextChar[3], currentChar == 9 || (currentChar == 0x20)))) &&\n          ((currentChar = nextChar[4], currentChar == 9 || (currentChar == 0x20)))) &&\n         ((currentChar = nextChar[5], currentChar == 9 || (currentChar == 0x20)))) {\n        currentChar = nextChar[6];\n        rubbishPtr = nextChar + 6;\n        if ((currentChar == 9) || (currentChar == 0x20)) {\n          do {\n            do {\n              currentChar = rubbishPtr[1];\n              rubbishPtr = rubbishPtr + 1;\n            } while (currentChar == 0x20);\n          } while (currentChar == 9);\n        }\n      }\n      if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n        errMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_00119ed0(errMsg,filename,count);\n      }\n    }\nLAB_00114599:\n    *nextChar = 0;\n    if (linePtr < nextChar) {\n      slot = (byte **)htab_find_slot();\n      *slot = linePtr;\n    }\n    count = count + 1;\n    lineStart = nextLineStart;\n    linePtr = nextLineStart;\n    if (carriagePtr[1] == 0) {\n      *result = callback;\n      return;\n    }\n  } while( true );\n  if (currentChar == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "address",
                "param_2": "number",
                "uVar1": "errorMessage",
                "local_20": "result"
            },
            "code": "\nvoid checkAndPrintError_00119940(undefined8 address,undefined8 number)\n\n{\n  undefined8 errorMessage;\n  char *result [2];\n  \n  bfd_scan_vma(address,result,0);\n  if (*result[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,number,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long returnValue;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(returnValue + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_and_check_files_recursive_00113a4d",
                "param_1": "file_data",
                "param_2": "file_context",
                "param_3": "file_info",
                "param_4": "additional_param_1",
                "param_5": "additional_param_2",
                "cVar1": "result",
                "uVar2": "updated_result",
                "puVar3": "current_ptr",
                "auVar4": "check_result"
            },
            "code": "\nundefined8\nprocess_and_check_files_recursive_00113a4d(undefined8 file_data,undefined8 file_context,long file_info,undefined8 additional_param_1,\n            undefined8 additional_param_2)\n\n{\n  char result;\n  undefined8 updated_result;\n  undefined8 *current_ptr;\n  undefined check_result [16];\n  \n  result = process_and_check_files_00112502(file_data,file_context,*(undefined8 *)(file_info + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(file_info + 0x28) == 0 && (*(long *)(file_info + 8) != 0)) ||\n      (result = process_data_0010ec73(file_context,*(undefined8 *)(file_info + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(file_info + 0x28) != (undefined8 *)0x0) {\n      for (current_ptr = (undefined8 *)**(undefined8 **)(file_info + 0x28); current_ptr != (undefined8 *)0x0;\n          current_ptr = (undefined8 *)*current_ptr) {\n        result = process_data_001135a5(file_data,file_context,current_ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (current_ptr = *(undefined8 **)(file_info + 0x10); current_ptr != (undefined8 *)0x0;\n        current_ptr = (undefined8 *)*current_ptr) {\n      result = process_and_check_files_recursive_00113a4d(file_data,file_context,current_ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    check_result = process_and_check_files_00112502(file_data,file_context,*(undefined8 *)(file_info + 0x20));\n    if (check_result[0] != '\\0') {\n      if ((*(long *)(file_info + 0x28) == 0) && (*(long *)(file_info + 8) != 0)) {\n        return check_result._0_8_;\n      }\n      updated_result = update_long_and_return_result_0010ed2c(file_context,*(undefined8 *)(file_info + 0x20),check_result._8_8_,additional_param_2);\n      return updated_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_00112502",
                "FUN_0010ec73"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_check_files_recursive_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_block"
            },
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_block;\n  undefined8 param_7;\n  \n  param_7 = return_value;\n  free(memory_block);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010b0fa",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010aa53"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_memory_if_nonzero_00113b71",
                "param_1": "input_value",
                "lVar1": "memory_pointer"
            },
            "code": "\nlong initialize_memory_if_nonzero_00113b71(long input_value)\n\n{\n  long memory_pointer;\n  \n  if (input_value != 0) {\n    memory_pointer = initialize_memory_00112904(0x14,0);\n    if (memory_pointer == 0) {\n      memory_pointer = 0;\n    }\n    else {\n      *(long *)(memory_pointer + 0x10) = input_value;\n    }\n    return memory_pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_if_nonzero_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "update_or_initialize_data_00109dfe",
                "param_1": "data",
                "lVar1": "count",
                "local_40": "formattedString"
            },
            "code": "\nvoid updateOrInitializeData_00109dfe(long data)\n\n{\n  long count;\n  char formattedString [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    format_and_initialize_data_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  count = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = count + 1;\n  *(long *)(data + 0x70) = count;\n  sprintf(formattedString,\"%ld=%ld\",count,count);\n  initialize_data_00109b52(data,formattedString,count,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_or_initialize_data_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_if_not_empty_00109bbb",
                "param_1": "inputData",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonIfNotEmpty_00109bbb(long inputData)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(inputData + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(inputData + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_if_not_empty_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "construct_string_0010ae0e",
                "param_1": "input",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "ptr3",
                "pcVar3": "str1",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "resultStr",
                "uVar7": "returnValue",
                "lVar8": "strSize",
                "uVar9": "counter",
                "uVar10": "innerCounter"
            },
            "code": "\nundefined8 constructString_0010ae0e(long input)\n\n{\n  long ptr1;\n  long ptr2;\n  void *ptr3;\n  char *str1;\n  size_t len1;\n  size_t len2;\n  char *resultStr;\n  undefined8 returnValue;\n  long strSize;\n  uint counter;\n  ulong innerCounter;\n  \n  returnValue = 0;\n  ptr1 = *(long *)(input + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (resultStr = *(char **)(ptr1 + 0x20), resultStr != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(resultStr);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      strSize = len1 + len2 + 10;\n      innerCounter = 0;\n    }\n    else {\n      strSize = len1 + len2 + 0x1e;\n      innerCounter = 0;\n      while( true ) {\n        resultStr = *(char **)(ptr2 + innerCounter * 8);\n        if (resultStr == (char *)0x0) break;\n        len1 = strlen(resultStr);\n        innerCounter = (ulong)((int)innerCounter + 1);\n        strSize = strSize + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      strSize = strSize + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      strSize = strSize + len1;\n    }\n    resultStr = (char *)xmalloc(strSize);\n    ptr1 = *(long *)(input + 0x60);\n    strcpy(resultStr,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(resultStr);\n      sprintf(resultStr + len1,\"!%u,\",innerCounter);\n      while( true ) {\n        ptr1 = *(long *)(input + 0x60);\n        innerCounter = (ulong)counter;\n        ptr3 = *(void **)(ptr1 + 0x28);\n        str1 = *(char **)((long)ptr3 + innerCounter * 8);\n        if (str1 == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(resultStr,str1);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + innerCounter * 8));\n      }\n      free(ptr3);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(input + 0x60);\n    strcat(resultStr,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(resultStr,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(resultStr);\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined2 *)(resultStr + len1) = 0x3b;\n    str1 = *(char **)(ptr1 + 0x38);\n    if (str1 != (char *)0x0) {\n      strcpy(resultStr + len1 + 1,str1);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptr1 = *(long *)(input + 0x60);\n    *(char **)(ptr1 + 8) = resultStr;\n    returnValue = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "var1",
                "puVar5": "var2"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input_1,undefined8 input_2,long param_3)\n\n{\n  int index;\n  char result;\n  undefined8 output;\n  undefined8 *var1;\n  undefined8 *var2;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    result = process_data_00112c1f(input_1,input_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (result != '\\0') {\n      output = process_and_update_string_0010e6a8(input_2,*(undefined8 *)(param_3 + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = process_data_00112c1f(input_1,input_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (result != '\\0') {\n      output = process_and_format_string_0010e7c2(input_2,*(undefined8 *)(param_3 + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = process_data_00112c1f(input_1,input_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = process_and_send_data_0010e9a0(input_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    var2 = *(undefined8 **)(param_3 + 0x20);\n    index = *(int *)(param_3 + 0x18);\n    output = *(undefined8 *)(param_3 + 8);\n    result = process_and_check_files_00112502(input_1,input_2,*(undefined8 *)(var2[2] + 0x18));\n    if (((result != '\\0') && (result = process_data_00112c1f(input_1,input_2,*var2,0), result != '\\0')) &&\n       (result = process_data_0010eafe(input_2,output,index == 2), result != '\\0')) {\n      for (var1 = (undefined8 *)var2[1]; var1 != (undefined8 *)0x0;\n          var1 = (undefined8 *)*var1) {\n        result = process_data_00112c1f(input_1,input_2,var1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_free_string_0010ebb0(input_2,var1[1],*(undefined4 *)(var1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      var2 = (undefined8 *)var2[2];\n      while( true ) {\n        if (var2 == (undefined8 *)0x0) {\n          output = get_one_00108f05(input_2);\n          return output;\n        }\n        result = process_and_check_files_recursive_00113a4d(input_1,input_2,var2);\n        if (result == '\\0') break;\n        var2 = (undefined8 *)*var2;\n      }\n    }\n    break;\n  case 4:\n    output = process_and_format_string_0010e842(input_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return output;\n  case 5:\n    output = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),input_2,*(undefined8 *)(param_3 + 8));\n    return output;\n  case 6:\n    result = process_data_00112c1f(input_1,input_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (result != '\\0') {\n      output = process_and_free_string_0010e918(input_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e8a9",
                "FUN_0010e842",
                "abort",
                "FUN_0010e918",
                "FUN_0010ebb0",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_00108f05",
                "FUN_0010e7c2",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "FUN_00112c1f",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_update_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_format_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_and_check_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_data_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_free_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_format_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_free_string_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = construct_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = construct_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = construct_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = identify_input_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_and_modify_entry_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_and_modify_entry_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_and_modify_entry_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = parse_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = debug_info_function_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = allocate_memory_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = debug_info_function_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_command_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = initialize_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = update_record_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debugging_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_info_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_and_find_data_entry_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_match_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_match_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_data_entry_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_modify_section_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)extract_and_process_attributes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_set_file_flags",
                "dcgettext",
                "FUN_001152b6",
                "FUN_001125fa",
                "bfd_get_arch",
                "printf",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "decompiled_function_0010b0fa",
                "param_3": "param_array",
                "param_4": "debug_info",
                "param_5": "error_flag",
                "uVar1": "array_element",
                "iVar2": "comparison_result",
                "pcVar3": "result_string",
                "plVar4": "debug_info_pointer",
                "pcVar5": "error_message",
                "sVar6": "string_length",
                "__ptr": "memory_pointer",
                "lVar7": "arglist_length",
                "local_40": "local_array"
            },
            "code": "\n\n\nchar * decompiled_function_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_array,long debug_info,\n                   undefined *error_flag)\n\n{\n  uint array_element;\n  int comparison_result;\n  char *result_string;\n  long *debug_info_pointer;\n  char *error_message;\n  size_t string_length;\n  void *memory_pointer;\n  long arglist_length;\n  undefined local_array [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    array_element = *param_array;\n    if (0x29 < array_element) break;\n    if (0x17 < array_element) {\n      switch(array_element) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result_string = (char *)decompiled_function_0010b0fa(param_1,param_2,*(undefined8 *)(param_array + 4),0,0);\n        if (result_string != (char *)0x0) {\n          switch(*param_array) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result_string = (char *)initialize_memory_00113b4a(result_string);\n            return result_string;\n          case 0x1b:\n            result_string = (char *)initialize_memory_if_nonzero_00113b71(result_string);\n            return result_string;\n          default:\n                    \n            abort();\n          case 0x22:\n            result_string = (char *)initialize_or_get_memory_00113d3a(result_string);\n            return result_string;\n          case 0x23:\n            result_string = (char *)initialize_memory_00113cb9(result_string);\n            return result_string;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result_string = (char *)cplus_demangle_print(3,param_array,0x14,local_array);\n        if (result_string == (char *)0x0) {\n          error_message = \"Couldn\\'t get demangled builtin type\\n\";\n          result_string = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result_string,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"bool\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result_string,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result_string,\"long double\"), comparison_result == 0)) {\n          error_message = (char *)initialize_memory_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"float\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"__float128\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned char\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result_string,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"__int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"short\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned short\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"void\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned long long\");\n        if (comparison_result == 0) {\n          error_message = (char *)initialize_memory_and_set_param_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"...\");\n        if (comparison_result == 0) {\n          error_message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          error_message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          error_message = (char *)dcgettext(0,error_message,5);\n          fprintf(_stderr,error_message);\n        }\n        error_message = (char *)0x0;\nLAB_0010b6c6:\n        free(result_string);\n        return error_message;\n      case 0x29:\n        if (*(long *)(param_array + 4) == 0) {\n          memory_pointer = (void *)initialize_memory_00113e17();\n        }\n        else {\n          memory_pointer = (void *)decompiled_function_0010b0fa(param_1,param_2,*(long *)(param_array + 4),0,0);\n        }\n        if (memory_pointer != (void *)0x0) {\n          arglist_length = extract_v3_arglist_0010b6ea(param_1,param_2,*(undefined8 *)(param_array + 6),local_array);\n          if (arglist_length != 0) {\n            result_string = (char *)initialize_and_allocate_memory_00113ce0(memory_pointer,arglist_length,local_array[0]);\n            return result_string;\n          }\n          free(memory_pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (array_element != 1) {\n      if (array_element == 4) {\n        result_string = (char *)cplus_demangle_print(3,param_array,0x14,local_array);\n        error_message = \"Failed to print demangled template\\n\";\n        if (result_string != (char *)0x0) {\n          string_length = strlen(result_string);\n          error_message = (char *)find_and_free_memory_0010afd5(param_1,param_2,result_string,string_length & 0xffffffff,9);\n          free(result_string);\n          return error_message;\n        }\nLAB_0010b3d3:\n        error_message = (char *)dcgettext(0,error_message,5);\n        fprintf(_stderr,error_message);\n        return result_string;\n      }\n      if (array_element == 0) {\n        if ((debug_info == 0) || (debug_info_pointer = (long *)extract_debug_info_00113b1e(debug_info), debug_info_pointer == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    debug_info = decompiled_function_0010b0fa(param_1,param_2,*(undefined8 *)(param_array + 4),debug_info,0);\n    if (debug_info == 0) goto LAB_0010b38c;\n    param_array = *(uint **)(param_array + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result_string = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result_string,(ulong)array_element);\nLAB_0010b38c:\n  result_string = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result_string;\nLAB_0010b1a5:\n  if (*debug_info_pointer == 0) {\nswitchD_0010b158_caseD_18:\n    result_string = (char *)find_and_free_memory_0010afd5(param_1,param_2,*(undefined8 *)(param_array + 4),param_array[6],0);\n    return result_string;\n  }\n  result_string = *(char **)(*debug_info_pointer + 8);\n  if (result_string == (char *)0x0) goto LAB_0010b38c;\n  error_message = (char *)extract_data_001129f4(result_string);\n  if (error_message != (char *)0x0) {\n    string_length = strlen(error_message);\n    if ((param_array[6] == (uint)string_length) &&\n       (comparison_result = strncmp(error_message,*(char **)(param_array + 4),(long)(int)param_array[6]), comparison_result == 0)) {\n      return result_string;\n    }\n  }\n  debug_info_pointer = debug_info_pointer + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_00113d3a",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strncmp",
                "FUN_00113b1e",
                "free",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "decompiled_function_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_file_00104c36",
                "uVar1": "errorMessage",
                "ppbVar2": "slotPointer",
                "pbVar3": "currentChar",
                "unaff_RBX": "inputBuffer",
                "unaff_EBP": "lineNumber",
                "pbVar5": "currentLine",
                "unaff_R13": "filename",
                "unaff_R14": "currentPosition",
                "unaff_R15": "nextPosition",
                "in_stack_00000008": "stackVariable1",
                "in_stack_00000010": "stackVariable2",
                "in_CL": "currentCharacter",
                "bVar4": "nextCharacter"
            },
            "code": "\nvoid parseFile_00104c36(void)\n\n{\n  undefined8 errorMessage;\n  byte **slotPointer;\n  byte *currentChar;\n  byte currentCharacter;\n  byte nextCharacter;\n  byte *inputBuffer;\n  int lineNumber;\n  byte *currentLine;\n  undefined8 filename;\n  byte *currentPosition;\n  byte *nextPosition;\n  undefined8 stackVariable1;\n  undefined8 *stackVariable2;\n  \n  do {\n    currentLine = nextPosition;\n    if (currentCharacter == 9) goto LAB_00104c3f;\n    do {\n      if ((currentCharacter == 10) || (currentCharacter == 0xd)) goto LAB_00114676;\n      if (currentCharacter == 0) goto LAB_00114599;\n      currentCharacter = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((currentCharacter != 0x20) && (currentCharacter != 9));\n    if ((char)currentCharacter < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextCharacter = currentLine[1];\n      if ((((((nextCharacter == 9) || (nextCharacter == 0x20)) &&\n            ((nextCharacter = currentLine[2], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n           ((nextCharacter = currentLine[3], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n          ((nextCharacter = currentLine[4], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n         ((nextCharacter = currentLine[5], nextCharacter == 9 || (nextCharacter == 0x20)))) {\n        nextCharacter = currentLine[6];\n        currentChar = currentLine + 6;\n        if ((nextCharacter == 9) || (nextCharacter == 0x20)) {\n          do {\n            do {\n              nextCharacter = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextCharacter == 0x20);\n          } while (nextCharacter == 9);\n        }\n      }\n      if ((0xd < nextCharacter) || ((-0x2402L >> (nextCharacter & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_00119ed0(errorMessage,stackVariable1,lineNumber);\n      }\n    }\nLAB_00114599:\n    *currentLine = 0;\n    if (nextPosition < currentLine) {\n      slotPointer = (byte **)htab_find_slot();\n      *slotPointer = nextPosition;\n    }\n    lineNumber = lineNumber + 1;\n    currentLine = inputBuffer;\n    if (currentPosition[1] == 0) {\n      *stackVariable2 = filename;\n      return;\n    }\n    for (; nextCharacter = *currentLine, currentPosition = currentLine, nextCharacter != 10; currentLine = currentLine + 1) {\n      if ((char)nextCharacter < '\\v') {\n        if (nextCharacter == 0) {\n          currentChar = currentLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextCharacter == 0xd) {\n          *currentLine = 0;\n          currentChar = currentLine + 1;\n          if (currentLine[1] == 10) {\n            currentChar = currentLine + 2;\n            currentPosition = currentLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextCharacter == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentLine = 0;\n    if (currentLine[1] == 0xd) {\n      currentPosition = currentLine + 1;\n      currentChar = currentLine + 2;\n    }\n    else {\n      currentChar = currentLine + 1;\n    }\nLAB_00114553:\n    currentCharacter = *inputBuffer;\n    nextPosition = inputBuffer;\n    while (inputBuffer = currentChar, currentCharacter == 0x20) {\nLAB_00104c3f:\n      currentLine = nextPosition + 1;\n      nextPosition = nextPosition + 1;\n      currentChar = inputBuffer;\n      currentCharacter = *currentLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_file_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "parse_debug_info_0010554f",
                "param_7": "binaryFile",
                "param_8": "numSections",
                "param_12": "gapSize",
                "param_14": "gapContent",
                "param_17": "sectionOffsets",
                "uVar29": "maxGapSize",
                "lVar14": "sectionSize",
                "plVar28": "sectionInfoArray",
                "puVar1": "sectionFlag",
                "bVar2": "sectionType",
                "pcVar3": "sectionCallback",
                "puVar4": "debugInfoPointer",
                "uVar5": "debugInfoUndefined",
                "puVar26": "debugLinkPointer"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 parseDebugInfo_0010554f(void)\n\n{\n  uint *sectionFlag;\n  byte sectionType;\n  code *sectionCallback;\n  undefined8 *debugInfoPointer;\n  undefined debugInfoUndefined;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long sectionSize;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *debugLinkPointer;\n  int iVar27;\n  long *sectionInfoArray;\n  ulong maxGapSize;\n  ulong *puVar30;\n  char *sectionCallback1;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **psectionCallback4;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binaryFile;\n  ulong numSections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong gapSize;\n  char *param_13;\n  undefined *gapContent;\n  uint param_15;\n  long *sectionOffsets;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    gapSize = 0;\n    gapContent = (undefined *)0x0;\n    sectionOffsets = (long *)0x0;\n    maxGapSize = gapSize;\n  }\n  else {\n    sectionSize = (ulong)in_stack_00000068._4_4_ * 8;\n    sectionOffsets = (long *)xmalloc(sectionSize);\n    param_40 = sectionOffsets;\n    bfd_map_over_sections(binaryFile,update_pointer_and_value_0010870e,&stack0x00000140);\n    qsort(sectionOffsets,(ulong)in_stack_00000068._4_4_,8,compare_records_0010875d);\n    gapContent = (undefined *)xmalloc(sectionSize);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = gapContent;\n    for (; sectionSize != 0; sectionSize = sectionSize + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      maxGapSize = 0;\n      gapSize = 0;\n      do {\n        puVar30 = (ulong *)(gapContent + maxGapSize * 8);\n        sectionInfoArray = sectionOffsets + maxGapSize;\n        uVar21 = gapSize;\n        do {\n          gapSize = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)maxGapSize) goto LAB_00107cd1;\n          maxGapSize = (ulong)((uint)maxGapSize + 1);\n          uVar12 = bfd_octets_per_byte(binaryFile,*sectionInfoArray);\n          uVar13 = bfd_octets_per_byte(binaryFile);\n          sectionSize = *sectionInfoArray;\n          if ((*(uint *)(sectionSize + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(sectionInfoArray[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(sectionSize + 0x38) + *(long *)(sectionSize + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,binaryFile,*sectionInfoArray);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          sectionInfoArray = sectionInfoArray + 1;\n          puVar30 = puVar30 + 1;\n        } while (gapSize < uVar21);\n      } while( true );\n    }\n    gapSize = 0;\nLAB_00107cd1:\n    maxGapSize = gapSize;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(binaryFile);\n      sectionSize = sectionOffsets[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(sectionSize + 0x40) + (ulong)uVar12 * *(long *)(sectionSize + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,binaryFile,sectionOffsets[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          maxGapSize = uVar21 - uVar24;\n          *(ulong *)(gapContent + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = maxGapSize;\n          if (maxGapSize <= gapSize) {\n            maxGapSize = gapSize;\n          }\n        }\n      }\n    }\n  }\n  gapSize = maxGapSize;\n  sectionInfoArray = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (sectionSize = 0x18; sectionSize != 0; sectionSize = sectionSize + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      sectionSize = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((sectionSize != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(sectionSize + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,sectionSize,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          maxGapSize = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(maxGapSize + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + maxGapSize) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)allocate_memory_00112894(unaff_R14,1,sectionInfoArray), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                sectionType = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                sectionSize = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (sectionType == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + sectionSize;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < maxGapSize) {\n                    sectionCallback1 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(sectionCallback1);\n                      if (((sVar18 == 0) || (pcVar22 = sectionCallback1 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (maxGapSize <= uVar21) break;\n                      sectionCallback1 = (char *)concat(sectionCallback1,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = sectionCallback1;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)sectionType,uVar9,sectionSize,sectionCallback1);\n                    cVar7 = debug_info_function_0011173a(__ptr_02,param_13,sectionType);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    sectionCallback1 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,sectionCallback1,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)sectionType,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      sectionSize = 0;\n      for (plVar15 = sectionInfoArray; plVar15 < sectionInfoArray + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((sectionSize == 0) && (sectionSize = allocate_memory_00112894(unaff_R14,0,sectionInfoArray), sectionSize == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          sectionCallback1 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < sectionInfoArray + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(sectionCallback1);\n            plVar15 = plVar15 + 1;\n            sectionCallback1 = pcVar22;\n          }\n          update_data_entry_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = debug_info_function_0011173a(__ptr_02,sectionSize,param_43);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((sectionSize != 0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = sectionInfoArray;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        debugLinkPointer = (undefined8 *)&stack0x00000148;\n        for (sectionSize = 0x22; sectionSize != 0; sectionSize = sectionSize + -1) {\n          *(undefined4 *)debugLinkPointer = 0;\n          debugLinkPointer = (undefined8 *)((long)debugLinkPointer + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            sectionSize = sectionInfoArray[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,sectionSize,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              sectionCallback1 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            sectionCallback1 = *(char **)(sectionSize + 8);\n            debugLinkPointer = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              debugLinkPointer = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,sectionSize,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                sectionCallback1 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_debug_command_00112a33(&stack0x00000140,sectionSize,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = sectionCallback1;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(sectionCallback1,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = initialize_debug_block_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(sectionCallback1,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(sectionCallback1,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),debugLinkPointer,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = record_debug_function_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    sectionSize = *(long *)(*(long *)(sectionSize + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = update_record_line_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + sectionSize);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                sectionCallback1 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(sectionCallback1,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = end_debugging_function_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                sectionCallback1 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,sectionCallback1,5);\n              print_error_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        sectionCallback1 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,sectionCallback1,5);\n        print_error_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binaryFile + 0x44) & 0x42) != 0) && ((*(uint *)(binaryFile + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binaryFile + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (numSections != 0) {\n        sectionInfoArray = DAT_001278b0 + numSections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (sectionInfoArray != plVar15);\n      }\n    }\n    else {\n      for (sectionSize = *(long *)(binaryFile + 0x90); sectionSize != 0; sectionSize = *(long *)(sectionSize + 8)) {\n        if (*(long *)(sectionSize + 0xe8) != 0) {\n          sectionFlag = (uint *)(*(long *)(sectionSize + 0xe8) + 0x18);\n          *sectionFlag = *sectionFlag | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      sectionSize = xmalloc();\n      sectionInfoArray = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = sectionSize;\n      if (numSections == 0) {\n        maxGapSize = 0;\n      }\n      else {\n        maxGapSize = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)sectionInfoArray[_param_9];\n          sectionCallback = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            debugLinkPointer = DAT_001279a8;\n            while ((iVar27 < iVar10 && (sectionCallback1 = (char *)debugLinkPointer[5], sectionCallback1 != (char *)0x0))) {\n              if (sectionCallback1 != \"\") {\n                iVar11 = strcmp(sectionCallback1,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(sectionCallback1);\n                  uVar21 = maxGapSize + 1;\n                  debugLinkPointer[5] = \"\";\n                  uVar16 = extract_section_info_0011a2e0(debugLinkPointer);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(sectionSize + maxGapSize * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                debugLinkPointer = (undefined8 *)*debugLinkPointer;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = maxGapSize;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, psectionCallback4 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; psectionCallback4 != (char **)0x0; psectionCallback4 = (char **)psectionCallback4[3]) {\n                iVar10 = strcmp(*psectionCallback4,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)psectionCallback4[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            sectionCallback1 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binaryFile + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          sectionCallback1 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (sectionCallback != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(sectionCallback1);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            maxGapSize = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binaryFile + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              maxGapSize = uVar21;\n              if (sectionCallback1 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(sectionCallback1);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              sectionCallback1 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (sectionCallback1 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n            }\n            sectionCallback1 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(sectionCallback1);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            maxGapSize = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (sectionCallback != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = check_and_find_data_entry_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (sectionCallback != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_match_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = check_match_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = check_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (sectionCallback != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(sectionSize + maxGapSize * 8) = plVar15;\n              maxGapSize = maxGapSize + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (numSections != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        debugLinkPointer = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          sectionCallback1 = (char *)debugLinkPointer[5];\n          if (sectionCallback1 == (char *)0x0) {\n            lVar23 = maxGapSize * 8;\n            maxGapSize = maxGapSize + 1;\n            uVar17 = extract_section_info_0011a2e0(debugLinkPointer,binaryFile);\n            *(undefined8 *)(sectionSize + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (sectionCallback1 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17,sectionCallback1);\n          }\n          debugLinkPointer = (undefined8 *)*debugLinkPointer;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(sectionSize + maxGapSize * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = maxGapSize & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(binaryFile + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = process_binary_0011378f(binaryFile,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          sectionSize = bfd_make_section_with_flags(binaryFile,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binaryFile,\".stabstr\",0x2108);\n          if ((((sectionSize == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(sectionSize,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            sectionCallback1 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(sectionSize + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binaryFile,sectionSize,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binaryFile,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            sectionCallback1 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,sectionCallback1,5);\n          print_error_message_001126c0(0,binaryFile,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binaryFile + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,binaryFile,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_relocation_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    sectionSize = htab_elements(DAT_001279f8);\n    if (((sectionSize != 0) ||\n        ((((sectionSize = htab_elements(DAT_00127a08), sectionSize != 0 ||\n           (sectionSize = htab_elements(DAT_001279e8), sectionSize != 0)) ||\n          (sectionSize = htab_elements(DAT_001279e0), sectionSize != 0)) ||\n         ((sectionSize = htab_elements(DAT_001279d8), sectionSize != 0 ||\n          (sectionSize = htab_elements(DAT_001279d0), sectionSize != 0)))))) ||\n       ((((sectionSize = htab_elements(DAT_001278d0), sectionSize != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binaryFile,DAT_001278a8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_data_entry_00115dc0,binaryFile);\n    bfd_map_over_sections(unaff_R14,reverse_and_modify_section_00116110,binaryFile);\n    for (debugLinkPointer = DAT_001279c0; debugInfoPointer = DAT_001279b8, debugLinkPointer != (undefined8 *)0x0;\n        debugLinkPointer = (undefined8 *)*debugLinkPointer) {\n      cVar7 = bfd_set_section_contents(binaryFile,debugLinkPointer[5],debugLinkPointer[4],0,debugLinkPointer[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,binaryFile,debugLinkPointer[5],0);\n        return 0;\n      }\n    }\n    for (; debugInfoPointer != (undefined8 *)0x0; debugInfoPointer = (undefined8 *)*debugInfoPointer) {\n      uVar17 = *(undefined8 *)(debugInfoPointer[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binaryFile,uVar17,debugInfoPointer[4],0,debugInfoPointer[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,binaryFile,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      sectionInfoArray = (long *)0x0;\n      for (debugLinkPointer = *(undefined8 **)(binaryFile + 0x90); debugLinkPointer != (undefined8 *)0x0;\n          debugLinkPointer = (undefined8 *)debugLinkPointer[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binaryFile + 8) + 8) == 5)) &&\n           ((*(int *)(debugLinkPointer[0x1a] + 4) == 7 &&\n            (cVar7 = string_comparison_00113fb0(*debugLinkPointer,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (sectionInfoArray == (long *)0x0) {\n            sectionInfoArray = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*sectionInfoArray + 0x60) == debugLinkPointer) {\nLAB_0010625f:\n            sectionCallback1 = \"error: failed to merge notes\";\n            if (sectionInfoArray[1] != 0) {\n              cVar7 = bfd_set_section_contents(binaryFile,debugLinkPointer,sectionInfoArray[1],0,sectionInfoArray[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,binaryFile,debugLinkPointer,uVar17);\n                return 0;\n              }\n              sectionInfoArray = (long *)sectionInfoArray[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sectionInfoArray = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == debugLinkPointer) goto LAB_0010625f;\n              sectionInfoArray = (long *)plVar15[3];\n              plVar15 = sectionInfoArray;\n            } while (sectionInfoArray != (long *)0x0);\n            sectionCallback1 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,sectionCallback1,5);\n          print_error_message_001126c0(0,binaryFile,debugLinkPointer,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        sectionInfoArray = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = sectionInfoArray;\n      } while (sectionInfoArray != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binaryFile,param_21), sectionSize = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (gapContent != (undefined *)0x0) {\n        if (0x2000 < gapSize) {\n          gapSize = 0x2000;\n        }\n        sectionSize = 0;\n        __ptr = (undefined *)xmalloc(gapSize);\n        debugInfoUndefined = DAT_00127979;\n        puVar33 = __ptr;\n        for (gapSize = gapSize & 0xffffffff; gapSize != 0; gapSize = gapSize - 1) {\n          *puVar33 = debugInfoUndefined;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)sectionSize < in_stack_00000068._4_4_; sectionSize = sectionSize + 1) {\n          maxGapSize = *(ulong *)(gapContent + sectionSize * 8);\n          if (maxGapSize != 0) {\n            lVar37 = *(long *)(*sectionOffsets + 0x40) - maxGapSize;\n            do {\n              uVar21 = 0x2000;\n              if (maxGapSize < 0x2001) {\n                uVar21 = maxGapSize;\n              }\n              cVar7 = bfd_set_section_contents(binaryFile,*sectionOffsets,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_message_001126c0(0,binaryFile,*sectionOffsets,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              maxGapSize = maxGapSize - uVar21;\n            } while (maxGapSize != 0);\n          }\n          sectionOffsets = sectionOffsets + 1;\n        }\n        free(__ptr);\n        free(gapContent);\n      }\n      uVar9 = (**(code **)(*(long *)(binaryFile + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binaryFile,DAT_00127910 & 0xffffffff);\n        maxGapSize = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_00119ed0(uVar17,maxGapSize);\n          if (*(int *)(*(long *)(binaryFile + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_00119ed0(uVar17);\n            *(short *)(*(long *)(binaryFile + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,binaryFile,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binaryFile,0,uVar17,sectionSize);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_0010bf86",
                "FUN_0011a170",
                "FUN_00115d70",
                "FUN_0011378f",
                "bfd_set_error",
                "FUN_0010bf20",
                "qsort",
                "FUN_00108b3e",
                "bfd_coff_get_syment",
                "bfd_make_section_with_flags",
                "FUN_001126c0",
                "FUN_001159d0",
                "concat",
                "bfd_set_section_size",
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "fprintf",
                "FUN_00115dc0",
                "htab_elements",
                "xstrdup",
                "bfd_get_section_by_name",
                "FUN_0010870e",
                "FUN_0010c892",
                "bfd_is_local_label",
                "FUN_001088ae",
                "htab_traverse",
                "FUN_0010be88",
                "FUN_0010bbd3",
                "bfd_map_over_sections",
                "xmalloc",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33",
                "bfd_map_over_sections",
                "FUN_00119ed0",
                "bfd_get_section_contents",
                "strcpy",
                "bfd_set_section_contents",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_00119dd0",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00116110",
                "FUN_0010be1a",
                "FUN_00108863",
                "FUN_0011a2e0",
                "FUN_00116030",
                "FUN_0010875d",
                "bfd_set_symtab",
                "free",
                "FUN_00112894",
                "bfd_get_error",
                "bfd_octets_per_byte",
                "FUN_0010bc80",
                "bfd_coff_get_auxent",
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_initialize_data_00109cf4",
                "param_1": "data_address",
                "param_2": "value",
                "param_3": "flag",
                "local_3c": "buffer"
            },
            "code": "\nvoid format_and_initialize_data_00109cf4(undefined8 data_address,undefined8 value,undefined4 flag)\n\n{\n  char buffer [28];\n  \n  sprintf(buffer,\"%ld\",value);\n  initialize_data_00109b52(data_address,buffer,value,0,flag);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "format_and_initialize_data_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "param_5": "unused_param3",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "combined_result"
            },
            "code": "\nundefined  [16]\nparse_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 unused_param1,undefined8 unused_param2,\n            undefined8 unused_param3)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined combined_result [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_unsigned_number_00109a32(input_string,0);\n    *output_values = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_unsigned_number_00109a32(input_string,0,unused_param1);\n      output_values[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_error_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_unsigned_number_00109a32(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  combined_result._8_8_ = unused_param3;\n  combined_result._0_8_ = result;\n  return combined_result;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_and_find_data_entry_001159d0",
                "param_1": "input_param",
                "uVar1": "entry_ptr",
                "cVar2": "match_result",
                "uVar3": "section_options",
                "lVar4": "data_entry_ptr",
                "lVar5": "current_data_entry"
            },
            "code": "\nundefined4 check_and_find_data_entry_001159d0(long input_param)\n\n{\n  undefined8 entry_ptr;\n  char match_result;\n  undefined4 section_options;\n  long data_entry_ptr;\n  long current_data_entry;\n  \n  section_options = check_section_options_00115b70();\n  if ((char)section_options == '\\0') {\n    if ((*(byte *)(input_param + 0x27) & 2) == 0) {\n      return section_options;\n    }\n    data_entry_ptr = find_data_entry_00115d00(*(undefined8 *)(input_param + 0xd0),*(undefined8 *)(input_param + 0xe0));\n    if ((data_entry_ptr != 0) &&\n       (((entry_ptr = *(undefined8 *)(data_entry_ptr + 8), DAT_00127a2c != 7 ||\n         (match_result = check_match_00115d70(entry_ptr,DAT_00127a08), match_result != '\\0')) &&\n        (match_result = check_match_00115d70(entry_ptr,DAT_001279f8), match_result == '\\0')))) {\n      data_entry_ptr = *(long *)(*(long *)(input_param + 0xd0) + 0xc0);\n      current_data_entry = data_entry_ptr;\n      do {\n        if (current_data_entry == 0) {\n          return 1;\n        }\n        match_result = check_section_options_00115b70(current_data_entry);\n        if (match_result == '\\0') {\n          return section_options;\n        }\n        current_data_entry = *(long *)(*(long *)(current_data_entry + 0xd0) + 0xc0);\n      } while (data_entry_ptr != current_data_entry);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_and_find_data_entry_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "data",
                "uVar1": "value",
                "lVar2": "ptr",
                "__s": "str1",
                "uVar3": "value2",
                "uVar4": "result",
                "__s_00": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "combined_str"
            },
            "code": "\nundefined4 processData_0010a77a(long data)\n\n{\n  undefined value;\n  long ptr;\n  char *str1;\n  undefined8 value2;\n  undefined4 result;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *combined_str;\n  \n  ptr = *(long *)(data + 0x60);\n  if ((ptr != 0) && (str1 = *(char **)(ptr + 0x20), str1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr + 0x18);\n    value = *(undefined *)(ptr + 0x1c);\n    value2 = *(undefined8 *)(ptr + 0x10);\n    str2 = (char *)extract_pointers_00109b2f();\n    len1 = strlen(str2);\n    len2 = strlen(str1);\n    combined_str = (char *)xmalloc(len1 + 2 + len2);\n    sprintf(combined_str,\"%s%s;\",str2,str1);\n    free(str2);\n    free(str1);\n    result = initialize_data_00109b52(data,combined_str,value2,value,result);\n    if ((char)result != '\\0') {\n      free(combined_str);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "piVar2": "ptr_errno",
                "pcVar3": "ptr_error_message",
                "uVar1": "var_argument1",
                "uVar4": "var_argument2",
                "unaff_RBP": "var_base_pointer"
            },
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 var_argument1;\n  int *ptr_errno;\n  char *ptr_error_message;\n  undefined8 var_argument2;\n  long var_base_pointer;\n  \n  ptr_errno = __errno_location();\n  ptr_error_message = strerror(*ptr_errno);\n  var_argument1 = *(undefined8 *)(var_base_pointer + 0x10);\n  var_argument2 = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(var_argument2,var_argument1,ptr_error_message);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "format_data_0010a424",
                "param_1": "data",
                "param_2": "flag1",
                "param_3": "count",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "uVar4": "returnValue",
                "pcVar5": "str1",
                "__ptr": "ptrArray",
                "uVar6": "extractedPtr",
                "__s": "str2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "formattedStr",
                "lVar9": "index",
                "bVar10": "byteVar2",
                "lVar11": "loopIndex",
                "uVar12": "byteVar3"
            },
            "code": "\nundefined4 formatData_0010a424(long data,char flag1,int count,char flag2)\n\n{\n  char result;\n  byte byteVar;\n  int intVar;\n  undefined4 returnValue;\n  char *str1;\n  undefined8 *ptrArray;\n  undefined8 extractedPtr;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *formattedStr;\n  long index;\n  byte byteVar2;\n  long loopIndex;\n  undefined byteVar3;\n  \n  if ((flag1 == '\\0') && (result = initialize_or_format_data_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  byteVar2 = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str1 = (char *)extract_pointers_00109b2f(data);\n  if (count < 0) {\n    ptrArray = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    byteVar3 = 1;\n    if (byteVar2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      intVar = count + 1;\n      ptrArray = (undefined8 *)xmalloc((long)intVar * 8);\n      index = (long)(count + -1);\n      do {\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        extractedPtr = extract_pointers_00109b2f(data);\n        byteVar2 = byteVar & 1;\n        ptrArray[index] = extractedPtr;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = initialize_or_format_data_00109d97(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        byteVar2 = byteVar & 1;\n        extractedPtr = extract_pointers_00109b2f(data);\n        ptrArray[(long)intVar + -1] = extractedPtr;\n        count = intVar;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = initialize_or_format_data_00109d97(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byteVar2 != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      extractedPtr = extract_pointers_00109b2f(data);\n      count = 1;\n      byteVar3 = 1;\n      *ptrArray = extractedPtr;\n      goto LAB_0010a596;\n    }\n    extractedPtr = extract_pointers_00109b2f(data);\n    count = 1;\n    *ptrArray = extractedPtr;\n  }\n  byteVar3 = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_pointers_00109b2f(data);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  index = length1 + 10 + length2;\n  for (loopIndex = 0; (int)loopIndex < count; loopIndex = loopIndex + 1) {\n    length1 = strlen((char *)ptrArray[loopIndex]);\n    index = index + length1;\n  }\n  formattedStr = (char *)xmalloc(index);\n  sprintf(formattedStr,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    length1 = strlen(formattedStr);\n    if (count <= (int)index) break;\n    *(undefined2 *)(formattedStr + length1) = 0x2c;\n    str1 = (char *)ptrArray[index];\n    index = index + 1;\n    strcpy(formattedStr + length1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(formattedStr + length1) = 0x3b;\n  free(ptrArray);\n  returnValue = initialize_data_00109b52(data,formattedStr,0,byteVar3,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(formattedStr);\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_00109d97",
                "sprintf",
                "FUN_00109b2f",
                "strcpy",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightText"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 version)\n\n{\n  char *copyrightText;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightText);\n  copyrightText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_param_string_00114c80",
                "param_1": "input_string",
                "param_2": "param_2_value",
                "param_3": "error_message",
                "param_4": "param_4_value",
                "pcVar1": "equal_sign_ptr",
                "uVar2": "message",
                "auVar3": "parsed_result",
                "xmalloc": "allocate_memory",
                "copy_and_null_terminate_string_0011a480": "copy_string_with_null_termination",
                "dcgettext": "get_text",
                "print_error_and_exit_00119dd0": "print_error_and_exit"
            },
            "code": "\nundefined  [16] parse_param_string_00114c80(char *input_string,undefined8 param_2_value,undefined8 error_message,undefined8 param_4_value)\n\n{\n  char *equal_sign_ptr;\n  undefined8 message;\n  undefined parsed_result [16];\n  \n  equal_sign_ptr = strchr(input_string,0x3d);\n  if (equal_sign_ptr != (char *)0x0) {\n    parsed_result._0_8_ = (undefined8 *)xmalloc(0x30);\n    message = copy_string_with_null_termination(input_string,(long)equal_sign_ptr - (long)input_string);\n    parsed_result._0_8_[2] = equal_sign_ptr + 1;\n    parsed_result._0_8_[1] = message;\n    parsed_result._0_8_[4] = 0;\n    parsed_result._0_8_[3] = 0;\n    *parsed_result._0_8_ = param_2_value;\n    parsed_result._8_8_ = param_4_value;\n    return parsed_result;\n  }\n  message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit(message,error_message);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_001053b5",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_param_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "oldValue",
                "param_2": "newValue",
                "param_3": "pointerToValue",
                "puVar1": "currentValue"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 oldValue,undefined8 newValue,long *pointerToValue)\n\n{\n  undefined8 *currentValue;\n  \n  currentValue = (undefined8 *)*pointerToValue;\n  *currentValue = newValue;\n  *pointerToValue = (long)(currentValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_data",
                "param_2": "format_table",
                "param_3": "global_data",
                "param_5": "type_code",
                "param_6": "coff_section",
                "param_8": "error_msg",
                "lVar1": "sym_entry_value",
                "cVar2": "success",
                "uVar3": "bfd_error",
                "uVar4": "param_val",
                "lVar5": "result",
                "uVar6": "error_msg",
                "plVar7": "allocated_mem",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_val",
                "iVar9": "counter",
                "pcVar10": "type_string",
                "uVar11": "bit_mask",
                "lVar12": "index",
                "uVar13": "shifted_value",
                "uVar14": "short_val",
                "uVar15": "var_30",
                "local_68": "local_buffer",
                "local_48": "local_char1",
                "local_47": "local_byte1"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *format_table,long global_data,undefined8 param_4,uint type_code,\n                 long *coff_section,char param_7,undefined8 error_msg)\n\n{\n  long sym_entry_value;\n  char success;\n  undefined4 bfd_error;\n  undefined8 param_val;\n  long result;\n  undefined8 error_msg;\n  long *allocated_mem;\n  void *ptr1;\n  void *ptr2;\n  byte byte_val;\n  int counter;\n  char *type_string;\n  ulong bit_mask;\n  long index;\n  uint shifted_value;\n  uint short_val;\n  undefined8 var_30;\n  undefined local_buffer [32];\n  char local_char1;\n  byte local_byte1;\n  \n  result = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    shifted_value = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    bit_mask = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_val = (byte)*(undefined4 *)(result + 0x3c);\n    shifted_value = (shifted_value ^ type_code) & *(uint *)(result + 0x38) ^ shifted_value;\n    if (bit_mask == 1L << (byte_val & 0x3f)) {\n      param_val = parse_coff_type_0010dac0(coff_data,format_table,global_data,param_4,shifted_value,coff_section,param_7,error_msg);\n      result = initialize_or_get_memory_00113d3a(param_val);\n      return result;\n    }\n    if (bit_mask != 2L << (byte_val & 0x3f)) {\n      if (bit_mask != 3L << (byte_val & 0x3f)) {\n        param_val = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          shifted_value);\n        print_error_00119ed0(param_val,type_code);\n        return 0;\n      }\n      short_val = 0;\n      if (coff_section != (long *)0x0) {\n        short_val = (uint)*(ushort *)(coff_section + 2);\n        allocated_mem = coff_section + 2;\n        for (counter = 0; (*(short *)allocated_mem != 0 && (counter != 3)); counter = counter + 1) {\n          *(short *)allocated_mem = *(short *)((long)allocated_mem + 2);\n          allocated_mem = (long *)((long)allocated_mem + 2);\n        }\n        *(short *)allocated_mem = 0;\n      }\n      var_30 = 0;\n      param_val = error_msg;\n      error_msg = parse_coff_type_0010dac0(coff_data,format_table,global_data,param_4,shifted_value,coff_section,0);\n      result = *(long *)(global_data + 0x28);\n      if (result == 0) {\n        param_val = initialize_memory_and_set_param_00113dfe(4,0,var_30,param_val);\n        result = initialize_and_allocate_memory_0010c218(error_msg,\"int\",param_val);\n        *(long *)(global_data + 0x28) = result;\n      }\n      result = initialize_data_structure_00113c43(error_msg,result,0,(long)(int)(short_val - 1),0);\n      return result;\n    }\n    param_val = parse_coff_type_0010dac0(coff_data,format_table,global_data,param_4,shifted_value,coff_section,param_7,error_msg);\n    result = initialize_and_allocate_memory_00113ce0(param_val,0,0);\n    return result;\n  }\n  if ((coff_section != (long *)0x0) && (0 < *coff_section)) {\n    allocated_mem = (long *)allocate_or_update_memory_0010da0b(global_data);\n    if (*allocated_mem != 0) {\n      return *allocated_mem;\n    }\n    result = initialize_memory_00113e23(allocated_mem,0);\n    return result;\n  }\n  if (param_7 == '\\0') {\n    coff_section = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = initialize_memory_00113e17();\n    return result;\n  }\n  result = *(long *)(global_data + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    param_val = initialize_memory_00113e17();\n    type_string = \"void\";\n    break;\n  case 2:\n    param_val = initialize_memory_and_set_param_00113dfe(1,0);\n    type_string = \"char\";\n    break;\n  case 3:\n    param_val = initialize_memory_and_set_param_00113dfe(2,0);\n    type_string = \"short\";\n    break;\n  case 4:\n    param_val = initialize_memory_and_set_param_00113dfe(4,0);\n    type_string = \"int\";\n    break;\n  case 5:\n    param_val = initialize_memory_and_set_param_00113dfe(4,0);\n    type_string = \"long\";\n    break;\n  case 6:\n    param_val = initialize_memory_00113df2(4);\n    type_string = \"float\";\n    break;\n  case 7:\n    param_val = initialize_memory_00113df2(8);\n    type_string = \"double\";\n    break;\n  case 8:\n    if (coff_section == (long *)0x0) {\n      result = initialize_memory_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    param_val = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (coff_section == (long *)0x0) {\n      result = initialize_memory_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    param_val = 9;\nLAB_0010de7a:\n    result = process_binary_0010e07c(coff_data,format_table,global_data,param_val,coff_section,error_msg);\nLAB_0010e046:\n    allocated_mem = (long *)allocate_or_update_memory_0010da0b(global_data,param_4);\n    *allocated_mem = result;\n    return result;\n  case 10:\n    if (coff_section == (long *)0x0) {\n      result = initialize_and_allocate_memory_00113d6e(0,0);\n    }\n    else {\n      result = coff_section[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((result <= format_table[3]) || (format_table[1] <= format_table[2])) goto LAB_0010e032;\n          counter = (int)index;\n          sym_entry_value = *(long *)(*format_table + format_table[2] * 8);\n          success = bfd_coff_get_syment(coff_data,sym_entry_value,local_buffer);\n          index = (long)counter;\n          if (success == '\\0') {\n            bfd_error = bfd_get_error();\n            param_val = bfd_errmsg(bfd_error);\n            error_msg = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_00119ed0(error_msg,param_val);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          format_table[2] = format_table[2] + 1;\n          format_table[3] = (ulong)local_byte1 + 1 + format_table[3];\n          if (local_char1 != '\\x10') break;\n          if ((int)type_code <= counter + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          index = *(long *)(sym_entry_value + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)counter * 8) = *(undefined8 *)(sym_entry_value + 8);\n          *(long *)((long)ptr2 + (long)counter * 8) =\n               *(long *)(sym_entry_value + 0x10) + *(long *)(index + 0x30);\n          index = (long)(counter + 1);\n        }\n      } while (local_char1 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + index * 8) = 0;\n      result = initialize_and_allocate_memory_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = initialize_memory_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    param_val = initialize_memory_and_set_param_00113dfe(1,1);\n    type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    param_val = initialize_memory_and_set_param_00113dfe(2,1);\n    type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    param_val = initialize_memory_and_set_param_00113dfe(4,1);\n    type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    param_val = initialize_memory_and_set_param_00113dfe(4,1);\n    type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    param_val = initialize_memory_00113df2(0xc);\n    type_string = \"long double\";\n  }\n  result = initialize_and_allocate_memory_0010c218(error_msg,type_string,param_val);\nLAB_0010e065:\n  *(long *)(global_data + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00113d3a",
                "FUN_0010e07c",
                "FUN_00113c43",
                "dcgettext",
                "FUN_00113ce0",
                "xmalloc",
                "FUN_00113e23",
                "FUN_0010dac0",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "FUN_0010c218",
                "free",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnAddress",
                "__n": "length",
                "extraout_var": "extraOutput",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnAddress;\n  size_t length;\n  undefined4 extraOutput;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraOutput,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_00113ede",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_set_error_message_0010882c",
                "piVar1": "errorLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printTimeSetErrorMessage_0010882c(void)\n\n{\n  int *errorLocation;\n  undefined8 errorMessage;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_00119ed0(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_set_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_free_string_0010ebb0",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "extraData",
                "__s": "extractedString",
                "cVar1": "charVar",
                "uVar2": "adjustedLength",
                "uVar3": "result",
                "sVar4": "prefixLength",
                "sVar5": "extractedStringLength",
                "__s_00": "combinedString"
            },
            "code": "\nundefined4 processAndFreeString_0010ebb0(undefined8 input,char *prefix,int length,undefined8 extraData)\n\n{\n  char charVar;\n  uint adjustedLength;\n  undefined4 result;\n  char *extractedString;\n  size_t prefixLength;\n  size_t extractedStringLength;\n  char *combinedString;\n  \n  extractedString = (char *)extract_pointers_00109b2f();\n  adjustedLength = length - 1;\n  if (adjustedLength < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjustedLength * 4);\n    charVar = (&DAT_00121334)[adjustedLength];\n    prefixLength = strlen(prefix);\n    extractedStringLength = strlen(extractedString);\n    combinedString = (char *)xmalloc(prefixLength + 3 + extractedStringLength);\n    sprintf(combinedString,\"%s:%c%s\",prefix,(ulong)(uint)(int)charVar,extractedString);\n    free(extractedString);\n    result = process_string_0010e2f0(input,result,0,extraData,combinedString);\n    if ((char)result != '\\0') {\n      free(combinedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_memory_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "memoryAddress",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong initializeMemory_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long memoryAddress;\n  long *allocatedMemory;\n  \n  if ((input1 != 0) && (memoryAddress = initialize_memory_00112904(0x13,0), memoryAddress != 0)) {\n    allocatedMemory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocatedMemory + 0x19) = 0;\n    *allocatedMemory = input1;\n    *(undefined4 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[1] = input2;\n    allocatedMemory[2] = input3;\n    *(undefined *)(allocatedMemory + 3) = input4;\n    *(long **)(memoryAddress + 0x10) = allocatedMemory;\n    return memoryAddress;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_match_00115d70",
                "param_1": "input_data",
                "param_2": "hash_table",
                "lVar1": "lookup_result",
                "local_18": "temp_data",
                "local_10": "is_match"
            },
            "code": "\nundefined check_match_00115d70(undefined8 input_data,undefined8 hash_table)\n\n{\n  long lookup_result;\n  undefined8 temp_data;\n  undefined is_match;\n  \n  if (DAT_001279ca == '\\0') {\n    lookup_result = htab_find(hash_table,input_data);\n    is_match = lookup_result != 0;\n  }\n  else {\n    is_match = 0;\n    temp_data = input_data;\n    htab_traverse(hash_table,pattern_match_0011a170,&temp_data);\n  }\n  return is_match;\n}\n\n",
            "called": [
                "htab_find",
                "htab_traverse",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_0010554f",
                "FUN_001082df",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_match_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_insert_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "resizedData",
                "puVar2": "newElement",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 resizeAndInsertData_00109be3(long data,undefined8 value,undefined4 flag)\n\n{\n  undefined8 resizedData;\n  undefined8 *newElement;\n  uint currentSize;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    currentSize = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = currentSize;\n    resizedData = xrealloc(*(undefined8 *)(data + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(data + 0x20) = resizedData;\n  }\n  currentSize = *(uint *)(data + 0x28);\n  newElement = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(data + 0x20));\n  *newElement = value;\n  *(undefined4 *)(newElement + 1) = flag;\n  *(uint *)(data + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)newElement >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "resize_and_insert_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "sourceLength",
                "__dest": "destinationString"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t sourceLength;\n  void *destinationString;\n  \n  sourceLength = strnlen(sourceString,maxLength);\n  destinationString = (void *)xmalloc(sourceLength + 1);\n  *(undefined *)((long)destinationString + sourceLength) = 0;\n  memcpy(destinationString,sourceString,sourceLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_free_string_0010e918",
                "param_1": "input1",
                "param_2": "sourceString",
                "param_3": "input2",
                "__s": "extractedString",
                "sVar2": "sourceLength",
                "sVar3": "extractedStrLength",
                "__s_00": "combinedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processAndFreeString_0010e918(undefined8 input1,char *sourceString,undefined8 input2)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t sourceLength;\n  size_t extractedStrLength;\n  char *combinedString;\n  \n  extractedString = (char *)extract_pointers_00109b2f();\n  sourceLength = strlen(sourceString);\n  extractedStrLength = strlen(extractedString);\n  combinedString = (char *)xmalloc(sourceLength + 0x14 + extractedStrLength);\n  sprintf(combinedString,\"%s:c=e%s,%ld\",sourceString,extractedString,input2);\n  free(extractedString);\n  result = process_string_0010e2f0(input1,0x80,0,0,combinedString);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010ae0e",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_and_modify_section_00116110",
                "param_1": "bfd_input",
                "param_2": "section_info",
                "param_3": "bfd_output",
                "uVar1": "temp",
                "uVar2": "input_offset",
                "lVar3": "section_header",
                "iVar4": "half_length",
                "iVar5": "remainder_length",
                "cVar6": "result",
                "uVar7": "error_message",
                "__ptr": "buffer",
                "lVar8": "inner_loop_counter",
                "uVar9": "outer_loop_counter",
                "iVar10": "num_iterations",
                "uVar11": "inner_offset",
                "puVar12": "byte_pointer",
                "lVar13": "remaining_bytes",
                "puVar14": "buffer_pointer",
                "puVar15": "temp_pointer",
                "pvVar16": "current_location",
                "uVar17": "temp_offset",
                "uVar18": "division_factor",
                "uVar19": "loop_counter",
                "bVar20": "flag",
                "local_38": "section_length",
                "local_30": "section_contents"
            },
            "code": "\nvoid reverseAndModifySection_00116110(undefined8 bfd_input,undefined8 *section_info,undefined8 bfd_output)\n\n{\n  undefined temp;\n  undefined8 input_offset;\n  long section_header;\n  int half_length;\n  int remainder_length;\n  char result;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long inner_loop_counter;\n  ulong outer_loop_counter;\n  int num_iterations;\n  ulong inner_offset;\n  undefined *byte_pointer;\n  long remaining_bytes;\n  undefined8 *buffer_pointer;\n  undefined8 *temp_pointer;\n  void *current_location;\n  ulong temp_offset;\n  ulong division_factor;\n  ulong loop_counter;\n  byte flag;\n  ulong section_length;\n  void *section_contents;\n  \n  flag = 0;\n  result = check_data_entry_00115f50(bfd_input,section_info,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_length = section_info[8];\n  section_header = section_info[0xc];\n  if (((*(byte *)((long)section_info + 0x25) & 1) == 0) || ((*(byte *)(section_header + 0x25) & 1) == 0)) {\n    remaining_bytes = find_and_modify_entry_00114190(*section_info,0,0x80);\n    if (remaining_bytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remaining_bytes + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_length);\n    temp_pointer = buffer;\n    if (7 < section_length) {\n      for (division_factor = section_length >> 3; division_factor != 0; division_factor = division_factor - 1) {\n        *temp_pointer = 0;\n        temp_pointer = temp_pointer + (ulong)flag * -2 + 1;\n      }\n    }\n    buffer_pointer = temp_pointer;\n    if ((section_length & 4) != 0) {\n      buffer_pointer = (undefined8 *)((long)temp_pointer + (ulong)flag * -8 + 4);\n      *(undefined4 *)temp_pointer = 0;\n    }\n    temp_pointer = buffer_pointer;\n    if ((section_length & 2) != 0) {\n      temp_pointer = (undefined8 *)((long)buffer_pointer + (ulong)flag * -4 + 2);\n      *(undefined2 *)buffer_pointer = 0;\n    }\n    if ((section_length & 1) != 0) {\n      *(undefined *)temp_pointer = 0;\n    }\n    result = bfd_set_section_contents(bfd_output,section_header,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,bfd_output,section_header,0);\n    free(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  result = bfd_get_full_section_contents(bfd_input,section_info,&section_contents);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(bfd_input,section_info,bfd_output,&section_contents,&section_length),\n     num_iterations = DAT_001278e8, result == '\\0')) {\n    bfd_set_section_size(section_header,0);\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,bfd_input,section_info,0);\n    free(section_contents);\n    return;\n  }\n  half_length = DAT_001264b8;\n  remainder_length = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    division_factor = (ulong)DAT_001278e8;\n    if (section_length % division_factor != 0) {\n      input_offset = *section_info;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(error_message,input_offset,num_iterations);\n    }\n    num_iterations = DAT_001278e8 / 2;\n    inner_offset = 0;\n    while (loop_counter = inner_offset, half_length = DAT_001264b8, remainder_length = DAT_001264bc, loop_counter < section_length) {\n      inner_offset = division_factor + loop_counter;\n      temp_offset = inner_offset;\n      for (outer_loop_counter = 0; outer_loop_counter < (ulong)(long)num_iterations; outer_loop_counter = outer_loop_counter + 1) {\n        temp_offset = temp_offset - 1;\n        byte_pointer = (undefined *)(loop_counter + outer_loop_counter + (long)section_contents);\n        temp = *byte_pointer;\n        *byte_pointer = *(undefined *)((long)section_contents + temp_offset);\n        *(undefined *)((long)section_contents + temp_offset) = temp;\n      }\n    }\n  }\n  DAT_001264b8 = half_length;\n  DAT_001264bc = remainder_length;\n  if (-1 < remainder_length) {\n    division_factor = (ulong)DAT_00127a1c;\n    num_iterations = (int)((ulong)section_info[7] % division_factor);\n    inner_offset = ((long)remainder_length - (long)num_iterations) + (long)section_contents;\n    if (remainder_length < num_iterations) {\n      inner_offset = inner_offset + division_factor;\n    }\n    remaining_bytes = (section_length + (long)section_contents) - inner_offset;\n    current_location = section_contents;\n    for (; inner_offset < section_length + (long)section_contents; inner_offset = inner_offset + division_factor) {\n      for (inner_loop_counter = 0; ((int)inner_loop_counter < half_length && (inner_loop_counter != remaining_bytes)); inner_loop_counter = inner_loop_counter + 1) {\n        *(undefined *)((long)current_location + inner_loop_counter) = *(undefined *)(inner_offset + inner_loop_counter);\n      }\n      current_location = (void *)((long)current_location + inner_loop_counter);\n      remaining_bytes = remaining_bytes - division_factor;\n    }\n    section_length = ((((division_factor - 1) + section_length) - (long)remainder_length) / division_factor) * (long)half_length;\n    division_factor = *(ulong *)(section_header + 0x38) / division_factor;\n    *(ulong *)(section_header + 0x38) = division_factor;\n    if (remainder_length < num_iterations) {\n      *(ulong *)(section_header + 0x38) = division_factor + 1;\n      result = bfd_set_section_contents(bfd_output,section_header,section_contents,0,section_length);\n      if (result == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(bfd_output,section_header,section_contents,0,section_length);\n  if (result == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "bfd_get_full_section_contents",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "free",
                "xmalloc",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00108466",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_information_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printErrorInformation_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(stdoutStream);\n  if (errorCode != 0) {\n    fprintf(stderrStream,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(stderrStream,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_information_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unknown",
                "param_4": "unknown2",
                "lVar1": "current_block",
                "uVar2": "result",
                "pcVar3": "error_message",
                "auVar4": "output"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unknown,undefined8 unknown2)\n\n{\n  long current_block;\n  undefined8 result;\n  char *error_message;\n  undefined output [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      result = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  result = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010bf84:\n  output._8_8_ = unknown2;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_data_0010c95e",
                "param_1": "input_data",
                "param_2": "byte_array",
                "param_3": "output_data",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "pbVar3": "current_ptr",
                "bVar4": "found_C",
                "bVar5": "found_S",
                "bVar6": "found_U",
                "cVar7": "result",
                "uVar8": "number",
                "pbVar9": "next_ptr",
                "lVar10": "type",
                "uVar11": "return_value",
                "pcVar12": "type_A",
                "sVar13": "length",
                "uVar14": "number_U",
                "__ptr": "string_ptr",
                "lVar15": "result",
                "pcVar19": "type_B",
                "ppcVar18": "string_array",
                "puVar17": "found",
                "puVar16": "size_ptr",
                "local_49": "local_var_A",
                "local_48": "local_var_B",
                "local_40": "local_string_array"
            },
            "code": "\nundefined8 parse_data_0010c95e(undefined8 *input_data,byte **byte_array,long *output_data)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *current_ptr;\n  bool found_C;\n  bool found_S;\n  bool found_U;\n  char result;\n  uint number;\n  byte *next_ptr;\n  long type;\n  undefined8 return_value;\n  char *type_A;\n  size_t length;\n  ulong number_U;\n  void *string_ptr;\n  long result;\n  ulong *size_ptr;\n  undefined *found;\n  char **string_array;\n  char *type_B;\n  byte *pnext_byte0;\n  undefined local_var_A;\n  ulong local_var_B;\n  char *local_string_array [2];\n  \n  while( true ) {\n    pnext_byte0 = *byte_array;\n    current_byte = *pnext_byte0;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      result = 0;\n      current_ptr = pnext_byte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = pnext_byte0 + 1;\n      result = parse_data_0010c95e(input_data,byte_array,output_data);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_memory_if_nonzero_00113b71(*output_data);\n      *output_data = result;\n      return 1;\n    case 0x46:\n      *byte_array = pnext_byte0 + 1;\n      if (output_data == (long *)0x0) {\n        size_ptr = (ulong *)0x0;\n        string_array = (char **)0x0;\n      }\n      else {\n        size_ptr = &local_var_B;\n        string_array = local_string_array;\n      }\n      result = process_data_0010d882(input_data,byte_array,string_array,size_ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        result = parse_data_0010c95e(input_data,byte_array,output_data);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        result = initialize_and_allocate_memory_00113ce0(*output_data,local_string_array[0],local_var_B & 0xff);\n        *output_data = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = pnext_byte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_var_A = 0;\n      local_string_array[0] = (char *)0x0;\n      local_var_B = 0;\n      *byte_array = pnext_byte0 + 1;\n      if (((&_sch_istable)[(ulong)pnext_byte0[1] * 2] & 4) == 0) {\n        if (pnext_byte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        string_array = local_string_array;\n        if (output_data == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = parse_and_count_0010d559(input_data,byte_array,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        number = parse_number_00108e76(byte_array);\n        current_ptr = *byte_array;\n        length = strlen((char *)current_ptr);\n        if (length < number) goto switchD_0010cdf9_caseD_60;\n        *byte_array = current_ptr + number;\n        if ((output_data != (long *)0x0) &&\n           (local_string_array[0] = (char *)find_and_free_memory_0010afd5(*input_data,input_data[1],current_ptr,number,9),\n           local_string_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_array;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (output_data == (long *)0x0) {\n          found = (undefined *)0x0;\n          size_ptr = (ulong *)0x0;\n        }\n        else {\n          found = &local_var_A;\n          size_ptr = &local_var_B;\n        }\n        result = process_data_0010d882(input_data,byte_array,size_ptr,found);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        result = parse_data_0010c95e(input_data,byte_array,output_data);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          result = initialize_memory_and_allocate_pointer_00113bfa(local_string_array[0],*output_data);\n          *output_data = result;\n          return 1;\n        }\n        result = initialize_memory_00113b98(*output_data,local_string_array[0],local_var_B,local_var_A);\n        *output_data = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = parse_and_count_0010d559(input_data,byte_array,output_data);\n      return return_value;\n    case 0x52:\n      *byte_array = pnext_byte0 + 1;\n      result = parse_data_0010c95e(input_data,byte_array,output_data);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_memory_00113cb9(*output_data);\n      *output_data = result;\n      return 1;\n    case 0x54:\n      *byte_array = pnext_byte0 + 1;\n      result = parse_number_00108ea1(byte_array,&local_var_B);\n      if (result != '\\0') {\n        if ((uint)local_var_B < *(uint *)(input_data + 5)) {\n          local_string_array[0] = *(char **)((local_var_B & 0xffffffff) * 0x10 + input_data[4]);\n          result = parse_data_0010c95e(input_data,local_string_array,output_data);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = pnext_byte0 + 1;\n    result = parse_data_0010c95e(input_data,byte_array,output_data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    result = initialize_or_get_memory_00113d3a(*output_data);\n    *output_data = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  found_U = false;\n  found_C = false;\n  result = '\\0';\n  found_S = false;\n  do {\n    current_ptr = *byte_array;\n    current_byte = *current_ptr;\n    if (current_byte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        found_U = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (output_data == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = current_ptr + 1;\n          return 1;\n        }\n        result = find_named_type_0010914e(*input_data,&DAT_00120436);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_00112904(6,4);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"unsigned char\";\n        if ((result == '\\0') && (type_B = \"char\", found_C)) {\n          type_B = \"signed char\";\n        }\n        result = find_named_type_0010914e(*input_data,type_B);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(1,result);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*input_data,\"float\");\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_00113df2(4);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"unsigned int\";\n        type_A = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"long unsigned int\";\n        type_A = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          type_B = type_A;\n        }\n        result = find_named_type_0010914e(*input_data,type_B);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(4,result);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        type_B = \"long double\";\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = find_named_type_0010914e(*input_data,type_B);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_00113df2(8);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"short unsigned int\";\n        if (result == '\\0') {\n          type_B = \"short int\";\n        }\n        result = find_named_type_0010914e(*input_data,type_B);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(2,result);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        string_array = local_string_array;\n        if (output_data == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = parse_and_process_data_0010d21c(input_data,byte_array,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (output_data == (long *)0x0) {\n          return 1;\n        }\n        length = strlen(local_string_array[0]);\n        result = find_and_free_memory_0010afd5(*input_data,input_data[1],local_string_array[0],length & 0xffffffff,9);\n        *output_data = result;\n        free(local_string_array[0]);\n        result = *output_data;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*input_data,&DAT_00120495);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_00113e17();\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*input_data,\"__wchar_t\");\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(2,1);\n          *output_data = result;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (output_data == (long *)0x0) goto LAB_0010d0aa;\n        type_B = \"long long unsigned int\";\n        if (result == '\\0') {\n          type_B = \"long long int\";\n        }\n        result = find_named_type_0010914e(*input_data,type_B);\n        *output_data = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(8,result);\n          *output_data = result;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      found_S = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    found_C = true;\nLAB_0010cd84:\n    *byte_array = current_ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  next_ptr = current_ptr + 1;\n  *byte_array = next_ptr;\n  current_byte = *next_ptr;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *byte_array = current_ptr + 2;\n    result = parse_data_0010c95e(input_data,byte_array,output_data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    type = find_named_type_0010914e(*input_data,\"int\");\n    if (type == 0) {\n      type = initialize_memory_and_set_param_00113dfe(4,0);\n    }\n    result = initialize_data_structure_00113c43(*output_data,type,0,result,0);\n    *output_data = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)current_byte + -0x30);\n  current_ptr = next_ptr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnext_byte0);\n      if (output_data == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*byte_array = current_ptr + 1, ((&_sch_istable)[(ulong)current_ptr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnext_byte0 = *byte_array;\n  number = parse_number_00108e76(byte_array);\n  current_ptr = *byte_array;\n  length = strlen((char *)current_ptr);\n  number_U = (ulong)number;\n  if (number_U <= length) {\n    *byte_array = current_ptr + number_U;\n    if (output_data == (long *)0x0) {\n      return 1;\n    }\n    string_ptr = (void *)copy_and_null_terminate_00109a0b(current_ptr,number_U);\n    result = find_named_type_0010914e(*input_data,string_ptr);\n    *output_data = result;\n    free(string_ptr);\n    if (*output_data == 0) {\n      result = find_and_free_memory_0010afd5(*input_data,input_data[1],current_ptr,(int)*byte_array - (int)current_ptr,0);\n      *output_data = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (found_S) {\n      result = initialize_memory_if_nonzero_00113b71(*output_data);\n      *output_data = result;\n    }\n    if (found_U) {\n      result = initialize_memory_00113b4a(*output_data);\n      *output_data = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnext_byte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b98",
                "FUN_0010c95e",
                "strlen",
                "FUN_00113d3a",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108e76",
                "FUN_0010d882",
                "free",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17",
                "FUN_00108ea1",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010c95e",
                "FUN_00113e5e",
                "FUN_0010d21c",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "parse_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = construct_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = identify_input_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_and_modify_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = parse_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = debug_info_function_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = allocate_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = debug_info_function_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_command_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = initialize_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = record_debug_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = update_record_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_debugging_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_and_find_data_entry_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_data_entry_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_modify_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)extract_and_process_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_0010554f",
                "xmalloc",
                "fopen",
                "bfd_get_full_section_contents",
                "fclose",
                "bfd_map_over_sections",
                "__errno_location",
                "fwrite",
                "bfd_make_section_with_flags",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "FUN_00114190",
                "bfd_set_section_size",
                "bfd_create_gnu_debuglink_section",
                "FUN_00115530",
                "bfd_set_format",
                "FUN_00113fb0",
                "FUN_0010551d",
                "FUN_00115f30",
                "dcgettext",
                "bfd_get_arch",
                "FUN_001163d0",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "free",
                "FUN_00105828"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoAddr",
                "pcVar3": "errMsg",
                "uVar4": "localizedErrMsg",
                "local_38": "accessTime",
                "uStack_34": "modTime",
                "uStack_30": "changeTime",
                "uStack_2c": "birthTime",
                "local_28": "fileMode",
                "uStack_24": "fileUid",
                "uStack_20": "fileGid",
                "uStack_1c": "unspecifiedField"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoAddr;\n  char *errMsg;\n  undefined8 localizedErrMsg;\n  undefined4 accessTime;\n  undefined4 modTime;\n  undefined4 changeTime;\n  undefined4 birthTime;\n  undefined4 fileMode;\n  undefined4 fileUid;\n  undefined4 fileGid;\n  undefined4 unspecifiedField;\n  \n  fileMode = *(undefined4 *)(fileInfo + 0x58);\n  fileUid = *(undefined4 *)(fileInfo + 0x5c);\n  fileGid = *(undefined4 *)(fileInfo + 0x60);\n  unspecifiedField = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  birthTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoAddr = __errno_location();\n    errMsg = strerror(*errnoAddr);\n    localizedErrMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_00119ed0(localizedErrMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unusedVariable"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unusedVariable;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorCode,errorMessage,unusedVariable);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hash_table",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "data",
                "param_5": "string",
                "lVar1": "prev_entry",
                "uVar2": "bfd_error",
                "lVar3": "entry",
                "uVar4": "error_msg",
                "uVar5": "error_string",
                "sVar6": "string_length",
                "lVar7": "new_entry",
                "local_44": "result",
                "uStack_40": "local_flag_1",
                "uStack_3f": "local_flag_2",
                "uStack_3e": "local_value",
                "local_3c": "local_array"
            },
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined flag,int size,undefined8 data,char *string)\n\n{\n  long prev_entry;\n  undefined4 bfd_error;\n  long entry;\n  undefined8 error_msg;\n  undefined8 error_string;\n  size_t string_length;\n  long new_entry;\n  undefined4 result;\n  undefined local_flag_1;\n  undefined local_flag_2;\n  undefined2 local_value;\n  undefined4 local_array [3];\n  \n  if (string == (char *)0x0) {\n    new_entry = 0;\n  }\n  else {\n    entry = bfd_hash_lookup(hash_table + 7,string,1,1);\n    if (entry == 0) {\n      bfd_error = bfd_get_error();\n      error_msg = bfd_errmsg(bfd_error);\n      error_string = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_00119ed0(error_string,error_msg);\n      return 0;\n    }\n    new_entry = *(long *)(entry + 0x20);\n    if (new_entry == -1) {\n      new_entry = hash_table[6];\n      prev_entry = hash_table[5];\n      *(long *)(entry + 0x20) = new_entry;\n      if (prev_entry == 0) {\n        hash_table[4] = entry;\n      }\n      else {\n        *(long *)(prev_entry + 0x18) = entry;\n      }\n      hash_table[5] = entry;\n      string_length = strlen(string);\n      hash_table[6] = new_entry + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(new_entry,&result);\n  local_flag_2 = 0;\n  local_flag_1 = flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)size,&local_value);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(data,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    new_entry = xrealloc(hash_table[1]);\n    hash_table[1] = new_entry;\n  }\n  new_entry = hash_table[2];\n  entry = hash_table[1];\n  *(ulong *)(entry + new_entry) = CONCAT26(local_value,CONCAT15(local_flag_2,CONCAT14(local_flag_1,result)));\n  *(undefined4 *)(entry + 8 + new_entry) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)new_entry >> 8),1);\n}\n\n",
            "called": [
                "xrealloc",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010e5db",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ed2c",
                "FUN_0010ebb0",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010edb4",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010eafe"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_4": "sectionSize",
                "iVar1": "result",
                "uVar2": "errorString",
                "pcVar3": "commaPtr",
                "pcVar4": "nextSection",
                "sVar5": "sectionLength",
                "iVar6": "sectionIndex",
                "uVar7": "flags",
                "auVar8": "sectionResult"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param_2,undefined8 param_3,undefined8 sectionSize)\n\n{\n  int result;\n  undefined8 errorString;\n  char *commaPtr;\n  char *nextSection;\n  size_t sectionLength;\n  int sectionIndex;\n  uint flags;\n  undefined sectionResult [16];\n  \n  flags = 0;\n  do {\n    commaPtr = strchr(sectionFlags,0x2c);\n    if (commaPtr == (char *)0x0) {\n      sectionLength = strlen(sectionFlags);\n      sectionIndex = (int)sectionLength;\n      nextSection = (char *)0x0;\n    }\n    else {\n      nextSection = commaPtr + 1;\n      sectionIndex = (int)commaPtr - (int)sectionFlags;\n    }\n    sectionLength = (size_t)sectionIndex;\n    result = strncasecmp(\"alloc\",sectionFlags,sectionLength);\n    if (result == 0) {\n      flags = flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,sectionLength);\n      if (result == 0) {\n        flags = flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,sectionLength);\n        if (result == 0) {\n          flags = flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,sectionLength);\n          if (result == 0) {\n            flags = flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,sectionLength);\n            if (result == 0) {\n              flags = flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,sectionLength);\n              if (result == 0) {\n                flags = flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,sectionLength);\n                if (result == 0) {\n                  flags = flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,sectionLength);\n                  if (result == 0) {\n                    flags = flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,sectionLength);\n                    if (result == 0) {\n                      flags = flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,sectionLength);\n                      if (result == 0) {\n                        flags = flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,sectionLength);\n                        if (result == 0) {\n                          flags = flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,sectionLength);\n                          if (result == 0) {\n                            flags = flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,sectionLength);\n                            if (result != 0) {\n                              commaPtr = (char *)xmalloc((long)(sectionIndex + 1));\n                              strncpy(commaPtr,sectionFlags,sectionLength);\n                              commaPtr[sectionLength] = '\\0';\n                              errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_00119ed0(errorString,commaPtr);\n                              errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(errorString,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            flags = flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSection;\n  } while (nextSection != (char *)0x0);\n  sectionResult._4_4_ = 0;\n  sectionResult._0_4_ = flags;\n  sectionResult._8_8_ = sectionSize;\n  return sectionResult;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "construct_formatted_string_001125fa",
                "param_1": "inputStrings",
                "uVar1": "formattedStringSize",
                "ppcVar2": "archiveNamePtr",
                "sVar3": "archiveNameLength",
                "sVar4": "inputStringLenght",
                "__s": "formattedString"
            },
            "code": "\nchar * constructFormattedString_001125fa(char **inputStrings)\n\n{\n  ulong formattedStringSize;\n  char **archiveNamePtr;\n  size_t archiveNameLength;\n  size_t inputStringLenght;\n  char *formattedString;\n  \n  if (inputStrings == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archiveNamePtr = (char **)inputStrings[0x1d];\n  formattedString = *inputStrings;\n  if ((archiveNamePtr != (char **)0x0) && ((*(byte *)((long)archiveNamePtr + 0x49) & 0x10) == 0)) {\n    archiveNameLength = strlen(*archiveNamePtr);\n    inputStringLenght = strlen(formattedString);\n    formattedStringSize = archiveNameLength + 3 + inputStringLenght;\n    if (DAT_00127a38 < formattedStringSize) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (formattedStringSize >> 1) + formattedStringSize;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)inputStrings[0x1d],*inputStrings);\n    formattedString = DAT_00127a30;\n  }\n  return formattedString;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "construct_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined getOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid freeMemoryBlocks_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127720;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_blocks_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_at_address_zero_00104020"
            },
            "code": "\nvoid execute_function_at_address_zero_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_at_address_zero_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_file_list",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "return_value",
                "puVar3": "current_node",
                "puVar4": "previous_node",
                "lVar5": "counter",
                "puVar6": "head_node",
                "pcVar7": "current_filename",
                "puVar8": "tail_node",
                "bVar9": "unused_byte"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_file_list,char *filename)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined8 *current_node;\n  undefined8 *previous_node;\n  long counter;\n  undefined8 *head_node;\n  char *current_filename;\n  undefined8 *tail_node;\n  byte unused_byte;\n  \n  unused_byte = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_file_list + 8) == 0) {\n    return_value = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",return_value);\n    return_value = 0;\n  }\n  else {\n    for (current_node = *(undefined8 **)(*(long *)(source_file_list + 8) + 8); current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      comparison_result = filename_cmp(current_node[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_node = (undefined8 *)xmalloc(0x18);\n    head_node = *(undefined8 **)(source_file_list + 0x10);\n    tail_node = current_node;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)tail_node = 0;\n      tail_node = (undefined8 *)((long)tail_node + (ulong)unused_byte * -8 + 4);\n    }\n    current_node[1] = current_filename;\n    tail_node = (undefined8 *)*head_node;\n    while (previous_node = tail_node, previous_node != (undefined8 *)0x0) {\n      head_node = previous_node;\n      tail_node = (undefined8 *)*previous_node;\n    }\n    *head_node = current_node;\nLAB_00108fad:\n    *(undefined8 **)(source_file_list + 0x10) = current_node;\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "find_and_modify_entry_00114190",
                "param_1": "entry",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "value",
                "plVar2": "match",
                "pplVar3": "currentParent",
                "iVar4": "result",
                "uVar5": "error",
                "pplVar6": "current",
                "pplVar7": "previous",
                "pplVar8": "next"
            },
            "code": "\nlong ** findAndModifyEntry_00114190(long *entry,char flag,uint options)\n\n{\n  uint value;\n  long *match;\n  long **currentParent;\n  int result;\n  undefined8 error;\n  long **current;\n  long **previous;\n  long **next;\n  \n  previous = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      current = (long **)*previous;\n      if (current == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous = (long **)0x0;\n    }\n    else {\n      match = DAT_001278e0[1];\n      if (*(char *)match == '!') {\n        result = fnmatch((char *)((long)match + 1),(char *)entry,0);\n        current = previous;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)match,(char *)entry,0);\n      if (result != 0) goto LAB_001141e5;\n      current = (long **)*previous;\n      if (current == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)current + 0x14)) != 0) {\n      match = current[1];\n      if (*(char *)match == '!') {\n        result = fnmatch((char *)((long)match + 1),(char *)entry,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(current + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)match,(char *)entry,0);\n        if ((previous == (long **)0x0) && (result == 0)) {\n          next = (long **)*current;\n          previous = current;\n          if (next == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next = (long **)*current;\n    current = previous;\n    if (next != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)DAT_001278e0[1],(char *)entry);\n    if (result == 0) {\nLAB_001143cd:\n      value = *(uint *)((long)previous + 0x14);\n      if ((((value & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((value & 2) != 0)))) {\n        error = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(error,entry);\n      }\n      if ((((value & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        error = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(error,entry);\n      }\n      if ((((value & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)previous + 0x14) = value | options;\n        return previous;\n      }\n      error = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(error,entry);\n    }\n    previous = (long **)*previous;\n    if (previous == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)previous[1],(char *)entry);\n    if (result == 0) goto LAB_001143cd;\n    next = (long **)*previous;\n    current = (long **)0x0;\n    if (next == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous = current;\n      if (flag == '\\0') {\n        while (current = next, currentParent = previous, next = current,\n              (options & *(uint *)((long)current + 0x14)) != 0) {\n          match = current[1];\n          if (*(char *)match == '!') {\n            result = fnmatch((char *)((long)match + 1),(char *)entry,0);\n            if (result == 0) goto LAB_0011438e;\n            next = (long **)*current;\n            if ((long **)*current == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)match,(char *)entry,0);\n            if ((previous == (long **)0x0) && (result == 0)) {\n              previous = current;\n              next = (long **)*current;\n              if ((long **)*current == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next = (long **)*current;\n              if ((long **)*current == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)next[1],(char *)entry);\n        currentParent = current;\n        previous = next;\n        if (result == 0) goto LAB_001143cd;\n      }\n      current = currentParent;\n      next = (long **)*next;\n      previous = current;\n    } while (next != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current + 3) = (undefined  [16])0x0;\n      *(undefined *)(current + 2) = 0;\n      *(uint *)((long)current + 0x14) = options;\n      current[5] = (long *)0x0;\n      previous = current;\n      *current = (long *)DAT_001278e0;\n      DAT_001278e0 = previous;\n      current[1] = entry;\n      return current;\n    }\n  }\nLAB_00114212:\n  if (previous == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous + 2) = 1;\n  return previous;\n}\n\n",
            "called": [
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00114c20",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "find_and_modify_entry_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_build_attributes_00116490",
                "param_1": "param",
                "param_2": "note_size",
                "param_3": "notes",
                "param_4": "notes_size",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "condition",
                "puVar5": "ptr",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "var8",
                "in_RAX": "note_type",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "memory",
                "uVar13": "var13",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "puVar14": "array_ptr",
                "puVar15": "data_ptr",
                "cVar16": "char_value",
                "puVar17": "buffer_ptr",
                "puVar18": "buffer_ptr2",
                "in_R11": "description_length",
                "unaff_R12": "attributes_ptr",
                "puVar19": "data_ptr2",
                "unaff_R13": "description_size",
                "__nmemb": "num_elements",
                "unaff_R14": "message_ptr",
                "puVar20": "array_ptr2",
                "bVar21": "byte_value",
                "iVar22": "loop_index",
                "unaff_retaddr": "return_address",
                "param_7": "buffer",
                "param_8": "flag",
                "param_9": "note_address",
                "in_stack_00000020": "note_size2",
                "in_stack_00000028": "memory_ptr",
                "in_stack_00000030": "buffer_ptr3",
                "in_stack_00000038": "flag1",
                "in_stack_00000040": "flag2",
                "in_stack_00000048": "message_ptr2"
            },
            "code": "\nulong extract_build_attributes_00116490(undefined8 param,ulong note_size,ulong notes,long notes_size)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool condition;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 var8;\n  ulong note_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *memory;\n  ulong var13;\n  ulong rbx;\n  ulong rbp;\n  ulong *array_ptr;\n  undefined *data_ptr;\n  char char_value;\n  undefined *buffer_ptr;\n  undefined *buffer_ptr2;\n  ulong description_length;\n  ulong *attributes_ptr;\n  ulong *data_ptr2;\n  ulong description_size;\n  size_t num_elements;\n  undefined8 *message_ptr;\n  ulong *array_ptr2;\n  byte byte_value;\n  int loop_index;\n  ulong return_address;\n  ulong buffer;\n  uint flag;\n  ulong note_address;\n  ulong note_size2;\n  ulong *memory_ptr;\n  undefined *buffer_ptr3;\n  uint flag1;\n  uint flag2;\n  undefined8 *message_ptr2;\n  \n  byte_value = 0;\ncode_r0x00116490:\n  length = notes_size;\n  var10 = rbp;\n  var13 = description_size;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      attributes_ptr[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = description_size;\n      var13 = description_size;\n      return_address = var11;\n    }\n    else {\n      attributes_ptr[7] = note_address;\nLAB_0011669e:\n      var10 = rbp;\n      var9 = rbp;\n    }\nLAB_001164bb:\n    attributes_ptr[8] = var9;\n    if (*(char *)((attributes_ptr[3] - 1) + notes) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    data_ptr2 = attributes_ptr + 9;\n    if (0xb < rbx) {\n      var9 = (**(code **)(message_ptr[1] + 0x40))(length);\n      *data_ptr2 = var9;\n      var9 = (**(code **)(message_ptr[1] + 0x40))(length + 4);\n      attributes_ptr[10] = var9;\n      note_size = (**(code **)(message_ptr[1] + 0x40))(length + 8);\n      notes = *data_ptr2;\n      attributes_ptr[0xb] = note_size;\n      note_type = attributes_ptr[10];\n      var9 = notes + 3 & 0xfffffffffffffffc;\n      attributes_ptr[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (rbx < var11) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (notes < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      attributes_ptr[0xc] = length + 0xc;\n      description_length = length + 0xc + var9;\n      attributes_ptr[0xd] = description_length;\n      rbx = rbx + (-0xc - (var9 + note_type));\n      notes_size = length + var11;\n      rbp = var10;\n      attributes_ptr = data_ptr2;\n      description_size = var13;\n      if (notes != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            var10 = extract_build_attributes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < notes) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            var10 = extract_build_attributes_00116490();\n            return var10;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            var10 = extract_build_attributes_00116490();\n            return var10;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (rbx != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag1 | flag2 | flag) == 0) {\n      var1 = *message_ptr;\n      var2 = *message_ptr2;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      num_elements = ((long)data_ptr2 - (long)memory_ptr >> 3) * -0x71c71c71c71c71c7;\n      qsort(memory_ptr,num_elements,0x48,compare_memory_0011a1b0);\n      for (array_ptr = memory_ptr; array_ptr < data_ptr2; array_ptr = array_ptr + 9) {\n        var10 = array_ptr[2];\n        if (var10 != 0) {\n          var13 = array_ptr[7];\n          var9 = array_ptr[8];\n          array_ptr2 = array_ptr;\n          loop_index = 0;\n          if (var13 == var9) {\n            array_ptr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = array_ptr2;\n                array_ptr2 = ptr + -9;\n                if (array_ptr2 < memory_ptr) goto LAB_001167f5;\n                var11 = ptr[-7];\n              } while (var11 == 0);\n              if ((*array_ptr2 != *array_ptr) ||\n                 (index = memcmp((void *)ptr[-6],(void *)array_ptr[3],*array_ptr), index != 0))\n              break;\n              var3 = ptr[-2];\n              var12 = ptr[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  array_ptr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  array_ptr[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_data_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr[-1] = var12;\n                  ptr[-2] = var13;\n                  array_ptr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_data_00116852:\n              condition = loop_index < 0x11;\n              loop_index = loop_index + 1;\n            } while (condition);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(memory_ptr,num_elements,0x48,compare_params_0011a250);\n      memory = (undefined *)xmalloc(note_size2 * 2);\n      buffer = 0;\n      note_address = 0;\n      buffer_ptr2 = memory;\n      for (array_ptr = memory_ptr; array_ptr < data_ptr2; array_ptr = array_ptr + 9) {\n        if (array_ptr[2] != 0) {\n          buffer_ptr = buffer_ptr2 + 4;\n          data_ptr = buffer_ptr2 + 0xc;\n          if ((array_ptr[7] == note_address) && (array_ptr[8] == buffer)) {\n            (**(code **)(message_ptr[1] + 0x50))(*array_ptr,buffer_ptr2);\n            (**(code **)(message_ptr[1] + 0x50))(0,buffer_ptr);\n            (**(code **)(message_ptr[1] + 0x50))(array_ptr[2],buffer_ptr2 + 8);\n            var13 = array_ptr[6];\n            var10 = *array_ptr;\n            buffer_ptr2 = (undefined *)array_ptr[3];\n            buffer_ptr = data_ptr;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *buffer_ptr = *buffer_ptr2;\n              buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n              buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *buffer_ptr = 0;\n                buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n              }\n            }\n            buffer_ptr2 = data_ptr + var13;\n          }\n          else {\n            (**(code **)(message_ptr[1] + 0x50))();\n            if (*(int *)(message_ptr[1] + 8) == 5) {\n              char_value = (*(char *)(message_ptr[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_value = '\\b';\n            }\n            (**(code **)(message_ptr[1] + 0x50))(char_value,buffer_ptr);\n            (**(code **)(message_ptr[1] + 0x50))(array_ptr[2],buffer_ptr2 + 8);\n            var10 = *array_ptr;\n            buffer_ptr2 = (undefined *)array_ptr[3];\n            buffer_ptr = data_ptr;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *buffer_ptr = *buffer_ptr2;\n              buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n              buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n            }\n            var13 = array_ptr[6];\n            if (var10 < var13) {\n              for (length = var13 - var10; length != 0; length = length + -1) {\n                *buffer_ptr = 0;\n                buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n              }\n            }\n            length = message_ptr[1];\n            data_ptr = data_ptr + var13;\n            buffer_ptr2 = data_ptr + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(message_ptr[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(array_ptr[7],data_ptr);\n              (**(code **)(message_ptr[1] + 0x38))(array_ptr[8],buffer_ptr2);\n              buffer_ptr2 = data_ptr + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(array_ptr[7],data_ptr);\n              (**(code **)(message_ptr[1] + 0x50))(array_ptr[8],data_ptr + 4);\n            }\n            note_address = array_ptr[7];\n            buffer = array_ptr[8];\n          }\n        }\n      }\n      var13 = (long)buffer_ptr2 - (long)memory;\n      var10 = var13;\n      buffer_ptr2 = memory;\n      if (var13 < note_size2) {\n        for (; note_size2 = var13, var10 != 0; var10 = var10 - 1) {\n          *buffer_ptr3 = *buffer_ptr2;\n          buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n          buffer_ptr3 = buffer_ptr3 + (ulong)byte_value * -2 + 1;\n        }\n      }\n      free(memory);\nLAB_001166f8:\n      free(memory_ptr);\n      return note_size2;\n    }\n    if (((flag2 | flag) == 0) || (flag1 == 0)) {\n      if (flag2 == 0) {\n        if (flag != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(message_ptr[1] + 0x28))(description_length);\n      var9 = (**(code **)(message_ptr[1] + 0x28))(attributes_ptr[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (attributes_ptr[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        notes = *attributes_ptr;\n        attributes_ptr[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = note_address;\n        }\n        notes = *attributes_ptr;\n        attributes_ptr[7] = var11;\n        var10 = var9;\n        note_address = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(message_ptr[1] + 0x40))(description_length);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        var10 = extract_build_attributes_001086af();\n        return var10;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,message_ptr,message_ptr2,length);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_data_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_data_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_params_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetId = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_debugging_function_0010be1a",
                "param_1": "functionData",
                "param_2": "newFunction",
                "param_3": "undefinedParam1",
                "param_4": "undefinedParam2",
                "lVar1": "blockPtr",
                "uVar2": "localizedErrorMessage",
                "pcVar3": "errorMessage"
            },
            "code": "\n\n\nundefined  [16] endDebuggingFunction_0010be1a(long functionData,undefined8 newFunction,undefined8 undefinedParam1,undefined8 undefinedParam2)\n\n{\n  long blockPtr;\n  undefined8 localizedErrorMessage;\n  char *errorMessage;\n  undefined auVar4 [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockPtr = *(long *)(functionData + 0x20), blockPtr == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockPtr + 8) == 0) {\n      *(undefined8 *)(blockPtr + 0x20) = newFunction;\n      localizedErrorMessage = CONCAT71((int7)((ulong)blockPtr >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  localizedErrorMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",localizedErrorMessage);\n  localizedErrorMessage = 0;\nLAB_0010be86:\n  auVar4._8_8_ = undefinedParam2;\n  auVar4._0_8_ = localizedErrorMessage;\n  return auVar4;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_debugging_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "byte_count",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "memory_ptr",
                "lVar2": "loop_counter",
                "puVar3": "ptr",
                "bVar4": "byte_index",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] initialize_memory_00113da9(byte byte_count,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *memory_ptr;\n  long loop_counter;\n  undefined8 *ptr;\n  byte byte_index;\n  undefined output [16];\n  \n  byte_index = 0;\n  output._0_8_ = initialize_memory_00113da9_00112904(8 - (uint)byte_count);\n  if (output._0_8_ != 0) {\n    memory_ptr = (undefined8 *)xmalloc(0x28);\n    ptr = memory_ptr + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)ptr = 0;\n      ptr = (undefined8 *)((long)ptr + (ulong)byte_index * -8 + 4);\n    }\n    *memory_ptr = arg3;\n    *(undefined8 **)(output._0_8_ + 0x10) = memory_ptr;\n  }\n  output._8_8_ = arg4;\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_params_0011a250",
                "param_1": "data_1",
                "param_2": "data_2",
                "uVar1": "value_1"
            },
            "code": "\nint compare_params_0011a250(ulong *data_1,ulong *data_2)\n\n{\n  ulong value_1;\n  \n  value_1 = data_1[2];\n  if (value_1 == data_2[2]) {\n    if (data_2[7] <= data_1[7]) {\n      if (data_1[7] <= data_2[7]) {\n        if (data_2[8] < data_1[8]) {\n          return -1;\n        }\n        if (data_2[8] <= data_1[8]) {\n          if ((4 < *data_1) && (4 < *data_2)) {\n            if (*(char *)(data_1[3] + 3) != *(char *)(data_2[3] + 3)) {\n              return (int)*(char *)(data_1[3] + 3) - (int)*(char *)(data_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((value_1 == 0) || ((value_1 != 0x100 && (data_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_params_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "indicator",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "expandedSize",
                "sVar3": "length",
                "uVar4": "allocatedMemory",
                "uVar5": "isExpanded",
                "local_60": "outputString"
            },
            "code": "\nundefined4 processData_0010a69a(long dataPointer,undefined8 param2,int flag,char indicator,uint value)\n\n{\n  undefined4 result;\n  long expandedSize;\n  size_t length;\n  undefined8 allocatedMemory;\n  undefined isExpanded;\n  char outputString [48];\n  \n  if (flag == 0) {\n    outputString[0] = '\\0';\n    isExpanded = 0;\n    expandedSize = 0;\n  }\n  else {\n    expandedSize = expand_and_copy_00109c2e();\n    if (expandedSize < 0) {\n      return 0;\n    }\n    isExpanded = 1;\n    sprintf(outputString,\"%ld=\",expandedSize);\n  }\n  length = strlen(outputString);\n  sprintf(outputString + length,\"%c%u\",(ulong)((-(uint)(indicator == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_00109b52(dataPointer,outputString,expandedSize,isExpanded,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  expandedSize = *(long *)(dataPointer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(expandedSize + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(dataPointer + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "strlen",
                "xmalloc",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "section_cmp_result",
                "iVar3": "section_type",
                "lVar4": "section_match_remove",
                "lVar5": "section_match_copy",
                "uVar6": "error_message",
                "plVar7": "section_list"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int section_cmp_result;\n  int section_type;\n  long section_match_remove;\n  long section_match_copy;\n  undefined8 error_message;\n  long *section_list;\n  \n  section_match_remove = find_and_modify_entry_00114190(*section_names,0,4);\n  if (section_match_remove == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      section_match_remove = find_and_modify_entry_00114190(*section_names,0,1);\n      section_match_copy = find_and_modify_entry_00114190(*section_names,0,2);\n      if (section_match_remove != 0) {\n        if (section_match_copy != 0) {\n          current_section = *section_names;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(error_message,current_section);\n        }\n        if (section_match_remove != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279b8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(error_message,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (section_match_copy == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_names;\n        section_cmp_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((section_cmp_result != 0) && (section_cmp_result = strcmp(current_section,\".gnu_debuglink\"), section_cmp_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          error_message = process_unaff_ebp_0010829e();\n          return error_message;\n        }\n      }\n      if (section_type == 5) {\n        error_message = check_and_compare_string_suffix_00113ede(section_names);\n        return error_message;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      error_message = check_and_invert_string_suffix_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00119dd0",
                "dcgettext",
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "param_1": "config",
                "param_2": "base_address",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_value",
                "lVar3": "symbol1",
                "lVar4": "symbol2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "reloc_count",
                "__ptr": "reloc_buffer",
                "lVar7": "canonicalized_count",
                "extraout_RAX": "exit_status",
                "lVar8": "index",
                "uStack_28": "empty_result"
            },
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *config,long base_address)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long symbol1;\n  long symbol2;\n  int error_code;\n  undefined8 result;\n  long reloc_count;\n  void *reloc_buffer;\n  long canonicalized_count;\n  undefined8 exit_status;\n  long index;\n  undefined8 empty_result;\n  \n  if (*(long *)(base_address + 0x60) == 0) {\n    return result;\n  }\n  reloc_count = bfd_get_reloc_upper_bound();\n  if (reloc_count < 0) {\n    if ((reloc_count != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_0011a110(*config);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_count != 0) {\n    reloc_buffer = (void *)xmalloc();\n    canonicalized_count = bfd_canonicalize_reloc(config,base_address,reloc_buffer);\n    symbol2 = _DAT_00128680;\n    symbol1 = _DAT_00128568;\n    reloc_count = _fwrite;\n    if (canonicalized_count < 0) {\n      print_error_0011a110(*config);\n                    \n      xexit(1);\n    }\n    if (canonicalized_count != 0) {\n      index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != reloc_count)) &&\n           ((reloc_value != symbol2 && (reloc_value != symbol1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (canonicalized_count != index);\n    }\n    free(reloc_buffer);\n    return exit_status;\n  }\n  return empty_result;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "fwrite",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_001083b7",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocation_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_and_compare_string_suffix_00113ede",
                "param_1": "input_strings",
                "__s": "input_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_and_compare_string_suffix_00113ede(char **input_strings)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_strings == (char **)0x0) {\n    return 0;\n  }\n  input_string = *input_strings;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      result = string_comparison_00113fb0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_compare_string_suffix_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Value",
                "lVar2": "record2Value",
                "iVar3": "result",
                "uVar4": "mask"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Value;\n  long record2Value;\n  int result;\n  uint mask;\n  \n  record1Value = *record1;\n  record2Value = *record2;\n  mask = *(uint *)(record2Value + 0x24) & 0x102;\n  if ((*(uint *)(record1Value + 0x24) & 0x102) == 0x102) {\n    if (mask != 0x102) {\n      return 1;\n    }\n  }\n  else if (mask == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Value + 0x38) <= *(ulong *)(record2Value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Value + 0x38) <= *(ulong *)(record1Value + 0x38)) {\n      if (*(ulong *)(record2Value + 0x40) < *(ulong *)(record1Value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Value + 0x40) <= *(ulong *)(record1Value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Value + 0x18) <= *(uint *)(record2Value + 0x18)) {\n            return -(uint)(*(uint *)(record1Value + 0x18) < *(uint *)(record2Value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_data_0010c892",
                "param_1": "param",
                "param_2": "data",
                "cVar1": "result",
                "lVar2": "memoryPtr",
                "lVar3": "tag",
                "uVar4": "returnValue",
                "puVar5": "ptr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugData_0010c892(undefined8 param,long data)\n\n{\n  char result;\n  long memoryPtr;\n  long tag;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  int kind;\n  \n  if (*(char *)(data + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(data + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      kind = *(int *)(ptr + 2);\n      tag = ptr[1];\n      if (kind != 0) {\n        if (tag != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tag == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      memoryPtr = initialize_memory_00112904(kind,0);\n      if (memoryPtr == 0) goto LAB_0010c910;\n      tag = parse_debug_tag_0010c6be(param,tag,memoryPtr);\n      ptr[3] = tag;\n      if (tag == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = deallocate_memory_0010c1c6();\n    if (result != '\\0') {\n      result = end_debugging_function_0010be1a(param,*(undefined8 *)(data + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(data + 0x60) = 0;\n        *(undefined8 *)(data + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryBlock"
            },
            "code": "\nvoid initializeMemory_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *memoryBlock;\n  \n  memoryBlock = (undefined4 *)xmalloc(0x18);\n  *memoryBlock = input1;\n  memoryBlock[1] = input2;\n  *(undefined (*) [16])(memoryBlock + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00113e23",
                "FUN_00113b71",
                "FUN_00113b4a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "unusedVariable",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 unusedVariable;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = unusedVariable;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0010922b",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010914e",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_00115b70",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_callbacks_0011a390",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "callbackList",
                "uVar5": "count"
            },
            "code": "\nvoid executeCallbacks_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *callbackList;\n  uint count;\n  \n  callbackList = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(callbackList + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)callbackList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)callbackList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)callbackList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)callbackList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)callbackList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)callbackList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)callbackList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)callbackList[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)callbackList[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)callbackList[tempIndex + 1])();\n            (*(code *)callbackList[tempIndex])();\n            (*(code *)callbackList[index])();\n            (*(code *)callbackList[tempIndex + -2])();\n            (*(code *)callbackList[tempIndex + -3])();\n            (*(code *)callbackList[tempIndex + -4])();\n            (*(code *)callbackList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      callbackList = (long *)*callbackList;\n    } while (callbackList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_callbacks_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "process_and_format_string_0010e842",
                "param_1": "input_value",
                "param_2": "input_string",
                "param_3": "iteration_count",
                "param_4": "output_value",
                "sVar1": "string_length",
                "__s": "formatted_string",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] process_and_format_string_0010e842(undefined8 input_value,char *input_string,undefined8 iteration_count,undefined8 output_value)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,iteration_count);\n  result._0_4_ = process_string_0010e2f0(input_value,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output_value;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_memory_00113cb9",
                "param_1": "inputParam",
                "lVar1": "memoryPtr"
            },
            "code": "\nlong initializeMemory_00113cb9(long inputParam)\n\n{\n  long memoryPtr;\n  \n  if (inputParam != 0) {\n    memoryPtr = initialize_memory_00112904(0xe,0);\n    if (memoryPtr == 0) {\n      memoryPtr = 0;\n    }\n    else {\n      *(long *)(memoryPtr + 0x10) = inputParam;\n    }\n    return memoryPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "dataStruct",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "extractedPointer",
                "sVar2": "inputStringLength",
                "sVar3": "extractedStringLength",
                "__s_00": "mergedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processData_0010eafe(long dataStruct,char *inputString,char flag)\n\n{\n  undefined4 result;\n  char *extractedPointer;\n  size_t inputStringLength;\n  size_t extractedStringLength;\n  char *mergedString;\n  \n  if ((*(int *)(dataStruct + 0x1f8) == 0) && (*(long *)(dataStruct + 0x1e8) == -1)) {\n    extractedPointer = (char *)extract_pointers_00109b2f();\n    inputStringLength = strlen(inputString);\n    extractedStringLength = strlen(extractedPointer);\n    mergedString = (char *)xmalloc(inputStringLength + 3 + extractedStringLength);\n    sprintf(mergedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extractedPointer);\n    *(undefined8 *)(dataStruct + 0x1e8) = *(undefined8 *)(dataStruct + 0x10);\n    result = process_string_0010e2f0(dataStruct,0x24,0,0,mergedString);\n    if ((char)result != '\\0') {\n      free(mergedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_memory_00113df2",
                "param_1": "memory_size"
            },
            "code": "\nvoid initialize_memory_00113df2(undefined4 memory_size)\n\n{\n  initialize_memory_00113df2_00112904(4,memory_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "reverse_and_initialize_data_0010a377",
                "param_1": "input_param",
                "cVar1": "first_char_flag",
                "__s": "pointer_1",
                "__s_00": "pointer_2",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "__s_01": "result_string",
                "uVar5": "flag",
                "uVar2": "result"
            },
            "code": "\nundefined4 reverse_and_initialize_data_0010a377(long input_param)\n\n{\n  char first_char_flag;\n  undefined4 result;\n  char *pointer_1;\n  char *pointer_2;\n  size_t length_1;\n  size_t length_2;\n  char *result_string;\n  undefined flag;\n  \n  flag = 1;\n  first_char_flag = *(char *)(*(long *)(input_param + 0x60) + 0x1c);\n  pointer_1 = (char *)extract_pointers_00109b2f();\n  if (first_char_flag == '\\0') {\n    flag = *(undefined *)(*(long *)(input_param + 0x60) + 0x1c);\n  }\n  pointer_2 = (char *)extract_pointers_00109b2f(input_param);\n  length_1 = strlen(pointer_1);\n  length_2 = strlen(pointer_2);\n  result_string = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(result_string,\"@%s,%s\",pointer_2,pointer_1);\n  free(pointer_2);\n  free(pointer_1);\n  result = initialize_data_00109b52(input_param,result_string,0,flag,0);\n  if ((char)result != '\\0') {\n    free(result_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_initialize_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "param_1": "input_data",
                "param_2": "input_strings",
                "param_3": "output_buffer",
                "param_4": "error_flag",
                "iVar1": "iteration_counter",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "updated_string",
                "uVar6": "converted_value",
                "bVar7": "bool_flag",
                "local_50": "string_index",
                "local_4c": "constant_value",
                "local_48": "number_value",
                "local_44": "decrement_counter",
                "local_40": "temporary_buffer"
            },
            "code": "\nundefined8 process_data_0010d882(long input_data,char **input_strings,long *output_buffer,undefined *error_flag)\n\n{\n  int iteration_counter;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *updated_string;\n  ulong converted_value;\n  bool bool_flag;\n  uint string_index;\n  undefined4 constant_value;\n  uint number_value;\n  int decrement_counter;\n  undefined8 temporary_buffer [2];\n  \n  current_string = *input_strings;\n  constant_value = 10;\n  if (output_buffer != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_buffer = allocated_memory;\n    *error_flag = 0;\n  }\n  string_index = 0;\n  while( true ) {\n    updated_string = *input_strings;\n    current_char = *updated_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_strings = updated_string + 1;\n      if (current_char == 'T') {\n        decrement_counter = 1;\n      }\n      else {\n        current_char = parse_number_00108ea1(input_strings,&decrement_counter);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_number_00108ea1(input_strings,&number_value);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= number_value)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_string);\n        return 0;\n      }\n      converted_value = (ulong)number_value;\n      while (iteration_counter = decrement_counter + -1, bool_flag = decrement_counter != 0, decrement_counter = iteration_counter, bool_flag) {\n        temporary_buffer[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + converted_value * 0x10);\n        current_char = insert_and_resize_data_0010d7d4(input_data,temporary_buffer,output_buffer,&string_index,&constant_value);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = insert_and_resize_data_0010d7d4(input_data,input_strings,output_buffer,&string_index,&constant_value);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_buffer == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_buffer + (ulong)string_index * 8) = 0;\n    if (*updated_string != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  updated_string = updated_string + 1;\n  *input_strings = updated_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)updated_string >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010d7d4",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memory_ptr",
                "param_2": "param_value",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "ptr",
                "pauVar2": "memory",
                "lVar3": "counter",
                "puVar4": "ptr_temp",
                "bVar5": "flag"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memory_ptr) [16],undefined8 param_value,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *ptr;\n  undefined (*memory) [16];\n  long counter;\n  undefined4 *ptr_temp;\n  byte flag;\n  \n  flag = 0;\n  ptr = (undefined4 *)xmalloc(0x28);\n  ptr_temp = ptr;\n  for (counter = 10; counter != 0; counter = counter + -1) {\n    *ptr_temp = 0;\n    ptr_temp = ptr_temp + (ulong)flag * -2 + 1;\n  }\n  memory = *memory_ptr;\n  *(undefined8 *)(ptr + 2) = param_value;\n  ptr[5] = value1;\n  ptr[6] = value2;\n  if (memory == (undefined (*) [16])0x0) {\n    memory = (undefined (*) [16])xmalloc(0x10);\n    *memory = ZEXT816(0);\n    *memory_ptr = memory;\n    *(undefined (**) [16])(*memory + 8) = memory;\n  }\n  **(undefined8 **)(*memory + 8) = ptr;\n  *(undefined4 **)(*memory + 8) = ptr;\n  return ptr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_00112996",
                "FUN_0010c05d"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_record_line_0010bf86",
                "param_1": "record",
                "param_2": "recordLine",
                "param_3": "unit",
                "uVar1": "errorMsg",
                "puVar2": "ptrIndex",
                "uVar3": "loopIndex",
                "puVar4": "recordPtr",
                "lVar5": "index",
                "puVar6": "loopPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateRecordLine_0010bf86(long record,undefined8 recordLine,undefined8 unit)\n\n{\n  undefined8 errorMsg;\n  undefined8 *ptrIndex;\n  ulong loopIndex;\n  undefined4 *recordPtr;\n  long index;\n  undefined4 *loopPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    errorMsg = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMsg);\n    errorMsg = 0;\n  }\n  else {\n    index = *(long *)(record + 0x28);\n    if ((index != 0) && (*(long *)(index + 8) == *(long *)(record + 0x10))) {\n      loopIndex = 0;\n      do {\n        if (*(long *)(index + 0x10 + loopIndex * 8) == -1) {\n          ptrIndex = (undefined8 *)(loopIndex & 0xffffffff);\n          *(undefined8 *)(index + 0x10 + (long)ptrIndex * 8) = recordLine;\n          *(undefined8 *)(index + 0x60 + (long)ptrIndex * 8) = unit;\n          goto LAB_0010c056;\n        }\n        loopIndex = loopIndex + 1;\n      } while (loopIndex != 10);\n    }\n    recordPtr = (undefined4 *)xmalloc(0xb0);\n    loopPtr = recordPtr;\n    for (index = 0x2c; index != 0; index = index + -1) {\n      *loopPtr = 0;\n      loopPtr = loopPtr + (ulong)flag * -2 + 1;\n    }\n    errorMsg = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(recordPtr + 4) = recordLine;\n    *(undefined8 *)(recordPtr + 2) = errorMsg;\n    *(undefined8 *)(recordPtr + 0x18) = unit;\n    loopPtr = recordPtr + 6;\n    for (index = 0x48; index != 0; index = index + -1) {\n      *(undefined *)loopPtr = 0xff;\n      loopPtr = (undefined4 *)((long)loopPtr + (ulong)flag * -2 + 1);\n    }\n    ptrIndex = *(undefined8 **)(record + 0x28);\n    if (ptrIndex == (undefined8 *)0x0) {\n      ptrIndex = *(undefined8 **)(record + 8);\n      ptrIndex[2] = recordPtr;\n    }\n    else {\n      *ptrIndex = recordPtr;\n    }\n    *(undefined4 **)(record + 0x28) = recordPtr;\nLAB_0010c056:\n    errorMsg = CONCAT71((int7)((ulong)ptrIndex >> 8),1);\n  }\n  return errorMsg;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_record_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "inputString",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **inputString)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionPtr",
                "puVar1": "currentVarPtr",
                "uVar2": "errorMessage",
                "puVar3": "newStructPtr",
                "puVar4": "tempVarPtr",
                "lVar5": "tempLongVar",
                "puVar6": "currentStructPtr",
                "puVar7": "structPtrIterator",
                "bVar8": "tempByteVar"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionPtr,long param_2,long param_3,undefined4 param_4,undefined8 param_5)\n\n{\n  undefined8 *currentVarPtr;\n  undefined8 errorMessage;\n  undefined4 *newStructPtr;\n  undefined8 *tempVarPtr;\n  long tempLongVar;\n  undefined8 *currentStructPtr;\n  undefined4 *structPtrIterator;\n  byte tempByteVar;\n  \n  tempByteVar = 0;\n  if (param_2 == 0) {\n    return 0;\n  }\n  if (param_3 != 0) {\n    if ((*(long *)(functionPtr + 8) != 0) && (*(long *)(functionPtr + 0x18) != 0)) {\n      newStructPtr = (undefined4 *)xmalloc(0x28);\n      structPtrIterator = newStructPtr;\n      for (tempLongVar = 10; tempLongVar != 0; tempLongVar = tempLongVar + -1) {\n        *structPtrIterator = 0;\n        structPtrIterator = structPtrIterator + (ulong)tempByteVar * -2 + 1;\n      }\n      tempLongVar = *(long *)(functionPtr + 0x18);\n      *(long *)(newStructPtr + 2) = param_2;\n      *(long *)(newStructPtr + 4) = param_3;\n      newStructPtr[6] = param_4;\n      currentVarPtr = *(undefined8 **)(tempLongVar + 8);\n      *(undefined8 *)(newStructPtr + 8) = param_5;\n      currentStructPtr = (undefined8 *)(tempLongVar + 8);\n      while (tempVarPtr = currentVarPtr, tempVarPtr != (undefined8 *)0x0) {\n        currentStructPtr = tempVarPtr;\n        currentVarPtr = (undefined8 *)*tempVarPtr;\n      }\n      *currentStructPtr = newStructPtr;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archived_files_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "writeMode",
                "ppcVar6": "archiveBfd",
                "pcVar1": "result",
                "iVar2": "arch",
                "pcVar3": "error",
                "unaff_R15": "nextFile",
                "pcVar6": "filePath",
                "pcVar7": "name",
                "pcVar10": "copyError",
                "lVar12": "remainingSize",
                "lVar14": "writeSize",
                "pcVar15": "statError"
            },
            "code": "\nvoid extractAndCopyArchivedFiles_00104ea2(void)\n\n{\n  char cVar1;\n  int arch;\n  char **perror;\n  void *pvVar4;\n  long lVar5;\n  char **archiveBfd;\n  char *name;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *copyError;\n  undefined8 uVar11;\n  long remainingSize;\n  code *result3;\n  long writeSize;\n  int unaff_EBX;\n  stat *unaff_RBP;\n  char *statError;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *unaff_R13;\n  char **nextFile;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *param_7;\n  long *param_8;\n  char *param_9;\n  undefined8 *param_10;\n  undefined8 writeMode;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  archiveBfd = (char **)bfd_openw(archivePath,writeMode);\n  if (archiveBfd == (char **)0x0) {\nLAB_00104e80:\n    print_error_message_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(nextFile,archiveBfd,unaff_retaddr);\n    if (cVar1 == '\\0') {\n      arch = bfd_get_arch(nextFile);\n      if (arch == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(archiveBfd);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      print_error_message_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(archiveBfd);\n    archiveBfd = nextFile;\n    if (cVar1 == '\\0') {\n      print_error_message_001126c0(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (unaff_EBX == 0)) {\n      set_file_time_0011a350(archivePath,unaff_RBP);\n    }\n    remainingSize = bfd_openr(archivePath,writeMode);\n    unaff_R13[2] = remainingSize;\n    *param_8 = remainingSize;\n    param_8 = (long *)(remainingSize + 0xf0);\n    nextFile = (char **)bfd_openr_next_archived_file(param_10,archiveBfd);\n    bfd_close(archiveBfd);\n    while ((DAT_00127a20 == 0 && (nextFile != (char **)0x0))) {\n      copyError = *nextFile;\n      name = copyError;\n      if (*copyError == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_00119ed0(uVar11,copyError);\n        goto LAB_00104e93;\n      }\n      while (*name != '\\0') {\n        statError = name;\n        if ((*name == '.') && (statError = name + 1, name[1] == '.')) {\n          statError = name + 2;\n          if ((name[2] == '\\0') || (name[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*statError != '\\0' && (*statError != '/')); statError = statError + 1) {\n        }\n        name = statError;\n        if (*statError == '/') {\n          extract_and_copy_archived_files_001052a2();\n          return;\n        }\n      }\n      unaff_RBP = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(param_9,&DAT_0011b47d);\n      arch = stat(archivePath,unaff_RBP);\n      puVar8 = unaff_R13;\n      if (-1 < arch) {\n        remainingSize = create_temp_directory_0011a0e0(archivePath);\n        free(archivePath);\n        if (remainingSize == 0) {\n          piVar9 = __errno_location();\n          copyError = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_00119ed0(uVar11,copyError);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        copyError = *nextFile;\n        *puVar8 = unaff_R13;\n        puVar8[2] = 0;\n        puVar8[1] = remainingSize;\n        archivePath = (char *)concat(remainingSize,&DAT_0011b47d,copyError);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = unaff_RBP;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        archiveBfd = (char **)nextFile[0x1d];\n        if ((char **)nextFile[0x1d] == (char **)0x0) {\n          archiveBfd = nextFile;\n        }\n        unaff_EBX = (**(code **)(archiveBfd[1] + 0x1e8))(nextFile,unaff_RBP);\n        if (unaff_EBX != 0) {\n          copyError = *nextFile;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_00119ed0(uVar11,copyError);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = archivePath;\n      *unaff_R13 = puVar8;\n      unaff_R13[2] = 0;\n      cVar1 = bfd_check_format(nextFile,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archiveBfd = (char **)bfd_openw(archivePath,*(undefined8 *)nextFile[1]);\n        if (archiveBfd == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message_001126c0(0,nextFile,0,uVar11);\n      archiveBfd = (char **)bfd_openw(archivePath,writeMode);\n      if (archiveBfd == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      perror = (char **)nextFile[0x1d];\n      if ((char **)nextFile[0x1d] == (char **)0x0) {\n        perror = nextFile;\n      }\n      arch = (**(code **)(perror[1] + 0x1e8))(nextFile);\n      remainingSize = param_19;\n      if (arch == 0) {\n        if (param_19 < 0) {\n          construct_formatted_string_001125fa(nextFile);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_00119ed0(uVar11);\n        }\n        else {\n          arch = bfd_seek(nextFile,0,0);\n          if (arch == 0) {\n            if (DAT_001279c9 != '\\0') {\n              copyError = *archiveBfd;\n              uVar11 = construct_formatted_string_001125fa(nextFile);\n              name = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(name,uVar11,copyError);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingSize == 0) {\n                chmod(*archiveBfd,param_18 | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(archiveBfd);\n                archiveBfd = nextFile;\n                if (cVar1 == '\\0') {\n                  print_error_message_001126c0(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              writeSize = 0x2000;\n              if (remainingSize < 0x2001) {\n                writeSize = remainingSize;\n              }\n              lVar5 = bfd_bread(pvVar4,writeSize,nextFile);\n              perror = nextFile;\n              if ((writeSize != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,writeSize,archiveBfd), perror = archiveBfd, writeSize != lVar5))\n              break;\n              remainingSize = remainingSize - writeSize;\n            }\n            print_error_message_001126c0(0,perror,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = construct_formatted_string_001125fa(nextFile);\n            print_error_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        print_error_message_001126c0(0,nextFile,0,0);\n      }\n      cVar1 = bfd_close_all_done(archiveBfd);\n      if (cVar1 == '\\0') {\n        print_error_message_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *param_8 = 0;\n    pvVar4 = (void *)xstrdup(*param_7);\n    if (DAT_00127a20 == 0) {\n      result3 = bfd_close;\n    }\n    else {\n      result3 = bfd_close_all_done;\n    }\n    cVar1 = (*result3)(param_7);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*param_10);\n    cVar1 = bfd_close(param_10);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    puVar8 = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = puVar8;\n  }\n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "stat",
                "bfd_close",
                "xmalloc",
                "rmdir",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "bfd_seek",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "concat",
                "printf",
                "FUN_0011a0e0",
                "FUN_00114b84",
                "FUN_001052a2",
                "chmod",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_bread",
                "bfd_get_arch",
                "FUN_0011a110",
                "FUN_00104ea2",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "unlink",
                "free",
                "FUN_0011a350",
                "bfd_bwrite",
                "FUN_001125fa",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archived_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_001126c0",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_and_allocate_memory_00113ce0",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "lVar1": "memoryPointer",
                "plVar2": "dataPointer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitializeAndAllocateMemory_00113ce0(long inputValue1,long inputValue2,undefined inputValue3,undefined8 parameter4,undefined8 parameter5)\n\n{\n  long memoryPointer;\n  long *dataPointer;\n  undefined result [16];\n  \n  if (inputValue1 != 0) {\n    memoryPointer = initialize_memory_00112904(0xd,0);\n    if (memoryPointer != 0) {\n      dataPointer = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)dataPointer + 0x11) = 0;\n      *dataPointer = inputValue1;\n      *(undefined4 *)((long)dataPointer + 0x14) = 0;\n      dataPointer[1] = inputValue2;\n      *(undefined *)(dataPointer + 2) = inputValue3;\n      *(long **)(memoryPointer + 0x10) = dataPointer;\n      goto LAB_00113d2f;\n    }\n  }\n  memoryPointer = 0;\nLAB_00113d2f:\n  result._8_8_ = parameter5;\n  result._0_8_ = memoryPointer;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "currentPos",
                "unaff_R14": "maxPos",
                "iVar1": "errorFlag",
                "uVar2": "errorMessage",
                "uVar3": "translatedErrorMessage",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long currentPos;\n  long maxPos;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + currentPos),1,maxPos - currentPos,\n                  file);\n    errorFlag = ferror(file);\n    if (errorFlag != 0) {\n      translatedErrorMessage = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,translatedErrorMessage);\n    }\n    currentPos = currentPos + bytesRead;\n    errorFlag = feof(file);\n    if (errorFlag != 0) break;\n    if (currentPos == maxPos) {\n      maxPos = currentPos * 2;\n      translatedErrorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),maxPos);\n      *(undefined8 *)(buffer + 0x20) = translatedErrorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = currentPos;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "xrealloc",
                "dcgettext",
                "FUN_00114dc7",
                "fread",
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_data_00119f70",
                "uVar1": "result",
                "cVar2": "status",
                "iVar3": "counter",
                "uVar4": "header_endianness",
                "uVar5": "data_endianness",
                "lVar6": "allocated_size",
                "uVar7": "header_value",
                "lVar8": "realloc_ptr"
            },
            "code": "\nundefined4 process_data_00119f70(undefined8 *param_1,undefined8 *param_2)\n\n{\n  undefined4 result;\n  char status;\n  int counter;\n  undefined8 header_endianness;\n  undefined8 data_endianness;\n  char *__format;\n  long allocated_size;\n  undefined8 header_value;\n  long realloc_ptr;\n  \n  counter = *(int *)((long)param_2 + 0xc) + 1;\n  *(int *)((long)param_2 + 0xc) = counter;\n  if ((ulong)param_2[2] < (ulong)((long)counter * 0x60)) {\n    allocated_size = 0x3000;\n    if (0x3f < counter) {\n      allocated_size = (long)counter * 0xc0;\n    }\n    realloc_ptr = xrealloc(param_2[3]);\n    param_2[3] = realloc_ptr;\n    memset((void *)(realloc_ptr + param_2[2]),0,allocated_size - param_2[2]);\n    param_2[2] = allocated_size;\n  }\n  result = *(undefined4 *)((long)param_1 + 0xc);\n  *(undefined8 *)((long)*(int *)((long)param_2 + 0xc) * 0x60 + param_2[3] + -0x60) = *param_1;\n  header_endianness = determine_endianness_00114e00(result);\n  data_endianness = determine_endianness_00114e00(*(undefined4 *)(param_1 + 2));\n  header_value = *param_1;\n  __format = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(__format,header_value,data_endianness,header_endianness);\n  allocated_size = bfd_openw(*param_2,*param_1);\n  if (allocated_size == 0) {\n    print_error_0011a110(*param_2);\n    *(undefined4 *)(param_2 + 1) = 1;\n  }\n  else {\n    counter = 2;\n    status = bfd_set_format(allocated_size,1);\n    if (status == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        print_error_0011a110(*param_1);\n        *(undefined4 *)(param_2 + 1) = 1;\n      }\n    }\n    else {\n      do {\n        status = (**(code **)(*(long *)(allocated_size + 8) + 0x2a0))(allocated_size,counter,0);\n        if (status != '\\0') {\n          header_value = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)param_2 + 0xc) * 0x60 + param_2[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(allocated_size);\n  }\n  return *(undefined4 *)(param_2 + 1);\n}\n\n",
            "called": [
                "memset",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "xrealloc",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_get_error",
                "FUN_00114e00",
                "printf",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "fileStat",
                "_Var3": "sourceFileOffset",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "readResult",
                "piVar6": "errnoPointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int sourceFileDescriptor,char *destinationFilePath,long fileStat)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int readResult;\n  __off_t sourceFileOffset;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFileOffset = lseek(sourceFileDescriptor,0,0), sourceFileOffset == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesRead = close_file_and_report_error_00108237();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(sourceFileDescriptor,buffer,0x2000);\n      readResult = (int)bytesRead;\n      if (readResult < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(fileStat + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readResult != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)readResult);\n    } while (bytesWritten == (long)readResult);\n    errnoPointer = __errno_location();\n    readResult = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "close",
                "__errno_location",
                "open",
                "write",
                "fchmod",
                "FUN_00108237",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_set_attributes_00108200",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTime",
                "unaff_R13": "fileAttributes",
                "auVar3": "returnValues",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileAndSetAttributes_00108200(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldSetTime;\n  ulong fileAttributes;\n  undefined returnValues [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_00119ed0(errorMessage);\n  unlink(filePath);\n  if (shouldSetTime != '\\0') {\n    set_file_time_0011a350();\n  }\n  returnValues._0_8_ = fileAttributes & 0xffffffff;\n  returnValues._8_8_ = returnAddress;\n  return returnValues;\n}\n\n",
            "called": [
                "__errno_location",
                "unlink",
                "dcgettext",
                "FUN_0011a350",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_set_attributes_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 316502,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}