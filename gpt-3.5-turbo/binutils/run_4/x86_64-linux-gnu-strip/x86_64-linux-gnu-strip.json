{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "set_param_value_00113dfe",
                "param_1": "data_index",
                "param_2": "new_value",
                "lVar1": "data_ptr"
            },
            "code": "\nvoid set_param_value_00113dfe(undefined4 data_index,undefined new_value)\n\n{\n  long data_ptr;\n  \n  data_ptr = initialize_data_00112904(3,data_index);\n  if (data_ptr != 0) {\n    *(undefined *)(data_ptr + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "set_param_value_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "param",
                "param_4": "value",
                "uVar1": "structPointer",
                "lVar2": "structVar",
                "auVar3": "result",
                "sVar4": "prefixLength",
                "pcVar5": "stringPtr",
                "sVar6": "stringLength",
                "auVar7": "updatedResult"
            },
            "code": "\nundefined  [16] updateStringWithPrefix_0010ab4d(long data,char *prefix,undefined8 param,undefined8 value)\n\n{\n  ulong structPointer;\n  long structVar;\n  undefined result [16];\n  size_t prefixLength;\n  char *stringPtr;\n  size_t stringLength;\n  undefined updatedResult [16];\n  \n  structPointer = *(ulong *)(data + 0x60);\n  if ((structPointer != 0) && (*(long *)(structPointer + 0x20) != 0)) {\n    stringPtr = *(char **)(structPointer + 0x30);\n    prefixLength = strlen(prefix);\n    if (stringPtr == (char *)0x0) {\n      stringPtr = (char *)xmalloc(prefixLength + 3);\n      *stringPtr = '\\0';\n    }\n    else {\n      stringLength = strlen(stringPtr);\n      stringPtr = (char *)xrealloc(stringPtr,prefixLength + 4 + stringLength);\n    }\n    prefixLength = strlen(stringPtr);\n    sprintf(stringPtr + prefixLength,\"%s::\",prefix);\n    structVar = *(long *)(data + 0x60);\n    *(char **)(structVar + 0x30) = stringPtr;\n    updatedResult._1_7_ = (undefined7)((ulong)structVar >> 8);\n    updatedResult[0] = 1;\n    updatedResult._8_8_ = value;\n    return updatedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = structPointer;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_with_prefix_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_data_0010c218",
                "param_1": "file_data",
                "param_2": "type_size",
                "param_3": "name_type",
                "uVar1": "error_message",
                "lVar2": "data_handle",
                "pauVar3": "data_pointer",
                "lVar4": "memory_handle"
            },
            "code": "\n\n\nlong initialize_debug_data_0010c218(long file_data,long type_size,long name_type)\n\n{\n  undefined8 error_message;\n  long data_handle;\n  undefined (*data_pointer) [16];\n  long memory_handle;\n  \n  if ((type_size != 0) && (name_type != 0)) {\n    if ((*(long *)(file_data + 8) == 0) || (*(long *)(file_data + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      data_handle = initialize_data_00112904(0x16,0);\n      if (data_handle != 0) {\n        data_pointer = (undefined (*) [16])xmalloc(0x10);\n        memory_handle = *(long *)(file_data + 0x10);\n        *data_pointer = ZEXT816(0);\n        *(long *)(*data_pointer + 8) = name_type;\n        *(undefined (**) [16])(data_handle + 0x10) = data_pointer;\n        memory_handle = initialize_memory_00112925(memory_handle + 0x10,type_size,0,3);\n        if (memory_handle != 0) {\n          *(long *)(memory_handle + 0x20) = data_handle;\n          *(long *)*data_pointer = memory_handle;\n          return data_handle;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_debug_data_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = initialize_string_hash_table_00113f20();\n  DAT_00127a10 = initialize_string_hash_table_00113f20();\n  DAT_00127a28 = initialize_string_hash_table_00113f20();\n  DAT_00127a08 = initialize_string_hash_table_00113f20();\n  DAT_00127a00 = initialize_string_hash_table_00113f20();\n  DAT_001279f8 = initialize_string_hash_table_00113f20();\n  DAT_001279f0 = initialize_string_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278e8 = initialize_string_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = process_function_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = clean_up_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_message_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_and_compare_strings_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        process_function_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        process_function_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_copyright_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_message_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_binary_file_header_info_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_copyright_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_binary_header_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_binary_header_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_and_copy_archive_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_set_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = get_file_information_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    process_and_copy_archive_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_set_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_and_insert_symbol_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_and_insert_symbol_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = extract_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_message_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_message_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_and_compare_strings_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_function_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = extract_key_value_pair_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_function_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = extract_key_value_pair_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_function_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_and_insert_symbol_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_function_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_function_00114190(pcVar32,1,0x80);\n    uVar12 = extract_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_function_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = extract_key_value_pair_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "FUN_00114c20",
                "FUN_00119ed0",
                "FUN_00119970",
                "ftell",
                "FUN_00114690",
                "getc",
                "dcgettext",
                "FUN_001054af",
                "malloc",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00114d60",
                "filename_cmp",
                "FUN_00108d9a",
                "strerror",
                "FUN_00108898",
                "htab_find_slot",
                "FUN_00113fb0",
                "bfd_set_default_target",
                "xrealloc",
                "fread",
                "strchr",
                "FUN_00108800",
                "FUN_00119940",
                "memcpy",
                "free",
                "strcasecmp",
                "FUN_001199d0",
                "FUN_0011a480",
                "htab_elements",
                "xexit",
                "bfd_errmsg",
                "xmalloc",
                "bfd_get_error",
                "FUN_00114460",
                "FUN_00113f20",
                "fclose",
                "FUN_00113fe0",
                "textdomain",
                "bindtextdomain",
                "FUN_00115970",
                "fseek",
                "strlen",
                "strtoul",
                "FUN_00108c86",
                "strcpy",
                "strcmp",
                "bfd_set_error_program_name",
                "FUN_00114cf0",
                "close",
                "unlink_if_ordinary",
                "fprintf",
                "FUN_00114c80",
                "setlocale",
                "strncasecmp",
                "FUN_001126c0",
                "dup",
                "free",
                "memmove",
                "strncpy",
                "FUN_00114190",
                "xstrdup",
                "xmalloc_set_program_name",
                "FUN_0011a390",
                "getopt_long",
                "mkstemp",
                "FUN_00108916",
                "bfd_scan_arch",
                "fopen",
                "bfd_init",
                "FUN_00108a2a",
                "FUN_00119dd0",
                "xcalloc",
                "__errno_location",
                "strtol",
                "stat",
                "ferror"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPtr",
                "param_2": "debugPtr",
                "param_4": "blockFound",
                "puVar1": "prevBlockPtr",
                "uVar2": "result",
                "puVar3": "newBlockPtr",
                "puVar4": "nextBlockPtr",
                "puVar6": "currentBlockPtr",
                "puVar7": "tempBlockPtr",
                "bVar8": "count",
                "auVar9": "returnValue",
                "lVar5": "currentBlock"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPtr,undefined8 debugPtr,undefined8 param_3,undefined8 blockFound)\n\n{\n  undefined8 *prevBlockPtr;\n  undefined8 result;\n  undefined4 *newBlockPtr;\n  undefined8 *nextBlockPtr;\n  long currentBlock;\n  undefined8 *currentBlockPtr;\n  undefined4 *tempBlockPtr;\n  byte count;\n  undefined returnValue [16];\n  \n  count = 0;\n  if ((*(long *)(blockPtr + 8) == 0) || (*(long *)(blockPtr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlockPtr = (undefined4 *)xmalloc(0x30);\n    tempBlockPtr = newBlockPtr;\n    for (currentBlock = 0xc; currentBlock != 0; currentBlock = currentBlock + -1) {\n      *tempBlockPtr = 0;\n      tempBlockPtr = tempBlockPtr + (ulong)count * -2 + 1;\n    }\n    currentBlock = *(long *)(blockPtr + 0x20);\n    *(undefined8 *)(newBlockPtr + 6) = debugPtr;\n    *(undefined8 *)(newBlockPtr + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockPtr + 2) = currentBlock;\n    prevBlockPtr = *(undefined8 **)(currentBlock + 0x10);\n    currentBlockPtr = (undefined8 *)(currentBlock + 0x10);\n    while (nextBlockPtr = prevBlockPtr, nextBlockPtr != (undefined8 *)0x0) {\n      currentBlockPtr = nextBlockPtr;\n      prevBlockPtr = (undefined8 *)*nextBlockPtr;\n    }\n    *currentBlockPtr = newBlockPtr;\n    result = 1;\n    *(undefined4 **)(blockPtr + 0x20) = newBlockPtr;\n  }\n  returnValue._8_8_ = blockFound;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00115dc0",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "build_warning_message_0010ba08",
                "param_1": "parameters",
                "param_2": "field_name",
                "param_3": "field_size",
                "param_4": "num_fields",
                "param_5": "field_type",
                "cVar1": "flag",
                "iVar2": "field_num",
                "lVar3": "temp",
                "__s": "next_item",
                "sVar4": "source_length",
                "sVar5": "field_length",
                "sVar6": "item_length",
                "__s_00": "message",
                "uVar7": "warning_message",
                "uVar8": "result",
                "pcVar9": "flag_string"
            },
            "code": "\nundefined8\nbuild_warning_message_0010ba08(undefined8 *parameters,char *field_name,undefined8 field_size,ulong num_fields,int field_type)\n\n{\n  char flag;\n  int field_num;\n  long temp;\n  char *next_item;\n  size_t source_length;\n  size_t field_length;\n  size_t item_length;\n  char *message;\n  undefined8 warning_message;\n  undefined8 result;\n  char *flag_string;\n  \n  flag = *(char *)(parameters[0xc] + 0x1c);\n  field_num = *(int *)(parameters[0xc] + 0x18);\n  next_item = (char *)extract_next_item_00109b2f();\n  if (*(char **)(parameters[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    source_length = strlen(*(char **)(parameters[0xc] + 0x20));\n    field_length = strlen(field_name);\n    item_length = strlen(next_item);\n    message = (char *)xmalloc(source_length + 0x32 + field_length + item_length);\n    if (field_type == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((field_type != 2) && (flag_string = \"\", field_type != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((num_fields == 0) && (num_fields = (ulong)(uint)(field_num * 8), num_fields == 0)) {\n      result = *(undefined8 *)*parameters;\n      warning_message = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warning_message,result,field_name);\n    }\n    sprintf(message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(parameters[0xc] + 0x20),field_name,flag_string,next_item,\n            field_size,num_fields);\n    free(*(void **)(parameters[0xc] + 0x20));\n    temp = parameters[0xc];\n    *(char **)(temp + 0x20) = message;\n    if (flag != '\\0') {\n      *(undefined *)(temp + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)temp >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "abort",
                "xmalloc",
                "strlen",
                "dcgettext",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "build_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "input",
                "param_2": "value",
                "param_3": "character",
                "param_4": "flag",
                "cVar1": "flagValue",
                "lVar2": "data",
                "cVar3": "flagChar",
                "uVar4": "counter",
                "__s": "extractedString",
                "sVar5": "stringLength",
                "pcVar6": "newString",
                "lVar7": "reallocResult",
                "uVar8": "returnValue",
                "uVar9": "counterValue",
                "uVar10": "counterLimit"
            },
            "code": "\nundefined8 processData_0010aa53(long input,undefined8 value,char character,int flag)\n\n{\n  char flagValue;\n  long data;\n  char flagChar;\n  uint counter;\n  char *extractedString;\n  size_t stringLength;\n  char *newString;\n  long reallocResult;\n  undefined8 returnValue;\n  ulong counterValue;\n  ulong counterLimit;\n  \n  flagValue = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  extractedString = (char *)extract_next_item_00109b2f();\n  stringLength = strlen(extractedString);\n  newString = (char *)xmalloc(stringLength + 0x19);\n  *newString = character + '0';\n  if (flag == 1) {\n    flagChar = '1';\n  }\n  else {\n    flagChar = '0';\n    if ((flag != 2) && (flagChar = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = flagChar;\n  sprintf(newString + 2,\"%ld,%s;\",value);\n  free(extractedString);\n  data = *(long *)(input + 0x60);\n  returnValue = 0;\n  if ((data != 0) && (*(long *)(data + 0x20) != 0)) {\n    data = *(long *)(data + 0x28);\n    counterLimit = 0;\n    if (data != 0) {\n      counter = 0;\n      do {\n        counterValue = (ulong)counter;\n        counterLimit = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(data + counterValue * 8) != 0);\n    }\n    reallocResult = xrealloc(data,(ulong)((int)counterLimit + 2) << 3);\n    *(char **)(reallocResult + counterLimit * 8) = newString;\n    *(undefined8 *)(reallocResult + (ulong)((int)counterLimit + 1) * 8) = 0;\n    data = *(long *)(input + 0x60);\n    *(long *)(data + 0x28) = reallocResult;\n    if (flagValue != '\\0') {\n      *(undefined *)(data + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "analyze_debug_records_0011173a",
                "param_1": "file_handle",
                "param_2": "debug_info",
                "param_3": "record_type",
                "param_4": "block_level",
                "param_5": "file_offset",
                "param_6": "record_data",
                "cVar1": "char_var_1",
                "bVar2": "byte_var_2",
                "__ptr": "pointer",
                "cVar3": "char_var_3",
                "uVar4": "undefined_var",
                "iVar5": "int_var_1",
                "puVar6": "pointer_var_1",
                "plVar7": "long_var_1",
                "pcVar8": "char_pointer_1",
                "uVar9": "undefined_var_2",
                "lVar10": "long_var_2",
                "lVar11": "long_var_3",
                "lVar12": "long_var_4",
                "pplVar13": "long_double_pointer_1",
                "uVar14": "ulong_var_1",
                "uVar15": "ulong_var_2",
                "pcVar16": "char_pointer_2",
                "uVar17": "uint_var_1",
                "dVar19": "double_var",
                "local_48": "local_char_pointer_1",
                "local_40": "local_long_double_pointer_1"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined analyze_debug_records_0011173a(undefined8 file_handle,long *debug_info,int record_type,int block_level,ulong file_offset,\n                      char *record_data)\n\n{\n  char char_var_1;\n  byte byte_var_2;\n  void *pointer;\n  char char_var_3;\n  undefined undefined_var;\n  int int_var_1;\n  undefined8 *pointer_var_1;\n  long *long_var_1;\n  char *char_pointer_1;\n  undefined8 undefined_var_2;\n  long long_var_2;\n  long long_var_3;\n  long long_var_4;\n  long **long_double_pointer_1;\n  ulong ulong_var_1;\n  ulong ulong_var_2;\n  char *char_pointer_2;\n  uint uint_var_1;\n  long **pplVar18;\n  double double_var;\n  char *local_char_pointer_1;\n  long **local_long_double_pointer_1 [2];\n  \n  if (debug_info[4] != 0) {\n    if (((record_type == 100) && (*record_data != '\\0')) && (debug_info[5] == file_offset)) goto LAB_00111a06;\n    char_var_3 = initialize_file_info_0010bbd3(file_handle);\n    if (char_var_3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debug_info + 0x44) = 0;\n    *(undefined4 *)(debug_info + 8) = 0;\n    debug_info[9] = debug_info[4];\n    if (*(char *)(debug_info + 1) == '\\0') {\n      debug_info[6] = debug_info[5];\n    }\n    *(undefined4 *)(debug_info + 0x10) = 1;\n    pointer_var_1 = (undefined8 *)xmalloc(8);\n    debug_info[0x11] = (long)pointer_var_1;\n    *pointer_var_1 = 0;\n    debug_info[4] = 0;\n  }\n  strlen(record_data);\n  if (record_type == 0x84) {\nLAB_00111ab7:\n    undefined_var = add_filename_to_debug_source_00108f08(file_handle,record_data);\n    return undefined_var;\n  }\n  if (record_type < 0x85) {\n    if (record_type == 0x3c) {\n      int_var_1 = strcmp(record_data,\"gcc2_compiled.\");\n      if (int_var_1 == 0) {\n        *(undefined4 *)(debug_info + 8) = 2;\n        return 1;\n      }\n      int_var_1 = strcmp(record_data,\"gcc_compiled.\");\n      if (int_var_1 == 0) {\n        *(undefined4 *)(debug_info + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debug_info + 0x44) = 1;\n      return 1;\n    }\n    if (record_type < 0x3d) {\n      if (record_type == 0x24) {\n        if (*record_data == '\\0') {\n          if (*(char *)(debug_info + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debug_info + 1) != '\\0') {\n            file_offset = file_offset + debug_info[7];\n          }\n          char_var_3 = cleanup_and_process_records_0010c1c6(file_handle,debug_info);\n          if (char_var_3 != '\\0') {\n            char_var_3 = validate_function_0010be1a(file_handle,file_offset);\n            if (char_var_3 != '\\0') {\n              *(undefined *)(debug_info + 0xc) = 0;\n              debug_info[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debug_info + 0xc) != '\\0') &&\n           ((file_offset < (ulong)debug_info[0xd] || (debug_info[0xd] == 0xffffffffffffffff)))) {\n          debug_info[0xd] = file_offset;\n        }\n      }\n      else if (record_type < 0x25) {\n        if (record_type == 0xc) {\n          return 1;\n        }\n        if (record_type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (record_type == 0x2a) {\n          return 1;\n        }\n        if (record_type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (record_type == 100) {\nLAB_00111a06:\n        if (*(char *)(debug_info + 0xc) != '\\0') {\n          ulong_var_1 = file_offset;\n          if (((*record_data != '\\0') && (ulong_var_2 = debug_info[0xd], ulong_var_2 != 0xffffffffffffffff)) &&\n             (ulong_var_1 = ulong_var_2, file_offset < ulong_var_2)) {\n            ulong_var_1 = file_offset;\n          }\n          char_var_3 = cleanup_and_process_records_0010c1c6(file_handle,debug_info);\n          if (char_var_3 == '\\0') {\n            return 0;\n          }\n          char_var_3 = validate_function_0010be1a(file_handle,ulong_var_1);\n          if (char_var_3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debug_info + 0xc) = 0;\n          debug_info[0xd] = -1;\n        }\n        if (*record_data == '\\0') {\n          return 1;\n        }\n        pointer = (void *)debug_info[4];\n        if (pointer == (void *)0x0) {\n          long_var_4 = xstrdup(record_data);\n          debug_info[4] = long_var_4;\n        }\n        else {\n          if (*record_data == '/') {\n            long_var_4 = xstrdup(record_data);\n          }\n          else {\n            long_var_4 = concat(pointer,record_data,0);\n          }\n          debug_info[4] = long_var_4;\n          free(pointer);\n        }\n        debug_info[5] = file_offset;\n        return 1;\n      }\n      if (record_type < 0x65) {\n        if (record_type == 0x44) {\n          long_var_4 = 0;\n          if (*(char *)(debug_info + 0xc) != '\\0') {\n            long_var_4 = debug_info[7];\n          }\n          undefined_var = record_debug_line_0010bf86(file_handle,(long)block_level,long_var_4 + file_offset);\n          return undefined_var;\n        }\n        if (record_type == 0x62) {\n          return 1;\n        }\n      }\n      else if (record_type == 0x82) {\n        long_var_1 = (long *)xmalloc();\n        int_var_1 = *(int *)(debug_info + 0x10);\n        long_var_2 = debug_info[10];\n        long_var_3 = debug_info[0xb];\n        long_var_1[5] = 0;\n        long_var_4 = debug_info[0x11];\n        *(int *)(long_var_1 + 4) = int_var_1;\n        uint_var_1 = int_var_1 + 1;\n        *(uint *)(debug_info + 0x10) = uint_var_1;\n        *long_var_1 = long_var_3;\n        long_var_1[1] = long_var_2;\n        long_var_1[2] = (long)record_data;\n        long_var_1[3] = file_offset;\n        debug_info[10] = (long)long_var_1;\n        debug_info[0xb] = (long)long_var_1;\n        long_var_4 = xrealloc(long_var_4,(ulong)uint_var_1 << 3);\n        uint_var_1 = *(uint *)(long_var_1 + 4);\n        debug_info[0x11] = long_var_4;\n        *(undefined8 *)(long_var_4 + (ulong)uint_var_1 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_pointer_1 = strchr(record_data,0x3a);\n    if ((char_pointer_1 != (char *)0x0) && ((char_pointer_1[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debug_info + 0xc) != '\\0') {\n        ulong_var_1 = debug_info[0xd];\n        ulong_var_2 = file_offset;\n        if ((ulong_var_1 != 0xffffffffffffffff) && (ulong_var_2 = ulong_var_1, file_offset < ulong_var_1)) {\n          ulong_var_2 = file_offset;\n        }\n        char_var_3 = cleanup_and_process_records_0010c1c6(file_handle,debug_info);\n        if (char_var_3 == '\\0') {\n          return 0;\n        }\n        char_var_3 = validate_function_0010be1a(file_handle,ulong_var_2);\n        if (char_var_3 == '\\0') {\n          return 0;\n        }\n        debug_info[0xd] = -1;\n      }\n      if (*(char *)(debug_info + 1) != '\\0') {\n        debug_info[7] = file_offset;\n      }\n      *(undefined *)(debug_info + 0xc) = 1;\n    }\n    local_char_pointer_1 = strchr(record_data,0x3a);\n    if (local_char_pointer_1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_pointer_1[1] == ':') goto code_r0x00111cc7;\n    if (*record_data == '$') {\n      char_var_3 = record_data[1];\n      char_pointer_2 = \"eh_throw\";\n      if (char_var_3 != 'e') {\n        if (char_var_3 < 'f') {\n          if ((char_var_3 != 'X') && (char_var_3 != '_')) {\nLAB_00111d1a:\n            undefined_var_2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_message_00108fe8(record_data,undefined_var_2);\n          }\n        }\n        else {\n          char_pointer_2 = \"this\";\n          if (char_var_3 == 't') goto LAB_00111d62;\n          if (char_var_3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_pointer_2 = (char *)0x0;\n      if ((record_data != local_char_pointer_1) && ((*record_data != ' ' || (local_char_pointer_1 != record_data + 1)))) {\n        char_pointer_2 = (char *)copy_and_null_terminate_00109a0b(record_data,(int)local_char_pointer_1 - (int)record_data);\n      }\n    }\nLAB_00111d62:\n    byte_var_2 = local_char_pointer_1[1];\n    char_pointer_1 = local_char_pointer_1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var_2 * 2) >> 2) & 1 |\n        (byte_var_2 == 0x2d || byte_var_2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var_2 == 0) goto switchD_00111de5_caseD_44;\n    char_pointer_1 = local_char_pointer_1 + 2;\n    char_var_3 = local_char_pointer_1[1];\n    switch(char_var_3) {\n    case 'C':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      char_pointer_1 = \"debug_record_label: not implemented\";\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      char_var_3 = initialize_debug_record_0010bc80(file_handle,char_pointer_2,long_var_4,char_var_3 == 'F',file_offset);\n      if (char_var_3 != '\\0') {\n        do {\n          if (*local_char_pointer_1 != ';') {\n            return 1;\n          }\n          local_char_pointer_1 = local_char_pointer_1 + 1;\n          long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n        } while (long_var_4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) goto LAB_0011208f;\n      long_var_2 = debug_info[3];\n      long_var_1 = (long *)debug_info[2];\n      char_var_3 = *(char *)(*(long *)(*debug_info + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (record_type == 0x24) {\n        local_char_pointer_1 = char_pointer_1;\n        do {\n          if (*local_char_pointer_1 != ';') {\n            return 1;\n          }\n          local_char_pointer_1 = local_char_pointer_1 + 1;\n          long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n        } while (long_var_4 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 2;\n      break;\n    case 'S':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var_3 = local_char_pointer_1[2];\n      if (char_var_3 == 't') {\n        char_pointer_1 = local_char_pointer_1 + 3;\n      }\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,char_pointer_2,&local_char_pointer_1,local_long_double_pointer_1);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) {\n        return 1;\n      }\n      char_var_1 = *(char *)(debug_info + 0x35);\n      long_var_1 = (long *)validate_debug_tag_type_0010c6be(file_handle,char_pointer_2,long_var_4);\n      if (long_var_1 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_double_pointer_1[0] != (long **)0x0) {\n        *local_long_double_pointer_1[0] = long_var_1;\n      }\n      if (char_var_1 != '\\0') goto LAB_001122f0;\n      long_double_pointer_1 = (long **)(debug_info + 0x34);\n      pplVar18 = (long **)debug_info[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_pointer_1 = local_char_pointer_1 + 3;\n      if (((local_char_pointer_1[2] != '\\0') && (char_pointer_1 = local_char_pointer_1 + 4, local_char_pointer_1[3] == 'n')) &&\n         (char_pointer_1 = local_char_pointer_1 + 5, char_pointer_2 = local_char_pointer_1 + 4, local_char_pointer_1 = char_pointer_1, *char_pointer_2 == '0')) {\n        for (; char_pointer_1 = local_char_pointer_1, *local_char_pointer_1 != '\\0'; local_char_pointer_1 = local_char_pointer_1 + 1) {\n          if (*local_char_pointer_1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 4;\n      break;\n    case 'c':\n      if (local_char_pointer_1[2] == '=') {\n        char_pointer_1 = local_char_pointer_1 + 4;\n        char_var_3 = local_char_pointer_1[3];\n        local_char_pointer_1 = char_pointer_1;\n        if (char_var_3 == 'i') {\n          long_var_4 = strtol(char_pointer_1,(char **)0x0,10);\n          if (char_pointer_2 == (char *)0x0) {\n            return 0;\n          }\n          long_var_2 = initialize_memory_00112996(file_handle,char_pointer_2,4);\n          if (long_var_2 != 0) {\n            *(long *)(long_var_2 + 0x20) = (long)(int)long_var_4;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var_3 == 'r') {\n          double_var = strtod(char_pointer_1,(char **)0x0);\n          if (char_pointer_2 == (char *)0x0) {\n            return 0;\n          }\n          long_var_4 = initialize_memory_00112996(file_handle,char_pointer_2,5);\n          if (long_var_4 != 0) {\n            *(double *)(long_var_4 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var_3 == 'e') {\n          long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n          if (long_var_4 == 0) {\n            return 0;\n          }\n          char_pointer_1 = local_char_pointer_1;\n          if (*local_char_pointer_1 == ',') {\n            long_var_2 = strtol(local_char_pointer_1,(char **)0x0,10);\n            if (char_pointer_2 == (char *)0x0) {\n              return 0;\n            }\n            long_var_3 = initialize_memory_00112996(file_handle,char_pointer_2,6);\n            if (long_var_3 != 0) {\n              long_var_1 = (long *)xmalloc(0x10);\n              *long_var_1 = long_var_4;\n              long_var_1[1] = (long)(int)long_var_2;\n              *(long **)(long_var_3 + 0x20) = long_var_1;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_pointer_1[2] == 'F') {\n        local_char_pointer_1 = local_char_pointer_1 + 3;\n        long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n        if (long_var_4 == 0) {\n          return 0;\n        }\n        undefined_var_2 = initialize_and_allocate_00113ce0(long_var_4,0,0);\n        long_var_4 = initialize_or_get_data_object_00113d3a(undefined_var_2);\n      }\n      else {\n        local_char_pointer_1 = char_pointer_1;\n        long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      }\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 1;\n      break;\n    case 'r':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 5;\nLAB_001123e8:\n      char_var_3 = create_record_0010c139(file_handle,debug_info,char_pointer_2,long_var_4,undefined_var_2,file_offset);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,char_pointer_2,&local_char_pointer_1,local_long_double_pointer_1);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) {\n        return 1;\n      }\n      long_var_1 = (long *)initialize_debug_data_0010c218(file_handle,char_pointer_2,long_var_4);\n      if (long_var_1 == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_double_pointer_1[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_double_pointer_1[0] = long_var_1;\n      return 1;\n    case 'v':\n      local_char_pointer_1 = char_pointer_1;\n      long_var_4 = FUNC_0010ee3f(file_handle,debug_info,0,&local_char_pointer_1,0);\n      if (long_var_4 == 0) {\n        return 0;\n      }\n      undefined_var_2 = 3;\n    }\n    char_var_3 = debug_record_parameter_0010bd62(file_handle,char_pointer_2,long_var_4,undefined_var_2,file_offset);\n    goto joined_r0x001123f8;\n  }\n  if (record_type == 0xe0) {\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (block_level == 1)) {\n      return 1;\n    }\n    char_var_3 = cleanup_and_process_records_0010c1c6(file_handle,debug_info);\n    if (char_var_3 == '\\0') {\n      return 0;\n    }\n    char_var_3 = end_block_debugging_0010bf20(file_handle,debug_info[7] + debug_info[6] + file_offset);\n    if (char_var_3 == '\\0') {\n      return 0;\n    }\n    debug_info = debug_info + 0xe;\n    *(int *)debug_info = *(int *)debug_info + -1;\n    char_pointer_1 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debug_info) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < record_type) {\n      if (record_type == 0xe2) {\n        char_pointer_1 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_pointer_1 = \"debug_end_common_block: not implemented\";\n        if (record_type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var_2 = dcgettext(0,char_pointer_1,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var_2);\n      return 0;\n    }\n    if (record_type != 0xc0) {\n      if (record_type == 0xc2) {\n        int_var_1 = *(int *)(debug_info + 0x10);\n        *(uint *)(debug_info + 0x10) = int_var_1 + 1U;\n        long_var_4 = xrealloc(debug_info[0x11],(ulong)(int_var_1 + 1U) << 3);\n        pointer_var_1 = (undefined8 *)debug_info[0xb];\n        debug_info[0x11] = long_var_4;\n        while( true ) {\n          if (pointer_var_1 == (undefined8 *)0x0) {\n            undefined_var_2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_message_00108fe8(record_data,undefined_var_2);\n            *(undefined8 *)(debug_info[0x11] + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((file_offset == pointer_var_1[3]) && (int_var_1 = strcmp((char *)pointer_var_1[2],record_data), int_var_1 == 0))\n          break;\n          pointer_var_1 = (undefined8 *)*pointer_var_1;\n        }\n        *(undefined8 *)(long_var_4 + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = pointer_var_1[5];\n        return 1;\n      }\n      if (record_type == 0xa2) {\n        long_var_4 = debug_info[10];\n        if (long_var_4 != 0) {\n          long_var_2 = *(long *)(long_var_4 + 8);\n          uint_var_1 = *(uint *)(long_var_4 + 0x20);\n          debug_info[10] = long_var_2;\n          if ((uint_var_1 < *(uint *)(debug_info + 0x10)) &&\n             (*(undefined8 *)(long_var_4 + 0x28) = *(undefined8 *)(debug_info[0x11] + (ulong)uint_var_1 * 8),\n             long_var_2 != 0)) {\n            record_data = *(char **)(long_var_2 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        record_data = (char *)debug_info[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (block_level == 1)) {\n      return 1;\n    }\n    if (*(char *)(debug_info + 0xc) != '\\0') {\n      char_var_3 = start_debug_block_0010be88(file_handle,debug_info[7] + debug_info[6] + file_offset);\n      if (char_var_3 == '\\0') {\n        return 0;\n      }\n      char_var_3 = cleanup_and_process_records_0010c1c6(file_handle,debug_info);\n      if (char_var_3 != '\\0') {\n        *(int *)(debug_info + 0xe) = *(int *)(debug_info + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_pointer_1 = \"N_LBRAC not within function\\n\";\n  }\n  char_pointer_1 = (char *)dcgettext(0,char_pointer_1,5);\n  fprintf(_stderr,char_pointer_1);\n  return 0;\ncode_r0x00111cc7:\n  local_char_pointer_1 = local_char_pointer_1 + 2;\n  local_char_pointer_1 = strchr(local_char_pointer_1,0x3a);\n  if (local_char_pointer_1 == (char *)0x0) {\n    char_pointer_1 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_pointer_1 = char_pointer_1;\n    print_bad_stab_error_00108fb9(record_data);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var_3 != 't') {\n      return 1;\n    }\n    long_var_1 = (long *)initialize_debug_data_0010c218(file_handle,char_pointer_2,long_var_1);\n    if (long_var_1 != (long *)0x0) {\n      if (local_long_double_pointer_1[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_double_pointer_1[0] = long_var_1;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *char_pointer_2) &&\n     (int_var_1 = strcmp((char *)pplVar18[1],char_pointer_2), int_var_1 == 0)) {\n    pplVar18[3] = long_var_1;\n    *long_double_pointer_1 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  long_double_pointer_1 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var_2 < 1) {\nLAB_0011208f:\n    undefined_var_2 = 1;\nLAB_001121c4:\n    char_var_3 = record_variable_debug_0010c05d(file_handle,char_pointer_2,long_var_4,undefined_var_2,file_offset);\njoined_r0x001123f8:\n    if (char_var_3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_pointer_1 = *(char **)(*long_var_1 + 8);\n  if ((char_var_3 != '\\0') && (char_var_3 == *char_pointer_1)) {\n    char_pointer_1 = char_pointer_1 + 1;\n  }\n  if ((*char_pointer_1 == *char_pointer_2) && (int_var_1 = strcmp(char_pointer_1,char_pointer_2), int_var_1 == 0)) {\n    file_offset = *(long *)(*long_var_1 + 0x10) + *(long *)(*(long *)(*long_var_1 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var_2 = long_var_2 + -1;\n  long_var_1 = long_var_1 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "strlen",
                "dcgettext",
                "FUN_0010bf86",
                "strtod",
                "FUN_00112996",
                "strcmp",
                "FUN_0010ee3f",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00108f08",
                "xrealloc",
                "strchr",
                "free",
                "FUN_0010c6be",
                "FUN_0010c139",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "xstrdup",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "xmalloc",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010bf20",
                "FUN_0010c218",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_debug_records_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_section_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "hasDuplicate",
                "iVar2": "errorCode",
                "uVar3": "relocCount",
                "lVar4": "relocUpperBound",
                "puVar5": "relocArray",
                "uVar6": "relocIndex",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "newRelocArray",
                "puVar8": "nextRelocArray",
                "uVar9": "tempIndex",
                "uStack_38": "unusedVar"
            },
            "code": "\nvoid processSection_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char hasDuplicate;\n  int errorCode;\n  undefined8 relocCount;\n  long relocUpperBound;\n  undefined8 *relocArray;\n  ulong relocIndex;\n  code *jumpTable;\n  undefined8 *newRelocArray;\n  undefined8 *nextRelocArray;\n  ulong tempIndex;\n  undefined8 unusedVar;\n  \n  hasDuplicate = check_section_for_duplicate_00115f50(param1,param2,0);\n  if (hasDuplicate != '\\0') {\n    return;\n  }\n  relocCount = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (relocUpperBound = process_function_00114190(*param2,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a40 = 1;\n        relocCount = 0;\nLAB_00108315:\n        print_error_message_001126c0(0,param1,param2,relocCount,unusedVar);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocArray = (undefined8 *)param2[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(param3);\n        if (relocArray == (undefined8 *)0x0) {\n          print_error_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocIndex = bfd_canonicalize_reloc(param1,param2,relocArray,DAT_001278d0);\n        if ((long)relocIndex < 0) {\n          DAT_00127a40 = 1;\n          relocCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocIndex = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        newRelocArray = relocArray;\n        for (tempIndex = 0; tempIndex != relocIndex; tempIndex = tempIndex + 1) {\n          nextRelocArray = newRelocArray;\n          if (((*(long **)relocArray[tempIndex] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocArray[tempIndex], relocUpperBound != 0)) &&\n             (hasDuplicate = check_pattern_validity_00115d70(*(undefined8 *)(relocUpperBound + 8),DAT_00127a28), hasDuplicate != '\\0')) {\n            nextRelocArray = newRelocArray + 1;\n            *newRelocArray = relocArray[tempIndex];\n          }\n          newRelocArray = nextRelocArray;\n        }\n        *newRelocArray = 0;\n        relocIndex = (long)newRelocArray - (long)relocArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocIndex == 0) {\n        relocIndex = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        relocIndex = relocIndex & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocIndex = 0;\n  relocArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,relocCount,relocArray,relocIndex);\n  return;\n}\n\n",
            "called": [
                "FUN_001082df",
                "FUN_00115f50",
                "xexit",
                "bfd_alloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00114190",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "FUN_0011a110",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_extract_data_0010d559",
                "param_1": "data_structure",
                "param_2": "input_bytes",
                "param_3": "data_length",
                "bVar1": "byte_1",
                "pbVar2": "current_byte",
                "cVar3": "result_char",
                "uVar4": "digit_count",
                "iVar5": "comparison_result",
                "ppcVar6": "debug_info",
                "sVar7": "string_length",
                "lVar8": "result",
                "plVar9": "debug_info_ptr",
                "pcVar10": "temp_string",
                "__s1": "offset_value",
                "__ptr": "copied_string",
                "pbVar11": "next_byte",
                "uVar12": "search_type",
                "local_64": "number",
                "local_40": "temp_strings"
            },
            "code": "\nundefined8 parse_and_extract_data_0010d559(undefined8 *data_structure,byte **input_bytes,long *data_length)\n\n{\n  byte byte_1;\n  byte *current_byte;\n  char result_char;\n  uint digit_count;\n  int comparison_result;\n  char **debug_info;\n  size_t string_length;\n  long result;\n  long *debug_info_ptr;\n  char *temp_string;\n  char *offset_value;\n  void *copied_string;\n  byte *next_byte;\n  undefined8 search_type;\n  byte *__nptr;\n  int number;\n  char *temp_strings [2];\n  \n  current_byte = *input_bytes;\n  byte_1 = current_byte[1];\n  if ((char)byte_1 < ':') {\n    if ((char)byte_1 < '1') goto LAB_0010d5d8;\n    number = (char)byte_1 + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_bytes = current_byte + 1;\n    }\n    next_byte = *input_bytes + 2;\n  }\n  else {\n    if (((byte_1 != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_byte + 2;\n    result = strtol((char *)__nptr,(char **)0x0,10);\n    number = (int)result;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    next_byte = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_bytes = next_byte;\n  debug_info = (char **)0x0;\n  if (data_length != (long *)0x0) {\n    debug_info = temp_strings;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      number = number + -1;\n      if (number == -1) {\n        if (data_length != (long *)0x0) {\n          *data_length = result;\n        }\n        return 1;\n      }\n      if (**input_bytes == 0x5f) {\n        *input_bytes = *input_bytes + 1;\n      }\n      if (**input_bytes != 0x74) break;\n      result_char = parse_input_0010d21c(data_structure,input_bytes,debug_info);\n      temp_string = temp_strings[0];\n      if (result_char == '\\0') {\n        return 0;\n      }\n      if (data_length != (long *)0x0) {\n        string_length = strlen(temp_strings[0]);\n        result = find_string_in_data_structure_0010afd5(*data_structure,data_structure[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    digit_count = extract_digits_00108e76(input_bytes);\n    string_length = strlen((char *)*input_bytes);\n    if (string_length < digit_count) break;\n    if (data_length != (long *)0x0) {\n      if ((result != 0) && (debug_info_ptr = (long *)extract_debug_info_from_binary_00113b1e(result), debug_info_ptr != (long *)0x0)) {\n        temp_string = (char *)copy_and_null_terminate_00109a0b(*input_bytes,digit_count);\n        for (; result = *debug_info_ptr, result != 0; debug_info_ptr = debug_info_ptr + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          offset_value = (char *)get_offset_value_001129f4(result);\n          if ((offset_value != (char *)0x0) && (comparison_result = strcmp(offset_value,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      search_type = 9;\n      if (number == 0) {\n        copied_string = (void *)copy_and_null_terminate_00109a0b(*input_bytes,digit_count);\n        result = find_named_type_0010914e(*data_structure,copied_string);\n        free(copied_string);\n        if (result != 0) goto LAB_0010d7ad;\n        search_type = 0;\n      }\n      result = find_string_in_data_structure_0010afd5(*data_structure,data_structure[1],*input_bytes,digit_count,search_type);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_bytes = *input_bytes + digit_count;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010afd5",
                "strlen",
                "FUN_001129f4",
                "strtol",
                "FUN_00109a0b",
                "FUN_00113b1e",
                "FUN_00108e76",
                "strcmp",
                "FUN_0010914e",
                "FUN_0010911f",
                "free",
                "FUN_0010d21c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_message_00108466",
                "param_7": "ptrToFree"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00108466(void)\n\n{\n  void *ptrToFree;\n  \n  DAT_00127a40 = 1;\n  print_error_message_001126c0(0);\n  free(ptrToFree);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_digits_00108e76",
                "param_1": "input",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint extractDigits_00108e76(byte **input)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **input;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_digits_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "hashPointer"
            },
            "code": "\nlong allocateAndInitializeHash_0010bb52(long input,undefined8 param2,undefined8 param3)\n\n{\n  long hashPointer;\n  \n  if (((input != 0) || (input = bfd_hash_allocate(param2,0x30), input != 0)) &&\n     (hashPointer = bfd_hash_newfunc(input,param2,param3), hashPointer != 0)) {\n    *(undefined8 *)(hashPointer + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hashPointer + 0x18) = 0;\n    *(undefined4 *)(hashPointer + 0x28) = 0;\n    return hashPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_process_hash_thunk_0010e439",
                "param_1": "processPointer",
                "param_2": "newValue",
                "process_bfd_hash_0010e2f0": "calculateHash"
            },
            "code": "\nvoid updateProcessHash_thunk_0010e439(long processPointer,undefined8 newValue)\n\n{\n  *(undefined8 *)(processPointer + 0x210) = newValue;\n  calculateHash(processPointer,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_process_hash_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "directory_path",
                "param_2": "default_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_access_0011283f(char *directory_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((default_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        default_directory = directory_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "savedError"
            },
            "code": "\nundefined8 closeFileAndReturnError_00108237(void)\n\n{\n  int savedError;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  savedError = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = savedError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "initialize_debug_record_0010bc80",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "file_size",
                "param_4": "debug_level",
                "uVar1": "result",
                "plVar2": "debug_record",
                "puVar3": "debug_set",
                "lVar4": "i",
                "puVar5": "ptr",
                "pcVar6": "default_filename",
                "bVar7": "flag",
                "auVar8": "return_val"
            },
            "code": "\n\n\nundefined  [16]\ninitialize_debug_record_0010bc80(long debug_info,char *filename,long file_size,uint debug_level,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *debug_record;\n  undefined4 *debug_set;\n  long i;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_val [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (file_size != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      debug_record = (long *)xmalloc(0x18);\n      *debug_record = file_size;\n      *(undefined (*) [16])(debug_record + 1) = ZEXT816(0);\n      debug_set = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = debug_record;\n      debug_record[2] = (long)debug_set;\n      ptr = debug_set;\n      for (i = 0xc; i != 0; i = i + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = debug_set;\n      i = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(debug_set + 6) = param_5;\n      *(undefined8 *)(debug_set + 8) = 0xffffffffffffffff;\n      i = initialize_memory_00112925(i + 0x10,default_filename,3,(debug_level & 0xff) + 1);\n      if (i != 0) {\n        *(long **)(i + 0x20) = debug_record;\n        result = CONCAT71((int7)((ulong)i >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  return_val._8_8_ = param_6;\n  return_val._0_8_ = result;\n  return return_val;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_record_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_concatenated_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_concatenated_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = detect_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_function_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_function_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_function_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improve_binary_analysis_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = analyze_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = analyze_debug_records_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_file_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_file_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_type_code_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_type_code_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = validate_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_validity_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_print_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)build_attribute_notes_parser_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlashPos",
                "lVar2": "pathLen",
                "lVar3": "copyIndex",
                "lVar4": "lastSlashIndex",
                "pcVar5": "copyDest",
                "bVar6": "isWindowsStyle"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *path)\n\n{\n  char *lastSlashPos;\n  long pathLen;\n  long copyIndex;\n  long lastSlashIndex;\n  char *copyDest;\n  byte isWindowsStyle;\n  \n  isWindowsStyle = 0;\n  lastSlashPos = strrchr(path,0x2f);\n  if (lastSlashPos == (char *)0x0) {\n    lastSlashPos = (char *)xmalloc(9);\n    copyIndex = 0;\n  }\n  else {\n    lastSlashIndex = (long)lastSlashPos - (long)path;\n    lastSlashPos = (char *)xmalloc(lastSlashIndex + 0xb);\n    copyIndex = lastSlashIndex + 1;\n    copyDest = lastSlashPos;\n    for (pathLen = lastSlashIndex; pathLen != 0; pathLen = pathLen + -1) {\n      *copyDest = *path;\n      path = path + (ulong)isWindowsStyle * -2 + 1;\n      copyDest = copyDest + (ulong)isWindowsStyle * -2 + 1;\n    }\n    lastSlashPos[lastSlashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlashPos + copyIndex) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashPos + copyIndex) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_entry_0010a181",
                "param_1": "entryData",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "charValue",
                "__s": "item1",
                "__s_00": "item2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "resultString",
                "lVar7": "counter",
                "local_41": "localFlag",
                "iVar2": "value",
                "iVar3": "total",
                "uVar4": "result"
            },
            "code": "\nundefined4 generateEntry_0010a181(long entryData,long startValue,long endValue,byte flag)\n\n{\n  char charValue;\n  int value;\n  int total;\n  undefined4 result;\n  char *item1;\n  char *item2;\n  size_t len1;\n  size_t len2;\n  char *resultString;\n  long counter;\n  byte localFlag;\n  \n  charValue = *(char *)(*(long *)(entryData + 0x60) + 0x1c);\n  item1 = (char *)extract_next_item_00109b2f();\n  localFlag = 1;\n  if (charValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(entryData + 0x60) + 0x1c);\n  }\n  value = *(int *)(*(long *)(entryData + 0x60) + 0x18);\n  item2 = (char *)extract_next_item_00109b2f(entryData);\n  len1 = strlen(item1);\n  len2 = strlen(item2);\n  resultString = (char *)xmalloc(len1 + 100 + len2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(entryData + 0x68);\n    *(long *)(entryData + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  len1 = strlen(resultString);\n  sprintf(resultString + len1,\"ar%s;%ld;%ld;%s\",item1,startValue,endValue,item2);\n  free(item1);\n  free(item2);\n  total = 0;\n  if (startValue <= endValue) {\n    total = value * (((int)endValue - (int)startValue) + 1);\n  }\n  result = create_entry_00109b52(entryData,resultString,counter,localFlag,total);\n  if ((char)result != '\\0') {\n    free(resultString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_entry_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_binary_file_header_info_001199d0",
                "pcVar4": "headerFormatString",
                "iVar1": "columnWidth",
                "iVar2": "targetArchIndex",
                "iVar3": "archIndex",
                "pcVar6": "tempFilename",
                "sVar5": "stringLength",
                "uVar7": "archMach",
                "piVar8": "errnoPtr",
                "lVar10": "tempLength",
                "lVar11": "currentLength",
                "ppcVar12": "archMachPtr",
                "uVar13": "maxArchNameLength",
                "uVar14": "loopIndex",
                "local_70": "loopVariable"
            },
            "code": "\n\n\nvoid printBinaryFileHeaderInfo_001199d0(void)\n\n{\n  int columnWidth;\n  int targetArchIndex;\n  int archIndex;\n  char *headerFormatString;\n  size_t stringLength;\n  char *tempFilename;\n  undefined8 archMach;\n  int *errnoPtr;\n  int iVar9;\n  long tempLength;\n  long currentLength;\n  char **archMachPtr;\n  uint maxArchNameLength;\n  ulong loopIndex;\n  int loopVariable;\n  \n  headerFormatString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerFormatString,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    headerFormatString = getenv(\"TMPDIR\");\n    archMach = check_directory_access_0011283f(headerFormatString,0);\n    headerFormatString = getenv(\"TMP\");\n    archMach = check_directory_access_0011283f(headerFormatString,archMach);\n    headerFormatString = getenv(\"TEMP\");\n    archMach = check_directory_access_0011283f(headerFormatString,archMach);\n    archMach = check_directory_access_0011283f(&DAT_0011b39a,archMach);\n    archMach = check_directory_access_0011283f(\"/var/tmp\",archMach);\n    headerFormatString = (char *)check_directory_access_0011283f(&DAT_00120324,archMach);\n    if (headerFormatString == (char *)0x0) {\n      headerFormatString = \".\";\n    }\n    stringLength = strlen(headerFormatString);\n    tempFilename = (char *)xmalloc((int)stringLength + 2);\n    DAT_001278e0 = strcpy(tempFilename,headerFormatString);\n    DAT_001278e0[stringLength & 0xffffffff] = '/';\n    DAT_001278e0[(int)stringLength + 1] = '\\0';\n  }\n  headerFormatString = DAT_001278e0;\n  stringLength = strlen(DAT_001278e0);\n  tempLength = (long)(int)stringLength;\n  tempFilename = (char *)xmalloc(tempLength + 9);\n  strcpy(tempFilename,headerFormatString);\n  *(undefined2 *)(tempFilename + tempLength) = 0x6363;\n  *(undefined4 *)(tempFilename + tempLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilename + tempLength + 2) + 3) = 0x585858;\n  tempFilename[tempLength + 8] = '\\0';\n  targetArchIndex = mkstemps(tempFilename,0);\n  if (targetArchIndex == -1) {\n    errnoPtr = __errno_location();\n    tempFilename = strerror(*errnoPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerFormatString,tempFilename);\n                    \n    abort();\n  }\n  targetArchIndex = close(targetArchIndex);\n  if (targetArchIndex != 0) {\n                    \n    abort();\n  }\n  maxArchNameLength = 0;\n  targetArchIndex = 2;\n  bfd_iterate_over_targets(decompress_and_print_bfd_data_00119f70);\n  unlink(tempFilename);\n  free(tempFilename);\n  loopVariable = 0;\n  do {\n    headerFormatString = (char *)bfd_printable_arch_mach(targetArchIndex);\n    stringLength = strlen(headerFormatString);\n    if ((int)maxArchNameLength < (int)(uint)stringLength) {\n      maxArchNameLength = (uint)stringLength;\n    }\n    targetArchIndex = targetArchIndex + 1;\n  } while (targetArchIndex != 0x57);\n  headerFormatString = getenv(\"COLUMNS\");\n  targetArchIndex = loopVariable;\n  if (headerFormatString != (char *)0x0) {\n    tempLength = strtol(headerFormatString,(char **)0x0,10);\n    columnWidth = (int)tempLength;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    loopVariable = targetArchIndex;\n    if (-1 < loopVariable) {\n      return;\n    }\n    currentLength = (long)loopVariable;\n    iVar9 = (columnWidth - maxArchNameLength) + -1;\n    tempLength = currentLength;\n    do {\n      targetArchIndex = (int)tempLength;\n      if (-1 < targetArchIndex) break;\n      stringLength = strlen(*(char **)(tempLength * 0x60));\n      tempLength = tempLength + 1;\n      iVar9 = (iVar9 - (int)stringLength) + -1;\n    } while (-1 < iVar9);\n    printf(\"\\n%*s\",(ulong)(maxArchNameLength + 1),&DAT_0011b4a1);\n    for (archMachPtr = (char **)(currentLength * 0x60);\n        ((ulong)(uint)(targetArchIndex - loopVariable) + currentLength) * 0x60 - (long)archMachPtr != 0;\n        archMachPtr = archMachPtr + 0xc) {\n      printf(\"%s \",*archMachPtr);\n    }\n    iVar9 = 2;\n    putc(10,_stdout);\n    do {\n      headerFormatString = (char *)bfd_printable_arch_mach(iVar9,0);\n      archIndex = strcmp(headerFormatString,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        archMach = bfd_printable_arch_mach(iVar9,0);\n        printf(\"%*s \",(ulong)maxArchNameLength,archMach);\n        archMachPtr = (char **)(currentLength * 0x60);\n        archIndex = loopVariable;\n        while (targetArchIndex != archIndex) {\n          if (*(char *)((long)archMachPtr + (ulong)(iVar9 - 2) + 8) == '\\0') {\n            stringLength = strlen(*archMachPtr);\n            for (loopIndex = stringLength & 0xffffffff; (int)loopIndex != 0; loopIndex = (ulong)((int)loopIndex - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachPtr,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (targetArchIndex != archIndex) {\n            putc(0x20,_stdout);\n          }\n          archMachPtr = archMachPtr + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      iVar9 = iVar9 + 1;\n    } while (iVar9 != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "getenv",
                "abort",
                "bfd_iterate_over_targets",
                "FUN_00119f70",
                "strlen",
                "mkstemps",
                "FUN_00104943",
                "dcgettext",
                "FUN_0011283f",
                "strcpy",
                "unlink",
                "printf",
                "strerror",
                "xmalloc",
                "close",
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_file_header_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_application_0010847a"
            },
            "code": "\nvoid initializeApplication_0010847a(void)\n\n{\n  parse_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_application_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_input_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr1",
                "bVar3": "byteVar2",
                "cVar4": "charVar1",
                "bVar5": "byteVar3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "size",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "pointerVar1",
                "uVar12": "uVar1",
                "pcVar13": "pointerVar2",
                "bVar14": "byteVar4",
                "pcVar15": "pointerVar3",
                "bVar16": "byteVar5",
                "bVar17": "byteVar6",
                "bVar18": "byteVar7",
                "bVar19": "byteVar8",
                "uVar20": "loopCounter",
                "uVar21": "ulongVar",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 parseInput_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byteVar1;\n  byte *bytePtr1;\n  byte byteVar2;\n  char charVar1;\n  byte byteVar3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t size;\n  byte *bytePtr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *pointerVar1;\n  undefined8 uVar1;\n  char *pointerVar2;\n  byte byteVar4;\n  char *pointerVar3;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  uint loopCounter;\n  ulong ulongVar;\n  uint localArray [3];\n  \n  bytePtr1 = *param2;\n  *param2 = bytePtr1 + 1;\n  localArray[0] = extract_digits_00108e76(param2);\n  ulongVar = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    bytePtr2 = *param2;\n    size = strlen((char *)bytePtr2);\n    if (ulongVar <= size) {\n      *param2 = bytePtr2 + ulongVar;\n      loopCounter = 0;\n      result = parse_unsigned_int_00108ea1(param2,localArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= loopCounter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_00109a0b(bytePtr1,(int)*param2 - (int)bytePtr1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (pointerVar1 = strstr(haystack,\"::NoSuchStrinG\"), pointerVar2 = haystack,\n             pointerVar3 = haystack, pointerVar1 != (char *)0x0)) {\n            for (; pointerVar2 != pointerVar1; pointerVar2 = pointerVar2 + 1) {\n              if ((*pointerVar2 != ' ') ||\n                 (((pointerVar2[1] == '>' && (haystack < pointerVar2)) && (pointerVar2[-1] == '>')))) {\n                *pointerVar3 = *pointerVar2;\n                pointerVar3 = pointerVar3 + 1;\n              }\n            }\n            uVar1 = copy_and_null_terminate_00109a0b(haystack,(int)pointerVar3 - (int)haystack);\n            *param3 = uVar1;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(bytePtr1);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *param2;\n        if (*bytePtr2 != 0x5a) {\n          byteVar3 = parse_and_execute_0010c95e(param1,param2,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar7 = 0;\n          byteVar6 = 0;\n          byteVar8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar5 = byteVar2;\n              byteVar1 = *bytePtr2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = byteVar5;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar5;\n              byteVar7 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar5;\n              byteVar8 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar5;\n              byteVar6 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePtr2 + 1;\n        charVar1 = parse_and_execute_0010c95e(param1,param2,0);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(bytePtr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar5 == 0) {\n    if (byteVar8 == 0) {\n      if (byteVar7 == 0) {\n        if (byteVar6 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = extract_digits_00108e76(param2);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uintVar1;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePtr2 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *param2 = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *param2;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = extract_digits_00108e76(param2);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      intVar1 = extract_digits_00108e76(param2);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  loopCounter = loopCounter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "abort",
                "FUN_00108ea1",
                "strstr",
                "strlen",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108e76",
                "concat",
                "FUN_0010911f",
                "cplus_demangle",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_input_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_digits_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_unsigned_int_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_digits_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_digits_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_digits_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "clean_up_hash_table_001054af",
                "param_1": "notUsedParam",
                "param_2": "alsoNotUsedParam",
                "in_RAX": "temporaryValue"
            },
            "code": "\nvoid cleanUpHashTable_001054af(undefined8 notUsedParam,undefined8 alsoNotUsedParam)\n\n{\n  undefined8 temporaryValue;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,alsoNotUsedParam,temporaryValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "clean_up_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "create_record_0010c139",
                "param_1": "param1",
                "param_2": "record",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "prevRecord",
                "cVar2": "isRecordValid",
                "uVar3": "result",
                "puVar4": "newRecord",
                "in_R10": "register10",
                "unaff_R15": "register15"
            },
            "code": "\nulong createRecord_0010c139(undefined8 param1,long record,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 prevRecord;\n  char isRecordValid;\n  ulong result;\n  undefined8 *newRecord;\n  undefined8 register10;\n  undefined8 register15;\n  \n  isRecordValid = *(char *)(record + 0x60);\n  if ((isRecordValid != '\\0') && ((*(int *)(record + 0x40) != 0 || (*(char *)(record + 0x44) == '\\0')))) {\n    newRecord = (undefined8 *)xmalloc(0x28);\n    prevRecord = *(undefined8 *)(record + 0x78);\n    *(undefined8 *)((long)newRecord + 0x1c) = 0;\n    newRecord[2] = param4;\n    *(undefined4 *)(newRecord + 3) = param5;\n    newRecord[4] = param6;\n    *(undefined8 **)(record + 0x78) = newRecord;\n    *newRecord = prevRecord;\n    newRecord[1] = param3;\n    return CONCAT71((int7)((ulong)register15 >> 8),isRecordValid) & 0xffffffff;\n  }\n  result = record_variable_debug_0010c05d(param1,param3,param4,param5,param6,register10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "create_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_bfd_hash_0010e439",
                "param_1": "baseAddress",
                "param_2": "hashValue",
                "process_bfd_hash_0010e2f0": "processBfdHash"
            },
            "code": "\nvoid setBfdHash_0010e439(long baseAddress,undefined8 hashValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = hashValue;\n  processBfdHash(baseAddress,0x84,0,0,hashValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_bfd_hash_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010e9a0",
                "FUN_0010b800",
                "FUN_00109e76",
                "FUN_0010e918",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010abdd",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010554f",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00113ede",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_00113fb0",
                "FUN_0010b800",
                "FUN_0010e918",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_00104ad6",
                "FUN_00109bbb",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "create_and_format_entry_00109d3e",
                "param_1": "entry_data",
                "param_2": "entry_length",
                "uVar1": "formatted_entry"
            },
            "code": "\nvoid create_and_format_entry_00109d3e(undefined8 entry_data,int entry_length)\n\n{\n  undefined8 formatted_entry;\n  \n  formatted_entry = 0xfffffffffffffff0;\n  if (entry_length - 1U < 8) {\n    formatted_entry = *(undefined8 *)(&DAT_00121360 + (ulong)(entry_length - 1U) * 8);\n  }\n  create_formatted_entry_00109cf4(entry_data,formatted_entry,entry_length);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_and_format_entry_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_files_00112502",
                "param_1": "file_info",
                "param_2": "file_handle",
                "param_3": "file_size",
                "uVar1": "index",
                "puVar2": "file_list",
                "uVar3": "current_file",
                "cVar4": "error_flag"
            },
            "code": "\nundefined process_files_00112502(long file_info,undefined8 file_handle,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_list;\n  undefined8 current_file;\n  char error_flag;\n  \n  do {\n    file_list = *(undefined8 **)(file_info + 0x40);\n    if (file_list == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_info + 0x48), index < 10 && (file_list[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_list[(ulong)index + 0xc]) {\n        return 1;\n      }\n      error_flag = update_file_info_0010edb4(file_handle,*(undefined8 *)(file_list[1] + 8));\n      if (error_flag == '\\0') {\n        return 0;\n      }\n      *(int *)(file_info + 0x48) = *(int *)(file_info + 0x48) + 1;\n    }\n    current_file = *file_list;\n    *(undefined4 *)(file_info + 0x48) = 0;\n    *(undefined8 *)(file_info + 0x40) = current_file;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_RBX": "line_start",
                "unaff_EBP": "line_number",
                "in_R10": "line",
                "unaff_R13": "param_7",
                "unaff_R14": "current_line",
                "unaff_R15": "htab_entry",
                "param_7": "message",
                "param_8": "result",
                "uVar1": "error_message",
                "ppbVar2": "slot",
                "pbVar3": "current_char",
                "bVar4": "next_char",
                "pbVar5": "line_end"
            },
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *line_start;\n  byte *line_end;\n  int line_number;\n  byte *line;\n  undefined8 param_7;\n  byte *current_line;\n  byte *htab_entry;\n  undefined8 message;\n  undefined8 *result;\n  byte *param_9;\n  \ncode_r0x00104cc1:\n  param_9 = line;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(error_message,message,line_number);\n  line_end = line_start;\n  line = param_9;\nLAB_00114599:\n  do {\n    *line = 0;\n    if (htab_entry < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = htab_entry;\n    }\n    line_number = line_number + 1;\n    current_char = line_end;\n    if (current_line[1] == 0) {\n      *result = param_7;\n      return;\n    }\n    for (; next_char = *current_char, current_line = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          line_start = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          line_start = current_char + 1;\n          if (current_char[1] == 10) {\n            line_start = current_char + 2;\n            current_line = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          process_lines_00104cc1_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      current_line = current_char + 1;\n      line_start = current_char + 2;\n    }\n    else {\n      line_start = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_end;\n    htab_entry = line_end;\n    while ((next_char == 0x20 || (line = htab_entry, next_char == 9))) {\n      line_end = htab_entry + 1;\n      htab_entry = htab_entry + 1;\n      next_char = *line_end;\n    }\n    do {\n      line_end = line_start;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = line[1];\n      line = line + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = line[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = line[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = line[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = line[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = line[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = line[6];\n      current_char = line + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "dcgettext",
                "FUN_00104cc1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010aa53",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010d7d4",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_00109be3",
                "FUN_0010dac0",
                "FUN_0010abdd",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_data_and_allocate_memory_00113bfa",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "lVar1": "initialized_data",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong initialize_data_and_allocate_memory_00113bfa(long input_param_1,long input_param_2)\n\n{\n  long initialized_data;\n  long *allocated_memory;\n  \n  if (((input_param_1 != 0) && (input_param_2 != 0)) && (initialized_data = initialize_data_00112904(0x12,0), initialized_data != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_param_1;\n    allocated_memory[1] = input_param_2;\n    *(long **)(initialized_data + 0x10) = allocated_memory;\n    return initialized_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_and_allocate_memory_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_print_error_message_00108375",
                "param_1": "param1",
                "param_2": "param2_array",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "message",
                "unaff_EBX": "ebx_value"
            },
            "code": "\nuint check_and_print_error_message_00108375(undefined8 param1,undefined8 *param2_array,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 message;\n  uint ebx_value;\n  \n  if (*(int *)(param2_array[1] + 8) != 2) {\n    value1 = *param2_array;\n    ebx_value = ebx_value & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(message,value1,param3);\n  }\n  return ebx_value;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_and_print_error_message_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "log_entry_00109e76",
                "param_1": "entryData",
                "param_2": "entrySize",
                "lVar1": "entryCount",
                "local_5a": "logMessage"
            },
            "code": "\nvoid logEntry_00109e76(long entryData,uint entrySize)\n\n{\n  long entryCount;\n  char logMessage [58];\n  \n  entryCount = *(long *)(entryData + 0x68);\n  *(long *)(entryData + 0x68) = entryCount + 1;\n  sprintf(logMessage,\"%ld=r%ld;%u;0;\",entryCount,entryCount,(ulong)entrySize);\n  create_entry_00109b52(entryData,logMessage,entryCount,1,entrySize * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "log_entry_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "currentIndex",
                "lVar2": "currentValue1",
                "lVar3": "currentValue2",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateData_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int currentIndex;\n  long currentValue1;\n  long currentValue2;\n  undefined8 duplicatedString;\n  \n  currentValue1 = (long)DAT_001278c0;\n  currentValue2 = currentValue1 * 0x18;\n  free((void *)(&DAT_00127750)[currentValue1 * 3]);\n  *(undefined4 *)(&DAT_00127740 + currentValue2) = newValue1;\n  *(undefined4 *)(&DAT_00127744 + currentValue2) = newValue2;\n  *(undefined8 *)(&DAT_00127748 + currentValue2) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  (&DAT_00127750)[currentValue1 * 3] = duplicatedString;\n  currentIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_data_structure_0010afd5",
                "param_1": "linked_list_head",
                "param_2": "data_structure",
                "param_3": "input_string",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "__s2": "input_string_copy",
                "puVar2": "current_node",
                "uVar3": "temp",
                "lVar4": "temp_value",
                "puVar5": "nested_node",
                "puVar6": "nested_struct_member",
                "bVar7": "counter",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16]\nfindStringInDataStructure_0010afd5(undefined8 *linked_list_head,long data_structure,undefined8 input_string,undefined4 param4,\n            undefined4 param5,undefined8 param6)\n\n{\n  int iVar1;\n  char *input_string_copy;\n  undefined8 *current_node;\n  undefined8 temp;\n  long temp_value;\n  undefined8 *nested_node;\n  undefined4 *nested_struct_member;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  input_string_copy = (char *)copy_and_null_terminate_00109a0b(input_string,param4);\n  for (linked_list_head = (undefined8 *)*linked_list_head; linked_list_head != (undefined8 *)0x0;\n      linked_list_head = (undefined8 *)*linked_list_head) {\n    for (current_node = (undefined8 *)linked_list_head[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (nested_node = *(undefined8 **)(undefined8 *)current_node[2]; nested_node != (undefined8 *)0x0;\n            nested_node = (undefined8 *)*nested_node) {\n          if ((*(int *)((long)nested_node + 0x14) == 1) && (*(char *)nested_node[1] == *input_string_copy)) {\n            iVar1 = strcmp((char *)nested_node[1],input_string_copy);\n            if (iVar1 == 0) {\n              temp_value = nested_node[4];\n              if (temp_value == 0) goto LAB_0010b05b;\n              free(input_string_copy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(data_structure + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(data_structure + 0x1a0);\n      nested_struct_member = (undefined4 *)((long)current_node + 0x14);\n      for (temp_value = 5; temp_value != 0; temp_value = temp_value + -1) {\n        *nested_struct_member = 0;\n        nested_struct_member = nested_struct_member + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = param5;\n      *current_node = temp;\n      current_node[1] = input_string_copy;\n      temp = create_data_structure_00113e23(current_node + 3,input_string_copy);\n      *(undefined8 **)(data_structure + 0x1a0) = current_node;\n      current_node[4] = temp;\nLAB_0010b0e7:\n      temp_value = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = param6;\n      return_value._0_8_ = temp_value;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *input_string_copy) {\n      iVar1 = strcmp((char *)current_node[1],input_string_copy);\n      if (iVar1 == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = param5;\n        }\n        free(input_string_copy);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_00113e23",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_string_in_data_structure_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = extract_values_from_string_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = get_file_content_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_data_and_allocate_memory_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = extract_values_from_string_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)get_file_content_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)get_file_content_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_data_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_error_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)analyze_debug_info_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_data_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_data_and_return_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_data_object_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_unsigned_from_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_data_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_data_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = extract_values_from_string_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = set_param_value_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_error_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_allocate_data_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)set_param_value_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_error_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_error_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_and_store_data_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_and_allocate_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_data_and_set_param_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = extract_values_from_string_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_unsigned_from_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_unsigned_from_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)set_param_value_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)set_param_value_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_error_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_message_00108fe8(pbVar27,uVar15);\n                lVar38 = set_param_value_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_data_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)set_param_value_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_data_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)set_param_value_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)set_param_value_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)set_param_value_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)set_param_value_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)set_param_value_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_message_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)set_param_value_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)set_param_value_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_error_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_message_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_message_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_offset_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_error_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_error_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_error_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_message_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_error_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)analyze_debug_info_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)analyze_debug_info_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_message_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)analyze_debug_info_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_extract_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_add_item_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_input_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_add_item_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_digits_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_add_item_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = parse_and_process_items_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = parse_and_process_items_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = parse_and_process_items_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = parse_and_process_items_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_data_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_and_process_string_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_and_process_string_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_data_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_message_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_unsigned_from_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = extract_values_from_string_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_error_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_data_structure_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_data_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_message_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_error_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_data_structure_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)get_file_content_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_error_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "dcgettext",
                "malloc",
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00113fb0",
                "xrealloc",
                "strchr",
                "FUN_00112904",
                "cplus_demangle_mangled_name",
                "FUN_00113da9",
                "FUN_0010afd5",
                "strcat",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_00112b6e",
                "xmalloc",
                "FUN_00113b98",
                "strspn",
                "strncmp",
                "FUN_00113cb9",
                "sprintf",
                "strlen",
                "FUN_00113bfa",
                "strcpy",
                "strcmp",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00109ab1",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00109be3",
                "FUN_00113d6e",
                "FUN_00108e76",
                "free",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00108fe8",
                "FUN_00113c43",
                "FUN_00113e5e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010914e",
                "FUN_00113dfe",
                "strstr",
                "FUN_00113d3a",
                "strtol",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "concat",
                "FUN_0010d21c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stabType",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *stabType;\n  int counter;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stabType = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabType);\n      if (stabName == 0) {\n        if (*stabType == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stabType != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fprintf",
                "bfd_get_stab_name",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_entries_0010a083",
                "param_1": "entry_pointer"
            },
            "code": "\nvoid process_entries_0010a083(long entry_pointer)\n\n{\n  process_entries_0010a083_00109ed3(entry_pointer,0x2a,4,entry_pointer + 0x178,entry_pointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_set_data_00109c2e",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "result",
                "lVar1": "newSize",
                "plVar2": "ptr",
                "lVar3": "remaining",
                "puVar4": "ptrByte",
                "uVar5": "currentSize",
                "bVar6": "overflow",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndSetData_00109c2e(long data,long value,ulong size,int flag,undefined4 *output,\n            undefined8 result)\n\n{\n  long newSize;\n  long *ptr;\n  long remaining;\n  undefined *ptrByte;\n  ulong currentSize;\n  byte overflow;\n  undefined returnValue [16];\n  \n  overflow = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(data + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newSize = xrealloc(*(undefined8 *)(data + 0x1a8),currentSize * 0x18);\n    *(long *)(data + 0x1a8) = newSize;\n    ptrByte = (undefined *)(*(long *)(data + 0x1b0) * 0x18 + newSize);\n    for (remaining = (currentSize - *(long *)(data + 0x1b0)) * 0x18; remaining != 0; remaining = remaining + -1) {\n      *ptrByte = 0;\n      ptrByte = ptrByte + (ulong)overflow * -2 + 1;\n    }\n    *(ulong *)(data + 0x1b0) = currentSize;\n  }\n  ptr = (long *)(size * 0x18 + *(long *)(data + 0x1a8));\n  if (*ptr == 0) {\n    newSize = *(long *)(data + 0x68);\n    *ptr = newSize;\n    *(long *)(data + 0x68) = newSize + 1;\n    ptr[1] = value;\n    *(int *)(ptr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(ptr + 2) = 0;\n    *(undefined4 *)((long)ptr + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)ptr + 0x14);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = *ptr;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_set_data_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid printErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  printErrorAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_memory_00112996",
                "param_1": "memoryParam",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "addressOffset",
                "initialize_memory_00112925": "initializeMemoryHelper",
                "_stderr": "standardError"
            },
            "code": "\n\n\nundefined8 initializeMemory_00112996(long memoryParam,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long addressOffset;\n  \n  if ((*(long *)(memoryParam + 8) != 0) && (*(long *)(memoryParam + 0x10) != 0)) {\n    addressOffset = *(long *)(memoryParam + 0x10) + 0x10;\n    if (*(long *)(memoryParam + 0x20) != 0) {\n      addressOffset = *(long *)(memoryParam + 0x20) + 0x28;\n    }\n    result = initializeMemory_00112996Helper(addressOffset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(standardError,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "find_or_create_class_0010c7a0",
                "param_1": "class_pointer",
                "param_2": "class_name",
                "param_3": "type_pointer",
                "uVar1": "return_value",
                "uVar2": "new_class_id",
                "lVar3": "type_descriptor",
                "piVar4": "type_kind",
                "__s1": "existing_class_name",
                "cVar5": "comparison_result",
                "iVar6": "counter",
                "puVar7": "current_class",
                "auVar8": "return_array"
            },
            "code": "\nundefined  [16] find_or_create_class_0010c7a0(long class_pointer,char *class_name,int *type_pointer,undefined8 param_4)\n\n{\n  undefined8 return_value;\n  uint new_class_id;\n  long type_descriptor;\n  int *type_kind;\n  char *existing_class_name;\n  char comparison_result;\n  int counter;\n  undefined8 *current_class;\n  undefined return_array [16];\n  \n  if (3 < *type_pointer - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  type_descriptor = *(long *)(type_pointer + 4);\n  current_class = (undefined8 *)(ulong)*(uint *)(type_descriptor + 0xc);\n  if (*(uint *)(type_descriptor + 0xc) <= *(uint *)(class_pointer + 0x38)) {\n    for (current_class = *(undefined8 **)(class_pointer + 0x50); current_class != (undefined8 *)0x0;\n        current_class = (undefined8 *)*current_class) {\n      type_kind = (int *)current_class[1];\n      if (*type_kind == *type_pointer) {\n        existing_class_name = (char *)current_class[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            comparison_result = compare_with_parameters_0010922b(class_pointer,type_kind,type_pointer);\n            if (comparison_result != '\\0') {\n              new_class_id = *(uint *)(*(long *)(current_class[1] + 0x10) + 0xc);\n              current_class = (undefined8 *)(ulong)new_class_id;\n              *(uint *)(type_descriptor + 0xc) = new_class_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (counter = strcmp(existing_class_name,class_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(class_pointer + 0x34) + 1;\n    *(int *)(class_pointer + 0x34) = counter;\n    *(int *)(type_descriptor + 0xc) = counter;\n    current_class = (undefined8 *)xmalloc(0x18);\n    return_value = *(undefined8 *)(class_pointer + 0x50);\n    current_class[2] = class_name;\n    *(undefined8 **)(class_pointer + 0x50) = current_class;\n    *current_class = return_value;\n    current_class[1] = type_pointer;\n  }\nLAB_0010c884:\n  return_array._1_7_ = (undefined7)((ulong)current_class >> 8);\n  return_array[0] = 1;\n  return_array._8_8_ = param_4;\n  return return_array;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strcmp",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "find_or_create_class_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_with_parameters_0010922b",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "pointerToPointer1",
                "ppcVar4": "pointerToPointer2",
                "ppcVar5": "pointerToPointer3",
                "lVar6": "localVar1",
                "lVar7": "localVar2",
                "lVar8": "localVar3",
                "pcVar9": "pointerVar1",
                "pcVar10": "pointerVar2",
                "cVar11": "charVar",
                "bVar12": "boolVar",
                "iVar13": "intVar",
                "uVar14": "undefinedVar1",
                "uVar15": "undefinedVar2",
                "puVar16": "pointerToUndefined1",
                "puVar17": "pointerToUndefined2",
                "plVar18": "pointer1",
                "lVar19": "localVar4",
                "plVar20": "pointer2",
                "plVar21": "pointer3",
                "lVar22": "localVar5",
                "local_70": "localPointer1",
                "local_58": "localPointer2",
                "plStack_50": "pointerOnStack",
                "local_48": "localVar6"
            },
            "code": "\nbyte compareWithParameters_0010922b(long param1,long *param2,long *param3)\n\n{\n  uint value1;\n  uint value2;\n  long **pointerToPointer1;\n  char **pointerToPointer2;\n  char **pointerToPointer3;\n  long localVar1;\n  long localVar2;\n  long localVar3;\n  char *pointerVar1;\n  char *pointerVar2;\n  char charVar;\n  byte boolVar;\n  int intVar;\n  undefined8 undefinedVar1;\n  undefined8 undefinedVar2;\n  undefined8 *pointerToUndefined1;\n  undefined8 *pointerToUndefined2;\n  long *pointer1;\n  long localVar4;\n  long *pointer2;\n  long *pointer3;\n  long localVar5;\n  long *localPointer1;\n  undefined8 *localPointer2;\n  long *pointerOnStack;\n  long *localVar6;\n  \n  pointer1 = param3;\n  if (param2 == (long *)0x0) {\nLAB_00109241:\n    return param3 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (pointer1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)param2;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)param3, value2 == 1) {\n      param3 = **(long ***)param3[2];\n      if (param3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (param2 == param3) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    param2 = *(long **)(param2[2] + 8);\n    if (param2 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    param3 = *(long **)(param3[2] + 8);\n    pointer1 = param3;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*param2 != *param3) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(param2 + 2) == *(char *)(param3 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  localPointer2 = *(undefined8 **)(param1 + 0x58);\n  for (pointerToUndefined2 = localPointer2; pointerToUndefined2 != (undefined8 *)0x0; pointerToUndefined2 = (undefined8 *)*pointerToUndefined2) {\n    if (((long *)pointerToUndefined2[1] == param2) && ((long *)pointerToUndefined2[2] == param3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &localPointer2;\n  pointerOnStack = param2;\n  localVar6 = param3;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    pointer1 = (long *)param2[2];\n    pointerToPointer1 = (long **)param3[2];\n    if (pointer1 == (long *)0x0) {\n      boolVar = pointerToPointer1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointerToPointer1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)pointer1 + 0xc)) &&\n       (*(uint *)((long)pointer1 + 0xc) == *(uint *)((long)pointerToPointer1 + 0xc))) goto LAB_001097af;\n    pointerToUndefined2 = (undefined8 *)*pointer1;\n    localPointer1 = *pointerToPointer1;\n    if (((pointerToUndefined2 == (undefined8 *)0x0) == (localPointer1 == (long *)0x0)) &&\n       ((((pointer1[2] == 0) == (pointerToPointer1[2] == (long *)0x0) &&\n         ((pointer1[3] == 0) == (pointerToPointer1[3] == (long *)0x0))) &&\n        ((pointer1[4] == 0) == (pointerToPointer1[4] == (long *)0x0))))) {\n      if (pointerToUndefined2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((pointer1[4] != 0) &&\n           (charVar = compareWithParameters_0010922b(param1,pointer1[4],pointerToPointer1[4]), charVar == '\\0'))\n        goto LAB_00109382;\n        pointer3 = (long *)pointer1[2];\n        if (pointer3 == (long *)0x0) {\nLAB_00109540:\n          pointerToUndefined2 = (undefined8 *)pointer1[3];\n          if (pointerToUndefined2 == (undefined8 *)0x0) goto LAB_001097af;\n          pointer1 = pointerToPointer1[3];\n          while( true ) {\n            pointerToPointer3 = (char **)*pointerToUndefined2;\n            if (pointerToPointer3 == (char **)0x0) {\n              boolVar = *pointer1 == 0;\n              goto LAB_001099c4;\n            }\n            pointerToPointer2 = (char **)*pointer1;\n            if (pointerToPointer2 == (char **)0x0) break;\n            if ((**pointerToPointer3 != **pointerToPointer2) || (intVar = strcmp(*pointerToPointer3,*pointerToPointer2), intVar != 0))\n            break;\n            pointerVar1 = pointerToPointer3[1];\n            pointerVar2 = pointerToPointer2[1];\n            if ((pointerVar1 == (char *)0x0) != (pointerVar2 == (char *)0x0)) break;\n            if (pointerVar1 != (char *)0x0) {\n              localVar5 = 0;\n              while( true ) {\n                pointerToPointer3 = *(char ***)(pointerVar1 + localVar5);\n                pointerToPointer2 = *(char ***)(pointerVar2 + localVar5);\n                if (pointerToPointer3 == (char **)0x0) break;\n                if (pointerToPointer2 == (char **)0x0) goto LAB_00109382;\n                if ((((**pointerToPointer3 != **pointerToPointer2) ||\n                     ((((ulong)pointerToPointer3[2] ^ (ulong)pointerToPointer2[2]) & 0xffffffffffff) != 0)) ||\n                    ((pointerToPointer3[3] != pointerToPointer2[3] ||\n                     ((((pointerToPointer3[4] == (char *)0x0) != (pointerToPointer2[4] == (char *)0x0) ||\n                       (intVar = strcmp(*pointerToPointer3,*pointerToPointer2), intVar != 0)) ||\n                      (charVar = compareWithParameters_0010922b(param1,pointerToPointer3[1],pointerToPointer2[1]), charVar == '\\0')))))) ||\n                   ((pointerToPointer3[4] != (char *)0x0 &&\n                    (charVar = compareWithParameters_0010922b(param1,pointerToPointer3[4],pointerToPointer2[4]), charVar == '\\0'))))\n                goto LAB_00109382;\n                localVar5 = localVar5 + 8;\n              }\n              if (pointerToPointer2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            pointerToUndefined2 = pointerToUndefined2 + 1;\n            pointer1 = pointer1 + 1;\n          }\n        }\n        else {\n          pointer2 = pointerToPointer1[2];\n          for (; pointerToUndefined2 = (undefined8 *)*pointer3, pointerToUndefined2 != (undefined8 *)0x0;\n              pointer3 = pointer3 + 1) {\n            pointerToUndefined1 = (undefined8 *)*pointer2;\n            if ((((pointerToUndefined1 == (undefined8 *)0x0) ||\n                 (((pointerToUndefined2[1] ^ pointerToUndefined1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(pointerToUndefined2 + 2) != *(int *)(pointerToUndefined1 + 2))) ||\n               (charVar = compareWithParameters_0010922b(param1,*pointerToUndefined2,*pointerToUndefined1), charVar == '\\0'))\n            goto LAB_00109382;\n            pointer2 = pointer2 + 1;\n          }\n          if (*pointer2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; pointerToPointer3 = (char **)*pointerToUndefined2, pointerToPointer3 != (char **)0x0; pointerToUndefined2 = pointerToUndefined2 + 1) {\n          pointerToPointer2 = (char **)*localPointer1;\n          if (pointerToPointer2 == (char **)0x0) goto LAB_00109382;\n          pointerVar1 = *pointerToPointer2;\n          pointerVar2 = *pointerToPointer3;\n          if ((*pointerVar2 != *pointerVar1) ||\n             ((((ulong)pointerToPointer3[2] ^ (ulong)pointerToPointer2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)pointerToPointer3 + 0x14) == '\\0') {\n            if (pointerToPointer3[3] == pointerToPointer2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          intVar = strcmp(pointerToPointer3[3],pointerToPointer2[3]);\n          if (intVar != 0) goto LAB_00109382;\nLAB_00109480:\n          intVar = strcmp(pointerVar2,pointerVar1);\n          if (((intVar != 0) || (pointerToPointer3[1] == (char *)0x0)) || (pointerToPointer2[1] == (char *)0x0))\n          goto LAB_00109382;\n          undefinedVar1 = analyze_debug_info_00112b6e(pointerToPointer2[1],0);\n          undefinedVar2 = analyze_debug_info_00112b6e(pointerToPointer3[1],0);\n          charVar = compareWithParameters_0010922b(param1,undefinedVar2,undefinedVar1);\n          if (charVar == '\\0') goto LAB_00109382;\n          localPointer1 = localPointer1 + 1;\n        }\n        if (*localPointer1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    pointer1 = (long *)param2[2];\n    pointer3 = (long *)param3[2];\n    if (pointer1 == (long *)0x0) {\n      boolVar = pointer3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (pointer3 == (long *)0x0) goto LAB_00109382;\n    localVar5 = *pointer1;\n    localVar1 = *pointer3;\n    localVar4 = 0;\n    localVar2 = pointer1[1];\n    localVar3 = pointer3[1];\n    do {\n      pointerVar1 = *(char **)(localVar5 + localVar4);\n      if (pointerVar1 == (char *)0x0) {\n        boolVar = *(long *)(localVar1 + localVar4) == 0;\n        goto LAB_001099c1;\n      }\n      pointerVar2 = *(char **)(localVar1 + localVar4);\n      if (((pointerVar2 == (char *)0x0) || (*pointerVar1 != *pointerVar2)) ||\n         (*(long *)(localVar2 + localVar4) != *(long *)(localVar3 + localVar4))) break;\n      intVar = strcmp(pointerVar1,pointerVar2);\n      localVar4 = localVar4 + 8;\n    } while (intVar == 0);\nLAB_00109964:\n    boolVar = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    boolVar = compareWithParameters_0010922b(param1,param2[2],param3[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)param2[2] + 2) == *(char *)((undefined8 *)param3[2] + 2)) &&\n       (charVar = compareWithParameters_0010922b(param1,*(undefined8 *)param2[2],*(undefined8 *)param3[2]),\n       charVar != '\\0')) {\n      pointer1 = *(long **)(param2[2] + 8);\n      pointer3 = *(long **)(param3[2] + 8);\n      if ((pointer1 == (long *)0x0) == (pointer3 == (long *)0x0)) {\n        if (pointer1 == (long *)0x0) goto LAB_001097af;\n        while (((*pointer1 != 0 && (*pointer3 != 0)) &&\n               (charVar = compareWithParameters_0010922b(param1), charVar != '\\0'))) {\n          pointer1 = pointer1 + 1;\n          pointer3 = pointer3 + 1;\n        }\nLAB_0010995d:\n        if (*pointer1 != 0) goto LAB_00109964;\n        boolVar = *pointer3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    pointerToUndefined2 = (undefined8 *)param3[2];\n    pointerToUndefined1 = (undefined8 *)param2[2];\n    boolVar = 0;\n    if ((pointerToUndefined1[1] == pointerToUndefined2[1]) && (pointerToUndefined1[2] == pointerToUndefined2[2])) {\nLAB_00109862:\n      boolVar = compareWithParameters_0010922b(param1,*pointerToUndefined1,*pointerToUndefined2);\n    }\n    break;\n  case 0x10:\n    pointerToUndefined2 = (undefined8 *)param3[2];\n    pointerToUndefined1 = (undefined8 *)param2[2];\n    boolVar = 0;\n    if (((pointerToUndefined1[2] == pointerToUndefined2[2]) && (pointerToUndefined1[3] == pointerToUndefined2[3])) &&\n       (*(char *)(pointerToUndefined1 + 4) == *(char *)(pointerToUndefined2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    pointerToUndefined2 = (undefined8 *)param3[2];\n    pointerToUndefined1 = (undefined8 *)param2[2];\n    boolVar = 0;\n    if (*(char *)(pointerToUndefined1 + 1) == *(char *)(pointerToUndefined2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    charVar = compareWithParameters_0010922b(param1,*(undefined8 *)param2[2],*(undefined8 *)param3[2]);\n    boolVar = 0;\n    if (charVar != '\\0') {\n      boolVar = compareWithParameters_0010922b(param1,*(undefined8 *)(param2[2] + 8),*(undefined8 *)(param3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)param2[2] + 3) == *(char *)((undefined8 *)param3[2] + 3)) &&\n        (charVar = compareWithParameters_0010922b(param1,*(undefined8 *)param2[2],*(undefined8 *)param3[2]),\n        charVar != '\\0')) &&\n       (charVar = compareWithParameters_0010922b(param1,*(undefined8 *)(param2[2] + 8),\n                              *(undefined8 *)(param3[2] + 8)), charVar != '\\0')) {\n      pointer1 = *(long **)(param2[2] + 0x10);\n      pointer3 = *(long **)(param3[2] + 0x10);\n      if ((pointer1 == (long *)0x0) == (pointer3 == (long *)0x0)) {\n        if (pointer1 != (long *)0x0) {\n          while (((*pointer1 != 0 && (*pointer3 != 0)) &&\n                 (charVar = compareWithParameters_0010922b(param1), charVar != '\\0'))) {\n            pointer1 = pointer1 + 1;\n            pointer3 = pointer3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        boolVar = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    boolVar = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    pointer1 = (long *)param3[2];\n    pointer3 = (long *)param2[2];\n    intVar = strcmp(*(char **)(*pointer3 + 8),*(char **)(*pointer1 + 8));\n    boolVar = 0;\n    if (intVar == 0) {\n      boolVar = compareWithParameters_0010922b(param1,pointer3[1],pointer1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  boolVar = boolVar & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = localPointer2;\n  return boolVar;\ncode_r0x00109263:\n  param2 = **(long ***)param2[2];\n  pointer1 = param2;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "strcmp",
                "FUN_00112b6e",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "compare_with_parameters_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "formatFlag",
                "iVar2": "flags",
                "iVar3": "statResult",
                "ppcVar4": "archiveName",
                "lVar5": "readCount",
                "uVar6": "format",
                "__format": "errorMsgFormat",
                "puVar7": "tempDir",
                "piVar8": "errorCode",
                "uVar9": "errorMsg",
                "in_RAX": "initialOffset",
                "pcVar10": "filePath",
                "ppcVar11": "archiveFile",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunction",
                "lVar15": "remainingSize",
                "pcVar16": "tempPath",
                "psVar17": "fileStat",
                "unaff_R14": "fileList",
                "unaff_R15": "archive",
                "bVar18": "flag",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "paramStack8",
                "in_stack_00000010": "paramStack10",
                "in_stack_00000018": "paramStack18",
                "in_stack_00000020": "paramStack20",
                "in_stack_00000028": "paramStack28",
                "in_stack_00000030": "paramStack30",
                "in_stack_000000f8": "paramStackF8",
                "in_stack_00000110": "paramStack110"
            },
            "code": "\nvoid extractAndCopyArchive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char formatFlag;\n  int flags;\n  int statResult;\n  char **archiveName;\n  long readCount;\n  undefined8 format;\n  char *errorMsgFormat;\n  undefined8 *tempDir;\n  int *errorCode;\n  undefined8 errorMsg;\n  long initialOffset;\n  char *filePath;\n  char **archiveFile;\n  long fileSize;\n  void *buffer;\n  code *closeFunction;\n  long remainingSize;\n  char *tempPath;\n  stat *fileStat;\n  undefined8 *fileList;\n  char **archive;\n  byte flag;\n  undefined8 returnAddress;\n  undefined8 *paramStack8;\n  long *paramStack10;\n  char *paramStack18;\n  undefined8 *paramStack20;\n  undefined8 paramStack28;\n  undefined8 paramStack30;\n  uint paramStackF8;\n  long paramStack110;\n  \n  flag = 0;\n  filePath = (char *)(initialOffset + 1);\n  do {\n    if (*filePath == '/') {\n      extractAndCopyArchive_001052a2();\n      return;\n    }\n    while (*filePath == '\\0') {\n      filePath = (char *)concat(paramStack18,&DAT_0011b47d);\n      statResult = stat(filePath,(stat *)&stack0x00000050);\n      tempDir = fileList;\n      if (-1 < statResult) {\n        fileSize = create_temp_directory_0011a0e0(filePath);\n        free(filePath);\n        if (fileSize == 0) {\n          errorCode = __errno_location();\n          filePath = strerror(*errorCode);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(errorMsg,filePath);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        filePath = *archive;\n        *tempDir = fileList;\n        tempDir[2] = 0;\n        tempDir[1] = fileSize;\n        filePath = (char *)concat(fileSize,&DAT_0011b47d,filePath);\n      }\n      statResult = 0;\n      if (DAT_001279eb != '\\0') {\n        fileStat = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&fileStat->st_dev = 0;\n          fileStat = (stat *)((long)fileStat + (ulong)flag * -8 + 4);\n        }\n        archiveFile = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archiveFile = archive;\n        }\n        statResult = (**(code **)(archiveFile[1] + 0x1e8))(archive,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          tempPath = *archive;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(errorMsg,tempPath);\n        }\n      }\n      fileList = (undefined8 *)xmalloc(0x18);\n      fileList[1] = filePath;\n      *fileList = tempDir;\n      fileList[2] = 0;\n      formatFlag = bfd_check_format(archive,1);\n      if (formatFlag == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,archive,0,errorMsg);\n        archiveFile = (char **)bfd_openw(filePath,paramStack28);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archiveName = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archiveName = archive;\n        }\n        flags = (**(code **)(archiveName[1] + 0x1e8))(archive,&stack0x000000e0);\n        fileSize = paramStack110;\n        if (flags == 0) {\n          if (paramStack110 < 0) {\n            errorMsg = FUN_001125fa(archive);\n            format = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(format,errorMsg);\n          }\n          else {\n            flags = bfd_seek(archive,0,0);\n            if (flags == 0) {\n              if (DAT_001279e9 != '\\0') {\n                tempPath = *archiveFile;\n                errorMsg = FUN_001125fa(archive);\n                errorMsgFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(errorMsgFormat,errorMsg,tempPath);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - remainingSize) {\n                remainingSize = 0x2000;\n                if (fileSize < 0x2001) {\n                  remainingSize = fileSize;\n                }\n                readCount = bfd_bread(buffer,remainingSize,archive);\n                archiveName = archive;\n                if ((remainingSize != readCount) ||\n                   (readCount = bfd_bwrite(buffer,remainingSize,archiveFile), archiveName = archiveFile, remainingSize != readCount\n                   )) {\n                  print_error_message_001126c0(0,archiveName,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archiveFile,paramStackF8 | 0x100);\n              free(buffer);\n              formatFlag = bfd_close_all_done(archiveFile);\n              if (formatFlag == '\\0') {\n                print_error_message_001126c0(filePath,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = FUN_001125fa(archive);\n            FUN_0011a110(errorMsg);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,archive,0,0);\n        }\nLAB_00104f00:\n        formatFlag = bfd_close_all_done(archiveFile);\n        if (formatFlag == '\\0') {\n          print_error_message_001126c0(filePath,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(filePath);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (paramStack30._7_1_ == '\\0') {\n          archiveFile = (char **)bfd_openw(filePath,*(undefined8 *)archive[1]);\n        }\n        else {\n          archiveFile = (char **)bfd_openw(filePath,paramStack28);\n        }\n        if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(filePath,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatFlag = FUNC_00114e50(archive,archiveFile,returnAddress);\n        if (formatFlag == '\\0') {\n          flags = bfd_get_arch(archive);\n          if (flags == 0) goto LAB_00104d75;\n          formatFlag = bfd_close_all_done(archiveFile);\n          if (formatFlag == '\\0') {\n            print_error_message_001126c0(filePath,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatFlag = bfd_close(archiveFile);\n        if (formatFlag == '\\0') {\n          print_error_message_001126c0(filePath,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (statResult == 0)) {\n          set_file_timestamp_0011a350(filePath,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(filePath,paramStack28);\n        fileList[2] = fileSize;\n        *paramStack10 = fileSize;\n        paramStack10 = (long *)(fileSize + 0xf0);\n        archiveFile = (char **)bfd_openr_next_archived_file(paramStack20,archive);\n        bfd_close(archive);\n        archive = archiveFile;\n      }\n      if ((DAT_00127a40 != 0) || (archive == (char **)0x0)) {\n        *paramStack10 = 0;\n        buffer = (void *)xstrdup(*paramStack8);\n        if (DAT_00127a40 == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        formatFlag = (*closeFunction)(paramStack8);\n        if (formatFlag == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*paramStack20);\n        formatFlag = bfd_close(paramStack20);\n        if (formatFlag == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      filePath = *archive;\n      param3 = filePath;\n      if (*filePath == '/') goto LAB_0010527d;\n    }\n    tempPath = filePath;\n    if ((*filePath == '.') && (tempPath = filePath + 1, filePath[1] == '.')) {\n      tempPath = filePath + 2;\n      if ((filePath[2] == '\\0') || (filePath[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(errorMsg,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (fileList != (undefined8 *)0x0) {\n          if (fileList[2] == 0) {\n            rmdir((char *)fileList[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)fileList[1]);\n          }\n          free((void *)fileList[1]);\n          tempDir = (undefined8 *)*fileList;\n          free(fileList);\n          fileList = tempDir;\n        }\n        rmdir(paramStack18);\n        free(paramStack18);\n        return;\n      }\n    }\n    for (; (filePath = tempPath, *tempPath != '\\0' && (*tempPath != '/')); tempPath = tempPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "create_entry_0010e453",
                "param_1": "input_value",
                "param_2": "string_param",
                "param_3": "string_array_param",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "string_length",
                "__s": "formatted_string",
                "uVar4": "output_value",
                "lVar5": "total_length",
                "ppcVar6": "string_array",
                "lVar7": "array_index"
            },
            "code": "\nundefined8 create_entry_0010e453(long input_value,char *string_param,char **string_array_param)\n\n{\n  long length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 output_value;\n  long total_length;\n  char **string_array;\n  long array_index;\n  \n  if (string_array_param == (char **)0x0) {\n    if (string_param != (char *)0x0) {\n      string_length = strlen(string_param);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",string_param);\nLAB_0010e578:\n      result = create_entry_0010e453_00109b52(input_value,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    output_value = 0;\n  }\n  else {\n    total_length = 10;\n    string_array = string_array_param;\n    if (string_param != (char *)0x0) {\n      string_length = strlen(string_param);\n      total_length = string_length + 10;\n    }\n    for (; *string_array != (char *)0x0; string_array = string_array + 1) {\n      string_length = strlen(*string_array);\n      total_length = total_length + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(total_length);\n    if (string_param == (char *)0x0) {\n      *formatted_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(input_value + 0x68);\n      *(long *)(input_value + 0x68) = total_length + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",string_param,total_length);\n    }\n    array_index = 0;\n    while( true ) {\n      length = *(long *)((long)string_array_param + array_index);\n      string_length = strlen((char *)formatted_string);\n      if (length == 0) break;\n      array_index = array_index + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (string_param == (char *)0x0) goto LAB_0010e578;\n    result = process_bfd_hash_0010e2f0(input_value,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = create_formatted_entry_00109cf4(input_value,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    output_value = 1;\n  }\n  return output_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_entry_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "resize_and_set_data_00109d5c",
                "param_1": "inputData",
                "lVar1": "result",
                "uVar2": "formattedEntry"
            },
            "code": "\nundefined8 resizeAndSetData_00109d5c(undefined8 inputData)\n\n{\n  long result;\n  undefined8 formattedEntry;\n  \n  result = resize_and_set_data_00109c2e();\n  if (-1 < result) {\n    formattedEntry = create_formatted_entry_00109cf4(inputData,result,0);\n    return formattedEntry;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "resize_and_set_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "process_data_0010ed2c",
                "param_1": "data_ptr",
                "param_2": "new_size",
                "param_3": "unused_param",
                "cVar1": "result",
                "iVar2": "counter",
                "extraout_RDX": "extra_out",
                "uVar3": "value",
                "in_R10": "unused_param2",
                "auVar4": "result_value"
            },
            "code": "\nundefined  [16] process_data_0010ed2c(long data_ptr,ulong new_size,undefined8 unused_param)\n\n{\n  char result;\n  int counter;\n  undefined8 extra_out;\n  ulong value;\n  undefined8 unused_param2;\n  undefined result_value [16];\n  \n  if (*(ulong *)(data_ptr + 0x1f0) < new_size) {\n    *(ulong *)(data_ptr + 0x1f0) = new_size;\n  }\n  if (*(long *)(data_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data_ptr + 0x1f8) != 0) {\n      counter = *(int *)(data_ptr + 0x1f8) + -1;\n      value = CONCAT71((int7)((ulong)unused_param >> 8),1);\n      *(int *)(data_ptr + 0x1f8) = counter;\n      if (counter != 0) {\n        result_value = process_bfd_hash_0010e2f0(data_ptr,0xe0,0,new_size - *(long *)(data_ptr + 0x200),0,unused_param2);\n        return result_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_bfd_hash_0010e2f0(data_ptr,0xc0,0,*(long *)(data_ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data_ptr + 0x208) = 0xffffffffffffffff;\n      unused_param = extra_out;\n      goto LAB_0010ed78;\n    }\n  }\n  value = 0;\nLAB_0010edae:\n  result_value._0_8_ = value & 0xffffffff;\n  result_value._8_8_ = unused_param2;\n  return result_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "firstArray",
                "param_2": "secondArray",
                "uVar1": "firstArrayLength",
                "uVar2": "secondArrayLength",
                "iVar3": "comparisonResult",
                "extraout_var": "extraOutVar",
                "uVar4": "combinedResult",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *firstArray,ulong *secondArray,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong firstArrayLength;\n  ulong secondArrayLength;\n  int comparisonResult;\n  undefined4 extraOutVar;\n  ulong combinedResult;\n  undefined result [16];\n  \n  combinedResult = *firstArray;\n  if (*secondArray <= *firstArray) {\n    combinedResult = *secondArray;\n  }\n  comparisonResult = memcmp((void *)(firstArray[3] + 3),(void *)(secondArray[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraOutVar,comparisonResult);\n  if (comparisonResult == 0) {\n    firstArrayLength = firstArray[8];\n    if (firstArrayLength < secondArray[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      secondArrayLength = secondArray[8];\n      if (secondArrayLength < firstArray[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (secondArray[7] <= firstArray[7]) {\n          if (secondArrayLength < firstArrayLength) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (secondArrayLength <= firstArrayLength) {\n              if (firstArray[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(secondArray[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(secondArray[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = combinedResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "build_attribute_notes_parser_001163d0",
                "param_1": "param_elf_header",
                "param_2": "param_program_header",
                "param_3": "param_size",
                "param_4": "param_output_buffer",
                "uVar1": "result",
                "uVar2": "elf_header_value",
                "uVar3": "program_header_value",
                "bVar4": "loop_condition",
                "puVar5": "previous_record",
                "iVar6": "memcmp_result",
                "uVar7": "error_message",
                "lVar8": "error_message_length",
                "__ptr": "relocation_buffer",
                "uVar9": "start_address",
                "uVar10": "name_length",
                "uVar11": "uvar11",
                "uVar12": "uvar12",
                "uVar13": "aligned_name_length",
                "uVar14": "temp_var1",
                "uVar15": "temp_var2",
                "uVar16": "total_size",
                "puVar17": "current_record",
                "puVar18": "current_ptr",
                "cVar19": "key",
                "puVar20": "current_destination_ptr",
                "iVar21": "loop_counter",
                "puVar22": "current_input_ptr",
                "puVar23": "next_record",
                "uVar24": "temp_var3",
                "__nmemb": "num_records",
                "puVar25": "temp_var4",
                "bVar26": "empty_byte",
                "local_88": "local_variable1",
                "uStack_80": "local_variable2",
                "local_70": "local_variable3",
                "local_68": "output_length",
                "local_60": "records_buffer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong build_attribute_notes_parser_001163d0(undefined8 *param_elf_header,undefined8 *param_program_header,ulong param_size,undefined *param_output_buffer)\n\n{\n  ulong result;\n  undefined8 elf_header_value;\n  undefined8 program_header_value;\n  bool loop_condition;\n  ulong *previous_record;\n  int memcmp_result;\n  undefined8 error_message;\n  long error_message_length;\n  void *relocation_buffer;\n  ulong start_address;\n  ulong name_length;\n  ulong uvar11;\n  ulong uvar12;\n  undefined *relocation_buffer_00;\n  ulong aligned_name_length;\n  ulong temp_var1;\n  ulong temp_var2;\n  ulong total_size;\n  ulong *current_record;\n  undefined *current_ptr;\n  char key;\n  undefined *current_destination_ptr;\n  int loop_counter;\n  undefined *current_input_ptr;\n  ulong *next_record;\n  ulong temp_var3;\n  size_t num_records;\n  ulong *temp_var4;\n  byte empty_byte;\n  ulong local_variable1;\n  ulong local_variable2;\n  ulong local_variable3;\n  ulong output_length;\n  ulong *records_buffer;\n  \n  empty_byte = 0;\n  error_message_length = bfd_get_reloc_upper_bound();\n  output_length = param_size;\n  if (0 < error_message_length) {\n    relocation_buffer = (void *)xmalloc(error_message_length);\n    error_message_length = bfd_canonicalize_reloc(param_elf_header,param_program_header,relocation_buffer,DAT_001278d0);\n    free(relocation_buffer);\n    if (error_message_length != 0) {\n      if (_DAT_001264c0 == 0) {\n        elf_header_value = *param_elf_header;\n        program_header_value = *param_program_header;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(error_message,elf_header_value,program_header_value);\n      }\n      records_buffer = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  records_buffer = (ulong *)xcalloc(param_size / 0xc,0x48,param_size % 0xc);\n  local_variable1 = 0;\n  local_variable3 = 0;\n  total_size = param_size;\n  temp_var2 = 0;\n  next_record = records_buffer;\n  temp_var1 = 0;\n  current_input_ptr = param_output_buffer;\n  while (0xb < total_size) {\n    name_length = (**(code **)(param_elf_header[1] + 0x40))(current_input_ptr);\n    *next_record = name_length;\n    name_length = (**(code **)(param_elf_header[1] + 0x40))(current_input_ptr + 4);\n    next_record[1] = name_length;\n    uvar11 = (**(code **)(param_elf_header[1] + 0x40))(current_input_ptr + 8);\n    name_length = *next_record;\n    next_record[2] = uvar11;\n    uvar12 = next_record[1];\n    aligned_name_length = name_length + 3 & 0xfffffffffffffffc;\n    next_record[6] = aligned_name_length;\n    if (uvar12 != (uvar12 + 3 & 0xfffffffffffffffc)) {\n      error_message_length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uvar11 - 0x100) {\n      error_message_length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = aligned_name_length + uvar12 + 0xc;\n    if (total_size < result) {\n      error_message_length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (name_length < 2) {\n      error_message_length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    next_record[3] = (ulong)(current_input_ptr + 0xc);\n    next_record[4] = (ulong)(current_input_ptr + aligned_name_length + 0xc);\n    total_size = total_size + (-0xc - (aligned_name_length + uvar12));\n    if (name_length != 2) {\n      if (current_input_ptr[0xc] == '$') {\n        if ((current_input_ptr[0xd] == '\\x01') && (current_input_ptr[0xe] == '1')) {\n          total_size = parse_build_attribute_notes_00116490();\n          return total_size;\n        }\n      }\n      else if ((((4 < name_length) && (current_input_ptr[0xc] == 'G')) && (current_input_ptr[0xd] == 'A')) &&\n              ((current_input_ptr[0xe] == '$' && (current_input_ptr[0xf] == '\\x01')))) {\n        if (current_input_ptr[0x10] == '2') {\n          total_size = parse_build_attribute_notes_00116490();\n          return total_size;\n        }\n        if (current_input_ptr[0x10] == '3') {\n          total_size = parse_build_attribute_notes_00116490();\n          return total_size;\n        }\n        error_message_length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    start_address = temp_var2;\n    temp_var3 = temp_var1;\n    if (uvar12 == 0) {\n      if (uvar11 == 0x100) {\n        next_record[7] = local_variable1;\nLAB_001164af:\n        uvar12 = temp_var1;\n        temp_var3 = temp_var1;\n      }\n      else {\n        next_record[7] = local_variable3;\nLAB_0011669e:\n        start_address = temp_var2;\n        uvar12 = temp_var2;\n      }\n    }\n    else {\n      if (uvar12 != 0x10) {\n        if (uvar12 < 0x11) {\n          if (uvar12 == 4) {\n            uvar11 = (**(code **)(param_elf_header[1] + 0x40))();\n            uvar12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (uvar12 == 8) {\n            total_size = parse_build_attribute_notes_001086af();\n            return total_size;\n          }\n        }\n        error_message_length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      uvar11 = (**(code **)(param_elf_header[1] + 0x28))(current_input_ptr + aligned_name_length + 0xc);\n      uvar12 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (uvar12 < uvar11) {\n        uvar11 = uvar12;\n      }\nLAB_00116631:\n      if (next_record[2] == 0x100) {\n        if (uvar11 == 0) {\n          uvar11 = local_variable1;\n        }\n        name_length = *next_record;\n        next_record[7] = uvar11;\n        temp_var3 = uvar12;\n        local_variable1 = uvar11;\n        if (uvar12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uvar11 == 0) {\n          uvar11 = local_variable3;\n        }\n        name_length = *next_record;\n        next_record[7] = uvar11;\n        start_address = uvar12;\n        local_variable3 = uvar11;\n        if (uvar12 == 0) goto LAB_0011669e;\n      }\n    }\n    next_record[8] = uvar12;\n    if (*(char *)((next_record[3] - 1) + name_length) != '\\0') {\n      error_message_length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    next_record = next_record + 9;\n    temp_var2 = start_address;\n    temp_var1 = temp_var3;\n    current_input_ptr = current_input_ptr + result;\n  }\n  if (total_size == 0) {\n    elf_header_value = *param_elf_header;\n    program_header_value = *param_program_header;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(error_message,elf_header_value,program_header_value);\n    num_records = ((long)next_record - (long)records_buffer >> 3) * -0x71c71c71c71c71c7;\n    qsort(records_buffer,num_records,0x48,compare_memory_0011a1b0);\n    for (current_record = records_buffer; current_record < next_record; current_record = current_record + 9) {\n      total_size = current_record[2];\n      if (total_size != 0) {\n        temp_var2 = current_record[7];\n        temp_var1 = current_record[8];\n        temp_var4 = current_record;\n        loop_counter = 0;\n        if (temp_var2 == temp_var1) {\n          current_record[2] = 0;\n        }\n        else {\n          do {\n            do {\n              previous_record = temp_var4;\n              temp_var4 = previous_record + -9;\n              if (temp_var4 < records_buffer) goto LAB_001167f5;\n              name_length = previous_record[-7];\n            } while (name_length == 0);\n            if ((*temp_var4 != *current_record) ||\n               (memcmp_result = memcmp((void *)previous_record[-6],(void *)current_record[3],*current_record), memcmp_result != 0)) break;\n            uvar12 = previous_record[-2];\n            uvar11 = previous_record[-1];\n            if (temp_var2 == uvar12) {\n              if (temp_var1 == uvar11) {\n                current_record[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp_var1 <= uvar11) {\n                current_record[2] = 0;\n                break;\n              }\n              if (uvar11 < temp_var2) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < uvar11) || (temp_var2 <= (uvar11 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((total_size == 0x101) == (name_length == 0x101)) {\n                if (uvar11 <= temp_var1) {\n                  uvar11 = temp_var1;\n                }\n                if (uvar12 < temp_var2) {\n                  temp_var2 = uvar12;\n                }\n                previous_record[-1] = uvar11;\n                previous_record[-2] = temp_var2;\n                current_record[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (uvar12 <= temp_var2) goto LAB_001167a6;\n              if (uvar11 < temp_var2) goto LAB_0010852c;\n              if (temp_var1 < temp_var2) {\n                if ((0xfffffffffffffff0 < temp_var1) || (uvar12 <= (temp_var1 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp_var1 != uvar11) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            loop_condition = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (loop_condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(records_buffer,num_records,0x48,compare_records_0011a250);\n    relocation_buffer_00 = (undefined *)xmalloc(param_size * 2);\n    local_variable2 = 0;\n    local_variable3 = 0;\n    current_input_ptr = relocation_buffer_00;\n    for (current_record = records_buffer; current_record < next_record; current_record = current_record + 9) {\n      if (current_record[2] != 0) {\n        current_ptr = current_input_ptr + 0xc;\n        if ((current_record[7] == local_variable3) && (current_record[8] == local_variable2)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*current_record,current_input_ptr);\n          (**(code **)(param_elf_header[1] + 0x50))(0,current_input_ptr + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(current_record[2],current_input_ptr + 8);\n          temp_var2 = current_record[6];\n          total_size = *current_record;\n          current_input_ptr = (undefined *)current_record[3];\n          current_destination_ptr = current_ptr;\n          for (temp_var1 = total_size; temp_var1 != 0; temp_var1 = temp_var1 - 1) {\n            *current_destination_ptr = *current_input_ptr;\n            current_input_ptr = current_input_ptr + (ulong)empty_byte * -2 + 1;\n            current_destination_ptr = current_destination_ptr + (ulong)empty_byte * -2 + 1;\n          }\n          if (total_size < temp_var2) {\n            for (error_message_length = temp_var2 - total_size; error_message_length != 0; error_message_length = error_message_length + -1) {\n              *current_destination_ptr = 0;\n              current_destination_ptr = current_destination_ptr + (ulong)empty_byte * -2 + 1;\n            }\n          }\n          current_input_ptr = current_ptr + temp_var2;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            key = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            key = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(key,current_input_ptr + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(current_record[2],current_input_ptr + 8);\n          total_size = *current_record;\n          current_input_ptr = (undefined *)current_record[3];\n          current_destination_ptr = current_ptr;\n          for (temp_var2 = total_size; temp_var2 != 0; temp_var2 = temp_var2 - 1) {\n            *current_destination_ptr = *current_input_ptr;\n            current_input_ptr = current_input_ptr + (ulong)empty_byte * -2 + 1;\n            current_destination_ptr = current_destination_ptr + (ulong)empty_byte * -2 + 1;\n          }\n          temp_var2 = current_record[6];\n          if (total_size < temp_var2) {\n            for (error_message_length = temp_var2 - total_size; error_message_length != 0; error_message_length = error_message_length + -1) {\n              *current_destination_ptr = 0;\n              current_destination_ptr = current_destination_ptr + (ulong)empty_byte * -2 + 1;\n            }\n          }\n          error_message_length = param_elf_header[1];\n          current_ptr = current_ptr + temp_var2;\n          current_input_ptr = current_ptr + 8;\n          if ((*(int *)(error_message_length + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message_length + 0x38))(current_record[7],current_ptr);\n            (**(code **)(param_elf_header[1] + 0x38))(current_record[8],current_input_ptr);\n            current_input_ptr = current_ptr + 0x10;\n          }\n          else {\n            (**(code **)(error_message_length + 0x50))(current_record[7],current_ptr);\n            (**(code **)(param_elf_header[1] + 0x50))(current_record[8],current_ptr + 4);\n          }\n          local_variable3 = current_record[7];\n          local_variable2 = current_record[8];\n        }\n      }\n    }\n    temp_var2 = (long)current_input_ptr - (long)relocation_buffer_00;\n    total_size = temp_var2;\n    current_input_ptr = relocation_buffer_00;\n    output_length = param_size;\n    if (temp_var2 < param_size) {\n      for (; output_length = temp_var2, total_size != 0; total_size = total_size - 1) {\n        *param_output_buffer = *current_input_ptr;\n        current_input_ptr = current_input_ptr + (ulong)empty_byte * -2 + 1;\n        param_output_buffer = param_output_buffer + (ulong)empty_byte * -2 + 1;\n      }\n    }\n    free(relocation_buffer_00);\n  }\n  else {\n    error_message_length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (error_message_length != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,param_elf_header,param_program_header,error_message_length);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(records_buffer);\n  return output_length;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "build_attribute_notes_parser_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_message_00108a2a",
                "param_1": "outputFile",
                "param_2": "errorCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageMessage_00108a2a(FILE *outputFile,int errorCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "FUN_00104a35",
                "exit",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_binary_header_00108c86",
                "param_1": "binary_header",
                "cVar1": "comparison_result",
                "iVar2": "string_comparison_result",
                "sVar3": "string_length",
                "puVar4": "parsed_header",
                "lVar5": "offset",
                "__s": "header_string",
                "__s1": "architecture_string",
                "puVar6": "parsed_header_ptr",
                "uVar7": "return_value",
                "bVar8": "counter"
            },
            "code": "\nundefined8 parse_binary_header_00108c86(long *binary_header)\n\n{\n  char comparison_result;\n  int string_comparison_result;\n  size_t string_length;\n  undefined2 *parsed_header;\n  long offset;\n  char *header_string;\n  char *architecture_string;\n  undefined2 *parsed_header_ptr;\n  undefined8 return_value;\n  byte counter;\n  \n  counter = 0;\n  offset = *binary_header;\n  header_string = (char *)(offset + 4);\n  comparison_result = compare_strings_00113fb0(header_string,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = compare_strings_00113fb0(header_string,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = compare_strings_00113fb0(header_string,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      header_string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      header_string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(header_string);\n  parsed_header = (undefined2 *)xmalloc(string_length + 8);\n  architecture_string = header_string + 4;\n  parsed_header_ptr = parsed_header;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)parsed_header_ptr = *header_string;\n    header_string = header_string + (ulong)counter * -2 + 1;\n    parsed_header_ptr = (undefined2 *)((long)parsed_header_ptr + (ulong)counter * -2 + 1);\n  }\n  *(undefined *)(parsed_header + 1) = 0x69;\n  *parsed_header = 0x6570;\n  string_comparison_result = strcmp(architecture_string,\"ia32\");\n  if (string_comparison_result == 0) {\n    *(undefined *)((long)parsed_header + 7) = 0x36;\n    *(undefined2 *)((long)parsed_header + 5) = 0x3833;\n  }\n  else {\n    string_comparison_result = strcmp(architecture_string,\"x86_64\");\n    if (string_comparison_result == 0) {\n      *(undefined *)((long)parsed_header + 7) = 0x2d;\n    }\n    else {\n      string_comparison_result = strcmp(architecture_string,\"aarch64\");\n      if (string_comparison_result == 0) {\n        *(undefined8 *)((long)parsed_header + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *binary_header = (long)parsed_header;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_binary_header_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_and_close_001053d5",
                "unaff_R12": "ptrData",
                "unaff_R14": "ptrFunction",
                "print_error_0011a110": "printErrorMessage",
                "bfd_close_all_done": "closeBfdAllDone"
            },
            "code": "\nundefined4 printErrorAndClose_001053d5(void)\n\n{\n  long ptrData;\n  undefined8 *ptrFunction;\n  \n  printErrorMessage(*ptrFunction);\n  *(undefined4 *)(ptrData + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptrData + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_and_close_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_alter_flags_00104bba",
                "in_EAX": "eaxValue",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value"
            },
            "code": "\nvoid validateAndAlterFlags_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_and_alter_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "index",
                "puVar3": "destPtr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long index;\n  undefined *destPtr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (index = (long)length; index != 0; index = index + -1) {\n    *destPtr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    destPtr = destPtr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "param_3": "extra_param_1",
                "param_4": "extra_param_2",
                "uVar1": "error_msg",
                "plVar2": "allocated_slot",
                "lVar3": "partial_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "is_initial_slot",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_ptr,ulong slot_index,undefined8 extra_param_1,undefined8 extra_param_2)\n\n{\n  undefined8 error_msg;\n  long *allocated_slot;\n  long partial_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte is_initial_slot;\n  undefined return_value [16];\n  \n  is_initial_slot = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        allocated_slot = (long *)xmalloc(0x88);\n        *slot_ptr = allocated_slot;\n        for (partial_offset = 0x22; partial_offset != 0; partial_offset = partial_offset + -1) {\n          *(undefined4 *)allocated_slot = 0;\n          allocated_slot = (long *)((long)allocated_slot + (ulong)is_initial_slot * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    partial_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      partial_offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      allocated_slot = (long *)xmalloc(0x88);\n      *slot_ptr = allocated_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)allocated_slot = 0;\n        allocated_slot = (long *)((long)allocated_slot + (ulong)is_initial_slot * -8 + 4);\n      }\n    }\n    return_value._8_8_ = extra_param_2;\n    return_value._0_8_ = *slot_ptr + slot_index + partial_offset + 1;\n    return return_value;\n  }\n  error_msg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(error_msg,slot_index);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "puVar2": "tempPointer",
                "lVar3": "counter",
                "bVar4": "dynamicOffset"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 dataPointer,undefined flag,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *tempPointer;\n  long counter;\n  byte dynamicOffset;\n  \n  dynamicOffset = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  tempPointer = memoryBlock;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)tempPointer = 0;\n    tempPointer = (undefined8 *)((long)tempPointer + (ulong)dynamicOffset * -8 + 4);\n  }\n  *memoryBlock = dataPointer;\n  *(undefined *)(memoryBlock + 1) = flag;\n  memoryBlock[2] = param3;\n  memoryBlock[3] = param4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  tempPointer = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = tempPointer;\n  *tempPointer = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_item_00109b2f"
            },
            "code": "\nundefined8 * extract_next_item_00109b2f(long param_1)\n\n{\n  undefined8 *__ptr;\n  undefined8 *puVar1;\n  \n  __ptr = *(undefined8 **)(param_1 + 0x60);\n  if (__ptr != (undefined8 *)0x0) {\n    puVar1 = (undefined8 *)__ptr[1];\n    *(undefined8 *)(param_1 + 0x60) = *__ptr;\n    free(__ptr);\n    return puVar1;\n  }\n  return __ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e5db",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010e9a0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e918"
            ],
            "imported": false,
            "current_name": "extract_next_item_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_and_insert_symbol_00108d9a",
                "param_1": "input_file",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_pair",
                "pcVar2": "symbol_duplicate",
                "lVar3": "symbol_exists",
                "uVar4": "error_message",
                "plVar5": "slot_address"
            },
            "code": "\nundefined8 check_and_insert_symbol_00108d9a(undefined8 input_file,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *symbol_duplicate;\n  long symbol_exists;\n  undefined8 error_message;\n  long *slot_address;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  symbol_duplicate = strdup(symbol_name);\n  *symbol_pair = symbol_duplicate;\n  symbol_duplicate = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_pair[1] = symbol_duplicate;\n  symbol_exists = htab_find(error_message,symbol_pair);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,symbol_name);\n  }\n  symbol_exists = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,target_symbol);\n  }\n  slot_address = (long *)htab_find_slot(DAT_001278f0,symbol_pair,1);\n  error_message = DAT_001278e8;\n  *slot_address = (long)symbol_pair;\n  symbol_duplicate = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,symbol_duplicate,1);\n  *symbol_pair = symbol_duplicate;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_insert_symbol_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_item_0010e9a0",
                "param_1": "item_count",
                "param_2": "item_name",
                "param_3": "item_type",
                "param_4": "item_data",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "next_item",
                "__s_00": "new_item",
                "sVar3": "item_name_length",
                "sVar4": "next_item_length",
                "__s_01": "item_with_type",
                "pcVar5": "item_type_str",
                "uVar6": "type_code"
            },
            "code": "\nundefined4 process_item_0010e9a0(long item_count,char *item_name,undefined4 item_type,undefined8 item_data)\n\n{\n  long count;\n  undefined4 result;\n  byte *next_item;\n  byte *new_item;\n  size_t item_name_length;\n  size_t next_item_length;\n  char *item_with_type;\n  char *item_type_str;\n  undefined8 type_code;\n  \n  next_item = (byte *)extract_next_item_00109b2f();\n  switch(item_type) {\n  case 1:\n    item_type_str = \"G\";\n    type_code = 0x20;\n    break;\n  case 2:\n    item_type_str = \"S\";\n    type_code = 0x26;\n    break;\n  case 3:\n    item_type_str = \"V\";\n    type_code = 0x26;\n    break;\n  case 4:\n    item_type_str = \"\";\n    type_code = 0x80;\n    if (((&_sch_istable)[(ulong)*next_item * 2] & 4) == 0) {\n      count = *(long *)(item_count + 0x68);\n      *(long *)(item_count + 0x68) = count + 1;\n      item_name_length = strlen((char *)next_item);\n      new_item = (byte *)xmalloc(item_name_length + 0x14);\n      sprintf((char *)new_item,\"%ld=%s\",count,next_item);\n      free(next_item);\n      next_item = new_item;\n    }\n    break;\n  case 5:\n    item_type_str = \"r\";\n    type_code = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  item_name_length = strlen(item_name);\n  next_item_length = strlen((char *)next_item);\n  item_with_type = (char *)xmalloc(item_name_length + 3 + next_item_length);\n  sprintf(item_with_type,\"%s:%s%s\",item_name,item_type_str,next_item);\n  free(next_item);\n  result = process_bfd_hash_0010e2f0(item_count,type_code,0,item_data,item_with_type);\n  if ((char)result != '\\0') {\n    free(item_with_type);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_item_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_error_and_exit_0010827b",
                "unaff_RBX": "section_pointer",
                "uVar1": "section_value",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_and_exit_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  \n  section_value = *section_pointer;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_0010827b_00119dd0(error_message,section_value);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_error_00104920",
                "uVar1": "errorString",
                "dcgettext": "getLocalizedMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid handleBadNumberError_00104920(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printErrorAndExit(errorString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_error_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_string_hash_table_00113f20",
                "htab_create_alloc": "createStringHashTable",
                "htab_hash_string": "stringHashFunction",
                "htab_eq_string": "stringEqualityFunction",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeStringHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,stringEqualityFunction,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "xcalloc",
                "free",
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_string_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "input_pointer",
                "unaff_RBP": "base_pointer",
                "unaff_R12": "data_pointer",
                "unaff_R14B": "is_not_zero",
                "unaff_R15": "output_pointer",
                "lVar1": "gettext_result",
                "lVar2": "data_value",
                "cVar3": "result",
                "lVar4": "failure_message",
                "lVar5": "value_from_data"
            },
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long gettext_result;\n  long data_value;\n  char result;\n  long failure_message;\n  long value_from_data;\n  long input_pointer;\n  long base_pointer;\n  long data_pointer;\n  char is_not_zero;\n  long output_pointer;\n  \n  failure_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(output_pointer + 0xb4) = *(undefined4 *)(input_pointer + 0xb4);\n  *(byte *)(output_pointer + 0x28) =\n       *(byte *)(output_pointer + 0x28) & 0xcf | *(byte *)(input_pointer + 0x28) & 0x30;\n  *(long *)(input_pointer + 0x60) = output_pointer;\n  *(undefined8 *)(input_pointer + 0x58) = 0;\n  if ((*(byte *)(input_pointer + 0x27) & 2) != 0) {\n    gettext_result = *(long *)(input_pointer + 0xd0);\n    value_from_data = get_value_from_data_00115d00(gettext_result,*(undefined8 *)(input_pointer + 0xe0));\n    if ((value_from_data != 0) &&\n       (data_value = *(long *)(data_pointer + 8), *(uint *)(value_from_data + 0x18) = *(uint *)(value_from_data + 0x18) | 0x20,\n       *(int *)(data_value + 8) == 5)) {\n      *(long *)(gettext_result + 0xb0) = value_from_data;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (is_not_zero != '\\0') {\n    *(undefined4 *)(*(long *)(output_pointer + 0xd0) + 4) = 8;\n  }\n  if (failure_message != 0) {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "get_file_content_00109022",
                "param_1": "fileDescriptor",
                "param_2": "typeIndices",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "typeIndex",
                "pcVar2": "errorMsg",
                "plVar3": "fileContent",
                "lVar4": "loopCounter",
                "uVar5": "typeFileNum",
                "pplVar6": "fileContentPtrPtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] getFileContent_00109022(long fileDescriptor,uint *typeIndices,undefined8 param3,undefined8 param4)\n\n{\n  uint typeIndex;\n  char *errorMsg;\n  long *fileContent;\n  long loopCounter;\n  uint typeFileNum;\n  long **fileContentPtrPtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  typeFileNum = *typeIndices;\n  typeIndex = typeIndices[1];\n  if (((int)typeFileNum < 0) || (*(uint *)(fileDescriptor + 0x80) <= typeFileNum)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)typeFileNum);\n  }\n  else {\n    if (-1 < (int)typeIndex) {\n      fileContentPtrPtr = (long **)(*(long *)(fileDescriptor + 0x88) + (long)(int)typeFileNum * 8);\n      for (typeFileNum = typeIndex; 0xf < (int)typeFileNum; typeFileNum = typeFileNum - 0x10) {\n        if (*fileContentPtrPtr == (long *)0x0) {\n          fileContent = (long *)xmalloc(0x88);\n          *fileContentPtrPtr = fileContent;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileContent = 0;\n            fileContent = (long *)((long)fileContent + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileContentPtrPtr = (long **)*fileContentPtrPtr;\n      }\n      if (*fileContentPtrPtr == (long *)0x0) {\n        fileContent = (long *)xmalloc(0x88);\n        *fileContentPtrPtr = fileContent;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileContent = 0;\n          fileContent = (long *)((long)fileContent + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileContent = *fileContentPtrPtr + (long)(int)((typeIndex >> 4) * -0x10 + typeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)typeIndex);\n  }\n  fileContent = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = fileContent;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_file_content_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_0010c05d",
                "param_1": "filePtr",
                "param_2": "recordSize",
                "param_3": "fileOffset",
                "param_4": "recordType",
                "param_5": "ptr1",
                "param_6": "ptr2",
                "auVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "recordArray",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "memoryPtr",
                "piVar7": "tempPtr",
                "bVar8": "tempFlag",
                "auVar9": "returnResult"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariableDebug_0010c05d(long filePtr,long recordSize,ulong fileOffset,int recordType,undefined8 ptr1,\n            undefined8 ptr2)\n\n{\n  undefined result [16];\n  undefined8 returnValue;\n  int *recordArray;\n  char flag;\n  long counter;\n  long memoryPtr;\n  int *tempPtr;\n  byte tempFlag;\n  undefined returnResult [16];\n  \n  tempFlag = 0;\n  if (recordSize == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = fileOffset;\n    return result << 0x40;\n  }\n  if (fileOffset != 0) {\n    if ((*(long *)(filePtr + 8) == 0) || (memoryPtr = *(long *)(filePtr + 0x10), memoryPtr == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (recordType - 1U < 2) {\n        memoryPtr = memoryPtr + 0x10;\n        flag = (recordType == 1) + '\\x01';\n      }\n      else if (*(long *)(filePtr + 0x20) == 0) {\n        memoryPtr = memoryPtr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        memoryPtr = *(long *)(filePtr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      memoryPtr = initialize_memory_00112925(memoryPtr,recordSize,2,flag);\n      if (memoryPtr != 0) {\n        recordArray = (int *)xmalloc(0x18);\n        tempPtr = recordArray + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *tempPtr = 0;\n          tempPtr = tempPtr + (ulong)tempFlag * -2 + 1;\n        }\n        *recordArray = recordType;\n        returnValue = 1;\n        *(ulong *)(recordArray + 2) = fileOffset;\n        *(undefined8 *)(recordArray + 4) = ptr1;\n        *(int **)(memoryPtr + 0x20) = recordArray;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  returnResult._8_8_ = ptr2;\n  returnResult._0_8_ = returnValue;\n  return returnResult;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_variable_debug_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_entry_00109d97",
                "param_1": "entryPointer",
                "lVar1": "currentValue",
                "local_40": "formattedEntry"
            },
            "code": "\nvoid processEntry_00109d97(long entryPointer)\n\n{\n  long currentValue;\n  char formattedEntry [40];\n  \n  if (*(long *)(entryPointer + 0x70) != 0) {\n    create_formatted_entry_00109cf4(entryPointer,*(long *)(entryPointer + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(entryPointer + 0x68);\n  *(long *)(entryPointer + 0x68) = currentValue + 1;\n  sprintf(formattedEntry,\"%ld=%ld\",currentValue,currentValue);\n  create_entry_00109b52(entryPointer,formattedEntry,currentValue,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entry_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "parse_build_attribute_notes_001086af",
                "in_RCX": "param_1",
                "unaff_RBX": "param_2",
                "unaff_RBP": "param_3",
                "unaff_R12": "param_4",
                "unaff_R13": "param_5",
                "unaff_retaddr": "param_6",
                "param_13": "param_12",
                "param_14": "param_13",
                "bVar22": "byteVar",
                "puVar5": "ptrVar1",
                "iVar6": "intVar1",
                "lVar7": "longVar1",
                "uVar1": "ulongVar1",
                "uVar2": "ulongVar2",
                "uVar3": "ulongVar3",
                "bVar4": "boolVar1",
                "puVar15": "ptrVar2",
                "iVar23": "intVar2",
                "uVar8": "ulongVar4",
                "uVar9": "ulongVar5",
                "uVar10": "ulongVar6",
                "uVar11": "ulongVar7",
                "uVar12": "ulongVar8",
                "uVar13": "ulongVar9",
                "uVar14": "ulongVar10",
                "uVar20": "ulongVar11",
                "puVar16": "ptrVar3",
                "cVar17": "charVar1",
                "puVar18": "ptrVar4",
                "puVar19": "ptrVar5",
                "unaff_R14": "param_14",
                "__ptr": "ptrVar6",
                "__nmemb": "sizeVar",
                "unaff_R12[4]": "param_4[4]",
                "puVar15[2]": "param_4[2]",
                "puVar15[3]": "param_4[3]",
                "puVar15[7]": "param_4[7]",
                "puVar15[8]": "param_4[8]",
                "puVar15[10]": "param_4[10]",
                "puVar21": "ptrVar7",
                "puVar15[6]": "param_4[6]"
            },
            "code": "\nulong parseBuildAttributeNotes_001086af(void)\n\n{\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  undefined8 ulongVar3;\n  bool boolVar1;\n  ulong *ptrVar1;\n  int intVar1;\n  long longVar1;\n  undefined8 ulongVar4;\n  ulong ulongVar5;\n  ulong ulongVar6;\n  ulong ulongVar7;\n  undefined *ptrVar6;\n  ulong param_1;\n  ulong ulongVar8;\n  ulong ulongVar9;\n  ulong ulongVar10;\n  ulong param_2;\n  ulong param_3;\n  ulong *ptrVar2;\n  undefined *ptrVar3;\n  char charVar1;\n  undefined *ptrVar4;\n  undefined *ptrVar5;\n  ulong *param_4;\n  ulong param_5;\n  ulong ulongVar11;\n  size_t sizeVar;\n  undefined8 *param_14;\n  ulong *ptrVar7;\n  byte byteVar;\n  int intVar2;\n  ulong param_6;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_12;\n  undefined8 *param_13;\n  \n  byteVar = 0;\n  param_7 = param_1;\n  ulongVar5 = (**(code **)(param_14[1] + 0x40))();\n  ulongVar6 = (**(code **)(param_14[1] + 0x40))(param_4[4] + 4);\nLAB_0011662a:\n  ulongVar9 = param_3;\n  ulongVar11 = param_5;\n  if (ulongVar6 < ulongVar5) {\n    ulongVar5 = ulongVar6;\n  }\n  do {\n    ulongVar7 = param_7;\n    ulongVar8 = param_7;\n    ptrVar2 = param_4;\n    if (param_4[2] == 0x100) {\n      if (ulongVar5 == 0) {\n        ulongVar5 = param_6;\n      }\n      ulongVar10 = *param_4;\n      param_4[7] = ulongVar5;\n      param_3 = ulongVar9;\n      param_5 = ulongVar6;\n      param_6 = ulongVar5;\n      if (ulongVar6 == 0) goto LAB_001164af;\n    }\n    else {\n      if (ulongVar5 == 0) {\n        ulongVar5 = param_9;\n      }\n      ulongVar10 = *param_4;\n      param_4[7] = ulongVar5;\n      param_3 = ulongVar6;\n      param_5 = ulongVar11;\n      param_9 = ulongVar5;\n      if (ulongVar6 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    param_4[8] = ulongVar6;\n    if (*(char *)((param_4[3] - 1) + ulongVar10) != '\\0') {\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    param_4 = ptrVar2 + 9;\n    if (param_2 < 0xc) {\n      if (param_2 != 0) {\n        longVar1 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_12 | param_8) != 0) {\n        if (((param_12 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_12 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        longVar1 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      ulongVar2 = *param_14;\n      ulongVar3 = *param_13;\n      ulongVar4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(ulongVar4,ulongVar2,ulongVar3);\nLAB_0011671b:\n      sizeVar = ((long)param_4 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,sizeVar,0x48,compare_memory_0011a1b0);\n      ptrVar2 = param_11;\n      goto LAB_001167f9;\n    }\n    ulongVar6 = (**(code **)(param_14[1] + 0x40))(ulongVar8);\n    *param_4 = ulongVar6;\n    ulongVar6 = (**(code **)(param_14[1] + 0x40))(ulongVar8 + 4);\n    param_4[10] = ulongVar6;\n    ulongVar5 = (**(code **)(param_14[1] + 0x40))(ulongVar8 + 8);\n    ulongVar10 = *param_4;\n    ptrVar2[0xb] = ulongVar5;\n    ulongVar6 = param_4[10];\n    ulongVar9 = ulongVar10 + 3 & 0xfffffffffffffffc;\n    ptrVar2[0xf] = ulongVar9;\n    if (ulongVar6 != (ulongVar6 + 3 & 0xfffffffffffffffc)) {\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < ulongVar5 - 0x100) {\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    ulongVar7 = ulongVar9 + ulongVar6 + 0xc;\n    if (param_2 < ulongVar7) {\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (ulongVar10 < 2) {\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar2[0xc] = ulongVar8 + 0xc;\n    ulongVar1 = ulongVar8 + 0xc + ulongVar9;\n    ptrVar2[0xd] = ulongVar1;\n    param_2 = param_2 + (-0xc - (ulongVar9 + ulongVar6));\n    ulongVar7 = ulongVar8 + ulongVar7;\n    if (ulongVar10 != 2) {\n      if (*(char *)(ulongVar8 + 0xc) == '$') {\n        if ((*(char *)(ulongVar8 + 0xd) == '\\x01') && (*(char *)(ulongVar8 + 0xe) == '1')) {\n          ulongVar6 = parse_build_attribute_notes_00116490();\n          return ulongVar6;\n        }\n      }\n      else if ((((4 < ulongVar10) && (*(char *)(ulongVar8 + 0xc) == 'G')) &&\n               (*(char *)(ulongVar8 + 0xd) == 'A')) &&\n              ((*(char *)(ulongVar8 + 0xe) == '$' && (*(char *)(ulongVar8 + 0xf) == '\\x01')))) {\n        if (*(char *)(ulongVar8 + 0x10) == '2') {\n          ulongVar6 = parse_build_attribute_notes_00116490();\n          return ulongVar6;\n        }\n        if (*(char *)(ulongVar8 + 0x10) == '3') {\n          ulongVar6 = parse_build_attribute_notes_00116490();\n          return ulongVar6;\n        }\n        longVar1 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    ulongVar9 = param_3;\n    ulongVar11 = param_5;\n    if (ulongVar6 == 0) {\n      if (ulongVar5 == 0x100) {\n        ptrVar2[0x10] = param_6;\nLAB_001164af:\n        ulongVar8 = ulongVar7;\n        ulongVar6 = ulongVar11;\n        ptrVar2 = param_4;\n        param_5 = ulongVar11;\n      }\n      else {\n        ptrVar2[0x10] = param_9;\nLAB_0011669e:\n        param_3 = ulongVar9;\n        ulongVar8 = ulongVar7;\n        ulongVar6 = ulongVar9;\n        ptrVar2 = param_4;\n        param_5 = ulongVar11;\n      }\n      goto LAB_001164bb;\n    }\n    if (ulongVar6 == 0x10) break;\n    if (0x10 < ulongVar6) {\nLAB_00116679:\n      longVar1 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (longVar1 != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,param_14,param_13,longVar1);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (ulongVar6 != 4) {\n      if (ulongVar6 == 8) {\n        ulongVar6 = parseBuildAttributeNotes_001086af();\n        return ulongVar6;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = ulongVar7;\n    ulongVar5 = (**(code **)(param_14[1] + 0x40))();\n    ulongVar6 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = ulongVar7;\n  ulongVar5 = (**(code **)(param_14[1] + 0x28))(ulongVar1);\n  ulongVar6 = (**(code **)(param_14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (param_4 <= ptrVar2) {\n    qsort(param_11,sizeVar,0x48,compare_records_0011a250);\n    ptrVar6 = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    ptrVar5 = ptrVar6;\n    for (ptrVar2 = param_11; ptrVar2 < param_4; ptrVar2 = ptrVar2 + 9) {\n      if (param_4[2] != 0) {\n        ptrVar4 = ptrVar5 + 4;\n        ptrVar3 = ptrVar5 + 0xc;\n        if ((param_4[7] == param_9) && (param_4[8] == param_7)) {\n          (**(code **)(param_14[1] + 0x50))(*ptrVar2,ptrVar5);\n          (**(code **)(param_14[1] + 0x50))(0,ptrVar4);\n          (**(code **)(param_14[1] + 0x50))(param_4[2],ptrVar5 + 8);\n          ulongVar5 = param_4[6];\n          ulongVar6 = *ptrVar2;\n          ptrVar5 = (undefined *)param_4[3];\n          ptrVar4 = ptrVar3;\n          for (ulongVar9 = ulongVar6; ulongVar9 != 0; ulongVar9 = ulongVar9 - 1) {\n            *ptrVar4 = *ptrVar5;\n            ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n            ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n          }\n          if (ulongVar6 < ulongVar5) {\n            for (longVar1 = ulongVar5 - ulongVar6; longVar1 != 0; longVar1 = longVar1 + -1) {\n              *ptrVar4 = 0;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          ptrVar5 = ptrVar3 + ulongVar5;\n        }\n        else {\n          (**(code **)(param_14[1] + 0x50))();\n          if (*(int *)(param_14[1] + 8) == 5) {\n            charVar1 = (*(char *)(param_14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar1 = '\\b';\n          }\n          (**(code **)(param_14[1] + 0x50))(charVar1,ptrVar4);\n          (**(code **)(param_14[1] + 0x50))(param_4[2],ptrVar5 + 8);\n          ulongVar6 = *ptrVar2;\n          ptrVar5 = (undefined *)param_4[3];\n          ptrVar4 = ptrVar3;\n          for (ulongVar5 = ulongVar6; ulongVar5 != 0; ulongVar5 = ulongVar5 - 1) {\n            *ptrVar4 = *ptrVar5;\n            ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n            ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n          }\n          ulongVar5 = param_4[6];\n          if (ulongVar6 < ulongVar5) {\n            for (longVar1 = ulongVar5 - ulongVar6; longVar1 != 0; longVar1 = longVar1 + -1) {\n              *ptrVar4 = 0;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          longVar1 = param_14[1];\n          ptrVar3 = ptrVar3 + ulongVar5;\n          ptrVar5 = ptrVar3 + 8;\n          if ((*(int *)(longVar1 + 8) == 5) && (*(char *)(param_14[0x22] + 4) == '\\x02')) {\n            (**(code **)(longVar1 + 0x38))(param_4[7],ptrVar3);\n            (**(code **)(param_14[1] + 0x38))(param_4[8],ptrVar5);\n            ptrVar5 = ptrVar3 + 0x10;\n          }\n          else {\n            (**(code **)(longVar1 + 0x50))(param_4[7],ptrVar3);\n            (**(code **)(param_14[1] + 0x50))(param_4[8],ptrVar3 + 4);\n          }\n          param_9 = param_4[7];\n          param_7 = param_4[8];\n        }\n      }\n    }\n    ulongVar5 = (long)ptrVar5 - (long)ptrVar6;\n    ulongVar6 = ulongVar5;\n    ptrVar5 = ptrVar6;\n    if (ulongVar5 < param_10) {\n      for (; param_10 = ulongVar5, ulongVar6 != 0; ulongVar6 = ulongVar6 - 1) {\n        *in_stack_00000030 = *ptrVar5;\n        ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(ptrVar6);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (param_4[2] != 0) {\n    ulongVar6 = param_4[7];\n    ulongVar5 = param_4[8];\n    ulongVar9 = param_4[2];\n    ptrVar7 = ptrVar2;\n    intVar2 = 0;\n    if (ulongVar6 == ulongVar5) {\n      param_4[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptrVar1 = ptrVar7;\n          ptrVar7 = ptrVar1 + -9;\n          if (ptrVar7 < param_11) goto LAB_001167f5;\n          ulongVar11 = ptrVar1[-7];\n        } while (ulongVar11 == 0);\n        param_7 = ulongVar9;\n        if ((*ptrVar7 != *ptrVar2) ||\n           (intVar1 = memcmp((void *)ptrVar1[-6],(void *)param_4[3],*ptrVar2), intVar1 != 0)) break;\n        ulongVar9 = ptrVar1[-2];\n        ulongVar7 = ptrVar1[-1];\n        if (ulongVar6 == ulongVar9) {\n          if (ulongVar5 == ulongVar7) {\n            param_4[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (ulongVar5 <= ulongVar7) {\n            param_4[2] = 0;\n            break;\n          }\n          if (ulongVar7 < ulongVar6) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < ulongVar7) || (ulongVar6 <= (ulongVar7 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (ulongVar11 == 0x101)) {\n            if (ulongVar7 <= ulongVar5) {\n              ulongVar7 = ulongVar5;\n            }\n            if (ulongVar9 < ulongVar6) {\n              ulongVar6 = ulongVar9;\n            }\n            ptrVar1[-1] = ulongVar7;\n            ptrVar1[-2] = ulongVar6;\n            param_4[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (ulongVar9 <= ulongVar6) goto LAB_001167a6;\n          if (ulongVar7 < ulongVar6) goto LAB_0010852c;\n          if (ulongVar5 < ulongVar6) {\n            if ((0xfffffffffffffff0 < ulongVar5) || (ulongVar9 <= (ulongVar5 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (ulongVar5 != ulongVar7) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        boolVar1 = intVar2 < 0x11;\n        ulongVar9 = param_7;\n        intVar2 = intVar2 + 1;\n      } while (boolVar1);\n    }\n  }\nLAB_001167f5:\n  ptrVar2 = ptrVar2 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010847a",
                "FUN_00116490",
                "bfd_set_error",
                "FUN_0011a1b0",
                "dcgettext",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "process_and_return_data_0010add5",
                "process_data_0010abdd": "process_data"
            },
            "code": "\nvoid process_and_return_data_0010add5(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_return_data_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_data_00113e17",
                "initialize_data_00112904": "initialize_data_function"
            },
            "code": "\nvoid initialize_data_00113e17(void)\n\n{\n  initialize_data_00113e17_function(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "create_entry_00109b52",
                "param_1": "entry_table",
                "param_2": "source_string",
                "param_3": "destination",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "temp_ptr",
                "puVar2": "new_entry",
                "uVar3": "duplicated_string"
            },
            "code": "\nundefined create_entry_00109b52(long entry_table,undefined8 source_string,undefined8 destination,undefined flag,\n                      undefined4 value)\n\n{\n  undefined8 temp_ptr;\n  undefined8 *new_entry;\n  undefined8 duplicated_string;\n  \n  new_entry = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  new_entry[2] = destination;\n  *(undefined (*) [16])(new_entry + 4) = ZEXT816(0);\n  *(undefined (*) [16])(new_entry + 6) = ZEXT816(0);\n  temp_ptr = *(undefined8 *)(entry_table + 0x60);\n  *(undefined *)((long)new_entry + 0x1c) = flag;\n  *(undefined4 *)(new_entry + 3) = value;\n  *(undefined8 **)(entry_table + 0x60) = new_entry;\n  *new_entry = temp_ptr;\n  new_entry[1] = duplicated_string;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e453",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109e76"
            ],
            "imported": false,
            "current_name": "create_entry_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_from_string_00109a32",
                "param_1": "stringPtr",
                "param_2": "errorFlagPtr",
                "param_3": "endOfString",
                "param_4": "unknown1",
                "param_5": "unknown2",
                "__nptr": "currentChar",
                "piVar1": "errnoPtr",
                "uVar2": "result",
                "uVar3": "localizedErrorMsg",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nparseUnsignedFromString_00109a32(char **stringPtr,undefined *errorFlagPtr,char *endOfString,undefined8 unknown1,undefined8 unknown2)\n\n{\n  char *currentChar;\n  int *errnoPtr;\n  ulong result;\n  undefined8 localizedErrorMsg;\n  undefined returnValue [16];\n  \n  if (errorFlagPtr != (undefined *)0x0) {\n    *errorFlagPtr = 0;\n  }\n  currentChar = *stringPtr;\n  if ((currentChar < endOfString) && (*currentChar != '\\0')) {\n    errnoPtr = __errno_location();\n    *errnoPtr = 0;\n    result = strtoul(currentChar,stringPtr,0);\n    if ((result != 0xffffffffffffffff) || (*errnoPtr == 0)) goto LAB_00109aa9;\n    if (errorFlagPtr == (undefined *)0x0) {\n      localizedErrorMsg = dcgettext(0,\"numeric overflow\",5);\n      print_warning_message_00108fe8(currentChar,localizedErrorMsg);\n    }\n    else {\n      *errorFlagPtr = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  returnValue._8_8_ = unknown2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_unsigned_from_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "validate_debug_tag_type_0010c6be",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_ptr",
                "iVar1": "comparison_result",
                "uVar2": "localized_string",
                "piVar3": "initialized_data",
                "pauVar4": "dynamic_array",
                "lVar5": "memory_offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * validate_debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag_ptr)\n\n{\n  int comparison_result;\n  undefined8 localized_string;\n  int *initialized_data;\n  undefined (*dynamic_array) [16];\n  long memory_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_ptr != 0x17) {\n        initialized_data = (int *)initialize_data_00112904(0x17,0);\n        if (initialized_data == (int *)0x0) {\n          return (int *)0x0;\n        }\n        dynamic_array = (undefined (*) [16])xmalloc(0x10);\n        memory_offset = *(long *)(file_handle + 0x10);\n        *dynamic_array = ZEXT816(0);\n        *(int **)(*dynamic_array + 8) = tag_ptr;\n        *(undefined (**) [16])(initialized_data + 4) = dynamic_array;\n        memory_offset = initialize_memory_00112925(memory_offset + 0x10,tag_name,1,3);\n        if (memory_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(memory_offset + 0x20) = initialized_data;\n        *(long *)*dynamic_array = memory_offset;\n        return initialized_data;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_ptr;\n      }\n    }\n    localized_string = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",localized_string);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "strcmp",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "validate_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result",
                "__format": "error_message",
                "lVar1": "demangled_string",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "count",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangled_string;\n  ulong index;\n  ulong capacity;\n  uint count;\n  char temp_buffer [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_string = FUNC_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (demangled_string == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      count = (int)index + 1;\n      if ((uint)capacity <= count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = demangled_string;\n      index = (ulong)count;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "param_ptr",
                "param_2": "binary_ptr",
                "uVar1": "section_name",
                "uVar2": "error_message",
                "lVar3": "section_ptr",
                "lVar4": "section",
                "print_error_and_exit_00119dd0": "print_error_and_exit"
            },
            "code": "\nlong extract_section_0011a2e0(long param_ptr,long binary_ptr)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_ptr;\n  long section;\n  \n  section_ptr = (**(code **)(*(long *)(binary_ptr + 8) + 0x208))(binary_ptr);\n  section = *(long *)(param_ptr + 0x20);\n  *(undefined8 *)(section_ptr + 8) = *(undefined8 *)(param_ptr + 8);\n  *(undefined8 *)(section_ptr + 0x10) = *(undefined8 *)(param_ptr + 0x10);\n  *(undefined4 *)(section_ptr + 0x18) = *(undefined4 *)(param_ptr + 0x18);\n  if (section == 0) {\n    section = 0x128598;\n  }\n  else {\n    section = bfd_get_section_by_name(binary_ptr);\n    if (section == 0) {\n      section_name = *(undefined8 *)(param_ptr + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit(error_message,section_name);\n    }\n  }\n  *(long *)(section_ptr + 0x20) = section;\n  return section_ptr;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_hash_0010e8a9",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "text",
                "uVar1": "hash_result",
                "sVar2": "text_length",
                "__s": "formatted_string"
            },
            "code": "\nundefined4 process_and_hash_0010e8a9(undefined8 source,undefined8 destination,char *text)\n\n{\n  undefined4 hash_result;\n  size_t text_length;\n  char *formatted_string;\n  \n  text_length = strlen(text);\n  formatted_string = (char *)xmalloc(text_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",source,text);\n  hash_result = process_bfd_hash_0010e2f0(destination,0x80,0,0,formatted_string);\n  if ((char)hash_result != '\\0') {\n    free(formatted_string);\n  }\n  return hash_result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_hash_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "process_section_flags_00104ad6",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionName",
                "unaff_RBP": "currentFlag",
                "__s": "currentChar",
                "sVar4": "length",
                "iVar1": "comparisonResult",
                "iVar5": "stringLength",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress",
                "pcVar3": "commaPosition"
            },
            "code": "\nundefined  [16] processSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentFlag;\n  char *currentChar;\n  size_t length;\n  int stringLength;\n  uint sectionFlags;\n  char *sectionName;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    currentChar = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (currentChar == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(currentChar,0x2c);\n              if (commaPosition == (char *)0x0) {\n                length = strlen(currentChar);\n                stringLength = (int)length;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                stringLength = (int)commaPosition - (int)currentChar;\n              }\n              length = (size_t)stringLength;\n              comparisonResult = strncasecmp(sectionName,currentChar,length);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              currentChar = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",currentChar,length);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            currentChar = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",currentChar,length);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          currentChar = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",currentChar,length);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        currentChar = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",currentChar,length);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",currentChar,length);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        currentChar = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",currentChar,length);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          currentChar = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",currentChar,length);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            currentChar = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",currentChar,length);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              currentChar = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",currentChar,length);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                currentChar = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",currentChar,length);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  currentChar = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",currentChar,length);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    currentChar = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",currentChar,length);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(stringLength + 1));\n                      strncpy(commaPosition,currentChar,length);\n                      commaPosition[length] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    currentChar = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00119dd0",
                "xmalloc",
                "strncpy",
                "strlen",
                "dcgettext",
                "strncasecmp",
                "FUN_00104ad6",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "process_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_is100_001087da",
                "in_RAX": "value",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRaxIs100_001087da(void)\n\n{\n  long value;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = value == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_is100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "binary_data",
                "param_2": "type_name",
                "param_3": "compilation_unit_msg",
                "param_4": "default_value",
                "lVar1": "compilation_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_msg",
                "puVar4": "current_data",
                "lVar5": "current_item",
                "puVar6": "unit_data",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long binary_data,char *type_name,undefined8 compilation_unit_msg,undefined8 default_value)\n\n{\n  long compilation_unit;\n  int comparison_result;\n  undefined8 error_msg;\n  undefined8 *current_data;\n  long current_item;\n  undefined8 *unit_data;\n  undefined result [16];\n  \n  compilation_unit = *(long *)(binary_data + 8);\n  if (compilation_unit == 0) {\n    error_msg = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_msg);\n  }\n  else {\n    for (current_item = *(long *)(binary_data + 0x20); current_item != 0; current_item = *(long *)(current_item + 8)) {\n      if (*(undefined8 **)(current_item + 0x28) != (undefined8 *)0x0) {\n        for (current_data = (undefined8 *)**(undefined8 **)(current_item + 0x28); current_data != (undefined8 *)0x0;\n            current_data = (undefined8 *)*current_data) {\n          if (*(int *)((long)current_data + 0x14) == 0) {\n            if (*(char *)current_data[1] == *type_name) {\n              comparison_result = strcmp((char *)current_data[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (unit_data = *(undefined8 **)(compilation_unit + 8); unit_data != (undefined8 *)0x0;\n        unit_data = (undefined8 *)*unit_data) {\n      if ((undefined8 *)unit_data[2] != (undefined8 *)0x0) {\n        for (current_data = *(undefined8 **)(undefined8 *)unit_data[2]; current_data != (undefined8 *)0x0;\n            current_data = (undefined8 *)*current_data) {\n          if (*(int *)((long)current_data + 0x14) == 0) {\n            if (*(char *)current_data[1] == *type_name) {\n              comparison_result = strcmp((char *)current_data[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_msg = 0;\nLAB_00109223:\n  result._8_8_ = default_value;\n  result._0_8_ = error_msg;\n  return result;\nLAB_00109216:\n  error_msg = current_data[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_ebp_value_0010829e",
                "unaff_EBP": "EBP_value",
                "check_string_length_00113ede": "check_string_length",
                "check_and_invert_result_001082b3": "check_and_invert_result"
            },
            "code": "\nundefined8 process_EBP_value_0010829e(void)\n\n{\n  undefined8 uVar1;\n  int EBP_value;\n  \n  if (EBP_value == 5) {\n    uVar1 = check_string_length();\n    return uVar1;\n  }\n  if ((EBP_value != 4) && (EBP_value == 6)) {\n    uVar1 = check_and_invert_result();\n    return uVar1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_ebp_value_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_strings_by_architecture_00104943",
                "in_RAX": "inputString",
                "iVar1": "intValue",
                "iVar2": "archIndex",
                "lVar3": "stringIndex",
                "sVar4": "stringLength",
                "pcVar5": "archString",
                "uVar6": "printableArch",
                "iVar7": "archRange",
                "lVar8": "startIndex",
                "iVar9": "outerIndex",
                "unaff_R15D": "defaultStringLength",
                "uVar10": "loopIndex",
                "uVar11": "archCount",
                "param_7": "stringCount",
                "uStack000000000000000c": "formattedStringLength",
                "param_11": "archParam",
                "param_13": "stringArray"
            },
            "code": "\n\n\nvoid printReverseStringsByArchitecture_00104943(void)\n\n{\n  int intValue;\n  int archIndex;\n  char *inputString;\n  long stringIndex;\n  size_t stringLength;\n  char *archString;\n  undefined8 printableArch;\n  int archRange;\n  long startIndex;\n  int outerIndex;\n  uint defaultStringLength;\n  ulong loopIndex;\n  uint archCount;\n  int stringCount;\n  uint formattedStringLength;\n  undefined8 archParam;\n  long stringArray;\n  \n  stringIndex = strtol(inputString,(char **)0x0,10);\n  intValue = (int)stringIndex;\n  outerIndex = stringCount;\n  formattedStringLength = defaultStringLength;\n  if (intValue == 0) {\n    intValue = 0x50;\n  }\n  do {\n    stringCount = outerIndex;\n    if (archParam._4_4_ <= stringCount) {\n      return;\n    }\n    startIndex = (long)stringCount;\n    archRange = (intValue - formattedStringLength) + -1;\n    stringIndex = startIndex;\n    do {\n      outerIndex = (int)stringIndex;\n      if (archParam._4_4_ <= outerIndex) break;\n      stringLength = strlen(*(char **)(stringArray + stringIndex * 0x60));\n      stringIndex = stringIndex + 1;\n      archRange = (archRange - (int)stringLength) + -1;\n    } while (-1 < archRange);\n    printf(\"\\n%*s\",(ulong)(formattedStringLength + 1),&DAT_0011b4a1);\n    for (stringIndex = startIndex * 0x60; ((ulong)(uint)(outerIndex - stringCount) + startIndex) * 0x60 - stringIndex != 0;\n        stringIndex = stringIndex + 0x60) {\n      printf(\"%s \",*(undefined8 *)(stringArray + stringIndex));\n    }\n    archRange = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(archRange,0);\n      archIndex = strcmp(archString,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        printableArch = bfd_printable_arch_mach(archRange,0);\n        printf(\"%*s \",(ulong)formattedStringLength,printableArch);\n        archCount = archRange - 2;\n        stringIndex = startIndex * 0x60;\n        archIndex = stringCount;\n        while (outerIndex != archIndex) {\n          archString = *(char **)(stringArray + stringIndex);\n          if (*(char *)((long)(char **)(stringArray + stringIndex) + (ulong)archCount + 8) == '\\0') {\n            stringLength = strlen(archString);\n            for (loopIndex = stringLength & 0xffffffff; (int)loopIndex != 0; loopIndex = (ulong)((int)loopIndex - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (outerIndex != archIndex) {\n            putc(0x20,_stdout);\n          }\n          stringIndex = stringIndex + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archRange = archRange + 1;\n    } while (archRange != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "strtol",
                "strcmp",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_strings_by_architecture_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_data_structure_00113e23",
                "param_1": "dataElement1",
                "param_2": "dataElement2",
                "lVar1": "dataStructure",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createDataStructure_00113e23(undefined8 dataElement1,undefined8 dataElement2)\n\n{\n  long dataStructure;\n  undefined8 *allocatedMemory;\n  \n  dataStructure = initialize_data_00112904(1,0);\n  if (dataStructure != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = dataElement1;\n    allocatedMemory[1] = dataElement2;\n    *(undefined8 **)(dataStructure + 0x10) = allocatedMemory;\n  }\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "errorString",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 errorString)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,errorFormat,errorString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_unsigned_int_00108ea1",
                "iVar1": "currentValue",
                "pbVar2": "currentChar",
                "pbVar3": "nextChar",
                "uVar4": "result"
            },
            "code": "\nulong parseUnsignedInt_00108ea1(byte **param_1,int *param_2)\n\n{\n  int currentValue;\n  byte *currentChar;\n  byte *nextChar;\n  ulong result;\n  \n  currentChar = *param_1;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*currentChar * 2] & 4) != 0) {\n    nextChar = currentChar + 1;\n    currentValue = (char)*currentChar + -0x30;\n    *param_2 = currentValue;\n    *param_1 = nextChar;\n    if (((&_sch_istable)[(ulong)currentChar[1] * 2] & 4) != 0) {\n      do {\n        currentChar = nextChar;\n        currentValue = currentValue * 10 + -0x30 + (int)(char)*currentChar;\n        nextChar = currentChar + 1;\n      } while (((&_sch_istable)[(ulong)currentChar[1] * 2] & 4) != 0);\n      if (currentChar[1] == 0x5f) {\n        nextChar = currentChar + 2;\n        *param_1 = nextChar;\n        *param_2 = currentValue;\n      }\n    }\n    result = CONCAT71((int7)((ulong)nextChar >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_unsigned_int_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_alignment_and_size_00108072",
                "unaff_RBX": "inputParams",
                "unaff_RBP": "stackBasePointer",
                "unaff_R12": "dataPointer",
                "unaff_R14B": "flag",
                "unaff_R15": "outputParams",
                "lVar5": "errorMsg",
                "lVar6": "tempValue1",
                "lVar7": "tempValue2",
                "lVar8": "tempValue3",
                "bVar1": "tempByte",
                "uVar2": "tempValue4",
                "uVar4": "tempValue5"
            },
            "code": "\n\n\nvoid setAlignmentAndSize_00108072(void)\n\n{\n  byte tempByte;\n  undefined8 tempValue4;\n  char cVar3;\n  uint tempValue5;\n  long errorMsg;\n  long tempValue1;\n  long tempValue2;\n  undefined8 *inputParams;\n  long stackBasePointer;\n  long dataPointer;\n  long tempValue3;\n  char flag;\n  long outputParams;\n  \n  errorMsg = dcgettext(0,\"failed to set size\",5);\n  tempValue3 = inputParams[6];\n  tempValue1 = process_function_00114190(*inputParams,0,0x18);\n  if (tempValue1 == 0) {\n    *(byte *)(outputParams + 0x28) = *(byte *)(outputParams + 0x28) | 1;\n    tempValue4 = *inputParams;\n    tempValue3 = tempValue3 + _DAT_001279b0;\n    *(long *)(outputParams + 0x30) = tempValue3;\n    *(long *)(outputParams + 0x38) = tempValue3;\n    tempValue3 = inputParams[7];\n    tempValue1 = process_function_00114190(tempValue4,0,0x60);\n    if (tempValue1 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempValue2 = *(long *)(tempValue1 + 0x20);\n    if ((*(byte *)(tempValue1 + 0x14) & 0x40) != 0) {\n      tempValue2 = tempValue2 + tempValue3;\n    }\n    *(long *)(outputParams + 0x38) = tempValue2;\n    tempValue3 = process_function_00114190(*inputParams,0,0x200);\n    if (tempValue3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempValue5 = *(uint *)((long)inputParams + 0x7c);\n    if (tempValue5 < 0x3f) goto LAB_001156c4;\n    errorMsg = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(outputParams + 0xb4) = *(undefined4 *)((long)inputParams + 0xb4);\n    *(byte *)(outputParams + 0x28) =\n         *(byte *)(outputParams + 0x28) & 0xcf | *(byte *)(inputParams + 5) & 0x30;\n    inputParams[0xc] = outputParams;\n    inputParams[0xb] = 0;\n    tempByte = *(byte *)((long)inputParams + 0x27);\n  }\n  else {\n    tempValue2 = *(long *)(tempValue1 + 0x18);\n    if ((*(byte *)(tempValue1 + 0x14) & 8) == 0) {\n      tempValue2 = tempValue2 + tempValue3;\n    }\n    *(byte *)(outputParams + 0x28) = *(byte *)(outputParams + 0x28) | 1;\n    tempValue4 = *inputParams;\n    *(long *)(outputParams + 0x30) = tempValue2;\n    *(long *)(outputParams + 0x38) = tempValue2;\n    tempValue3 = inputParams[7];\n    tempValue1 = process_function_00114190(tempValue4,0,0x60);\n    if (tempValue1 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempValue4 = *inputParams;\n    *(long *)(outputParams + 0x38) = tempValue3 + _DAT_001279b0;\n    tempValue3 = process_function_00114190(tempValue4,0,0x200);\n    if (tempValue3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempValue5 = *(uint *)(tempValue3 + 0x2c);\n    if (0x3e < tempValue5) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(outputParams + 0x7c) = tempValue5;\n    *(undefined4 *)(outputParams + 0xb4) = *(undefined4 *)((long)inputParams + 0xb4);\n    *(byte *)(outputParams + 0x28) =\n         *(byte *)(outputParams + 0x28) & 0xcf | *(byte *)(inputParams + 5) & 0x30;\n    inputParams[0xc] = outputParams;\n    inputParams[0xb] = 0;\n    tempByte = *(byte *)((long)inputParams + 0x27);\n  }\n  if ((tempByte & 2) != 0) {\n    tempValue3 = inputParams[0x1a];\n    tempValue1 = get_value_from_data_00115d00(tempValue3,inputParams[0x1c]);\n    if ((tempValue1 != 0) &&\n       (tempValue2 = *(long *)(dataPointer + 8), *(uint *)(tempValue1 + 0x18) = *(uint *)(tempValue1 + 0x18) | 0x20,\n       *(int *)(tempValue2 + 8) == 5)) {\n      *(long *)(tempValue3 + 0xb0) = tempValue1;\n      cVar3 = (**(code **)(*(long *)(stackBasePointer + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(stackBasePointer + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(outputParams + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_alignment_and_size_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "format_and_create_entry_0010a2b9",
                "param_1": "binaryOffset",
                "param_2": "flag",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "cVar1": "flagFromPointer",
                "__s": "nextItem",
                "sVar2": "nextItemLength",
                "__s_00": "formattedString",
                "lVar3": "entryCount",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] formatAndCreateEntry_0010a2b9(long binaryOffset,char flag,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  char flagFromPointer;\n  char *nextItem;\n  size_t nextItemLength;\n  char *formattedString;\n  long entryCount;\n  undefined result [16];\n  \n  flagFromPointer = *(char *)(*(long *)(binaryOffset + 0x60) + 0x1c);\n  nextItem = (char *)extract_next_item_00109b2f();\n  nextItemLength = strlen(nextItem);\n  formattedString = (char *)xmalloc(nextItemLength + 0x1e);\n  if (flag == '\\0') {\n    *formattedString = '\\0';\n    entryCount = 0;\n    flag = flagFromPointer;\n  }\n  else {\n    entryCount = *(long *)(binaryOffset + 0x68);\n    *(long *)(binaryOffset + 0x68) = entryCount + 1;\n    sprintf(formattedString,\"%ld=@S;\",entryCount);\n  }\n  nextItemLength = strlen(formattedString);\n  sprintf(formattedString + nextItemLength,\"S%s\",nextItem);\n  free(nextItem);\n  result._0_4_ = create_entry_00109b52(binaryOffset,formattedString,entryCount,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = unusedParam2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_create_entry_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data_array",
                "param_2": "input_value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "counter",
                "cVar2": "flag"
            },
            "code": "\nundefined process_data_0010ec73(long *data_array,long input_value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char flag;\n  \n  if (data_array[0x3c] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(input_value,data_array[1] + 8 + data_array[0x3c]);\n    data_array[0x3c] = -1;\n  }\n  if (data_array[0x3d] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(input_value,data_array[1] + 8 + data_array[0x3d]);\n    data_array[0x3d] = -1;\n  }\n  counter = *(int *)(data_array + 0x3f);\n  *(int *)(data_array + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data_array[0x40] = input_value;\n  }\n  else {\n    if ((data_array[0x41] != -1) &&\n       (flag = process_bfd_hash_0010e2f0(data_array,0xc0,0,data_array[0x41],0,arg4,arg2), flag == '\\0')) {\n      return 0;\n    }\n    data_array[0x41] = input_value - data_array[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "identify_endianness_00114e00",
                "param_1": "endiannessValue"
            },
            "code": "\nvoid identifyEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "identify_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "permissions",
                "param_4": "fileSize",
                "param_5": "shouldSetTimestamp",
                "param_6": "userData",
                "uVar1": "copyResult",
                "piVar2": "errorPointer",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "uVar5": "bytesCopied",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndSetFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 permissions,undefined8 fileSize,char shouldSetTimestamp,\n            undefined8 userData)\n\n{\n  uint copyResult;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  ulong bytesCopied;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = copy_file_contents_00115a90(permissions,destinationFilePath,fileSize);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorPointer = __errno_location();\n      errorMessage = strerror(*errorPointer);\n      translatedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(translatedErrorMessage,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetTimestamp != '\\0') {\n    set_file_timestamp_0011a350(destinationFilePath,fileSize);\n  }\n  returnValue._8_8_ = userData;\n  returnValue._0_8_ = bytesCopied;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_set_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "process_and_return_data_0010adf2",
                "process_data_0010abdd": "process_data"
            },
            "code": "\nvoid process_and_return_data_0010adf2(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_return_data_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_items_0010d7d4",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "param_3": "output_ptr",
                "param_4": "count_ptr",
                "param_5": "capacity_ptr",
                "uVar1": "data_start",
                "cVar2": "result",
                "uVar3": "expand_result",
                "lVar4": "output_data",
                "plVar5": "output_data_ptr",
                "uVar6": "count",
                "local_40": "local_data"
            },
            "code": "\nundefined4\nprocess_items_0010d7d4(undefined8 input_param,undefined8 *data_ptr,long *output_ptr,uint *count_ptr,uint *capacity_ptr)\n\n{\n  undefined8 data_start;\n  char result;\n  undefined4 expand_result;\n  long output_data;\n  long *output_data_ptr;\n  uint count;\n  long local_data [2];\n  \n  data_start = *data_ptr;\n  output_data_ptr = local_data;\n  if (output_ptr == (long *)0x0) {\n    output_data_ptr = (long *)0x0;\n  }\n  result = parse_and_execute_0010c95e(input_param,data_ptr,output_data_ptr);\n  if ((result != '\\0') &&\n     (expand_result = expand_and_add_item_00109be3(input_param,data_start,(int)*data_ptr - (int)data_start), (char)expand_result != '\\0')) {\n    if (output_ptr == (long *)0x0) {\n      return expand_result;\n    }\n    if (local_data[0] != 0) {\n      if (*capacity_ptr <= *count_ptr + 1) {\n        count = *capacity_ptr + 10;\n        output_data = *output_ptr;\n        *capacity_ptr = count;\n        output_data = xrealloc(output_data,(ulong)count << 3);\n        *output_ptr = output_data;\n      }\n      count = *count_ptr;\n      *(long *)(*output_ptr + (ulong)count * 8) = local_data[0];\n      *count_ptr = count + 1;\n      return expand_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_items_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_add_item_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "filePath",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileInformation_00113f50(char *filePath)\n\n{\n  int result;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    result = stat(filePath,&fileStats);\n    if (result < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_program_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_program_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_program_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "data"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_00127600;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fputc",
                "fflush",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "process_binary_0011378f",
                "param_1": "binaryPath",
                "param_2": "outputParam",
                "param_3": "outputVar1",
                "param_4": "outputVar2",
                "param_5": "outputVar3",
                "param_6": "outputVar4",
                "auVar1": "tempArray",
                "cVar2": "returnValue",
                "uVar3": "errorNumber",
                "uVar4": "errorMessage",
                "puVar5": "tempPointer",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "tempPointer2",
                "puVar9": "tempPointer3",
                "__dest": "destinationPointer",
                "puVar10": "tempPointer4",
                "plVar11": "tempPointer5",
                "bVar12": "tempByte",
                "local_258": "binaryPathPtr",
                "local_250": "allocatedMemory",
                "local_248": "tempVar1",
                "uStack_244": "tempVar2",
                "uStack_240": "tempVar3",
                "uStack_23c": "tempVar4",
                "local_238": "tempArray2",
                "local_228": "tempVar5",
                "local_220": "tempArray3",
                "local_1f8": "tempVar6",
                "local_1f0": "tempVar7",
                "local_1e8": "tempArray4",
                "local_a0": "tempArray5",
                "local_78": "tempArray6",
                "uStack_70": "tempVar8",
                "local_68": "tempVar9",
                "local_60": "tempVar10",
                "local_58": "tempVar11",
                "uStack_54": "tempVar12",
                "uStack_50": "tempVar13",
                "uStack_4c": "tempVar14"
            },
            "code": "\nundefined4\nprocessBinary_0011378f(undefined8 *binaryPath,undefined8 *outputParam,long *outputVar1,undefined8 *outputVar2,\n            undefined8 *outputVar3,undefined8 *outputVar4)\n\n{\n  undefined tempArray [16];\n  char returnValue;\n  undefined4 errorNumber;\n  undefined8 errorMessage;\n  undefined *tempPointer;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *tempPointer2;\n  undefined4 *tempPointer3;\n  char *destinationPointer;\n  undefined8 *tempPointer4;\n  long *tempPointer5;\n  byte tempByte;\n  undefined8 *binaryPathPtr;\n  long allocatedMemory;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined tempArray2 [16];\n  undefined8 tempVar5;\n  undefined tempArray3 [40];\n  undefined8 tempVar6;\n  undefined8 tempVar7;\n  undefined4 tempArray4 [82];\n  undefined tempArray5 [40];\n  undefined tempArray6 [8];\n  undefined8 tempVar8;\n  undefined8 tempVar9;\n  undefined4 tempVar10;\n  undefined4 tempVar11;\n  undefined4 tempVar12;\n  undefined4 tempVar13;\n  undefined4 tempVar14;\n  \n  tempByte = 0;\n  tempVar1 = 0;\n  tempVar2 = 0;\n  tempVar3 = 500;\n  tempVar4 = 0;\n  binaryPathPtr = binaryPath;\n  allocatedMemory = xmalloc(500);\n  tempVar5 = 1;\n  tempArray2 = ZEXT816(0);\n  returnValue = bfd_hash_table_init(tempArray3,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((returnValue == '\\0') || (returnValue = bfd_hash_table_init(tempArray5,allocate_and_initialize_hash_0010bb52,0x30), returnValue == '\\0')) {\n    errorNumber = bfd_get_error();\n    errorMessage = bfd_errmsg(errorNumber);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    tempVar6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    tempArray6 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    tempPointer3 = tempArray4;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *tempPointer3 = 0;\n      tempPointer3 = tempPointer3 + (ulong)tempByte * -2 + 1;\n    }\n    tempVar9 = 0;\n    tempVar10 = 0;\n    tempVar7 = 1;\n    tempVar11 = 0;\n    tempVar12 = 0;\n    tempVar13 = 0xffffffff;\n    tempVar14 = 0xffffffff;\n    returnValue = process_bfd_hash_0010e2f0(&binaryPathPtr,0,0,0,0);\n    tempArray = _tempArray6;\n    if (returnValue != '\\0') {\n      tempArray6._4_4_ = tempVar2;\n      tempArray6._0_4_ = tempVar1;\n      tempVar8 = tempArray._8_8_;\n      returnValue = process_bfd_hash_0010e2f0(&binaryPathPtr,100,0,0,*binaryPath);\n      if (returnValue != '\\0') {\n        *(int *)(outputParam + 6) = *(int *)(outputParam + 6) + 1;\n        outputParam[10] = 0;\n        tempPointer4 = (undefined8 *)*outputParam;\n        *(undefined4 *)(outputParam + 7) = *(undefined4 *)((long)outputParam + 0x34);\n        for (; tempPointer4 != (undefined8 *)0x0; tempPointer4 = (undefined8 *)*tempPointer4) {\n          outputParam[8] = tempPointer4[2];\n          *(undefined4 *)(outputParam + 9) = 0;\n          returnValue = update_process_hash_thunk_0010e439(&binaryPathPtr,*(undefined8 *)(tempPointer4[1] + 8));\n          if (returnValue == '\\0') {\n            return 0;\n          }\n          tempPointer5 = (long *)tempPointer4[1];\n          if (tempPointer5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)tempPointer5[2] != (undefined8 *)0x0) {\n                for (tempPointer2 = *(undefined8 **)(undefined8 *)tempPointer5[2]; tempPointer2 != (undefined8 *)0x0;\n                    tempPointer2 = (undefined8 *)*tempPointer2) {\n                  returnValue = process_001135a5(outputParam,&binaryPathPtr);\n                  if (returnValue == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              tempPointer5 = (long *)*tempPointer5;\n              if (tempPointer5 == (long *)0x0) break;\n              returnValue = set_bfd_hash_0010e439(&binaryPathPtr,tempPointer5[1]);\n              if (returnValue == '\\0') {\n                return 0;\n              }\n            }\n          }\n          returnValue = process_files_00112502(outputParam,&binaryPathPtr,0xffffffffffffffff);\n          if (returnValue == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(tempVar14,tempVar13) == -1) &&\n           (errorNumber = process_bfd_hash_0010e2f0(&binaryPathPtr,100,0,tempVar9,0), (char)errorNumber != '\\0')) {\n          (**(code **)(binaryPath[1] + 0x50))(tempVar5,allocatedMemory + 8);\n          *outputVar1 = allocatedMemory;\n          *outputVar2 = CONCAT44(tempVar2,tempVar1);\n          *outputVar4 = tempVar5;\n          tempPointer = (undefined *)xmalloc();\n          *tempPointer = 0;\n          destinationPointer = tempPointer + 1;\n          *outputVar3 = tempPointer;\n          for (loopCounter = tempArray2._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(destinationPointer,*(char **)(loopCounter + 8));\n            stringLength = strlen(destinationPointer);\n            destinationPointer = destinationPointer + stringLength + 1;\n          }\n          return errorNumber;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "strcpy",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010bb52",
                "FUN_001135a5",
                "xmalloc",
                "thunk_FUN_0010e439",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_bfd_hash_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_bfd_hash_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = update_process_hash_thunk_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_bfd_hash_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_bfd_hash_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "file_not_found_error_00104966",
                "piVar1": "errorCode",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 fileNotFoundError_00104966(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  \n  errorCode = __errno_location();\n  if (*errorCode == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errorCode);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "file_not_found_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_entries_0010a0a0",
                "param_1": "input_value"
            },
            "code": "\nvoid process_entries_0010a0a0(long input_value)\n\n{\n  process_entries_0010a0a0_00109ed3(input_value,0x26,4,input_value + 0x198,input_value + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "error_code",
                "in_AL": "condition",
                "local_d8": "buffer_size",
                "local_d4": "local_variable_1",
                "local_d0": "local_variable_2",
                "local_c8": "local_variable_3",
                "local_b8": "local_array",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "param_1_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 buffer_size;\n  undefined4 local_variable_1;\n  undefined *local_variable_2;\n  undefined *local_variable_3;\n  undefined local_array [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (condition != '\\0') {\n    param_1_copy = error_code;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  local_variable_2 = &stack0x00000008;\n  buffer_size = 8;\n  local_variable_3 = local_array;\n  local_variable_1 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00119ed0_00119e70(param_9,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00108375",
                "FUN_00104ad6",
                "FUN_00108200",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_0011378f",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_0010b800",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_entries_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "commands",
                "param_4": "base_info",
                "plVar1": "ptr1",
                "lVar2": "var1",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "cVar5": "flag",
                "piVar6": "ptr6",
                "uVar7": "result",
                "uVar8": "var2",
                "iVar9": "var3",
                "uVar10": "var4",
                "uVar11": "var5",
                "uVar12": "var6",
                "uVar13": "var7",
                "bVar14": "condition",
                "local_3c": "local_var"
            },
            "code": "\n\n\nundefined8 process_entries_00112c1f(ulong info,undefined8 name,int *commands,long base_info)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr3;\n  undefined8 *ptr4;\n  char flag;\n  int *ptr6;\n  undefined8 result;\n  undefined8 var2;\n  int var3;\n  undefined4 var4;\n  undefined8 var5;\n  ulong var6;\n  uint var7;\n  bool condition;\n  uint local_var;\n  \n  var6 = info;\nLAB_00112c39:\n  if (commands != (int *)0x0) {\n    var3 = *commands;\n    if (var3 - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(commands + 4);\n        var7 = *(uint *)(info + 0x30);\n        var6 = (ulong)var7;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == var7) {\n          if (var3 == 0x16) {\n            result = lookup_and_create_entry_0010bba1(name,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr6 = (int *)analyze_debug_info_00112b6e(commands,0);\n          if (ptr6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr6 - 7U < 4) && (*(long *)(ptr6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr6 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = find_or_create_class_0010c7a0(info,*(undefined8 *)(**(long **)(commands + 4) + 8),ptr6),\n               flag == '\\0')) {\n              return 0;\n            }\n            var7 = *(uint *)(*(long *)(ptr6 + 4) + 0xc);\n          }\n          else {\n            var7 = 0;\n          }\n          var3 = *ptr6;\n          result = *(undefined8 *)(**(long **)(commands + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var3 == 0x17) {\n          if (var1 != base_info) goto LAB_00112c94;\n          *(uint *)(base_info + 0x10) = var7;\n          base_info = *ptr1;\n          commands = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (base_info != 0) {\n          *(uint *)(base_info + 0x10) = var7;\n        }\n        commands = (int *)ptr1[1];\n        if (commands == (int *)0x0) goto LAB_00112dd6;\n        var3 = *commands;\n        base_info = 0;\n      } while (var3 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (base_info == 0) goto LAB_00112d74;\n      *(undefined4 *)(base_info + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(base_info + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(base_info + 8);\n    }\n    switch(var3) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = handle_entry_creation_00109dfe(name);\n      return result;\n    case 3:\n      result = format_and_create_entry_0010b800(name,commands[1],*(undefined *)(commands + 4));\n      return result;\n    case 4:\n      result = format_and_create_entry_0010b948(name,commands[1]);\n      return result;\n    case 5:\n      result = log_entry_00109e76(name,commands[1]);\n      return result;\n    case 6:\n      result = create_and_format_entry_00109d3e(name,commands[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(commands + 4) != 0) {\n        if ((*(uint *)(*(long *)(commands + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = find_or_create_class_0010c7a0(info,result,commands), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(commands + 4);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          var7 = *(uint *)(var1 + 0xc);\n          if (var7 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var3 = *commands;\nLAB_00112ed2:\n          result = resize_and_set_data_00109d5c(name,result,var7,var3);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n      }\n      var4 = 0;\n      if (*(long *)(commands + 4) != 0) {\n        var4 = *(undefined4 *)(*(long *)(commands + 4) + 0xc);\n      }\n      flag = process_data_0010a69a(name,result,var4,*commands == 7,commands[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(commands + 4) != (long *)0x0) && (var6 = 0, **(long **)(commands + 4) != 0)) {\n        while( true ) {\n          ptr4 = *(undefined8 **)(**(long **)(commands + 4) + var6 * 8);\n          if (ptr4 == (undefined8 *)0x0) break;\n          flag = process_entries_00112c1f(info,name,ptr4[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = build_warning_message_0010ba08(name,*ptr4,*(undefined4 *)(ptr4 + 3),\n                               *(undefined4 *)((long)ptr4 + 0x1c),*(undefined4 *)(ptr4 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          var6 = (ulong)((int)var6 + 1);\n        }\n      }\n      result = combine_strings_and_create_entry_0010a77a(name);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(commands + 4) == 0) {\n        var7 = 0;\n        ptr6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(commands + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (var6 = info, flag = find_or_create_class_0010c7a0(info,result,commands), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(commands + 4);\n        var7 = *(uint *)(var1 + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          if (var7 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var3 = *commands;\n          goto LAB_00112ed2;\n        }\n        ptr6 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n        if (((ptr6 != (int *)0x0) && (commands != ptr6)) &&\n           (var6 = info, flag = process_entries_00112c1f(info,name,ptr6,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = process_data_0010a83e(name,result,var7,*commands == 9,commands[1],ptr6 != (int *)0x0,\n                           commands == ptr6,var6);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(commands + 4) != (long *)0x0) {\n        var7 = 0;\n        if (**(long **)(commands + 4) != 0) {\n          while (ptr4 = *(undefined8 **)(**(long **)(commands + 4) + (ulong)var7 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = process_entries_00112c1f(info,name,ptr4[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr4 + 0x14) == '\\0') {\n              flag = build_warning_message_0010ba08(name,*ptr4,*(undefined4 *)(ptr4 + 3));\n            }\n            else {\n              flag = generate_connection_string_0010a94e(name,*ptr4,ptr4[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = var7 + 1;\n          }\n        }\n        var7 = 0;\n        if (*(long *)(*(long *)(commands + 4) + 0x10) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(commands + 4) + 0x10) + (ulong)var7 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = process_entries_00112c1f(info,name,*ptr4,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = process_data_0010aa53(name,*(undefined4 *)(ptr4 + 1),\n                                 *(undefined *)((long)ptr4 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = var7 + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(commands + 4) + 0x18) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(commands + 4) + 0x18) + (ulong)local_var * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = update_string_with_prefix_0010ab4d(name,*ptr4);\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = 0;\n            while (ptr3 = *(undefined8 **)(ptr4[1] + (ulong)var7 * 8),\n                  ptr3 != (undefined8 *)0x0) {\n              if ((ptr3[4] != 0) &&\n                 (flag = process_entries_00112c1f(info,name,ptr3[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = process_entries_00112c1f(info,name,ptr3[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr3[3] == -1) {\n                flag = process_and_return_data_0010adf2(name,*ptr3,*(undefined4 *)(ptr3 + 2),\n                                     *(undefined *)((long)ptr3 + 0x14),\n                                     *(undefined *)((long)ptr3 + 0x15));\n              }\n              else {\n                flag = process_and_return_data_0010add5(name);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              var7 = var7 + 1;\n            }\n            flag = check_and_append_semicolon_00109bbb(name);\n            if (flag == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = construct_improved_string_0010ae0e(name);\n      return result;\n    case 0xb:\n      ptr4 = *(undefined8 **)(commands + 4);\n      if (ptr4 == (undefined8 *)0x0) {\n        var2 = 0;\n        var5 = 0;\n      }\n      else {\n        var2 = ptr4[1];\n        var5 = *ptr4;\n      }\n      result = create_entry_0010e453(name,result,var5,var2);\n      return result;\n    case 0xc:\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_entries_00112c1f_0010a083(name);\n      return result;\n    case 0xd:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var6 = 0;\n      if (*(long *)(*(long *)(commands + 4) + 8) == 0) {\n        var6 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(commands + 4) + 8) + var6 * 8), var1 != 0) {\n          var6 = var6 + 1;\n          flag = process_entries_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        var6 = var6 & 0xffffffff;\n      }\n      result = process_entries_00112c1f_0010e5db(name,var6,*(undefined *)(*(long *)(commands + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_entries_00112c1f_0010a0a0(name);\n      return result;\n    case 0xf:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = create_entry_with_parameters_0010a0e9(name,*(undefined8 *)(*(long *)(commands + 4) + 8),\n                           *(undefined8 *)(*(long *)(commands + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(*(long *)(commands + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(commands + 4);\n      result = generate_entry_0010a181(name,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = format_and_create_entry_0010a2b9(name,*(undefined *)(*(long *)(commands + 4) + 8));\n      return result;\n    case 0x12:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(*(long *)(commands + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = create_entry_from_items_0010a377(name);\n      return result;\n    case 0x13:\n      flag = process_entries_00112c1f(info,name,**(undefined8 **)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var6 = 0;\n      if (*(long *)(*(long *)(commands + 4) + 0x10) == 0) {\n        var6 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(commands + 4) + 0x10) + var6 * 8), var1 != 0)\n        {\n          var6 = var6 + 1;\n          flag = process_entries_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(commands + 4) + 8) != 0) &&\n         (flag = process_entries_00112c1f(info,name,*(long *)(*(long *)(commands + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = process_and_create_entry_0010a424(name,*(long *)(*(long *)(commands + 4) + 8) != 0,var6 & 0xffffffff,\n                           *(undefined *)(*(long *)(commands + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_entries_00112c1f_0010a0bd(name);\n      return result;\n    case 0x15:\n      flag = process_entries_00112c1f(info,name,*(undefined8 *)(commands + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_entries_00112c1f_0010a0d3(name);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  condition = *(int **)**(undefined8 **)(commands + 4) == commands;\n  commands = *(int **)**(undefined8 **)(commands + 4);\n  if (condition) {\nLAB_00112dd6:\n    result = process_entry_00109d97(name);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "dcgettext",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010c7a0",
                "FUN_0010adf2",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_0010a083",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "__assert_fail",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00109d5c",
                "FUN_00109bbb",
                "FUN_0010a83e",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010bba1",
                "FUN_0010ba08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopyingEnabled",
                "unaff_R15": "sourceDataAddress",
                "lVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopyingEnabled;\n  long sourceDataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopyingEnabled != '\\0') {\n    *(undefined4 *)(*(long *)(sourceDataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "warningType",
                "in_RAX": "tempVariable",
                "__format": "warningMessageFormat"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 warningType)\n\n{\n  undefined8 tempVariable;\n  char *warningMessageFormat;\n  \n  warningMessageFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningMessageFormat,warningType,errorMessage,tempVariable);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_00109a32",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "detect_input_file_format_00105828",
                "iVar1": "architecture",
                "uVar2": "arch",
                "uVar3": "concatenatedString",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 detectInputFileFormat_00105828(void)\n\n{\n  int architecture;\n  undefined4 arch;\n  undefined8 concatenatedString;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    concatenatedString = get_concatenated_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,concatenatedString);\n  }\n  else {\n    concatenatedString = bfd_get_mach();\n    arch = bfd_get_arch();\n    concatenatedString = bfd_printable_arch_mach(arch,concatenatedString);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,concatenatedString);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "detect_input_file_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "file_path",
                "pcVar1": "temp_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *temp_directory;\n  \n  file_path = (char *)allocate_file_path_00114cf0();\n  temp_directory = mkdtemp(file_path);\n  if (temp_directory == (char *)0x0) {\n    free(file_path);\n  }\n  return temp_directory;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_create_entry_0010bba1",
                "param_1": "binary_ptr",
                "param_2": "entry_ptr",
                "lVar1": "entry_hash",
                "uVar2": "formatted_entry"
            },
            "code": "\nundefined8 lookup_and_create_entry_0010bba1(long binary_ptr,undefined8 entry_ptr)\n\n{\n  long entry_hash;\n  undefined8 formatted_entry;\n  \n  entry_hash = bfd_hash_lookup(binary_ptr + 0x1b8,entry_ptr,0,0);\n  if ((entry_hash != 0) && (0 < *(long *)(entry_hash + 0x20))) {\n    formatted_entry = create_formatted_entry_00109cf4(binary_ptr,*(long *)(entry_hash + 0x20),*(undefined4 *)(entry_hash + 0x28));\n    return formatted_entry;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_create_entry_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_store_item_0010e6a8",
                "param_1": "item",
                "param_2": "key",
                "param_3": "value",
                "param_4": "result",
                "__s": "extracted_item",
                "sVar3": "key_length",
                "sVar4": "item_length",
                "__s_00": "formatted_string",
                "lVar5": "hash_lookup_result",
                "lVar8": "item_count",
                "uVar1": "hash_value",
                "uVar2": "item_parameter",
                "uVar6": "bfd_errmsg_result",
                "uVar7": "error_message",
                "uVar9": "result_code",
                "auVar10": "return_value"
            },
            "code": "\nundefined  [16] process_and_store_item_0010e6a8(long item,char *key,undefined8 value,undefined8 result)\n\n{\n  uint hash_value;\n  undefined4 item_parameter;\n  char *extracted_item;\n  size_t key_length;\n  size_t item_length;\n  char *formatted_string;\n  long hash_lookup_result;\n  undefined8 bfd_errmsg_result;\n  undefined8 error_message;\n  long item_count;\n  ulong result_code;\n  undefined return_value [16];\n  \n  item_count = *(long *)(*(long *)(item + 0x60) + 0x10);\n  item_parameter = *(undefined4 *)(*(long *)(item + 0x60) + 0x18);\n  extracted_item = (char *)extract_next_item_00109b2f();\n  key_length = strlen(key);\n  item_length = strlen(extracted_item);\n  formatted_string = (char *)xmalloc(key_length + 0x14 + item_length);\n  if (item_count < 1) {\n    item_count = *(long *)(item + 0x68);\n    *(long *)(item + 0x68) = item_count + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",key,item_count,extracted_item);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",key,extracted_item);\n  }\n  free(extracted_item);\n  hash_value = process_bfd_hash_0010e2f0(item,0x80,0,0,formatted_string);\n  result_code = (ulong)hash_value;\n  if ((char)hash_value != '\\0') {\n    free(formatted_string);\n    hash_lookup_result = bfd_hash_lookup(item + 0x1b8,key,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = item_count;\n      *(undefined4 *)(hash_lookup_result + 0x28) = item_parameter;\n      goto LAB_0010e7b3;\n    }\n    item_parameter = bfd_get_error();\n    bfd_errmsg_result = bfd_errmsg(item_parameter);\n    error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(error_message,bfd_errmsg_result);\n  }\n  result_code = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = result;\n  return_value._0_8_ = result_code;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xmalloc",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_store_item_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "process_and_hash_strings_0010e7c2",
                "param_1": "input_param",
                "param_2": "string1",
                "param_3": "input_param2",
                "param_4": "output_param",
                "__s": "extracted_string",
                "sVar1": "length_string1",
                "sVar2": "length_extracted_string",
                "__s_00": "modified_string",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] process_and_hash_strings_0010e7c2(undefined8 input_param,char *string1,undefined8 input_param2,undefined8 output_param)\n\n{\n  char *extracted_string;\n  size_t length_string1;\n  size_t length_extracted_string;\n  char *modified_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_next_item_00109b2f();\n  length_string1 = strlen(string1);\n  length_extracted_string = strlen(extracted_string);\n  modified_string = (char *)xmalloc(length_string1 + 3 + length_extracted_string);\n  sprintf(modified_string,\"%s:T%s\",string1,extracted_string);\n  free(extracted_string);\n  result._0_4_ = process_bfd_hash_0010e2f0(input_param,0x80,0,0,modified_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_hash_strings_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "error_code",
                "param_9": "message",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "param_15",
                "local_d0": "buffer",
                "local_c8": "param_16",
                "local_b8": "local_buffer",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "param_1",
                "local_78": "param_2",
                "local_68": "param_3",
                "local_58": "param_4",
                "local_48": "param_5",
                "local_38": "param_6",
                "local_28": "param_7",
                "local_18": "param_8"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 param_15;\n  undefined *buffer;\n  undefined *param_16;\n  undefined local_buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  if (condition != '\\0') {\n    param_1 = error_code;\n    param_2 = param_2;\n    param_3 = param_3;\n    param_4 = param_4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  param_16 = local_buffer;\n  param_15 = 0x30;\n  param_10 = error_code0;\n  param_11 = error_code1;\n  param_12 = error_code2;\n  param_13 = error_code3;\n  param_14 = error_code4;\n  print_error_message_00119e70(message,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_001083de",
                "FUN_00115b70",
                "FUN_00108808",
                "FUN_0010543c",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00114dc7",
                "FUN_001053b5"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "error_message",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_message;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_0011a110(*error_message);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_error",
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_RCX": "recordEnd",
                "unaff_RBP": "currentRecord",
                "unaff_R14": "record",
                "unaff_R13": "recordStart",
                "unaff_R15": "maxAddress",
                "unaff_RBX": "minAddress",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "outputSize",
                "param_11": "recordArray",
                "param_12": "outputArray",
                "param_13": "param3",
                "param_14": "recordCount"
            },
            "code": "\nulong processRecords_00116852(void)\n\n{\n  size_t sVar1;\n  code *pcVar2;\n  int iVar3;\n  uint uVar4;\n  undefined *__ptr;\n  size_t *recordEnd;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t minAddress;\n  size_t *currentRecord;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong in_R10;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *recordStart;\n  size_t *record;\n  size_t maxAddress;\n  size_t *psVar13;\n  byte bVar14;\n  size_t param1;\n  size_t param2;\n  ulong outputSize;\n  size_t *recordArray;\n  undefined *outputArray;\n  long param3;\n  size_t recordCount;\n  \n  bVar14 = 0;\ncode_r0x00116852:\n  uVar4 = (int)in_R10 + 1;\n  if (0x10 < (int)in_R10) goto LAB_001167f5;\nLAB_00116863:\n  record = record + -9;\n  do {\n    if (recordStart <= record) {\n      sVar1 = record[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      uVar8 = (ulong)uVar4;\n      if ((*record == *currentRecord) &&\n         (iVar3 = memcmp((void *)record[3],(void *)currentRecord[3],*currentRecord), iVar3 == 0)) {\n        uVar6 = record[7];\n        uVar5 = record[8];\n        in_R10 = uVar8 & 0xffffffff;\n        if (maxAddress == uVar6) {\n          if (minAddress != uVar5) goto LAB_001167a6;\n          currentRecord[2] = 0;\n        }\n        else {\n          if (maxAddress < uVar6) {\n            if (uVar5 < maxAddress) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (maxAddress <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minAddress < maxAddress) {\n              if ((0xfffffffffffffff0 < minAddress) ||\n                 (uVar6 <= (minAddress + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minAddress == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minAddress <= uVar5) {\n              currentRecord[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < maxAddress) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= minAddress) {\n            uVar5 = minAddress;\n          }\n          if (uVar6 < maxAddress) {\n            maxAddress = uVar6;\n          }\n          record[8] = uVar5;\n          record[7] = maxAddress;\n          currentRecord[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        record = currentRecord;\n        currentRecord = record + 9;\n        if (recordEnd <= currentRecord) {\n          qsort(recordArray,recordCount,0x48,compare_records_0011a250);\n          __ptr = (undefined *)xmalloc(outputSize * 2);\n          param1 = 0;\n          puVar12 = __ptr;\n          for (psVar13 = recordArray; psVar13 < recordEnd; psVar13 = psVar13 + 9) {\n            if (psVar13[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(param3 + 8) + 0x50);\n              if ((psVar13[7] == param2) && (psVar13[8] == param1)) {\n                (*pcVar2)(*psVar13,puVar12);\n                (**(code **)(*(long *)(param3 + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(param3 + 8) + 0x50))(psVar13[2],puVar12 + 8);\n                uVar6 = psVar13[6];\n                uVar8 = *psVar13;\n                puVar12 = (undefined *)psVar13[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(param3 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(param3 + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(param3 + 8) + 0x50))(psVar13[2],puVar12 + 8);\n                uVar8 = *psVar13;\n                puVar12 = (undefined *)psVar13[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                uVar6 = psVar13[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(param3 + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(param3 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(psVar13[7],puVar9);\n                  (**(code **)(*(long *)(param3 + 8) + 0x38))(psVar13[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(psVar13[7],puVar9);\n                  (**(code **)(*(long *)(param3 + 8) + 0x50))(psVar13[8],puVar9 + 4);\n                }\n                param2 = psVar13[7];\n                param1 = psVar13[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)__ptr;\n          uVar8 = uVar6;\n          puVar12 = __ptr;\n          if (uVar6 < outputSize) {\n            for (; outputSize = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *outputArray = *puVar12;\n              puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n              outputArray = outputArray + (ulong)bVar14 * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(recordArray);\n          return outputSize;\n        }\n        in_R11 = record[0xb];\n      } while (in_R11 == 0);\n      maxAddress = record[0x10];\n      minAddress = record[0x11];\n      uVar4 = 0;\n      if (maxAddress != minAddress) break;\n      record[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "FUN_00116852",
                "qsort",
                "memcmp",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_data_object_00113d3a",
                "param_1": "data_object_ptr",
                "lVar1": "new_data_object_ptr"
            },
            "code": "\nlong initialize_or_get_data_object_00113d3a(long data_object_ptr)\n\n{\n  long new_data_object_ptr;\n  \n  if (data_object_ptr != 0) {\n    new_data_object_ptr = *(long *)(data_object_ptr + 8);\n    if (new_data_object_ptr == 0) {\n      new_data_object_ptr = initialize_data_00112904(0xc,0);\n      if (new_data_object_ptr == 0) {\n        new_data_object_ptr = 0;\n      }\n      else {\n        *(long *)(new_data_object_ptr + 0x10) = data_object_ptr;\n        *(long *)(data_object_ptr + 8) = new_data_object_ptr;\n      }\n    }\n    return new_data_object_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_or_get_data_object_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010bba1",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_entries_0010a0d3",
                "param_1": "entry_param"
            },
            "code": "\nvoid process_entries_0010a0d3(long entry_param)\n\n{\n  process_entries_0010a0d3_00109ed3(entry_param,0x42,*(undefined4 *)(*(long *)(entry_param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_and_create_output_section_00115530",
                "param_1": "paramPointer",
                "param_2": "paramArray",
                "param_3": "paramOffset",
                "lVar1": "longVar1",
                "pcVar2": "pointerVar2",
                "ppcVar3": "pointerArrayVar3",
                "cVar4": "charVar4",
                "iVar5": "intVar5",
                "uVar6": "uintVar6",
                "sVar7": "sizeVar7",
                "sVar8": "sizeVar8",
                "lVar9": "longVar9",
                "pcVar10": "pointerVar10",
                "pcVar11": "pointerVar11",
                "pcVar12": "pointerVar12",
                "uVar13": "uintVar13",
                "bVar14": "boolVar14",
                "local_50": "localVar50",
                "local_48": "localVar48",
                "local_40": "localArrayVar40"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processAndCreateOutputSection_00115530(long paramPointer,char **paramArray,long paramOffset)\n\n{\n  long longVar1;\n  char *pointerVar2;\n  char **pointerArrayVar3;\n  char charVar4;\n  int intVar5;\n  uint uintVar6;\n  size_t sizeVar7;\n  size_t sizeVar8;\n  long longVar9;\n  char *pointerVar10;\n  char *pointerVar11;\n  char *pointerVar12;\n  uint uintVar13;\n  bool boolVar14;\n  long localVar50;\n  char *localVar48;\n  long localArrayVar40 [2];\n  \n  charVar4 = process_section_001159d0(paramArray);\n  if (charVar4 != '\\0') {\n    return;\n  }\n  pointerVar10 = *paramArray;\n  uintVar13 = *(uint *)((long)paramArray + 0x24);\n  localVar48 = pointerVar10;\n  pointerArrayVar3 = DAT_001278f8;\n  if (*(int *)(*(long *)(paramPointer + 8) + 8) != *(int *)(*(long *)(paramOffset + 8) + 8)) {\n    uintVar13 = uintVar13 & *(uint *)(*(long *)(paramPointer + 8) + 0x18) &\n             *(uint *)(*(long *)(paramOffset + 8) + 0x18);\n  }\n  for (; pointerArrayVar3 != (char **)0x0; pointerArrayVar3 = (char **)pointerArrayVar3[3]) {\n    intVar5 = strcmp(*pointerArrayVar3,pointerVar10);\n    if (intVar5 == 0) {\n      if (*(uint *)(pointerArrayVar3 + 2) != 0xffffffff) {\n        uintVar13 = *(uint *)(pointerArrayVar3 + 2);\n      }\n      if (pointerVar10 != pointerArrayVar3[1]) {\n        localVar48 = pointerArrayVar3[1];\n        uintVar13 = remove_share_flag_if_not_coff_00115f30(uintVar13,paramOffset);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (pointerVar10 = DAT_00127918, (*(byte *)((long)paramArray + 0x24) & 1) != 0)) ||\n     (pointerVar10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    sizeVar7 = strlen(pointerVar10);\n    sizeVar8 = strlen(localVar48);\n    pointerVar12 = (char *)xmalloc(sizeVar7 + 1 + sizeVar8);\n    pointerVar10 = strcpy(pointerVar12,pointerVar10);\n    localVar48 = strcat(pointerVar10,localVar48);\n  }\n  longVar9 = process_function_00114190(*paramArray,0,0x80);\n  boolVar14 = false;\n  if (longVar9 == 0) {\n    if ((DAT_00127a48 == 4) && ((uintVar13 & 0x2000001) != 0)) {\n      intVar5 = *(int *)(*(long *)(paramPointer + 8) + 8);\n      if (intVar5 == 5) {\n        if (*(int *)(paramArray[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(paramOffset + 8) + 8) == 5) {\n            boolVar14 = (uintVar13 & 0x2000000) == 0;\n            uintVar6 = ~((-(uint)((uintVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)paramArray + 0x24) = *(uint *)((long)paramArray + 0x24) & uintVar6;\n          }\n          else {\n            uintVar6 = 0xfdfffefd;\n          }\n          uintVar13 = uintVar13 & uintVar6;\n        }\n      }\n      else if ((intVar5 != 2) || (intVar5 = strcmp(*paramArray,\".buildid\"), intVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uintVar13 = remove_share_flag_if_not_coff_00115f30(uintVar13 & 0x104 | *(uint *)(longVar9 + 0x28),paramOffset,*paramArray);\n  }\n  charVar4 = bfd_convert_section_setup(paramPointer,paramArray,paramOffset,&localVar48,localArrayVar40);\n  if (charVar4 == '\\0') {\n    pointerVar10 = (char *)0x0;\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  pointerVar10 = (char *)bfd_make_section_anyway_with_flags(paramOffset,localVar48,uintVar13);\n  if (pointerVar10 == (char *)0x0) {\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      localArrayVar40[0] = 0;\n      goto LAB_001158e7;\n    }\n    charVar4 = bfd_set_section_size(pointerVar10,localArrayVar40[0]);\n    if (charVar4 == '\\0') {\n      set_alignment_and_size_00108072();\n      return;\n    }\n  }\n  else {\n    localArrayVar40[0] = ((((long)DAT_00127a3c - 1U) + localArrayVar40[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    charVar4 = bfd_set_section_size(pointerVar10);\n    if (charVar4 == '\\0') {\n      set_alignment_and_size_00108072();\n      return;\n    }\n  }\n  localVar50 = 0;\n  pointerVar12 = paramArray[6];\n  longVar9 = process_function_00114190(*paramArray,0,0x18);\n  if (longVar9 == 0) {\n    pointerVar10[0x28] = pointerVar10[0x28] | 1;\n    pointerVar11 = *paramArray;\n    pointerVar12 = pointerVar12 + _DAT_001279b0;\n    *(char **)(pointerVar10 + 0x30) = pointerVar12;\n    *(char **)(pointerVar10 + 0x38) = pointerVar12;\n    pointerVar12 = paramArray[7];\n    longVar9 = process_function_00114190(pointerVar11,0,0x60);\n    if (longVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    pointerVar11 = *(char **)(longVar9 + 0x20);\n    if ((*(byte *)(longVar9 + 0x14) & 0x40) != 0) {\n      pointerVar11 = pointerVar11 + (long)pointerVar12;\n    }\n    *(char **)(pointerVar10 + 0x38) = pointerVar11;\n    longVar9 = process_function_00114190(*paramArray,0,0x200);\n    if (longVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar13 = *(uint *)((long)paramArray + 0x7c);\n    if (uintVar13 < 0x3f) goto LAB_001156c4;\n    localVar50 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(pointerVar10 + 0xb4) = *(undefined4 *)((long)paramArray + 0xb4);\n    pointerVar10[0x28] = pointerVar10[0x28] & 0xcfU | *(byte *)(paramArray + 5) & 0x30;\n    paramArray[0xc] = pointerVar10;\n    paramArray[0xb] = (char *)0x0;\n    if ((*(byte *)((long)paramArray + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    charVar4 = (**(code **)(*(long *)(paramOffset + 8) + 0x158))(paramPointer,paramArray,paramOffset,pointerVar10);\n    if (charVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    pointerVar11 = *(char **)(longVar9 + 0x18);\n    if ((*(byte *)(longVar9 + 0x14) & 8) == 0) {\n      pointerVar11 = pointerVar11 + (long)pointerVar12;\n    }\n    pointerVar10[0x28] = pointerVar10[0x28] | 1;\n    pointerVar2 = *paramArray;\n    *(char **)(pointerVar10 + 0x30) = pointerVar11;\n    *(char **)(pointerVar10 + 0x38) = pointerVar11;\n    pointerVar12 = paramArray[7];\n    longVar9 = process_function_00114190(pointerVar2,0,0x60);\n    if (longVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    pointerVar11 = *paramArray;\n    *(char **)(pointerVar10 + 0x38) = pointerVar12 + _DAT_001279b0;\n    longVar9 = process_function_00114190(pointerVar11,0,0x200);\n    if (longVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar13 = *(uint *)(longVar9 + 0x2c);\n    if (0x3e < uintVar13) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(pointerVar10 + 0x7c) = uintVar13;\n    *(undefined4 *)(pointerVar10 + 0xb4) = *(undefined4 *)((long)paramArray + 0xb4);\n    pointerVar10[0x28] = pointerVar10[0x28] & 0xcfU | *(byte *)(paramArray + 5) & 0x30;\n    paramArray[0xc] = pointerVar10;\n    paramArray[0xb] = (char *)0x0;\n    if ((*(byte *)((long)paramArray + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    pointerVar12 = paramArray[0x1a];\n    longVar9 = get_value_from_data_00115d00(pointerVar12,paramArray[0x1c]);\n    if ((longVar9 == 0) ||\n       (longVar1 = *(long *)(paramPointer + 8), *(uint *)(longVar9 + 0x18) = *(uint *)(longVar9 + 0x18) | 0x20,\n       *(int *)(longVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(pointerVar12 + 0xb0) = longVar9;\n    charVar4 = (**(code **)(*(long *)(paramOffset + 8) + 0x158))(paramPointer,paramArray,paramOffset,pointerVar10);\n    if (charVar4 == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (boolVar14) {\n    *(undefined4 *)(*(long *)(pointerVar10 + 0xd0) + 4) = 8;\n  }\n  if (localVar50 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_error_message_001126c0(0,paramOffset,pointerVar10,localVar50);\n  return;\n}\n\n",
            "called": [
                "FUN_00108072",
                "FUN_00115f30",
                "FUN_00114190",
                "strlen",
                "strcat",
                "dcgettext",
                "strcpy",
                "strcmp",
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_and_create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_entries_0010a0bd",
                "param_1": "entry_ptr"
            },
            "code": "\nvoid process_entries_0010a0bd(long entry_ptr)\n\n{\n  process_entries_0010a0bd_00109ed3(entry_ptr,0x6b,*(undefined4 *)(*(long *)(entry_ptr + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_and_process_string_00113e5e",
                "param_1": "inputString",
                "param_2": "stringPointer",
                "param_3": "stringLength",
                "cVar1": "comparisonResult",
                "local_20": "tempArr"
            },
            "code": "\nundefined8 checkAndProcessString_00113e5e(undefined8 inputString,char **stringPointer,long stringLength)\n\n{\n  char comparisonResult;\n  char *tempArr [2];\n  \n  tempArr[0] = *stringPointer;\n  *stringPointer = (char *)(stringLength + 2);\n  if ((((long)(char *)(stringLength + 2) - (long)tempArr[0] < 5) ||\n      (comparisonResult = compare_strings_00113fb0(tempArr[0],\"type\"), comparisonResult == '\\0')) ||\n     ((tempArr[0][4] != '$' && (tempArr[0][4] != '.')))) {\n    if (*tempArr[0] != '_') {\n      return 1;\n    }\n    if (tempArr[0][1] != '_') {\n      return 1;\n    }\n    if (tempArr[0][2] != 'o') {\n      return 1;\n    }\n    if (tempArr[0][3] != 'p') {\n      return 1;\n    }\n    tempArr[0] = tempArr[0] + 4;\n  }\n  else {\n    tempArr[0] = tempArr[0] + 5;\n  }\n  comparisonResult = parse_and_execute_0010c95e(inputString,tempArr,0);\n  if (comparisonResult != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "check_and_process_string_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value1",
                "param_8": "flag4",
                "lVar1": "ptr",
                "pcVar2": "str1",
                "bVar3": "byteVar",
                "pcVar4": "str2",
                "__s": "str3",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "byteVar2"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long data,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value1,char flag4)\n\n{\n  long ptr;\n  char *str1;\n  byte byteVar;\n  char *str2;\n  char *str3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte byteVar2;\n  \n  str3 = (char *)0x0;\n  byteVar2 = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str2 = (char *)extract_next_item_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (byteVar2 == 0) {\n      byteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    byteVar2 = byteVar & 1;\n    str3 = (char *)extract_next_item_00109b2f(data);\n  }\n  ptr = *(long *)(data + 0x60);\n  if ((ptr == 0) || (str1 = *(char **)(ptr + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(str1);\n    length2 = strlen(str2);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(str3);\n    }\n    result = xrealloc(str1,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(ptr + 0x30) = result;\n    str1 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    length1 = strlen(str1);\n    sprintf(str1 + length1,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,length1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      length1 = strlen(str2);\n      sprintf(str2 + length1,\"%ld;%s;\",value1,str3);\n      free(str3);\n    }\n    if (byteVar2 != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "pointers",
                "param_3": "value",
                "uVar1": "param",
                "uVar2": "errorMessage"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *pointers,undefined8 value)\n\n{\n  undefined8 param;\n  undefined8 errorMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(pointers[1] + 8) != 2)) {\n    param = *pointers;\n    flags = flags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,param,value);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_offset_value_001129f4",
                "param_1": "offsetPointer",
                "puVar1": "secondValuePointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getOffsetValue_001129f4(int *offsetPointer)\n\n{\n  undefined8 *secondValuePointer;\n  int *currentPointer;\n  \n  do {\n    if (*offsetPointer != 1) {\n      if (1 < *offsetPointer - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(offsetPointer + 4) + 8);\n    }\n    secondValuePointer = (undefined8 *)(offsetPointer + 4);\n    currentPointer = **(int ***)(undefined8 *)*secondValuePointer;\n  } while ((offsetPointer != currentPointer) && (offsetPointer = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*secondValuePointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_offset_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_and_invert_result_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint check_and_invert_result_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_invert_result_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_and_copy_archive_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "archInfo",
                "param_5": "flags",
                "param_6": "tmpdir",
                "param_7": "archiveInfo",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "iVar5": "intVar5",
                "ppcVar6": "ptrPtrChar6",
                "pvVar7": "ptrVoid7",
                "lVar8": "longVar8",
                "puVar9": "ptrUInt8_9",
                "piVar10": "ptrInt10",
                "uVar11": "uintVar11",
                "uVar12": "uintVar12",
                "lVar13": "longVar13",
                "puVar14": "ptrUInt8_14",
                "pcVar15": "ptrChar15",
                "ppcVar16": "ptrPtrChar16",
                "pcVar17": "ptrChar17",
                "pcVar18": "ptrChar18",
                "__ptr": "ptrPtrUInt8",
                "ppcVar19": "ptrPtrChar19",
                "pcVar20": "ptrCodeChar20",
                "lVar21": "longVar21",
                "uVar22": "uintVar22",
                "pcVar23": "ptrChar23",
                "psVar24": "ptrStat24",
                "bVar25": "boolVar25",
                "bVar26": "byteVar26",
                "local_1a0": "ptrUInt8_1a0",
                "local_198": "ptrLong_198",
                "local_158": "statInfo",
                "local_c8": "ptrVoid3",
                "uStack_b0": "uintStack_b0",
                "lStack_98": "longStack_98"
            },
            "code": "\n\n\nvoid processAndCopyArchive_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 archInfo,\n                 undefined8 flags,long tmpdir,undefined8 archiveInfo)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar4;\n  int intVar5;\n  char **ptrPtrChar6;\n  void *ptrVoid7;\n  long longVar8;\n  undefined8 *ptrUInt8_9;\n  int *ptrInt10;\n  undefined8 uintVar11;\n  undefined8 uintVar12;\n  long longVar13;\n  undefined8 *ptrUInt8_14;\n  char *ptrChar15;\n  char **ptrPtrChar16;\n  char *ptrChar17;\n  char *ptrChar18;\n  undefined8 *ptrPtrUInt8;\n  char **ptrPtrChar19;\n  code *ptrCodeChar20;\n  long longVar21;\n  uint uintVar22;\n  char *ptrChar23;\n  stat *ptrStat24;\n  bool boolVar25;\n  byte byteVar26;\n  undefined8 *ptrUInt8_1a0;\n  long *ptrLong_198;\n  stat statInfo;\n  void *ptrVoid3 [3];\n  uint uintStack_b0;\n  long longStack_98;\n  \n  byteVar26 = 0;\n  longVar13 = get_file_information_00113f50();\n  if (longVar13 < 1) {\n    if (longVar13 == 0) {\n      uintVar12 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(uintVar12,inputFilePath);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  ptrUInt8_14 = (undefined8 *)bfd_openr(inputFilePath,flags);\n  if ((ptrUInt8_14 == (undefined8 *)0x0) || (intVar5 = bfd_stat(ptrUInt8_14,archInfo), intVar5 != 0)) {\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)ptrUInt8_14 + 0x44) = *(uint *)((long)ptrUInt8_14 + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(ptrUInt8_14,2);\n  if (charVar2 != '\\0') {\n    if (tmpdir == 0) {\n      charVar2 = '\\0';\n      tmpdir = *(long *)ptrUInt8_14[1];\n    }\n    if (fileDescriptor < 0) {\n      ptrUInt8_1a0 = (undefined8 *)bfd_openw(outputFilePath,tmpdir);\n    }\n    else {\n      ptrUInt8_1a0 = (undefined8 *)bfd_fdopenw(outputFilePath,tmpdir,fileDescriptor);\n    }\n    if (ptrUInt8_1a0 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        uintVar12 = *ptrUInt8_14;\n        uintVar11 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(uintVar11,uintVar12);\n        DAT_00127a30 = 0;\n      }\n      process_function_00114d50(ptrUInt8_1a0,ptrUInt8_14,DAT_001264b4);\n      ptrLong_198 = ptrUInt8_1a0 + 0x1f;\n      if ((*(byte *)((long)ptrUInt8_14 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        uintVar12 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,ptrUInt8_14,0,uintVar12);\n        return;\n      }\n      ptrChar15 = (char *)create_temp_directory_0011a0e0(*ptrUInt8_1a0);\n      if (ptrChar15 == (char *)0x0) {\n        ptrInt10 = __errno_location();\n        ptrChar15 = strerror(*ptrInt10);\n        uintVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(uintVar12,ptrChar15);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)ptrUInt8_14 + 0x49);\n        uintVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)ptrUInt8_14 + 0x49);\n        uintVar22 = byteVar1 >> 3 & 1;\n      }\n      boolVar25 = _DAT_001264b0 != 0;\n      *(byte *)((long)ptrUInt8_1a0 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar22 << 3) | *(byte *)((long)ptrUInt8_1a0 + 0x49) & 0xe7;\n      if (boolVar25) {\n        *(uint *)((long)ptrUInt8_1a0 + 0x44) = *(uint *)((long)ptrUInt8_1a0 + 0x44) | 0x2000;\n      }\n      ptrPtrUInt8 = (undefined8 *)0x0;\n      ptrPtrChar16 = (char **)bfd_openr_next_archived_file(ptrUInt8_14,0);\n      charVar3 = bfd_set_format(ptrUInt8_1a0,*(byte *)(ptrUInt8_14 + 9) & 7);\n      if (charVar3 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(0,ptrUInt8_1a0,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (ptrPtrChar16 != (char **)0x0))) {\n        ptrChar18 = *ptrPtrChar16;\n        ptrChar17 = ptrChar18;\n        if (*ptrChar18 == '/') {\nLAB_0010527d:\n          uintVar12 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(uintVar12,ptrChar18);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*ptrChar17 != '\\0') {\n          ptrChar23 = ptrChar17;\n          if ((*ptrChar17 == '.') && (ptrChar23 = ptrChar17 + 1, ptrChar17[1] == '.')) {\n            ptrChar23 = ptrChar17 + 2;\n            if ((ptrChar17[2] == '\\0') || (ptrChar17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*ptrChar23 != '\\0' && (*ptrChar23 != '/')); ptrChar23 = ptrChar23 + 1) {\n          }\n          ptrChar17 = ptrChar23;\n          if (*ptrChar23 == '/') {\n            extract_and_copy_archive_001052a2();\n            return;\n          }\n        }\n        ptrChar18 = (char *)concat(ptrChar15,&DAT_0011b47d);\n        intVar5 = stat(ptrChar18,&statInfo);\n        ptrUInt8_9 = ptrPtrUInt8;\n        if (-1 < intVar5) {\n          longVar13 = create_temp_directory_0011a0e0(ptrChar18);\n          free(ptrChar18);\n          if (longVar13 == 0) {\n            ptrInt10 = __errno_location();\n            ptrChar18 = strerror(*ptrInt10);\n            uintVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(uintVar12,ptrChar18);\n            goto LAB_00104e93;\n          }\n          ptrUInt8_9 = (undefined8 *)xmalloc(0x18);\n          ptrChar18 = *ptrPtrChar16;\n          *ptrUInt8_9 = ptrPtrUInt8;\n          ptrUInt8_9[2] = 0;\n          ptrUInt8_9[1] = longVar13;\n          ptrChar18 = (char *)concat(longVar13,&DAT_0011b47d,ptrChar18);\n        }\n        intVar5 = 0;\n        if (DAT_001279eb != '\\0') {\n          ptrStat24 = &statInfo;\n          for (longVar13 = 0x24; longVar13 != 0; longVar13 = longVar13 + -1) {\n            *(undefined4 *)&ptrStat24->st_dev = 0;\n            ptrStat24 = (stat *)((long)ptrStat24 + (ulong)byteVar26 * -8 + 4);\n          }\n          ptrPtrChar19 = (char **)ptrPtrChar16[0x1d];\n          if ((char **)ptrPtrChar16[0x1d] == (char **)0x0) {\n            ptrPtrChar19 = ptrPtrChar16;\n          }\n          intVar5 = (**(code **)(ptrPtrChar19[1] + 0x1e8))(ptrPtrChar16,&statInfo);\n          if (intVar5 != 0) {\n            ptrChar17 = *ptrPtrChar16;\n            uintVar12 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(uintVar12,ptrChar17);\n          }\n        }\n        ptrPtrUInt8 = (undefined8 *)xmalloc(0x18);\n        ptrPtrUInt8[1] = ptrChar18;\n        *ptrPtrUInt8 = ptrUInt8_9;\n        ptrPtrUInt8[2] = 0;\n        charVar3 = bfd_check_format(ptrPtrChar16,1);\n        if (charVar3 == '\\0') {\n          uintVar12 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,ptrPtrChar16,0,uintVar12);\n          ptrPtrChar19 = (char **)bfd_openw(ptrChar18,tmpdir);\n          if (ptrPtrChar19 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(ptrChar18,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          ptrPtrChar6 = (char **)ptrPtrChar16[0x1d];\n          if ((char **)ptrPtrChar16[0x1d] == (char **)0x0) {\n            ptrPtrChar6 = ptrPtrChar16;\n          }\n          intVar4 = (**(code **)(ptrPtrChar6[1] + 0x1e8))(ptrPtrChar16);\n          longVar13 = longStack_98;\n          if (intVar4 == 0) {\n            if (longStack_98 < 0) {\n              get_concatenated_string_001125fa(ptrPtrChar16);\n              uintVar12 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(uintVar12);\n            }\n            else {\n              intVar4 = bfd_seek(ptrPtrChar16,0,0);\n              if (intVar4 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  ptrChar17 = *ptrPtrChar19;\n                  uintVar12 = get_concatenated_string_001125fa(ptrPtrChar16);\n                  ptrChar23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(ptrChar23,uintVar12,ptrChar17);\n                }\n                ptrVoid7 = (void *)xmalloc(0x2000);\n                for (; longVar13 != 0; longVar13 = longVar13 - longVar21) {\n                  longVar21 = 0x2000;\n                  if (longVar13 < 0x2001) {\n                    longVar21 = longVar13;\n                  }\n                  longVar8 = bfd_bread(ptrVoid7,longVar21,ptrPtrChar16);\n                  ptrPtrChar6 = ptrPtrChar16;\n                  if ((longVar21 != longVar8) ||\n                     (longVar8 = bfd_bwrite(ptrVoid7,longVar21,ptrPtrChar19), ptrPtrChar6 = ptrPtrChar19,\n                     longVar21 != longVar8)) {\n                    print_error_message_001126c0(0,ptrPtrChar6,0,0);\n                    free(ptrVoid7);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ptrPtrChar19,uintStack_b0 | 0x100);\n                free(ptrVoid7);\n                charVar3 = bfd_close_all_done(ptrPtrChar19);\n                if (charVar3 == '\\0') {\n                  print_error_message_001126c0(ptrChar18,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              uintVar12 = get_concatenated_string_001125fa(ptrPtrChar16);\n              print_error_0011a110(uintVar12);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,ptrPtrChar16,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(ptrPtrChar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(ptrChar18,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(ptrChar18);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            ptrPtrChar19 = (char **)bfd_openw(ptrChar18,*(undefined8 *)ptrPtrChar16[1]);\n          }\n          else {\n            ptrPtrChar19 = (char **)bfd_openw(ptrChar18,tmpdir);\n          }\n          if (ptrPtrChar19 == (char **)0x0) goto LAB_00104e80;\n          charVar3 = FUNC_00114e50(ptrPtrChar16,ptrPtrChar19,archiveInfo);\n          if (charVar3 == '\\0') {\n            intVar4 = bfd_get_arch(ptrPtrChar16);\n            if (intVar4 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(ptrPtrChar19);\n            if (charVar3 == '\\0') {\n              print_error_message_001126c0(ptrChar18,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(ptrPtrChar19);\n          if (charVar3 == '\\0') {\n            print_error_message_001126c0(ptrChar18,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar5 == 0)) {\n            set_file_timestamp_0011a350(ptrChar18,&statInfo);\n          }\n          longVar13 = bfd_openr(ptrChar18,tmpdir);\n          ptrPtrUInt8[2] = longVar13;\n          *ptrLong_198 = longVar13;\n          ptrLong_198 = (long *)(longVar13 + 0xf0);\n          ptrPtrChar19 = (char **)bfd_openr_next_archived_file(ptrUInt8_14);\n          bfd_close(ptrPtrChar16);\n          ptrPtrChar16 = ptrPtrChar19;\n        }\n      }\n      *ptrLong_198 = 0;\n      ptrVoid7 = (void *)xstrdup(*ptrUInt8_1a0);\n      if (DAT_00127a40 == 0) {\n        ptrCodeChar20 = bfd_close;\n      }\n      else {\n        ptrCodeChar20 = bfd_close_all_done;\n      }\n      charVar2 = (*ptrCodeChar20)(ptrUInt8_1a0);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(ptrVoid7,0,0,0);\n      }\n      free(ptrVoid7);\n      ptrVoid7 = (void *)xstrdup(*ptrUInt8_14);\n      charVar2 = bfd_close(ptrUInt8_14);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(ptrVoid7,0,0,0);\n      }\n      free(ptrVoid7);\nLAB_00114b4b:\n      while (ptrPtrUInt8 != (undefined8 *)0x0) {\n        if (ptrPtrUInt8[2] == 0) {\n          rmdir((char *)ptrPtrUInt8[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)ptrPtrUInt8[1]);\n        }\n        free((void *)ptrPtrUInt8[1]);\n        ptrUInt8_14 = (undefined8 *)*ptrPtrUInt8;\n        free(ptrPtrUInt8);\n        ptrPtrUInt8 = ptrUInt8_14;\n      }\n      rmdir(ptrChar15);\n      free(ptrChar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(ptrUInt8_14,1,ptrVoid3);\n  if (charVar2 == '\\0') {\n    intVar5 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(ptrUInt8_14,3,&statInfo);\n    if (charVar2 == '\\0') {\n      intVar4 = bfd_get_error();\n      if (intVar5 != intVar4) {\n        bfd_set_error(intVar5);\n      }\n      print_error_message_001126c0(inputFilePath,0,0,0);\n      if (intVar5 == 0xd) {\n        print_matching_formats_0011256b(ptrVoid3[0]);\n      }\n      if (intVar4 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(statInfo.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar5 == 0xd) {\n      free(ptrVoid3[0]);\n    }\n  }\n  if (tmpdir == 0) {\n    tmpdir = *(long *)ptrUInt8_14[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar13 = bfd_openw(outputFilePath,tmpdir);\n  }\n  else {\n    longVar13 = bfd_fdopenw(outputFilePath,tmpdir,fileDescriptor);\n  }\n  if (longVar13 == 0) goto LAB_00105231;\n  process_function_00114d50(longVar13,ptrUInt8_14,DAT_001264b4);\n  charVar2 = FUNC_00114e50(ptrUInt8_14,longVar13,archiveInfo);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar2 = bfd_close(longVar13);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(longVar13);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(ptrUInt8_14);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close",
                "dcgettext",
                "FUN_00113f50",
                "close",
                "strerror",
                "FUN_00104d25",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "free",
                "bfd_stat",
                "bfd_openr_next_archived_file",
                "FUN_00114d50",
                "bfd_check_format_matches",
                "FUN_00119dd0",
                "bfd_openw",
                "bfd_get_error",
                "__errno_location",
                "bfd_set_error",
                "bfd_fdopenw",
                "bfd_set_format",
                "bfd_openr",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_and_copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "format_and_create_entry_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "useSpecialFormat",
                "plVar1": "dataPtr",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempValue",
                "lVar5": "shiftedValue",
                "local_8c": "formattedString",
                "auStack_8a": "tempArray"
            },
            "code": "\nundefined8 formatAndCreateEntry_0010b800(long baseAddress,int size,char useSpecialFormat)\n\n{\n  long *dataPtr;\n  undefined8 result;\n  size_t stringLength;\n  long tempValue;\n  long shiftedValue;\n  undefined2 formattedString;\n  undefined4 tempArray [24];\n  \n  if (size - 1U < 8) {\n    tempValue = baseAddress + 0xb8;\n    if (useSpecialFormat != '\\0') {\n      tempValue = baseAddress + 0x78;\n    }\n    dataPtr = (long *)(tempValue + (ulong)(size - 1U) * 8);\n    tempValue = *dataPtr;\n    if (tempValue != 0) {\n      result = create_formatted_entry_00109cf4(baseAddress,tempValue,size);\n      return result;\n    }\n    tempValue = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempValue + 1;\n    *dataPtr = tempValue;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",tempValue,tempValue);\n    if (useSpecialFormat == '\\0') {\n      shiftedValue = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + stringLength),\"%ld;%ld;\",-shiftedValue,shiftedValue + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formattedString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = create_entry_00109b52(baseAddress,&formattedString,tempValue,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00109b52",
                "strlen",
                "dcgettext",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_create_entry_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_entries_00109ed3",
                "param_1": "inputBuffer",
                "param_2": "flag",
                "param_3": "status",
                "param_4": "outputArray",
                "param_5": "outputArraySize",
                "uVar1": "entryCount",
                "uVar2": "newEntryCount",
                "cVar3": "entryCreated",
                "pcVar4": "extractedItem",
                "sVar5": "itemLength",
                "__s": "formattedEntry",
                "lVar6": "entryIndex",
                "__ptr": "extractedEntry",
                "uVar7": "result",
                "uVar8": "isFormatted",
                "lVar9": "loopCounter",
                "uVar10": "newArraySize",
                "puVar11": "ptrToNewEntry",
                "bVar12": "byteVar"
            },
            "code": "\nundefined8 processEntries_00109ed3(long inputBuffer,uint flag,undefined4 status,long *outputArray,ulong *outputArraySize)\n\n{\n  ulong entryCount;\n  ulong newEntryCount;\n  char entryCreated;\n  char *extractedItem;\n  size_t itemLength;\n  char *formattedEntry;\n  long entryIndex;\n  void *extractedEntry;\n  undefined8 result;\n  undefined isFormatted;\n  long loopCounter;\n  ulong newArraySize;\n  undefined *ptrToNewEntry;\n  byte byteVar;\n  \n  byteVar = 0;\n  entryIndex = *(long *)(inputBuffer + 0x60);\n  if (entryIndex != 0) {\n    entryCount = *(ulong *)(entryIndex + 0x10);\n    if (((long)entryCount < 1) || (outputArray == (long *)0x0)) {\n      isFormatted = *(undefined *)(entryIndex + 0x1c);\n      extractedItem = (char *)extract_next_item_00109b2f(inputBuffer);\n      itemLength = strlen(extractedItem);\n      formattedEntry = (char *)xmalloc(itemLength + 2);\n      sprintf(formattedEntry,\"%c%s\",(ulong)flag,extractedItem);\n      free(extractedItem);\n      entryIndex = 0;\n    }\n    else {\n      newArraySize = *outputArraySize;\n      if (newArraySize <= entryCount) {\n        if (newArraySize == 0) {\n          newArraySize = 10;\n        }\n        for (; newArraySize <= entryCount; newArraySize = newArraySize * 2) {\n        }\n        entryIndex = xrealloc(*outputArray,newArraySize * 8);\n        newEntryCount = *outputArraySize;\n        *outputArray = entryIndex;\n        ptrToNewEntry = (undefined *)(entryIndex + newEntryCount * 8);\n        for (loopCounter = (newArraySize - newEntryCount) * 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *ptrToNewEntry = 0;\n          ptrToNewEntry = ptrToNewEntry + (ulong)byteVar * -2 + 1;\n        }\n        *outputArraySize = newArraySize;\n      }\n      entryIndex = *(long *)(*outputArray + entryCount * 8);\n      if ((entryIndex != 0) && (*(char *)(*(long *)(inputBuffer + 0x60) + 0x1c) == '\\0')) {\n        extractedEntry = (void *)extract_next_item_00109b2f(inputBuffer);\n        free(extractedEntry);\n        result = create_formatted_entry_00109cf4(inputBuffer,entryIndex,status);\n        return result;\n      }\n      entryIndex = *(long *)(inputBuffer + 0x68);\n      *(long *)(inputBuffer + 0x68) = entryIndex + 1;\n      extractedItem = (char *)extract_next_item_00109b2f(inputBuffer);\n      itemLength = strlen(extractedItem);\n      formattedEntry = (char *)xmalloc(itemLength + 0x14);\n      sprintf(formattedEntry,\"%ld=%c%s\",entryIndex,(ulong)flag,extractedItem);\n      free(extractedItem);\n      isFormatted = 1;\n      *(long *)(*outputArray + entryCount * 8) = entryIndex;\n    }\n    entryCreated = create_entry_00109b52(inputBuffer,formattedEntry,entryIndex,isFormatted,status);\n    if (entryCreated != '\\0') {\n      free(formattedEntry);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "xrealloc",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_entries_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_0010bf86",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_00114d60",
                "FUN_0010a77a",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011378f",
                "FUN_00116852",
                "FUN_00112904",
                "FUN_0010c139",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00113da9",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_001199d0",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_00113b98",
                "FUN_00114460",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_00107880",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_00114cf0",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010a69a",
                "FUN_00112925",
                "FUN_00113d6e",
                "FUN_00114c80",
                "FUN_0010c7a0",
                "FUN_0010e9a0",
                "FUN_0010da0b",
                "FUN_0010e918",
                "FUN_0010c6be",
                "FUN_00113c43",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bd62",
                "FUN_00114190",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_file_info_0010bbd3",
                "param_1": "fileInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "prevFileInfo",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "lVar4": "i",
                "puVar5": "ptr",
                "pcVar6": "filenamePtr",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeFileInfo_0010bbd3(long *fileInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *prevFileInfo;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  long i;\n  undefined4 *ptr;\n  char *filenamePtr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  ptr1 = (undefined4 *)xmalloc(0x18);\n  ptr = ptr1;\n  for (i = 6; i != 0; i = i + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr1 + 2) = filenamePtr;\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  fileInfo[2] = (long)ptr1;\n  ptr = ptr2;\n  for (i = 6; i != 0; i = i + -1) {\n    *ptr = 0;\n    ptr = ptr + (ulong)flag * -2 + 1;\n  }\n  prevFileInfo = (undefined8 *)fileInfo[1];\n  *(undefined4 **)(ptr2 + 2) = ptr1;\n  if (prevFileInfo == (undefined8 *)0x0) {\n    if (*fileInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *fileInfo = (long)ptr2;\n  }\n  else {\n    *prevFileInfo = ptr2;\n  }\n  fileInfo[1] = (long)ptr2;\n  fileInfo[5] = 0;\n  *(undefined (*) [16])(fileInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_file_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_concatenated_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_concatenated_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_concatenated_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = get_concatenated_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = get_concatenated_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_concatenated_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_concatenated_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = detect_input_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_and_create_output_section_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_function_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_function_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_function_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improve_binary_analysis_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_memory_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = analyze_debug_records_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = validate_and_initialize_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_memory_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = analyze_debug_records_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = validate_and_initialize_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_file_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_file_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_type_code_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = end_block_debugging_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_type_code_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = initialize_debug_record_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_debug_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = validate_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_validity_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_validity_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_validity_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = check_pattern_validity_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = process_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_binary_file_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_section_00115dc0,param_2);\n    bfd_map_over_sections(param_1,reverse_and_print_section_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)build_attribute_notes_parser_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "bfd_set_format",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "get_value_from_data_00115d00",
                "param_1": "value",
                "param_2": "data",
                "uVar1": "dataType",
                "lVar2": "result"
            },
            "code": "\nlong getValueFromData_00115d00(long value,long data)\n\n{\n  uint dataType;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(data + 8) + 8) == 5) {\n      if (*(int *)(value + 0x28) == *(int *)(*(long *)(data + 0x110) + 0xd40)) {\n        dataType = *(uint *)(value + 0x2c);\n        if (dataType == 0) {\n          result = 0;\n        }\n        else if ((ulong)dataType <\n                 *(ulong *)(*(long *)(data + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(dataType - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "get_value_from_data_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_and_allocate_data_00113c43",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "lVar1": "data_ptr",
                "plVar2": "allocated_ptr",
                "auVar3": "return_val"
            },
            "code": "\nundefined  [16]\ninitialize_and_allocate_data_00113c43(long input_param_1,long input_param_2,long input_param_3,long input_param_4,undefined input_param_5,\n            undefined8 input_param_6)\n\n{\n  long data_ptr;\n  long *allocated_ptr;\n  undefined return_val [16];\n  \n  if ((input_param_1 != 0) && (input_param_2 != 0)) {\n    data_ptr = initialize_data_00112904(0x10,0);\n    if (data_ptr != 0) {\n      allocated_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_ptr + 0x21) = 0;\n      *allocated_ptr = input_param_1;\n      *(undefined4 *)((long)allocated_ptr + 0x24) = 0;\n      allocated_ptr[1] = input_param_2;\n      allocated_ptr[2] = input_param_3;\n      allocated_ptr[3] = input_param_4;\n      *(undefined *)(allocated_ptr + 4) = input_param_5;\n      *(long **)(data_ptr + 0x10) = allocated_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  data_ptr = 0;\nLAB_00113caa:\n  return_val._8_8_ = input_param_6;\n  return_val._0_8_ = data_ptr;\n  return return_val;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_debug_record_00112a33",
                "param_1": "record",
                "param_2": "data",
                "param_3": "tag",
                "param_4": "debugType",
                "param_5": "context",
                "param_6": "size",
                "param_7": "flags",
                "uVar1": "result",
                "lVar2": "value",
                "plVar3": "slots"
            },
            "code": "\nbool processDebugRecord_00112a33(undefined8 record,long data,undefined8 tag,byte debugType,undefined8 context\n                 ,undefined8 size,uint flags)\n\n{\n  undefined result;\n  long value;\n  long *slots;\n  \n  if (debugType < 0x12) {\n    if (debugType != 0) {\n      switch(debugType) {\n      case 1:\n        result = record_variable_debug_0010c05d(context,*(undefined8 *)(data + 8),size,4,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable_debug_0010c05d(context,*(undefined8 *)(data + 8),size,(flags & 0xff) + 2,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable_debug_0010c05d(context,*(undefined8 *)(data + 8),size,5,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter_0010bd62(context,*(undefined8 *)(data + 8),size,1,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        value = validate_debug_tag_type_0010c6be(context,*(undefined8 *)(data + 8));\n        if (value == 0) {\n          return false;\n        }\n        slots = (long *)allocate_and_initialize_slots_0010da0b(record,tag);\n        *slots = value;\n        break;\n      case 0xd:\n        value = initialize_debug_data_0010c218(context,*(undefined8 *)(data + 8));\n        return value != 0;\n      case 0x11:\n        result = debug_record_parameter_0010bd62(context,*(undefined8 *)(data + 8),size,2,\n                             *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (debugType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable_debug_0010c05d(context,*(undefined8 *)(data + 8),size,1,\n                         *(long *)(data + 0x10) + *(long *)(*(long *)(data + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_record_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "initialize_data_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "type",
                "pcVar2": "dataTypeString",
                "uVar3": "paramValue",
                "lVar4": "dataTypePtr",
                "plVar5": "fileContentPtr",
                "uVar6": "index"
            },
            "code": "\n\n\nlong initializeDataType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint type;\n  char *dataTypeString;\n  undefined8 paramValue;\n  long dataTypePtr;\n  long *fileContentPtr;\n  uint index;\n  \n  if ((*param3 == 0) && (type = param3[1], (int)type < 0)) {\n    index = ~type;\n    if (index < 0x22) {\n      dataTypePtr = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (dataTypePtr == 0) {\n        switch(index) {\n        case 1:\n          paramValue = set_param_value_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          paramValue = set_param_value_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          paramValue = set_param_value_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          paramValue = set_param_value_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          paramValue = set_param_value_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          paramValue = set_param_value_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          paramValue = set_param_value_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          paramValue = set_param_value_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          paramValue = set_param_value_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          paramValue = initialize_data_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          paramValue = initialize_data_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          paramValue = initialize_data_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          paramValue = initialize_data_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          paramValue = set_param_value_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          paramValue = initialize_data_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          paramValue = initialize_data_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          paramValue = initialize_data_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          paramValue = 0;\n          break;\n        case 0x13:\n          paramValue = set_param_value_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          paramValue = initialize_data_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          paramValue = initialize_data_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          paramValue = initialize_data_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          paramValue = initialize_data_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          paramValue = initialize_data_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          paramValue = initialize_data_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          paramValue = set_param_value_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          paramValue = set_param_value_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          paramValue = set_param_value_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          paramValue = set_param_value_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          paramValue = set_param_value_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          paramValue = set_param_value_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          paramValue = initialize_data_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          paramValue = set_param_value_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          paramValue = set_param_value_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        dataTypePtr = initialize_debug_data_0010c218(param1,dataTypeString,paramValue);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = dataTypePtr;\n        return dataTypePtr;\n      }\n      return dataTypePtr;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)type);\n  }\n  else {\n    fileContentPtr = (long *)get_file_content_00109022(param2);\n    if (fileContentPtr != (long *)0x0) {\n      if (*fileContentPtr == 0) {\n        dataTypePtr = create_data_structure_00113e23(fileContentPtr,0);\n        return dataTypePtr;\n      }\n      return *fileContentPtr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00109022"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_binary_0010e07c",
                "param_1": "inputFile",
                "param_2": "records",
                "param_3": "outputFile",
                "param_4": "format",
                "param_5": "header",
                "param_6": "options",
                "lVar1": "headerSize",
                "lVar2": "recordOffset",
                "lVar3": "numRecordsProcessed",
                "cVar4": "result",
                "uVar5": "error",
                "__ptr": "recordBuffer",
                "uVar6": "recordSize",
                "uVar7": "returnValue",
                "puVar8": "recordData",
                "pcVar9": "errorMessage",
                "puVar10": "auxData",
                "uVar11": "size",
                "lVar12": "recordCount",
                "iVar13": "offset",
                "iVar14": "bufferSize",
                "local_a8": "localVar1",
                "uStack_a4": "localVar2",
                "uStack_a0": "localVar3",
                "uStack_9c": "localVar4",
                "local_88": "symbolData",
                "local_6a": "symbolType",
                "local_68": "auxType",
                "local_67": "auxValid",
                "local_60": "auxBuffer",
                "local_56": "auxSize"
            },
            "code": "\nundefined8\nparseBinary_0010e07c(undefined8 inputFile,long *records,undefined8 outputFile,int format,long header,\n            undefined8 options)\n\n{\n  long headerSize;\n  long recordOffset;\n  long numRecordsProcessed;\n  char result;\n  undefined4 error;\n  void *recordBuffer;\n  undefined8 recordSize;\n  undefined8 returnValue;\n  undefined4 *recordData;\n  char *errorMessage;\n  undefined *auxData;\n  uint size;\n  long recordCount;\n  int offset;\n  int bufferSize;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined symbolData [30];\n  undefined2 symbolType;\n  byte auxType;\n  byte auxValid;\n  undefined auxBuffer [10];\n  ushort auxSize;\n  \n  bufferSize = 10;\n  recordCount = 0;\n  headerSize = *(long *)(header + 0x18);\n  recordBuffer = (void *)xmalloc(0x50);\n  while ((records[3] < headerSize && (records[2] < records[1]))) {\n    recordOffset = *(long *)(*records + records[2] * 8);\n    result = bfd_coff_get_syment(inputFile,recordOffset,symbolData);\n    if (result == '\\0') {\n      error = bfd_get_error();\n      recordSize = bfd_errmsg(error);\n      errorMessage = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      returnValue = dcgettext(0,errorMessage,5);\n      print_error_message_00119ed0(returnValue,recordSize);\n      free(recordBuffer);\n      return 0;\n    }\n    numRecordsProcessed = records[3];\n    auxData = (undefined *)0x0;\n    records[2] = records[2] + 1;\n    records[3] = numRecordsProcessed + 1 + (ulong)auxValid;\n    if (auxValid != 0) {\n      auxData = auxBuffer;\n      result = bfd_coff_get_auxent(inputFile,recordOffset,0,auxData);\n      if (result == '\\0') {\n        error = bfd_get_error();\n        recordSize = bfd_errmsg(error);\n        errorMessage = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (auxType == 0x12) {\n      size = (uint)auxSize;\n      offset = (int)*(undefined8 *)(recordOffset + 0x10) +\n               (int)*(undefined8 *)(*(long *)(recordOffset + 0x20) + 0x30);\n    }\n    else {\n      if (auxType < 0x13) {\n        if ((auxType == 8) || (auxType == 0xb)) {\n          size = 0;\n          offset = ((int)*(undefined8 *)(recordOffset + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(recordOffset + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (auxType == 0x66) break;\n      size = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    returnValue = parse_type_code_0010dac0(inputFile,records,outputFile,numRecordsProcessed,symbolType,auxData,1);\n    recordSize = *(undefined8 *)(recordOffset + 8);\n    recordData = (undefined4 *)xmalloc(0x20);\n    localVar1 = (undefined4)recordSize;\n    localVar2 = (undefined4)((ulong)recordSize >> 0x20);\n    localVar3 = (undefined4)returnValue;\n    localVar4 = (undefined4)((ulong)returnValue >> 0x20);\n    *(undefined8 *)(recordData + 5) = 0;\n    recordData[6] = offset;\n    recordData[7] = size;\n    recordData[4] = 0;\n    *recordData = localVar1;\n    recordData[1] = localVar2;\n    recordData[2] = localVar3;\n    recordData[3] = localVar4;\n    if (bufferSize <= (int)recordCount + 1) {\n      bufferSize = bufferSize + 10;\n      recordBuffer = (void *)xrealloc(recordBuffer,(long)bufferSize << 3,recordData,0,options);\n    }\n    *(undefined4 **)((long)recordBuffer + recordCount * 8) = recordData;\n    recordCount = recordCount + 1;\n  }\n  *(undefined8 *)((long)recordBuffer + (long)(int)recordCount * 8) = 0;\n  recordSize = initialize_data_structure_00113da9(format == 8,*(undefined2 *)(header + 10),recordBuffer);\n  return recordSize;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113da9",
                "dcgettext",
                "FUN_0010dac0",
                "bfd_coff_get_auxent",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_binary_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_data_structure_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3"
            },
            "code": "\nundefined8 get_default_value_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "file_path",
                "param_2": "hash_map",
                "param_3": "data",
                "__n": "file_size",
                "__ptr": "file_data",
                "__stream": "file_stream",
                "sVar5": "bytes_read",
                "ppbVar6": "hash_map_slot",
                "pbVar7": "current_char",
                "bVar8": "current_byte",
                "pbVar9": "next_char",
                "pbVar10": "current_byte_ptr",
                "pbVar11": "next_byte_ptr",
                "pbVar12": "line_start_ptr",
                "iVar1": "line_count",
                "piVar2": "errno_value",
                "pcVar3": "error_message",
                "uVar4": "translated_error_message"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *file_path,undefined8 hash_map,byte **data)\n\n{\n  int line_count;\n  int *errno_value;\n  char *error_message;\n  undefined8 translated_error_message;\n  size_t file_size;\n  byte *file_data;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_map_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_char;\n  byte *current_byte_ptr;\n  byte *next_byte_ptr;\n  byte *line_start_ptr;\n  \n  file_size = get_file_information_00113f50();\n  if (file_size == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    file_data = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(file_path,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      errno_value = __errno_location();\n      error_message = strerror(*errno_value);\n      translated_error_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(translated_error_message,file_path,error_message);\n    }\n    bytes_read = fread(file_data,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_count = ferror(file_stream), line_count != 0)) {\n      translated_error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(translated_error_message,file_path);\n    }\n    line_count = 1;\n    fclose(file_stream);\n    *(undefined2 *)(file_data + file_size) = 10;\n    current_byte = *file_data;\n    line_start_ptr = file_data;\n    while (current_byte_ptr = line_start_ptr, current_byte != 0) {\n      for (; current_byte = *current_byte_ptr, next_byte_ptr = current_byte_ptr, current_byte != 10; current_byte_ptr = current_byte_ptr + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_char = current_byte_ptr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_byte_ptr = 0;\n            next_char = current_byte_ptr + 1;\n            if (current_byte_ptr[1] == 10) {\n              next_char = current_byte_ptr + 2;\n              next_byte_ptr = current_byte_ptr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_byte_ptr = 0;\n      if (current_byte_ptr[1] == 0xd) {\n        next_byte_ptr = current_byte_ptr + 1;\n        next_char = current_byte_ptr + 2;\n      }\n      else {\n        next_char = current_byte_ptr + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start_ptr;\n      while ((current_byte == 0x20 || (current_byte_ptr = line_start_ptr, current_byte == 9))) {\n        current_byte_ptr = line_start_ptr + 1;\n        line_start_ptr = line_start_ptr + 1;\n        current_byte = *current_byte_ptr;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_byte_ptr[1];\n        current_byte_ptr = current_byte_ptr + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_byte_ptr[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_byte_ptr[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_byte_ptr[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_byte_ptr[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_byte_ptr[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_byte_ptr[6];\n          current_char = current_byte_ptr + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          translated_error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(translated_error_message,file_path,line_count);\n        }\n      }\nLAB_00114599:\n      *current_byte_ptr = 0;\n      if (line_start_ptr < current_byte_ptr) {\n        hash_map_slot = (byte **)htab_find_slot(hash_map,line_start_ptr,1);\n        *hash_map_slot = line_start_ptr;\n      }\n      line_count = line_count + 1;\n      line_start_ptr = next_char;\n      current_byte = next_byte_ptr[1];\n    }\n    *data = file_data;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "xmalloc",
                "fclose",
                "__errno_location",
                "dcgettext",
                "ferror",
                "fopen",
                "fread",
                "FUN_00113f50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_connection_string_0010a94e",
                "param_1": "connectionStruct",
                "param_2": "username",
                "param_3": "password",
                "param_4": "parameterType",
                "cVar1": "isFlagSet",
                "lVar2": "connectionPtr",
                "__s": "nextItem",
                "sVar3": "connStrLength",
                "sVar4": "usernameLength",
                "sVar5": "nextItemLength",
                "sVar6": "passwordLength",
                "pcVar7": "newConnection",
                "uVar8": "result",
                "pcVar9": "paramFlag"
            },
            "code": "\nundefined8 generateConnectionString_0010a94e(long connectionStruct,char *username,char *password,int parameterType)\n\n{\n  char isFlagSet;\n  long connectionPtr;\n  char *nextItem;\n  size_t connStrLength;\n  size_t usernameLength;\n  size_t nextItemLength;\n  size_t passwordLength;\n  char *newConnection;\n  undefined8 result;\n  char *paramFlag;\n  \n  isFlagSet = *(char *)(*(long *)(connectionStruct + 0x60) + 0x1c);\n  nextItem = (char *)extract_next_item_00109b2f();\n  newConnection = *(char **)(*(long *)(connectionStruct + 0x60) + 0x20);\n  if (newConnection == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    connStrLength = strlen(newConnection);\n    usernameLength = strlen(username);\n    nextItemLength = strlen(nextItem);\n    passwordLength = strlen(password);\n    newConnection = (char *)xmalloc(connStrLength + 10 + usernameLength + nextItemLength + passwordLength);\n    if (parameterType == 1) {\n      paramFlag = \"/1\";\n    }\n    else {\n      paramFlag = \"/0\";\n      if ((parameterType != 2) && (paramFlag = \"\", parameterType != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(newConnection,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(connectionStruct + 0x60) + 0x20),username,paramFlag,\n            nextItem,password,*(long *)(connectionStruct + 0x60));\n    free(*(void **)(*(long *)(connectionStruct + 0x60) + 0x20));\n    connectionPtr = *(long *)(connectionStruct + 0x60);\n    *(char **)(connectionPtr + 0x20) = newConnection;\n    if (isFlagSet != '\\0') {\n      *(undefined *)(connectionPtr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)connectionPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_connection_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_debug_info_from_binary_00113b1e",
                "param_1": "binary_address",
                "param_2": "unused_parameter",
                "param_3": "debug_info_address",
                "param_4": "unused_parameter",
                "auVar1": "debug_info_result",
                "piVar2": "debug_info_ptr",
                "uVar3": "debug_info_value",
                "auVar4": "extracted_info"
            },
            "code": "\nundefined  [16] extract_debug_info_from_binary_00113b1e(long binary_address,undefined8 unused_parameter,ulong debug_info_address,undefined8 unused_parameter)\n\n{\n  undefined debug_info_result [16];\n  int *debug_info_ptr;\n  undefined8 debug_info_value;\n  undefined extracted_info [16];\n  \n  if (binary_address != 0) {\n    debug_info_ptr = (int *)analyze_debug_info_00112b6e(binary_address,0);\n    if ((debug_info_ptr == (int *)0x0) || (3 < *debug_info_ptr - 7U)) {\n      debug_info_value = 0;\n    }\n    else {\n      debug_info_value = **(undefined8 **)(debug_info_ptr + 4);\n    }\n    extracted_info._8_8_ = unused_parameter;\n    extracted_info._0_8_ = debug_info_value;\n    return extracted_info;\n  }\n  debug_info_result._8_8_ = 0;\n  debug_info_result._0_8_ = debug_info_address;\n  return debug_info_result << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_debug_info_from_binary_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "create_entry_with_parameters_0010a0e9",
                "param_1": "function_param_1",
                "param_2": "function_param_2",
                "param_3": "function_param_3",
                "uVar1": "item_offset",
                "uVar2": "entry_result",
                "__s": "item",
                "sVar3": "item_length",
                "__s_00": "new_item"
            },
            "code": "\nundefined4 create_entry_with_parameters_0010a0e9(long function_param_1,undefined8 function_param_2,undefined8 function_param_3)\n\n{\n  undefined item_offset;\n  undefined4 entry_result;\n  char *item;\n  size_t item_length;\n  char *new_item;\n  \n  item_offset = *(undefined *)(*(long *)(function_param_1 + 0x60) + 0x1c);\n  entry_result = *(undefined4 *)(*(long *)(function_param_1 + 0x60) + 0x18);\n  item = (char *)extract_next_item_00109b2f();\n  item_length = strlen(item);\n  new_item = (char *)xmalloc(item_length + 100);\n  sprintf(new_item,\"r%s;%ld;%ld;\",item,function_param_2,function_param_3);\n  free(item);\n  entry_result = create_entry_00109b52(function_param_1,new_item,0,item_offset,entry_result);\n  if ((char)entry_result != '\\0') {\n    free(new_item);\n  }\n  return entry_result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_entry_with_parameters_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_and_compare_strings_00114c20",
                "param_1": "input",
                "cVar1": "comparisonResult",
                "pcVar2": "pointerToChar"
            },
            "code": "\nvoid processAndCompareStrings_00114c20(long input)\n\n{\n  char comparisonResult;\n  char *pointerToChar;\n  \n  process_function_00114190(input,1,1);\n  comparisonResult = compare_strings_00113fb0(input,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    pointerToChar = (char *)(input + 5);\n    if (*(char *)(input + 4) != 'a') {\n      pointerToChar = (char *)(input + 4);\n    }\n    if (*pointerToChar != '\\0') {\n      process_function_00114190(pointerToChar,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_and_compare_strings_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_section_for_duplicate_00115f50",
                "param_1": "input",
                "param_2": "strings",
                "param_3": "flag",
                "__s1": "currentString",
                "uVar1": "comparisonResult",
                "uVar2": "returnVal",
                "extraout_EDX": "extraOutput",
                "plVar3": "list",
                "auVar4": "resultArray"
            },
            "code": "\nuint checkSectionForDuplicate_00115f50(long input,char **strings,char flag)\n\n{\n  char *currentString;\n  uint comparisonResult;\n  undefined4 returnVal;\n  undefined4 extraOutput;\n  long *list;\n  undefined resultArray [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  resultArray = process_section_001159d0(strings);\n  if (resultArray[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      currentString = *strings;\n      list = DAT_001279d8;\n      do {\n        comparisonResult = strcmp(currentString,(char *)list[1]);\n        resultArray._4_4_ = 0;\n        resultArray._0_4_ = comparisonResult;\n        resultArray._8_4_ = extraOutput;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        list = (long *)*list;\n      } while (list != (long *)0x0);\n    }\n    returnVal = resultArray._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (resultArray._8_4_ = returnVal, resultArray._0_8_ = *(long *)(input + 8),\n         *(int *)(*(long *)(input + 8) + 8) != 5)) ||\n        ((resultArray._0_8_ = (ulong)strings[0x1a], *(int *)(strings[0x1a] + 4) != 7 ||\n         (resultArray = compare_strings_00113fb0(*strings,\".gnu.build.attributes\"), resultArray[0] == '\\0')))) &&\n       ((*(byte *)((long)strings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(resultArray._1_7_,strings[8] == (char *)0x0) |\n             CONCAT31(resultArray._9_3_,strings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_001159d0",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_section_for_duplicate_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "param1",
                "unaff_EBP": "param2",
                "uVar1": "section_length",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *param1;\n  undefined4 param2;\n  \n  section_length = *param1;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(error_message,section_length,param2);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_0011a2e0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "format_and_create_entry_0010b948",
                "param_1": "dataPointer",
                "param_2": "count",
                "lVar1": "entryPointer",
                "cVar2": "formatResult",
                "__ptr": "extractedItem",
                "uVar3": "countUnsigned",
                "uVar4": "countMinusOne",
                "local_5a": "formattedEntry"
            },
            "code": "\nvoid formatAndCreateEntry_0010b948(long dataPointer,uint count)\n\n{\n  long entryPointer;\n  char formatResult;\n  void *extractedItem;\n  ulong countUnsigned;\n  uint countMinusOne;\n  char formattedEntry [50];\n  \n  countMinusOne = count - 1;\n  countUnsigned = (ulong)count;\n  if ((countMinusOne < 0x10) && (entryPointer = *(long *)(dataPointer + 0xf8 + (ulong)countMinusOne * 8), entryPointer != 0)) {\n    create_formatted_entry_00109cf4(dataPointer,entryPointer,countUnsigned);\n    return;\n  }\n  formatResult = format_and_create_entry_0010b800(dataPointer,4,0);\n  if (formatResult != '\\0') {\n    extractedItem = (void *)extract_next_item_00109b2f(dataPointer);\n    entryPointer = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = entryPointer + 1;\n    if (countMinusOne < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)countMinusOne * 8) = entryPointer;\n    }\n    sprintf(formattedEntry,\"%ld=r%s;%u;0;\",entryPointer,extractedItem,countUnsigned);\n    free(extractedItem);\n    create_entry_00109b52(dataPointer,formattedEntry,entryPointer,1,countUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_create_entry_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010e07c",
                "FUN_00119970",
                "FUN_00114690",
                "FUN_00116490",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00108200",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00115b70",
                "FUN_00113f50",
                "FUN_0010be1a",
                "FUN_00108d9a",
                "FUN_00109a32",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0010808f",
                "FUN_0011256b",
                "FUN_00104966",
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00119f70",
                "FUN_00108375",
                "FUN_00104920",
                "FUN_0010bc80",
                "FUN_00112b6e",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010543c",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_00114460",
                "FUN_00107976",
                "FUN_0010551d",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010882c",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_0010871c",
                "FUN_001083de",
                "FUN_00108808",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_0010da0b",
                "FUN_0010c892",
                "FUN_0010b800",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00108072",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00108916",
                "FUN_0010914e",
                "FUN_00112c1f",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_00108a2a",
                "FUN_00114e00",
                "FUN_0010c218",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "analyze_debug_info_00112b6e",
                "param_1": "debug_info",
                "param_2": "circular_deps",
                "iVar1": "info_status",
                "uVar2": "offset_value",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_dep",
                "bVar5": "is_circular",
                "local_18": "remaining_deps",
                "local_10": "current_info",
                "_stderr": "error_stream"
            },
            "code": "\n\n\nint * analyze_debug_info_00112b6e(int *debug_info,long *circular_deps)\n\n{\n  int info_status;\n  undefined8 offset_value;\n  char *format_string;\n  int *result;\n  long *current_dep;\n  bool is_circular;\n  long *remaining_deps;\n  int *current_info;\n  \n  info_status = *debug_info;\n  if ((info_status != 1) && (1 < info_status - 0x16U)) {\n    return debug_info;\n  }\n  current_dep = circular_deps;\n  while (current_dep != (long *)0x0) {\n    if ((debug_info == (int *)current_dep[1]) ||\n       (is_circular = current_dep == (long *)*current_dep, current_dep = (long *)*current_dep, is_circular)) {\n      offset_value = get_offset_value_001129f4(debug_info,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(error_stream,format_string,offset_value);\n      return (int *)0x0;\n    }\n  }\n  remaining_deps = circular_deps;\n  current_info = debug_info;\n  if (info_status - 0x16U < 2) {\n    result = (int *)analyze_debug_info_00112b6e((*(undefined8 **)(debug_info + 4))[1],&remaining_deps);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(debug_info + 4);\n  if (debug_info == result) {\n    return debug_info;\n  }\n  if (result == (int *)0x0) {\n    return debug_info;\n  }\n  result = (int *)analyze_debug_info_00112b6e(result,&remaining_deps);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "analyze_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "length",
                "param_4": "param",
                "param_5": "flag",
                "param_6": "condition1",
                "param_7": "condition2",
                "uVar1": "result",
                "__s": "item",
                "__s_00": "formatted_item",
                "sVar2": "item_length",
                "cVar3": "char_flag"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data_ptr,undefined8 param_ptr,ulong length,undefined param,ulong flag,\n            byte condition1,byte condition2)\n\n{\n  undefined4 result;\n  char *item;\n  char *formatted_item;\n  size_t item_length;\n  char char_flag;\n  \n  if (((condition2 ^ 1) & condition1) == 0) {\n    item = (char *)0x0;\n    char_flag = '\\0';\n  }\n  else {\n    char_flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    item = (char *)extract_next_item_00109b2f();\n    flag = flag & 0xffffffff;\n    length = length & 0xffffffff;\n  }\n  result = process_data_0010a69a(data_ptr,param_ptr,length,param,flag);\n  if ((char)result != '\\0') {\n    if (condition1 == 0) {\n      return result;\n    }\n    if (condition2 == 0) {\n      if (item == (char *)0x0) {\n        return 0;\n      }\n      item_length = strlen(item);\n      formatted_item = (char *)xmalloc(item_length + 3);\n      sprintf(formatted_item,\"~%%%s\",item);\n      free(item);\n      if (char_flag != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      formatted_item = (char *)xmalloc(0x14);\n      sprintf(formatted_item,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = formatted_item;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010a69a",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "initialize_and_store_data_00113d6e",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "data_initialized",
                "puVar2": "allocated_data"
            },
            "code": "\nlong initialize_and_store_data_00113d6e(undefined8 data_1,undefined8 data_2)\n\n{\n  long data_initialized;\n  undefined8 *allocated_data;\n  \n  data_initialized = initialize_data_00112904(0xb,0);\n  if (data_initialized != 0) {\n    allocated_data = (undefined8 *)xmalloc(0x10);\n    *allocated_data = data_1;\n    allocated_data[1] = data_2;\n    *(undefined8 **)(data_initialized + 0x10) = allocated_data;\n  }\n  return data_initialized;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_00114690",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_0010c1c6",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00116852",
                "FUN_00109b2f",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e453",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_00107880",
                "FUN_0011173a",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010e9a0",
                "FUN_001081e9",
                "FUN_0010e918",
                "FUN_001088ae",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00114b84",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "process_function_00114d50",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition"
            },
            "code": "\nvoid processFunction_00114d50(long input1,long input2,uint condition)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "process_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "defaultUsage",
                "pcVar2": "translationString"
            },
            "code": "\nvoid printUsageMessage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 defaultUsage;\n  char *translationString;\n  \n  defaultUsage = DAT_00127600;\n  translationString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,translationString,defaultUsage);\n  translationString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,translationString);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    translationString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translationString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "FUN_00104a35",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorType",
                "param_2": "errorCode",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMsg",
                "param_10": "concatStringSize",
                "param_11": "concatStrings",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localPointer1",
                "local_f0": "localPointer2",
                "local_e8": "localBuffer",
                "local_c8": "localParam1",
                "local_c0": "localParam2",
                "local_b8": "localParam3",
                "local_a8": "localParam4",
                "local_98": "localParam5",
                "local_88": "localParam6",
                "local_78": "localParam7",
                "local_68": "localParam8",
                "local_58": "localParam9",
                "local_48": "localParam10"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorType,undefined4 errorCode,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long errorMsg,long concatStringSize,long *concatStrings,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char condition;\n  int bfdError;\n  undefined8 errorMessage;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localPointer1;\n  undefined *localPointer2;\n  undefined localBuffer [32];\n  undefined8 localParam1;\n  undefined8 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  undefined4 localParam9;\n  undefined4 localParam10;\n  \n  if (condition != '\\0') {\n    localParam3 = errorType;\n    localParam4 = errorCode;\n    localParam5 = param3;\n    localParam6 = param4;\n    localParam7 = param5;\n    localParam8 = param6;\n    localParam9 = param7;\n    localParam10 = param8;\n  }\n  localParam1 = param13;\n  localParam2 = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (concatStringSize != 0) {\n    if (errorMsg == 0) {\n      errorMsg = get_concatenated_string_001125fa(concatStringSize);\n    }\n    if ((concatStrings != (long *)0x0) && (*concatStrings != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMsg);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMsg);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    localPointer1 = &stack0x00000008;\n    localPointer2 = localBuffer;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&localVar1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "fwrite",
                "bfd_errmsg",
                "bfd_get_error",
                "fprintf",
                "dcgettext",
                "vfprintf",
                "fflush",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001088ae",
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_data_00113b4a",
                "param_1": "inputParam",
                "lVar1": "result"
            },
            "code": "\nlong initializeData_00113b4a(long inputParam)\n\n{\n  long result;\n  \n  if (inputParam != 0) {\n    result = initialize_data_00112904(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = inputParam;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_info_0010edb4",
                "param_1": "fileInfo",
                "param_2": "filename",
                "param_3": "flags",
                "param_4": "filesize",
                "cVar1": "result",
                "iVar2": "filenameComparison",
                "uVar3": "hashResult",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateFileInfo_0010edb4(long fileInfo,undefined8 filename,undefined4 flags,ulong filesize)\n\n{\n  char result;\n  int filenameComparison;\n  undefined8 hashResult;\n  undefined8 additionalParam;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < filesize) {\n    *(ulong *)(fileInfo + 0x1f0) = filesize;\n  }\n  filenameComparison = filename_cmp(filename);\n  if (filenameComparison != 0) {\n    result = process_bfd_hash_0010e2f0(fileInfo,0x84,0,filesize,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = filename;\n  }\n  hashResult = process_bfd_hash_0010e2f0(fileInfo,0x44,flags,filesize - *(long *)(fileInfo + 0x200),0,additionalParam);\n  return hashResult;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_info_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0010554f",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_0010c892",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_0010bc80",
                "FUN_0010914e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_00108a2a",
                "FUN_0010b0fa",
                "FUN_00104a35",
                "FUN_0010bf20",
                "FUN_0010c218"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_entries_0010e5db",
                "param_1": "baseAddress",
                "param_2": "entryCount",
                "__ptr": "nextItemPointer",
                "__s": "nextItemString",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "additionalData",
                "iVar3": "iterationCount",
                "auVar4": "returnValue",
                "cVar1": "hashResult"
            },
            "code": "\nundefined  [16] processEntries_0010e5db(long baseAddress,int entryCount)\n\n{\n  char hashResult;\n  void *nextItemPointer;\n  char *nextItemString;\n  size_t stringLength;\n  char *modifiedString;\n  ulong additionalData;\n  int iterationCount;\n  undefined returnValue [16];\n  \n  iterationCount = 0;\n  do {\n    if (entryCount <= iterationCount) {\n      returnValue = process_entries_00109ed3(baseAddress,0x66,0,baseAddress + 0x188,baseAddress + 400,additionalData);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(baseAddress + 0x60) + 0x1c) == '\\0') {\n      nextItemPointer = (void *)extract_next_item_00109b2f(baseAddress);\n      free(nextItemPointer);\n    }\n    else {\n      nextItemString = (char *)extract_next_item_00109b2f(baseAddress);\n      stringLength = strlen(nextItemString);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",nextItemString);\n      free(nextItemString);\n      hashResult = process_bfd_hash_0010e2f0(baseAddress,0x80,0,0,modifiedString);\n      if (hashResult == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = additionalData;\n        return returnValue << 0x40;\n      }\n      free(modifiedString);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_message_00104d25",
                "param_7": "userInput",
                "print_error_message_001126c0": "printErrorMessage",
                "remove_directory_00114b84": "removeDirectory"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00104d25(void)\n\n{\n  undefined8 userInput;\n  \n  DAT_00127a40 = 1;\n  printErrorMessage(0,userInput,0,0);\n  removeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "improve_and_dump_binary_0010551d"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong improve_and_dump_binary_0010551d(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  code *pcVar4;\n  undefined8 *puVar5;\n  ulong uVar6;\n  ulong uVar7;\n  char *__s;\n  char cVar8;\n  char cVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *__s_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *puVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppuVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (cVar9 = compare_strings_00113fb0(), cVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    cVar9 = bfd_get_full_section_contents();\n    if (cVar9 != '\\0') {\n      lVar27 = build_attribute_notes_parser_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (cVar9 = bfd_set_section_size(), cVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      __s_00 = fopen((char *)puVar29[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar29[2],0,0);\n      }\n      else {\n        cVar9 = bfd_malloc_and_get_section();\n        if (cVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,__s_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar17);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        uVar6 = uVar24;\n        uVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = uVar6, uVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            uVar6 = uVar20;\n            uVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = improve_binary_analysis_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar37 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *puVar34 = 0;\n      puVar34 = puVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        cVar9 = bfd_get_section_contents();\n        if (cVar9 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                bVar2 = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar13,lVar27,pcVar33);\n                    cVar9 = analyze_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar9 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)bVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppuVar37 = ppuVar37 + 2;\n    } while (ppuVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar9 = validate_and_initialize_data_0010c892(), cVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = initialize_memory_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = analyze_debug_records_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      clear_memory_00108863();\n      if ((lVar25 != 0) && (cVar9 = validate_and_initialize_data_0010c892(), cVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      cVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = initialize_file_info_0010bbd3(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = initialize_file_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                cVar8 = start_debug_block_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                cVar8 = end_block_debugging_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_type_code_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (cVar9 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = record_debug_line_0010bf86(puStack0000000000000020,iVar11 + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar9 != '\\0') {\n                  cVar9 = validate_function_0010be1a(puStack0000000000000020);\n                  if (cVar9 == '\\0') goto LAB_00105981;\n                  cVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_type_code_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          cVar8 = process_debug_record_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278d0 + in_stack_00000010;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar10 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar10 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar10 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = DAT_001279c0;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        pcVar4 = (code *)plVar15[4];\n        uVar10 = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = extract_section_0011a2e0(puVar29);\n          uVar17 = DAT_001278f0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          cVar9 = *pcVar33;\n          if (cVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            cVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(DAT_001278f0);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = DAT_001278f8, (uVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        cVar9 = *pcVar28;\n        if (cVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127928;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == cVar9) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uVar10 & 0x82) == 0 && (pcVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          cVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (cVar9 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = cVar9;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127928;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          __s = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127928);\n            sVar18 = strlen(__s);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uVar10 & 0x20) == 0) &&\n           (((uVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uVar10 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uVar10 & 0x82) == 0) && (pcVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  cVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            cVar9 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (cVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(uVar17);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          cVar9 = process_section_001159d0(plVar15[4]);\n          if (cVar9 == '\\0') {\n            if (((uVar10 & 0x800002) == 0) && (pcVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uVar10 & 0x82) != 0) {\n                cVar9 = check_pattern_validity_00115d70(pcVar28);\n                if ((cVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                    (cVar9 = check_pattern_validity_00115d70(pcVar28), cVar9 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uVar10 & 1) != 0) && (cVar9 = check_pattern_validity_00115d70(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (cVar9 = check_pattern_validity_00115d70(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pcVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      iVar11 = DAT_001279c0;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = extract_section_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = DAT_001279c0;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      cVar9 = process_binary_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (cVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (cVar9 = bfd_set_section_size(lVar25,in_stack_00000110), cVar9 == '\\0')) ||\n         (cVar9 = bfd_set_section_size(lVar27,in_stack_00000140), cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        print_error_message_001126c0(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      cVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((cVar9 == '\\0') ||\n         (cVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_00127a18);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a28), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_00127a08), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_00127a00), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279f8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279f0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278f0), lVar25 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,process_section_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,reverse_and_print_section_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279e0; puVar5 = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (cVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; puVar5 != (undefined8 *)0x0; puVar5 = (undefined8 *)*puVar5) {\n    uVar17 = *(undefined8 *)(puVar5[5] + 0x60);\n    cVar9 = bfd_set_section_contents(in_stack_00000008,uVar17,puVar5[4],0,puVar5[3]);\n    if (cVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (cVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a30, cVar9 != '\\0')) {\n      uVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uVar10;\n      if ((char)uVar10 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        cVar9 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (cVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (cVar9 = compare_strings_00113fb0(*puVar29,\".gnu.build.attributes\"), cVar9 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (cVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      print_error_message_001126c0(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_and_dump_binary_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString",
                "undefined8": "Hash"
            },
            "code": "\nvoid hashString_00108800(Hash *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "cleanup_and_process_records_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "__ptr": "currentPtr",
                "puVar1": "nextPtr",
                "cVar2": "recordSuccess"
            },
            "code": "\nundefined cleanupAndProcessRecords_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPtr;\n  char recordSuccess;\n  undefined8 *currentPtr;\n  \n  currentPtr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    recordSuccess = record_variable_debug_0010c05d(param1,currentPtr[1],currentPtr[2],*(undefined4 *)(currentPtr + 3),currentPtr[4],param6,\n                         param5);\n    if (recordSuccess == '\\0') break;\n    nextPtr = (undefined8 *)*currentPtr;\n    free(currentPtr);\n    currentPtr = nextPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "cleanup_and_process_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_valid_patterns_001082df",
                "unaff_RBX": "binaryAddress",
                "puVar4": "patternPtr",
                "puVar5": "processedPatternPtr",
                "unaff_RBP": "functionPointer",
                "uVar1": "patternCount",
                "lVar2": "currentPatternValue",
                "cVar3": "patternValidity",
                "uVar6": "iterationCounter",
                "unaff_R13": "patternArray"
            },
            "code": "\nvoid processValidPatterns_001082df(void)\n\n{\n  uint patternCount;\n  long currentPatternValue;\n  char patternValidity;\n  long binaryAddress;\n  undefined8 *patternPtr;\n  undefined8 *processedPatternPtr;\n  long functionPointer;\n  ulong iterationCounter;\n  undefined8 *patternArray;\n  \n  patternCount = *(uint *)(binaryAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    patternPtr = patternArray;\n    for (iterationCounter = 0; iterationCounter != patternCount; iterationCounter = iterationCounter + 1) {\n      processedPatternPtr = patternPtr;\n      if (((*(long **)patternArray[iterationCounter] != (long *)0x0) &&\n          (currentPatternValue = **(long **)patternArray[iterationCounter], currentPatternValue != 0)) &&\n         (patternValidity = check_pattern_validity_00115d70(*(undefined8 *)(currentPatternValue + 8),DAT_00127a28), patternValidity != '\\0')) {\n        processedPatternPtr = patternPtr + 1;\n        *patternPtr = patternArray[iterationCounter];\n      }\n      patternPtr = processedPatternPtr;\n    }\n    *patternPtr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionPointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_valid_patterns_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "param_1": "filePointer",
                "iVar1": "feofResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "__stream": "fileStream",
                "uVar4": "errorMessage",
                "uVar5": "allocatedMemory",
                "sVar6": "bytesRead",
                "lVar7": "currentSize",
                "lVar8": "maxSize"
            },
            "code": "\nvoid readAndStoreFileContents_00114d60(long filePointer)\n\n{\n  int feofResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  FILE *fileStream;\n  undefined8 allocatedMemory;\n  size_t bytesRead;\n  long currentSize;\n  long maxSize;\n  \n  fileStream = fopen(*(char **)(filePointer + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorString = strerror(*errnoLocation);\n    allocatedMemory = *(undefined8 *)(filePointer + 0x10);\n    errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage,allocatedMemory,errorString);\n  }\n  maxSize = 0x1000;\n  currentSize = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(filePointer + 0x20) = allocatedMemory;\n  while( true ) {\n    feofResult = feof(fileStream);\n    if (feofResult != 0) {\n      *(long *)(filePointer + 0x18) = currentSize;\n      fclose(fileStream);\n      return;\n    }\n    if (currentSize == maxSize) {\n      maxSize = currentSize * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(filePointer + 0x20),maxSize);\n      *(undefined8 *)(filePointer + 0x20) = allocatedMemory;\n    }\n    bytesRead = fread((void *)(*(long *)(filePointer + 0x20) + currentSize),1,maxSize - currentSize,fileStream);\n    feofResult = ferror(fileStream);\n    if (feofResult != 0) break;\n    currentSize = currentSize + bytesRead;\n  }\n  allocatedMemory = *(undefined8 *)(filePointer + 0x10);\n  errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,allocatedMemory);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_contents_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "unaff_RBP": "base_pointer",
                "uVar1": "section_address",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_error_if_section_not_found_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineCount",
                "unaff_R13": "fileDescriptor",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "returnAddress",
                "uVar1": "errorMessage",
                "ppbVar2": "lineTable",
                "pbVar3": "entryPoint",
                "bVar4": "currentByte",
                "pbVar5": "nextLine",
                "pbVar6": "nextChar",
                "pbVar7": "tempPtr"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 errorMessage;\n  byte **lineTable;\n  byte *entryPoint;\n  byte currentByte;\n  byte *nextLine;\n  int lineCount;\n  byte *nextChar;\n  undefined8 fileDescriptor;\n  byte *tempPtr;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 formatString;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentByte = *currentLine;\n    tempPtr = currentLine;\n    if (currentByte == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        tempPtr = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentByte < '\\v') {\n      if (currentByte != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentByte != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        tempPtr = currentLine + 1;\n      }\n    }\n    currentByte = *currentChar;\n    while ((currentByte == 0x20 || (nextChar = currentChar, currentByte == 9))) {\n      nextChar = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentByte = *nextChar;\n    }\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = nextChar[1];\n      nextChar = nextChar + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentByte = nextChar[1];\n      if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n            ((currentByte = nextChar[2], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = nextChar[3], currentByte == 9 || (currentByte == 0x20)))) &&\n          ((currentByte = nextChar[4], currentByte == 9 || (currentByte == 0x20)))) &&\n         ((currentByte = nextChar[5], currentByte == 9 || (currentByte == 0x20)))) {\n        currentByte = nextChar[6];\n        entryPoint = nextChar + 6;\n        if ((currentByte == 9) || (currentByte == 0x20)) {\n          do {\n            do {\n              currentByte = entryPoint[1];\n              entryPoint = entryPoint + 1;\n            } while (currentByte == 0x20);\n          } while (currentByte == 9);\n        }\n      }\n      if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(errorMessage,formatString,lineCount);\n      }\n    }\nLAB_00114599:\n    *nextChar = 0;\n    if (currentChar < nextChar) {\n      lineTable = (byte **)htab_find_slot();\n      *lineTable = currentChar;\n    }\n    lineCount = lineCount + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (tempPtr[1] == 0) {\n      *returnAddress = fileDescriptor;\n      return;\n    }\n  } while( true );\n  if (currentByte == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "memory_address",
                "param_2": "additional_info",
                "uVar1": "error_message",
                "local_20": "buffer"
            },
            "code": "\nvoid check_and_print_error_00119940(undefined8 memory_address,undefined8 additional_info)\n\n{\n  undefined8 error_message;\n  char *buffer [2];\n  \n  bfd_scan_vma(memory_address,buffer,0);\n  if (*buffer[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,additional_info,memory_address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "ra_x"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long ra_x;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(ra_x + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_and_recurse_00113a4d",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptr",
                "auVar4": "tempArray"
            },
            "code": "\nundefined8\nprocess_and_recurse_00113a4d(undefined8 arg1,undefined8 arg2,long arg3,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  undefined tempArray [16];\n  \n  result = process_files_00112502(arg1,arg2,*(undefined8 *)(arg3 + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(arg3 + 0x28) == 0 && (*(long *)(arg3 + 8) != 0)) ||\n      (result = process_data_0010ec73(arg2,*(undefined8 *)(arg3 + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(arg3 + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(arg3 + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_001135a5(arg1,arg2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(arg3 + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_and_recurse_00113a4d(arg1,arg2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    tempArray = process_files_00112502(arg1,arg2,*(undefined8 *)(arg3 + 0x20));\n    if (tempArray[0] != '\\0') {\n      if ((*(long *)(arg3 + 0x28) == 0) && (*(long *)(arg3 + 8) != 0)) {\n        return tempArray._0_8_;\n      }\n      returnValue = process_data_0010ed2c(arg2,*(undefined8 *)(arg3 + 0x20),tempArray._8_8_,arg5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_recurse_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_location",
                "param_7": "return_value"
            },
            "code": "\nundefined8 releaseMemory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_location;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_location);\n  return return_value;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010e9a0",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_0010922b",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_and_set_param_00113b71",
                "param_1": "input_param",
                "lVar1": "data_ptr"
            },
            "code": "\nlong initialize_data_and_set_param_00113b71(long input_param)\n\n{\n  long data_ptr;\n  \n  if (input_param != 0) {\n    data_ptr = initialize_data_00112904(0x14,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_param;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_and_set_param_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "handle_entry_creation_00109dfe",
                "param_1": "entryData",
                "lVar1": "previousEntry",
                "local_40": "formattedEntry"
            },
            "code": "\nvoid handleEntryCreation_00109dfe(long entryData)\n\n{\n  long previousEntry;\n  char formattedEntry [40];\n  \n  if (*(long *)(entryData + 0x70) != 0) {\n    create_formatted_entry_00109cf4(entryData,*(long *)(entryData + 0x70),0);\n    return;\n  }\n  previousEntry = *(long *)(entryData + 0x68);\n  *(long *)(entryData + 0x68) = previousEntry + 1;\n  *(long *)(entryData + 0x70) = previousEntry;\n  sprintf(formattedEntry,\"%ld=%ld\",previousEntry,previousEntry);\n  create_entry_00109b52(entryData,formattedEntry,previousEntry,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "handle_entry_creation_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "inputParam",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long inputParam)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(inputParam + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(inputParam + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "construct_improved_string_0010ae0e",
                "param_1": "input",
                "lVar1": "ptrStruct",
                "lVar2": "ptrArray",
                "__ptr": "ptrTmp",
                "pcVar3": "strTmp",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "constructedString",
                "uVar7": "result",
                "lVar8": "totalLength",
                "uVar9": "count",
                "uVar10": "loopCount"
            },
            "code": "\nundefined8 constructImprovedString_0010ae0e(long input)\n\n{\n  long ptrStruct;\n  long ptrArray;\n  void *ptrTmp;\n  char *strTmp;\n  size_t len1;\n  size_t len2;\n  char *constructedString;\n  undefined8 result;\n  long totalLength;\n  uint count;\n  ulong loopCount;\n  \n  result = 0;\n  ptrStruct = *(long *)(input + 0x60);\n  if (((ptrStruct != 0) && (*(char **)(ptrStruct + 8) != (char *)0x0)) &&\n     (constructedString = *(char **)(ptrStruct + 0x20), constructedString != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptrStruct + 8));\n    len2 = strlen(constructedString);\n    ptrArray = *(long *)(ptrStruct + 0x28);\n    if (ptrArray == 0) {\n      totalLength = len1 + len2 + 10;\n      loopCount = 0;\n    }\n    else {\n      totalLength = len1 + len2 + 0x1e;\n      loopCount = 0;\n      while( true ) {\n        constructedString = *(char **)(ptrArray + loopCount * 8);\n        if (constructedString == (char *)0x0) break;\n        len1 = strlen(constructedString);\n        loopCount = (ulong)((int)loopCount + 1);\n        totalLength = totalLength + len1;\n      }\n    }\n    if (*(char **)(ptrStruct + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptrStruct + 0x30));\n      totalLength = totalLength + len1;\n    }\n    if (*(char **)(ptrStruct + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptrStruct + 0x38));\n      totalLength = totalLength + len1;\n    }\n    constructedString = (char *)xmalloc(totalLength);\n    ptrStruct = *(long *)(input + 0x60);\n    strcpy(constructedString,*(char **)(ptrStruct + 8));\n    if (*(long *)(ptrStruct + 0x28) != 0) {\n      count = 0;\n      len1 = strlen(constructedString);\n      sprintf(constructedString + len1,\"!%u,\",loopCount);\n      while( true ) {\n        ptrStruct = *(long *)(input + 0x60);\n        loopCount = (ulong)count;\n        ptrTmp = *(void **)(ptrStruct + 0x28);\n        strTmp = *(char **)((long)ptrTmp + loopCount * 8);\n        if (strTmp == (char *)0x0) break;\n        count = count + 1;\n        strcat(constructedString,strTmp);\n        free(*(void **)(*(long *)(ptrStruct + 0x28) + loopCount * 8));\n      }\n      free(ptrTmp);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptrStruct = *(long *)(input + 0x60);\n    strcat(constructedString,*(char **)(ptrStruct + 0x20));\n    free(*(void **)(ptrStruct + 0x20));\n    ptrStruct = *(long *)(input + 0x60);\n    *(undefined8 *)(ptrStruct + 0x20) = 0;\n    if (*(char **)(ptrStruct + 0x30) != (char *)0x0) {\n      strcat(constructedString,*(char **)(ptrStruct + 0x30));\n      free(*(void **)(ptrStruct + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(constructedString);\n    ptrStruct = *(long *)(input + 0x60);\n    *(undefined2 *)(constructedString + len1) = 0x3b;\n    strTmp = *(char **)(ptrStruct + 0x38);\n    if (strTmp != (char *)0x0) {\n      strcpy(constructedString + len1 + 1,strTmp);\n      free(*(void **)(ptrStruct + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptrStruct = *(long *)(input + 0x60);\n    *(char **)(ptrStruct + 8) = constructedString;\n    result = CONCAT71((int7)((ulong)ptrStruct >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "strcat",
                "strcpy",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_improved_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_001135a5",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "input_param",
                "iVar1": "index",
                "cVar2": "returnValue",
                "uVar3": "result",
                "puVar4": "current_item",
                "puVar5": "items",
                "abort": "abort_execution",
                "process_entries_00112c1f": "process_entries",
                "process_and_store_item_0010e6a8": "process_and_store_item",
                "process_and_hash_strings_0010e7c2": "process_and_hash_strings",
                "process_item_0010e9a0": "process_item",
                "process_files_00112502": "process_files",
                "format_and_process_item_0010eafe": "format_and_process_item",
                "process_extracted_item_0010ebb0": "process_extracted_item",
                "get_return_value_00108f05": "get_return_value",
                "process_and_hash_string_0010e842": "process_and_hash_string",
                "process_and_hash_0010e8a9": "process_and_hash",
                "process_and_free_hash_0010e918": "process_and_free_hash"
            },
            "code": "\nundefined8 process_001135a5(undefined8 input_data,undefined8 output_data,long input_param)\n\n{\n  int index;\n  char returnValue;\n  undefined8 result;\n  undefined8 *current_item;\n  undefined8 *items;\n  \n  if (6 < *(uint *)(input_param + 0x14)) {\n                    \n    abort_execution();\n  }\n  switch(*(undefined4 *)(input_param + 0x14)) {\n  case 0:\n    returnValue = process_001135a5_entries(input_data,output_data,*(undefined8 *)(input_param + 0x20),input_param);\n    if (returnValue != '\\0') {\n      result = process_001135a5_and_store_item(output_data,*(undefined8 *)(input_param + 8));\n      return result;\n    }\n    break;\n  case 1:\n    returnValue = process_001135a5_entries(input_data,output_data,*(undefined8 *)(input_param + 0x20),input_param);\n    if (returnValue != '\\0') {\n      result = process_001135a5_and_hash_strings(output_data,*(undefined8 *)(input_param + 8));\n      return result;\n    }\n    break;\n  case 2:\n    returnValue = process_001135a5_entries(input_data,output_data,*(undefined8 *)(*(long *)(input_param + 0x20) + 8),0);\n    if (returnValue != '\\0') {\n      result = process_001135a5_item(output_data,*(undefined8 *)(input_param + 8),**(undefined4 **)(input_param + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(input_param + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    items = *(undefined8 **)(input_param + 0x20);\n    index = *(int *)(input_param + 0x18);\n    result = *(undefined8 *)(input_param + 8);\n    returnValue = process_001135a5_files(input_data,output_data,*(undefined8 *)(items[2] + 0x18));\n    if (((returnValue != '\\0') && (returnValue = process_001135a5_entries(input_data,output_data,*items,0), returnValue != '\\0')) &&\n       (returnValue = format_and_process_001135a5_item(output_data,result,index == 2), returnValue != '\\0')) {\n      for (current_item = (undefined8 *)items[1]; current_item != (undefined8 *)0x0;\n          current_item = (undefined8 *)*current_item) {\n        returnValue = process_001135a5_entries(input_data,output_data,current_item[2],0);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        returnValue = process_001135a5_extracted_item(output_data,current_item[1],*(undefined4 *)(current_item + 3));\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      items = (undefined8 *)items[2];\n      while( true ) {\n        if (items == (undefined8 *)0x0) {\n          result = get_return_value(output_data);\n          return result;\n        }\n        returnValue = process_and_recurse_00113a4d(input_data,output_data,items);\n        if (returnValue == '\\0') break;\n        items = (undefined8 *)*items;\n      }\n    }\n    break;\n  case 4:\n    result = process_001135a5_and_hash_string(output_data,*(undefined8 *)(input_param + 8),*(undefined8 *)(input_param + 0x20));\n    return result;\n  case 5:\n    result = process_001135a5_and_hash(*(undefined8 *)(input_param + 0x20),output_data,*(undefined8 *)(input_param + 8));\n    return result;\n  case 6:\n    returnValue = process_001135a5_entries(input_data,output_data,**(undefined8 **)(input_param + 0x20),0);\n    if (returnValue != '\\0') {\n      result = process_001135a5_and_free_hash(output_data,*(undefined8 *)(input_param + 8),\n                           *(undefined8 *)(*(long *)(input_param + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010e842",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112502",
                "FUN_0010e918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_entries_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_store_item_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_entries_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_hash_strings_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_entries_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_item_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_entries_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = format_and_process_item_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_entries_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_extracted_item_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_return_value_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_hash_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_hash_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_entries_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_free_hash_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_concatenated_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_concatenated_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_concatenated_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = detect_input_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_function_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_function_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_function_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improve_binary_analysis_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = analyze_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_memory_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = analyze_debug_records_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_file_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_file_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_type_code_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_type_code_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = validate_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_validity_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_validity_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_validity_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_validity_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_print_section_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)build_attribute_notes_parser_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "printf",
                "bfd_set_file_flags",
                "bfd_get_arch",
                "bfd_set_start_address",
                "dcgettext",
                "bfd_get_mach",
                "FUN_001152b6"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)initialize_data_00113b4a(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)initialize_data_and_set_param_00113b71(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)initialize_or_get_data_object_00113d3a(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)initialize_data_and_return_00113cb9(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)set_param_value_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)initialize_data_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)set_param_value_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)set_param_value_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)initialize_data_00113e17();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)set_param_value_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)initialize_data_00113e17();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = demangle_arglist_0010b6ea(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)initialize_and_allocate_00113ce0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)find_string_in_data_structure_0010afd5(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) || (plVar4 = (long *)extract_debug_info_from_binary_00113b1e(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)find_string_in_data_structure_0010afd5(param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)get_offset_value_001129f4(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "abort",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113dfe",
                "FUN_0010b0fa",
                "fprintf",
                "FUN_0010b6ea",
                "FUN_00113d3a",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "strncmp",
                "FUN_00113cb9",
                "FUN_00112904",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "uVar1": "msg",
                "ppbVar2": "slot",
                "pbVar3": "current_char",
                "in_CL": "current_line_char",
                "bVar4": "next_char",
                "unaff_RBX": "start_of_line",
                "unaff_EBP": "line_number",
                "pbVar5": "current_line",
                "unaff_R13": "result",
                "unaff_R14": "line_end",
                "unaff_R15": "line_start",
                "in_stack_00000008": "format_str",
                "in_stack_00000010": "return_addr"
            },
            "code": "\nvoid process_lines_00104c36(void)\n\n{\n  undefined8 msg;\n  byte **slot;\n  byte *current_char;\n  byte current_line_char;\n  byte next_char;\n  byte *start_of_line;\n  int line_number;\n  byte *current_line;\n  undefined8 result;\n  byte *line_end;\n  byte *line_start;\n  undefined8 format_str;\n  undefined8 *return_addr;\n  \n  do {\n    current_line = line_start;\n    if (current_line_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_line_char == 10) || (current_line_char == 0xd)) goto LAB_00114676;\n      if (current_line_char == 0) goto LAB_00114599;\n      current_line_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_line_char != 0x20) && (current_line_char != 9));\n    if ((char)current_line_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_line_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        current_char = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = current_char[1];\n              current_char = current_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(msg,format_str,line_number);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (line_start < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_start;\n    }\n    line_number = line_number + 1;\n    current_line = start_of_line;\n    if (line_end[1] == 0) {\n      *return_addr = result;\n      return;\n    }\n    for (; next_char = *current_line, line_end = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_char = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          current_char = current_line + 1;\n          if (current_line[1] == 10) {\n            current_char = current_line + 2;\n            line_end = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      line_end = current_line + 1;\n      current_char = current_line + 2;\n    }\n    else {\n      current_char = current_line + 1;\n    }\nLAB_00114553:\n    current_line_char = *start_of_line;\n    line_start = start_of_line;\n    while (start_of_line = current_char, current_line_char == 0x20) {\nLAB_00104c3f:\n      current_line = line_start + 1;\n      line_start = line_start + 1;\n      current_char = start_of_line;\n      current_line_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_binary_analysis_0010554f",
                "in_stack_00000068": "numSections",
                "in_stack_000000d8": "totalSize",
                "unaff_R14": "binaryData",
                "puVar1": "ptr1",
                "plVar1": "sectionsArray",
                "puVar2": "ptr2",
                "uVar1": "var1",
                "uVar2": "var2",
                "lVar1": "cnt1",
                "lVar2": "cnt2",
                "iVar1": "size",
                "in_stack_00000068._4_4_": "numRecords",
                "param_12": "gapSize",
                "param_14": "gapContent",
                "param_17": "sections",
                "uVar6": "recordIndex",
                "param_36": "paddingFlag",
                "param_37": "recordTypeFlag",
                "param_40": "gapSizes",
                "param_43": "recordFlag",
                "param_44": "recordTypeIndex",
                "param_7": "binaryFile"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveBinaryAnalysis_0010554f(void)\n\n{\n  uint *ptr1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort recordIndex;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int size0;\n  int size1;\n  uint var12;\n  uint var13;\n  long cnt14;\n  long *sectionsArray5;\n  undefined8 var16;\n  undefined *__ptr;\n  undefined8 var17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *pcnt20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong var21;\n  char *__s;\n  char *pcVar22;\n  long cnt23;\n  ulong var24;\n  long *pcnt25;\n  undefined8 *ptr26;\n  int iVar27;\n  long *pcnt28;\n  ulong var29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *binaryData;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binaryFile;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong gapSize;\n  char *param_13;\n  undefined *gapContent;\n  uint param_15;\n  long *sections;\n  undefined8 numSections;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long totalSize;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte paddingFlag;\n  byte recordTypeFlag;\n  undefined8 param_38;\n  ushort param_39;\n  long *gapSizes;\n  char param_41;\n  char *param_42;\n  undefined recordFlag;\n  short recordTypeIndex;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    gapSize = 0;\n    gapContent = (undefined *)0x0;\n    sections = (long *)0x0;\n    var29 = gapSize;\n  }\n  else {\n    cnt14 = (ulong)numRecords * 8;\n    sections = (long *)xmalloc(cnt14);\n    gapSizes = sections;\n    bfd_map_over_sections(binaryFile,update_pointer_0010870e,&stack0x00000140);\n    qsort(sections,(ulong)numRecords,8,compare_records_0010875d);\n    gapContent = (undefined *)xmalloc(cnt14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = gapContent;\n    for (; cnt14 != 0; cnt14 = cnt14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      var29 = 0;\n      gapSize = 0;\n      do {\n        puVar30 = (ulong *)(gapContent + var29 * 8);\n        pcnt28 = sections + var29;\n        var21 = gapSize;\n        do {\n          gapSize = var21;\n          if (numRecords - 1 <= (uint)var29) goto LAB_00107cd1;\n          var29 = (ulong)((uint)var29 + 1);\n          var12 = bfd_octets_per_byte(binaryFile,*pcnt28);\n          var13 = bfd_octets_per_byte(binaryFile);\n          cnt14 = *pcnt28;\n          if ((*(uint *)(cnt14 + 0x24) & 0x102) != 0x102) break;\n          var21 = (ulong)var13 * *(long *)(pcnt28[1] + 0x38);\n          var24 = (ulong)var12 * *(long *)(cnt14 + 0x38) + *(long *)(cnt14 + 0x40);\n          if (var21 <= var24) break;\n          var21 = var21 - var24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,binaryFile,*pcnt28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = var21;\n          pcnt28 = pcnt28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (gapSize < var21);\n      } while( true );\n    }\n    gapSize = 0;\nLAB_00107cd1:\n    var29 = gapSize;\n    if (DAT_00127989 != '\\0') {\n      var12 = bfd_octets_per_byte(binaryFile);\n      cnt14 = sections[numRecords - 1];\n      var21 = DAT_00127990 * (ulong)var12;\n      var24 = *(long *)(cnt14 + 0x40) + (ulong)var12 * *(long *)(cnt14 + 0x38);\n      if (var24 < var21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,binaryFile,sections[numRecords - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          var29 = var21 - var24;\n          *(ulong *)(gapContent + (ulong)(numRecords - 1) * 8) = var29;\n          if (var29 <= gapSize) {\n            var29 = gapSize;\n          }\n        }\n      }\n    }\n  }\n  gapSize = var29;\n  pcnt28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (cnt14 = 0x18; cnt14 != 0; cnt14 = cnt14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      cnt14 = bfd_get_section_by_name(binaryData,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((cnt14 != 0) && (lVar37 != 0)) {\n        cnt23 = *(long *)(cnt14 + 0x40);\n        __ptr_00 = (void *)xmalloc(cnt23);\n        cVar7 = bfd_get_section_contents(binaryData,cnt14,__ptr_00,0,cnt23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*binaryData);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          var29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(var29 + 1);\n          param_9 = bfd_get_section_contents(binaryData,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*binaryData);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + var29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)initialize_memory_00112894(binaryData,1,pcnt28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + cnt23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                var21 = (**(code **)(binaryData[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(binaryData[1] + 0x58))((long)pvVar35 + 6);\n                cnt14 = (**(code **)(binaryData[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + cnt14;\n                }\n                else {\n                  var24 = (var21 & 0xffffffff) + param_23;\n                  if (var24 < var29) {\n                    pcVar31 = (char *)((long)__ptr_01 + var24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + cnt23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      size0 = (**(code **)(binaryData[1] + 0x40))(pvVar35);\n                      var21 = (ulong)(uint)(size0 + (int)param_23);\n                      if (var29 <= var21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + var21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    var17 = *binaryData;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,var17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar9,cnt14,pcVar31);\n                    cVar7 = analyze_debug_records_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    var17 = *binaryData;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,var17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            var21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = validate_and_initialize_data_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(binaryData[1] + 8) == 1) {\n      cnt14 = 0;\n      for (sectionsArray5 = pcnt28; sectionsArray5 < pcnt28 + param_8; sectionsArray5 = sectionsArray5 + 1) {\n        (**(code **)(binaryData[1] + 0x218))(binaryData,*sectionsArray5,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((cnt14 == 0) && (cnt14 = initialize_memory_00112894(binaryData,0,pcnt28), cnt14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (sectionsArray5 + 1 < pcnt28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(sectionsArray5[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            sectionsArray5 = sectionsArray5 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_data_001088ae(recordFlag,(int)recordTypeIndex,gapSizes,pcVar22);\n          param_9 = analyze_debug_records_0011173a(__ptr_02,cnt14,recordFlag);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((cnt14 != 0) && (cVar7 = validate_and_initialize_data_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(binaryData[1] + 8) == 2) && (param_8 != 0)) {\n        gapSizes = (long *)0x0;\n        param_30 = pcnt28;\n        param_32 = 0;\n        param_31 = param_8;\n        totalSize = 0;\n        ptr26 = (undefined8 *)&stack0x00000148;\n        for (cnt14 = 0x22; cnt14 != 0; cnt14 = cnt14 + -1) {\n          *(undefined4 *)ptr26 = 0;\n          ptr26 = (undefined8 *)((long)ptr26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        var12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            cnt14 = pcnt28[param_32];\n            cVar8 = bfd_coff_get_syment(binaryData,cnt14,&stack0x000000e0);\n            lVar37 = totalSize;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(cnt14 + 8);\n            ptr26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            totalSize = (ulong)recordTypeFlag + 1 + totalSize;\n            if (recordTypeFlag != 0) {\n              ptr26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(binaryData,cnt14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (paddingFlag != 0x67) {\n              cVar8 = initialize_file_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = initialize_file_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          recordIndex = in_stack_000000f8._6_2_;\n          if ((char)paddingFlag < '\\0') {\n            if (paddingFlag == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            cnt23 = parse_type_code_0010dac0(binaryData,&stack0x000000c0,&stack0x00000140);\n            if (cnt23 == 0) break;\n            cVar8 = process_debug_record_00112a33(&stack0x00000140,cnt14,lVar37);\n          }\n          else {\n            if (paddingFlag < 100) {\n              switch(paddingFlag) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(binaryData[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(binaryData[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(binaryData[1] + 0x238))(binaryData);\n                var12 = (uint)recordIndex;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(paddingFlag) {\n            case 100:\n              size0 = strcmp(pcVar31,\".bb\");\n              if (size0 == 0) {\n                cVar8 = start_debug_block_0010be88(__ptr_02);\n              }\n              else {\n                size0 = strcmp(pcVar31,\".eb\");\n                if (size0 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = end_block_debugging_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              size0 = strcmp(pcVar31,\".bf\");\n              if (size0 == 0) {\n                if (param_13 != (char *)0x0) {\n                  var13 = (int)var12 >> ((byte)*(undefined4 *)(binaryData[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_type_code_0010dac0(binaryData,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        var13 ^ (var12 ^ var13) &\n                                                 *(uint *)(binaryData[0x22] + 0x38),ptr26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = initialize_debug_record_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    size0 = 0;\n                    if (recordTypeFlag != 0) {\n                      size0 = param_39 - 1;\n                    }\n                    cnt14 = *(long *)(*(long *)(cnt14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_debug_line_0010bf86(__ptr_02,size0 + iVar27,\n                                           *(long *)(_param_15 + 6) + cnt14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  var12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                size0 = strcmp(pcVar31,\".ef\");\n                if (size0 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = validate_function_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              var17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(var17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        var17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(var17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binaryFile + 0x44) & 0x42) != 0) && ((*(uint *)(binaryFile + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binaryFile + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        pcnt28 = DAT_001278d0 + param_8;\n        sectionsArray5 = DAT_001278d0;\n        do {\n          var12 = *(uint *)(*sectionsArray5 + 0x18);\n          if ((var12 & 0x1000000) != 0) {\n            *(uint *)(*sectionsArray5 + 0x18) = var12 & 0xfeffffff;\n          }\n          sectionsArray5 = sectionsArray5 + 1;\n        } while (pcnt28 != sectionsArray5);\n      }\n    }\n    else {\n      for (cnt14 = *(long *)(binaryFile + 0x90); cnt14 != 0; cnt14 = *(long *)(cnt14 + 8)) {\n        if (*(long *)(cnt14 + 0xe8) != 0) {\n          ptr1 = (uint *)(*(long *)(cnt14 + 0xe8) + 0x18);\n          *ptr1 = *ptr1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      cnt14 = xmalloc();\n      pcnt28 = DAT_001278d0;\n      param_15 = *(uint *)((long)binaryData + 0x44) & 0x42;\n      DAT_001278c8 = cnt14;\n      if (param_8 == 0) {\n        var29 = 0;\n      }\n      else {\n        var29 = 0;\n        _param_9 = 0;\n        do {\n          size0 = DAT_001279c0;\n          sectionsArray5 = (long *)pcnt28[_param_9];\n          pcVar3 = (code *)sectionsArray5[4];\n          var12 = *(uint *)(sectionsArray5 + 3);\n          pcnt20 = (long *)sectionsArray5[1];\n          pcnt25 = pcnt20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            ptr26 = DAT_001279c8;\n            while ((iVar27 < size0 && (pcVar31 = (char *)ptr26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                size1 = strcmp(pcVar31,(char *)pcnt20);\n                if (size1 == 0) {\n                  free(pcVar31);\n                  var21 = var29 + 1;\n                  ptr26[5] = \"\";\n                  var16 = extract_section_0011a2e0(ptr26);\n                  var17 = DAT_001278f0;\n                  *(undefined8 *)(cnt14 + var29 * 8) = var16;\n                  lVar37 = htab_elements(var17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                ptr26 = (undefined8 *)*ptr26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          var21 = var29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcnt20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)pcnt20 == '_') && (*(char *)((long)pcnt20 + 1) == '_')) &&\n                 (size0 = strcmp((char *)((ulong)(*(char *)((long)pcnt20 + 2) == '_') +\n                                          (long)pcnt20),\"__gnu_lto_slim\"), size0 == 0)) {\n                var17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(var17);\n              }\n            }\n            _param_41 = 0;\n            gapSizes = pcnt20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (pcnt25 = *(long **)(lVar37 + 8), pcnt20 == pcnt25)) &&\n               (pcnt25 = pcnt20, ppcVar34 = DAT_001278f8, (var12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                size0 = strcmp(*ppcVar34,(char *)pcnt20);\n                if (size0 == 0) {\n                  pcnt25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            sectionsArray5[1] = (long)pcnt25;\n            cVar7 = *(char *)pcnt25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binaryFile + 8) + 0x1c) != '\\0')) {\n              lVar37 = binaryData[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)pcnt20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = binaryData[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((var12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(sectionsArray5[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcnt25 = (long *)((long)pcnt25 + 1);\n              sectionsArray5[1] = (long)pcnt25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcnt25 = (long *)((long)pcnt25 + 1);\n              sectionsArray5[1] = (long)pcnt25;\n              sVar18 = strlen((char *)pcnt25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              pcnt20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)pcnt25 = cVar7;\n            sectionsArray5[1] = (long)pcnt25;\n            var29 = var21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binaryFile + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              var29 = var21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)pcnt25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              pcnt20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)pcnt25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              pcnt20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)pcnt20 + 1);\n              *(char *)pcnt20 = *(char *)(*(long *)(binaryFile + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)pcnt25);\n            sectionsArray5[1] = (long)pcnt20;\n            pcnt25 = pcnt20;\n            var29 = var21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((var12 & 0x20) == 0) &&\n             (((var12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(sectionsArray5[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((var12 & 0x82) != 0 || ((*(byte *)(sectionsArray5[4] + 0x25) & 0x10) != 0)))) ||\n               (size0 = bfd_decode_symclass(sectionsArray5), size0 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                gapSizes = pcnt25;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((var12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(sectionsArray5[4] + 0x25) & 0x10) == 0)) {\n              if ((var12 & 4) == 0) {\n                if (((*(int *)(binaryData[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(sectionsArray5[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(binaryData);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              var17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(var17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            gapSizes = pcnt25;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((var12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              gapSizes = pcnt25;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((var12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              gapSizes = pcnt25;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = process_section_001159d0(sectionsArray5[4]);\n            if (cVar7 == '\\0') {\n              if (((var12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((var12 & 0x82) != 0) {\n                  cVar7 = check_pattern_validity_00115d70(pcnt25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = check_pattern_validity_00115d70(pcnt25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (var13 = *(uint *)(sectionsArray5 + 3), (var13 & 0x200000) != 0)) ||\n                         (lVar37 = *sectionsArray5, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)sectionsArray5 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    var13 = *(uint *)(sectionsArray5 + 3);\n                  }\n                  *(uint *)(sectionsArray5 + 3) = var13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((var12 & 1) != 0) && (cVar7 = check_pattern_validity_00115d70(pcnt25), cVar7 != '\\0')) {\n                  *(uint *)(sectionsArray5 + 3) = *(uint *)(sectionsArray5 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = check_pattern_validity_00115d70(pcnt25), cVar7 != '\\0')) {\n                  *(uint *)(sectionsArray5 + 3) = *(uint *)(sectionsArray5 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(cnt14 + var29 * 8) = sectionsArray5;\n              var29 = var29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        ptr26 = DAT_001279c8;\n        size0 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < size0; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)ptr26[5];\n          if (pcVar31 == (char *)0x0) {\n            cnt23 = var29 * 8;\n            var29 = var29 + 1;\n            var17 = extract_section_0011a2e0(ptr26,binaryFile);\n            *(undefined8 *)(cnt14 + cnt23) = var17;\n            size0 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            var17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(var17,pcVar31);\n          }\n          ptr26 = (undefined8 *)*ptr26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(cnt14 + var29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = var29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      size0 = *(int *)(*(undefined8 **)(binaryFile + 8) + 1);\n      if ((size0 == 5) || (size0 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = process_binary_0011378f(binaryFile,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          cnt14 = bfd_make_section_with_flags(binaryFile,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binaryFile,\".stabstr\",0x2108);\n          if ((((cnt14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(cnt14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,gapSizes), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(cnt14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binaryFile,cnt14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binaryFile,lVar37,param_33,0,gapSizes), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          var17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,binaryFile,0,var17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        var17 = **(undefined8 **)(binaryFile + 8);\n        var16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,binaryFile,0,var16,var17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(binaryData,process_binary_file_00116030,DAT_001278d0);\n      size0 = bfd_get_error();\n      if (size0 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    cnt14 = htab_elements(DAT_00127a18);\n    if (((cnt14 != 0) ||\n        ((((cnt14 = htab_elements(DAT_00127a28), cnt14 != 0 ||\n           (cnt14 = htab_elements(DAT_00127a08), cnt14 != 0)) ||\n          (cnt14 = htab_elements(DAT_00127a00), cnt14 != 0)) ||\n         ((cnt14 = htab_elements(DAT_001279f8), cnt14 != 0 ||\n          (cnt14 = htab_elements(DAT_001279f0), cnt14 != 0)))))) ||\n       ((((cnt14 = htab_elements(DAT_001278f0), cnt14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binaryFile,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(binaryData,process_section_00115dc0,binaryFile);\n    bfd_map_over_sections(binaryData,reverse_and_print_section_00116110,binaryFile);\n    for (ptr26 = DAT_001279e0; puVar4 = DAT_001279d8, ptr26 != (undefined8 *)0x0;\n        ptr26 = (undefined8 *)*ptr26) {\n      cVar7 = bfd_set_section_contents(binaryFile,ptr26[5],ptr26[4],0,ptr26[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,binaryFile,ptr26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      var17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binaryFile,var17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,binaryFile,var17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        var17 = *binaryData;\n        var16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(var16,var17);\n      }\n    }\n    else {\n      pcnt28 = (long *)0x0;\n      for (ptr26 = *(undefined8 **)(binaryFile + 0x90); ptr26 != (undefined8 *)0x0;\n          ptr26 = (undefined8 *)ptr26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binaryFile + 8) + 8) == 5)) &&\n           ((*(int *)(ptr26[0x1a] + 4) == 7 &&\n            (cVar7 = compare_strings_00113fb0(*ptr26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (pcnt28 == (long *)0x0) {\n            pcnt28 = in_R10;\n          }\n          sectionsArray5 = in_R10;\n          if (*(undefined8 **)(*pcnt28 + 0x60) == ptr26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (pcnt28[1] != 0) {\n              cVar7 = bfd_set_section_contents(binaryFile,ptr26,pcnt28[1],0,pcnt28[2]);\n              if (cVar7 == '\\0') {\n                var17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,binaryFile,ptr26,var17);\n                return 0;\n              }\n              pcnt28 = (long *)pcnt28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pcnt28 = sectionsArray5;\n              if (*(undefined8 **)(*sectionsArray5 + 0x60) == ptr26) goto LAB_0010625f;\n              pcnt28 = (long *)sectionsArray5[3];\n              sectionsArray5 = pcnt28;\n            } while (pcnt28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          var17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,binaryFile,ptr26,var17);\n        }\nLAB_001061be:\n      }\n      do {\n        pcnt28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = pcnt28;\n      } while (pcnt28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binaryFile,param_21), cnt14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (gapContent != (undefined *)0x0) {\n        if (0x2000 < gapSize) {\n          gapSize = 0x2000;\n        }\n        cnt14 = 0;\n        __ptr = (undefined *)xmalloc(gapSize);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (gapSize = gapSize & 0xffffffff; gapSize != 0; gapSize = gapSize - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)cnt14 < numRecords; cnt14 = cnt14 + 1) {\n          var29 = *(ulong *)(gapContent + cnt14 * 8);\n          if (var29 != 0) {\n            lVar37 = *(long *)(*sections + 0x40) - var29;\n            do {\n              var21 = 0x2000;\n              if (var29 < 0x2001) {\n                var21 = var29;\n              }\n              cVar7 = bfd_set_section_contents(binaryFile,*sections,__ptr,lVar37,var21);\n              if (cVar7 == '\\0') {\n                print_error_message_001126c0(0,binaryFile,*sections,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + var21;\n              var29 = var29 - var21;\n            } while (var29 != 0);\n          }\n          sections = sections + 1;\n        }\n        free(__ptr);\n        free(gapContent);\n      }\n      uVar9 = (**(code **)(*(long *)(binaryFile + 8) + 0x140))(binaryData);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binaryFile,DAT_00127930 & 0xffffffff);\n        var29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          var17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(var17,var29);\n          if (*(int *)(*(long *)(binaryFile + 8) + 8) == 5) {\n            var17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(var17);\n            *(short *)(*(long *)(binaryFile + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          var17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(var17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      var17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,binaryFile,0,var17);\n    }\n    else {\n      var17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,binaryFile,0,var17,cnt14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "bfd_get_section_by_name",
                "bfd_coff_get_auxent",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010870e",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_0011a2e0",
                "htab_elements",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "FUN_001159d0",
                "xmalloc",
                "bfd_get_error",
                "bfd_map_over_sections",
                "bfd_set_error",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_00115d70",
                "FUN_00108863",
                "FUN_0011a170",
                "bfd_make_section_with_flags",
                "qsort",
                "bfd_set_symtab",
                "FUN_00112894",
                "FUN_0011173a",
                "bfd_map_over_sections",
                "strlen",
                "FUN_00116110",
                "bfd_is_local_label",
                "strcpy",
                "bfd_set_section_contents",
                "strcmp",
                "bfd_octets_per_byte",
                "htab_find",
                "FUN_00116030",
                "bfd_set_section_size",
                "fprintf",
                "FUN_00115dc0",
                "FUN_0010c892",
                "FUN_001126c0",
                "free",
                "bfd_decode_symclass",
                "FUN_001088ae",
                "FUN_0010875d",
                "FUN_0010be88",
                "xstrdup",
                "FUN_00119dd0",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_binary_analysis_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "create_formatted_entry_00109cf4",
                "param_1": "entryData",
                "param_2": "value",
                "param_3": "flag",
                "local_3c": "formattedValue"
            },
            "code": "\nvoid createFormattedEntry_00109cf4(undefined8 entryData,undefined8 value,undefined4 flag)\n\n{\n  char formattedValue [28];\n  \n  sprintf(formattedValue,\"%ld\",value);\n  create_entry_00109b52(entryData,formattedValue,value,0,flag);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d97",
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "create_formatted_entry_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "extract_values_from_string_00109ab1",
                "param_1": "string_ptr",
                "param_2": "value_ptr",
                "uVar1": "parsed_value",
                "pcVar2": "current_char_ptr",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nextract_values_from_string_00109ab1(char **string_ptr,undefined4 *value_ptr,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char_ptr;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char_ptr = *string_ptr;\n  if (*current_char_ptr == '(') {\n    *string_ptr = current_char_ptr + 1;\n    parsed_value = parse_unsigned_from_string_00109a32(string_ptr,0);\n    *value_ptr = parsed_value;\n    if (**string_ptr == ',') {\n      *string_ptr = *string_ptr + 1;\n      parsed_value = parse_unsigned_from_string_00109a32(string_ptr,0,param_3);\n      value_ptr[1] = parsed_value;\n      if (**string_ptr == ')') {\n        current_char_ptr = *string_ptr + 1;\n        *string_ptr = current_char_ptr;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_error_00108fb9(current_char_ptr);\n    result = 0;\n  }\n  else {\n    *value_ptr = 0;\n    current_char_ptr = (char *)parse_unsigned_from_string_00109a32(string_ptr,0);\n    value_ptr[1] = (int)current_char_ptr;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char_ptr >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_values_from_string_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "process_section_001159d0",
                "param_1": "input",
                "uVar1": "result",
                "cVar2": "isValid",
                "uVar3": "returnValue",
                "lVar4": "dataValue",
                "lVar5": "nextDataValue"
            },
            "code": "\nundefined4 processSection_001159d0(long input)\n\n{\n  undefined8 result;\n  char isValid;\n  undefined4 returnValue;\n  long dataValue;\n  long nextDataValue;\n  \n  returnValue = process_section_00115b70();\n  if ((char)returnValue == '\\0') {\n    if ((*(byte *)(input + 0x27) & 2) == 0) {\n      return returnValue;\n    }\n    dataValue = get_value_from_data_00115d00(*(undefined8 *)(input + 0xd0),*(undefined8 *)(input + 0xe0));\n    if ((dataValue != 0) &&\n       (((result = *(undefined8 *)(dataValue + 8), DAT_00127a48 != 7 ||\n         (isValid = check_pattern_validity_00115d70(result,DAT_00127a28), isValid != '\\0')) &&\n        (isValid = check_pattern_validity_00115d70(result,DAT_00127a18), isValid == '\\0')))) {\n      dataValue = *(long *)(*(long *)(input + 0xd0) + 0xc0);\n      nextDataValue = dataValue;\n      do {\n        if (nextDataValue == 0) {\n          return 1;\n        }\n        isValid = process_section_00115b70(nextDataValue);\n        if (isValid == '\\0') {\n          return returnValue;\n        }\n        nextDataValue = *(long *)(*(long *)(nextDataValue + 0xd0) + 0xc0);\n      } while (dataValue != nextDataValue);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_and_create_entry_0010a77a",
                "param_1": "param",
                "__s": "firstString",
                "uVar4": "result",
                "uVar1": "flag",
                "uVar3": "value",
                "__s_00": "nextItem",
                "sVar5": "nextItemLength",
                "sVar6": "firstStringLength",
                "__s_01": "combinedString",
                "lVar2": "pointer"
            },
            "code": "\nundefined4 combineStringsAndCreateEntry_0010a77a(long param)\n\n{\n  undefined flag;\n  long pointer;\n  char *firstString;\n  undefined8 value;\n  undefined4 result;\n  char *nextItem;\n  size_t nextItemLength;\n  size_t firstStringLength;\n  char *combinedString;\n  \n  pointer = *(long *)(param + 0x60);\n  if ((pointer != 0) && (firstString = *(char **)(pointer + 0x20), firstString != (char *)0x0)) {\n    result = *(undefined4 *)(pointer + 0x18);\n    flag = *(undefined *)(pointer + 0x1c);\n    value = *(undefined8 *)(pointer + 0x10);\n    nextItem = (char *)extract_next_item_00109b2f();\n    nextItemLength = strlen(nextItem);\n    firstStringLength = strlen(firstString);\n    combinedString = (char *)xmalloc(nextItemLength + 2 + firstStringLength);\n    sprintf(combinedString,\"%s%s;\",nextItem,firstString);\n    free(nextItem);\n    free(firstString);\n    result = create_entry_00109b52(param,combinedString,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "combine_strings_and_create_entry_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "piVar2": "error_location_ptr",
                "pcVar3": "error_msg",
                "uVar1": "file_location",
                "uVar4": "error_fmt_msg",
                "unaff_RBP": "base_ptr"
            },
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_location;\n  int *error_location_ptr;\n  char *error_msg;\n  undefined8 error_fmt_msg;\n  long base_ptr;\n  \n  error_location_ptr = __errno_location();\n  error_msg = strerror(*error_location_ptr);\n  file_location = *(undefined8 *)(base_ptr + 0x10);\n  error_fmt_msg = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(error_fmt_msg,file_location,error_msg);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_and_create_entry_0010a424",
                "param_1": "entryPtr",
                "param_2": "flag1",
                "param_3": "size",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteVar",
                "iVar3": "counter",
                "uVar4": "returnValue",
                "pcVar5": "string1",
                "__ptr": "ptrArray",
                "uVar6": "extractedItem",
                "__s": "string2",
                "sVar7": "strLen1",
                "sVar8": "strLen2",
                "__s_00": "finalString",
                "lVar9": "loopVar",
                "bVar10": "byteVar2",
                "lVar11": "loopVar2",
                "uVar12": "undefinedVar"
            },
            "code": "\nundefined4 processAndCreateEntry_0010a424(long entryPtr,char flag1,int size,char flag2)\n\n{\n  char result;\n  byte byteVar;\n  int counter;\n  undefined4 returnValue;\n  char *string1;\n  undefined8 *ptrArray;\n  undefined8 extractedItem;\n  char *string2;\n  size_t strLen1;\n  size_t strLen2;\n  char *finalString;\n  long loopVar;\n  byte byteVar2;\n  long loopVar2;\n  undefined undefinedVar;\n  \n  if ((flag1 == '\\0') && (result = process_entry_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  byteVar2 = *(byte *)(*(long *)(entryPtr + 0x60) + 0x1c);\n  string1 = (char *)extract_next_item_00109b2f(entryPtr);\n  if (size < 0) {\n    ptrArray = (undefined8 *)0x0;\n    size = 0;\nLAB_0010a582:\n    undefinedVar = 1;\n    if (byteVar2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (size != 0) {\n      counter = size + 1;\n      ptrArray = (undefined8 *)xmalloc((long)counter * 8);\n      loopVar = (long)(size + -1);\n      do {\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(entryPtr + 0x60) + 0x1c);\n        }\n        extractedItem = extract_next_item_00109b2f(entryPtr);\n        byteVar2 = byteVar & 1;\n        ptrArray[loopVar] = extractedItem;\n        loopVar = loopVar + -1;\n      } while ((int)loopVar != -1);\n      if (flag2 == '\\0') {\n        result = process_entry_00109d97(entryPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(entryPtr + 0x60) + 0x1c);\n        }\n        byteVar2 = byteVar & 1;\n        extractedItem = extract_next_item_00109b2f(entryPtr);\n        ptrArray[(long)counter + -1] = extractedItem;\n        size = counter;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = process_entry_00109d97(entryPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byteVar2 != 0) || (*(char *)(*(long *)(entryPtr + 0x60) + 0x1c) != '\\0')) {\n      extractedItem = extract_next_item_00109b2f(entryPtr);\n      size = 1;\n      undefinedVar = 1;\n      *ptrArray = extractedItem;\n      goto LAB_0010a596;\n    }\n    extractedItem = extract_next_item_00109b2f(entryPtr);\n    size = 1;\n    *ptrArray = extractedItem;\n  }\n  undefinedVar = *(undefined *)(*(long *)(entryPtr + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)extract_next_item_00109b2f(entryPtr);\n  strLen1 = strlen(string1);\n  strLen2 = strlen(string2);\n  loopVar = strLen1 + 10 + strLen2;\n  for (loopVar2 = 0; (int)loopVar2 < size; loopVar2 = loopVar2 + 1) {\n    strLen1 = strlen((char *)ptrArray[loopVar2]);\n    loopVar = loopVar + strLen1;\n  }\n  finalString = (char *)xmalloc(loopVar);\n  sprintf(finalString,\"#%s,%s\",string1,string2);\n  loopVar = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    strLen1 = strlen(finalString);\n    if (size <= (int)loopVar) break;\n    *(undefined2 *)(finalString + strLen1) = 0x2c;\n    string1 = (char *)ptrArray[loopVar];\n    loopVar = loopVar + 1;\n    strcpy(finalString + strLen1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(finalString + strLen1) = 0x3b;\n  free(ptrArray);\n  returnValue = create_entry_00109b52(entryPtr,finalString,0,undefinedVar,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(finalString);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "FUN_00109d97",
                "strcpy",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_create_entry_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_copyright_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printCopyrightInfo_00119970(undefined8 version)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_copyright_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_pair_00114c80",
                "param_1": "input_string",
                "param_2": "value_2",
                "param_3": "error_message",
                "param_4": "value_4",
                "pcVar1": "equal_sign_position",
                "uVar2": "error_message_translation",
                "auVar3": "extracted_data"
            },
            "code": "\nundefined  [16] extract_key_value_pair_00114c80(char *input_string,undefined8 value_2,undefined8 error_message,undefined8 value_4)\n\n{\n  char *equal_sign_position;\n  undefined8 error_message_translation;\n  undefined extracted_data [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    extracted_data._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message_translation = copy_string_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    extracted_data._0_8_[2] = equal_sign_position + 1;\n    extracted_data._0_8_[1] = error_message_translation;\n    extracted_data._0_8_[4] = 0;\n    extracted_data._0_8_[3] = 0;\n    *extracted_data._0_8_ = value_2;\n    extracted_data._8_8_ = value_4;\n    return extracted_data;\n  }\n  error_message_translation = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message_translation,error_message);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_key_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_0010870e",
                "param_1": "inputPointer",
                "param_2": "newValue",
                "param_3": "pointerArray",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointer_0010870e(undefined8 inputPointer,undefined8 newValue,long *pointerArray)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointerArray;\n  *currentPointer = newValue;\n  *pointerArray = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_type_code_0010dac0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "result",
                "param_4": "param4",
                "param_5": "typeCode",
                "param_6": "typeData",
                "param_7": "flag",
                "param_8": "param8",
                "lVar1": "temp1",
                "cVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "lVar5": "temp5",
                "uVar6": "temp6",
                "plVar7": "tempPtr1",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "tempByte",
                "iVar9": "tempInt",
                "pcVar10": "tempStr",
                "uVar11": "tempUInt",
                "lVar12": "tempLong",
                "uVar13": "tempUInt1",
                "uVar14": "tempUInt2",
                "uVar15": "tempUInt3",
                "local_68": "buffer",
                "local_48": "charVar",
                "local_47": "byteVar"
            },
            "code": "\nlong parseTypeCode_0010dac0(long input,long *data,long result,undefined8 param4,uint typeCode,\n                 long *typeData,char flag,undefined8 param8)\n\n{\n  long temp1;\n  char temp2;\n  undefined4 temp3;\n  undefined8 temp4;\n  long temp5;\n  undefined8 temp6;\n  long *tempPtr1;\n  void *ptr1;\n  void *ptr2;\n  byte tempByte;\n  int tempInt;\n  char *tempStr;\n  ulong tempUInt;\n  long tempLong;\n  uint tempUInt1;\n  uint tempUInt2;\n  undefined8 tempUInt3;\n  undefined buffer [32];\n  char charVar;\n  byte byteVar;\n  \n  temp5 = *(long *)(input + 0x110);\n  if ((~*(uint *)(temp5 + 0x38) & typeCode) != 0) {\n    tempUInt1 = (int)typeCode >> ((byte)*(undefined4 *)(temp5 + 0x44) & 0x1f);\n    tempUInt = (ulong)(typeCode & *(uint *)(temp5 + 0x40));\n    tempByte = (byte)*(undefined4 *)(temp5 + 0x3c);\n    tempUInt1 = (tempUInt1 ^ typeCode) & *(uint *)(temp5 + 0x38) ^ tempUInt1;\n    if (tempUInt == 1L << (tempByte & 0x3f)) {\n      temp4 = parseTypeCode_0010dac0(input,data,result,param4,tempUInt1,typeData,flag,param8);\n      temp5 = initialize_or_get_data_object_00113d3a(temp4);\n      return temp5;\n    }\n    if (tempUInt != 2L << (tempByte & 0x3f)) {\n      if (tempUInt != 3L << (tempByte & 0x3f)) {\n        temp4 = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(temp5 + 0x3c),\n                          tempUInt1);\n        print_error_message_00119ed0(temp4,typeCode);\n        return 0;\n      }\n      tempUInt2 = 0;\n      if (typeData != (long *)0x0) {\n        tempUInt2 = (uint)*(ushort *)(typeData + 2);\n        tempPtr1 = typeData + 2;\n        for (tempInt = 0; (*(short *)tempPtr1 != 0 && (tempInt != 3)); tempInt = tempInt + 1) {\n          *(short *)tempPtr1 = *(short *)((long)tempPtr1 + 2);\n          tempPtr1 = (long *)((long)tempPtr1 + 2);\n        }\n        *(short *)tempPtr1 = 0;\n      }\n      tempUInt3 = 0;\n      temp4 = param8;\n      temp6 = parseTypeCode_0010dac0(input,data,result,param4,tempUInt1,typeData,0);\n      temp5 = *(long *)(result + 0x28);\n      if (temp5 == 0) {\n        temp4 = set_param_value_00113dfe(4,0,tempUInt3,temp4);\n        temp5 = initialize_debug_data_0010c218(param8,\"int\",temp4);\n        *(long *)(result + 0x28) = temp5;\n      }\n      temp5 = initialize_and_allocate_data_00113c43(temp6,temp5,0,(long)(int)(tempUInt2 - 1),0);\n      return temp5;\n    }\n    temp4 = parseTypeCode_0010dac0(input,data,result,param4,tempUInt1,typeData,flag,param8);\n    temp5 = initialize_and_allocate_00113ce0(temp4,0,0);\n    return temp5;\n  }\n  if ((typeData != (long *)0x0) && (0 < *typeData)) {\n    tempPtr1 = (long *)allocate_and_initialize_slots_0010da0b(result);\n    if (*tempPtr1 != 0) {\n      return *tempPtr1;\n    }\n    temp5 = create_data_structure_00113e23(tempPtr1,0);\n    return temp5;\n  }\n  if (flag == '\\0') {\n    typeData = (long *)0x0;\n  }\n  if (0x10 < typeCode) {\n    temp5 = initialize_data_00113e17();\n    return temp5;\n  }\n  temp5 = *(long *)(result + 8 + (long)(int)typeCode * 8);\n  if (temp5 != 0) {\n    return temp5;\n  }\n  switch(typeCode) {\n  default:\n    temp4 = initialize_data_00113e17();\n    tempStr = \"void\";\n    break;\n  case 2:\n    temp4 = set_param_value_00113dfe(1,0);\n    tempStr = \"char\";\n    break;\n  case 3:\n    temp4 = set_param_value_00113dfe(2,0);\n    tempStr = \"short\";\n    break;\n  case 4:\n    temp4 = set_param_value_00113dfe(4,0);\n    tempStr = \"int\";\n    break;\n  case 5:\n    temp4 = set_param_value_00113dfe(4,0);\n    tempStr = \"long\";\n    break;\n  case 6:\n    temp4 = initialize_data_00113df2(4);\n    tempStr = \"float\";\n    break;\n  case 7:\n    temp4 = initialize_data_00113df2(8);\n    tempStr = \"double\";\n    break;\n  case 8:\n    if (typeData == (long *)0x0) {\n      temp5 = initialize_data_structure_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (typeData == (long *)0x0) {\n      temp5 = initialize_data_structure_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp4 = 9;\nLAB_0010de7a:\n    temp5 = parse_binary_0010e07c(input,data,result,temp4,typeData,param8);\nLAB_0010e046:\n    tempPtr1 = (long *)allocate_and_initialize_slots_0010da0b(result,param4);\n    *tempPtr1 = temp5;\n    return temp5;\n  case 10:\n    if (typeData == (long *)0x0) {\n      temp5 = initialize_and_store_data_00113d6e(0,0);\n    }\n    else {\n      temp5 = typeData[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      tempLong = 0;\n      do {\n        while( true ) {\n          if ((temp5 <= data[3]) || (data[1] <= data[2])) goto LAB_0010e032;\n          tempInt = (int)tempLong;\n          temp1 = *(long *)(*data + data[2] * 8);\n          temp2 = bfd_coff_get_syment(input,temp1,buffer);\n          tempLong = (long)tempInt;\n          if (temp2 == '\\0') {\n            temp3 = bfd_get_error();\n            temp4 = bfd_errmsg(temp3);\n            temp6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(temp6,temp4);\n            free(ptr1);\n            free(ptr2);\n            temp5 = 0;\n            goto LAB_0010e046;\n          }\n          data[2] = data[2] + 1;\n          data[3] = (ulong)byteVar + 1 + data[3];\n          if (charVar != '\\x10') break;\n          if ((int)typeCode <= tempInt + 1) {\n            typeCode = typeCode + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)typeCode << 3);\n          }\n          tempLong = *(long *)(temp1 + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)tempInt * 8) = *(undefined8 *)(temp1 + 8);\n          *(long *)((long)ptr2 + (long)tempInt * 8) =\n               *(long *)(temp1 + 0x10) + *(long *)(tempLong + 0x30);\n          tempLong = (long)(tempInt + 1);\n        }\n      } while (charVar != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + tempLong * 8) = 0;\n      temp5 = initialize_and_store_data_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    temp5 = initialize_data_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    temp4 = set_param_value_00113dfe(1,1);\n    tempStr = \"unsigned char\";\n    break;\n  case 0xd:\n    temp4 = set_param_value_00113dfe(2,1);\n    tempStr = \"unsigned short\";\n    break;\n  case 0xe:\n    temp4 = set_param_value_00113dfe(4,1);\n    tempStr = \"unsigned int\";\n    break;\n  case 0xf:\n    temp4 = set_param_value_00113dfe(4,1);\n    tempStr = \"unsigned long\";\n    break;\n  case 0x10:\n    temp4 = initialize_data_00113df2(0xc);\n    tempStr = \"long double\";\n  }\n  temp5 = initialize_debug_data_0010c218(param8,tempStr,temp4);\nLAB_0010e065:\n  *(long *)(result + 8 + (long)(int)typeCode * 8) = temp5;\n  return temp5;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010e07c",
                "FUN_00113da9",
                "FUN_00113c43",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_00113e23",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_type_code_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "str1",
                "param_2": "str2",
                "__n": "length",
                "iVar1": "comparisonResult",
                "extraout_var": "extraResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *str1,char *str2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extraResult;\n  undefined result [16];\n  \n  length = strlen(str2);\n  comparisonResult = strncmp(str1,str2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraResult,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00107880",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "set_time_error_message_0010882c",
                "piVar1": "errorLocation",
                "uVar2": "localizedErrorMessage"
            },
            "code": "\nvoid setTimeErrorMessage_0010882c(void)\n\n{\n  int *errorLocation;\n  undefined8 localizedErrorMessage;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00119ed0(localizedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "set_time_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_extracted_item_0010ebb0",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "input_length",
                "param_4": "additional_param",
                "__s": "extracted_item",
                "uVar2": "adjusted_length",
                "uVar3": "result",
                "__s_00": "formatted_string",
                "cVar1": "character",
                "sVar4": "input_string_length",
                "sVar5": "extracted_item_length"
            },
            "code": "\nundefined4 process_extracted_item_0010ebb0(undefined8 input_param,char *input_string,int input_length,undefined8 additional_param)\n\n{\n  char character;\n  uint adjusted_length;\n  undefined4 result;\n  char *extracted_item;\n  size_t input_string_length;\n  size_t extracted_item_length;\n  char *formatted_string;\n  \n  extracted_item = (char *)extract_next_item_00109b2f();\n  adjusted_length = input_length - 1;\n  if (adjusted_length < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)adjusted_length * 4);\n    character = (&DAT_00121334)[adjusted_length];\n    input_string_length = strlen(input_string);\n    extracted_item_length = strlen(extracted_item);\n    formatted_string = (char *)xmalloc(input_string_length + 3 + extracted_item_length);\n    sprintf(formatted_string,\"%s:%c%s\",input_string,(ulong)(uint)(int)character,extracted_item);\n    free(extracted_item);\n    result = process_bfd_hash_0010e2f0(input_param,result,0,additional_param,formatted_string);\n    if ((char)result != '\\0') {\n      free(formatted_string);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_extracted_item_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_data_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "undefinedParam",
                "lVar1": "dataPointer",
                "plVar2": "allocatedPointer"
            },
            "code": "\nlong initializeData_00113b98(long input1,long input2,long input3,undefined undefinedParam)\n\n{\n  long dataPointer;\n  long *allocatedPointer;\n  \n  if ((input1 != 0) && (dataPointer = initialize_data_00112904(0x13,0), dataPointer != 0)) {\n    allocatedPointer = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocatedPointer + 0x19) = 0;\n    *allocatedPointer = input1;\n    *(undefined4 *)((long)allocatedPointer + 0x1c) = 0;\n    allocatedPointer[1] = input2;\n    allocatedPointer[2] = input3;\n    *(undefined *)(allocatedPointer + 3) = undefinedParam;\n    *(long **)(dataPointer + 0x10) = allocatedPointer;\n    return dataPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_validity_00115d70",
                "param_1": "input_data",
                "param_2": "hash_table",
                "lVar1": "hash_result",
                "local_18": "found_pattern",
                "local_10": "is_valid_pattern"
            },
            "code": "\nundefined checkPatternValidity_00115d70(undefined8 input_data,undefined8 hash_table)\n\n{\n  long hash_result;\n  undefined8 found_pattern;\n  undefined is_valid_pattern;\n  \n  if (DAT_001279ea == '\\0') {\n    hash_result = htab_find(hash_table,input_data);\n    is_valid_pattern = hash_result != 0;\n  }\n  else {\n    is_valid_pattern = 0;\n    found_pattern = input_data;\n    htab_traverse(hash_table,match_pattern_0011a170,&found_pattern);\n  }\n  return is_valid_pattern;\n}\n\n",
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_pattern_validity_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_item_00109be3",
                "param_1": "array",
                "param_2": "item",
                "param_3": "value",
                "uVar1": "newArray",
                "puVar2": "itemPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndAddItem_00109be3(long array,undefined8 item,undefined4 value)\n\n{\n  undefined8 newArray;\n  undefined8 *itemPtr;\n  uint currentSize;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    currentSize = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = currentSize;\n    newArray = xrealloc(*(undefined8 *)(array + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(array + 0x20) = newArray;\n  }\n  currentSize = *(uint *)(array + 0x28);\n  itemPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(array + 0x20));\n  *itemPtr = item;\n  *(undefined4 *)(itemPtr + 1) = value;\n  *(uint *)(array + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)itemPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_add_item_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00104943",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "strLength",
                "__dest": "newString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t strLength;\n  void *newString;\n  \n  strLength = strnlen(inputString,maxLength);\n  newString = (void *)xmalloc(strLength + 1);\n  *(undefined *)((long)newString + strLength) = 0;\n  memcpy(newString,inputString,strLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_free_hash_0010e918",
                "param_1": "function_pointer",
                "param_2": "input_string",
                "param_3": "additional_value",
                "uVar1": "result",
                "__s": "extracted_item",
                "sVar2": "input_length",
                "sVar3": "extracted_item_length",
                "__s_00": "formatted_string"
            },
            "code": "\nundefined4 process_and_free_hash_0010e918(undefined8 function_pointer,char *input_string,undefined8 additional_value)\n\n{\n  undefined4 result;\n  char *extracted_item;\n  size_t input_length;\n  size_t extracted_item_length;\n  char *formatted_string;\n  \n  extracted_item = (char *)extract_next_item_00109b2f();\n  input_length = strlen(input_string);\n  extracted_item_length = strlen(extracted_item);\n  formatted_string = (char *)xmalloc(input_length + 0x14 + extracted_item_length);\n  sprintf(formatted_string,\"%s:c=e%s,%ld\",input_string,extracted_item,additional_value);\n  free(extracted_item);\n  result = process_bfd_hash_0010e2f0(function_pointer,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_hash_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_and_print_section_00116110",
                "param_1": "binary",
                "param_2": "section",
                "param_3": "outputSection",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "temp3",
                "iVar4": "temp4",
                "iVar5": "temp5",
                "cVar6": "result",
                "uVar7": "message",
                "__ptr": "buffer",
                "lVar8": "bufferIndex",
                "uVar9": "loopIndex",
                "iVar10": "chunkSize",
                "uVar11": "originalIndex",
                "puVar12": "bytePointer",
                "lVar13": "bufferLength",
                "puVar14": "alignedPointer",
                "puVar15": "currentPointer",
                "pvVar16": "sourcePtr",
                "uVar17": "loopVar1",
                "uVar18": "loopVar2",
                "uVar19": "loopVar3",
                "bVar20": "isAligned",
                "local_38": "sectionSize",
                "local_30": "fullSection"
            },
            "code": "\nvoid reverseAndPrintSection_00116110(undefined8 binary,undefined8 *section,undefined8 outputSection)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long temp3;\n  int temp4;\n  int temp5;\n  char result;\n  undefined8 message;\n  undefined8 *buffer;\n  long bufferIndex;\n  ulong loopIndex;\n  int chunkSize;\n  ulong originalIndex;\n  undefined *bytePointer;\n  long bufferLength;\n  undefined8 *alignedPointer;\n  undefined8 *currentPointer;\n  void *sourcePtr;\n  ulong loopVar1;\n  ulong loopVar2;\n  ulong loopVar3;\n  byte isAligned;\n  ulong sectionSize;\n  void *fullSection;\n  \n  isAligned = 0;\n  result = check_section_for_duplicate_00115f50(binary,section,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = section[8];\n  temp3 = section[0xc];\n  if (((*(byte *)((long)section + 0x25) & 1) == 0) || ((*(byte *)(temp3 + 0x25) & 1) == 0)) {\n    bufferLength = process_function_00114190(*section,0,0x80);\n    if (bufferLength == 0) {\n      return;\n    }\n    if ((*(byte *)(bufferLength + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    currentPointer = buffer;\n    if (7 < sectionSize) {\n      for (loopVar2 = sectionSize >> 3; loopVar2 != 0; loopVar2 = loopVar2 - 1) {\n        *currentPointer = 0;\n        currentPointer = currentPointer + (ulong)isAligned * -2 + 1;\n      }\n    }\n    alignedPointer = currentPointer;\n    if ((sectionSize & 4) != 0) {\n      alignedPointer = (undefined8 *)((long)currentPointer + (ulong)isAligned * -8 + 4);\n      *(undefined4 *)currentPointer = 0;\n    }\n    currentPointer = alignedPointer;\n    if ((sectionSize & 2) != 0) {\n      currentPointer = (undefined8 *)((long)alignedPointer + (ulong)isAligned * -4 + 2);\n      *(undefined2 *)alignedPointer = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)currentPointer = 0;\n    }\n    result = bfd_set_section_contents(outputSection,temp3,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,outputSection,temp3,0);\n    free(buffer);\n    return;\n  }\n  fullSection = (void *)0x0;\n  result = bfd_get_full_section_contents(binary,section,&fullSection);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(binary,section,outputSection,&fullSection,&sectionSize),\n     chunkSize = DAT_00127908, result == '\\0')) {\n    bfd_set_section_size(temp3,0);\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,binary,section,0);\n    free(fullSection);\n    return;\n  }\n  temp4 = DAT_001264b8;\n  temp5 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    loopVar2 = (ulong)DAT_00127908;\n    if (sectionSize % loopVar2 != 0) {\n      temp2 = *section;\n      message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(message,temp2,chunkSize);\n    }\n    chunkSize = DAT_00127908 / 2;\n    originalIndex = 0;\n    while (loopVar3 = originalIndex, temp4 = DAT_001264b8, temp5 = DAT_001264bc, loopVar3 < sectionSize) {\n      originalIndex = loopVar2 + loopVar3;\n      loopVar1 = originalIndex;\n      for (loopIndex = 0; loopIndex < (ulong)(long)chunkSize; loopIndex = loopIndex + 1) {\n        loopVar1 = loopVar1 - 1;\n        bytePointer = (undefined *)(loopVar3 + loopIndex + (long)fullSection);\n        temp1 = *bytePointer;\n        *bytePointer = *(undefined *)((long)fullSection + loopVar1);\n        *(undefined *)((long)fullSection + loopVar1) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = temp4;\n  DAT_001264bc = temp5;\n  if (-1 < temp5) {\n    loopVar2 = (ulong)DAT_00127a3c;\n    chunkSize = (int)((ulong)section[7] % loopVar2);\n    originalIndex = ((long)temp5 - (long)chunkSize) + (long)fullSection;\n    if (temp5 < chunkSize) {\n      originalIndex = originalIndex + loopVar2;\n    }\n    bufferLength = (sectionSize + (long)fullSection) - originalIndex;\n    sourcePtr = fullSection;\n    for (; originalIndex < sectionSize + (long)fullSection; originalIndex = originalIndex + loopVar2) {\n      for (bufferIndex = 0; ((int)bufferIndex < temp4 && (bufferIndex != bufferLength)); bufferIndex = bufferIndex + 1) {\n        *(undefined *)((long)sourcePtr + bufferIndex) = *(undefined *)(originalIndex + bufferIndex);\n      }\n      sourcePtr = (void *)((long)sourcePtr + bufferIndex);\n      bufferLength = bufferLength - loopVar2;\n    }\n    sectionSize = ((((loopVar2 - 1) + sectionSize) - (long)temp5) / loopVar2) * (long)temp4;\n    loopVar2 = *(ulong *)(temp3 + 0x38) / loopVar2;\n    *(ulong *)(temp3 + 0x38) = loopVar2;\n    if (temp5 < chunkSize) {\n      *(ulong *)(temp3 + 0x38) = loopVar2 + 1;\n      result = bfd_set_section_contents(outputSection,temp3,fullSection,0,sectionSize);\n      if (result == '\\0') {\n        cleanup_and_print_error_message_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputSection,temp3,fullSection,0,sectionSize);\n  if (result == '\\0') {\n    cleanup_and_print_error_message_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(fullSection);\n  return;\n}\n\n",
            "called": [
                "FUN_00115f50",
                "xmalloc",
                "bfd_set_section_size",
                "FUN_00114190",
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_001083de",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_print_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "handle_error_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorCause",
                "dcgettext": "getErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printErrorMessage",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid handleError_0010871c(void)\n\n{\n  undefined8 errorCause;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorCause = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_00127600,errorCause,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "handle_error_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_debugging_0010bf20",
                "param_1": "blockPtr",
                "param_2": "endBlockDebuggingPtr",
                "param_3": "unused1",
                "param_4": "unused2",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorMessageText",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endBlockDebugging_0010bf20(long blockPtr,undefined8 endBlockDebugging_0010bf20Ptr,undefined8 unused1,undefined8 unused2)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorMessageText;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlock = *(long *)(blockPtr + 0x20), currentBlock == 0)) {\n    errorMessageText = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = endBlockDebugging_0010bf20Ptr;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessageText = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorMessageText,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "end_block_debugging_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_and_execute_0010c95e",
                "param_1": "dataStructures",
                "param_2": "input",
                "param_3": "paramData",
                "bVar1": "firstChar",
                "bVar2": "nextChar",
                "pbVar3": "ptr",
                "bVar4": "isSigned",
                "bVar5": "isChar",
                "bVar6": "isVoid",
                "cVar7": "result",
                "uVar8": "numDigits",
                "pbVar9": "nextPtr",
                "lVar10": "type",
                "uVar11": "extractedData",
                "pcVar12": "signedTypeName",
                "sVar13": "strLen",
                "uVar14": "uintValue",
                "__ptr": "typePtr",
                "lVar15": "returnValue",
                "pcVar19": "typeName",
                "ppcVar18": "dataPointer",
                "puVar17": "valuePtr",
                "puVar16": "sizePtr",
                "local_49": "isPointer",
                "local_48": "size",
                "local_40": "data"
            },
            "code": "\nundefined8 parseAndExecute_0010c95e(undefined8 *dataStructures,byte **input,long *paramData)\n\n{\n  byte firstChar;\n  byte nextChar;\n  byte *ptr;\n  bool isSigned;\n  bool isChar;\n  bool isVoid;\n  char result;\n  uint numDigits;\n  byte *nextPtr;\n  long type;\n  undefined8 extractedData;\n  char *signedTypeName;\n  size_t strLen;\n  ulong uintValue;\n  void *typePtr;\n  long returnValue;\n  ulong *sizePtr;\n  undefined *valuePtr;\n  char **dataPointer;\n  char *typeName;\n  byte *pnextChar0;\n  undefined isPointer;\n  ulong size;\n  char *data [2];\n  \n  while( true ) {\n    pnextChar0 = *input;\n    firstChar = *pnextChar0;\n    if ('T' < (char)firstChar) break;\n    if ((char)firstChar < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(firstChar) {\n    case 0x41:\n      returnValue = 0;\n      ptr = pnextChar0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *input = pnextChar0 + 1;\n      result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (paramData == (long *)0x0) {\n        return 1;\n      }\n      returnValue = initialize_data_and_set_param_00113b71(*paramData);\n      *paramData = returnValue;\n      return 1;\n    case 0x46:\n      *input = pnextChar0 + 1;\n      if (paramData == (long *)0x0) {\n        sizePtr = (ulong *)0x0;\n        dataPointer = (char **)0x0;\n      }\n      else {\n        sizePtr = &size;\n        dataPointer = data;\n      }\n      result = parse_and_process_items_0010d882(dataStructures,input,dataPointer,sizePtr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**input == 0x5f) {\n        *input = *input + 1;\n        result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (paramData == (long *)0x0) {\n          return 1;\n        }\n        returnValue = initialize_and_allocate_00113ce0(*paramData,data[0],size & 0xff);\n        *paramData = returnValue;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *input = pnextChar0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      isPointer = 0;\n      data[0] = (char *)0x0;\n      size = 0;\n      *input = pnextChar0 + 1;\n      if (((&_sch_istable)[(ulong)pnextChar0[1] * 2] & 4) == 0) {\n        if (pnextChar0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        dataPointer = data;\n        if (paramData == (long *)0x0) {\n          dataPointer = (char **)0x0;\n        }\n        result = parse_and_extract_data_0010d559(dataStructures,input,dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        numDigits = extract_digits_00108e76(input);\n        ptr = *input;\n        strLen = strlen((char *)ptr);\n        if (strLen < numDigits) goto switchD_0010cdf9_caseD_60;\n        *input = ptr + numDigits;\n        if ((paramData != (long *)0x0) &&\n           (data[0] = (char *)find_string_in_data_structure_0010afd5(*dataStructures,dataStructures[1],ptr,numDigits,9),\n           data[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextChar = **input;\n      if (firstChar == 0x4d) {\n        if ((nextChar == 0x43) || (nextChar == 0x56)) {\n          *input = *input + 1;\n        }\n        if (**input != 0x46) goto switchD_0010cdf9_caseD_60;\n        *input = *input + 1;\n        if (paramData == (long *)0x0) {\n          valuePtr = (undefined *)0x0;\n          sizePtr = (ulong *)0x0;\n        }\n        else {\n          valuePtr = &isPointer;\n          sizePtr = &size;\n        }\n        result = parse_and_process_items_0010d882(dataStructures,input,sizePtr,valuePtr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**input == 0x5f) {\n        *input = *input + 1;\n        result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (paramData == (long *)0x0) {\n          return 1;\n        }\n        if (firstChar != 0x4d) {\n          returnValue = initialize_data_and_allocate_memory_00113bfa(data[0],*paramData);\n          *paramData = returnValue;\n          return 1;\n        }\n        returnValue = initialize_data_00113b98(*paramData,data[0],size,isPointer);\n        *paramData = returnValue;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      extractedData = parse_and_extract_data_0010d559(dataStructures,input,paramData);\n      return extractedData;\n    case 0x52:\n      *input = pnextChar0 + 1;\n      result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (paramData == (long *)0x0) {\n        return 1;\n      }\n      returnValue = initialize_data_and_return_00113cb9(*paramData);\n      *paramData = returnValue;\n      return 1;\n    case 0x54:\n      *input = pnextChar0 + 1;\n      result = parse_unsigned_int_00108ea1(input,&size);\n      if (result != '\\0') {\n        if ((uint)size < *(uint *)(dataStructures + 5)) {\n          data[0] = *(char **)((size & 0xffffffff) * 0x10 + dataStructures[4]);\n          result = parseAndExecute_0010c95e(dataStructures,data,paramData);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (firstChar == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *input = pnextChar0 + 1;\n    result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (paramData == (long *)0x0) {\n      return 1;\n    }\n    returnValue = initialize_or_get_data_object_00113d3a(*paramData);\n    *paramData = returnValue;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isVoid = false;\n  isSigned = false;\n  result = '\\0';\n  isChar = false;\n  do {\n    ptr = *input;\n    firstChar = *ptr;\n    if (firstChar == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)firstChar) {\n      if (firstChar == 0x56) {\n        isVoid = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)firstChar) goto switchD_0010cdf9_caseD_60;\n      if ((char)firstChar < '_') goto LAB_0010cdfb;\n      switch(firstChar) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (paramData == (long *)0x0) {\nLAB_0010d0aa:\n          *input = ptr + 1;\n          return 1;\n        }\n        returnValue = find_named_type_0010914e(*dataStructures,&DAT_00120436);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = initialize_data_00112904(6,4);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned char\";\n        if ((result == '\\0') && (typeName = \"char\", isSigned)) {\n          typeName = \"signed char\";\n        }\n        returnValue = find_named_type_0010914e(*dataStructures,typeName);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = set_param_value_00113dfe(1,result);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        returnValue = find_named_type_0010914e(*dataStructures,\"float\");\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = initialize_data_00113df2(4);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned int\";\n        signedTypeName = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long unsigned int\";\n        signedTypeName = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          typeName = signedTypeName;\n        }\n        returnValue = find_named_type_0010914e(*dataStructures,typeName);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = set_param_value_00113dfe(4,result);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        typeName = \"long double\";\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        returnValue = find_named_type_0010914e(*dataStructures,typeName);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = initialize_data_00113df2(8);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"short unsigned int\";\n        if (result == '\\0') {\n          typeName = \"short int\";\n        }\n        returnValue = find_named_type_0010914e(*dataStructures,typeName);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = set_param_value_00113dfe(2,result);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        dataPointer = data;\n        if (paramData == (long *)0x0) {\n          dataPointer = (char **)0x0;\n        }\n        result = parse_input_0010d21c(dataStructures,input,dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (paramData == (long *)0x0) {\n          return 1;\n        }\n        strLen = strlen(data[0]);\n        returnValue = find_string_in_data_structure_0010afd5(*dataStructures,dataStructures[1],data[0],strLen & 0xffffffff,9);\n        *paramData = returnValue;\n        free(data[0]);\n        returnValue = *paramData;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        returnValue = find_named_type_0010914e(*dataStructures,&DAT_00120495);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = initialize_data_00113e17();\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        returnValue = find_named_type_0010914e(*dataStructures,\"__wchar_t\");\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = set_param_value_00113dfe(2,1);\n          *paramData = returnValue;\n          *input = *input + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (paramData == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long long unsigned int\";\n        if (result == '\\0') {\n          typeName = \"long long int\";\n        }\n        returnValue = find_named_type_0010914e(*dataStructures,typeName);\n        *paramData = returnValue;\n        if (returnValue == 0) {\n          returnValue = set_param_value_00113dfe(8,result);\n          *paramData = returnValue;\n        }\n      }\n      *input = *input + 1;\n      goto LAB_0010d1de;\n    }\n    if (firstChar == 0x43) {\n      isChar = true;\n      goto LAB_0010cd84;\n    }\n    if (firstChar != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *input = ptr + 1;\n  } while( true );\nLAB_0010ca26:\n  nextPtr = ptr + 1;\n  *input = nextPtr;\n  firstChar = *nextPtr;\n  if (firstChar == 0) goto switchD_0010cdf9_caseD_60;\n  if (firstChar == 0x5f) {\n    *input = ptr + 2;\n    result = parseAndExecute_0010c95e(dataStructures,input,paramData);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (paramData == (long *)0x0) {\n      return 1;\n    }\n    type = find_named_type_0010914e(*dataStructures,\"int\");\n    if (type == 0) {\n      type = set_param_value_00113dfe(4,0);\n    }\n    returnValue = initialize_and_allocate_data_00113c43(*paramData,type,0,returnValue,0);\n    *paramData = returnValue;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)firstChar * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  returnValue = returnValue * 10 + (long)((char)firstChar + -0x30);\n  ptr = nextPtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)firstChar < ':') {\n    if ((char)firstChar < '0') {\n      if (firstChar != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnextChar0);\n      if (paramData == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((firstChar != 0x47) || (*input = ptr + 1, ((&_sch_istable)[(ulong)ptr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextChar0 = *input;\n  numDigits = extract_digits_00108e76(input);\n  ptr = *input;\n  strLen = strlen((char *)ptr);\n  uintValue = (ulong)numDigits;\n  if (uintValue <= strLen) {\n    *input = ptr + uintValue;\n    if (paramData == (long *)0x0) {\n      return 1;\n    }\n    typePtr = (void *)copy_and_null_terminate_00109a0b(ptr,uintValue);\n    returnValue = find_named_type_0010914e(*dataStructures,typePtr);\n    *paramData = returnValue;\n    free(typePtr);\n    if (*paramData == 0) {\n      returnValue = find_string_in_data_structure_0010afd5(*dataStructures,dataStructures[1],ptr,(int)*input - (int)ptr,0);\n      *paramData = returnValue;\njoined_r0x0010d1d8:\n      if (returnValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isChar) {\n      returnValue = initialize_data_and_set_param_00113b71(*paramData);\n      *paramData = returnValue;\n    }\n    if (isVoid) {\n      returnValue = initialize_data_00113b4a(*paramData);\n      *paramData = returnValue;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnextChar0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "FUN_00108ea1",
                "FUN_00113c43",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113bfa",
                "FUN_0010d559",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_00113cb9",
                "free",
                "FUN_0010d21c",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_and_execute_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_concatenated_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = detect_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_function_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_function_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_function_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improve_binary_analysis_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = analyze_debug_records_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = analyze_debug_records_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = validate_and_initialize_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_file_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_file_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_type_code_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_type_code_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = initialize_debug_record_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = validate_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_validity_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_validity_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = process_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_and_print_section_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)build_attribute_notes_parser_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_malloc_and_get_section",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_get_full_section_contents",
                "dcgettext",
                "bfd_get_section_by_name",
                "strerror",
                "bfd_set_section_size",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00113fb0",
                "bfd_create_gnu_debuglink_section",
                "FUN_001126c0",
                "free",
                "FUN_00115530",
                "bfd_get_arch",
                "FUN_00114190",
                "fopen",
                "fwrite",
                "xmalloc",
                "FUN_00105828",
                "fclose",
                "__errno_location",
                "FUN_0010551d",
                "bfd_set_format",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_timestamp_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorPointer",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileTimestamp_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 errorString;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorPointer = __errno_location();\n    errorMessage = strerror(*errorPointer);\n    errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(errorString,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_timestamp_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorType",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorType)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorType,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010871c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_bfd_hash_0010e2f0",
                "param_1": "hash_table",
                "param_2": "undefined_param",
                "param_3": "param_size",
                "param_4": "param_str",
                "param_5": "string",
                "lVar1": "hash_table_entry",
                "uVar2": "error_code",
                "lVar3": "lookup_result",
                "uVar4": "error_message",
                "uVar5": "translated_message",
                "sVar6": "str_length",
                "lVar7": "result_offset",
                "local_44": "local_var_44",
                "local_3c": "local_array_3c"
            },
            "code": "\nundefined8\nprocess_bfd_hash_0010e2f0(long *hash_table,undefined undefined_param,int param_size,undefined8 param_str,char *string)\n\n{\n  long hash_table_entry;\n  undefined4 error_code;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 translated_message;\n  size_t str_length;\n  long result_offset;\n  undefined4 local_var_44;\n  undefined uStack_40;\n  undefined uStack_3f;\n  undefined2 uStack_3e;\n  undefined4 local_array_3c [3];\n  \n  if (string == (char *)0x0) {\n    result_offset = 0;\n  }\n  else {\n    lookup_result = bfd_hash_lookup(hash_table + 7,string,1,1);\n    if (lookup_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      translated_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(translated_message,error_message);\n      return 0;\n    }\n    result_offset = *(long *)(lookup_result + 0x20);\n    if (result_offset == -1) {\n      result_offset = hash_table[6];\n      hash_table_entry = hash_table[5];\n      *(long *)(lookup_result + 0x20) = result_offset;\n      if (hash_table_entry == 0) {\n        hash_table[4] = lookup_result;\n      }\n      else {\n        *(long *)(hash_table_entry + 0x18) = lookup_result;\n      }\n      hash_table[5] = lookup_result;\n      str_length = strlen(string);\n      hash_table[6] = result_offset + 1 + str_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(result_offset,&local_var_44);\n  uStack_3f = 0;\n  uStack_40 = undefined_param;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_size,&uStack_3e);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param_str,local_array_3c);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    result_offset = xrealloc(hash_table[1]);\n    hash_table[1] = result_offset;\n  }\n  result_offset = hash_table[2];\n  lookup_result = hash_table[1];\n  *(ulong *)(lookup_result + result_offset) = CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_var_44)));\n  *(undefined4 *)(lookup_result + 8 + result_offset) = local_array_3c[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)result_offset >> 8),1);\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010e439",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010ed2c"
            ],
            "imported": false,
            "current_name": "process_bfd_hash_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "extract_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "pcVar3": "commaPosition",
                "pcVar4": "nextSectionFlag",
                "sVar5": "sectionFlagLength",
                "iVar6": "sectionFlagIndex",
                "uVar7": "result",
                "auVar8": "output"
            },
            "code": "\nundefined  [16] extractSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  char *commaPosition;\n  char *nextSectionFlag;\n  size_t sectionFlagLength;\n  int sectionFlagIndex;\n  uint result;\n  undefined output [16];\n  \n  result = 0;\n  do {\n    commaPosition = strchr(sectionFlags,0x2c);\n    if (commaPosition == (char *)0x0) {\n      sectionFlagLength = strlen(sectionFlags);\n      sectionFlagIndex = (int)sectionFlagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPosition + 1;\n      sectionFlagIndex = (int)commaPosition - (int)sectionFlags;\n    }\n    sectionFlagLength = (size_t)sectionFlagIndex;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,sectionFlagLength);\n    if (comparisonResult == 0) {\n      result = result | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,sectionFlagLength);\n      if (comparisonResult == 0) {\n        result = result | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,sectionFlagLength);\n        if (comparisonResult == 0) {\n          result = result | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,sectionFlagLength);\n          if (comparisonResult == 0) {\n            result = result | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,sectionFlagLength);\n            if (comparisonResult == 0) {\n              result = result | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,sectionFlagLength);\n              if (comparisonResult == 0) {\n                result = result | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,sectionFlagLength);\n                if (comparisonResult == 0) {\n                  result = result | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,sectionFlagLength);\n                  if (comparisonResult == 0) {\n                    result = result | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,sectionFlagLength);\n                    if (comparisonResult == 0) {\n                      result = result | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,sectionFlagLength);\n                      if (comparisonResult == 0) {\n                        result = result | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,sectionFlagLength);\n                        if (comparisonResult == 0) {\n                          result = result | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,sectionFlagLength);\n                          if (comparisonResult == 0) {\n                            result = result | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,sectionFlagLength);\n                            if (comparisonResult != 0) {\n                              commaPosition = (char *)xmalloc((long)(sectionFlagIndex + 1));\n                              strncpy(commaPosition,sectionFlags,sectionFlagLength);\n                              commaPosition[sectionFlagLength] = '\\0';\n                              translatedMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(translatedMessage,commaPosition);\n                              translatedMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(translatedMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            result = result | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  output._4_4_ = 0;\n  output._0_4_ = result;\n  output._8_8_ = param4;\n  return output;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_concatenated_string_001125fa",
                "param_1": "inputParams",
                "uVar1": "totalLength",
                "ppcVar2": "stringArray",
                "sVar3": "array1Length",
                "sVar4": "array2Length",
                "__s": "finalString"
            },
            "code": "\nchar * getConcatenatedString_001125fa(char **inputParams)\n\n{\n  ulong totalLength;\n  char **stringArray;\n  size_t array1Length;\n  size_t array2Length;\n  char *finalString;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  stringArray = (char **)inputParams[0x1d];\n  finalString = *inputParams;\n  if ((stringArray != (char **)0x0) && ((*(byte *)((long)stringArray + 0x49) & 0x10) == 0)) {\n    array1Length = strlen(*stringArray);\n    array2Length = strlen(finalString);\n    totalLength = array1Length + 3 + array2Length;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    finalString = DAT_00127a50;\n  }\n  return finalString;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strlen",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "get_concatenated_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "currentPointer",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *currentPointer;\n  undefined4 *nextPointer;\n  \n  currentPointer = (undefined4 *)&DAT_00127740;\n  do {\n    nextPointer = currentPointer + 6;\n    free(*(void **)(currentPointer + 4));\n    *(undefined8 *)(currentPointer + 4) = 0;\n    currentPointer = nextPointer;\n  } while (nextPointer != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_filename_to_debug_source_00108f08",
                "param_1": "sourceManager",
                "param_2": "filename",
                "iVar1": "comparisonResult",
                "uVar2": "returnValue",
                "puVar3": "currentEntry",
                "puVar4": "previousEntry",
                "lVar5": "loopCounter",
                "puVar6": "sourceManagerPointer",
                "pcVar7": "filenameToCompare",
                "puVar8": "newEntryPointer",
                "bVar9": "counter"
            },
            "code": "\n\n\nundefined8 addFilenameToDebugSource_00108f08(long sourceManager,char *filename)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined8 *currentEntry;\n  undefined8 *previousEntry;\n  long loopCounter;\n  undefined8 *sourceManagerPointer;\n  char *filenameToCompare;\n  undefined8 *newEntryPointer;\n  byte counter;\n  \n  counter = 0;\n  filenameToCompare = \"\";\n  if (filename != (char *)0x0) {\n    filenameToCompare = filename;\n  }\n  if (*(long *)(sourceManager + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentEntry = *(undefined8 **)(*(long *)(sourceManager + 8) + 8); currentEntry != (undefined8 *)0x0;\n        currentEntry = (undefined8 *)*currentEntry) {\n      comparisonResult = filename_cmp(currentEntry[1],filenameToCompare);\n      if (comparisonResult == 0) goto LAB_00108fad;\n    }\n    currentEntry = (undefined8 *)xmalloc(0x18);\n    sourceManagerPointer = *(undefined8 **)(sourceManager + 0x10);\n    newEntryPointer = currentEntry;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)newEntryPointer = 0;\n      newEntryPointer = (undefined8 *)((long)newEntryPointer + (ulong)counter * -8 + 4);\n    }\n    currentEntry[1] = filenameToCompare;\n    newEntryPointer = (undefined8 *)*sourceManagerPointer;\n    while (previousEntry = newEntryPointer, previousEntry != (undefined8 *)0x0) {\n      sourceManagerPointer = previousEntry;\n      newEntryPointer = (undefined8 *)*previousEntry;\n    }\n    *sourceManagerPointer = currentEntry;\nLAB_00108fad:\n    *(undefined8 **)(sourceManager + 0x10) = currentEntry;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_filename_to_debug_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_function_00114190",
                "param_1": "inputArray",
                "param_2": "flag",
                "param_3": "permissions",
                "uVar1": "permissionFlag",
                "plVar2": "ptrMatch",
                "pplVar3": "resultPointer",
                "iVar4": "matchResult",
                "uVar5": "errorMessage",
                "pplVar6": "currentPointer",
                "pplVar7": "previousPointer",
                "pplVar8": "nextPointer"
            },
            "code": "\nlong ** processFunction_00114190(long *inputArray,char flag,uint permissions)\n\n{\n  uint permissionFlag;\n  long *ptrMatch;\n  long **resultPointer;\n  int matchResult;\n  undefined8 errorMessage;\n  long **currentPointer;\n  long **previousPointer;\n  long **nextPointer;\n  \n  previousPointer = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((permissions & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      currentPointer = (long **)*previousPointer;\n      if (currentPointer == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previousPointer = (long **)0x0;\n    }\n    else {\n      ptrMatch = DAT_00127900[1];\n      if (*(char *)ptrMatch == '!') {\n        matchResult = fnmatch((char *)((long)ptrMatch + 1),(char *)inputArray,0);\n        currentPointer = previousPointer;\n        if (matchResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      matchResult = fnmatch((char *)ptrMatch,(char *)inputArray,0);\n      if (matchResult != 0) goto LAB_001141e5;\n      currentPointer = (long **)*previousPointer;\n      if (currentPointer == (long **)0x0) goto LAB_00114245;\n    }\n    if ((permissions & *(uint *)((long)currentPointer + 0x14)) != 0) {\n      ptrMatch = currentPointer[1];\n      if (*(char *)ptrMatch == '!') {\n        matchResult = fnmatch((char *)((long)ptrMatch + 1),(char *)inputArray,0);\n        if (matchResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentPointer + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        matchResult = fnmatch((char *)ptrMatch,(char *)inputArray,0);\n        if ((previousPointer == (long **)0x0) && (matchResult == 0)) {\n          nextPointer = (long **)*currentPointer;\n          previousPointer = currentPointer;\n          if (nextPointer == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextPointer = (long **)*currentPointer;\n    currentPointer = previousPointer;\n    if (nextPointer != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    matchResult = strcmp((char *)DAT_00127900[1],(char *)inputArray);\n    if (matchResult == 0) {\nLAB_001143cd:\n      permissionFlag = *(uint *)((long)previousPointer + 0x14);\n      if ((((permissionFlag & 1) != 0) && ((permissions & 2) != 0)) ||\n         (((permissions & 1) != 0 && ((permissionFlag & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,inputArray);\n      }\n      if ((((permissionFlag & 8) != 0) && ((permissions & 0x10) != 0)) || ((permissions & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,inputArray);\n      }\n      if ((((permissionFlag & 0x20) == 0) || ((permissions & 0x40) == 0)) && ((permissions & 0x60) != 0x60)) {\n        *(uint *)((long)previousPointer + 0x14) = permissionFlag | permissions;\n        return previousPointer;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,inputArray);\n    }\n    previousPointer = (long **)*previousPointer;\n    if (previousPointer == (long **)0x0) goto LAB_001142a9;\n    matchResult = strcmp((char *)previousPointer[1],(char *)inputArray);\n    if (matchResult == 0) goto LAB_001143cd;\n    nextPointer = (long **)*previousPointer;\n    currentPointer = (long **)0x0;\n    if (nextPointer == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previousPointer = currentPointer;\n      if (flag == '\\0') {\n        while (currentPointer = nextPointer, resultPointer = previousPointer, nextPointer = currentPointer,\n              (permissions & *(uint *)((long)currentPointer + 0x14)) != 0) {\n          ptrMatch = currentPointer[1];\n          if (*(char *)ptrMatch == '!') {\n            matchResult = fnmatch((char *)((long)ptrMatch + 1),(char *)inputArray,0);\n            if (matchResult == 0) goto LAB_0011438e;\n            nextPointer = (long **)*currentPointer;\n            if ((long **)*currentPointer == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            matchResult = fnmatch((char *)ptrMatch,(char *)inputArray,0);\n            if ((previousPointer == (long **)0x0) && (matchResult == 0)) {\n              previousPointer = currentPointer;\n              nextPointer = (long **)*currentPointer;\n              if ((long **)*currentPointer == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextPointer = (long **)*currentPointer;\n              if ((long **)*currentPointer == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        matchResult = strcmp((char *)nextPointer[1],(char *)inputArray);\n        resultPointer = currentPointer;\n        previousPointer = nextPointer;\n        if (matchResult == 0) goto LAB_001143cd;\n      }\n      currentPointer = resultPointer;\n      nextPointer = (long **)*nextPointer;\n      previousPointer = currentPointer;\n    } while (nextPointer != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      currentPointer = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentPointer + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentPointer + 2) = 0;\n      *(uint *)((long)currentPointer + 0x14) = permissions;\n      currentPointer[5] = (long *)0x0;\n      previousPointer = currentPointer;\n      *currentPointer = (long *)DAT_00127900;\n      DAT_00127900 = previousPointer;\n      currentPointer[1] = inputArray;\n      return currentPointer;\n    }\n  }\nLAB_00114212:\n  if (previousPointer == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previousPointer + 2) = 1;\n  return previousPointer;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba",
                "dcgettext",
                "fnmatch",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_function_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "parse_build_attribute_notes_00116490",
                "param_1": "param1",
                "param_2": "noteCount",
                "param_3": "noteArray",
                "param_4": "noteIndex",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag",
                "puVar5": "pointerVar1",
                "iVar6": "counterVar1",
                "lVar7": "loopVar1",
                "uVar8": "var4",
                "in_RAX": "noteType",
                "uVar9": "var5",
                "uVar10": "var6",
                "uVar11": "var7",
                "uVar12": "var8",
                "__ptr": "ptr",
                "uVar13": "var9",
                "unaff_RBX": "noteSize",
                "unaff_RBP": "returnAddr",
                "puVar14": "pointerVar2",
                "puVar15": "pointerVar3",
                "cVar16": "charVar",
                "puVar17": "pointerVar4",
                "puVar18": "pointerVar5",
                "in_R11": "nameSize",
                "unaff_R12": "notePtrArray",
                "puVar19": "pointerVar6",
                "unaff_R13": "namePtr",
                "__nmemb": "count",
                "unaff_R14": "messageArray",
                "puVar20": "pointerVar7",
                "bVar21": "byteVar",
                "iVar22": "counterVar2",
                "unaff_retaddr": "returnAddress",
                "param_7": "result",
                "param_8": "flag1",
                "param_9": "flag2",
                "in_stack_00000020": "size",
                "in_stack_00000028": "noteArrayPtr",
                "in_stack_00000030": "ptr2",
                "in_stack_00000038": "flag3",
                "in_stack_00000040": "flag4",
                "in_stack_00000048": "stringArrayPtr"
            },
            "code": "\nulong parseBuildAttributeNotes_00116490(undefined8 param1,ulong noteCount,ulong noteArray,long noteIndex)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *pointerVar1;\n  int counterVar1;\n  long loopVar1;\n  undefined8 var4;\n  ulong noteType;\n  ulong var5;\n  ulong var6;\n  ulong var7;\n  ulong var8;\n  undefined *ptr;\n  ulong var9;\n  ulong noteSize;\n  ulong returnAddr;\n  ulong *pointerVar2;\n  undefined *pointerVar3;\n  char charVar;\n  undefined *pointerVar4;\n  undefined *pointerVar5;\n  ulong nameSize;\n  ulong *notePtrArray;\n  ulong *pointerVar6;\n  ulong namePtr;\n  size_t count;\n  undefined8 *messageArray;\n  ulong *pointerVar7;\n  byte byteVar;\n  int counterVar2;\n  ulong returnAddress;\n  ulong result;\n  uint flag1;\n  ulong flag2;\n  ulong size;\n  ulong *noteArrayPtr;\n  undefined *ptr2;\n  uint flag3;\n  uint flag4;\n  undefined8 *stringArrayPtr;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  loopVar1 = noteIndex;\n  var6 = returnAddr;\n  var9 = namePtr;\n  if (noteType == 0) {\n    if (noteCount == 0x100) {\n      notePtrArray[7] = returnAddress;\n      var7 = returnAddress;\nLAB_001164af:\n      var5 = namePtr;\n      var9 = namePtr;\n      returnAddress = var7;\n    }\n    else {\n      notePtrArray[7] = flag2;\nLAB_0011669e:\n      var6 = returnAddr;\n      var5 = returnAddr;\n    }\nLAB_001164bb:\n    notePtrArray[8] = var5;\n    if (*(char *)((notePtrArray[3] - 1) + noteArray) != '\\0') {\n      loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointerVar6 = notePtrArray + 9;\n    if (0xb < noteSize) {\n      var5 = (**(code **)(messageArray[1] + 0x40))(loopVar1);\n      *pointerVar6 = var5;\n      var5 = (**(code **)(messageArray[1] + 0x40))(loopVar1 + 4);\n      notePtrArray[10] = var5;\n      noteCount = (**(code **)(messageArray[1] + 0x40))(loopVar1 + 8);\n      noteArray = *pointerVar6;\n      notePtrArray[0xb] = noteCount;\n      noteType = notePtrArray[10];\n      var5 = noteArray + 3 & 0xfffffffffffffffc;\n      notePtrArray[0xf] = var5;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteCount - 0x100) {\n        loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var7 = var5 + noteType + 0xc;\n      if (noteSize < var7) {\n        loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteArray < 2) {\n        loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      notePtrArray[0xc] = loopVar1 + 0xc;\n      nameSize = loopVar1 + 0xc + var5;\n      notePtrArray[0xd] = nameSize;\n      noteSize = noteSize + (-0xc - (var5 + noteType));\n      noteIndex = loopVar1 + var7;\n      returnAddr = var6;\n      notePtrArray = pointerVar6;\n      namePtr = var9;\n      if (noteArray != 2) {\n        if (*(char *)(loopVar1 + 0xc) == '$') {\n          if ((*(char *)(loopVar1 + 0xd) == '\\x01') && (*(char *)(loopVar1 + 0xe) == '1')) {\n            var6 = parseBuildAttributeNotes_00116490();\n            return var6;\n          }\n        }\n        else if ((((4 < noteArray) && (*(char *)(loopVar1 + 0xc) == 'G')) &&\n                 (*(char *)(loopVar1 + 0xd) == 'A')) &&\n                ((*(char *)(loopVar1 + 0xe) == '$' && (*(char *)(loopVar1 + 0xf) == '\\x01')))) {\n          if (*(char *)(loopVar1 + 0x10) == '2') {\n            var6 = parseBuildAttributeNotes_00116490();\n            return var6;\n          }\n          if (*(char *)(loopVar1 + 0x10) == '3') {\n            var6 = parseBuildAttributeNotes_00116490();\n            return var6;\n          }\n          loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (noteSize != 0) {\n      loopVar1 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag3 | flag4 | flag1) == 0) {\n      var1 = *messageArray;\n      var2 = *stringArrayPtr;\n      var4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var4,var1,var2);\nLAB_0011671b:\n      count = ((long)pointerVar6 - (long)noteArrayPtr >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteArrayPtr,count,0x48,compare_memory_0011a1b0);\n      for (pointerVar2 = noteArrayPtr; pointerVar2 < pointerVar6; pointerVar2 = pointerVar2 + 9) {\n        var6 = pointerVar2[2];\n        if (var6 != 0) {\n          var9 = pointerVar2[7];\n          var5 = pointerVar2[8];\n          pointerVar7 = pointerVar2;\n          counterVar2 = 0;\n          if (var9 == var5) {\n            pointerVar2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointerVar1 = pointerVar7;\n                pointerVar7 = pointerVar1 + -9;\n                if (pointerVar7 < noteArrayPtr) goto LAB_001167f5;\n                var7 = pointerVar1[-7];\n              } while (var7 == 0);\n              if ((*pointerVar7 != *pointerVar2) ||\n                 (counterVar1 = memcmp((void *)pointerVar1[-6],(void *)pointerVar2[3],*pointerVar2), counterVar1 != 0))\n              break;\n              var3 = pointerVar1[-2];\n              var8 = pointerVar1[-1];\n              if (var9 == var3) {\n                if (var5 == var8) {\n                  pointerVar2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var5 <= var8) {\n                  pointerVar2[2] = 0;\n                  break;\n                }\n                if (var8 < var9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var8) ||\n                     (var9 <= (var8 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((var6 == 0x101) == (var7 == 0x101)) {\n                  if (var8 <= var5) {\n                    var8 = var5;\n                  }\n                  if (var3 < var9) {\n                    var9 = var3;\n                  }\n                  pointerVar1[-1] = var8;\n                  pointerVar1[-2] = var9;\n                  pointerVar2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var9) goto LAB_001167a6;\n                if (var8 < var9) goto LAB_0010852c;\n                if (var5 < var9) {\n                  if ((0xfffffffffffffff0 < var5) || (var3 <= (var5 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var5 != var8) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = counterVar2 < 0x11;\n              counterVar2 = counterVar2 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteArrayPtr,count,0x48,compare_records_0011a250);\n      ptr = (undefined *)xmalloc(size * 2);\n      result = 0;\n      flag2 = 0;\n      pointerVar5 = ptr;\n      for (pointerVar2 = noteArrayPtr; pointerVar2 < pointerVar6; pointerVar2 = pointerVar2 + 9) {\n        if (pointerVar2[2] != 0) {\n          pointerVar4 = pointerVar5 + 4;\n          pointerVar3 = pointerVar5 + 0xc;\n          if ((pointerVar2[7] == flag2) && (pointerVar2[8] == result)) {\n            (**(code **)(messageArray[1] + 0x50))(*pointerVar2,pointerVar5);\n            (**(code **)(messageArray[1] + 0x50))(0,pointerVar4);\n            (**(code **)(messageArray[1] + 0x50))(pointerVar2[2],pointerVar5 + 8);\n            var9 = pointerVar2[6];\n            var6 = *pointerVar2;\n            pointerVar5 = (undefined *)pointerVar2[3];\n            pointerVar4 = pointerVar3;\n            for (var5 = var6; var5 != 0; var5 = var5 - 1) {\n              *pointerVar4 = *pointerVar5;\n              pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n              pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n            }\n            if (var6 < var9) {\n              for (loopVar1 = var9 - var6; loopVar1 != 0; loopVar1 = loopVar1 + -1) {\n                *pointerVar4 = 0;\n                pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            pointerVar5 = pointerVar3 + var9;\n          }\n          else {\n            (**(code **)(messageArray[1] + 0x50))();\n            if (*(int *)(messageArray[1] + 8) == 5) {\n              charVar = (*(char *)(messageArray[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(messageArray[1] + 0x50))(charVar,pointerVar4);\n            (**(code **)(messageArray[1] + 0x50))(pointerVar2[2],pointerVar5 + 8);\n            var6 = *pointerVar2;\n            pointerVar5 = (undefined *)pointerVar2[3];\n            pointerVar4 = pointerVar3;\n            for (var9 = var6; var9 != 0; var9 = var9 - 1) {\n              *pointerVar4 = *pointerVar5;\n              pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n              pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n            }\n            var9 = pointerVar2[6];\n            if (var6 < var9) {\n              for (loopVar1 = var9 - var6; loopVar1 != 0; loopVar1 = loopVar1 + -1) {\n                *pointerVar4 = 0;\n                pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            loopVar1 = messageArray[1];\n            pointerVar3 = pointerVar3 + var9;\n            pointerVar5 = pointerVar3 + 8;\n            if ((*(int *)(loopVar1 + 8) == 5) && (*(char *)(messageArray[0x22] + 4) == '\\x02')) {\n              (**(code **)(loopVar1 + 0x38))(pointerVar2[7],pointerVar3);\n              (**(code **)(messageArray[1] + 0x38))(pointerVar2[8],pointerVar5);\n              pointerVar5 = pointerVar3 + 0x10;\n            }\n            else {\n              (**(code **)(loopVar1 + 0x50))(pointerVar2[7],pointerVar3);\n              (**(code **)(messageArray[1] + 0x50))(pointerVar2[8],pointerVar3 + 4);\n            }\n            flag2 = pointerVar2[7];\n            result = pointerVar2[8];\n          }\n        }\n      }\n      var9 = (long)pointerVar5 - (long)ptr;\n      var6 = var9;\n      pointerVar5 = ptr;\n      if (var9 < size) {\n        for (; size = var9, var6 != 0; var6 = var6 - 1) {\n          *ptr2 = *pointerVar5;\n          pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n          ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(noteArrayPtr);\n      return size;\n    }\n    if (((flag4 | flag1) == 0) || (flag3 == 0)) {\n      if (flag4 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    loopVar1 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      var7 = (**(code **)(messageArray[1] + 0x28))(nameSize);\n      var5 = (**(code **)(messageArray[1] + 0x28))(notePtrArray[4] + 8);\n      if (var5 < var7) {\n        var7 = var5;\n      }\nLAB_00116631:\n      if (notePtrArray[2] == 0x100) {\n        if (var7 == 0) {\n          var7 = returnAddress;\n        }\n        noteArray = *notePtrArray;\n        notePtrArray[7] = var7;\n        var9 = var5;\n        returnAddress = var7;\n        if (var5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var7 == 0) {\n          var7 = flag2;\n        }\n        noteArray = *notePtrArray;\n        notePtrArray[7] = var7;\n        var6 = var5;\n        flag2 = var7;\n        if (var5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        var7 = (**(code **)(messageArray[1] + 0x40))(nameSize);\n        var5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        var6 = parse_build_attribute_notes_001086af();\n        return var6;\n      }\n    }\n    loopVar1 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (loopVar1 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,messageArray,stringArrayPtr,loopVar1);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "targetsMessage",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *targetsMessage;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    targetsMessage = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,targetsMessage);\n  }\n  else {\n    targetsMessage = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,targetsMessage,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "dcgettext",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "validate_function_0010be1a",
                "param_1": "function_info",
                "param_2": "new_address",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "lVar1": "block_info",
                "uVar2": "error_message",
                "pcVar3": "default_error_message"
            },
            "code": "\n\n\nundefined  [16] validate_function_0010be1a(long function_info,undefined8 new_address,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  long block_info;\n  undefined8 error_message;\n  char *default_error_message;\n  undefined auVar4 [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (block_info = *(long *)(function_info + 0x20), block_info == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    default_error_message = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(block_info + 8) == 0) {\n      *(undefined8 *)(block_info + 0x20) = new_address;\n      error_message = CONCAT71((int7)((ulong)block_info >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    default_error_message = \"debug_end_function: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,default_error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  auVar4._8_8_ = unused_param_2;\n  auVar4._0_8_ = error_message;\n  return auVar4;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "validate_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_001083b7",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "byte_offset",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "data_structure_ptr",
                "lVar2": "counter",
                "puVar3": "curr_ptr",
                "bVar4": "loop_index",
                "auVar5": "result_structure"
            },
            "code": "\nundefined  [16] initialize_data_structure_00113da9(byte byte_offset,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *data_structure_ptr;\n  long counter;\n  undefined8 *curr_ptr;\n  byte loop_index;\n  undefined result_structure [16];\n  \n  loop_index = 0;\n  result_structure._0_8_ = initialize_data_00112904(8 - (uint)byte_offset);\n  if (result_structure._0_8_ != 0) {\n    data_structure_ptr = (undefined8 *)xmalloc(0x28);\n    curr_ptr = data_structure_ptr + 1;\n    for (counter = 8; counter != 0; counter = counter + -1) {\n      *(undefined4 *)curr_ptr = 0;\n      curr_ptr = (undefined8 *)((long)curr_ptr + (ulong)loop_index * -8 + 4);\n    }\n    *data_structure_ptr = param3;\n    *(undefined8 **)(result_structure._0_8_ + 0x10) = data_structure_ptr;\n  }\n  result_structure._8_8_ = param4;\n  return result_structure;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2",
                "param_2[7]": "record2_field7",
                "param_1[7]": "record1_field7",
                "param_2[8]": "record2_field8",
                "param_1[8]": "record1_field8",
                "param_1[3]": "record1_field3",
                "param_2[3]": "record2_field3"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2[2]) {\n    if (record2_field7 <= record1_field7) {\n      if (record1_field7 <= record2_field7) {\n        if (record2_field8 < record1_field8) {\n          return -1;\n        }\n        if (record2_field8 <= record1_field8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_field3 + 3) != *(char *)(record2_field3 + 3)) {\n              return (int)*(char *)(record1_field3 + 3) - (int)*(char *)(record2_field3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "data",
                "param_2": "entry",
                "param_3": "flag",
                "param_4": "isZero",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "resizedData",
                "sVar3": "length",
                "uVar4": "allocatedMemory",
                "uVar5": "isResized",
                "local_60": "stringBuffer"
            },
            "code": "\nundefined4 processData_0010a69a(long data,undefined8 entry,int flag,char isZero,uint value)\n\n{\n  undefined4 result;\n  long resizedData;\n  size_t length;\n  undefined8 allocatedMemory;\n  undefined isResized;\n  char stringBuffer [48];\n  \n  if (flag == 0) {\n    stringBuffer[0] = '\\0';\n    isResized = 0;\n    resizedData = 0;\n  }\n  else {\n    resizedData = resize_and_set_data_00109c2e();\n    if (resizedData < 0) {\n      return 0;\n    }\n    isResized = 1;\n    sprintf(stringBuffer,\"%ld=\",resizedData);\n  }\n  length = strlen(stringBuffer);\n  sprintf(stringBuffer + length,\"%c%u\",(ulong)((-(uint)(isZero == '\\0') & 2) + 0x73),(ulong)value);\n  result = create_entry_00109b52(data,stringBuffer,resizedData,isResized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resizedData = *(long *)(data + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(resizedData + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_section_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "currentSection",
                "iVar2": "sectionComparisonResult",
                "iVar3": "sectionIndex",
                "lVar4": "processResult1",
                "lVar5": "processResult2",
                "uVar6": "errorCode",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 processSection_00115b70(char **sectionNames)\n\n{\n  char *currentSection;\n  int sectionComparisonResult;\n  int sectionIndex;\n  long processResult1;\n  long processResult2;\n  undefined8 errorCode;\n  long *sectionList;\n  \n  processResult1 = process_function_00114190(*sectionNames,0,4);\n  if (processResult1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      processResult1 = process_function_00114190(*sectionNames,0,1);\n      processResult2 = process_function_00114190(*sectionNames,0,2);\n      if (processResult1 != 0) {\n        if (processResult2 != 0) {\n          currentSection = *sectionNames;\n          errorCode = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(errorCode,currentSection);\n        }\n        if (processResult1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sectionNames;\n          sectionList = DAT_001279d8;\n          do {\n            sectionIndex = strcmp(currentSection,(char *)sectionList[1]);\n            if (sectionIndex == 0) {\n              errorCode = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(errorCode,currentSection);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (processResult2 == 0)) {\n        return 1;\n      }\n    }\n    sectionIndex = DAT_00127a48;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        currentSection = *sectionNames;\n        sectionComparisonResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((sectionComparisonResult != 0) && (sectionComparisonResult = strcmp(currentSection,\".gnu_debuglink\"), sectionComparisonResult != 0)) {\n          sectionIndex = strcmp(currentSection,\".reloc\");\n          if (sectionIndex != 0) {\n            return 1;\n          }\n          errorCode = process_ebp_value_0010829e();\n          return errorCode;\n        }\n      }\n      if (sectionIndex == 5) {\n        errorCode = check_string_length_00113ede(sectionNames);\n        return errorCode;\n      }\n      if (sectionIndex == 4) {\n        return 0;\n      }\n    }\n    if (sectionIndex == 6) {\n      errorCode = check_and_invert_result_001082b3();\n      return errorCode;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "process_section_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_binary_file_00116030",
                "param_1": "arguments",
                "param_2": "file_size",
                "plVar1": "long_pointer",
                "lVar2": "value",
                "lVar3": "data_1",
                "lVar4": "data_2",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_function",
                "lVar7": "reloc_count",
                "__ptr": "reloc_data_ptr",
                "lVar8": "index",
                "uStack_28": "default_return_value"
            },
            "code": "\n\n\nundefined8 process_binary_file_00116030(undefined8 *arguments,long file_size)\n\n{\n  long *long_pointer;\n  long value;\n  long data_1;\n  long data_2;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_function;\n  void *reloc_data_ptr;\n  long reloc_count;\n  undefined8 extraout_RAX;\n  long index;\n  undefined8 default_return_value;\n  \n  if (*(long *)(file_size + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_function = bfd_get_reloc_upper_bound();\n  if (fwrite_function < 0) {\n    if ((fwrite_function != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_function != 0) {\n    reloc_data_ptr = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(arguments,file_size,reloc_data_ptr);\n    data_2 = _DAT_00128680;\n    data_1 = _DAT_00128568;\n    fwrite_function = _fwrite;\n    if (reloc_count < 0) {\n      print_error_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        long_pointer = **(long ***)((long)reloc_data_ptr + index * 8);\n        if ((((long_pointer != (long *)0x0) && (value = *long_pointer, value != 0)) && (value != fwrite_function)) &&\n           ((value != data_2 && (value != data_1)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_data_ptr);\n    return extraout_RAX;\n  }\n  return default_return_value;\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_001083b7",
                "fwrite",
                "FUN_0011a110",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_file_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "strings",
                "__s": "current_string",
                "sVar1": "string_length",
                "uVar2": "string_comparison_result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **strings)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 string_comparison_result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  current_string = *strings;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      string_comparison_result = compare_strings_00113fb0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return string_comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record_1",
                "param_2": "record_2",
                "lVar1": "size_record_1",
                "lVar2": "size_record_2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record_1,long *record_2)\n\n{\n  long size_record_1;\n  long size_record_2;\n  int result;\n  uint flag;\n  \n  size_record_1 = *record_1;\n  size_record_2 = *record_2;\n  flag = *(uint *)(size_record_2 + 0x24) & 0x102;\n  if ((*(uint *)(size_record_1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(size_record_1 + 0x38) <= *(ulong *)(size_record_2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(size_record_2 + 0x38) <= *(ulong *)(size_record_1 + 0x38)) {\n      if (*(ulong *)(size_record_2 + 0x40) < *(ulong *)(size_record_1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(size_record_2 + 0x40) <= *(ulong *)(size_record_1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(size_record_1 + 0x18) <= *(uint *)(size_record_2 + 0x18)) {\n            return -(uint)(*(uint *)(size_record_1 + 0x18) < *(uint *)(size_record_2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "validate_and_initialize_data_0010c892",
                "param_1": "data",
                "param_2": "ptr",
                "cVar1": "result",
                "lVar2": "data_ptr",
                "lVar3": "tag_type",
                "uVar4": "returnValue",
                "puVar5": "ptr_list",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 validate_and_initialize_data_0010c892(undefined8 data,long ptr)\n\n{\n  char result;\n  long data_ptr;\n  long tag_type;\n  undefined8 returnValue;\n  undefined8 *ptr_list;\n  int kind;\n  \n  if (*(char *)(ptr + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr_list = *(undefined8 **)(ptr + 0x1a0); ptr_list != (undefined8 *)0x0;\n        ptr_list = (undefined8 *)*ptr_list) {\n      kind = *(int *)(ptr_list + 2);\n      tag_type = ptr_list[1];\n      if (kind != 0) {\n        if (tag_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        ptr_list[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tag_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      data_ptr = initialize_data_00112904(kind,0);\n      if (data_ptr == 0) goto LAB_0010c910;\n      tag_type = validate_debug_tag_type_0010c6be(data,tag_type,data_ptr);\n      ptr_list[3] = tag_type;\n      if (tag_type == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = cleanup_and_process_records_0010c1c6();\n    if (result != '\\0') {\n      result = validate_function_0010be1a(data,*(undefined8 *)(ptr + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(ptr + 0x60) = 0;\n        *(undefined8 *)(ptr + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "fprintf",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "validate_and_initialize_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "data1",
                "param_2": "data2",
                "puVar1": "allocatedData"
            },
            "code": "\nvoid initializeData_00112904(undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *allocatedData;\n  \n  allocatedData = (undefined4 *)xmalloc(0x18);\n  *allocatedData = data1;\n  allocatedData[1] = data2;\n  *(undefined (*) [16])(allocatedData + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c6be",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113da9",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113d6e",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "in_RAX": "returnValue",
                "auVar2": "resultArray",
                "iVar1": "comparisonResult"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined resultArray [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  resultArray._1_7_ = 0;\n  resultArray[0] = comparisonResult == 0;\n  resultArray._8_8_ = returnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00115a90",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0011173a",
                "FUN_00114190",
                "FUN_0010afd5",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_0010ee3f",
                "FUN_00115f50",
                "FUN_0010b0fa",
                "FUN_0010554f",
                "FUN_00108898",
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "process_function_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "counter"
            },
            "code": "\nvoid processFunction_0011a390(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionList;\n  uint counter;\n  \n  functionList = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      counter = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)counter) {\n        currentIndex = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)functionList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)functionList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[currentIndex])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_function_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "process_and_hash_string_0010e842",
                "param_1": "hash_value",
                "param_2": "input_string",
                "param_3": "integer",
                "param_4": "data_pointer",
                "__s": "allocated_string",
                "sVar1": "string_length",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] process_and_hash_string_0010e842(undefined8 hash_value,char *input_string,undefined8 integer,undefined8 data_pointer)\n\n{\n  size_t string_length;\n  char *allocated_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  allocated_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(allocated_string,\"%s:c=i%ld\",input_string,integer);\n  result._0_4_ = process_bfd_hash_0010e2f0(hash_value,0x80,0,0,allocated_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(allocated_string);\n  }\n  result._8_8_ = data_pointer;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_hash_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_and_return_00113cb9",
                "param_1": "input_value",
                "lVar1": "data_ptr"
            },
            "code": "\nlong initialize_data_and_return_00113cb9(long input_value)\n\n{\n  long data_ptr;\n  \n  if (input_value != 0) {\n    data_ptr = initialize_data_00112904(0xe,0);\n    if (data_ptr == 0) {\n      data_ptr = 0;\n    }\n    else {\n      *(long *)(data_ptr + 0x10) = input_value;\n    }\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_and_return_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "format_and_process_item_0010eafe",
                "param_1": "item_info",
                "param_2": "base_string",
                "param_3": "flag",
                "__s": "next_item",
                "sVar2": "base_string_length",
                "sVar3": "next_item_length",
                "__s_00": "formatted_string",
                "uVar1": "result"
            },
            "code": "\nundefined4 format_and_process_item_0010eafe(long item_info,char *base_string,char flag)\n\n{\n  undefined4 result;\n  char *next_item;\n  size_t base_string_length;\n  size_t next_item_length;\n  char *formatted_string;\n  \n  if ((*(int *)(item_info + 0x1f8) == 0) && (*(long *)(item_info + 0x1e8) == -1)) {\n    next_item = (char *)extract_next_item_00109b2f();\n    base_string_length = strlen(base_string);\n    next_item_length = strlen(next_item);\n    formatted_string = (char *)xmalloc(base_string_length + 3 + next_item_length);\n    sprintf(formatted_string,\"%s:%c%s\",base_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),next_item);\n    *(undefined8 *)(item_info + 0x1e8) = *(undefined8 *)(item_info + 0x10);\n    result = process_bfd_hash_0010e2f0(item_info,0x24,0,0,formatted_string);\n    if ((char)result != '\\0') {\n      free(formatted_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_process_item_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "param_1": "input"
            },
            "code": "\nvoid initialize_data_00113df2(undefined4 input)\n\n{\n  initialize_data_00113df2_00112904(4,input);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "create_entry_from_items_0010a377",
                "param_1": "argument",
                "cVar1": "itemFlag",
                "__s": "firstItem",
                "__s_00": "secondItem",
                "sVar3": "firstItemLength",
                "sVar4": "secondItemLength",
                "__s_01": "combinedItems",
                "uVar2": "result",
                "uVar5": "defaultFlag"
            },
            "code": "\nundefined4 createEntryFromItems_0010a377(long argument)\n\n{\n  char itemFlag;\n  undefined4 result;\n  char *firstItem;\n  char *secondItem;\n  size_t firstItemLength;\n  size_t secondItemLength;\n  char *combinedItems;\n  undefined defaultFlag;\n  \n  defaultFlag = 1;\n  itemFlag = *(char *)(*(long *)(argument + 0x60) + 0x1c);\n  firstItem = (char *)extract_next_item_00109b2f();\n  if (itemFlag == '\\0') {\n    defaultFlag = *(undefined *)(*(long *)(argument + 0x60) + 0x1c);\n  }\n  secondItem = (char *)extract_next_item_00109b2f(argument);\n  firstItemLength = strlen(firstItem);\n  secondItemLength = strlen(secondItem);\n  combinedItems = (char *)xmalloc(firstItemLength + 3 + secondItemLength);\n  sprintf(combinedItems,\"@%s,%s\",secondItem,firstItem);\n  free(secondItem);\n  free(firstItem);\n  result = create_entry_00109b52(argument,combinedItems,0,defaultFlag,0);\n  if ((char)result != '\\0') {\n    free(combinedItems);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_entry_from_items_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_and_process_items_0010d882",
                "param_1": "input_data",
                "param_2": "input_strings",
                "param_3": "output_data",
                "param_4": "error_flag",
                "iVar1": "iteration_count",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_string",
                "uVar6": "unsigned_int_value",
                "bVar7": "iteration_check",
                "local_50": "item_counter",
                "local_4c": "error_code",
                "local_48": "unsigned_int_param",
                "local_44": "unsigned_int_param_2",
                "local_40": "item_values"
            },
            "code": "\nundefined8 parse_and_process_items_0010d882(long input_data,char **input_strings,long *output_data,undefined *error_flag)\n\n{\n  int iteration_count;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong unsigned_int_value;\n  bool iteration_check;\n  uint item_counter;\n  undefined4 error_code;\n  uint unsigned_int_param;\n  int unsigned_int_param_2;\n  undefined8 item_values [2];\n  \n  current_string = *input_strings;\n  error_code = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *error_flag = 0;\n  }\n  item_counter = 0;\n  while( true ) {\n    current_string = *input_strings;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_strings = current_string + 1;\n      if (current_char == 'T') {\n        unsigned_int_param_2 = 1;\n      }\n      else {\n        current_char = parse_unsigned_int_00108ea1(input_strings,&unsigned_int_param_2);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_unsigned_int_00108ea1(input_strings,&unsigned_int_param);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= unsigned_int_param)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_string);\n        return 0;\n      }\n      unsigned_int_value = (ulong)unsigned_int_param;\n      while (iteration_count = unsigned_int_param_2 + -1, iteration_check = unsigned_int_param_2 != 0, unsigned_int_param_2 = iteration_count, iteration_check) {\n        item_values[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + unsigned_int_value * 0x10);\n        current_char = process_items_0010d7d4(input_data,item_values,output_data,&item_counter,&error_code);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = process_items_0010d7d4(input_data,input_strings,output_data,&item_counter,&error_code);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)item_counter * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_string = current_string + 1;\n  *input_strings = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "xmalloc",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_process_items_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "arrayPointer",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "puVar1": "memoryPointer",
                "pauVar2": "array",
                "lVar3": "loopCounter",
                "puVar4": "currentPointer",
                "bVar5": "byteCounter"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**arrayPointer) [16],undefined8 value,undefined4 size,undefined4 flag)\n\n{\n  undefined4 *memoryPointer;\n  undefined (*array) [16];\n  long loopCounter;\n  undefined4 *currentPointer;\n  byte byteCounter;\n  \n  byteCounter = 0;\n  memoryPointer = (undefined4 *)xmalloc(0x28);\n  currentPointer = memoryPointer;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPointer = 0;\n    currentPointer = currentPointer + (ulong)byteCounter * -2 + 1;\n  }\n  array = *arrayPointer;\n  *(undefined8 *)(memoryPointer + 2) = value;\n  memoryPointer[5] = size;\n  memoryPointer[6] = flag;\n  if (array == (undefined (*) [16])0x0) {\n    array = (undefined (*) [16])xmalloc(0x10);\n    *array = ZEXT816(0);\n    *arrayPointer = array;\n    *(undefined (**) [16])(*array + 8) = array;\n  }\n  **(undefined8 **)(*array + 8) = memoryPointer;\n  *(undefined4 **)(*array + 8) = memoryPointer;\n  return memoryPointer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "unit",
                "param_2": "record",
                "param_3": "debugInfo",
                "uVar1": "errorMessage",
                "puVar2": "currentRecord",
                "uVar3": "index",
                "puVar4": "newRecord",
                "lVar5": "count",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long unit,undefined8 record,undefined8 debugInfo)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecord;\n  ulong index;\n  undefined4 *newRecord;\n  long count;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(unit + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    count = *(long *)(unit + 0x28);\n    if ((count != 0) && (*(long *)(count + 8) == *(long *)(unit + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(count + 0x10 + index * 8) == -1) {\n          currentRecord = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(count + 0x10 + (long)currentRecord * 8) = record;\n          *(undefined8 *)(count + 0x60 + (long)currentRecord * 8) = debugInfo;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecord = (undefined4 *)xmalloc(0xb0);\n    ptr = newRecord;\n    for (count = 0x2c; count != 0; count = count + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(unit + 0x10);\n    *(undefined8 *)(newRecord + 4) = record;\n    *(undefined8 *)(newRecord + 2) = errorMessage;\n    *(undefined8 *)(newRecord + 0x18) = debugInfo;\n    ptr = newRecord + 6;\n    for (count = 0x48; count != 0; count = count + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    currentRecord = *(undefined8 **)(unit + 0x28);\n    if (currentRecord == (undefined8 *)0x0) {\n      currentRecord = *(undefined8 **)(unit + 8);\n      currentRecord[2] = newRecord;\n    }\n    else {\n      *currentRecord = newRecord;\n    }\n    *(undefined4 **)(unit + 0x28) = newRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecord >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "stringToMatch",
                "__pattern": "patternStr",
                "iVar1": "matchResult"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **stringToMatch)\n\n{\n  char *patternStr;\n  int matchResult;\n  \n  patternStr = *pattern;\n  if (*patternStr == '!') {\n    matchResult = fnmatch(patternStr + 1,*stringToMatch,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringToMatch + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(patternStr,*stringToMatch,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringToMatch + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "debug_record_parameter_0010bd62",
                "param_1": "function_address",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "param_5_value",
                "puVar1": "current_function",
                "uVar2": "error_message",
                "puVar3": "new_parameter",
                "puVar7": "temp_parameter",
                "lVar5": "temp_value",
                "puVar6": "temp_ptr",
                "bVar8": "is_zero"
            },
            "code": "\n\n\nundefined8\ndebug_record_parameter_0010bd62(long function_address,long param_2_value,long param_3_value,undefined4 param_4_value,undefined8 param_5_value)\n\n{\n  undefined8 *current_function;\n  undefined8 error_message;\n  undefined4 *new_parameter;\n  undefined8 *puVar4;\n  long temp_value;\n  undefined8 *temp_ptr;\n  undefined4 *temp_parameter;\n  byte is_zero;\n  \n  is_zero = 0;\n  if (param_2_value == 0) {\n    return 0;\n  }\n  if (param_3_value != 0) {\n    if ((*(long *)(function_address + 8) != 0) && (*(long *)(function_address + 0x18) != 0)) {\n      new_parameter = (undefined4 *)xmalloc(0x28);\n      temp_parameter = new_parameter;\n      for (temp_value = 10; temp_value != 0; temp_value = temp_value + -1) {\n        *temp_parameter = 0;\n        temp_parameter = temp_parameter + (ulong)is_zero * -2 + 1;\n      }\n      temp_value = *(long *)(function_address + 0x18);\n      *(long *)(new_parameter + 2) = param_2_value;\n      *(long *)(new_parameter + 4) = param_3_value;\n      new_parameter[6] = param_4_value;\n      current_function = *(undefined8 **)(temp_value + 8);\n      *(undefined8 *)(new_parameter + 8) = param_5_value;\n      temp_ptr = (undefined8 *)(temp_value + 8);\n      while (puVar4 = current_function, puVar4 != (undefined8 *)0x0) {\n        temp_ptr = puVar4;\n        current_function = (undefined8 *)*puVar4;\n      }\n      *temp_ptr = new_parameter;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "debug_record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_and_extract_archive_files_00104ea2",
                "ppcVar6": "fileHandler",
                "cVar1": "success",
                "iVar2": "architecture",
                "pcVar7": "currentDir",
                "pcVar10": "archiveMember",
                "unaff_retaddr": "returnAddress",
                "param_7": "sourceDir",
                "param_8": "bytesRead",
                "param_9": "tempDir",
                "param_10": "archiveFile",
                "param_11": "openFlags",
                "param_18": "permissions",
                "param_19": "fileSize",
                "bVar17": "isNegativeSize",
                "unaff_EBX": "statError",
                "unaff_RBP": "fileStat",
                "pcVar15": "pathSegment",
                "unaff_R12": "targetDir",
                "puVar8": "tempDirStruct",
                "piVar9": "errorCode",
                "uVar11": "errorMessage",
                "lVar12": "remainingSize",
                "pcVar13": "closeFunction",
                "lVar14": "readSize",
                "unaff_R15": "archiveFiles",
                "lVar5": "readResult",
                "unaff_R13": "tempDirs",
                "ppcVar3": "formatHandler"
            },
            "code": "\nvoid copyAndExtractArchiveFiles_00104ea2(void)\n\n{\n  char success;\n  int architecture;\n  char **formatHandler;\n  void *pvVar4;\n  long readResult;\n  char **fileHandler;\n  char *currentDir;\n  undefined8 *tempDirStruct;\n  int *errorCode;\n  char *archiveMember;\n  undefined8 errorMessage;\n  long remainingSize;\n  code *closeFunction;\n  long readSize;\n  int statError;\n  stat *fileStat;\n  char *pathSegment;\n  stat *psVar16;\n  char *targetDir;\n  undefined8 *tempDirs;\n  char **archiveFiles;\n  byte isNegativeSize;\n  undefined8 returnAddress;\n  undefined8 *sourceDir;\n  long *bytesRead;\n  char *tempDir;\n  undefined8 *archiveFile;\n  undefined8 openFlags;\n  undefined8 in_stack_00000030;\n  uint permissions;\n  long fileSize;\n  \n  isNegativeSize = 0;\ncode_r0x00104ea2:\n  fileHandler = (char **)bfd_openw(targetDir,openFlags);\n  if (fileHandler == (char **)0x0) {\nLAB_00104e80:\n    print_error_message_001126c0(targetDir,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    success = FUNC_00114e50(archiveFiles,fileHandler,returnAddress);\n    if (success == '\\0') {\n      architecture = bfd_get_arch(archiveFiles);\n      if (architecture == 0) goto LAB_00104d75;\n      success = bfd_close_all_done(fileHandler);\n      if (success != '\\0') goto LAB_00104ec9;\n      print_error_message_001126c0(targetDir,0,0,0);\n      goto LAB_00104ec9;\n    }\n    success = bfd_close(fileHandler);\n    fileHandler = archiveFiles;\n    if (success == '\\0') {\n      print_error_message_001126c0(targetDir,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (statError == 0)) {\n      set_file_timestamp_0011a350(targetDir,fileStat);\n    }\n    remainingSize = bfd_openr(targetDir,openFlags);\n    tempDirs[2] = remainingSize;\n    *bytesRead = remainingSize;\n    bytesRead = (long *)(remainingSize + 0xf0);\n    archiveFiles = (char **)bfd_openr_next_archived_file(archiveFile,fileHandler);\n    bfd_close(fileHandler);\n    while ((DAT_00127a40 == 0 && (archiveFiles != (char **)0x0))) {\n      archiveMember = *archiveFiles;\n      currentDir = archiveMember;\n      if (*archiveMember == '/') {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(errorMessage,archiveMember);\n        goto LAB_00104e93;\n      }\n      while (*currentDir != '\\0') {\n        pathSegment = currentDir;\n        if ((*currentDir == '.') && (pathSegment = currentDir + 1, currentDir[1] == '.')) {\n          pathSegment = currentDir + 2;\n          if ((currentDir[2] == '\\0') || (currentDir[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathSegment != '\\0' && (*pathSegment != '/')); pathSegment = pathSegment + 1) {\n        }\n        currentDir = pathSegment;\n        if (*pathSegment == '/') {\n          extract_and_copy_archive_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      targetDir = (char *)concat(tempDir,&DAT_0011b47d);\n      architecture = stat(targetDir,fileStat);\n      tempDirStruct = tempDirs;\n      if (-1 < architecture) {\n        remainingSize = create_temp_directory_0011a0e0(targetDir);\n        free(targetDir);\n        if (remainingSize == 0) {\n          errorCode = __errno_location();\n          archiveMember = strerror(*errorCode);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(errorMessage,archiveMember);\n          goto LAB_00104e93;\n        }\n        tempDirStruct = (undefined8 *)xmalloc(0x18);\n        archiveMember = *archiveFiles;\n        *tempDirStruct = tempDirs;\n        tempDirStruct[2] = 0;\n        tempDirStruct[1] = remainingSize;\n        targetDir = (char *)concat(remainingSize,&DAT_0011b47d,archiveMember);\n      }\n      statError = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar16 = fileStat;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)isNegativeSize * -8 + 4);\n        }\n        fileHandler = (char **)archiveFiles[0x1d];\n        if ((char **)archiveFiles[0x1d] == (char **)0x0) {\n          fileHandler = archiveFiles;\n        }\n        statError = (**(code **)(fileHandler[1] + 0x1e8))(archiveFiles,fileStat);\n        if (statError != 0) {\n          archiveMember = *archiveFiles;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(errorMessage,archiveMember);\n        }\n      }\n      tempDirs = (undefined8 *)xmalloc(0x18);\n      tempDirs[1] = targetDir;\n      *tempDirs = tempDirStruct;\n      tempDirs[2] = 0;\n      success = bfd_check_format(archiveFiles,1);\n      if (success != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        fileHandler = (char **)bfd_openw(targetDir,*(undefined8 *)archiveFiles[1]);\n        if (fileHandler == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message_001126c0(0,archiveFiles,0,errorMessage);\n      fileHandler = (char **)bfd_openw(targetDir,openFlags);\n      if (fileHandler == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      formatHandler = (char **)archiveFiles[0x1d];\n      if ((char **)archiveFiles[0x1d] == (char **)0x0) {\n        formatHandler = archiveFiles;\n      }\n      architecture = (**(code **)(formatHandler[1] + 0x1e8))(archiveFiles);\n      remainingSize = fileSize;\n      if (architecture == 0) {\n        if (fileSize < 0) {\n          get_concatenated_string_001125fa(archiveFiles);\n          errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(errorMessage);\n        }\n        else {\n          architecture = bfd_seek(archiveFiles,0,0);\n          if (architecture == 0) {\n            if (DAT_001279e9 != '\\0') {\n              archiveMember = *fileHandler;\n              errorMessage = get_concatenated_string_001125fa(archiveFiles);\n              currentDir = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentDir,errorMessage,archiveMember);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingSize == 0) {\n                chmod(*fileHandler,permissions | 0x100);\n                free(pvVar4);\n                success = bfd_close_all_done(fileHandler);\n                fileHandler = archiveFiles;\n                if (success == '\\0') {\n                  print_error_message_001126c0(targetDir,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              readSize = 0x2000;\n              if (remainingSize < 0x2001) {\n                readSize = remainingSize;\n              }\n              readResult = bfd_bread(pvVar4,readSize,archiveFiles);\n              formatHandler = archiveFiles;\n              if ((readSize != readResult) ||\n                 (readResult = bfd_bwrite(pvVar4,readSize,fileHandler), formatHandler = fileHandler, readSize != readResult))\n              break;\n              remainingSize = remainingSize - readSize;\n            }\n            print_error_message_001126c0(0,formatHandler,0,0);\n            free(pvVar4);\n          }\n          else {\n            errorMessage = get_concatenated_string_001125fa(archiveFiles);\n            print_error_0011a110(errorMessage);\n          }\n        }\n      }\n      else {\n        print_error_message_001126c0(0,archiveFiles,0,0);\n      }\n      success = bfd_close_all_done(fileHandler);\n      if (success == '\\0') {\n        print_error_message_001126c0(targetDir,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(targetDir);\n      DAT_00127a40 = 1;\n    }\n    *bytesRead = 0;\n    pvVar4 = (void *)xstrdup(*sourceDir);\n    if (DAT_00127a40 == 0) {\n      closeFunction = bfd_close;\n    }\n    else {\n      closeFunction = bfd_close_all_done;\n    }\n    success = (*closeFunction)(sourceDir);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*archiveFile);\n    success = bfd_close(archiveFile);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempDirs != (undefined8 *)0x0) {\n    if (tempDirs[2] == 0) {\n      rmdir((char *)tempDirs[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirs[1]);\n    }\n    free((void *)tempDirs[1]);\n    tempDirStruct = (undefined8 *)*tempDirs;\n    free(tempDirs);\n    tempDirs = tempDirStruct;\n  }\n  rmdir(tempDir);\n  free(tempDir);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close_all_done",
                "FUN_001125fa",
                "bfd_close",
                "dcgettext",
                "FUN_00104ea2",
                "printf",
                "strerror",
                "rmdir",
                "FUN_001052a2",
                "bfd_check_format",
                "chmod",
                "bfd_bwrite",
                "bfd_close_all_done",
                "FUN_001126c0",
                "bfd_close",
                "FUN_0011a0e0",
                "free",
                "bfd_get_arch",
                "bfd_seek",
                "xstrdup",
                "bfd_openr_next_archived_file",
                "unlink",
                "FUN_0011a110",
                "bfd_openw",
                "xmalloc",
                "bfd_bread",
                "FUN_00114b84",
                "__errno_location",
                "bfd_openr",
                "FUN_0011a350",
                "stat",
                "concat",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_and_extract_archive_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_and_allocate_00113ce0",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "undefined_param",
                "lVar1": "data_initialized",
                "plVar2": "allocated_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitialize_and_allocate_00113ce0(long data_ptr,long value,undefined undefined_param,undefined8 param_4,undefined8 param_5)\n\n{\n  long data_initialized;\n  long *allocated_ptr;\n  undefined result [16];\n  \n  if (data_ptr != 0) {\n    data_initialized = initialize_data_00112904(0xd,0);\n    if (data_initialized != 0) {\n      allocated_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_ptr + 0x11) = 0;\n      *allocated_ptr = data_ptr;\n      *(undefined4 *)((long)allocated_ptr + 0x14) = 0;\n      allocated_ptr[1] = value;\n      *(undefined *)(allocated_ptr + 2) = undefined_param;\n      *(long **)(data_initialized + 0x10) = allocated_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  data_initialized = 0;\nLAB_00113d2f:\n  result._8_8_ = param_5;\n  result._0_8_ = data_initialized;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "bufferInfo",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "iVar1": "errorFlag",
                "uVar2": "errorMessage",
                "uVar3": "domain",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 domain;\n  size_t bytesRead;\n  FILE *file;\n  long bufferInfo;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferInfo + 0x20) + startOffset),1,endOffset - startOffset,\n                  file);\n    errorFlag = ferror(file);\n    if (errorFlag != 0) {\n      domain = *(undefined8 *)(bufferInfo + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,domain);\n    }\n    startOffset = startOffset + bytesRead;\n    errorFlag = feof(file);\n    if (errorFlag != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      domain = xrealloc(*(undefined8 *)(bufferInfo + 0x20),endOffset);\n      *(undefined8 *)(bufferInfo + 0x20) = domain;\n    }\n  }\n  *(long *)(bufferInfo + 0x18) = startOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "fclose",
                "dcgettext",
                "FUN_00114dc7",
                "ferror",
                "xrealloc",
                "feof",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "decompress_and_print_bfd_data_00119f70",
                "param_1": "header_data",
                "param_2": "bfd_data",
                "uVar1": "format_version",
                "cVar2": "format_set_flag",
                "iVar3": "arch_mach_value",
                "uVar4": "header_endianness",
                "uVar5": "data_endianness",
                "__format": "output_format",
                "lVar6": "memory_size",
                "uVar7": "printable_arch_mach"
            },
            "code": "\nundefined4 decompress_and_print_bfd_data_00119f70(undefined8 *header_data,undefined8 *bfd_data)\n\n{\n  undefined4 format_version;\n  char format_set_flag;\n  int arch_mach_value;\n  undefined8 header_endianness;\n  undefined8 data_endianness;\n  char *output_format;\n  long memory_size;\n  undefined8 printable_arch_mach;\n  long lVar8;\n  \n  arch_mach_value = *(int *)((long)bfd_data + 0xc) + 1;\n  *(int *)((long)bfd_data + 0xc) = arch_mach_value;\n  if ((ulong)bfd_data[2] < (ulong)((long)arch_mach_value * 0x60)) {\n    memory_size = 0x3000;\n    if (0x3f < arch_mach_value) {\n      memory_size = (long)arch_mach_value * 0xc0;\n    }\n    lVar8 = xrealloc(bfd_data[3]);\n    bfd_data[3] = lVar8;\n    memset((void *)(lVar8 + bfd_data[2]),0,memory_size - bfd_data[2]);\n    bfd_data[2] = memory_size;\n  }\n  format_version = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)bfd_data + 0xc) * 0x60 + bfd_data[3] + -0x60) = *header_data;\n  header_endianness = identify_endianness_00114e00(format_version);\n  data_endianness = identify_endianness_00114e00(*(undefined4 *)(header_data + 2));\n  printable_arch_mach = *header_data;\n  output_format = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(output_format,printable_arch_mach,data_endianness,header_endianness);\n  memory_size = bfd_openw(*bfd_data,*header_data);\n  if (memory_size == 0) {\n    print_error_0011a110(*bfd_data);\n    *(undefined4 *)(bfd_data + 1) = 1;\n  }\n  else {\n    arch_mach_value = 2;\n    format_set_flag = bfd_set_format(memory_size,1);\n    if (format_set_flag == '\\0') {\n      arch_mach_value = bfd_get_error();\n      if (arch_mach_value != 5) {\n        print_error_0011a110(*header_data);\n        *(undefined4 *)(bfd_data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        format_set_flag = (**(code **)(*(long *)(memory_size + 8) + 0x2a0))(memory_size,arch_mach_value,0);\n        if (format_set_flag != '\\0') {\n          printable_arch_mach = bfd_printable_arch_mach(arch_mach_value,0);\n          printf(\"  %s\\n\",printable_arch_mach);\n          *(undefined *)\n           ((long)*(int *)((long)bfd_data + 0xc) * 0x60 + bfd_data[3] + -0x58 + (ulong)(arch_mach_value - 2)) =\n               1;\n        }\n        arch_mach_value = arch_mach_value + 1;\n      } while (arch_mach_value != 0x57);\n    }\n    bfd_close_all_done(memory_size);\n  }\n  return *(undefined4 *)(bfd_data + 1);\n}\n\n",
            "called": [
                "printf",
                "bfd_openw",
                "bfd_get_error",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_set_format",
                "bfd_close_all_done",
                "FUN_0011a110",
                "FUN_001053d5",
                "xrealloc",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "decompress_and_print_bfd_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_contents_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "fileMetadata",
                "iVar1": "originalError",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "sourceFileOffset",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoLocation",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFileContents_00115a90(int sourceFileDescriptor,char *destinationFilePath,long fileMetadata)\n\n{\n  int originalError;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t sourceFileOffset;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFileOffset = lseek(sourceFileDescriptor,0,0), sourceFileOffset == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = close_file_and_return_error_00108237();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoLocation = __errno_location();\n        originalError = *errnoLocation;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(fileMetadata + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoLocation = originalError;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoLocation = __errno_location();\n    bytesRead = *errnoLocation;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoLocation = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "__errno_location",
                "FUN_00108237",
                "fchmod",
                "write",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_contents_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTimestamp",
                "unaff_R13": "flags",
                "auVar3": "returnVal",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldSetTimestamp;\n  ulong flags;\n  undefined returnVal [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  unlink(filePath);\n  if (shouldSetTimestamp != '\\0') {\n    set_file_timestamp_0011a350();\n  }\n  returnVal._0_8_ = flags & 0xffffffff;\n  returnVal._8_8_ = returnAddress;\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_0011a350",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 301092,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}