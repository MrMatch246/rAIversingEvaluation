{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_reloc_00103c00",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "dataPointer",
                "auVar2": "auxVar",
                "lVar3": "length",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "code": "\nundefined8\nupdateReloc_00103c00(undefined8 *param1,long param2,undefined (*param3) [16],undefined8 param4,\n            undefined8 param5)\n\n{\n  undefined8 *dataPointer;\n  undefined auxVar [16];\n  long length;\n  undefined8 var4;\n  undefined8 var5;\n  \n  **(long **)*param3 = param2;\n  if ((*(byte *)(param2 + 0x24) & 4) == 0) {\n    **(undefined8 **)(*param3 + 8) = 0;\n    **(undefined8 **)param3[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      dataPointer = *(undefined8 **)(*param3 + 8);\n      var4 = xmalloc(length);\n      var5 = *(undefined8 *)(param3[1] + 8);\n      *dataPointer = var4;\n      dataPointer = *(undefined8 **)param3[1];\n      var5 = bfd_canonicalize_reloc(param1,param2,**(undefined8 **)(*param3 + 8),var5);\n      *dataPointer = var5;\n      if (-1 < **(long **)param3[1]) goto LAB_00103c7c;\n    }\n    FUN_00106530(*param1);\n  }\nLAB_00103c7c:\n  length = *(long *)(*param3 + 8) + 8;\n  *(long *)param3[1] = *(long *)param3[1] + 8;\n  auxVar._8_4_ = (int)length;\n  auxVar._0_8_ = *(long *)*param3 + 8;\n  auxVar._12_4_ = (int)((ulong)length >> 0x20);\n  *param3 = auxVar;\n  return param5;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_reloc_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_details_0010370a",
                "plVar4": "printWidthPtr",
                "uVar9": "ebx",
                "cVar1": "isUndefined",
                "pcVar10": "symbolType",
                "uVar2": "typeCode",
                "iVar3": "asprintfResult",
                "lVar7": "symbolDetails",
                "bVar8": "byteValue",
                "piVar5": "errnoPtr"
            },
            "code": "\nvoid printSymbolDetails_0010370a(void)\n\n{\n  char isUndefined;\n  ushort typeCode;\n  int asprintfResult;\n  long *printWidthPtr;\n  int *errnoPtr;\n  undefined8 uVar6;\n  long symbolDetails;\n  ulong unaff_RBX;\n  byte byteValue;\n  ulong ebx;\n  char *symbolType;\n  \n  printWidthPtr = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  ebx = unaff_RBX & 0xffffffff;\n  FUN_00106300(printWidthPtr,ebx);\n  FUN_00104740(\"%-20s|\",printWidthPtr,0,ebx);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*printWidthPtr + 8));\n  if (isUndefined == '\\0') {\n    FUN_001054d0(*(undefined8 *)*printWidthPtr);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidthPtr + 8));\n  if (*(char *)(*printWidthPtr + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidthPtr + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*printWidthPtr + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidthPtr[2] == 0) {\n    if (printWidthPtr[3] != 0) {\n      symbolDetails = *(long *)(printWidthPtr[3] + 0x30);\n      isUndefined = *(char *)(symbolDetails + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolType = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolType = \"Block\";\n      }\n      else if (*(ushort *)(symbolDetails + 0x26) == 0) {\n        symbolType = \"None\";\n      }\n      else {\n        typeCode = *(ushort *)(symbolDetails + 0x26) >> 4 & 3;\n        if (typeCode == 2) {\n          symbolType = \"Function\";\n        }\n        else if (typeCode == 3) {\n          symbolType = \"Array\";\n        }\n        else {\n          if (typeCode != 1) {\n            free(DAT_0010b730);\n            typeCode = *(ushort *)(symbolDetails + 0x26);\n            byteValue = *(byte *)(symbolDetails + 0x28);\n            symbolType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,symbolType,(ulong)byteValue,(ulong)typeCode);\n            symbolType = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    byteValue = *(byte *)(printWidthPtr[2] + 0x48) & 0xf;\n    switch(byteValue) {\n    case 0:\n      symbolType = \"NOTYPE\";\n      break;\n    case 1:\n      symbolType = \"OBJECT\";\n      break;\n    case 2:\n      symbolType = \"FUNC\";\n      break;\n    case 3:\n      symbolType = \"SECTION\";\n      break;\n    case 4:\n      symbolType = \"FILE\";\n      break;\n    case 5:\n      symbolType = \"COMMON\";\n      break;\n    case 6:\n      symbolType = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolType = \"<processor specific>: %d\";\n      if ((2 < byteValue - 0xd) && (symbolType = \"<OS specific>: %d\", 2 < byteValue - 10)) {\n        symbolType = \"<unknown>: %d\";\n      }\n      symbolType = (char *)dcgettext(0,symbolType,5);\n      asprintfResult = asprintf(&DAT_0010b728,symbolType,(ulong)byteValue);\n      symbolType = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoPtr = __errno_location();\n        uVar6 = xstrerror(*errnoPtr);\n        FUN_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolType);\n  }\n  if (printWidthPtr[2] == 0) {\n    if (printWidthPtr[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidthPtr[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  symbolDetails = printWidthPtr[2];\n  if ((symbolDetails != 0) || (symbolDetails = printWidthPtr[3], symbolDetails != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolDetails + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_details_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "select_output_format_00104370",
                "param_1": "outputFormat",
                "uVar1": "errorMessage",
                "ppuVar2": "resultPointer"
            },
            "code": "\nundefined ** selectOutputFormat_00104370(undefined *outputFormat,undefined8 param_2)\n\n{\n  undefined8 errorMessage;\n  undefined **resultPointer;\n  \n  switch(*outputFormat) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    FUN_00106300(errorMessage,outputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    FUN_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,param_2,3);\n    return resultPointer;\n  case 0x50:\n  case 0x70:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,param_2,2);\n    return resultPointer;\n  case 0x53:\n  case 0x73:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,param_2,1);\n    return resultPointer;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "dcgettext",
                "caseD_4a",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "select_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001055f0",
                "FUN_0010268b",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatStrings",
                "__format": "formatMsg",
                "plVar2": "currentFormat",
                "uVar1": "matchingFormats",
                "fputc": "writeNewline",
                "stderr": "errorOutput",
                "dcgettext": "getFormatTranslation",
                "free": "freeMemory",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatStrings)\n\n{\n  undefined8 matchingFormats;\n  char *formatMsg;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  matchingFormats = DAT_0010b820;\n  formatMsg = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_errorOutput,formatMsg,matchingFormats);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_errorOutput,\" %s\");\n  }\n  freeMemory(formatStrings);\n  fputc(10,_errorOutput);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "free",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_data_001036a7",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "extraParam1",
                "param_4": "extraParam2"
            },
            "code": "\nvoid printData_001036a7(undefined8 *data1,undefined8 *data2,undefined8 extraParam1,undefined8 extraParam2)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (data1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*data1);\n    }\n    printf(\"%s:\",*data2,extraParam2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_data_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "filename",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 filename)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filename);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compilation_attributes_00102fc3",
                "param_1": "param_ptr1",
                "param_2": "param_ptr2",
                "cVar1": "lastChar",
                "__s": "string1",
                "__s_00": "string2",
                "uVar3": "flag",
                "lVar4": "result1",
                "lVar5": "result2",
                "sVar6": "length1",
                "sVar7": "length2",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "uVar10": "offset1",
                "uVar11": "offset2",
                "uVar12": "finalOffset1",
                "uVar13": "pointer",
                "unaff_R13": "temp",
                "bVar14": "isMatch"
            },
            "code": "\nulong checkCompilationAttributes_00102fc3(undefined8 param_ptr1,undefined8 param_ptr2)\n\n{\n  char lastChar;\n  ulong uVar2;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t length1;\n  size_t length2;\n  char *substring1;\n  char *substring2;\n  ulong offset1;\n  ulong offset2;\n  ulong finalOffset1;\n  undefined8 pointer;\n  long temp;\n  bool isMatch;\n  \n  pointer = *DAT_0010b780;\n  FUN_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param_ptr2,DAT_0010b768);\n  if ((result1 == 0) || (temp = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  offset1 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  finalOffset1 = *(long *)(result1 + 0x10) + offset1;\n  offset2 = *(long *)(temp + 0x10) + uVar2;\n  isMatch = finalOffset1 < offset2;\n  if ((finalOffset1 != offset2) || (isMatch = offset1 < uVar2, offset1 != uVar2)) {\n    return (ulong)(-(uint)isMatch | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(temp + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(temp + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      isMatch = false;\n      goto LAB_001031e7;\n    }\n    lastChar = string1[length1 - 1];\n    isMatch = lastChar == 'o' || lastChar == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isMatch = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (isMatch) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isMatch) {\n    return 1;\n  }\nLAB_00103202:\n  offset1 = FUN_00104fa0(pointer,param_ptr2);\n  return offset1;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_compilation_attributes_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbolInfo",
                "param_2": "formatSpecifier",
                "cVar1": "isUndefined",
                "uVar2": "symbolType",
                "iVar3": "asprintfStatus",
                "piVar4": "errorCode",
                "uVar5": "errorString",
                "lVar6": "symbolInfo2",
                "bVar7": "symbolClass",
                "pcVar8": "symbolTypeName"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbolInfo,undefined8 formatSpecifier)\n\n{\n  char isUndefined;\n  ushort symbolType;\n  int asprintfStatus;\n  int *errorCode;\n  undefined8 errorString;\n  long symbolInfo2;\n  byte symbolClass;\n  char *symbolTypeName;\n  \n  FUN_00104740(\"%-20s|\",symbolInfo,0,formatSpecifier);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    FUN_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      symbolInfo2 = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(symbolInfo2 + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolTypeName = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolTypeName = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfo2 + 0x26) == 0) {\n        symbolTypeName = \"None\";\n      }\n      else {\n        symbolType = *(ushort *)(symbolInfo2 + 0x26) >> 4 & 3;\n        if (symbolType == 2) {\n          symbolTypeName = \"Function\";\n        }\n        else if (symbolType == 3) {\n          symbolTypeName = \"Array\";\n        }\n        else {\n          if (symbolType != 1) {\n            free(DAT_0010b730);\n            symbolType = *(ushort *)(symbolInfo2 + 0x26);\n            symbolClass = *(byte *)(symbolInfo2 + 0x28);\n            symbolTypeName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfStatus = asprintf(&DAT_0010b730,symbolTypeName,(ulong)symbolClass,(ulong)symbolType);\n            symbolTypeName = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolTypeName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolClass = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(symbolClass) {\n    case 0:\n      symbolTypeName = \"NOTYPE\";\n      break;\n    case 1:\n      symbolTypeName = \"OBJECT\";\n      break;\n    case 2:\n      symbolTypeName = \"FUNC\";\n      break;\n    case 3:\n      symbolTypeName = \"SECTION\";\n      break;\n    case 4:\n      symbolTypeName = \"FILE\";\n      break;\n    case 5:\n      symbolTypeName = \"COMMON\";\n      break;\n    case 6:\n      symbolTypeName = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolTypeName = \"<processor specific>: %d\";\n      if ((2 < symbolClass - 0xd) && (symbolTypeName = \"<OS specific>: %d\", 2 < symbolClass - 10)) {\n        symbolTypeName = \"<unknown>: %d\";\n      }\n      symbolTypeName = (char *)dcgettext(0,symbolTypeName,5);\n      asprintfStatus = asprintf(&DAT_0010b728,symbolTypeName,(ulong)symbolClass);\n      symbolTypeName = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfStatus < 0) {\n        errorCode = __errno_location();\n        errorString = xstrerror(*errorCode);\n        FUN_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        symbolTypeName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolTypeName);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  symbolInfo2 = symbolInfo[2];\n  if ((symbolInfo2 != 0) || (symbolInfo2 = symbolInfo[3], symbolInfo2 != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfo2 + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "asprintf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "free",
                "FUN_00106300",
                "__errno_location",
                "FUN_00104740",
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_with_labels_00103573",
                "param_1": "label1",
                "param_2": "label2",
                "param_3": "param3",
                "param_4": "label3"
            },
            "code": "\nvoid print_with_labels_00103573(undefined8 *label1,undefined8 *label2,undefined8 param3,undefined8 label3)\n\n{\n  if (label1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*label1);\n  }\n  printf(\"%s:\",*label2,label3);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_with_labels_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_sections_00105110",
                "param_1": "sectionHeaders",
                "param_2": "elfHeader",
                "param_3": "fileName",
                "param_4": "sectionName",
                "__ptr": "ptr",
                "__s1": "str",
                "pplVar1": "doublePtr",
                "plVar2": "longPtr",
                "lVar3": "longValue",
                "puVar4": "ptrVar",
                "cVar5": "charValue",
                "iVar6": "intValue",
                "pvVar7": "ptrVar2",
                "lVar8": "longValue2",
                "uVar9": "uintValue",
                "lVar10": "longValue3",
                "local_b4": "local_uint",
                "local_b0": "local_undefined",
                "local_a8": "local_ptr",
                "local_a0": "local_long",
                "local_98": "local_longPtr1",
                "local_90": "local_longPtr2",
                "local_88": "local_ptr2",
                "pvStack_80": "local_ptr3",
                "pvStack_78": "local_ptr4",
                "pvStack_70": "local_ptr5",
                "local_68": "local_undefined2",
                "local_60": "local_char"
            },
            "code": "\n\n\nvoid printSections_00105110(undefined8 *sectionHeaders,long *elfHeader,undefined8 fileName,undefined8 *sectionName)\n\n{\n  void *ptr;\n  char *str;\n  long **doublePtr;\n  long *longPtr;\n  long longValue;\n  undefined8 *ptrVar;\n  char charValue;\n  int intValue;\n  void *ptrVar2;\n  long longValue2;\n  uint uintValue;\n  long longValue3;\n  uint local_uint;\n  undefined local_undefined [8];\n  undefined *local_ptr;\n  undefined8 local_long;\n  long *local_longPtr1;\n  long *local_longPtr2;\n  void *local_ptr2;\n  void *local_ptr3;\n  void *local_ptr4;\n  void *local_ptr5;\n  undefined local_undefined2 [8];\n  char local_char;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == FUN_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (sectionName != (undefined8 *)0x0) {\n        printf(\"%s:\",*sectionName);\n      }\n      printf(\"%s:\",*sectionHeaders);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(sectionName,sectionHeaders);\n  }\n  local_ptr = local_undefined2;\n  (**(code **)(sectionHeaders[1] + 0x218))(sectionHeaders,elfHeader,local_ptr);\n  uintValue = *(uint *)(elfHeader + 3);\n  charValue = local_char;\n  if (((((local_char == 'i') && ((uintValue & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (charValue = *DAT_0010b7c8, (uintValue & 2) == 0)))) &&\n     (charValue = local_char, DAT_0010b7c8[1] != '\\0')) {\n    charValue = DAT_0010b7c8[1];\n  }\n  local_char = charValue;\n  local_long = fileName;\n  if ((uintValue & 0x200100) != 0) goto LAB_00103330;\n  longValue2 = *elfHeader;\n  intValue = *(int *)(*(long *)(longValue2 + 8) + 8);\n  if (((uintValue & 0x200000) == 0) && (intValue == 5)) {\n    local_longPtr1 = elfHeader;\n    if (*(long *)(longValue2 + 0x110) == 0) {\n      local_longPtr1 = (long *)0x0;\n    }\n  }\n  else {\n    local_longPtr1 = (long *)0x0;\n    if (((intValue - 2U & 0xfffffffd) == 0) && (local_longPtr2 = elfHeader, *(long *)(longValue2 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_longPtr2 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr,sectionHeaders);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == sectionHeaders) {\n      ptrVar = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptrVar;\n      ptrVar2 = DAT_0010b750;\n      if (elfHeader[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == sectionHeaders) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uintValue = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uintValue < DAT_0010b748; uintValue = uintValue + 1) {\n              ptr = *(void **)((long)ptrVar2 + (ulong)uintValue * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptrVar2);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(sectionHeaders + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          local_ptr5 = DAT_0010b758;\n          local_ptr2 = DAT_0010b740;\n          local_ptr3 = DAT_0010b750;\n          local_ptr4 = DAT_0010b738;\n          bfd_map_over_sections(sectionHeaders,FUN_00103c00,&local_ptr2);\n          _DAT_0010b7b0 = sectionHeaders;\n        }\n        str = (char *)elfHeader[1];\n        for (uintValue = 0; uintValue < DAT_0010b748; uintValue = uintValue + 1) {\n          longValue2 = (ulong)uintValue * 8;\n          ptrVar2 = DAT_0010b738;\n          for (longValue3 = 0;\n              *(long *)((long)ptrVar2 + longValue2) != longValue3 && longValue3 <= *(long *)((long)ptrVar2 + longValue2)\n              ; longValue3 = longValue3 + 1) {\n            doublePtr = *(long ***)(*(long *)((long)DAT_0010b750 + longValue2) + longValue3 * 8);\n            longPtr = *doublePtr;\n            if ((((longPtr != (long *)0x0) &&\n                 (longValue = *longPtr, *(long *)(longValue + 0x20) == elfHeader[4])) &&\n                (*(long *)(longValue + 0x10) == elfHeader[2])) &&\n               (((intValue = strcmp(str,*(char **)(longValue + 8)), intValue == 0 &&\n                 (charValue = (**(code **)(sectionHeaders[1] + 0x240))\n                                    (sectionHeaders,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + longValue2),doublePtr[1],\n                                     &local_ptr2,local_undefined,&local_uint,0), ptrVar2 = DAT_0010b738,\n                 charValue != '\\0')) && (local_ptr2 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr2,(ulong)local_uint);\n              uintValue = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(elfHeader[4] + 0xe0) == sectionHeaders) {\n        charValue = (**(code **)(sectionHeaders[1] + 0x250))(sectionHeaders,DAT_0010b758,elfHeader,&local_ptr2,&local_uint);\n        if (((charValue != '\\0') ||\n            (charValue = (**(code **)(sectionHeaders[1] + 0x240))\n                               (sectionHeaders,DAT_0010b758,elfHeader[4],elfHeader[2],&local_ptr2,local_undefined,\n                                &local_uint,0), charValue != '\\0')) &&\n           ((local_ptr2 != (void *)0x0 && (local_uint != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    longValue2 = (**(code **)(sectionHeaders[1] + 0x1f8))(sectionHeaders);\n    if (longValue2 < 0) {\n      FUN_00103463(longValue2);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    longValue2 = (**(code **)(sectionHeaders[1] + 0x200))(sectionHeaders,DAT_0010b758);\n    ptrVar = sectionHeaders;\n    if (-1 < longValue2) goto LAB_00105288;\n    FUN_00106530(*sectionHeaders);\nLAB_00103330:\n    local_longPtr1 = (long *)0x0;\n    local_longPtr2 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr,sectionHeaders);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "FUN_001053b0",
                "FUN_00103463",
                "FUN_001053c0",
                "xmalloc",
                "FUN_00103238",
                "free",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_sections_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_binary_compatibility_00102fd2",
                "param_1": "binaryPath1",
                "param_2": "binaryPath2",
                "cVar1": "lastCharacter",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "offset2",
                "uVar3": "flags",
                "lVar4": "binaryHandle1",
                "lVar5": "binaryHandle2",
                "sVar6": "stringLength1",
                "sVar7": "stringLength2",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "uVar10": "result",
                "uVar11": "offset1",
                "uVar12": "address1",
                "unaff_R13": "address2",
                "bVar13": "isLess"
            },
            "code": "\nulong checkBinaryCompatibility_00102fd2(undefined8 binaryPath1,undefined8 binaryPath2)\n\n{\n  char lastCharacter;\n  ulong offset2;\n  char *string1;\n  char *string2;\n  uint flags;\n  long binaryHandle1;\n  long binaryHandle2;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *substring1;\n  char *substring2;\n  ulong result;\n  ulong offset1;\n  ulong address1;\n  long address2;\n  bool isLess;\n  \n  binaryHandle1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binaryPath1,DAT_0010b770);\n  binaryHandle2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binaryPath2,DAT_0010b768);\n  if ((binaryHandle1 == 0) || (address2 = binaryHandle2, binaryHandle2 == 0)) {\n    binaryHandle2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(binaryHandle1 + 0x20) == 0x10c2a8) || (*(long *)(binaryHandle2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(binaryHandle1 + 0x20) + 0x30);\n  offset2 = *(ulong *)(*(long *)(binaryHandle2 + 0x20) + 0x30);\n  address1 = *(long *)(binaryHandle1 + 0x10) + result;\n  offset1 = *(long *)(address2 + 0x10) + offset2;\n  isLess = address1 < offset1;\n  if ((address1 != offset1) || (isLess = result < offset2, result != offset2)) {\n    return (ulong)(-(uint)isLess | 1);\n  }\n  string1 = *(char **)(binaryHandle1 + 8);\n  string2 = *(char **)(address2 + 8);\n  stringLength1 = strlen(string1);\n  stringLength2 = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flags = *(uint *)(address2 + 0x18) & 0x4000;\n  if ((*(byte *)(binaryHandle1 + 0x19) & 0x40) == 0) {\n    if ((stringLength1 < 3) || (string1[stringLength1 - 2] != '.')) {\n      if (flags != 0) {\n        return 1;\n      }\n      if ((stringLength2 < 3) || (string2[stringLength2 - 2] != '.')) goto LAB_00103202;\n      isLess = false;\n      goto LAB_001031e7;\n    }\n    lastCharacter = string1[stringLength1 - 1];\n    isLess = lastCharacter == 'o' || lastCharacter == 'a';\n    if (flags == 0) {\n      if ((stringLength2 < 3) || (string2[stringLength2 - 2] != '.')) {\n        if (lastCharacter == 'o' || lastCharacter == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flags != 0) goto LAB_00103202;\n    if (stringLength2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[stringLength2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isLess = true;\nLAB_001031e7:\n    if ((string2[stringLength2 - 1] != 'o') && (string2[stringLength2 - 1] != 'a')) {\n      if (isLess) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isLess) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUN_00104fa0(binaryPath1,binaryPath2);\n  return result;\n}\n\n",
            "called": [
                "abort",
                "FUN_00104fa0",
                "strstr",
                "strlen",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_binary_compatibility_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "initialize_function_00102f9f",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] initializeFunction_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  FUN_00106530(*DAT_0010b780);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "initialize_function_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001053c0",
                "FUN_0010249f",
                "FUN_00104370",
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00103a78",
                "FUN_00103abf",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_pointer_is_null_00103a66",
                "unaff_RBX": "ptrToStruct"
            },
            "code": "\nvoid checkIfPointerIsNull_00103a66(void)\n\n{\n  long ptrToStruct;\n  \n  if (*(long *)(ptrToStruct + 8) != 0) {\n    FUN_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_if_pointer_is_null_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_information_001035a2",
                "unaff_RBX": "arrayPointer",
                "lVar1": "value",
                "putchar": "printCharacter",
                "printf": "printFormatted"
            },
            "code": "\nvoid printInformation_001035a2(void)\n\n{\n  long *arrayPointer;\n  long value;\n  \n  if (arrayPointer[2] == 0) {\n    value = arrayPointer[1];\n  }\n  else {\n    value = *(long *)(arrayPointer[2] + 0x38);\n  }\n  if (value != 0) {\n    putchar(0x20);\n    if (arrayPointer[2] == 0) {\n      value = arrayPointer[1];\n    }\n    else {\n      value = *(long *)(arrayPointer[2] + 0x38);\n    }\n    FUN_001054d0(value);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*arrayPointer + 8));\n  if (*(char *)(*arrayPointer + 8) != '-') {\n    FUN_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*arrayPointer + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*arrayPointer + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*arrayPointer + 0x20));\n  FUN_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "putchar",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_information_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_data_00103463",
                "unaff_R12": "searchString",
                "unaff_R13": "dataPointer",
                "unaff_R15": "referencePointer",
                "param_8": "counter",
                "param_10": "param10",
                "plVar1": "currentData",
                "lVar2": "dataValue",
                "cVar3": "isMatch",
                "iVar4": "stringComparison",
                "lVar5": "baseAddress",
                "lVar6": "loopIndex",
                "in_stack_00000050": "lineNumber"
            },
            "code": "\n\n\nvoid findMatchingData_00103463(void)\n\n{\n  long *currentData;\n  long dataValue;\n  char isMatch;\n  int stringComparison;\n  long baseAddress;\n  char *searchString;\n  undefined8 *dataPointer;\n  long loopIndex;\n  long referencePointer;\n  undefined8 counter;\n  ulong param10;\n  long lineNumber;\n  \n  FUN_00106530(*dataPointer);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    baseAddress = DAT_0010b738;\n    for (loopIndex = 0; currentData = (long *)(baseAddress + (ulong)counter._4_4_ * 8),\n        *currentData != loopIndex && loopIndex <= *currentData; loopIndex = loopIndex + 1) {\n      currentData = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + loopIndex * 8);\n      if ((((currentData != (long *)0x0) &&\n           (dataValue = *currentData, *(long *)(dataValue + 0x20) == *(long *)(referencePointer + 0x20))) &&\n          (*(long *)(dataValue + 0x10) == *(long *)(referencePointer + 0x10))) &&\n         (((stringComparison = strcmp(searchString,*(char **)(dataValue + 8)), stringComparison == 0 &&\n           (isMatch = (**(code **)(dataPointer[1] + 0x240))(), baseAddress = DAT_0010b738, isMatch != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,param10 >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "strcmp",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_data_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_param_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "code": "\nvoid initializeParam_00104397(undefined8 param1,undefined8 param2,int param3)\n\n{\n  DAT_0010b7c0 = param3;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)param3 * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "caseD_4a",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "initialize_param_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001047d0",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00103b5d",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00104670",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001055f0",
                "FUN_00106300",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "get_arch_size_00104670",
                "param_1": "input",
                "iVar1": "archSize",
                "pcVar2": "archSubstring",
                "puVar3": "suffix",
                "pcVar4": "binaryPath"
            },
            "code": "\nvoid getArchSize_00104670(long input)\n\n{\n  int archSize;\n  char *archSubstring;\n  undefined *suffix;\n  char *binaryPath;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    binaryPath = **(char ***)(input + 8);\n    archSubstring = strstr(binaryPath,\"64\");\n    archSize = 0x40;\n    if (archSubstring == (char *)0x0) {\n      archSize = strcmp(binaryPath,\"mmo\");\n      archSize = (-(uint)(archSize == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = archSize;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    binaryPath = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    binaryPath = \"08\";\n  }\n  else {\n    binaryPath = \"016\";\n  }\n  suffix = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        suffix = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,binaryPath,0,0);\n          return;\n        }\n        suffix = &DAT_001071cd;\n      }\n    }\n    else {\n      suffix = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,binaryPath,suffix,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "concat",
                "bfd_get_arch_size",
                "free",
                "FUN_001025f5",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "get_arch_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "translatedErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "fflush": "flushBuffer"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "FUNC_001048e0"
            },
            "code": "\n\n\nvoid FUNC_001048e0(ulong **param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **param_5,ulong **param_6)\n\n{\n  byte bVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  long lVar7;\n  ulong **ppuVar8;\n  ulong **ppuVar9;\n  long lVar10;\n  ulong *puVar11;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool bVar19;\n  byte bVar20;\n  ulong **ppuStack_78;\n  uint local_4c;\n  ulong *local_48;\n  ulong **local_40 [2];\n  \n  bVar20 = 0;\n  local_48 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)param_1 + 0x44) & 0x10) != 0)) {\n    ppuVar9 = (ulong **)&local_4c;\n    ppuVar8 = (ulong **)(*(code *)param_1[1][0x4d])(param_1,DAT_0010b80c != 0,local_40);\n    if ((long)ppuVar8 < 0) {\n      if ((DAT_0010b80c != 0) && (iVar4 = bfd_get_error(), iVar4 == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        puVar11 = *param_1;\n        uVar6 = dcgettext(0,\"%s: no symbols\",5);\n        FUN_00106400(uVar6,puVar11);\n        return;\n      }\n      FUN_00106530(*param_1);\n      goto LAB_00102e9e;\n    }\n    if (ppuVar8 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      bVar1 = *(byte *)((long)param_1 + 0x4a);\n      ppuVar13 = param_1;\n      do {\n        if ((bVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(uVar6);\n        }\n        ppuVar14 = local_40[0];\n        unaff_R14 = (ulong **)(ulong)local_4c;\n        bVar19 = DAT_0010b80c != 0;\n        ppuVar9 = local_40[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)bVar19;\n        param_1 = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)ppuVar8 * (long)unaff_R14);\n        ppuVar8 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        param_1 = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (param_1 < ppuVar8) {\n          do {\n            ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,param_1,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (ppuVar9 == (ulong **)0x0) goto LAB_00102eb0;\n            puVar11 = ppuVar9[1];\n            ppuVar17 = ppuVar8;\n            if (((puVar11 == (ulong *)0x0) || (*(char *)puVar11 != '_')) ||\n               (*(char *)((long)puVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uVar5 = (uint)(ppuVar9[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(ppuVar9 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n                  param_6 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                    if (cVar3 != '\\0') {\n                      FUN_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (ppuVar9[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n                if ((ppuVar9[4] == (ulong *)0x10c2a8) || (ppuVar9[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                if (cVar3 != '\\0') {\n                  FUN_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != param_1) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *param_1;\n                    FUN_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)param_1;\n                    param_1 = (ulong **)((long)param_1 + (ulong)bVar20 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)bVar20 * -2 + 1);\n                  }\n                  FUN_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              iVar4 = strcmp((char *)((long)puVar11 + (ulong)(*(char *)((long)puVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              ppuStack_78 = ppuVar9;\n              if (iVar4 == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  ppuStack_78 = (ulong **)*ppuVar13;\n                  DAT_0010b230 = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(uVar6,ppuStack_78);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uVar5 = (*(uint *)(ppuVar9 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(ppuVar9 + 3) & 0x800082) != 0) || (ppuVar9[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)ppuVar9[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n            if (ppuVar8 <= param_1) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          puVar11 = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          param_5 = (ulong **)(ulong)DAT_0010b800;\n          pcVar2 = (code *)puVar11[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          puVar11 = ppuVar13[1];\n          pcVar2 = (code *)puVar11[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ppuVar13;\n        DAT_0010b770 = (ulong **)(*pcVar2)(ppuVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = local_40[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          if (DAT_0010b7f8 != 0) {\n            bVar19 = DAT_0010b80c != 0;\n            qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,FUN_00102fd2);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = DAT_0010b770;\n            param_1 = DAT_0010b768;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)ppuVar12);\n            ppuVar9 = DAT_0010b770;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            param_6 = DAT_0010b768;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,ppuVar12);\n            param_5 = ppuVar8;\n            ppuStack_78 = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          puVar11 = ppuVar13[1];\nLAB_00104be2:\n          param_1 = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        FUN_00106530(*ppuVar13);\n        param_1 = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          ppuVar8 = (ulong **)(*(code *)param_1[1][0x6b])(param_1,unaff_RBX);\n          ppuVar9 = ppuVar17;\n          if (-1 < (long)ppuVar8) break;\n          ppuVar13 = (ulong **)*param_1;\n          ppuVar14 = (ulong **)FUN_00106530(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          puVar11 = ppuVar14[2];\n          ppuVar9 = (ulong **)0x0;\nLAB_00102dc4:\n          puVar11 = (ulong *)((long)ppuVar8[8] - (long)puVar11);\n          ppuVar18 = param_1;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = ppuVar9;\n          ppuVar12 = unaff_RBX;\n          param_1 = param_6;\n          if (puVar11 != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = puVar11;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          param_6 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)ppuStack_78 >> 4);\n          qsort(ppuStack_78,(size_t)ppuVar14,0x10,FUN_00103533);\n          puVar11 = ppuVar13[1];\n          param_1 = ppuVar13;\n          ppuVar18 = ppuStack_78;\nLAB_00104be5:\n          unaff_RBX = local_40[0];\n          ppuVar8 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_R14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ppuVar17 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          unaff_R15 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          FUN_00106530(*param_1);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          ppuVar9 = ppuVar8;\n          if (DAT_0010b80c != 0) {\n            unaff_RBX = local_40[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          lVar10 = (*(code *)param_1[1][0x6a])(param_1);\n          ppuVar14 = local_40[0];\n          ppuVar17 = ppuVar8;\n          ppuVar12 = unaff_R15;\n          if (lVar10 < 1) {\n            ppuVar8 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        param_6 = &local_48;\n        param_5 = unaff_RBX;\n        lVar10 = (*(code *)param_1[1][0x6c])(param_1,ppuVar17,ppuVar14,ppuVar8);\n        ppuVar8 = ppuVar9;\n        if (0 < lVar10) {\n          ppuVar8 = (ulong **)((long)ppuVar9 + lVar10);\n          local_40[0] = (ulong **)xrealloc(local_40[0]);\n          lVar7 = 0;\n          do {\n            local_40[0][(long)ppuVar9 + lVar7] = local_48 + lVar7 * 6;\n            lVar7 = lVar7 + 1;\n          } while (lVar10 != lVar7);\n          local_40[0][(long)ppuVar9 + lVar10] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        bVar1 = *(byte *)((long)param_1 + 0x4a);\n        ppuVar13 = param_1;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    puVar11 = *param_1;\n    uVar6 = dcgettext(0,\"%s: no symbols\",5);\n    FUN_00106400(uVar6,puVar11);\n  }\n  return;\ncode_r0x00104b01:\n  param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)param_5);\n  if (unaff_R14 <= unaff_RBX) {\n    ppuVar8 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    ppuVar9 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = param_1;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      puVar11 = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    puVar11 = ppuVar14[2];\n    if ((*(byte *)((long)ppuVar8 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  ppuVar8 = param_1;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\n  ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (ppuVar9 == (ulong **)0x0) goto LAB_00102edb;\n  ppuVar8 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (local_48 == (ulong *)0x0) {\n      free(local_40[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(local_48);\n    free(local_40[0]);\n    free(ppuVar18);\n    return;\n  }\n  ppuVar8 = ppuVar17;\n  lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,*ppuVar14);\n  if (lVar10 == 0) goto LAB_00102ec9;\n  ppuVar8 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  FUN_00105110(param_1,lVar10,*ppuVar8,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  FUN_00106530(*param_1,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*param_1;\n  FUN_00106530();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\nLAB_00102edb:\n  param_6 = ppuVar16;\n  param_5 = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  ppuVar9 = (ulong **)FUN_00106530();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  puVar11 = ppuVar14[2];\nLAB_00102ee7:\n  if (ppuVar8 != (ulong **)ppuVar9[4]) goto LAB_00102dc4;\n  puVar11 = (ulong *)((long)ppuVar9[2] - (long)puVar11);\n  ppuVar18 = param_1;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (ppuVar9 = unaff_R15, lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,unaff_RBX),\n        lVar10 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)ppuVar8);\n    FUN_00105110(param_1,lVar10,0,param_2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  FUN_00106530(*param_1);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  FUN_00106530(*param_1);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  FUN_00106530(*ppuVar13);\n  ppuVar13 = param_1;\nLAB_00102eb9:\n  FUN_00106530(*ppuVar13);\n  param_1 = param_6;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  param_5 = ppuVar8;\n  ppuVar18 = ppuVar9;\n  ppuStack_78 = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106400",
                "FUN_00106530"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "FUNC_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid executeIndirectFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_condition_met_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfConditionMet_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_condition_met_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_data_00103238",
                "plVar1": "ptr",
                "__ptr": "pointer1",
                "__s1": "string1",
                "lVar2": "var1",
                "cVar3": "char1",
                "iVar4": "var2",
                "unaff_RBX": "register1",
                "pvVar5": "pointer2",
                "uVar6": "index",
                "unaff_R13": "register2",
                "lVar7": "var3",
                "param_10": "param1",
                "param_12": "param2"
            },
            "code": "\n\n\nvoid processData_00103238(void)\n\n{\n  long *ptr;\n  void *pointer1;\n  char *string1;\n  long var1;\n  char char1;\n  int var2;\n  long register1;\n  void *pointer2;\n  uint index;\n  long register2;\n  long var3;\n  ulong param1;\n  void *param2;\n  \n  pointer2 = DAT_0010b750;\n  if (_DAT_0010b7b0 == register2) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        pointer1 = *(void **)((long)pointer2 + (ulong)index * 8);\n        if (pointer1 != (void *)0x0) {\n          free(pointer1);\n        }\n      }\n      free(DAT_0010b740);\n      free(pointer2);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(register2 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  param2 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = register2;\nLAB_00103296:\n  string1 = *(char **)(register1 + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,_stdout);\n      return;\n    }\n    pointer2 = DAT_0010b738;\n    for (var3 = 0; ptr = (long *)((long)pointer2 + (ulong)index * 8),\n        *ptr != var3 && var3 <= *ptr; var3 = var3 + 1) {\n      ptr = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + var3 * 8);\n      if ((((ptr != (long *)0x0) &&\n           (var1 = *ptr, *(long *)(var1 + 0x20) == *(long *)(register1 + 0x20))) &&\n          (*(long *)(var1 + 0x10) == *(long *)(register1 + 0x10))) &&\n         (((var2 = strcmp(string1,*(char **)(var1 + 8)), var2 == 0 &&\n           (char1 = (**(code **)(*(long *)(register2 + 8) + 0x240))(), pointer2 = DAT_0010b738,\n           char1 != '\\0')) && (param2 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param2,param1 >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_map_over_sections",
                "FUN_00103c00",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "process_data_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "sourceName",
                "param_2": "defaultName"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *sourceName,undefined8 *defaultName)\n\n{\n  if (sourceName != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*sourceName);\n    return;\n  }\n  printf(\"%s: \",*defaultName);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_text_001047d0",
                "unaff_RBX": "reconcatenatedString",
                "unaff_R12": "outputFlag",
                "unaff_R13": "tempString",
                "unaff_R14": "formatString",
                "unaff_R15": "context",
                "pcVar1": "stringResult"
            },
            "code": "\nvoid printFormattedText_001047d0(void)\n\n{\n  char *stringResult;\n  void *reconcatenatedString;\n  undefined *outputFlag;\n  void *tempString;\n  char *formatString;\n  long context;\n  \n  if (((DAT_0010b234 != 0) &&\n      (stringResult = (char *)(**(code **)(*(long *)(context + 8) + 0x220))(), stringResult != (char *)0x0))\n     && (*stringResult != '\\0')) {\n    reconcatenatedString = (void *)reconcat();\n    tempString = reconcatenatedString;\n  }\n  printf(formatString,tempString);\n  if (outputFlag != (undefined *)0x0) {\n    *outputFlag = 0x40;\n  }\n  free(reconcatenatedString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_text_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "show_file_not_ordinary_warning_0010249f",
                "uVar1": "warningMessage",
                "dcgettext": "getWarningMessage"
            },
            "code": "\nundefined8 showFileNotOrdinaryWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  FUN_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "show_file_not_ordinary_warning_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "format_check",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "errno_location",
                "uVar5": "error_message",
                "puVar6": "bfd_file",
                "lVar7": "map_entry",
                "pcVar8": "error_reason",
                "puVar9": "archived_file",
                "puVar10": "previous_file",
                "local_c8": "file_info"
            },
            "code": "\n\n\nundefined4 check_file_001043d0(char *filename)\n\n{\n  char format_check;\n  int status;\n  undefined4 result;\n  int *errno_location;\n  undefined8 error_message;\n  undefined8 *bfd_file;\n  long map_entry;\n  char *error_reason;\n  undefined8 *archived_file;\n  undefined8 *previous_file;\n  stat file_info;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&file_info);\n    if (status < 0) {\nLAB_00102522:\n      errno_location = __errno_location();\n      if (*errno_location == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00106400(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*errno_location);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00106400(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00106400(error_message,filename);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (file_info.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00106400(error_message,filename);\n      }\n      else if (file_info.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfd_file = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          bfd_file = (undefined8 *)bfd_openr(filename);\n        }\n        if (bfd_file != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x8000;\n          }\n          format_check = bfd_check_format(bfd_file,2);\n          if (format_check == '\\0') {\n            result = bfd_check_format_matches(bfd_file,1,&file_info);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            FUN_00104670(bfd_file);\n            (**(code **)PTR_PTR_FUN_0010b260)(filename);\n            FUNC_001048e0(bfd_file,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfd_file);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_entry = bfd_get_next_mapent(bfd_file,0xffffffffffffffff,&file_info), map_entry != -1)) {\n              error_reason = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_reason);\n              do {\n                archived_file = (undefined8 *)(**(code **)(bfd_file[1] + 0x1e0))(bfd_file,map_entry);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_info.st_dev != 0) {\n                  FUN_00104740(&DAT_0010712d,0,*(long *)file_info.st_dev,bfd_file);\n                  printf(\" in %s\\n\",*archived_file);\n                }\n                map_entry = bfd_get_next_mapent(bfd_file,map_entry,&file_info);\n              } while (map_entry != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                previous_file = archived_file;\n                archived_file = (undefined8 *)bfd_openr_next_archived_file(bfd_file,previous_file);\n                if (archived_file == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    FUN_00106530(*bfd_file);\nLAB_00102516:\n                    FUN_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previous_file != (undefined8 *)0x0) {\n                    bfd_close(previous_file);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_check = bfd_check_format_matches(archived_file,1,&file_info);\n                if (format_check == '\\0') {\n                  FUN_00106540(*archived_file);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    FUN_00103b5d(file_info.st_dev);\n                  }\n                }\n                else {\n                  FUN_00104670(archived_file);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfd_file,*archived_file);\n                  FUNC_001048e0(archived_file,bfd_file);\n                }\n              } while (previous_file == (undefined8 *)0x0);\n              bfd_close(previous_file);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previous_file != archived_file);\n          }\nLAB_001044b4:\n          result = 1;\n          while (format_check = bfd_close(bfd_file), format_check == '\\0') {\n            FUN_00106530(filename);\nLAB_001025ac:\n            FUN_00106540(filename);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              FUN_00103b5d(file_info.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return result;\n        }\n        FUN_00106540(filename);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00106400(error_message,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106540",
                "FUN_0010351b",
                "bfd_get_next_mapent",
                "FUN_00103b5d",
                "bfd_openr",
                "FUN_0010249f",
                "FUN_00106400",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00104740",
                "bfd_check_format_matches",
                "bfd_get_error",
                "FUN_001062d0",
                "dcgettext",
                "bfd_close",
                "strerror",
                "FUN_00104670",
                "FUN_001048e0",
                "stat",
                "__errno_location",
                "FUN_00102670",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "firstStringPtr",
                "param_2": "secondStringPtr"
            },
            "code": "\nvoid concatenateStrings_001025f5(undefined8 firstStringPtr,undefined8 secondStringPtr)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,secondStringPtr,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_initialized_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfInitialized_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_initialized_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00103463",
                "FUN_00104d5b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "ptr_string2",
                "__s1": "ptr_string1",
                "uVar1": "stringComparisonResult",
                "lVar2": "result1",
                "lVar3": "result2"
            },
            "code": "\nuint compareStrings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *ptr_string2;\n  char *ptr_string1;\n  uint stringComparisonResult;\n  long result1;\n  long result2;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((result1 == 0) || (result2 == 0)) {\n    FUN_00106530(*DAT_0010b780);\n  }\n  else {\n    ptr_string2 = *(char **)(result2 + 8);\n    ptr_string1 = *(char **)(result1 + 8);\n    if (ptr_string2 == (char *)0x0) {\n      return (uint)(ptr_string1 != (char *)0x0);\n    }\n    if (ptr_string1 != (char *)0x0) {\n      if (*ptr_string2 == '\\0') {\n        return (uint)(*ptr_string1 != '\\0');\n      }\n      if (*ptr_string1 == '\\0') {\n        return 0xffffffff;\n      }\n      stringComparisonResult = strcoll(ptr_string1,ptr_string2);\n      return stringComparisonResult;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "strcoll",
                "FUN_00102f9f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103729",
                "FUN_001053c0",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "messageName",
                "param_2": "defaultValue"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *messageName,undefined8 *defaultValue)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (messageName != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*messageName);\n    return;\n  }\n  printf(\"%s: \",*defaultValue);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbolName",
                "cVar1": "isUndefinedSymClass",
                "uVar2": "symbolType",
                "iVar3": "asprintfResult",
                "plVar4": "symbolInfoPointer",
                "piVar5": "errnoLocation",
                "uVar6": "errorString",
                "lVar7": "sectionInfoPointer",
                "uVar8": "printWidth",
                "bVar9": "symbolBinding",
                "uVar10": "savedPrintWidth",
                "pcVar11": "symbolTypeString",
                "in_R8": "inputArg1",
                "in_R9": "inputArg2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbolName)\n\n{\n  char isUndefinedSymClass;\n  ushort symbolType;\n  int asprintfResult;\n  long *symbolInfoPointer;\n  int *errnoLocation;\n  undefined8 errorString;\n  long sectionInfoPointer;\n  ulong printWidth;\n  byte symbolBinding;\n  ulong savedPrintWidth;\n  char *symbolTypeString;\n  undefined8 inputArg1;\n  undefined8 inputArg2;\n  \n  printWidth = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbolName);\n    return;\n  }\n  symbolInfoPointer = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  savedPrintWidth = printWidth;\n  FUN_00106300(symbolInfoPointer,printWidth);\n  FUN_00104740(\"%-20s|\",symbolInfoPointer,0,savedPrintWidth,inputArg1,inputArg2,printWidth);\n  isUndefinedSymClass = bfd_is_undefined_symclass((int)*(char *)(*symbolInfoPointer + 8));\n  if (isUndefinedSymClass == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfoPointer);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfoPointer + 8));\n  if (*(char *)(*symbolInfoPointer + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfoPointer + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfoPointer + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfoPointer[2] == 0) {\n    if (symbolInfoPointer[3] != 0) {\n      sectionInfoPointer = *(long *)(symbolInfoPointer[3] + 0x30);\n      isUndefinedSymClass = *(char *)(sectionInfoPointer + 0x28);\n      if (isUndefinedSymClass == 'g') goto LAB_00103983;\n      if (isUndefinedSymClass == 'h') {\n        symbolTypeString = \"Line\";\n      }\n      else if (isUndefinedSymClass == 'd') {\n        symbolTypeString = \"Block\";\n      }\n      else if (*(ushort *)(sectionInfoPointer + 0x26) == 0) {\n        symbolTypeString = \"None\";\n      }\n      else {\n        symbolType = *(ushort *)(sectionInfoPointer + 0x26) >> 4 & 3;\n        if (symbolType == 2) {\n          symbolTypeString = \"Function\";\n        }\n        else if (symbolType == 3) {\n          symbolTypeString = \"Array\";\n        }\n        else {\n          if (symbolType != 1) {\n            free(DAT_0010b730);\n            symbolType = *(ushort *)(sectionInfoPointer + 0x26);\n            symbolBinding = *(byte *)(sectionInfoPointer + 0x28);\n            symbolTypeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,symbolTypeString,(ulong)symbolBinding,(ulong)symbolType);\n            symbolTypeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolTypeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolBinding = *(byte *)(symbolInfoPointer[2] + 0x48) & 0xf;\n    switch(symbolBinding) {\n    case 0:\n      symbolTypeString = \"NOTYPE\";\n      break;\n    case 1:\n      symbolTypeString = \"OBJECT\";\n      break;\n    case 2:\n      symbolTypeString = \"FUNC\";\n      break;\n    case 3:\n      symbolTypeString = \"SECTION\";\n      break;\n    case 4:\n      symbolTypeString = \"FILE\";\n      break;\n    case 5:\n      symbolTypeString = \"COMMON\";\n      break;\n    case 6:\n      symbolTypeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolTypeString = \"<processor specific>: %d\";\n      if ((2 < symbolBinding - 0xd) && (symbolTypeString = \"<OS specific>: %d\", 2 < symbolBinding - 10)) {\n        symbolTypeString = \"<unknown>: %d\";\n      }\n      symbolTypeString = (char *)dcgettext(0,symbolTypeString,5);\n      asprintfResult = asprintf(&DAT_0010b728,symbolTypeString,(ulong)symbolBinding);\n      symbolTypeString = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorString = xstrerror(*errnoLocation);\n        FUN_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        symbolTypeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolTypeString);\n  }\n  if (symbolInfoPointer[2] == 0) {\n    if (symbolInfoPointer[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfoPointer[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  sectionInfoPointer = symbolInfoPointer[2];\n  if ((sectionInfoPointer != 0) || (sectionInfoPointer = symbolInfoPointer[3], sectionInfoPointer != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(sectionInfoPointer + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "label_param",
                "param_2": "string_param",
                "param_3": "unused_param",
                "param_4": "extra_param",
                "printf": "print"
            },
            "code": "\nvoid print_strings_001053b0(undefined8 *label_param,undefined8 *string_param,undefined8 unused_param,undefined8 extra_param)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (label_param != (undefined8 *)0x0) {\n    printf(\"%s:\",*label_param);\n  }\n  printf(\"%s:\",*string_param,extra_param);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_strings_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "parse_input_files_001055f0",
                "param_1": "numFiles",
                "param_2": "filePaths",
                "pbVar1": "bytePtr1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar3",
                "bVar4": "boolVar4",
                "bVar5": "boolVar5",
                "cVar6": "charVar6",
                "bVar7": "byteVar7",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "iVar10": "intVar10",
                "uVar11": "uintVar11",
                "iVar12": "intVar12",
                "lVar17": "longVar17",
                "plVar18": "filePathsPtr",
                "plVar19": "filePathsPtr2",
                "pcVar22": "errorMessage",
                "pbVar23": "bytePtr2",
                "unaff_RBP": "resultPtr",
                "__stream": "fileStream",
                "__s": "stringPtr",
                "piVar15": "intPtr",
                "sVar16": "sizeVar16",
                "__ptr": "processedStringPtr",
                "__src": "sourcePtr",
                "lVar24": "fileIndex",
                "pbVar25": "bytePtr3",
                "pcVar26": "errorMessage",
                "unaff_R12": "fileIndexPtr",
                "piVar27": "optionIndexPtr",
                "local_110": "localVar110",
                "local_10c": "localVar10c",
                "local_108": "localVar108",
                "local_c8": "statData"
            },
            "code": "\n\n\nundefined ** parseInputFiles_001055f0(int numFiles,long *filePaths)\n\n{\n  byte *bytePtr1;\n  byte byteVar2;\n  bool boolVar3;\n  bool boolVar4;\n  bool boolVar5;\n  char charVar6;\n  byte byteVar7;\n  char charVar8;\n  char charVar9;\n  int intVar10;\n  uint uintVar11;\n  int intVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *fileStream;\n  byte *stringPtr;\n  int *intPtr;\n  size_t sizeVar16;\n  byte *processedStringPtr;\n  long *sourcePtr;\n  long longVar17;\n  long *filePathsPtr;\n  long *filePathsPtr2;\n  undefined8 uVar20;\n  undefined8 uVar21;\n  char *errorMessage;\n  byte *bytePtr2;\n  undefined **resultPtr;\n  long fileIndex;\n  byte *bytePtr3;\n  char *errorMessage;\n  int *fileIndexPtr;\n  int *optionIndexPtr;\n  int localVar110;\n  int localVar10c;\n  size_t localVar108;\n  stat statData;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  errorMessage = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *filePaths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  filePathsPtr = filePaths;\n  if (1 < numFiles) {\n    localVar10c = 2000;\n    fileIndexPtr = (int *)0x1;\n    localVar110 = 0;\n    do {\n      intVar12 = (int)fileIndexPtr;\n      resultPtr = (undefined **)(long)intVar12;\n      optionIndexPtr = (int *)((long)resultPtr * 8);\n      if (*(char *)filePathsPtr[(long)resultPtr] != '@') goto LAB_00105a70;\n      localVar10c = localVar10c + -1;\n      if (localVar10c == 0) {\n        fileIndex = *filePathsPtr;\n        errorMessage = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      errorMessage = (char *)filePathsPtr[(long)resultPtr] + 1;\n      intVar10 = stat(errorMessage,&statData);\n      if (intVar10 < 0) {\nLAB_00105a70:\n        if (numFiles <= intVar12 + 1) break;\nLAB_00105a7a:\n        uintVar11 = intVar12 + 1;\n        localVar110 = intVar12;\n      }\n      else {\n        if ((statData.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        fileStream = fopen(errorMessage,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00105a70;\n        intVar10 = fseek(fileStream,0,2);\n        if (((intVar10 == -1) ||\n            (errorMessage = (char *)ftell(fileStream), (int *)errorMessage == (int *)0xffffffffffffffff)) ||\n           (intVar10 = fseek(fileStream,0,0), intVar10 == -1)) {\nLAB_00105ad0:\n          fclose(fileStream);\n          if (intVar12 + 1 < numFiles) goto LAB_00105a7a;\n          break;\n        }\n        stringPtr = (byte *)xmalloc((char *)((long)errorMessage + 1));\n        intPtr = (int *)fread(stringPtr,1,(size_t)errorMessage,fileStream);\n        if (((int *)errorMessage != intPtr) && (intVar10 = ferror(fileStream), intVar10 != 0)) {\n          free(stringPtr);\n          goto LAB_00105ad0;\n        }\n        stringPtr[(long)intPtr] = 0;\n        byteVar7 = *stringPtr;\n        bytePtr2 = stringPtr;\n        if (byteVar7 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sizeVar16 = strlen((char *)stringPtr);\n          processedStringPtr = (byte *)xmalloc(sizeVar16 + 1);\n          intVar10 = 0;\n          boolVar5 = false;\n          boolVar3 = false;\n          fileIndex = 0;\n          sourcePtr = (long *)0x0;\n          boolVar4 = false;\n          bytePtr2 = stringPtr;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 0x40) != 0) {\n              bytePtr2 = bytePtr2 + 1;\n            }\n            if ((intVar10 == 0) || (filePathsPtr2 = sourcePtr + fileIndex, intVar10 + -1 <= (int)fileIndex)) {\n              if (sourcePtr == (long *)0x0) {\n                intVar10 = 8;\n                sourcePtr = (long *)xmalloc(0x40);\n                filePathsPtr2 = sourcePtr + fileIndex;\n                *filePathsPtr2 = 0;\n              }\n              else {\n                intVar10 = intVar10 * 2;\n                sourcePtr = (long *)xrealloc(sourcePtr,(long)intVar10 << 3);\n                filePathsPtr2 = sourcePtr + fileIndex;\n                *filePathsPtr2 = 0;\n              }\n            }\n            byteVar7 = *bytePtr2;\n            bytePtr3 = processedStringPtr;\n            while (byteVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar5 | boolVar4 | boolVar3))) {\n                  boolVar4 = false;\n                  boolVar5 = false;\n                  boolVar3 = false;\n                  goto LAB_001058e0;\n                }\n                if (!boolVar4) break;\n                bytePtr2 = bytePtr2 + 1;\n                *bytePtr3 = byteVar7;\n                bytePtr3 = bytePtr3 + 1;\n                boolVar4 = false;\n                byteVar7 = *bytePtr2;\n                if (byteVar7 == 0) goto LAB_001058e0;\n              }\n              if (byteVar7 == 0x5c) {\n                boolVar4 = true;\n              }\n              else if (boolVar3) {\n                if (byteVar7 == 0x27) {\n                  boolVar3 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr3 = byteVar7;\n                  bytePtr3 = bytePtr3 + 1;\n                }\n              }\n              else if (boolVar5) {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = false;\n              }\n              else if (byteVar7 == 0x27) {\n                boolVar3 = true;\n              }\n              else {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = true;\n              }\n              bytePtr1 = bytePtr2 + 1;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar7 = *bytePtr1;\n            }\nLAB_001058e0:\n            *bytePtr3 = 0;\n            longVar17 = xstrdup(processedStringPtr);\n            *filePathsPtr2 = longVar17;\n            sourcePtr[fileIndex + 1] = 0;\n            byteVar7 = *bytePtr2;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar7 = bytePtr2[1];\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            }\n            fileIndex = fileIndex + 1;\n          } while (byteVar7 != 0);\n          free(processedStringPtr);\n          filePathsPtr2 = filePathsPtr;\n          if (filePaths == filePathsPtr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        sourcePtr = (long *)xmalloc(8);\n        *sourcePtr = 0;\n        if (filePaths == filePathsPtr) {\nLAB_00105c79:\n          if (*filePathsPtr == 0) {\n            intVar10 = 0;\n          }\n          else {\n            fileIndex = 1;\n            do {\n              intVar10 = (int)fileIndex;\n              filePathsPtr2 = filePathsPtr + fileIndex;\n              fileIndex = fileIndex + 1;\n            } while (*filePathsPtr2 != 0);\n          }\n          longVar17 = 0;\n          filePathsPtr2 = (long *)xmalloc((long)(intVar10 + 1) << 3);\n          fileIndex = *filePathsPtr;\n          while (fileIndex != 0) {\n            uVar20 = xstrdup();\n            *(undefined8 *)((long)filePathsPtr2 + longVar17) = uVar20;\n            longVar17 = longVar17 + 8;\n            fileIndex = *(long *)((long)filePathsPtr + longVar17);\n          }\n          *(undefined8 *)((long)filePathsPtr2 + longVar17) = 0;\nLAB_0010597d:\n          filePathsPtr = filePathsPtr2;\n          if (*sourcePtr == 0) goto LAB_00105d50;\n          errorMessage = (char *)0x0;\n          do {\n            errorMessage = (char *)((long)errorMessage + 1);\n          } while (sourcePtr[(long)errorMessage] != 0);\n          localVar108 = (long)errorMessage * 8;\n        }\n        else {\nLAB_00105d50:\n          errorMessage = (char *)0x0;\n          localVar108 = 0;\n        }\n        free((void *)filePathsPtr[(long)resultPtr]);\n        filePathsPtr = (long *)xrealloc(filePathsPtr,(long)((long)errorMessage + (long)numFiles + 1) * 8);\n        intVar10 = numFiles + -1 + (int)errorMessage;\n        memmove(filePathsPtr + (long)(undefined **)((long)resultPtr + (long)errorMessage),\n                filePathsPtr + 1 + (long)resultPtr,(long)(numFiles - intVar12) << 3);\n        memcpy(filePathsPtr + (long)resultPtr,sourcePtr,localVar108);\n        free(sourcePtr);\n        free(stringPtr);\n        fclose(fileStream);\n        uintVar11 = localVar110 + 1;\n        resultPtr = (undefined **)((long)resultPtr + (long)errorMessage);\n        fileIndexPtr = optionIndexPtr;\n        numFiles = intVar10;\n        if (intVar10 <= (int)uintVar11) break;\n      }\n      fileIndexPtr = (int *)(ulong)uintVar11;\n    } while( true );\n  }\n  intVar12 = bfd_init();\n  errorMessage = \"fatal error: libbfd ABI mismatch\";\n  if (intVar12 != 0x118) goto LAB_00106085;\n  resultPtr = &PTR_s_debug_syms_0010b280;\n  charVar8 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  errorMessage = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  fileIndexPtr = (int *)\"x86_64-pc-linux-gnu\";\n  charVar9 = DAT_0010b23b;\n  charVar6 = DAT_0010b240;\n  uVar14 = DAT_0010b244;\n  if (charVar8 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uVar14;\n    DAT_0010b240 = charVar6;\n    DAT_0010b23b = charVar9;\n    uVar13 = getopt_long(numFiles,filePathsPtr,errorMessage);\n    optionIndexPtr = _optarg;\n    intPtr = (int *)errorMessage;\n    charVar9 = DAT_0010b23b;\n    charVar6 = DAT_0010b240;\n    uVar14 = DAT_0010b244;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      FUN_00103ca0(_stderr,1);\n      optionIndexPtr = fileIndexPtr;\nLAB_001061d5:\n      intVar12 = strcmp((char *)optionIndexPtr,\"l\");\n      if (intVar12 == 0) goto LAB_001061a3;\n      intVar12 = strcmp((char *)optionIndexPtr,\"escape\");\n      fileIndexPtr = optionIndexPtr;\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)optionIndexPtr,\"e\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 2;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)optionIndexPtr,\"invalid\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)optionIndexPtr,\"i\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 5;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)optionIndexPtr,\"hex\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)optionIndexPtr,\"x\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 3;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)optionIndexPtr,\"highlight\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)optionIndexPtr,\"h\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 4;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      errorMessage = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      FUN_00104370(&DAT_00107033);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      FUN_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      fileIndexPtr = (int *)&optarg;\n      DAT_0010b814 = 1;\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        intVar12 = cplus_demangle_name_to_style();\n        intPtr = _optarg;\n        if (intVar12 == 0) {\n          uVar20 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          FUN_00106300(uVar20,intPtr);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          errorMessage = (char *)intPtr;\n          charVar9 = DAT_0010b23b;\n          charVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar9 = DAT_0010b23b;\n          charVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      FUN_00104370(\"posix\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar12 = strcmp((char *)_optarg,\"32_64\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (intVar12 != 0) {\n        errorMessage = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uVar20 = dcgettext(0,errorMessage,5);\n        FUN_00106300(uVar20);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      FUN_00104370(_optarg);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      FUN_00104370(\"just-symbols\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar9 = *(char *)_optarg;\n      fileIndexPtr = optionIndexPtr;\n      charVar6 = charVar9;\n      uVar14 = 10;\n      if (charVar9 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar9) {\n        if (charVar9 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar9 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      errorMessage = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar12 = strcmp((char *)_optarg,\"default\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)optionIndexPtr,\"d\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 0;\n        fileIndexPtr = optionIndexPtr;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      else {\n        intVar12 = strcmp((char *)optionIndexPtr,\"locale\");\n        if (intVar12 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        fileIndexPtr = optionIndexPtr;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uVar20 = dcgettext(0,errorMessage,5);\n    FUN_00106300(uVar20,optionIndexPtr);\nLAB_00105f13:\n    fileIndex = *filePathsPtr;\n    errorMessage = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,errorMessage,fileIndex);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  uVar20 = bfd_errmsg(uVar14);\n  uVar21 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  FUN_00106300(uVar21,\"x86_64-pc-linux-gnu\",uVar20);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar7 = bytePtr2[1];\n  bytePtr2 = bytePtr2 + 1;\n  if (byteVar7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  resultPtr = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    errorMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(errorMessage);\n    errorMessage = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(errorMessage);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    uVar20 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    FUN_00106400(uVar20);\n    uVar20 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    FUN_00106400(uVar20);\n    return resultPtr;\n  }\n  errorMessage = &optind;\n  if (_optind != numFiles) {\n    if (1 < numFiles - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      intVar12 = *(int *)errorMessage;\n      if (numFiles <= intVar12) break;\n      fileIndex = filePathsPtr[intVar12];\n      *(int *)errorMessage = intVar12 + 1;\n      charVar9 = FUN_001043d0(fileIndex);\n      if (charVar9 != '\\0') {\n        intVar12 = *(int *)errorMessage;\n        if (numFiles <= intVar12) break;\n        fileIndex = filePathsPtr[intVar12];\n        *(int *)errorMessage = intVar12 + 1;\n        charVar9 = FUN_001043d0(fileIndex);\n        if (charVar9 != '\\0') {\n          intVar12 = *(int *)errorMessage;\n          while( true ) {\n            if (numFiles <= intVar12) goto LAB_00105bdd;\n            fileIndex = filePathsPtr[intVar12];\n            *(int *)errorMessage = intVar12 + 1;\n            charVar9 = FUN_001043d0(fileIndex);\n            if (charVar9 == '\\0') break;\n            intVar12 = *(int *)errorMessage;\n          }\n        }\n      }\n      resultPtr = (undefined **)(ulong)((int)resultPtr + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)resultPtr);\n  }\nLAB_0010613c:\n  uintVar11 = FUN_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uintVar11 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "memmove",
                "FUN_00103ca0",
                "memcpy",
                "ferror",
                "ftell",
                "bindtextdomain",
                "fseek",
                "textdomain",
                "xmalloc_set_program_name",
                "exit",
                "FUN_001043d0",
                "strcmp",
                "bfd_set_default_target",
                "xexit",
                "dcgettext",
                "stat",
                "strlen",
                "printf",
                "getopt_long",
                "fread",
                "cplus_demangle_set_style",
                "bfd_plugin_set_plugin",
                "xmalloc",
                "xstrdup",
                "free",
                "FUN_00104370",
                "FUN_00106300",
                "FUN_00106400",
                "xrealloc",
                "setlocale",
                "bfd_init",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "fclose",
                "fopen",
                "bfd_plugin_set_program_name",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_input_files_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_function_name_if_flag_is_zero_0010351b"
            },
            "code": "\nvoid print_function_name_if_flag_is_zero_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_function_name_if_flag_is_zero_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_debug_00103b2b",
                "param_1": "moduleName",
                "param_2": "functionName"
            },
            "code": "\nvoid printIfDebug_00103b2b(undefined8 moduleName,undefined8 functionName)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",moduleName,functionName);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_debug_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "formatString",
                "param_2": "ptrList",
                "param_3": "demangledString",
                "param_4": "paramSize",
                "puVar1": "ptrVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "iVar4": "intVar4",
                "sVar5": "stringSize",
                "pcVar6": "charPtr",
                "puVar7": "ptrVar2",
                "__ptr": "resultString",
                "uVar9": "ulongVar1",
                "uVar10": "ulongVar2",
                "puVar11": "ptrVar3",
                "puVar12": "ptrVar4",
                "__s": "charPtr2",
                "__s_00": "charPtr3",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "bVar15": "byteVar15",
                "acStack_39": "tmpStack"
            },
            "code": "\n\n\nvoid printFormattedString_00104740(char *formatString,long *ptrList,undefined8 *demangledString,long paramSize)\n\n{\n  undefined8 *ptrVar1;\n  byte byteVar2;\n  byte byteVar3;\n  int intVar4;\n  size_t stringSize;\n  char *charPtr;\n  undefined8 *ptrVar2;\n  char *pcVar8;\n  undefined8 *resultString;\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  undefined *ptrVar3;\n  undefined8 *ptrVar4;\n  char *charPtr2;\n  undefined8 *charPtr3;\n  long longVar;\n  uint uintVar;\n  byte byteVar15;\n  char tmpStack [9];\n  \n  byteVar15 = 0;\n  if (demangledString == (undefined8 *)0x0) {\n    demangledString = *(undefined8 **)(*ptrList + 0x10);\n    if (DAT_0010b234 == 0) {\n      FUN_00102739();\n      return;\n    }\nLAB_00104775:\n    ptrVar4 = demangledString;\n    if (DAT_0010b814 == 0) {\n      charPtr = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptrVar4 = demangledString;\n        resultString = (undefined8 *)0x0;\n      }\n      else {\n        resultString = (undefined8 *)0x0;\n        if (demangledString != (undefined8 *)0x0) goto LAB_0010269d;\n        ptrVar4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtr = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptrVar4 == '\\0') ||\n         (demangledString = (undefined8 *)bfd_demangle(paramSize,ptrVar4,DAT_0010b248),\n         demangledString == (undefined8 *)0x0)) {\n        demangledString = ptrVar4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        resultString = (undefined8 *)0x0;\n      }\n      else {\n        ptrVar4 = demangledString;\n        resultString = demangledString;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptrVar4 = demangledString;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(paramSize + 8) + 8) != 5) goto LAB_00104775;\n      charPtr = strchr((char *)demangledString,0x40);\n      if (charPtr == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (ptrList == (long *)0x0) {\n              resultString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            else {\n              if (ptrList[2] != 0) {\n                FUN_001047d0();\n                return;\n              }\n              resultString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtr = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          resultString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtr = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptrVar4 = demangledString;\n    resultString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteVar2 = *(byte *)demangledString;\n      demangledString = (undefined8 *)((long)demangledString + 1);\n      if (byteVar2 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) && (byteVar2 < 0xc0));\n    stringSize = strlen((char *)ptrVar4);\n    charPtr3 = DAT_0010b790;\n    if (_DAT_0010b798 < stringSize * 9) {\n      free(DAT_0010b790);\n      stringSize = strlen((char *)ptrVar4);\n      _DAT_0010b798 = stringSize * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      charPtr3 = DAT_0010b790;\n    }\n    while( true ) {\n      ptrVar2 = DAT_0010b790;\n      byteVar2 = *(byte *)ptrVar4;\n      ptrVar1 = (undefined8 *)((long)ptrVar4 + 1);\n      if (byteVar2 == 0) break;\n      if (((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) {\n        if ((byteVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)charPtr3 = byteVar2;\n          charPtr3 = (undefined8 *)((long)charPtr3 + 1);\n          ptrVar4 = ptrVar1;\n        }\n        else {\n          byteVar3 = *(byte *)((long)ptrVar4 + 1);\n          if ((byteVar3 & 0xc0) == 0x80) {\n            ptrVar2 = charPtr3;\n            if ((byteVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar4 = isatty(1);\n                if (intVar4 == 0) {\n                  byteVar3 = *(byte *)((long)ptrVar4 + 1);\n                }\n                else {\n                  *(undefined *)(charPtr3 + 1) = 0;\n                  *charPtr3 = 0x6d37343b31335b1b;\n                  byteVar3 = *(byte *)((long)ptrVar4 + 1);\n                  ptrVar2 = charPtr3 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptrVar2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptrVar4 >> 2 & 7),\n                        (ulong)((*(byte *)ptrVar4 & 3) << 6 | byteVar3 & 0x3f));\n                ptrVar2 = (undefined8 *)((long)ptrVar2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byteVar3 = *(byte *)((long)ptrVar4 + 2);\n              if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar1 = (ulong)uintVar; ulongVar1 != 0; ulongVar1 = ulongVar1 - 1) {\n                    *(undefined *)ptrVar2 = *(undefined *)ptrVar4;\n                    ptrVar4 = (undefined8 *)((long)ptrVar4 + (ulong)byteVar15 * -2 + 1);\n                    ptrVar2 = (undefined8 *)((long)ptrVar2 + (ulong)byteVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)charPtr3,\"%c\",ulongVar2);\n                  *(undefined *)((long)charPtr3 + 3) = 0;\n                  ptrVar2 = (undefined8 *)(longVar + (long)ptrVar4);\n                  *(undefined2 *)((long)charPtr3 + 1) = 0x7830;\n                  pcVar8 = (char *)((long)charPtr3 + 3);\n                  do {\n                    charPtr2 = pcVar8;\n                    byteVar2 = *(byte *)ptrVar4;\n                    ptrVar4 = (undefined8 *)((long)ptrVar4 + 1);\n                    sprintf(charPtr2,\"%02x\",(ulong)byteVar2);\n                    pcVar8 = charPtr2 + 2;\n                  } while (ptrVar4 != ptrVar2);\n                  ulongVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(charPtr2 + 2,\"%c\",ulongVar2);\n                  ptrVar2 = (undefined8 *)(charPtr2 + 3);\n                  break;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)ptrVar4 + 2);\n                  }\n                  else {\n                    *(undefined *)(charPtr3 + 1) = 0;\n                    *charPtr3 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)ptrVar4 + 2);\n                    ptrVar2 = charPtr3 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptrVar2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptrVar4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptrVar4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptrVar4 + 1) & 3) << 6 | byteVar3 & 0x3f));\n                  ptrVar2 = (undefined8 *)((long)ptrVar2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar4 = isatty(1), intVar4 != 0)) {\n                    *(undefined4 *)ptrVar2 = 0x6d305b1b;\n                    ptrVar2 = (undefined8 *)((long)ptrVar2 + 4);\n                    *(undefined *)ptrVar2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                byteVar3 = *(byte *)((long)ptrVar4 + 3);\n                if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)ptrVar4 + 3);\n                  }\n                  else {\n                    *(undefined *)(charPtr3 + 1) = 0;\n                    *charPtr3 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)ptrVar4 + 3);\n                    ptrVar2 = charPtr3 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar4 = sprintf((char *)ptrVar2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptrVar4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptrVar4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptrVar4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptrVar4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptrVar4 + 2) & 3) << 6 | byteVar3 & 0x3f));\n                  ptrVar2 = (undefined8 *)((long)ptrVar2 + (long)intVar4);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar1 = (ulong)(uint)((int)ptrVar2 - (int)charPtr3);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charPtr3 = byteVar2;\n            uintVar = 1;\n            ulongVar1 = 1;\n          }\n          charPtr3 = (undefined8 *)((long)charPtr3 + ulongVar1);\n          ptrVar4 = (undefined8 *)((long)ptrVar1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)charPtr3 = 0x5e;\n        *(byte *)((long)charPtr3 + 1) = byteVar2 + 0x40;\n        charPtr3 = (undefined8 *)((long)charPtr3 + 2);\n        ptrVar4 = ptrVar1;\n      }\n    }\n    *(undefined *)charPtr3 = 0;\n    ptrVar4 = ptrVar2;\n  }\njoined_r0x00104864:\n  if ((((ptrList != (long *)0x0) && (ptrList[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((pcVar8 = (char *)(**(code **)(*(long *)(paramSize + 8) + 0x220))\n                                  (paramSize,ptrList[2],0,tmpStack), pcVar8 != (char *)0x0 &&\n      (*pcVar8 != '\\0')))) {\n    ptrVar3 = &DAT_001071e0;\n    if ((tmpStack[0] == '\\0') && (*(long *)(ptrList[2] + 0x20) != 0x10c2a8)) {\n      ptrVar3 = &DAT_001071df;\n    }\n    resultString = (undefined8 *)reconcat(resultString,ptrVar4,ptrVar3,pcVar8,0);\n    ptrVar4 = resultString;\n  }\n  printf(formatString,ptrVar4);\n  if (charPtr != (char *)0x0) {\n    *charPtr = '@';\n  }\nLAB_001047ba:\n  free(resultString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001043d0",
                "FUN_001064b0",
                "FUN_00103b49"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "extract_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "dataPtr",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "local_d8": "localSize",
                "local_d4": "bufferSize",
                "local_d0": "argsPtr",
                "local_c8": "bufferPtr",
                "local_b8": "buffer",
                "local_b0": "var1",
                "local_a8": "var2",
                "local_a0": "var3",
                "local_98": "var4",
                "local_90": "var5",
                "local_88": "var6",
                "local_78": "var7",
                "local_68": "var8",
                "local_58": "var9",
                "local_48": "var10",
                "local_38": "var11",
                "local_28": "var12",
                "local_18": "var13"
            },
            "code": "\nvoid extractData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 dataPtr,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char in_AL;\n  undefined4 localSize;\n  undefined4 bufferSize;\n  undefined *argsPtr;\n  undefined *bufferPtr;\n  undefined buffer [8];\n  undefined8 var1;\n  undefined8 var2;\n  undefined8 var3;\n  undefined8 var4;\n  undefined8 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  undefined4 var9;\n  undefined4 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  \n  if (in_AL != '\\0') {\n    var6 = input1;\n    var7 = input2;\n    var8 = input3;\n    var9 = input4;\n    var10 = input5;\n    var11 = input6;\n    var12 = input7;\n    var13 = input8;\n  }\n  argsPtr = &stack0x00000008;\n  localSize = 8;\n  bufferPtr = buffer;\n  bufferSize = 0x30;\n  var1 = param10;\n  var2 = param11;\n  var3 = param12;\n  var4 = param13;\n  var5 = param14;\n  FUN_001063a0(dataPtr,&localSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00104d5b",
                "FUN_0010249f",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "extract_data_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *value1,undefined8 *value2)\n\n{\n  ulong result;\n  \n  if ((ulong)value1[1] < (ulong)value2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)value2[1] < (ulong)value1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*value1,*value2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "initialize_system_0010651a"
            },
            "code": "\nvoid initialize_system_0010651a(void)\n\n{\n  FUN_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_00103a66",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "initialize_system_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_information_001053c0",
                "param_1": "symbolInformation",
                "param_2": "printWidth",
                "iVar1": "errorThreshold",
                "cVar2": "isUndefinedSymclass",
                "uVar3": "printValue",
                "lVar4": "address"
            },
            "code": "\nvoid printSymbolInformation_001053c0(long *symbolInformation,undefined8 printWidth)\n\n{\n  int errorThreshold;\n  char isUndefinedSymclass;\n  undefined8 printValue;\n  long address;\n  \n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbolInformation + 8));\n  errorThreshold = DAT_0010b7a8;\n  if (isUndefinedSymclass == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        printValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        FUN_00106300(printValue,errorThreshold);\n        goto LAB_00103623;\n      }\n      printValue = *(undefined8 *)*symbolInformation;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolInformation[2] == 0) {\n          address = symbolInformation[1];\n        }\n        else {\n          address = *(long *)(symbolInformation[2] + 0x38);\n        }\n        FUN_001054d0(address);\n        if (DAT_0010b7ec != 0) {\n          FUN_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      printValue = *(undefined8 *)*symbolInformation;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,printValue);\n    if (DAT_0010b7ec != 0) {\n      FUN_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInformation + 8));\n  if (*(char *)(*symbolInformation + 8) != '-') {\n    FUN_00104740(&DAT_0010712c,symbolInformation,0,printWidth);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolInformation + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInformation + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolInformation + 0x20));\n  FUN_00104740(&DAT_0010712c,symbolInformation,0,printWidth);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001035a2",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_information_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbolData",
                "param_2": "additionalInfo",
                "cVar1": "isUndefinedSymbol"
            },
            "code": "\nvoid printSymbolInfo_001064b0(long *symbolData,undefined8 additionalInfo)\n\n{\n  char isUndefinedSymbol;\n  \n  FUN_00104740(&DAT_00107363,symbolData,0,additionalInfo);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  if (isUndefinedSymbol != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  FUN_001054d0(*(undefined8 *)*symbolData);\n  putchar(0x20);\n  if (symbolData[2] == 0) {\n    if (symbolData[1] != 0) {\n      FUN_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(symbolData[2] + 0x38) != 0) {\n    FUN_001054d0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "putchar",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001047d0",
                "FUN_0010351b",
                "FUN_00103463",
                "FUN_00102f19",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00105110",
                "FUN_00102f7b",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001054d0",
                "FUN_00102739",
                "FUN_001036a7",
                "FUN_00103b2b",
                "FUN_001062d0",
                "FUN_00103abf",
                "FUN_00103573",
                "FUN_00102670",
                "FUN_001036e0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "initialize_data_00103b49",
                "param_1": "dataPointer",
                "param_2": "size"
            },
            "code": "\nvoid initializeData_00103b49(undefined8 dataPointer,undefined8 size)\n\n{\n  FUN_00104740(&DAT_0010712d,dataPointer,0,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbols_00103abf",
                "param_1": "fileName",
                "param_2": "symbolName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbols_00103abf(undefined8 fileName,undefined8 symbolName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,fileName,symbolName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "in_RAX": "result",
                "iVar1": "function_result",
                "auVar2": "output_data"
            },
            "code": "\nundefined  [16] calculate_result_00103bf6(void)\n\n{\n  int function_result;\n  undefined8 result;\n  undefined output_data [16];\n  \n  function_result = FUN_00104fa0();\n  output_data._0_4_ = -function_result;\n  output_data._4_4_ = 0;\n  output_data._8_8_ = result;\n  return output_data;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "targetList",
                "unaff_RBX": "outputFile",
                "plVar3": "currentTarget",
                "in_stack_00000008": "exitCode",
                "pcVar2": "message"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long lVar1;\n  char *message;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitCode;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,message);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    lVar1 = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (lVar1 == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "decompiled_function_00102c19",
                "pcVar1": "pointer1",
                "pcVar2": "pointer2",
                "cVar3": "character",
                "iVar4": "integer",
                "uVar5": "unsignedVar",
                "uVar6": "unsignedVar",
                "lVar7": "longVar",
                "puVar8": "pointer3",
                "lVar9": "longVar",
                "puVar10": "pointer4",
                "unaff_RBX": "registerBX",
                "__ptr": "pointer5",
                "unaff_RBP": "registerBP",
                "puVar11": "pointer6",
                "puVar12": "pointer7",
                "puVar13": "pointer8",
                "puVar14": "pointer9",
                "unaff_R12": "register12",
                "puVar15": "pointer10",
                "unaff_R13": "register13",
                "unaff_R14": "register14",
                "unaff_R15": "register15",
                "bVar16": "boolean1",
                "bVar17": "boolean2",
                "unaff_retaddr": "registerRetAddr",
                "uVar18": "unsignedVar",
                "in_stack_00000008": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000018": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\n\n\nvoid decompiledFunction_00102c19(void)\n\n{\n  char *pointer1;\n  code *pointer2;\n  char character;\n  int integer;\n  uint unsignedVar;\n  undefined8 unsignedVar;\n  long longVar;\n  undefined8 *pointer3;\n  long longVar;\n  undefined8 *pointer4;\n  undefined8 *registerBX;\n  undefined8 *pointer5;\n  undefined8 *registerBP;\n  undefined8 *pointer6;\n  undefined8 *pointer7;\n  undefined8 *in_R8;\n  undefined8 *pointer8;\n  undefined8 *in_R9;\n  undefined8 *pointer9;\n  undefined8 *register12;\n  undefined8 *pointer10;\n  undefined8 *register13;\n  undefined8 *register14;\n  undefined8 *register15;\n  bool boolean1;\n  byte boolean2;\n  ulong registerRetAddr;\n  ulong unsignedVar;\n  undefined8 stackVar1;\n  undefined8 *stackVar2;\n  undefined8 *stackVar3;\n  undefined8 stackVar4;\n  void *stackVar5;\n  undefined8 *stackVar6;\n  \n  boolean2 = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (registerBX != register13) {\n      if (register14 == (undefined8 *)0x8) {\n        *registerBX = *register13;\n        FUN_001049c0();\n        return;\n      }\n      for (; register14 != (undefined8 *)0x0; register14 = (undefined8 *)((long)register14 + -1)) {\n        *(undefined *)registerBX = *(undefined *)register13;\n        register13 = (undefined8 *)((long)register13 + (ulong)boolean2 * -2 + 1);\n        registerBX = (undefined8 *)((long)registerBX + (ulong)boolean2 * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    registerBX = (undefined8 *)((long)registerBX + (long)register14);\nLAB_001049c3:\n    do {\n      do {\n        register13 = (undefined8 *)((long)register13 + (long)register14);\n        pointer10 = register12;\n        pointer7 = registerBP;\n        if (register12 <= register13) goto LAB_00104b15;\nLAB_001049cf:\n        pointer3 = (undefined8 *)\n                 (**(code **)(registerBP[1] + 0x270))\n                           (registerBP,registerRetAddr & 0xffffffff,register13,register15);\n        pointer6 = registerBP;\n        pointer7 = register13;\n        pointer10 = register15;\n        if (pointer3 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pointer1 = (char *)pointer3[1];\n        if (((pointer1 == (char *)0x0) || (*pointer1 != '_')) || (pointer1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          unsignedVar = (uint)(pointer3[4] == 0x10c2a8);\nLAB_00104af9:\n          if (unsignedVar != 0) goto LAB_00104a2d;\n          register13 = (undefined8 *)((long)register13 + (long)register14);\n          pointer10 = register12;\n          pointer7 = registerBP;\n          if (register12 <= register13) {\nLAB_00104b15:\n            registerBX = (undefined8 *)((long)registerBX - (long)stackVar3);\n            if (register14 == (undefined8 *)0x8) {\n              longVar = pointer7[1];\n              pointer6 = (undefined8 *)((long)registerBX + 7);\n              if (-1 < (long)registerBX) {\n                pointer6 = registerBX;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              pointer2 = *(code **)(longVar + 0x208);\n              pointer6 = (undefined8 *)((long)pointer6 >> 3);\n            }\n            else {\n              pointer6 = (undefined8 *)((long)registerBX / (long)register14);\n              longVar = pointer7[1];\n              pointer2 = *(code **)(longVar + 0x208);\n            }\n            registerBP = pointer7;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointer7;\n              DAT_0010b770 = (undefined8 *)(*pointer2)(pointer7);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointer7[1] + 0x208))(pointer7);\n              registerBX = stackVar6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*pointer7);\n                pointer5 = register15;\n                goto LAB_00102d8e;\n              }\n              register12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                unsignedVar = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVar6,(size_t)pointer6,(size_t)register12,FUN_00102fd2);\n                pointer10 = (undefined8 *)xmalloc((long)pointer6 << 4);\n                pointer8 = DAT_0010b770;\n                registerBP = DAT_0010b768;\n                register14 = (undefined8 *)((long)pointer6 * (long)register12 + (long)registerBX);\n                pointer3 = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (register14 <= registerBX) goto LAB_00102ec2;\n                pointer6 = (undefined8 *)\n                          (**(code **)(pointer7[1] + 0x270))(pointer7,unsignedVar & 0xffffffff,registerBX);\n                pointer5 = registerBX;\n                in_R8 = register12;\n                stackVar2 = pointer10;\n                if (pointer6 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVar6,(size_t)pointer6,(size_t)register12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar = pointer7[1];\n            }\n            pointer5 = (undefined8 *)0x0;\n            do {\n              pointer7 = stackVar6;\n              pointer3 = (undefined8 *)(ulong)DAT_0010b7f8;\n              register14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer10 = (undefined8 *)(**(code **)(longVar + 0x208))(registerBP);\n                if (pointer10 == (undefined8 *)0x0) goto LAB_00102ed2;\n                registerBX = pointer5 + (long)pointer6 * 2;\n                pointer6 = pointer5;\n                do {\n                  if (registerBX <= pointer6) {\nLAB_00104c75:\n                    if (stackVar5 == (void *)0x0) {\n                      free(stackVar6);\n                      free(pointer5);\n                      return;\n                    }\n                    free(stackVar5);\n                    free(stackVar6);\n                    free(pointer5);\n                    return;\n                  }\n                  pointer3 = pointer10;\n                  longVar = (**(code **)(registerBP[1] + 0x270))(registerBP,register14,*pointer6);\n                  if (longVar == 0) {\n                    FUN_00106530(*registerBP,0);\nLAB_00102ed2:\n                    pointer7 = (undefined8 *)*registerBP;\n                    FUN_00106530();\n                    pointer8 = in_R8;\n                    pointer9 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  pointer7 = pointer6 + 1;\n                  pointer6 = pointer6 + 2;\n                  FUN_00105110(registerBP,longVar,*pointer7,stackVar1);\n                } while( true );\n              }\n              register12 = (undefined8 *)(ulong)stackVar4._4_4_;\n              register15 = (undefined8 *)(**(code **)(longVar + 0x208))(registerBP);\n              if (register15 == (undefined8 *)0x0) {\n                FUN_00106530(*registerBP);\n                pointer7 = register12;\n                if (DAT_0010b80c == 0) {\n                  longVar = (**(code **)(registerBP[1] + 0x350))(registerBP);\n                  pointer6 = stackVar6;\n                  pointer10 = register12;\n                  if (longVar < 1) {\n                    pointer3 = (undefined8 *)0x0;\n                    registerBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    registerBX = (undefined8 *)xmalloc();\n                    pointer3 = (undefined8 *)(**(code **)(registerBP[1] + 0x358))(registerBP,registerBX);\n                    pointer7 = pointer10;\n                    if ((long)pointer3 < 0) {\n                      pointer7 = (undefined8 *)*registerBP;\n                      pointer6 = (undefined8 *)FUN_00106530(pointer7,pointer10);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer3 = register12;\n                  registerBX = stackVar6;\n                  pointer6 = (undefined8 *)0x0;\n                  pointer10 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = registerBX;\n                longVar = (**(code **)(registerBP[1] + 0x360))(registerBP,pointer10,pointer6,pointer3);\n                register12 = pointer7;\n                if (0 < longVar) {\n                  register12 = (undefined8 *)((long)pointer7 + longVar);\n                  stackVar6 = (undefined8 *)xrealloc(stackVar6);\n                  longVar = 0;\n                  do {\n                    stackVar6[(long)((long)pointer7 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)stackVar5);\n                    longVar = longVar + 1;\n                  } while (longVar != longVar);\n                  stackVar6[(long)((long)pointer7 + longVar)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (registerBX != (undefined8 *)0x0)) {\n                  free(registerBX);\n                }\n                if ((*(byte *)((long)registerBP + 0x4a) & 0x10) != 0) {\n                  registerBX = (undefined8 *)*registerBP;\n                  DAT_0010b230 = '\\0';\n                  unsignedVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(unsignedVar);\n                }\n                register14 = (undefined8 *)(ulong)stackVar4._4_4_;\n                boolean1 = DAT_0010b80c != 0;\n                pointer6 = (undefined8 *)(ulong)boolean1;\n                pointer3 = stackVar6;\n                stackVar3 = stackVar6;\n                register15 = (undefined8 *)(**(code **)(registerBP[1] + 0x208))(registerBP);\n                if (register15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer6 = (undefined8 *)((long)pointer6 * (long)register12 + (long)pointer7);\n                registerBX = pointer7;\n                while( true ) {\n                  if (pointer6 <= registerBX) goto LAB_00104c75;\n                  pointer3 = register15;\n                  longVar = (**(code **)(registerBP[1] + 0x270))(registerBP,register14,registerBX);\n                  if (longVar == 0) break;\n                  registerBX = (undefined8 *)((long)registerBX + (long)register12);\n                  FUN_00105110(registerBP,longVar,0,stackVar1);\n                }\n                FUN_00106530(*registerBP,0);\n              }\n              FUN_00106530(*registerBP);\n              pointer7 = registerBP;\n              pointer10 = register15;\nLAB_00102eb0:\n              FUN_00106530(*pointer6);\nLAB_00102eb9:\n              FUN_00106530(*pointer7);\nLAB_00102ec2:\n              pointer6 = (undefined8 *)0x0;\n              pointer5 = registerBX;\n              in_R8 = register12;\n              pointer8 = pointer3;\n              registerBP = in_R9;\n              stackVar2 = pointer10;\nLAB_00104e35:\n              while (in_R9 = pointer8, pointer5 < register14) {\n                registerBX = (undefined8 *)((long)pointer5 + (long)in_R8);\n                if (registerBX < register14) {\n                  pointer3 = registerBP;\n                  pointer8 = in_R8;\n                  pointer9 = in_R9;\n                  pointer4 = (undefined8 *)(**(code **)(pointer7[1] + 0x270))();\n                  if (pointer4 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointer9;\n                    in_R8 = pointer8;\n                    pointer7 = (undefined8 *)*pointer7;\n                    pointer4 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    pointer3 = (undefined8 *)pointer6[4];\n                    if ((*(uint *)(pointer6 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar = pointer6[2];\nLAB_00102ee7:\n                  if (pointer3 == (undefined8 *)pointer4[4]) {\n                    longVar = pointer4[2] - longVar;\n                    pointer8 = registerBP;\n                    pointer9 = pointer5;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar = pointer3[8] - longVar;\n                  pointer8 = registerBP;\n                  pointer9 = pointer5;\n                }\n                else {\n                  pointer3 = (undefined8 *)pointer6[4];\n                  if ((*(uint *)(pointer6 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar = pointer6[2];\n                    pointer4 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer4 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer8 = registerBP;\n                  pointer9 = pointer5;\n                  if (*(int *)(pointer7[1] + 8) == 5) {\n                    longVar = pointer6[7];\n                  }\n                  else {\n                    longVar = pointer6[2];\n                    if ((*(byte *)((long)pointer3 + 0x25) & 0x10) == 0) {\n                      if (registerBX < register14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer6 = pointer4;\n                pointer5 = registerBX;\n                registerBP = in_R9;\n                if (longVar != 0) {\n                  *pointer10 = pointer9;\n                  pointer10[1] = longVar;\n                  pointer10 = pointer10 + 2;\n                }\n              }\n              pointer6 = (undefined8 *)((long)pointer10 - (long)stackVar2 >> 4);\n              qsort(stackVar2,(size_t)pointer6,0x10,FUN_00103533);\n              longVar = pointer7[1];\n              registerBX = pointer5;\n              registerBP = pointer7;\n              pointer5 = stackVar2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        integer = strcmp(pointer1 + (pointer1[2] == '_'),\"__gnu_lto_slim\");\n        stackVar2 = pointer3;\n        if (integer == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVar2 = (undefined8 *)*registerBP;\n            DAT_0010b230 = '\\0';\n            unsignedVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(unsignedVar,stackVar2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          unsignedVar = (*(uint *)(pointer3 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer3 + 3) & 0x800082) == 0) && (pointer3[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer3[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((pointer3[4] != 0x10c2a8) && (pointer3[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer3 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        character = (**(code **)(registerBP[1] + 0x230))(registerBP);\n        if (character != '\\0') {\n          decompiledFunction_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer3[4] == 0x10c2a8);\nLAB_00104cba:\n    character = (**(code **)(registerBP[1] + 0x230))(registerBP);\n    if (character != '\\0') {\n      decompiledFunction_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer10 = (undefined8 *)((long)register12 * (long)register14);\n  register12 = (undefined8 *)((long)stackVar3 + (long)pointer10);\n  registerBX = stackVar3;\n  pointer7 = registerBP;\n  if (stackVar3 < register12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  registerRetAddr = (ulong)boolean1;\n  register13 = stackVar3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decompiled_function_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_information_00106530",
                "in_R10": "inputValue",
                "iVar1": "error",
                "uVar2": "errorMsg",
                "lVar3": "errorCode"
            },
            "code": "\n\n\nvoid printErrorInformation_00106530(void)\n\n{\n  int error;\n  undefined8 errorMsg;\n  long errorCode;\n  undefined8 inputValue;\n  \n  FUN_00106540();\n  errorCode = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorCode,errorMsg,inputValue);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMsg,inputValue);\n  return;\n}\n\n",
            "called": [
                "FUN_00106540",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "FUN_001043d0",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "print_error_information_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "FUNC_0010268b"
            },
            "code": "\n\n\nvoid FUNC_0010268b(void)\n\n{\n  undefined8 *puVar1;\n  byte bVar2;\n  byte bVar3;\n  int iVar4;\n  size_t sVar5;\n  undefined8 *puVar6;\n  char *pcVar7;\n  ulong uVar8;\n  undefined8 uVar9;\n  undefined *puVar10;\n  undefined8 *puVar11;\n  long unaff_RBP;\n  undefined8 *puVar12;\n  undefined *unaff_R12;\n  undefined8 *unaff_R13;\n  long lVar13;\n  uint uVar14;\n  char *unaff_R14;\n  long unaff_R15;\n  byte bVar15;\n  char *__s;\n  undefined8 in_stack_00000038;\n  \n  bVar15 = 0;\n  puVar12 = unaff_R13;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      bVar2 = *(byte *)puVar12;\n      if (bVar2 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)bVar2 * 2] & 2) == 0) &&\n            (puVar12 = (undefined8 *)((long)puVar12 + 1), bVar2 < 0xc0));\n    sVar5 = strlen((char *)unaff_R13);\n    puVar12 = DAT_0010b790;\n    puVar11 = unaff_R13;\n    if (_DAT_0010b798 < sVar5 * 9) {\n      free(DAT_0010b790);\n      sVar5 = strlen((char *)unaff_R13);\n      _DAT_0010b798 = sVar5 * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      puVar12 = DAT_0010b790;\n    }\n    while( true ) {\n      unaff_R13 = DAT_0010b790;\n      bVar2 = *(byte *)puVar11;\n      puVar1 = (undefined8 *)((long)puVar11 + 1);\n      if (bVar2 == 0) break;\n      if (((&_sch_istable)[(ulong)bVar2 * 2] & 2) == 0) {\n        if ((bVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)puVar12 = bVar2;\n          puVar12 = (undefined8 *)((long)puVar12 + 1);\n          puVar11 = puVar1;\n        }\n        else {\n          bVar3 = *(byte *)((long)puVar11 + 1);\n          if ((bVar3 & 0xc0) == 0x80) {\n            puVar6 = puVar12;\n            if ((bVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uVar14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                lVar13 = 2;\n                goto LAB_00102917;\n              case 4:\n                iVar4 = isatty(1);\n                if (iVar4 == 0) {\n                  bVar3 = *(byte *)((long)puVar11 + 1);\n                }\n                else {\n                  *(undefined *)(puVar12 + 1) = 0;\n                  *puVar12 = 0x6d37343b31335b1b;\n                  bVar3 = *(byte *)((long)puVar11 + 1);\n                  puVar6 = puVar12 + 1;\n                }\n              case 2:\n                uVar14 = 2;\n                sprintf((char *)puVar6,\"\\\\u%02x%02x\",(ulong)((int)(uint)*(byte *)puVar11 >> 2 & 7),\n                        (ulong)((*(byte *)puVar11 & 3) << 6 | bVar3 & 0x3f));\n                puVar6 = (undefined8 *)((long)puVar6 + 6);\n                goto LAB_00102a27;\n              default:\n                uVar14 = 2;\n              }\n            }\n            else {\n              bVar3 = *(byte *)((long)puVar11 + 2);\n              if ((bVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((bVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uVar14 = 3;\nLAB_00102a62:\n                  for (uVar8 = (ulong)uVar14; uVar8 != 0; uVar8 = uVar8 - 1) {\n                    *(undefined *)puVar6 = *(undefined *)puVar11;\n                    puVar11 = (undefined8 *)((long)puVar11 + (ulong)bVar15 * -2 + 1);\n                    puVar6 = (undefined8 *)((long)puVar6 + (ulong)bVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  lVar13 = 3;\nLAB_00102917:\n                  uVar9 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar9 = 0x3c;\n                  }\n                  sprintf((char *)puVar12,\"%c\",uVar9);\n                  *(undefined *)((long)puVar12 + 3) = 0;\n                  puVar6 = (undefined8 *)(lVar13 + (long)puVar11);\n                  *(undefined2 *)((long)puVar12 + 1) = 0x7830;\n                  pcVar7 = (char *)((long)puVar12 + 3);\n                  do {\n                    __s = pcVar7;\n                    bVar2 = *(byte *)puVar11;\n                    puVar11 = (undefined8 *)((long)puVar11 + 1);\n                    sprintf(__s,\"%02x\",(ulong)bVar2);\n                    pcVar7 = __s + 2;\n                  } while (puVar11 != puVar6);\n                  uVar9 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar9 = 0x3e;\n                  }\n                  uVar14 = (uint)lVar13;\n                  sprintf(__s + 2,\"%c\",uVar9);\n                  puVar6 = (undefined8 *)(__s + 3);\n                  break;\n                case 4:\n                  iVar4 = isatty(1);\n                  if (iVar4 == 0) {\n                    bVar3 = *(byte *)((long)puVar11 + 2);\n                  }\n                  else {\n                    *(undefined *)(puVar12 + 1) = 0;\n                    *puVar12 = 0x6d37343b31335b1b;\n                    bVar3 = *(byte *)((long)puVar11 + 2);\n                    puVar6 = puVar12 + 1;\n                  }\n                case 2:\n                  uVar14 = 3;\n                  sprintf((char *)puVar6,\"\\\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)puVar11 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)puVar11 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)puVar11 + 1) & 3) << 6 | bVar3 & 0x3f));\n                  puVar6 = (undefined8 *)((long)puVar6 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (iVar4 = isatty(1), iVar4 != 0)) {\n                    *(undefined4 *)puVar6 = 0x6d305b1b;\n                    puVar6 = (undefined8 *)((long)puVar6 + 4);\n                    *(undefined *)puVar6 = 0;\n                  }\n                  break;\n                default:\n                  uVar14 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)puVar11 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uVar14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  lVar13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  iVar4 = isatty(1);\n                  if (iVar4 != 0) {\n                    *(undefined *)(puVar12 + 1) = 0;\n                    *puVar12 = 0x6d37343b31335b1b;\n                    puVar6 = puVar12 + 1;\n                  }\n                case 2:\n                  uVar14 = 4;\n                  iVar4 = sprintf((char *)puVar6,\"\\\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)puVar11 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)puVar11 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)puVar11 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)puVar11 + 2) >> 2 & 0xfU));\n                  puVar6 = (undefined8 *)((long)puVar6 + (long)iVar4);\n                  goto LAB_00102a27;\n                default:\n                  uVar14 = 4;\n                }\n              }\n            }\n            uVar8 = (ulong)(uint)((int)puVar6 - (int)puVar12);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)puVar12 = bVar2;\n            uVar14 = 1;\n            uVar8 = 1;\n          }\n          puVar12 = (undefined8 *)((long)puVar12 + uVar8);\n          puVar11 = (undefined8 *)((long)puVar1 + (ulong)(uVar14 - 1));\n        }\n      }\n      else {\n        *(undefined *)puVar12 = 0x5e;\n        *(byte *)((long)puVar12 + 1) = bVar2 + 0x40;\n        puVar12 = (undefined8 *)((long)puVar12 + 2);\n        puVar11 = puVar1;\n      }\n    }\n    *(undefined *)puVar12 = 0;\n  }\nLAB_0010485e:\n  puVar12 = (undefined8 *)0x0;\n  if ((((unaff_RBP != 0) && (*(long *)(unaff_RBP + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pcVar7 = (char *)(**(code **)(*(long *)(unaff_R15 + 8) + 0x220))\n                                  (unaff_R15,*(long *)(unaff_RBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pcVar7 != (char *)0x0 &&\n      (*pcVar7 != '\\0')))) {\n    puVar10 = &DAT_001071e0;\n    if ((in_stack_00000038._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaff_RBP + 0x10) + 0x20) != 0x10c2a8)) {\n      puVar10 = &DAT_001071df;\n    }\n    puVar12 = (undefined8 *)reconcat(0,unaff_R13,puVar10,pcVar7,0);\n    unaff_R13 = puVar12;\n  }\n  printf(unaff_R14,unaff_R13);\n  if (unaff_R12 != (undefined *)0x0) {\n    *unaff_R12 = 0x40;\n  }\n  free(puVar12);\n  return;\n}\n\n",
            "called": [
                "FUN_001047d0",
                "isatty",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUNC_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_return_value_00103bec",
                "in_RAX": "returnValue",
                "iVar1": "functionResult",
                "auVar2": "newReturnValue"
            },
            "code": "\nundefined  [16] calculateReturnValue_00103bec(void)\n\n{\n  int functionResult;\n  undefined8 returnValue;\n  undefined newReturnValue [16];\n  \n  functionResult = FUN_00105050();\n  newReturnValue._0_4_ = -functionResult;\n  newReturnValue._4_4_ = 0;\n  newReturnValue._8_8_ = returnValue;\n  return newReturnValue;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_return_value_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(stdoutStream);\n  fprintf(stderrStream,\"%s: \",DAT_0010b820);\n  vfprintf(stderrStream,errorMessage,arguments);\n  putc(10,stderrStream);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106400",
                "FUN_00106300"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_decompiled_code_00102739",
                "unaff_RBP": "rbp",
                "unaff_R13": "r13",
                "unaff_R14": "r14",
                "unaff_R15": "r15",
                "unaff_R1": "r1",
                "uVar10": "tempVar10",
                "uVar9": "tempVar9",
                "bVar15": "tempVar15",
                "_sch_istable": "sch_istable",
                "pcVar6": "pointerVar1",
                "pcVar8": "pointerVar2",
                "__s": "tempVarS",
                "__ptr": "pointerVar3",
                "iVar4": "tempVar4",
                "lVar13": "tempVar13",
                "puVar1": "pointerVar4",
                "puVar7": "pointerVar5",
                "puVar12": "pointerVar6",
                "bVar2": "tempVar2",
                "bVar3": "tempVar3",
                "sVar5": "tempVar5",
                "uVar14": "tempVar14"
            },
            "code": "\n\n\nvoid printDecompiledCode_00102739(void)\n\n{\n  undefined8 *pointerVar4;\n  byte tempVar2;\n  byte tempVar3;\n  int tempVar4;\n  size_t tempVar5;\n  char *pointerVar1;\n  undefined8 *pointerVar5;\n  char *pointerVar2;\n  undefined8 *pointerVar3;\n  ulong tempVar9;\n  undefined8 tempVar10;\n  undefined *pointerVar41;\n  long rbp;\n  undefined8 *pointerVar6;\n  undefined8 *r13;\n  long tempVar13;\n  uint tempVar14;\n  char *r14;\n  long r15;\n  byte tempVar15;\n  char *tempVarS;\n  undefined8 in_stack_00000038;\n  \n  tempVar15 = 0;\n  pointerVar6 = r13;\n  if (*(int *)(*(long *)(r15 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      pointerVar1 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    pointerVar1 = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      pointerVar3 = (undefined8 *)0x0;\n    }\n    else {\n      pointerVar3 = (undefined8 *)0x0;\n      if (r13 != (undefined8 *)0x0) goto LAB_0010269d;\n      pointerVar3 = (undefined8 *)0x0;\n      r13 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  pointerVar1 = strchr((char *)r13,0x40);\n  if (pointerVar1 == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (rbp == 0) {\n        pointerVar3 = (undefined8 *)0x0;\n        printf(r14);\n      }\n      else {\n        if (*(long *)(rbp + 0x10) != 0) {\n          FUN_001047d0();\n          return;\n        }\n        pointerVar3 = (undefined8 *)0x0;\n        printf(r14);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    pointerVar6 = r13;\n    pointerVar3 = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      tempVar2 = *(byte *)pointerVar6;\n      if (tempVar2 == 0) goto joined_r0x00104799;\n    } while ((((&sch_istable)[(ulong)tempVar2 * 2] & 2) == 0) &&\n            (pointerVar6 = (undefined8 *)((long)pointerVar6 + 1), tempVar2 < 0xc0));\n    tempVar5 = strlen((char *)r13);\n    pointerVar6 = DAT_0010b790;\n    if (_DAT_0010b798 < tempVar5 * 9) {\n      free(DAT_0010b790);\n      tempVar5 = strlen((char *)r13);\n      _DAT_0010b798 = tempVar5 * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointerVar6 = DAT_0010b790;\n    }\n    while( true ) {\n      pointerVar5 = DAT_0010b790;\n      tempVar2 = *(byte *)r13;\n      pointerVar4 = (undefined8 *)((long)r13 + 1);\n      if (tempVar2 == 0) break;\n      if (((&sch_istable)[(ulong)tempVar2 * 2] & 2) == 0) {\n        if ((tempVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointerVar6 = tempVar2;\n          pointerVar6 = (undefined8 *)((long)pointerVar6 + 1);\n          r13 = pointerVar4;\n        }\n        else {\n          tempVar3 = *(byte *)((long)r13 + 1);\n          if ((tempVar3 & 0xc0) == 0x80) {\n            pointerVar5 = pointerVar6;\n            if ((tempVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                tempVar14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                tempVar13 = 2;\n                goto LAB_00102917;\n              case 4:\n                tempVar4 = isatty(1);\n                if (tempVar4 == 0) {\n                  tempVar3 = *(byte *)((long)r13 + 1);\n                }\n                else {\n                  *(undefined *)(pointerVar6 + 1) = 0;\n                  *pointerVar6 = 0x6d37343b31335b1b;\n                  tempVar3 = *(byte *)((long)r13 + 1);\n                  pointerVar5 = pointerVar6 + 1;\n                }\n              case 2:\n                tempVar14 = 2;\n                sprintf((char *)pointerVar5,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)r13 >> 2 & 7)\n                        ,(ulong)((*(byte *)r13 & 3) << 6 | tempVar3 & 0x3f));\n                pointerVar5 = (undefined8 *)((long)pointerVar5 + 6);\n                goto LAB_00102a27;\n              default:\n                tempVar14 = 2;\n              }\n            }\n            else {\n              tempVar3 = *(byte *)((long)r13 + 2);\n              if ((tempVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((tempVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar14 = 3;\nLAB_00102a62:\n                  for (tempVar9 = (ulong)tempVar14; tempVar9 != 0; tempVar9 = tempVar9 - 1) {\n                    *(undefined *)pointerVar5 = *(undefined *)r13;\n                    r13 = (undefined8 *)((long)r13 + (ulong)tempVar15 * -2 + 1);\n                    pointerVar5 = (undefined8 *)((long)pointerVar5 + (ulong)tempVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  tempVar13 = 3;\nLAB_00102917:\n                  tempVar10 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVar10 = 0x3c;\n                  }\n                  sprintf((char *)pointerVar6,\"%c\",tempVar10);\n                  *(undefined *)((long)pointerVar6 + 3) = 0;\n                  pointerVar5 = (undefined8 *)(tempVar13 + (long)r13);\n                  *(undefined2 *)((long)pointerVar6 + 1) = 0x7830;\n                  pointerVar2 = (char *)((long)pointerVar6 + 3);\n                  do {\n                    tempVarS = pointerVar2;\n                    tempVar2 = *(byte *)r13;\n                    r13 = (undefined8 *)((long)r13 + 1);\n                    sprintf(tempVarS,\"%02x\",(ulong)tempVar2);\n                    pointerVar2 = tempVarS + 2;\n                  } while (r13 != pointerVar5);\n                  tempVar10 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVar10 = 0x3e;\n                  }\n                  tempVar14 = (uint)tempVar13;\n                  sprintf(tempVarS + 2,\"%c\",tempVar10);\n                  pointerVar5 = (undefined8 *)(tempVarS + 3);\n                  break;\n                case 4:\n                  tempVar4 = isatty(1);\n                  if (tempVar4 == 0) {\n                    tempVar3 = *(byte *)((long)r13 + 2);\n                  }\n                  else {\n                    *(undefined *)(pointerVar6 + 1) = 0;\n                    *pointerVar6 = 0x6d37343b31335b1b;\n                    tempVar3 = *(byte *)((long)r13 + 2);\n                    pointerVar5 = pointerVar6 + 1;\n                  }\n                case 2:\n                  tempVar14 = 3;\n                  sprintf((char *)pointerVar5,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)r13 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)r13 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)r13 + 1) & 3) << 6 | tempVar3 & 0x3f));\n                  pointerVar5 = (undefined8 *)((long)pointerVar5 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (tempVar4 = isatty(1), tempVar4 != 0)) {\n                    *(undefined4 *)pointerVar5 = 0x6d305b1b;\n                    pointerVar5 = (undefined8 *)((long)pointerVar5 + 4);\n                    *(undefined *)pointerVar5 = 0;\n                  }\n                  break;\n                default:\n                  tempVar14 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)r13 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  tempVar13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  tempVar4 = isatty(1);\n                  if (tempVar4 != 0) {\n                    *(undefined *)(pointerVar6 + 1) = 0;\n                    *pointerVar6 = 0x6d37343b31335b1b;\n                    pointerVar5 = pointerVar6 + 1;\n                  }\n                case 2:\n                  tempVar14 = 4;\n                  tempVar4 = sprintf((char *)pointerVar5,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)r13 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)r13 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)r13 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)r13 + 2) >> 2 & 0xfU));\n                  pointerVar5 = (undefined8 *)((long)pointerVar5 + (long)tempVar4);\n                  goto LAB_00102a27;\n                default:\n                  tempVar14 = 4;\n                }\n              }\n            }\n            tempVar9 = (ulong)(uint)((int)pointerVar5 - (int)pointerVar6);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointerVar6 = tempVar2;\n            tempVar14 = 1;\n            tempVar9 = 1;\n          }\n          pointerVar6 = (undefined8 *)((long)pointerVar6 + tempVar9);\n          r13 = (undefined8 *)((long)pointerVar4 + (ulong)(tempVar14 - 1));\n        }\n      }\n      else {\n        *(undefined *)pointerVar6 = 0x5e;\n        *(byte *)((long)pointerVar6 + 1) = tempVar2 + 0x40;\n        pointerVar6 = (undefined8 *)((long)pointerVar6 + 2);\n        r13 = pointerVar4;\n      }\n    }\n    *(undefined *)pointerVar6 = 0;\n    r13 = pointerVar5;\n  }\n  else {\n    *pointerVar1 = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      pointerVar3 = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)r13 == '\\0') ||\n       (pointerVar6 = (undefined8 *)bfd_demangle(), pointerVar6 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      pointerVar3 = (undefined8 *)0x0;\n    }\n    else {\n      r13 = pointerVar6;\n      pointerVar3 = pointerVar6;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((rbp != 0) && (*(long *)(rbp + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointerVar2 = (char *)(**(code **)(*(long *)(r15 + 8) + 0x220))\n                                  (r15,*(long *)(rbp + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pointerVar2 != (char *)0x0 &&\n      (*pointerVar2 != '\\0')))) {\n    pointerVar41 = &DAT_001071e0;\n    if ((in_stack_00000038._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(rbp + 0x10) + 0x20) != 0x10c2a8)) {\n      pointerVar41 = &DAT_001071df;\n    }\n    pointerVar3 = (undefined8 *)reconcat(pointerVar3,r13,pointerVar41,pointerVar2,0);\n    r13 = pointerVar3;\n  }\n  printf(r14,r13);\n  if (pointerVar1 != (char *)0x0) {\n    *pointerVar1 = '@';\n  }\nLAB_001047ba:\n  free(pointerVar3);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001047d0",
                "FUN_0010268b",
                "bfd_demangle",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "print_decompiled_code_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "check_compilation_00105050",
                "param_1": "input1",
                "param_2": "input2",
                "__s": "string1",
                "__s_00": "string2",
                "lVar3": "length1",
                "uVar4": "flag1",
                "sVar5": "size1",
                "sVar6": "size2",
                "pcVar7": "compilationFlag1",
                "pcVar8": "compilationFlag2",
                "lVar9": "result1",
                "lVar10": "result2",
                "uVar11": "returnValue",
                "uVar12": "sum1",
                "uVar13": "sum2",
                "uVar14": "sum3",
                "uVar15": "pointer1",
                "unaff_R13": "pointer2",
                "bVar16": "compareFlag"
            },
            "code": "\nulong checkCompilation_00105050(undefined8 input1,undefined8 input2)\n\n{\n  char cVar1;\n  ulong uVar2;\n  char *string1;\n  char *string2;\n  long length1;\n  uint flag1;\n  size_t size1;\n  size_t size2;\n  char *compilationFlag1;\n  char *compilationFlag2;\n  long result1;\n  long result2;\n  ulong returnValue;\n  ulong sum1;\n  ulong sum2;\n  ulong sum3;\n  undefined8 pointer1;\n  long pointer2;\n  bool compareFlag;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,input1,DAT_0010b770);\n  returnValue = (ulong)DAT_0010b778;\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,returnValue,input2,DAT_0010b768);\n  if ((result1 != 0) && (result2 != 0)) {\n    length1 = *(long *)(result2 + 0x20);\n    if (*(long *)(result1 + 0x20) == 0x10c2a8) {\n      returnValue = 0xffffffff;\n      if (length1 == 0x10c2a8) {\nLAB_001050fa:\n        returnValue = FUN_00104fa0(input1,input2);\n        return returnValue;\n      }\n    }\n    else if (length1 == 0x10c2a8) {\n      returnValue = 1;\n    }\n    else {\n      sum2 = *(long *)(result1 + 0x10) + *(long *)(*(long *)(result1 + 0x20) + 0x30);\n      returnValue = *(long *)(result2 + 0x10) + *(long *)(length1 + 0x30);\n      if (sum2 == returnValue) goto LAB_001050fa;\n      returnValue = (ulong)(-(uint)(sum2 < returnValue) | 1);\n    }\n    return returnValue;\n  }\n  pointer1 = *DAT_0010b780;\n  FUN_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,returnValue,DAT_0010b768);\n  if ((result1 == 0) || (pointer2 = result2, result2 == 0)) {\n    result2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  sum2 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  sum3 = *(long *)(result1 + 0x10) + sum2;\n  sum1 = *(long *)(pointer2 + 0x10) + uVar2;\n  compareFlag = sum3 < sum1;\n  if ((sum3 != sum1) || (compareFlag = sum2 < uVar2, sum2 != uVar2)) {\n    return (ulong)(-(uint)compareFlag | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(pointer2 + 8);\n  size1 = strlen(string1);\n  size2 = strlen(string2);\n  compilationFlag1 = strstr(string1,\"gnu_compiled\");\n  if (compilationFlag1 == (char *)0x0) {\n    compilationFlag2 = strstr(string1,\"gcc2_compiled\");\n    compilationFlag1 = strstr(string2,\"gnu_compiled\");\n    if ((compilationFlag1 == (char *)0x0) && (compilationFlag1 = strstr(string2,\"gcc2_compiled\"), compilationFlag1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (compilationFlag2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    compilationFlag1 = strstr(string2,\"gnu_compiled\");\n    if (compilationFlag1 == (char *)0x0) {\n      compilationFlag2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (compilationFlag2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag1 = *(uint *)(pointer2 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((size1 < 3) || (string1[size1 - 2] != '.')) {\n      if (flag1 != 0) {\n        return 1;\n      }\n      if ((size2 < 3) || (string2[size2 - 2] != '.')) goto LAB_00103202;\n      compareFlag = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[size1 - 1];\n    compareFlag = cVar1 == 'o' || cVar1 == 'a';\n    if (flag1 == 0) {\n      if ((size2 < 3) || (string2[size2 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag1 != 0) goto LAB_00103202;\n    if (size2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[size2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    compareFlag = true;\nLAB_001031e7:\n    if ((string2[size2 - 1] != 'o') && (string2[size2 - 1] != 'a')) {\n      if (compareFlag) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!compareFlag) {\n    return 1;\n  }\nLAB_00103202:\n  returnValue = FUN_00104fa0(pointer1,returnValue);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "check_compilation_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "decompile_and_improve_001049c0",
                "pcVar1": "charPointer",
                "pcVar2": "codePointer",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "undefined8Var",
                "lVar7": "longVar",
                "puVar8": "undefined8Pointer1",
                "lVar9": "longVar2",
                "puVar10": "undefined8Pointer2",
                "unaff_RBX": "undefined8Pointer3",
                "__ptr": "undefined8Pointer4",
                "unaff_RBP": "undefined8Pointer5",
                "puVar11": "undefined8Pointer6",
                "puVar12": "undefined8Pointer7",
                "puVar13": "undefined8Pointer8",
                "in_R9": "undefined8Pointer9",
                "puVar14": "undefined8Pointer10",
                "puVar15": "undefined8Pointer11",
                "unaff_R12": "undefined8Pointer12",
                "unaff_R13": "undefined8Pointer13",
                "unaff_R14": "undefined8Pointer14",
                "unaff_R15": "undefined8Pointer15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongVar",
                "uVar18": "ulongVar2",
                "in_stack_00000008": "undefined8Var2",
                "in_stack_00000010": "undefined8Pointer16",
                "in_stack_00000018": "undefined8Pointer17",
                "in_stack_00000038": "undefined8Var3",
                "in_stack_00000040": "voidPointer",
                "in_stack_00000048": "undefined8Pointer18"
            },
            "code": "\nvoid decompile_and_improve_001049c0(void)\n\n{\n  char *charPointer;\n  code *codePointer;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 undefined8Var;\n  long longVar;\n  undefined8 *undefined8Pointer1;\n  long longVar2;\n  undefined8 *undefined8Pointer2;\n  undefined8 *undefined8Pointer3;\n  undefined8 *undefined8Pointer4;\n  undefined8 *undefined8Pointer5;\n  undefined8 *undefined8Pointer6;\n  undefined8 *undefined8Pointer7;\n  undefined8 *in_R8;\n  undefined8 *undefined8Pointer8;\n  undefined8 *undefined8Pointer9;\n  undefined8 *undefined8Pointer10;\n  undefined8 *undefined8Pointer11;\n  undefined8 *undefined8Pointer12;\n  undefined8 *undefined8Pointer13;\n  undefined8 *undefined8Pointer14;\n  undefined8 *undefined8Pointer15;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongVar;\n  ulong ulongVar2;\n  undefined8 undefined8Var2;\n  undefined8 *undefined8Pointer16;\n  undefined8 *undefined8Pointer17;\n  undefined8 undefined8Var3;\n  void *voidPointer;\n  undefined8 *undefined8Pointer18;\n  \n  byteVar = 0;\n  do {\n    undefined8Pointer3 = (undefined8 *)((long)undefined8Pointer3 + (long)undefined8Pointer14);\nLAB_001049c3:\n    do {\n      do {\n        undefined8Pointer13 = (undefined8 *)((long)undefined8Pointer13 + (long)undefined8Pointer14);\n        undefined8Pointer11 = undefined8Pointer12;\n        undefined8Pointer7 = undefined8Pointer5;\n        if (undefined8Pointer12 <= undefined8Pointer13) goto LAB_00104b15;\nLAB_001049cf:\n        undefined8Pointer1 = (undefined8 *)\n                 (**(code **)(undefined8Pointer5[1] + 0x270))\n                           (undefined8Pointer5,ulongVar & 0xffffffff,undefined8Pointer13,undefined8Pointer15);\n        undefined8Pointer6 = undefined8Pointer5;\n        undefined8Pointer7 = undefined8Pointer13;\n        undefined8Pointer11 = undefined8Pointer15;\n        if (undefined8Pointer1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        charPointer = (char *)undefined8Pointer1[1];\n        if (((charPointer == (char *)0x0) || (*charPointer != '_')) || (charPointer[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(undefined8Pointer1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          undefined8Pointer13 = (undefined8 *)((long)undefined8Pointer13 + (long)undefined8Pointer14);\n          undefined8Pointer11 = undefined8Pointer12;\n          undefined8Pointer7 = undefined8Pointer5;\n          if (undefined8Pointer12 <= undefined8Pointer13) {\nLAB_00104b15:\n            undefined8Pointer3 = (undefined8 *)((long)undefined8Pointer3 - (long)undefined8Pointer17);\n            if (undefined8Pointer14 == (undefined8 *)0x8) {\n              longVar2 = undefined8Pointer7[1];\n              undefined8Pointer6 = (undefined8 *)((long)undefined8Pointer3 + 7);\n              if (-1 < (long)undefined8Pointer3) {\n                undefined8Pointer6 = undefined8Pointer3;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              codePointer = *(code **)(longVar2 + 0x208);\n              undefined8Pointer6 = (undefined8 *)((long)undefined8Pointer6 >> 3);\n            }\n            else {\n              undefined8Pointer6 = (undefined8 *)((long)undefined8Pointer3 / (long)undefined8Pointer14);\n              longVar2 = undefined8Pointer7[1];\n              codePointer = *(code **)(longVar2 + 0x208);\n            }\n            undefined8Pointer5 = undefined8Pointer7;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = undefined8Pointer7;\n              DAT_0010b770 = (undefined8 *)(*codePointer)(undefined8Pointer7);\n              DAT_0010b768 = (undefined8 *)(**(code **)(undefined8Pointer7[1] + 0x208))(undefined8Pointer7);\n              undefined8Pointer3 = undefined8Pointer18;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*undefined8Pointer7);\n                undefined8Pointer4 = undefined8Pointer15;\n                goto LAB_00102d8e;\n              }\n              undefined8Pointer12 = (undefined8 *)(ulong)undefined8Var3._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar2 = (ulong)(DAT_0010b80c != 0);\n                qsort(undefined8Pointer18,(size_t)undefined8Pointer6,(size_t)undefined8Pointer12,FUN_00102fd2);\n                undefined8Pointer11 = (undefined8 *)xmalloc((long)undefined8Pointer6 << 4);\n                undefined8Pointer8 = DAT_0010b770;\n                undefined8Pointer5 = DAT_0010b768;\n                undefined8Pointer14 = (undefined8 *)((long)undefined8Pointer6 * (long)undefined8Pointer12 + (long)undefined8Pointer3);\n                undefined8Pointer1 = DAT_0010b770;\n                undefined8Pointer9 = DAT_0010b768;\n                if (undefined8Pointer14 <= undefined8Pointer3) goto LAB_00102ec2;\n                undefined8Pointer6 = (undefined8 *)\n                          (**(code **)(undefined8Pointer7[1] + 0x270))(undefined8Pointer7,ulongVar2 & 0xffffffff,undefined8Pointer3);\n                undefined8Pointer4 = undefined8Pointer3;\n                in_R8 = undefined8Pointer12;\n                undefined8Pointer16 = undefined8Pointer11;\n                if (undefined8Pointer6 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(undefined8Pointer18,(size_t)undefined8Pointer6,(size_t)undefined8Pointer12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar2 = undefined8Pointer7[1];\n            }\n            undefined8Pointer4 = (undefined8 *)0x0;\n            do {\n              undefined8Pointer7 = undefined8Pointer18;\n              undefined8Pointer1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              undefined8Pointer14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                undefined8Pointer11 = (undefined8 *)(**(code **)(longVar2 + 0x208))(undefined8Pointer5);\n                if (undefined8Pointer11 == (undefined8 *)0x0) goto LAB_00102ed2;\n                undefined8Pointer3 = undefined8Pointer4 + (long)undefined8Pointer6 * 2;\n                undefined8Pointer6 = undefined8Pointer4;\n                do {\n                  if (undefined8Pointer3 <= undefined8Pointer6) {\nLAB_00104c75:\n                    if (voidPointer == (void *)0x0) {\n                      free(undefined8Pointer18);\n                      free(undefined8Pointer4);\n                      return;\n                    }\n                    free(voidPointer);\n                    free(undefined8Pointer18);\n                    free(undefined8Pointer4);\n                    return;\n                  }\n                  undefined8Pointer1 = undefined8Pointer11;\n                  longVar2 = (**(code **)(undefined8Pointer5[1] + 0x270))(undefined8Pointer5,undefined8Pointer14,*undefined8Pointer6);\n                  if (longVar2 == 0) {\n                    FUN_00106530(*undefined8Pointer5,0);\nLAB_00102ed2:\n                    undefined8Pointer7 = (undefined8 *)*undefined8Pointer5;\n                    FUN_00106530();\n                    undefined8Pointer8 = in_R8;\n                    undefined8Pointer10 = undefined8Pointer9;\n                    goto LAB_00102edb;\n                  }\n                  undefined8Pointer7 = undefined8Pointer6 + 1;\n                  undefined8Pointer6 = undefined8Pointer6 + 2;\n                  FUN_00105110(undefined8Pointer5,longVar2,*undefined8Pointer7,undefined8Var2);\n                } while( true );\n              }\n              undefined8Pointer12 = (undefined8 *)(ulong)undefined8Var3._4_4_;\n              undefined8Pointer15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(undefined8Pointer5);\n              if (undefined8Pointer15 == (undefined8 *)0x0) {\n                FUN_00106530(*undefined8Pointer5);\n                undefined8Pointer7 = undefined8Pointer12;\n                if (DAT_0010b80c == 0) {\n                  longVar2 = (**(code **)(undefined8Pointer5[1] + 0x350))(undefined8Pointer5);\n                  undefined8Pointer6 = undefined8Pointer18;\n                  undefined8Pointer11 = undefined8Pointer12;\n                  if (longVar2 < 1) {\n                    undefined8Pointer1 = (undefined8 *)0x0;\n                    undefined8Pointer3 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    undefined8Pointer3 = (undefined8 *)xmalloc();\n                    undefined8Pointer1 = (undefined8 *)(**(code **)(undefined8Pointer5[1] + 0x358))(undefined8Pointer5,undefined8Pointer3);\n                    undefined8Pointer7 = undefined8Pointer11;\n                    if ((long)undefined8Pointer1 < 0) {\n                      undefined8Pointer7 = (undefined8 *)*undefined8Pointer5;\n                      undefined8Pointer6 = (undefined8 *)FUN_00106530(undefined8Pointer7,undefined8Pointer11);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  undefined8Pointer1 = undefined8Pointer12;\n                  undefined8Pointer3 = undefined8Pointer18;\n                  undefined8Pointer6 = (undefined8 *)0x0;\n                  undefined8Pointer11 = (undefined8 *)0x0;\n                }\n                undefined8Pointer9 = &stack0x00000040;\n                in_R8 = undefined8Pointer3;\n                longVar2 = (**(code **)(undefined8Pointer5[1] + 0x360))(undefined8Pointer5,undefined8Pointer11,undefined8Pointer6,undefined8Pointer1);\n                undefined8Pointer12 = undefined8Pointer7;\n                if (0 < longVar2) {\n                  undefined8Pointer12 = (undefined8 *)((long)undefined8Pointer7 + longVar2);\n                  undefined8Pointer18 = (undefined8 *)xrealloc(undefined8Pointer18);\n                  longVar = 0;\n                  do {\n                    undefined8Pointer18[(long)((long)undefined8Pointer7 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)voidPointer);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  undefined8Pointer18[(long)((long)undefined8Pointer7 + longVar2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (undefined8Pointer3 != (undefined8 *)0x0)) {\n                  free(undefined8Pointer3);\n                }\n                if ((*(byte *)((long)undefined8Pointer5 + 0x4a) & 0x10) != 0) {\n                  undefined8Pointer3 = (undefined8 *)*undefined8Pointer5;\n                  DAT_0010b230 = '\\0';\n                  undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(undefined8Var);\n                }\n                undefined8Pointer14 = (undefined8 *)(ulong)undefined8Var3._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                undefined8Pointer6 = (undefined8 *)(ulong)boolVar;\n                undefined8Pointer1 = undefined8Pointer18;\n                undefined8Pointer17 = undefined8Pointer18;\n                undefined8Pointer15 = (undefined8 *)(**(code **)(undefined8Pointer5[1] + 0x208))(undefined8Pointer5);\n                if (undefined8Pointer15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                undefined8Pointer6 = (undefined8 *)((long)undefined8Pointer6 * (long)undefined8Pointer12 + (long)undefined8Pointer7);\n                undefined8Pointer3 = undefined8Pointer7;\n                while( true ) {\n                  if (undefined8Pointer6 <= undefined8Pointer3) goto LAB_00104c75;\n                  undefined8Pointer1 = undefined8Pointer15;\n                  longVar2 = (**(code **)(undefined8Pointer5[1] + 0x270))(undefined8Pointer5,undefined8Pointer14,undefined8Pointer3);\n                  if (longVar2 == 0) break;\n                  undefined8Pointer3 = (undefined8 *)((long)undefined8Pointer3 + (long)undefined8Pointer12);\n                  FUN_00105110(undefined8Pointer5,longVar2,0,undefined8Var2);\n                }\n                FUN_00106530(*undefined8Pointer5,0);\n              }\n              FUN_00106530(*undefined8Pointer5);\n              undefined8Pointer7 = undefined8Pointer5;\n              undefined8Pointer11 = undefined8Pointer15;\nLAB_00102eb0:\n              FUN_00106530(*undefined8Pointer6);\nLAB_00102eb9:\n              FUN_00106530(*undefined8Pointer7);\nLAB_00102ec2:\n              undefined8Pointer6 = (undefined8 *)0x0;\n              undefined8Pointer4 = undefined8Pointer3;\n              in_R8 = undefined8Pointer12;\n              undefined8Pointer8 = undefined8Pointer1;\n              undefined8Pointer5 = undefined8Pointer9;\n              undefined8Pointer16 = undefined8Pointer11;\nLAB_00104e35:\n              while (undefined8Pointer9 = undefined8Pointer8, undefined8Pointer4 < undefined8Pointer14) {\n                undefined8Pointer3 = (undefined8 *)((long)undefined8Pointer4 + (long)in_R8);\n                if (undefined8Pointer3 < undefined8Pointer14) {\n                  undefined8Pointer1 = undefined8Pointer5;\n                  undefined8Pointer8 = in_R8;\n                  undefined8Pointer10 = undefined8Pointer9;\n                  undefined8Pointer2 = (undefined8 *)(**(code **)(undefined8Pointer7[1] + 0x270))();\n                  if (undefined8Pointer2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    undefined8Pointer9 = undefined8Pointer10;\n                    in_R8 = undefined8Pointer8;\n                    undefined8Pointer7 = (undefined8 *)*undefined8Pointer7;\n                    undefined8Pointer2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    undefined8Pointer1 = (undefined8 *)undefined8Pointer6[4];\n                    if ((*(uint *)(undefined8Pointer6 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = undefined8Pointer6[2];\nLAB_00102ee7:\n                  if (undefined8Pointer1 == (undefined8 *)undefined8Pointer2[4]) {\n                    longVar2 = undefined8Pointer2[2] - longVar2;\n                    undefined8Pointer8 = undefined8Pointer5;\n                    undefined8Pointer10 = undefined8Pointer4;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = undefined8Pointer1[8] - longVar2;\n                  undefined8Pointer8 = undefined8Pointer5;\n                  undefined8Pointer10 = undefined8Pointer4;\n                }\n                else {\n                  undefined8Pointer1 = (undefined8 *)undefined8Pointer6[4];\n                  if ((*(uint *)(undefined8Pointer6 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = undefined8Pointer6[2];\n                    undefined8Pointer2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  undefined8Pointer2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  undefined8Pointer8 = undefined8Pointer5;\n                  undefined8Pointer10 = undefined8Pointer4;\n                  if (*(int *)(undefined8Pointer7[1] + 8) == 5) {\n                    longVar2 = undefined8Pointer6[7];\n                  }\n                  else {\n                    longVar2 = undefined8Pointer6[2];\n                    if ((*(byte *)((long)undefined8Pointer1 + 0x25) & 0x10) == 0) {\n                      if (undefined8Pointer3 < undefined8Pointer14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                undefined8Pointer6 = undefined8Pointer2;\n                undefined8Pointer4 = undefined8Pointer3;\n                undefined8Pointer5 = undefined8Pointer9;\n                if (longVar2 != 0) {\n                  *undefined8Pointer11 = undefined8Pointer10;\n                  undefined8Pointer11[1] = longVar2;\n                  undefined8Pointer11 = undefined8Pointer11 + 2;\n                }\n              }\n              undefined8Pointer6 = (undefined8 *)((long)undefined8Pointer11 - (long)undefined8Pointer16 >> 4);\n              qsort(undefined8Pointer16,(size_t)undefined8Pointer6,0x10,FUN_00103533);\n              longVar2 = undefined8Pointer7[1];\n              undefined8Pointer3 = undefined8Pointer4;\n              undefined8Pointer5 = undefined8Pointer7;\n              undefined8Pointer4 = undefined8Pointer16;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(charPointer + (charPointer[2] == '_'),\"__gnu_lto_slim\");\n        undefined8Pointer16 = undefined8Pointer1;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            undefined8Pointer16 = (undefined8 *)*undefined8Pointer5;\n            DAT_0010b230 = '\\0';\n            undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(undefined8Var,undefined8Pointer16);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(undefined8Pointer1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(undefined8Pointer1 + 3) & 0x800082) == 0) && (undefined8Pointer1[4] != 0x10c2a8)) &&\n           ((*(byte *)(undefined8Pointer1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((undefined8Pointer1[4] != 0x10c2a8) && (undefined8Pointer1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(undefined8Pointer1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      undefined8Pointer9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(undefined8Pointer5[1] + 0x230))(undefined8Pointer5);\n        if (charVar != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (undefined8Pointer1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(undefined8Pointer5[1] + 0x230))(undefined8Pointer5);\n    if (charVar != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (undefined8Pointer3 != undefined8Pointer13) {\n      if (undefined8Pointer14 == (undefined8 *)0x8) {\n        *undefined8Pointer3 = *undefined8Pointer13;\n        decompile_and_improve_001049c0();\n        return;\n      }\n      for (; undefined8Pointer14 != (undefined8 *)0x0; undefined8Pointer14 = (undefined8 *)((long)undefined8Pointer14 + -1)) {\n        *(undefined *)undefined8Pointer3 = *(undefined *)undefined8Pointer13;\n        undefined8Pointer13 = (undefined8 *)((long)undefined8Pointer13 + (ulong)byteVar * -2 + 1);\n        undefined8Pointer3 = (undefined8 *)((long)undefined8Pointer3 + (ulong)byteVar * -2 + 1);\n      }\n      decompile_and_improve_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  undefined8Pointer11 = (undefined8 *)((long)undefined8Pointer12 * (long)undefined8Pointer14);\n  undefined8Pointer12 = (undefined8 *)((long)undefined8Pointer17 + (long)undefined8Pointer11);\n  undefined8Pointer3 = undefined8Pointer17;\n  undefined8Pointer7 = undefined8Pointer5;\n  if (undefined8Pointer17 < undefined8Pointer12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongVar = (ulong)boolVar;\n  undefined8Pointer13 = undefined8Pointer17;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "display_symbol_list_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "langString",
                "iVar2": "totalChars",
                "iVar3": "charsPrinted",
                "pcVar4": "text",
                "lVar5": "counter",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "currentTarget",
                "ppcVar8": "demanglerPointer",
                "pcVar9": "separator",
                "local_3c": "number",
                "fprintf": "printFormatted",
                "fputc": "writeChar",
                "free": "releaseMemory",
                "strlen": "getStringLength",
                "exit": "terminateExecution",
                "dcgettext": "getTranslatedText",
                "bfd_target_list": "getTargetList"
            },
            "code": "\nvoid displaySymbolList_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long langString;\n  int totalChars;\n  int charsPrinted;\n  char *text;\n  long counter;\n  size_t stringLength;\n  long *targetList;\n  long *currentTarget;\n  char **demanglerPointer;\n  char *separator;\n  uint number;\n  \n  langString = DAT_0010b820;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,text,langString);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    langString = 1;\n    do {\n      counter = langString;\n      langString = counter + 1;\n    } while (text[counter] == ' ');\n    number = (uint)counter;\n  }\n  else {\n    number = 0;\n  }\n  totalChars = fprintf(outputFile,\"%s\",text);\n  separator = \"\";\n  for (demanglerPointer = (char **)&libiberty_demanglers; *demanglerPointer != (char *)0x0; demanglerPointer = demanglerPointer + 3) {\n    stringLength = strlen(*demanglerPointer);\n    if (0x4a < (long)totalChars + stringLength) {\n      fprintf(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalChars = fprintf(outputFile,\"%.*s\",(ulong)number,text);\n    }\n    charsPrinted = fprintf(outputFile,\"%s\\\"%s\\\"\",separator,*demanglerPointer);\n    totalChars = totalChars + charsPrinted;\n    separator = \", \";\n  }\n  fputc(10,outputFile);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,text);\n  langString = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,text,langString);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    langString = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (langString == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminateExecution(exitCode);\n}\n\n",
            "called": [
                "bfd_target_list",
                "exit",
                "fseek",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "strlen",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "display_symbol_list_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_lto_object_00104d5b",
                "pcVar1": "name",
                "pcVar2": "functionPointer",
                "cVar3": "char",
                "iVar4": "comparisonResult",
                "uVar5": "flag",
                "uVar6": "result",
                "puVar7": "ptr",
                "lVar8": "length",
                "lVar9": "length2",
                "puVar10": "ptr2",
                "in_RCX": "args",
                "unaff_RBX": "ptr3",
                "__ptr": "pointer",
                "puVar11": "ptr4",
                "unaff_RBP": "ptr5",
                "puVar12": "ptr6",
                "in_R8": "args2",
                "puVar13": "ptr7",
                "in_R9": "args3",
                "puVar14": "ptr8",
                "puVar15": "ptr9",
                "unaff_R12": "ptr10",
                "unaff_R13": "ptr11",
                "unaff_R14": "ptr12",
                "unaff_R15": "ptr13",
                "bVar16": "flag2",
                "bVar17": "byte",
                "uVar18": "flag3",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "arg9",
                "in_stack_00000038": "stackVar",
                "param_13": "arg13",
                "param_14": "arg14"
            },
            "code": "\nvoid processLTOObject_00104d5b(void)\n\n{\n  char *name;\n  code *functionPointer;\n  char char;\n  int comparisonResult;\n  uint flag;\n  undefined8 result;\n  undefined8 *ptr;\n  long length;\n  long length2;\n  undefined8 *ptr2;\n  undefined8 *args;\n  undefined8 *ptr3;\n  undefined8 *pointer;\n  undefined8 *ptr4;\n  undefined8 *ptr5;\n  undefined8 *ptr6;\n  undefined8 *args2;\n  undefined8 *ptr7;\n  undefined8 *args3;\n  undefined8 *ptr8;\n  undefined8 *ptr9;\n  undefined8 *ptr10;\n  undefined8 *ptr11;\n  undefined8 *ptr12;\n  undefined8 *ptr13;\n  bool flag2;\n  byte byte;\n  ulong unaff_retaddr;\n  ulong flag3;\n  undefined8 arg7;\n  undefined8 *arg8;\n  undefined8 *arg9;\n  undefined8 stackVar;\n  void *arg13;\n  undefined8 *arg14;\n  \n  byte = 0;\n  do {\n    if ((args[4] != 0x10c2a8) && (args[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      ptr11 = (undefined8 *)((long)ptr11 + (long)ptr12);\n      ptr9 = ptr10;\n      ptr6 = ptr5;\n      if (ptr10 <= ptr11) goto LAB_00104b15;\nLAB_001049cf:\n      args = (undefined8 *)\n               (**(code **)(ptr5[1] + 0x270))\n                         (ptr5,unaff_retaddr & 0xffffffff,ptr11,ptr13);\n      ptr4 = ptr5;\n      ptr6 = ptr11;\n      ptr9 = ptr13;\n      if (args == (undefined8 *)0x0) goto LAB_00102eb0;\n      name = (char *)args[1];\n      if (((name == (char *)0x0) || (*name != '_')) || (name[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        flag = (uint)(args[4] == 0x10c2a8);\nLAB_00104af9:\n        if (flag != 0) goto LAB_00104a2d;\n        ptr11 = (undefined8 *)((long)ptr11 + (long)ptr12);\n        ptr9 = ptr10;\n        ptr6 = ptr5;\n        if (ptr10 <= ptr11) {\nLAB_00104b15:\n          ptr3 = (undefined8 *)((long)ptr3 - (long)arg9);\n          if (ptr12 == (undefined8 *)0x8) {\n            length2 = ptr6[1];\n            ptr4 = (undefined8 *)((long)ptr3 + 7);\n            if (-1 < (long)ptr3) {\n              ptr4 = ptr3;\n            }\n            args2 = (undefined8 *)(ulong)DAT_0010b800;\n            functionPointer = *(code **)(length2 + 0x208);\n            ptr4 = (undefined8 *)((long)ptr4 >> 3);\n          }\n          else {\n            ptr4 = (undefined8 *)((long)ptr3 / (long)ptr12);\n            length2 = ptr6[1];\n            functionPointer = *(code **)(length2 + 0x208);\n          }\n          ptr5 = ptr6;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = ptr6;\n            DAT_0010b770 = (undefined8 *)(*functionPointer)(ptr6);\n            DAT_0010b768 = (undefined8 *)(**(code **)(ptr6[1] + 0x208))(ptr6);\n            ptr3 = arg14;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              FUN_00106530(*ptr6);\n              pointer = ptr13;\n              goto LAB_00102d8e;\n            }\n            ptr10 = (undefined8 *)(ulong)stackVar._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              flag3 = (ulong)(DAT_0010b80c != 0);\n              qsort(arg14,(size_t)ptr4,(size_t)ptr10,FUN_00102fd2);\n              ptr9 = (undefined8 *)xmalloc((long)ptr4 << 4);\n              ptr7 = DAT_0010b770;\n              ptr5 = DAT_0010b768;\n              ptr12 = (undefined8 *)((long)ptr4 * (long)ptr10 + (long)ptr3);\n              args = DAT_0010b770;\n              args3 = DAT_0010b768;\n              if (ptr12 <= ptr3) goto LAB_00102ec2;\n              ptr4 = (undefined8 *)\n                        (**(code **)(ptr6[1] + 0x270))(ptr6,flag3 & 0xffffffff,ptr3);\n              pointer = ptr3;\n              args2 = ptr10;\n              arg8 = ptr9;\n              if (ptr4 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(arg14,(size_t)ptr4,(size_t)ptr10,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            length2 = ptr6[1];\n          }\n          pointer = (undefined8 *)0x0;\n          do {\n            ptr6 = arg14;\n            ptr = (undefined8 *)(ulong)DAT_0010b7f8;\n            ptr12 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              ptr9 = (undefined8 *)(**(code **)(length2 + 0x208))(ptr5);\n              if (ptr9 == (undefined8 *)0x0) goto LAB_00102ed2;\n              ptr3 = pointer + (long)ptr4 * 2;\n              ptr4 = pointer;\n              do {\n                if (ptr3 <= ptr4) {\nLAB_00104c75:\n                  if (arg13 != (void *)0x0) {\n                    free(arg13);\n                    free(arg14);\n                    free(pointer);\n                    return;\n                  }\n                  free(arg14);\n                  free(pointer);\n                  return;\n                }\n                ptr = ptr9;\n                length2 = (**(code **)(ptr5[1] + 0x270))(ptr5,ptr12,*ptr4);\n                if (length2 == 0) {\n                  FUN_00106530(*ptr5,0);\nLAB_00102ed2:\n                  ptr6 = (undefined8 *)*ptr5;\n                  FUN_00106530();\n                  ptr7 = args2;\n                  ptr8 = args3;\n                  goto LAB_00102edb;\n                }\n                ptr6 = ptr4 + 1;\n                ptr4 = ptr4 + 2;\n                FUN_00105110(ptr5,length2,*ptr6,arg7);\n              } while( true );\n            }\n            ptr10 = (undefined8 *)(ulong)stackVar._4_4_;\n            ptr13 = (undefined8 *)(**(code **)(length2 + 0x208))(ptr5);\n            if (ptr13 == (undefined8 *)0x0) {\n              FUN_00106530(*ptr5);\n              ptr6 = ptr10;\n              if (DAT_0010b80c == 0) {\n                length2 = (**(code **)(ptr5[1] + 0x350))(ptr5);\n                ptr4 = arg14;\n                ptr9 = ptr10;\n                if (length2 < 1) {\n                  ptr = (undefined8 *)0x0;\n                  ptr3 = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  ptr3 = (undefined8 *)xmalloc();\n                  ptr = (undefined8 *)(**(code **)(ptr5[1] + 0x358))(ptr5,ptr3);\n                  ptr6 = ptr9;\n                  if ((long)ptr < 0) {\n                    ptr6 = (undefined8 *)*ptr5;\n                    ptr4 = (undefined8 *)FUN_00106530(ptr6,ptr9);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                ptr = ptr10;\n                ptr3 = arg14;\n                ptr4 = (undefined8 *)0x0;\n                ptr9 = (undefined8 *)0x0;\n              }\n              args3 = &stack0x00000040;\n              args2 = ptr3;\n              length2 = (**(code **)(ptr5[1] + 0x360))(ptr5,ptr9,ptr4,ptr);\n              ptr10 = ptr6;\n              if (0 < length2) {\n                ptr10 = (undefined8 *)((long)ptr6 + length2);\n                arg14 = (undefined8 *)xrealloc(arg14);\n                length = 0;\n                do {\n                  arg14[(long)ptr6 + length] = (void *)(length * 0x30 + (long)arg13);\n                  length = length + 1;\n                } while (length2 != length);\n                arg14[(long)ptr6 + length2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (ptr3 != (undefined8 *)0x0)) {\n                free(ptr3);\n              }\n              if ((*(byte *)((long)ptr5 + 0x4a) & 0x10) != 0) {\n                ptr3 = (undefined8 *)*ptr5;\n                DAT_0010b230 = '\\0';\n                result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                FUN_00106400(result);\n              }\n              ptr12 = (undefined8 *)(ulong)stackVar._4_4_;\n              flag2 = DAT_0010b80c != 0;\n              ptr4 = (undefined8 *)(ulong)flag2;\n              args = arg14;\n              arg9 = arg14;\n              ptr13 = (undefined8 *)(**(code **)(ptr5[1] + 0x208))(ptr5);\n              if (ptr13 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              ptr4 = (undefined8 *)((long)ptr4 * (long)ptr10 + (long)ptr6);\n              ptr3 = ptr6;\n              while( true ) {\n                if (ptr4 <= ptr3) goto LAB_00104c75;\n                args = ptr13;\n                length2 = (**(code **)(ptr5[1] + 0x270))(ptr5,ptr12,ptr3);\n                if (length2 == 0) break;\n                ptr3 = (undefined8 *)((long)ptr3 + (long)ptr10);\n                FUN_00105110(ptr5,length2,0,arg7);\n              }\n              FUN_00106530(*ptr5,0);\n            }\n            FUN_00106530(*ptr5);\n            ptr6 = ptr5;\n            ptr9 = ptr13;\nLAB_00102eb0:\n            FUN_00106530(*ptr4);\nLAB_00102eb9:\n            FUN_00106530(*ptr6);\nLAB_00102ec2:\n            ptr4 = (undefined8 *)0x0;\n            pointer = ptr3;\n            args2 = ptr10;\n            ptr7 = args;\n            ptr5 = args3;\n            arg8 = ptr9;\nLAB_00104e35:\n            while (args3 = ptr7, pointer < ptr12) {\n              ptr3 = (undefined8 *)((long)pointer + (long)args2);\n              if (ptr3 < ptr12) {\n                ptr = ptr5;\n                ptr7 = args2;\n                ptr8 = args3;\n                ptr2 = (undefined8 *)(**(code **)(ptr6[1] + 0x270))();\n                if (ptr2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  args3 = ptr8;\n                  args2 = ptr7;\n                  ptr6 = (undefined8 *)*ptr6;\n                  ptr2 = (undefined8 *)FUN_00106530();\n                }\n                else {\n                  ptr = (undefined8 *)ptr4[4];\n                  if ((*(uint *)(ptr4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                length2 = ptr4[2];\nLAB_00102ee7:\n                if (ptr == (undefined8 *)ptr2[4]) {\n                  length2 = ptr2[2] - length2;\n                  ptr7 = ptr5;\n                  ptr8 = pointer;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                length2 = ptr[8] - length2;\n                ptr7 = ptr5;\n                ptr8 = pointer;\n              }\n              else {\n                ptr = (undefined8 *)ptr4[4];\n                if ((*(uint *)(ptr4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  length2 = ptr4[2];\n                  ptr2 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                ptr2 = (undefined8 *)0x0;\nLAB_00104e95:\n                ptr7 = ptr5;\n                ptr8 = pointer;\n                if (*(int *)(ptr6[1] + 8) == 5) {\n                  length2 = ptr4[7];\n                }\n                else {\n                  length2 = ptr4[2];\n                  if ((*(byte *)((long)ptr + 0x25) & 0x10) == 0) {\n                    if (ptr3 < ptr12) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              ptr4 = ptr2;\n              pointer = ptr3;\n              ptr5 = args3;\n              if (length2 != 0) {\n                *ptr9 = ptr8;\n                ptr9[1] = length2;\n                ptr9 = ptr9 + 2;\n              }\n            }\n            ptr4 = (undefined8 *)((long)ptr9 - (long)arg8 >> 4);\n            qsort(arg8,(size_t)ptr4,0x10,FUN_00103533);\n            length2 = ptr6[1];\n            ptr3 = pointer;\n            ptr5 = ptr6;\n            pointer = arg8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      comparisonResult = strcmp(name + (name[2] == '_'),\"__gnu_lto_slim\");\n      arg8 = args;\n      if (comparisonResult == 0) {\n        if (DAT_0010b230 != '\\0') {\n          arg8 = (undefined8 *)*ptr5;\n          DAT_0010b230 = '\\0';\n          result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(result,arg8);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        flag = (*(uint *)(args + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(args + 3) & 0x800082) == 0) && (args[4] != 0x10c2a8)) &&\n         ((*(byte *)(args[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(args + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  args3 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    char = (**(code **)(ptr5[1] + 0x230))(ptr5);\n    if (char != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  else {\n    if (args[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    char = (**(code **)(ptr5[1] + 0x230))(ptr5);\n    if (char != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  if (ptr3 != ptr11) {\n    if (ptr12 != (undefined8 *)0x8) {\n      for (; ptr12 != (undefined8 *)0x0; ptr12 = (undefined8 *)((long)ptr12 + -1)) {\n        *(undefined *)ptr3 = *(undefined *)ptr11;\n        ptr11 = (undefined8 *)((long)ptr11 + (ulong)byte * -2 + 1);\n        ptr3 = (undefined8 *)((long)ptr3 + (ulong)byte * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    *ptr3 = *ptr11;\n    FUN_001049c0();\n    return;\n  }\n  ptr3 = (undefined8 *)((long)ptr3 + (long)ptr12);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  ptr9 = (undefined8 *)((long)ptr10 * (long)ptr12);\n  ptr10 = (undefined8 *)((long)arg9 + (long)ptr9);\n  ptr3 = arg9;\n  ptr6 = ptr5;\n  if (arg9 < ptr10) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_retaddr = (ulong)flag2;\n  ptr11 = arg9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "xmalloc",
                "free",
                "FUN_00106400",
                "FUN_00105110",
                "xrealloc",
                "FUN_00102fd2",
                "FUN_00103533",
                "strcmp",
                "dcgettext",
                "FUN_00104d5b",
                "FUN_00102c19",
                "FUN_001049c0",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "errorCode",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "booleanFlag",
                "__arg": "localArg",
                "__format": "formatString",
                "local_d8": "errorCodeLocal",
                "local_d0": "bufferPointer"
            },
            "code": "\n\n\nvoid printErrorMessage_00106300(undefined4 errorCode,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char booleanFlag;\n  undefined4 *localArg;\n  char *formatString;\n  undefined4 errorCodeLocal;\n  undefined4 local_d4;\n  undefined *bufferPointer;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  localArg = &errorCodeLocal;\n  if (booleanFlag != '\\0') {\n    local_88 = errorCode;\n    local_78 = arg2;\n    local_68 = arg3;\n    local_58 = arg4;\n    local_48 = arg5;\n    local_38 = arg6;\n    local_28 = arg7;\n    local_18 = arg8;\n  }\n  bufferPointer = &stack0x00000008;\n  errorCodeLocal = 8;\n  local_c8 = local_b8;\n  local_d4 = 0x30;\n  local_b0 = param10;\n  local_a8 = param11;\n  local_a0 = param12;\n  local_98 = param13;\n  local_90 = param14;\n  FUN_001063a0();\n  formatString = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,formatString,localArg);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001053c0",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_condition_met_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_condition_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_condition_met_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorDescription",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorDescription)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_001043d0",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 82321,
    "layers": [
        [
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00104370",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00103573",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_00103a66",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_001048e0",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001054d0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00104740",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_001064b0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00102739",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00104d5b",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ]
    ],
    "locked_functions": []
}