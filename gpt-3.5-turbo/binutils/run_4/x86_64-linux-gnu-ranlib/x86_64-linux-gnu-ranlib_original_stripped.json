{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matched_address_00102cd9",
                "in_EAX": "inputValue",
                "iVar1": "comparisonResult",
                "unaff_RBX": "currentAddress",
                "param_7": "searchedAddress"
            },
            "code": "\nlong * findMatchedAddress_00102cd9(void)\n\n{\n  int inputValue;\n  int comparisonResult;\n  long *currentAddress;\n  undefined8 searchedAddress;\n  \n  searchedAddress = posname;\n  if (inputValue == 3) {\n    for (; *currentAddress != 0; currentAddress = (long *)(*currentAddress + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*currentAddress != (undefined8 *)0x0; currentAddress = (long *)(*currentAddress + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*currentAddress,searchedAddress);\n      if (comparisonResult == 0) {\n        if (inputValue != 2) {\n          return currentAddress;\n        }\n        return (long *)(*currentAddress + 0xf0);\n      }\n    }\n  }\n  return currentAddress;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_matched_address_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "useDefaultInfo",
                "param_4": "printHexAddress",
                "iVar1": "result",
                "ppcVar2": "filePtr",
                "pcVar3": "timeData",
                "uVar4": "fileType",
                "local_100": "fileTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "userReadPermission",
                "cStack_f1": "userWritePermission",
                "cStack_f0": "userExecutePermission",
                "cStack_ef": "groupReadPermission",
                "cStack_ee": "groupWritePermission",
                "cStack_ed": "groupExecutePermission",
                "cStack_ec": "othersReadPermission",
                "cStack_eb": "othersWritePermission",
                "cStack_ea": "othersExecutePermission",
                "local_e8": "formattedTime",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDeviceNumber",
                "uStack_98": "minorDeviceNumber",
                "uStack_88": "inodeNumber",
                "local_60": "currentTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char useDefaultInfo,char printHexAddress)\n\n{\n  int result;\n  char **filePtr;\n  char *timeData;\n  uint fileType;\n  time_t fileTime;\n  undefined filePermission;\n  char userReadPermission;\n  char userWritePermission;\n  char userExecutePermission;\n  char groupReadPermission;\n  char groupWritePermission;\n  char groupExecutePermission;\n  char othersReadPermission;\n  char othersWritePermission;\n  char othersExecutePermission;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined local_b8 [24];\n  uint fileSize;\n  uint majorDeviceNumber;\n  uint minorDeviceNumber;\n  undefined8 inodeNumber;\n  time_t currentTime;\n  \n  if (useDefaultInfo != '\\0') {\n    filePtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      filePtr = fileInfo;\n    }\n    result = (**(code **)(filePtr[1] + 0x1e8))(fileInfo,local_b8);\n    if (result == 0) {\n      fileTime = currentTime;\n      timeData = ctime(&fileTime);\n      if (timeData == (char *)0x0) {\n        timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeData);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeData + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      userReadPermission = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      userWritePermission = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecutePermission = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupReadPermission = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWritePermission = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecutePermission = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      othersReadPermission = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      othersWritePermission = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      othersExecutePermission = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (userExecutePermission == 'x') {\n          userExecutePermission = 's';\n        }\n        else {\n          userExecutePermission = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExecutePermission == 'x') {\n          groupExecutePermission = 's';\n        }\n        else {\n          groupExecutePermission = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (othersExecutePermission == 'x') {\n          othersExecutePermission = 't';\n        }\n        else {\n          othersExecutePermission = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&userReadPermission,(ulong)majorDeviceNumber,(ulong)minorDeviceNumber,inodeNumber,\n              formattedTime,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printHexAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "print_arelt_descr.cold",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "create_output_file_00105a68",
                "pcVar1": "outputDirectory",
                "pFVar2": "filePointer",
                "sVar3": "outputDirectoryLength"
            },
            "code": "\nvoid createOutputFile_00105a68(void)\n\n{\n  char *outputDirectory;\n  FILE *filePointer;\n  size_t outputDirectoryLength;\n  \n  outputDirectory = output_dir;\n  if (output_dir != (char *)0x0) {\n    outputDirectoryLength = strlen(output_dir);\n    if (outputDirectoryLength != 0) {\n      if (outputDirectory[outputDirectoryLength - 1] == '/') {\n        output_filename = (char *)concat(outputDirectory,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(outputDirectory,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  filePointer = fopen(output_filename,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "strlen",
                "xexit",
                "concat",
                "fopen",
                "printf",
                "open_output_file.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_and_print_entries_001032a8",
                "param_1": "entryArray",
                "param_2": "printFunction",
                "param_3": "entryNames",
                "param_4": "returnVal",
                "lVar1": "nextEntry",
                "uVar2": "currentName",
                "bVar3": "foundEntry",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "formatString",
                "plVar6": "nextEntry",
                "lVar7": "currentEntry",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 extractAndPrintEntries_001032a8(long *entryArray,code *printFunction,undefined8 *entryNames,undefined8 returnVal)\n\n{\n  long nextEntry;\n  undefined8 currentName;\n  bool foundEntry;\n  long *currentEntry;\n  int comparisonResult;\n  char *formatString;\n  long *nextEntry;\n  long currentEntry;\n  long *previousEntry;\n  \n  currentEntry = entryArray[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*printFunction)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntry = (long *)entryArray[0x1e];\n      previousEntry = entryArray;\n      while (nextEntry = currentEntry, nextEntry != (long *)0x0) {\n        if (*nextEntry != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*printFunction)(nextEntry,previousEntry);\n          }\n        }\n        previousEntry = nextEntry;\n        currentEntry = (long *)nextEntry[0x1e];\n      }\n      if (!foundEntry) {\n        currentName = *entryNames;\n        formatString = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,formatString,currentName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_and_print_entries_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_archive_usage_0010342d",
                "param_1": "isError",
                "uVar1": "programName",
                "pcVar2": "text",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveUsage_0010342d(uint isError)\n\n{\n  undefined8 programName;\n  char *text;\n  FILE *outputStream;\n  \n  text = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isError != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,text,program_name);\n  programName = program_name;\n  text = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,text,programName);\n  text = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,text);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (isError != 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isError ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "ar_emul_default_usage",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_archive_usage_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "pointer",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "localParam2",
                "local_a8": "localParam3",
                "local_a0": "localParam4",
                "local_98": "localParam5",
                "local_90": "localParam6",
                "local_88": "localInput1",
                "local_78": "localInput2",
                "local_68": "localInput3",
                "local_58": "localInput4",
                "local_48": "localInput5",
                "local_38": "localInput6",
                "local_28": "localInput7",
                "local_18": "localInput8"
            },
            "code": "\nvoid reportData_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *pointer;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 localParam2;\n  undefined8 localParam3;\n  undefined8 localParam4;\n  undefined8 localParam5;\n  undefined8 localParam6;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput3;\n  undefined4 localInput4;\n  undefined4 localInput5;\n  undefined4 localInput6;\n  undefined4 localInput7;\n  undefined4 localInput8;\n  \n  if (flag != '\\0') {\n    localInput1 = input1;\n    localInput2 = input2;\n    localInput3 = input3;\n    localInput4 = input4;\n    localInput5 = input5;\n    localInput6 = input6;\n    localInput7 = input7;\n    localInput8 = input8;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  buffer = localBuffer;\n  bufferSize = 0x30;\n  localParam2 = param2;\n  localParam3 = param3;\n  localParam4 = param4;\n  localParam5 = param5;\n  localParam6 = param6;\n  report(param1,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "main",
                "set_times.cold",
                "get_file_size",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_data_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main",
                "normalize.cold",
                "replace_members.cold",
                "print_contents",
                "make_tempname",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "create_output_file_00102e6f",
                "pcVar1": "output_dir",
                "in_RAX": "current_dir",
                "uVar2": "last_dir",
                "uVar3": "error_message",
                "pFVar4": "output_file",
                "sVar5": "output_dir_length",
                "pcVar6": "temp_dir"
            },
            "code": "\nvoid create_output_file_00102e6f(void)\n\n{\n  char *output_dir;\n  char *current_dir;\n  undefined8 last_dir;\n  undefined8 error_message;\n  FILE *output_file;\n  size_t output_dir_length;\n  char *temp_dir;\n  \n  output_dir = output_dir;\n  do {\n    current_dir = current_dir + 1;\n    while (*current_dir != '/') {\n      if (*current_dir == '\\0') {\n        if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n          if (output_dir[output_dir_length - 1] == '/') {\n            output_filename = (char *)concat(output_dir,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_dir,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        output_file = fopen(output_filename,\"w\");\n        if (output_file == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      temp_dir = current_dir;\n      if ((*current_dir == '.') && (temp_dir = current_dir + 1, current_dir[1] == '.')) {\n        temp_dir = current_dir + 2;\n        if ((current_dir[2] == '/') || (current_dir[2] == '\\0')) {\n          last_dir = lbasename();\n          output_dir = output_filename;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(error_message,output_dir,last_dir);\n          output_filename = (char *)last_dir;\n          create_output_file_00102e6f_00105a68();\n          return;\n        }\n      }\n      for (; (current_dir = temp_dir, *temp_dir != '\\0' && (*temp_dir != '/')); temp_dir = temp_dir + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "non_fatal",
                "dcgettext",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "bufferSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "dynamicMemory",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 bufferSize,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *dynamicMemory;\n  undefined returnValue [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamicMemory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamicMemory;\n  } while (dynamicMemory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,bufferSize);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = buffer;\n  return returnValue;\n}\n\n",
            "called": [
                "malloc",
                "yy_init_buffer",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_gmon_start_00102000",
                "ctx": "context",
                "iVar1": "result"
            },
            "code": "\nint initialize_gmon_start_00102000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_gmon_start_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "FUN_00105a68",
                "ranlib_only",
                "main",
                "maybequit",
                "fatal",
                "ranlib_usage",
                "write_archive.cold",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_00105870",
                "param_1": "fileList",
                "param_2": "fileCount",
                "param_3": "filename",
                "iVar1": "cmpResult",
                "iVar3": "fileType",
                "uVar2": "defaultFilename",
                "posname": "defaultFilename",
                "postype": "defaultFileType"
            },
            "code": "\nlong * findFile_00105870(long *fileList,int fileCount,undefined8 filename)\n\n{\n  int cmpResult;\n  undefined8 defaultFilename;\n  int fileType;\n  \n  defaultFilename = defaultFilename;\n  fileType = defaultFileType;\n  if (defaultFileType == 0) {\n    defaultFilename = filename;\n    fileType = fileCount;\n  }\n  if (fileType == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      cmpResult = filename_cmp(*(undefined8 *)*fileList,defaultFilename);\n      if (cmpResult == 0) {\n        if (fileType != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "find_file_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "print_ar_prompt_00103ba8",
                "interactive": "isInteractive",
                "printf": "print",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printARPrompt_00103ba8(void)\n\n{\n  if (isInteractive != 0) {\n    print(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_ar_prompt_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_description_00103ddc",
                "param_1": "param",
                "outfile": "output_file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_description_00103ddc(undefined8 param)\n\n{\n  print_arelt_descr(output_file,param,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "program_identifier"
            },
            "code": "\n\n\nvoid print_error_message_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",program_identifier);\n  vfprintf(standard_error,message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "fflush",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "linenumber": "lineNumber",
                "__format": "errorMessageFormat",
                "uVar1": "nextLineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint nextLineNumber;\n  char *errorMessageFormat;\n  \n  nextLineNumber = lineNumber + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)nextLineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "main",
                "open_inarch.cold",
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "initialize_buffer_stack_00103df9",
                "in_RCX": "inputParameter",
                "lVar1": "loopCounter",
                "lVar2": "newStackSize",
                "puVar3": "bufferPointer",
                "bVar4": "byteValue",
                "__size": "bufferSize"
            },
            "code": "\nundefined8 initializeBufferStack_00103df9(void)\n\n{\n  size_t bufferSize;\n  undefined8 inputParameter;\n  long loopCounter;\n  long newStackSize;\n  undefined4 *bufferPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  if (yy_buffer_stack == (void *)0x0) {\n    yy_buffer_stack = calloc(8,1);\n    if (yy_buffer_stack != (void *)0x0) {\n      yy_buffer_stack_max = 1;\n      yy_buffer_stack_top = 0;\n      return inputParameter;\n    }\n  }\n  else {\n    if (yy_buffer_stack_top < yy_buffer_stack_max - 1U) {\n      return inputParameter;\n    }\n    newStackSize = yy_buffer_stack_max + 8;\n    bufferSize = newStackSize * 8;\n    yy_buffer_stack = realloc(yy_buffer_stack,bufferSize);\n    if (yy_buffer_stack != (void *)0x0) {\n      bufferPointer = (undefined4 *)((long)yy_buffer_stack + (bufferSize - 0x40));\n      yy_buffer_stack_max = newStackSize;\n      for (loopCounter = 0x10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *bufferPointer = 0;\n        bufferPointer = bufferPointer + (ulong)byteValue * -2 + 1;\n      }\n      return inputParameter;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack()\");\n  yy_buffer_stack_top = 0;\n  yy_buffer_stack_max = 1;\n  return inputParameter;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_and_close_output_00102bf5",
                "output_bfd": "outputBufferedFD",
                "bfd_cache_close": "closeBfdCache",
                "output_file": "outputFile",
                "output_filename": "outputFileName"
            },
            "code": "\nvoid cleanupAndCloseOutput_00102bf5(void)\n\n{\n  if (outputBufferedFD != 0) {\n    closeBfdCache();\n  }\n  if (outputFile != (FILE *)0x0) {\n    fclose(outputFile);\n  }\n  unlink_if_ordinary(outputFileName);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_and_close_output_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "targetAddress"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(targetAddress *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main",
                "remove_output.cold",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_filename_00102943"
            },
            "code": "\nvoid initializeOutputFilename_00102943(void)\n\n{\n  output_filename = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "initialize_output_filename_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "errorMsg",
                "local_38": "modificationTime",
                "uStack_34": "accessTime",
                "uStack_30": "createTime",
                "uStack_2c": "changeTime",
                "local_28": "fileType"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 errorMsg;\n  undefined4 modificationTime;\n  undefined4 accessTime;\n  undefined4 createTime;\n  undefined4 changeTime;\n  undefined4 fileType;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  fileType = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  modificationTime = *(undefined4 *)(fileInfo + 0x48);\n  accessTime = *(undefined4 *)(fileInfo + 0x4c);\n  createTime = *(undefined4 *)(fileInfo + 0x50);\n  changeTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&modificationTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(errorMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "__format": "errorMsg",
                "uVar1": "fileType",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isExecutable",
                "uStack0000000000000015": "filePermission",
                "cStack0000000000000016": "permissionRead",
                "cStack0000000000000017": "permissionWrite",
                "param_9": "permissionExecute",
                "cStack0000000000000019": "permissionSetuid",
                "cStack000000000000001a": "permissionSetgid",
                "cStack000000000000001b": "permissionSticky",
                "cStack000000000000001c": "permissionOtherRead",
                "cStack000000000000001d": "permissionOtherWrite",
                "cStack000000000000001e": "permissionOtherExecute",
                "uStack000000000000001f": "shouldPrintHex",
                "param_19": "fileMode",
                "uStack000000000000006c": "inodeNumber",
                "param_20": "fileSize",
                "param_22": "lastModifiedTime"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *errorMsg;\n  uint fileType;\n  char **fileData;\n  FILE *outputFile;\n  char isExecutable;\n  undefined filePermission;\n  char permissionRead;\n  char permissionWrite;\n  char permissionExecute;\n  char permissionSetuid;\n  char permissionSetgid;\n  char permissionSticky;\n  char permissionOtherRead;\n  char permissionOtherWrite;\n  char permissionOtherExecute;\n  undefined shouldPrintHex;\n  uint fileMode;\n  uint inodeNumber;\n  uint fileSize;\n  undefined8 lastModifiedTime;\n  \n  errorMsg = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMsg);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    filePermission = 100;\n  }\n  else if (fileType == 0xa000) {\n    filePermission = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    filePermission = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    filePermission = 99;\n  }\n  else if (fileType == 0xc000) {\n    filePermission = 0x73;\n  }\n  else {\n    filePermission = 0x70;\n    if (fileType != 0x1000) {\n      filePermission = 0x2d;\n    }\n  }\n  permissionRead = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionWrite = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionExecute = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionSetuid = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionSetgid = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  permissionOtherRead = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  permissionOtherWrite = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  permissionOtherExecute = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permissionExecute == 'x') {\n      permissionExecute = 's';\n    }\n    else {\n      permissionExecute = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (permissionSticky == 'x') {\n      permissionSticky = 's';\n    }\n    else {\n      permissionSticky = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (permissionOtherExecute == 'x') {\n      permissionOtherExecute = 't';\n    }\n    else {\n      permissionOtherExecute = 'T';\n    }\n  }\n  shouldPrintHex = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)fileSize,lastModifiedTime,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileData,outputFile);\n  if (isExecutable != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "dcgettext",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "create_output_file_00105300",
                "param_1": "input_filename",
                "param_2": "output_file",
                "plVar1": "archived_file_pointer",
                "pcVar2": "output_filename",
                "bVar3": "conversion_flag",
                "cVar4": "format_check_flag",
                "iVar5": "return_value",
                "uVar6": "error_message",
                "uVar7": "message",
                "piVar8": "errno_location",
                "lVar9": "file_address",
                "puVar10": "input_file",
                "local_b0": "matching_formats",
                "local_a8": "file_info",
                "bfd_set_error": "set_bfd_error",
                "target": "target_name",
                "__errno_location": "get_errno",
                "fprintf": "print_error",
                "_stderr": "standard_error_stream",
                "perror": "print_error_message",
                "maybequit": "perform_cleanup",
                "open_inarch_cold": "open_input_file",
                "bfd_openw": "open_output_file",
                "bfd_set_format": "set_bfd_format",
                "bfd_close": "close_bfd",
                "silent_create": "silent_creation",
                "bfd_fatal": "fatal_bfd_error",
                "make_thin_archive": "thin_archive_creation",
                "fatal": "fatal_error",
                "dcgettext": "get_text",
                "bfd_nonfatal": "non_fatal_bfd_error",
                "bfd_get_error": "get_bfd_error",
                "list_matching_formats": "display_matching_formats",
                "xexit": "exit_program",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "bfd_openr": "open_bfd",
                "bfd_check_format_matches": "check_format_matches",
                "output_filename": "output_file_name",
                "operation_alters_arch": "arch_altering_operation",
                "operation": "current_operation",
                "program_name": "executable_name"
            },
            "code": "\n\n\nundefined8 * create_output_file_00105300(char *input_filename,undefined8 *output_file)\n\n{\n  long *archived_file_pointer;\n  char *output_filename;\n  byte conversion_flag;\n  char format_check_flag;\n  int return_value;\n  undefined8 error_message;\n  undefined8 message;\n  int *errno_location;\n  long file_address;\n  undefined8 *input_file;\n  undefined8 matching_formats;\n  stat file_info;\n  \n  set_bfd_error(0);\n  if (target_name == (char *)0x0) {\n    target_name = \"plugin\";\n  }\n  return_value = stat(input_filename,&file_info);\n  output_filename = output_file_name;\n  if (return_value == 0) goto LAB_001053be;\n  errno_location = get_errno();\n  if (*errno_location == 2) {\n    if (arch_altering_operation == '\\0') {\n      print_error(standard_error_stream,\"%s: \",executable_name);\n      print_error_message(input_filename);\n      perform_cleanup();\n      return (undefined8 *)0x0;\n    }\n    if ((target_name == (char *)0x0) && (output_file != (undefined8 *)0x0)) {\n      input_file = (undefined8 *)open_input_file();\n      return input_file;\n    }\n    output_file = (undefined8 *)open_output_file(input_filename,target_name);\n    if (((output_file != (undefined8 *)0x0) && (format_check_flag = set_bfd_format(output_file,2), format_check_flag != '\\0')) &&\n       (format_check_flag = close_bfd(output_file), format_check_flag != '\\0')) {\n      output_filename = input_filename;\n      if (silent_creation == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  fatal_bfd_error(input_filename);\n  do {\n    conversion_flag = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (thin_archive_creation == '\\0') {\n      if (conversion_flag != 0) {\n        message = *output_file;\n        error_message = get_text(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal_error(error_message,message);\n        goto LAB_00102812;\n      }\n    }\n    else if (conversion_flag == 0) {\n      message = *output_file;\n      error_message = get_text(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal_error(error_message,message);\nLAB_001027cb:\n      non_fatal_bfd_error(input_filename);\n      return_value = get_bfd_error();\n      if (return_value == 0xd) {\nLAB_00102812:\n        display_matching_formats(matching_formats);\n      }\n                    \n      exit_program(1);\n    }\n    do {\n      archived_file_pointer = output_file + 0x1e;\n      for (file_address = get_next_archived_file(output_file,0); file_address != 0;\n          file_address = get_next_archived_file(output_file,file_address)) {\n        *archived_file_pointer = file_address;\n        archived_file_pointer = (long *)(file_address + 0xf0);\n      }\n      *archived_file_pointer = 0;\n      return_value = get_bfd_error();\n      if (return_value == 9) {\n        return output_file;\n      }\n      do {\n        fatal_bfd_error(input_filename);\nLAB_00102826:\n        message = get_text(0,\"creating %s\",5);\n        non_fatal_error(message,input_filename);\n        output_filename = input_filename;\nLAB_001053be:\n        output_file_name = output_filename;\n        output_file = (undefined8 *)open_bfd(input_filename,target_name);\n      } while (output_file == (undefined8 *)0x0);\n      format_check_flag = check_format_matches(output_file,2,&matching_formats);\n      if (format_check_flag == '\\0') goto LAB_001027cb;\n    } while (((current_operation != 2) && (current_operation != 7)) ||\n            (file_address = get_next_archived_file(output_file,0), file_address == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_fatal",
                "perror",
                "fprintf",
                "stat",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "non_fatal",
                "list_matching_formats",
                "bfd_openw",
                "open_inarch.cold",
                "bfd_close",
                "maybequit",
                "fatal",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "xexit",
                "bfd_get_error",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_output_file_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVar",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "undefined4Var",
                "uVar7": "undefined4Var",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar2",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "undefined4Var2",
                "pFVar18": "filePointer",
                "sVar19": "sizeVar",
                "sVar20": "sizeVar2",
                "__ptr": "bytePointer2",
                "plVar21": "longPointer2",
                "pFVar22": "filePointer2",
                "pcVar23": "charPointer",
                "lVar24": "longVar",
                "uVar25": "ulongVar",
                "puVar26": "undefined8Pointer2",
                "uVar27": "undefined8Var",
                "pFVar28": "filePointer3",
                "plVar29": "longPointerPointer",
                "uVar30": "undefined8Var2",
                "uVar40": "ulongVar2",
                "uVar41": "ulongVar3",
                "uVar42": "ulongVar4",
                "uVar44": "uintVar2",
                "iVar45": "intVar2",
                "pcVar46": "charPointer3",
                "bVar47": "boolVar3",
                "bVar48": "byteVar3",
                "local_130": "undefined8Var3",
                "local_128": "filePointer4",
                "local_118": "bytePointer3",
                "local_110": "charPointerPointer2",
                "local_108": "sizeVar3",
                "local_100": "longVar2",
                "local_c8": "undefinedVar",
                "uStack_c6": "undefinedVar2",
                "uStack_c5": "undefined5Var",
                "local_b0": "uintVar3"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVar;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 undefined4Var;\n  undefined4 undefined4Var;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 undefined4Var2;\n  FILE *filePointer;\n  size_t sizeVar;\n  size_t sizeVar2;\n  byte *bytePointer2;\n  long *longPointer2;\n  FILE *filePointer2;\n  char *charPointer;\n  long longVar;\n  ulong ulongVar;\n  undefined8 *undefined8Pointer2;\n  undefined8 undefined8Var;\n  FILE *filePointer3;\n  long **plongPointerPointer;\n  undefined8 undefined8Var2;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined1 *puVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong ulongVar2;\n  ulong ulongVar3;\n  ulong ulongVar4;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar2;\n  int intVar2;\n  char *charPointer3;\n  bool boolVar3;\n  byte byteVar3;\n  undefined8 undefined8Var3;\n  FILE *filePointer4;\n  byte *bytePointer3;\n  char **charPointerPointer2;\n  size_t sizeVar3;\n  long longVar2;\n  undefined undefinedVar [2];\n  undefined undefinedVar2;\n  undefined5 undefined5Var;\n  uint uintVar3;\n  \n  byteVar3 = 0;\n  charPointer3 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)argv;\n  filePointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPointerPointer2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePointer4 = (FILE *)0x0;\n  filePointer2 = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar;\n    undefined8Var3 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePointer2;\n    if (**(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) == '@') {\n      uintVar2 = (int)charPointerPointer2 - 1;\n      charPointerPointer2 = (char **)(ulong)uintVar2;\n      if (uintVar2 == 0) {\n        longPointer2 = *(long **)filePointer2;\n        charPointer3 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,charPointer3,longPointer2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) + 1;\n      intVar = stat(pcVar39,(stat *)undefinedVar);\n      if (-1 < intVar) {\n        if ((uintVar3 & 0xf000) == 0x4000) {\n          longPointer2 = *(long **)filePointer2;\n          charPointer3 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer = fopen(pcVar39,\"r\");\n        if (filePointer != (FILE *)0x0) {\n          intVar = fseek(filePointer,0,2);\n          if (((intVar != -1) && (sizeVar = ftell(filePointer), sizeVar != 0xffffffffffffffff)) &&\n             (intVar = fseek(filePointer,0,0), intVar != -1)) {\n            bytePointer3 = (byte *)xmalloc(sizeVar + 1);\n            sizeVar2 = fread(bytePointer3,1,sizeVar,filePointer);\n            if ((sizeVar == sizeVar2) || (intVar = ferror(filePointer), intVar == 0)) {\n              bytePointer3[sizeVar2] = 0;\n              byteVar2 = *bytePointer3;\n              pbyteVar3 = bytePointer3;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sizeVar = strlen((char *)bytePointer3);\n              bytePointer2 = (byte *)xmalloc(sizeVar + 1);\n              filePointer3 = (FILE *)0x0;\n              intVar = 0;\n              boolVar2 = false;\n              boolVar3 = false;\n              boolVar1 = false;\n              longVar2 = 0;\n              pbyteVar3 = bytePointer3;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)longVar2)) {\n                  if (filePointer3 == (FILE *)0x0) {\n                    intVar = 8;\n                    filePointer3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    filePointer3 = (FILE *)xrealloc(filePointer3,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer3->_flags + longVar2 * 8);\n                }\n                byteVar2 = *pbyteVar3;\n                pbyteVar8 = bytePointer2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | boolVar3))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      boolVar3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar2;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar3;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar2 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar2;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePointer = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar2 = *bytePointer;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                longPointer2 = (long *)xstrdup(bytePointer2);\n                *ppcVar31 = (char *)longPointer2;\n                *(undefined8 *)(filePointer3->_shortbuf + longVar2 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                longVar2 = longVar2 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePointer2);\n                  if (filePointer2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePointer3);\n          }\n          fclose(filePointer);\n        }\n      }\n    }\n    if ((int)charPointer3 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = xatexit_head;\n            intVar = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = intVar + 1;\n            *(code **)(undefinedPointer + (long)intVar * 8 + 0x10) = remove_output;\n          }\n          else {\n            undefined8Pointer2 = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer2 != (undefined8 *)0x0) {\n              *undefined8Pointer2 = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer2 + 1) = 0;\n              xatexit_head = (undefined *)undefined8Pointer2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar = 1;\n          do {\n            lVar35 = longVar;\n            intVar = (int)charPointer3;\n            if (intVar <= (int)lVar35) break;\n            charVar = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            longVar = lVar35 + 1;\n          } while (charVar != '\\0');\n          charPointer3 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uintVar2 = intVar - ((int)lVar35 + -1);\n          filePointer = (FILE *)(ulong)uintVar2;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar = getopt_long(filePointer,charPointer3,\"DhHUvVt\",long_options), intVar != -1) {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar2 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar2 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)charPointer3 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVar = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (longVar = get_file_size(pcVar39), longVar < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uintVar2 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)charPointer3 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVar = open(pcVar39,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              bfd_fatal(pcVar39);\nLAB_0010737f:\n              bfd_fatal(pcVar39);\nLAB_00107387:\n              bfd_nonfatal(pcVar39);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                list_matching_formats\n                          (CONCAT53(undefined5Var,CONCAT12(undefinedVar2,CONCAT11(undefinedVar[1],undefinedVar[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,undefinedVar);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                uintPointer = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(undefined8Var,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(program_name);\n            sizeVar = strlen(pcVar39);\n            if ((sizeVar < 6) ||\n               (intVar = filename_cmp(pcVar39 + (sizeVar - 6),\"ranlib\"), intVar != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 = long_options;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer2 = (FILE *)unaff_RBP;\n          filePointer3 = filePointer;\n          if ((int)uintVar2 < 2) goto switchD_00107462_caseD_1;\n          undefined8Var3 = (FILE *)CONCAT71(undefined8Var3._1_7_,(char)uintVar);\nLAB_001063a3:\n          filePointer2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)charPointer3 + 8) != '-') {\n            undefinedVar[0] = 0x2d;\n            undefinedVar2 = 0;\n            sizeVar = strlen(*(char **)((long)charPointer3 + 8));\n            intVar = (int)sizeVar + (int)filePointer;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            undefined4Var2 = *(undefined4 *)((long)charPointer3 + 4);\n            unaff_R12->_flags = *(int *)charPointer3;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Var2;\n            ppcVar31 = *(char ***)((long)charPointer3 + 8);\n            filePointer4 = (FILE *)((long)charPointer3 + 0x10);\n            charPointerPointer2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePointer3 = undefinedVar;\n              undefinedVar[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefinedVar[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(bytePointer3);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefinedVar[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(bytePointer3);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    undefinedVar[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(bytePointer3);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    charPointerPointer2 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefinedVar[1] = charVar;\n                        charPointer = (char *)xstrdup(bytePointer3);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = charPointer;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        charPointerPointer2 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar = (long)(int)filePointer;\n            intPointer = (int *)charPointer3 + longVar * 2;\n            if (filePointer4 < intPointer) {\n              ulongVar = longVar * 8 - 0x11;\n              if ((ulongVar < 0x18) || (ppcVar32 == (char **)((long)charPointer3 + 0x18))) {\n                *ppcVar32 = *(char **)((long)charPointer3 + 0x10);\n                if (((char **)((long)charPointer3 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)charPointer3 + 0x18),\n                      (char **)((long)charPointer3 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)charPointer3 + 0x20),\n                      (char **)((long)charPointer3 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)charPointer3 + 0x28),\n                     (char **)((long)charPointer3 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)charPointer3 + 0x30),\n                    (char **)((long)charPointer3 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)charPointer3 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)charPointer3 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar3 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)byteVar3 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Var2 = *(undefined4 *)((long)((long)charPointer3 + 0x10) + 4);\n                undefined4Var = *(undefined4 *)((long)charPointer3 + 0x18);\n                undefined4Var = *(undefined4 *)((long)((long)charPointer3 + 0x18) + 4);\n                ulongVar2 = (ulongVar >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)charPointer3 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Var2;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Var;\n                undefined4Var2 = *(undefined4 *)((long)((long)charPointer3 + 0x20) + 4);\n                undefined4Var = *(undefined4 *)((long)charPointer3 + 0x28);\n                undefined4Var = *(undefined4 *)((long)((long)charPointer3 + 0x28) + 4);\n                ulongVar = ulongVar2 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)charPointer3 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Var2;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Var;\n                if (ulongVar != 2) {\n                  undefined4Var2 = *(undefined4 *)((long)((long)charPointer3 + 0x30) + 4);\n                  undefined4Var = *(undefined4 *)((long)charPointer3 + 0x38);\n                  undefined4Var = *(undefined4 *)((long)((long)charPointer3 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)charPointer3 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Var2;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Var;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Var;\n                  if (ulongVar != 3) {\n                    ulongVar3 = 3;\n                    do {\n                      ulongVar4 = ulongVar3 + 1;\n                      pcVar39 = (char *)((long)charPointer3 + 0x83) + ulongVar3 * 0x10 + -0x73;\n                      undefined4Var2 = *(undefined4 *)(pcVar39 + 4);\n                      undefined4Var = *(undefined4 *)(pcVar39 + 8);\n                      undefined4Var = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar3 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Var2;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Var;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Var;\n                      ulongVar3 = ulongVar4;\n                    } while (ulongVar4 != ulongVar);\n                  }\n                }\n                if ((ulongVar2 & 1) != 0) {\n                  ppcVar32[ulongVar2 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePointer4 + (ulongVar2 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar + -2;\n            }\n            filePointer = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            charPointer3 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uintVar2 = getopt_long((ulong)filePointer & 0xffffffff,charPointer3,filePointer2,puVar36,0);\n            unaff_RBP = (char *)filePointer2;\n            if (uintVar2 == 0xffffffff) break;\n            if (((uintVar2 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar2 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            filePointer3 = (FILE *)charPointer3;\n            if (uintVar2 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar2]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            charPointer3 = (char *)filePointer3;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uintVar2 = operation;\n          filePointer2 = (FILE *)unaff_RBP;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)filePointer <= _optind || (_optind < 1)))) {\n              uintVar2 = 0;\n              goto LAB_001066aa;\n            }\n            charPointer3 = (char *)((long)charPointer3 + (long)_optind * 8 + -8);\n            uintVar = (int)filePointer - (_optind + -1);\n            filePointer = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)undefined8Var3 & 0xff);\n          uintVar = (uint)unaff_R12;\n          puVar36 = (undefined1 *)((int *)charPointer3 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              filePointer3 = (FILE *)charPointer3;\n              if (*(long *)puVar36 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uintVar2 == 3) goto LAB_00106abc;\n                  if (uintVar2 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar2 == 3) || (uintVar2 == 0)) {\n                if (write_armap == 1) {\n                  undefined4Var2 = ranlib_only();\n                    \n                  xexit(undefined4Var2);\n                }\nLAB_00106abc:\n                if (uintVar2 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)puVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  intVar = (int)unaff_RBP;\n                  if (*(char **)((long)puVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(undefined8Var);\n                    uintVar2 = extraout_EDX;\nLAB_00107548:\n                    if (uintVar2 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar + 1);\n                  longVar = strtol(*(char **)((long)puVar36 + (long)intVar * 2 * 4),(char **)0x0,10);\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)longVar;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar = (long)(int)unaff_RBP;\n              filePointer2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)puVar36 + longVar * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer2 = (FILE *)((long)puVar36 + (longVar + 1) * 2 * 4);\n              if (*(FILE **)filePointer2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (longVar + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (longVar + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (longVar + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (longVar + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer;\n                  filePointer = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)puVar36 + longVar * 2 * 4) + (long)filePointer * 2) != 0\n                        );\n              }\n              undefined8Pointer2 = (undefined8 *)open_inarch();\n              filePointer = filePointer2;\n              if (operation == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer2 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePointer2;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(undefined8Pointer2,extract_file,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar = strlen(libdeps);\n                charPointer3 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sizeVar + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",undefined8Pointer2);\n                if (libdeps_bfd == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar = bfd_find_target(\"binary\",libdeps_bfd);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar != 0) {\n                    charVar = bfd_set_format(libdeps_bfd,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePointer3 = (FILE *)bfd_bwrite(libdeps,unaff_RBP,libdeps_bfd);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePointer3 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVar == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    undefined8Var3 = (FILE *)((long)(intVar + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(undefined8Var3,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      longVar = 0;\n                    }\n                    else {\n                      undefined4Var2 = *(undefined4 *)&filePointer2->field_0x4;\n                      *(int *)unaff_RBP = filePointer2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = undefined4Var2;\n                      longVar = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = undefined8Var3[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer2->_flags;\n                        filePointer2 = (FILE *)((long)filePointer2 + (ulong)byteVar3 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar3 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)undefined8Var3) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer2 = (FILE *)unaff_RBP;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                unaff_RBP = (char *)filePointer2;\n                if (filePointer2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePointer2;\n                if ((filePointer2 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(undefined8Pointer2,unaff_RBP,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_3:\n                map_over_members(undefined8Pointer2,print_descr,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_4:\n                map_over_members(undefined8Pointer2,print_contents,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer = (FILE *)(undefined8Pointer2 + 0x1e);\n                do {\n                  unaff_R12 = filePointer;\n                  if (*(FILE **)filePointer2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(undefined8Pointer2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer2 = *(long **)unaff_R12;\n                    charPointer3 = *(char **)filePointer2;\n                    if (longPointer2 == (long *)0x0) {\n                      undefined8Var = *undefined8Pointer2;\n                      undefined8Var2 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(undefined8Var2,charPointer3,undefined8Var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar = *longPointer2;\n                    undefined8Var = normalize(charPointer3,undefined8Pointer2);\n                    intVar = filename_cmp(undefined8Var,longVar);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer2[0x1e];\n                  plongPointerPointer = (long **)get_pos_bfd(filePointer,3,0);\n                  boolVar3 = verbose != 0;\n                  longPointer = *plongPointerPointer;\n                  *plongPointerPointer = longPointer2;\n                  longPointer2[0x1e] = (long)longPointer;\n                  if (boolVar3) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer2);\n                  }\n                  filePointer2 = (FILE *)&filePointer2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          interactive = isatty(intVar);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Var2 = bfd_get_error();\n        filePointer2 = (FILE *)bfd_errmsg(undefined4Var2);\n        undefined8Var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = fatal(undefined8Var,\"x86_64-pc-linux-gnu\",filePointer2);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          puVar36 = pcVar39;\n          filePointer3 = (FILE *)charPointer3;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePointer2;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePointer2;\nLAB_00106803:\n        undefined8Var = dcgettext(0,pcVar39,5);\n        fatal(undefined8Var);\nLAB_00106814:\n        intVar = (int)charPointer3;\n        filePointer3 = (FILE *)xmalloc(8);\n        *(long **)filePointer3 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            longVar = 1;\n            do {\n              intVar = (int)longVar;\n              lVar35 = longVar * 2;\n              longVar = longVar + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          filePointer2 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          longPointer2 = *(long **)pcVar43;\n          longVar = 0;\n          while (longPointer2 != (long *)0x0) {\n            undefined8Var = xstrdup();\n            *(undefined8 *)((long)&filePointer2->_flags + longVar) = undefined8Var;\n            longPointer2 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar + -0x7b);\n            longVar = longVar + 8;\n          }\n          *(undefined8 *)((long)&filePointer2->_flags + longVar) = 0;\nLAB_0010610a:\n          intVar = (int)charPointer3;\n          pcVar43 = (char *)filePointer2;\n          if (*(long **)filePointer3 == (long *)0x0) goto LAB_00106a80;\n          longVar = 0;\n          do {\n            lVar34 = longVar + 1;\n            lVar35 = longVar * 8;\n            longVar = lVar34;\n          } while (*(long *)(filePointer3->_shortbuf + lVar35 + -0x7b) != 0);\n          sizeVar3 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          sizeVar3 = 0;\n        }\n        longVar = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + longVar));\n        filePointer2 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar) * 8);\n        uintVar2 = intVar + -1 + (int)lVar34;\n        charPointer3 = (char *)(ulong)uintVar2;\n        memmove(&filePointer2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePointer2->_IO_read_ptr + (long)undefined8Var3),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&undefined8Var3->_flags + (long)&filePointer2->_flags),filePointer3,sizeVar3);\n        free(filePointer3);\n        free(bytePointer3);\n        fclose(filePointer);\n        uintVar = (int)filePointer4 + 1;\n        unaff_R12 = undefined8Var3;\n        pcVar43 = (char *)filePointer2;\n        undefined8Var3 = filePointer3;\n        if ((int)uintVar < (int)uintVar2) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    filePointer4 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)filePointer & 0xffffffff,charPointer3,filePointer2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePointer2;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(undefined8Var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  intVar2 = 0;\n  intVar = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer2;\n  if (intVar == 0) {\n    *(byte *)((long)undefined8Pointer2 + 0x49) = *(byte *)((long)undefined8Pointer2 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      longPointer2 = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer2 == (undefined8 *)0x0) break;\n      undefined8Var = *(undefined8 *)*longPointer2;\n      undefined8Var2 = normalize(*(FILE **)unaff_RBP,undefined8Pointer2);\n      intVar = filename_cmp(undefined8Var2,undefined8Var);\n      if ((intVar == 0) &&\n         ((counted_name_mode == '\\0' || (intVar2 = intVar2 + 1, intVar2 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPointer2 = *(long *)(*longPointer2 + 0xf0);\n        filePointer = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer2;\n    }\n    if (verbose != 0) {\n      filePointer2 = *(FILE **)unaff_RBP;\n      charPointer3 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(charPointer3,filePointer2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "fprintf",
                "memmove",
                "bfd_create",
                "fclose",
                "ranlib_usage",
                "strcmp",
                "xstrdup",
                "textdomain",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "usage",
                "free",
                "replace_members",
                "write_archive",
                "fileno",
                "strtol",
                "bfd_bwrite",
                "open_inarch",
                "fseek",
                "map_over_members",
                "xatexit_cleanup",
                "normalize",
                "bfd_make_writable",
                "bfd_fdopenr",
                "get_pos_bfd",
                "bindtextdomain",
                "bfd_errmsg",
                "open",
                "strlen",
                "stat",
                "xmalloc_set_program_name",
                "bfd_nonfatal",
                "yyparse.isra.0",
                "print_descr",
                "ar_emul_default_parse_arg",
                "bfd_init",
                "remove_output",
                "ranlib_only",
                "bfd_close",
                "bfd_plugin_set_program_name",
                "extract_file",
                "getopt_long",
                "bfd_set_default_target",
                "fopen",
                "memcpy",
                "ftell",
                "bfd_find_target",
                "bfd_fatal",
                "bfd_check_format_matches",
                "bfd_set_format",
                "non_fatal",
                "print_contents",
                "bfd_plugin_set_plugin",
                "malloc",
                "list_matching_formats",
                "fread",
                "ferror",
                "setlocale",
                "bfd_make_readable",
                "fatal",
                "get_file_size",
                "dcgettext",
                "isatty",
                "xexit",
                "xrealloc",
                "filename_cmp",
                "printf",
                "xmalloc",
                "bfd_set_error",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "free",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main",
                "make_tempname.cold",
                "list_supported_targets",
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold",
                "list_matching_formats",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "load_and_convert_bfd_file_00102710",
                "unaff_RBP": "output_file_path",
                "in_stack_00000008": "arch_type",
                "lVar5": "bfd_descriptor",
                "cVar2": "format_check",
                "bVar3": "is_thin_archive",
                "iVar4": "error_code",
                "puVar8": "bfd_output_descriptor",
                "plVar1": "archived_file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "target": "target_bfd_descriptor",
                "silent_create": "is_silent_create",
                "make_thin_archive": "create_thin_archive",
                "output_filename": "output_file_name",
                "operation": "current_operation"
            },
            "code": "\nundefined8 * load_and_convert_bfd_file_00102710(void)\n\n{\n  long *archived_file_descriptor;\n  char format_check;\n  byte is_thin_archive;\n  int error_code;\n  long bfd_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *bfd_output_descriptor;\n  undefined8 output_file_path;\n  undefined8 arch_type;\n  \n  bfd_descriptor = bfd_openr();\n  if (bfd_descriptor != 0) {\n    format_check = bfd_check_format(bfd_descriptor,1);\n    if (format_check != '\\0') {\n      target_bfd_descriptor = **(undefined8 **)(bfd_descriptor + 8);\n    }\n    bfd_close(bfd_descriptor);\n  }\n  bfd_output_descriptor = (undefined8 *)bfd_openw();\n  if (((bfd_output_descriptor != (undefined8 *)0x0) && (format_check = bfd_set_format(bfd_output_descriptor,2), format_check != '\\0')) &&\n     (format_check = bfd_close(bfd_output_descriptor), format_check != '\\0')) {\n    if (is_silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    is_thin_archive = *(byte *)((long)bfd_output_descriptor + 0x49) >> 4 & 1;\n    if (create_thin_archive == '\\0') {\n      if (is_thin_archive != 0) {\n        library_name = *bfd_output_descriptor;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_archive == 0) {\n      library_name = *bfd_output_descriptor;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,library_name);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(arch_type);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_descriptor = bfd_output_descriptor + 0x1e;\n      for (bfd_descriptor = bfd_openr_next_archived_file(bfd_output_descriptor,0); bfd_descriptor != 0;\n          bfd_descriptor = bfd_openr_next_archived_file(bfd_output_descriptor,bfd_descriptor)) {\n        *archived_file_descriptor = bfd_descriptor;\n        archived_file_descriptor = (long *)(bfd_descriptor + 0xf0);\n      }\n      *archived_file_descriptor = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return bfd_output_descriptor;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        non_fatal(library_name);\nLAB_001053b7:\n        output_file_name = output_file_path;\n        bfd_output_descriptor = (undefined8 *)bfd_openr();\n      } while (bfd_output_descriptor == (undefined8 *)0x0);\n      format_check = bfd_check_format_matches(bfd_output_descriptor,2,&stack0x00000008);\n      if (format_check == '\\0') goto LAB_001027cb;\n    } while (((current_operation != 2) && (current_operation != 7)) ||\n            (bfd_descriptor = bfd_openr_next_archived_file(bfd_output_descriptor,0), bfd_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "load_and_convert_bfd_file_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "FUNC_00103e95"
            },
            "code": "\n\n\nvoid FUNC_00103e95(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *plVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long lVar17;\n  long lVar18;\n  ulong uVar19;\n  uint uVar20;\n  long lVar21;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcVar27;\n  bool bVar28;\n  char **ppcVar29;\n  byte bVar30;\n  long lVar31;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  lVar18 = 0;\n  yychar = -2;\n  ppcVar29 = local_678;\n  local_800 = 0;\n  local_828 = local_740;\n  local_818 = 200;\n  local_820 = local_828;\n  local_810 = ppcVar29;\nLAB_00103ee9:\n  *local_828 = (char)lVar18;\n  if (local_820 + local_818 + -1 <= local_828) {\n    lVar21 = (long)local_828 - (long)local_820;\n    lVar17 = lVar21 + 1;\n    if (local_818 < 10000) {\n      lVar31 = local_818 * 2;\n      local_818 = 10000;\n      if (lVar31 < 0x2711) {\n        local_818 = lVar31;\n      }\n      pcVar10 = (char *)malloc(local_818 * 9 + 7);\n      if (pcVar10 != (char *)0x0) {\n        lVar31 = lVar17 * 8;\n        pcVar15 = local_820;\n        pcVar16 = pcVar10;\n        for (; lVar17 != 0; lVar17 = lVar17 + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pcVar10 + local_818);\n        ppcVar29 = ppcVar38;\n        for (; lVar31 != 0; lVar31 = lVar31 + -1) {\n          *(undefined *)ppcVar29 = *(undefined *)local_810;\n          local_810 = (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ppcVar29 = (char **)((long)ppcVar29 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 != local_740) {\n          free(local_820);\n        }\n        local_828 = pcVar10 + lVar21;\n        ppcVar29 = ppcVar38 + lVar21;\n        local_820 = pcVar10;\n        local_810 = ppcVar38;\n        if (pcVar10 + local_818 + -1 <= local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pcVar10 = local_820;\n    if (local_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pcVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)lVar18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  cVar2 = (&yypact)[iVar37];\n  if (cVar2 != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          puVar22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          uVar11 = yy_create_buffer_constprop_0(yyin);\n          *puVar22 = uVar11;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      pbVar32 = yy_c_buf_p;\n      pbVar35 = yy_c_buf_p;\n      uVar20 = yy_start;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      uVar26 = (ulong)local_7fc;\n      bVar28 = false;\n      do {\n        bVar30 = yy_ec[*pbVar35];\n        if (*(short *)(yy_accept + (long)(int)uVar19 * 2) != 0) {\n          bVar28 = true;\n          uVar26 = uVar19 & 0xffffffff;\n          local_7f8 = pbVar35;\n        }\n        while( true ) {\n          iVar8 = (int)uVar19;\n          lVar18 = (long)(int)((int)*(short *)(yy_base + (long)iVar8 * 2) + (uint)bVar30);\n          if (iVar8 == *(short *)(yy_chk + lVar18 * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(yy_def + (long)iVar8 * 2);\n          if (0xb0 < *(short *)(yy_def + (long)iVar8 * 2)) {\n            bVar30 = yy_meta[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 = pbVar35 + 1;\n        uVar19 = (ulong)*(short *)(yy_nxt + lVar18 * 2);\n      } while (*(short *)(yy_base + uVar19 * 2) != 0xc2);\n      local_7fc = (uint)uVar26;\n      pbVar33 = pbVar32;\n      if (bVar28) {\n        yy_last_accepting_cpos = local_7f8;\n        yy_last_accepting_state = local_7fc;\n      }\nLAB_0010419f:\n      iVar8 = (int)*(short *)(yy_accept + (long)(int)uVar19 * 2);\n      if (iVar8 == 0) {\n        iVar8 = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        pbVar35 = yy_last_accepting_cpos;\n      }\n      yyleng = (int)pbVar35 - (int)pbVar33;\n      yy_hold_char = *pbVar35;\n      yy_c_buf_p = pbVar35;\n      yytext = pbVar33;\n      *pbVar35 = 0;\nLAB_001041f0:\n      pbVar32 = yytext;\n      lVar18 = yy_buffer_stack_top;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      lVar18 = (long)iVar37;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        iVar37 = 2;\n        if (yychar < 0x114) {\n          iVar37 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    yychar = 0;\nLAB_0010497d:\n    uVar20 = cVar2 + iVar37;\n    if ((0x22 < uVar20) || (iVar37 != (char)yycheck[(int)uVar20])) goto LAB_001049db;\n    cVar2 = yytable[(int)uVar20];\n    lVar18 = (long)cVar2;\n    if (cVar2 < '\\x01') {\n      iVar37 = -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    ppcVar29 = ppcVar29 + 1;\n    *ppcVar29 = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&yydefact)[(int)lVar18];\n  if ((&yydefact)[(int)lVar18] == '\\0') {\n    if (local_800 == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[lVar18] != -0xe) &&\n             (uVar20 = (int)(char)(&yypact)[lVar18] + 1, uVar20 < 0x23)) &&\n            (yycheck[(int)uVar20] == '\\x01')) &&\n           (lVar18 = (long)(char)yytable[(int)uVar20], '\\0' < (char)yytable[(int)uVar20]))\n        goto LAB_00105227;\n        if (local_820 == local_828) goto LAB_0010524c;\n        local_828 = local_828 + -1;\n        ppcVar29 = ppcVar29 + -1;\n        lVar18 = (long)*local_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = program_name;\n  ppcVar27 = obfd;\n  cVar2 = yyr2[iVar37];\n  ppcVar38 = (char **)ppcVar29[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (obfd == (char **)0x0) {\n      pcVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pcVar10 = (char *)dcgettext(0,pcVar10,5);\n      fprintf(_stderr,pcVar10,uVar11);\n      maybequit();\n    }\n    else {\n      for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n        for (puVar23 = (undefined8 *)obfd[0x1f]; puVar23 != (undefined8 *)0x0;\n            puVar23 = (undefined8 *)puVar23[0x1e]) {\n          iVar8 = filename_cmp(*puVar23);\n          if (iVar8 == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        uVar6 = program_name;\n        uVar11 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      pcVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = obfd + 0x1f;\n      for (pcVar10 = obfd[0x1f]; pcVar10 != (char *)0x0; pcVar10 = *(char **)(pcVar10 + 0xf0)) {\n        iVar8 = filename_cmp();\n        if (iVar8 == 0) {\n          pcVar15 = (char *)bfd_openr(*puVar22,0);\n          uVar11 = program_name;\n          if (pcVar15 == (char *)0x0) {\n            uVar6 = *puVar22;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uVar11,uVar6);\n            maybequit();\n          }\n          else {\n            *ppcVar27 = pcVar15;\n            bVar28 = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(pcVar10 + 0xf0);\n          }\n        }\n        else {\n          ppcVar27 = (char **)(pcVar10 + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        pcVar10 = (char *)bfd_openr(*puVar22,0);\n        uVar6 = program_name;\n        uVar11 = *puVar22;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,uVar6,uVar11);\n        uVar11 = program_name;\n        if (pcVar10 == (char *)0x0) {\n          uVar6 = *puVar22;\n          pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pcVar10,uVar11,uVar6);\n          maybequit();\n        }\n        else {\n          *ppcVar27 = pcVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = obfd + 0x1f;\n      for (puVar23 = (undefined8 *)obfd[0x1f]; uVar11 = program_name, puVar23 != (undefined8 *)0x0;\n          puVar23 = (undefined8 *)puVar23[0x1e]) {\n        iVar8 = filename_cmp(*puVar23,*puVar22);\n        if (iVar8 == 0) {\n          bVar28 = true;\n          *ppcVar27 = (char *)puVar23[0x1e];\n        }\n        else {\n          ppcVar27 = (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      pcVar10 = (char *)bfd_openr(*puVar22,\"plugin\");\n      uVar11 = program_name;\n      ppcVar27 = obfd;\n      if (pcVar10 == (char *)0x0) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        maybequit();\n      }\n      else {\n        *(char **)(pcVar10 + 0xf0) = obfd[0x1f];\n        ppcVar27[0x1f] = pcVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    pcVar10 = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,pcVar10);\n    for (pcVar10 = obfd[0x1f]; pcVar10 != (char *)0x0; pcVar10 = *(char **)(pcVar10 + 0xf0)) {\n      ar_directory_doer(pcVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(ppcVar27);\n    pcVar10 = real_name;\n    iVar8 = stat(real_name,&local_7d0);\n    if ((iVar8 != 0) && (obfd = (char **)bfd_openw(pcVar10,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*ppcVar29,0);\n    break;\n  case 0x1f:\n    ar_open(*ppcVar29,1);\n    break;\n  case 0x20:\n    pcVar10 = *ppcVar29;\n    if (obfd == (char **)0x0) {\n      pcVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    lVar18 = open_inarch(ppcVar29[-1],0);\n    if (lVar18 != 0) {\n      map_over_list(lVar18,ar_addlib_doer,pcVar10);\n    }\n    break;\n  case 0x21:\n    pcVar10 = *ppcVar29;\n    pcVar15 = ppcVar29[-1];\n    uVar11 = open_inarch(ppcVar29[-2],0);\n    if (pcVar10 == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(pcVar10,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(uVar11,ar_directory_doer,pcVar15);\n        bfd_close(uVar11);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,pcVar10);\n    }\n    map_over_list(uVar11,ar_directory_doer,pcVar15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pcVar10 = ppcVar29[-2];\n    *ppcVar38 = *ppcVar29;\n    ppcVar38[1] = pcVar10;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  lVar18 = (long)cVar2;\n  local_828 = local_828 + -lVar18;\n  ppcVar29[1 - lVar18] = (char *)ppcVar38;\n  ppcVar29 = ppcVar29 + (1 - lVar18);\n  uVar20 = (int)(char)yypgoto[(char)yyr1[iVar37] + -0x18] + (int)*local_828;\n  if ((uVar20 < 0x23) && (*local_828 == yycheck[(int)uVar20])) {\n    lVar18 = (long)(char)yytable[(int)uVar20];\n  }\n  else {\n    lVar18 = (long)(char)yydefgoto[(char)yyr1[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 = ((int)pbVar35 - (int)yytext) + -1;\n  *pbVar35 = yy_hold_char;\n  pplVar1 = (long **)(yy_buffer_stack + lVar18 * 8);\n  ppFVar3 = (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) == 0) {\n    yy_n_chars = *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) = 1;\n    *ppFVar3 = yyin;\n  }\n  pbVar7 = yy_c_buf_p;\n  pFVar4 = ppFVar3[1];\n  auVar40._8_8_ = pFVar4;\n  auVar40._0_8_ = ppFVar3;\n  if ((byte *)((long)&pFVar4->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&pFVar4->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      auVar40 = yy_fatal_error();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)pbVar7 - (long)pbVar32) - 1;\n      for (lVar18 = 0; (int)lVar18 < (int)uVar20; lVar18 = lVar18 + 1) {\n        *(byte *)(auVar40._8_8_ + lVar18) = pbVar32[lVar18];\n      }\n      plVar12 = *pplVar1;\n      if (*(int *)(plVar12 + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pFVar4 = yyin;\n        if (uVar20 == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            puVar22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            uVar11 = yy_create_buffer_constprop_0(pFVar4);\n            *puVar22 = uVar11;\n          }\n          lVar18 = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            lVar18 = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          iVar9 = 1;\n          yy_init_buffer(lVar18);\n          yy_load_buffer_state();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          plVar5 = *pplVar1;\n          uVar24 = ~uVar20 + *(int *)(plVar12 + 3);\n          if (0 < (int)uVar24) break;\n          uVar24 = (int)yy_c_buf_p - (int)(void *)plVar5[1];\n          if (*(int *)(plVar5 + 4) == 0) {\n            plVar5[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          iVar9 = *(int *)(plVar5 + 3);\n          iVar25 = iVar9;\n          if (iVar9 < 1) {\n            iVar25 = iVar9 / 8;\n          }\n          *(int *)(plVar5 + 3) = iVar25 + iVar9;\n          pvVar14 = realloc((void *)plVar5[1],(long)(iVar25 + iVar9 + 2));\n          plVar5[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)pvVar14 + (long)(int)uVar24);\n          plVar12 = *pplVar1;\n        }\n        if (0x2000 < (int)uVar24) {\n          uVar24 = 0x2000;\n        }\n        uVar26 = (ulong)uVar24;\n        if (*(int *)((long)plVar5 + 0x24) == 0) {\n          piVar34 = __errno_location();\n          uVar26 = (ulong)(int)uVar24;\n          uVar19 = (ulong)(int)uVar20;\n          *piVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        piVar34 = (int *)(long)(int)uVar20;\n        do {\n          iVar9 = getc(yyin);\n          uVar36 = (uint)uVar19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(yyin);\n            uVar24 = uVar36;\n            if (iVar9 != 0) {\n              do {\n                pcVar10 = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *piVar34 = 0;\n                  clearerr((FILE *)pcVar10);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + uVar19)\n                                 ,1,uVar26,yyin);\n                  pcVar10 = (char *)yyin;\n                  yy_n_chars = (uint)sVar13;\n                  uVar24 = yy_n_chars;\n                  if ((yy_n_chars != 0) || (iVar9 = ferror(yyin), uVar24 = yy_n_chars, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*piVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            uVar24 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)piVar34) = (char)iVar9;\n          piVar34 = (int *)((long)piVar34 + 1);\n        } while (uVar24 != uVar36 + 1);\nLAB_00104738:\n        yy_n_chars = uVar24;\n        uVar24 = yy_n_chars;\n        iVar9 = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (uVar24 == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      lVar18 = *plVar12;\n      uVar20 = uVar20 + yy_n_chars;\n      if (*(int *)(lVar18 + 0x18) < (int)uVar20) {\n        iVar25 = ((int)yy_n_chars >> 1) + uVar20;\n        pvVar14 = realloc(*(void **)(lVar18 + 8),(long)iVar25);\n        *(void **)(lVar18 + 8) = pvVar14;\n        auVar41._8_8_ = plVar12;\n        auVar41._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          auVar41 = yy_fatal_error();\n        }\n        plVar12 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = iVar25 + -2;\n      }\n      yy_n_chars = uVar20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uVar20) = 0;\n      pbVar32 = *(byte **)(*plVar12 + 8);\n      yytext = pbVar32;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pbVar35 = pbVar32 + iVar8;\n      yy_c_buf_p = pbVar35;\n      uVar20 = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pbVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = pbVar35;\n    uVar19 = yy_get_previous_state();\n    pbVar33 = yytext;\n    goto LAB_0010419f;\n  }\n  pbVar35 = pbVar32 + iVar8;\n  yy_c_buf_p = pbVar35;\n  uVar19 = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)uVar19 * 2) != 0) {\n    yy_last_accepting_cpos = pbVar35;\n    yy_last_accepting_state = (uint)uVar19;\n  }\n  uVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    iVar8 = (int)uVar26;\n    if (iVar8 == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2)) break;\n    uVar26 = (ulong)(uint)(int)*(short *)(yy_def + (long)iVar8 * 2);\n  }\n  uVar20 = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 = pbVar32;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)iVar8 * 2) + 1) * 2) == 0) ||\n     (uVar20 == 0xb0)) goto LAB_0010419f;\n  pbVar35 = pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  iVar8 = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 = yy_hold_char;\n  uVar19 = (ulong)yy_last_accepting_state;\n  pbVar35 = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcVar29 = ppcVar29 + 1;\n  local_800 = 3;\n  *ppcVar29 = yylval;\nLAB_001049d1:\n  local_828 = local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "fprintf",
                "ar_addlib_doer",
                "stat",
                "fclose",
                "yyerror.constprop.0",
                "fwrite",
                "bfd_openw",
                "xstrdup",
                "ar_directory_doer",
                "bfd_cache_close",
                "map_over_list",
                "prompt",
                "ar_open",
                "maybequit",
                "bfd_close",
                "yy_create_buffer.constprop.0",
                "bfd_openr",
                "extract_file",
                "clearerr",
                "yyensure_buffer_stack",
                "__errno_location",
                "fopen",
                "getc",
                "yy_fatal_error",
                "free",
                "bfd_set_format",
                "malloc",
                "open_inarch",
                "dup",
                "yy_load_buffer_state",
                "ferror",
                "fread",
                "yy_get_previous_state",
                "unlink",
                "dcgettext",
                "smart_rename.constprop.0",
                "filename_cmp",
                "printf",
                "yy_init_buffer"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUNC_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupOutput_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  removeFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_buffer_001031cf",
                "param_1": "filePointer",
                "param_2": "inputFile",
                "piVar4": "errnoLocation",
                "lVar5": "bufferStack",
                "iVar1": "errnoValue",
                "yy_buffer_stack": "yyBufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "yy_load_buffer_state": "loadBufferState",
                "iVar3": "fileDescriptor",
                "_flags": "flags",
                "uVar2": "isTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFileBuffer_001031cf(FILE **filePointer,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoLocation;\n  long bufferStack;\n  \n  errnoLocation = __errno_location();\n  bufferStack = yyBufferStack;\n  errnoValue = *errnoLocation;\n  if (filePointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (yyBufferStack != 0) {\nLAB_00103263:\n      if (filePointer == *(FILE ***)(bufferStack + bufferStackTop * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointer + 0x1c) = 0;\n    *(undefined *)&filePointer[1]->flags = 0;\n    *(undefined *)((long)&filePointer[1]->flags + 1) = 0;\n    *(undefined4 *)(filePointer + 5) = 1;\n    filePointer[2] = filePointer[1];\n    *(undefined4 *)(filePointer + 7) = 0;\n    if (bufferStack != 0) {\n      if (filePointer == *(FILE ***)(bufferStack + bufferStackTop * 8)) {\n        loadBufferState();\n      }\n      *filePointer = inputFile;\n      *(undefined4 *)((long)filePointer + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePointer = inputFile;\n    *(undefined4 *)((long)filePointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointer + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePointer + 0x24) = isTerminal;\n  *errnoLocation = errnoValue;\n  return param_5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "isatty",
                "__errno_location",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_buffer_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer",
                "lVar1": "tempPointer"
            },
            "code": "\nvoid copyData_0010312d(long sourcePointer,long destinationPointer)\n\n{\n  long tempPointer;\n  \n  if (destinationPointer != 0) {\n    *(undefined8 *)(destinationPointer + 0xf0) = *(undefined8 *)(sourcePointer + 0xf0);\n  }\n  tempPointer = obfd;\n  *(undefined8 *)(sourcePointer + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(tempPointer + 0xf8) = sourcePointer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_and_write_to_file_00105c00",
                "param_1": "fileDescriptorSource",
                "param_2": "filePathDestination",
                "iVar1": "errnoValue",
                "__fd": "fileDescriptorDestination",
                "_Var3": "lseekResult",
                "uVar4": "readWriteResult",
                "sVar5": "writeResult",
                "piVar6": "errnoLocation",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyAndWriteToFile_00105c00(int fileDescriptorSource,char *filePathDestination)\n\n{\n  int errnoValue;\n  int fileDescriptorDestination;\n  int iVar2;\n  __off_t lseekResult;\n  ulong readWriteResult;\n  size_t writeResult;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptorSource) && (lseekResult = lseek(fileDescriptorSource,0,0), lseekResult == 0)) {\n    fileDescriptorDestination = open(filePathDestination,0x201);\n    if (fileDescriptorDestination < 0) {\n      readWriteResult = simple_copy_constprop_0_cold();\n      return readWriteResult;\n    }\n    do {\n      readWriteResult = read(fileDescriptorSource,buffer,0x2000);\n      iVar2 = (int)readWriteResult;\n      if (iVar2 < 1) {\n        errnoLocation = __errno_location();\n        errnoValue = *errnoLocation;\n        close(fileDescriptorSource);\n        close(fileDescriptorDestination);\n        if (iVar2 != 0) {\n          *errnoLocation = errnoValue;\n          return 0xffffffff;\n        }\n        return readWriteResult & 0xffffffff;\n      }\n      writeResult = write(fileDescriptorDestination,buffer,(long)iVar2);\n    } while (writeResult == (long)iVar2);\n    errnoLocation = __errno_location();\n    iVar2 = *errnoLocation;\n    close(fileDescriptorSource);\n    close(fileDescriptorDestination);\n    *errnoLocation = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "lseek",
                "open",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_and_write_to_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_information_001052a0",
                "param_1": "file_path",
                "iVar1": "stat_result",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_information_001052a0(char *file_path)\n\n{\n  int stat_result;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    stat_result = stat(file_path,&file_stats);\n    if (stat_result < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "get_file_size.cold",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_information_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "file",
                "pcVar1": "emulationOptionsText"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *file)\n\n{\n  char *emulationOptionsText;\n  \n  emulationOptionsText = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(file,emulationOptionsText);\n  emulationOptionsText = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(file,emulationOptionsText);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "generate_archive_00103c60",
                "param_1": "input_archive",
                "param_2": "is_plugin",
                "cVar1": "is_valid_format",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_bfd",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "output_files",
                "real_name": "real_filename",
                "temp_name": "temp_filename",
                "obfd": "output_bfd",
                "temp_fd": "temp_file_descriptor",
                "_stderr": "error_stream"
            },
            "code": "\n\n\nvoid generate_archive_00103c60(char *input_archive,int is_plugin)\n\n{\n  char is_valid_format;\n  int *errno_ptr;\n  char *error_message;\n  long input_bfd;\n  long archived_file;\n  undefined8 program_name;\n  long *output_files;\n  \n  real_filename = xstrdup();\n  temp_filename = (char *)make_tempname(real_filename,&temp_file_descriptor);\n  if (temp_filename == (char *)0x0) {\n    errno_ptr = __errno_location();\n    input_archive = strerror(*errno_ptr);\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    output_bfd = bfd_fdopenw(temp_filename,0,temp_file_descriptor);\n    if (output_bfd == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = temp_filename;\n    }\n    else {\n      if (is_plugin != 0) {\nLAB_00103d02:\n        bfd_set_format(output_bfd,2);\n        *(byte *)(output_bfd + 0x49) = *(byte *)(output_bfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_bfd = bfd_openr(input_archive,\"plugin\");\n      if (input_bfd == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        is_valid_format = bfd_check_format(input_bfd,2);\n        if (is_valid_format != '\\0') {\n          output_files = (long *)(output_bfd + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_bfd,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_bfd,archived_file)) {\n            *output_files = archived_file;\n            output_files = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(error_stream,error_message,program_name,input_archive);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_fdopenw",
                "fprintf",
                "bfd_set_format",
                "maybequit",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "make_tempname",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "generate_archive_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "ar_emul_default_usage",
                "list_supported_targets",
                "replace_members.cold",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "print_contents",
                "write_archive",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "FUN_00102e6f",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "get_file_size",
                "map_over_members.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "search_and_update_0010300e",
                "yy_start": "start_index",
                "yytext": "current_char",
                "yy_c_buf_p": "buffer_ptr",
                "yy_ec": "ec_table",
                "yy_accept": "accept_table",
                "yy_base": "base_table",
                "yy_chk": "check_table",
                "yy_def": "def_table",
                "yy_meta": "meta_table",
                "yy_nxt": "next_table",
                "yy_last_accepting_cpos": "last_accepting_char_ptr",
                "yy_last_accepting_state": "last_accepting_state"
            },
            "code": "\nvoid search_and_update_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 = false;\n  iVar2 = start_index;\n  for (pbVar5 = current_char; pbVar5 < buffer_ptr; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = ec_table[*pbVar5];\n    }\n    if (*(short *)(accept_table + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      in_R9 = pbVar5;\n      in_R10D = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(base_table + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(check_table + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(def_table + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = meta_table[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(next_table + lVar3 * 2);\n  }\n  if (bVar1) {\n    last_accepting_char_ptr = in_R9;\n    last_accepting_state = in_R10D;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "search_and_update_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_save_archive_00107740",
                "param_1": "input_archive",
                "iVar1": "comparison_result",
                "iVar2": "status",
                "piVar3": "errno_ptr",
                "pcVar4": "str_error",
                "uVar5": "translated_msg",
                "pplVar6": "extracted_files",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "plVar8": "current_file",
                "puVar9": "preserve_dates_array",
                "uVar10": "bytes_processed",
                "sVar11": "bytes_to_read",
                "local_c8": "date_values",
                "_Stack_b0": "file_permissions",
                "uStack_98": "archive_size",
                "uStack_80": "original_last_time",
                "uStack_70": "new_last_time",
                "output_filename": "output_file_name"
            },
            "code": "\nlong * extractAndSaveArchive_00107740(long **input_archive)\n\n{\n  int comparison_result;\n  int status;\n  int *errno_ptr;\n  char *str_error;\n  undefined8 translated_msg;\n  long **extracted_files;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long *current_file;\n  undefined4 *preserve_dates_array;\n  ulong bytes_processed;\n  size_t bytes_to_read;\n  undefined4 date_values [6];\n  __mode_t file_permissions;\n  ulong archive_size;\n  undefined8 original_last_time;\n  undefined8 new_last_time;\n  \n  if (preserve_dates != 0) {\n    preserve_dates_array = date_values;\n    for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *preserve_dates_array = 0;\n      preserve_dates_array = preserve_dates_array + 1;\n    }\n  }\n  extracted_files = (long **)input_archive[0x1d];\n  if ((long **)input_archive[0x1d] == (long **)0x0) {\n    extracted_files = input_archive;\n  }\n  status = (*(code *)extracted_files[1][0x3d])(input_archive,date_values);\n  if (status != 0) {\n    current_file = *input_archive;\n    translated_msg = dcgettext(0,\"internal stat error on %s\",5);\n    status = fatal(translated_msg,current_file);\n    translated_msg = posname;\n    if (status == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,translated_msg);\n        if (comparison_result == 0) {\n          if (status != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(input_archive,0,0);\n  output_file = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    output_file = (FILE *)open_output_file_isra_0(*input_archive);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = archive_size - bytes_processed;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read,input_archive);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        input_archive = (long **)*input_archive[0x1d];\n        translated_msg = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(translated_msg,input_archive);\n        goto LAB_00102ca2;\n      }\n      if (output_file == (FILE *)0x0) {\n        output_file = (FILE *)open_output_file_isra_0(*input_archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,output_file);\n      if (bytes_to_read != bytes_read) {\n        errno_ptr = __errno_location();\n        str_error = strerror(*errno_ptr);\n        fatal(\"%s: %s\",output_file_name,str_error);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + bytes_read;\n    } while (bytes_processed < archive_size);\n    free(buffer);\n  }\n  fclose(output_file);\n  str_error = output_file_name;\n  output_file = (FILE *)0x0;\n  chmod(output_file_name,file_permissions);\n  if (preserve_dates != 0) {\n    original_last_time = new_last_time;\n    set_times(str_error,date_values);\n  }\n  output_file_name = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_and_save_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "param_fileList",
                "param_2": "param_fileCount",
                "uVar1": "undefinedVar",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "sVar4": "sizeVar",
                "piVar5": "intPointerVar",
                "pcVar6": "charPointerVar1",
                "pcVar7": "charPointerVar2",
                "ppcVar8": "charPointerPointerVar1",
                "uVar9": "undefinedVar2",
                "lVar10": "longVar1",
                "__s": "stringVar1",
                "__s_00": "stringVar2",
                "lVar11": "longVar2",
                "uVar12": "undefinedVar3",
                "uVar13": "ulongVar",
                "unaff_RBX": "charPointerVar3",
                "ppcVar14": "charPointerPointerVar2",
                "unaff_RBP": "charPointerPointerVar3",
                "unaff_R12": "charPointerPointerVar4",
                "unaff_R13D": "uintVar",
                "ppcVar15": "charPointerPointerVar5",
                "unaff_R14": "longVar3",
                "bVar16": "boolVar",
                "bVar17": "byteVar2",
                "param_7": "param_outputFileList",
                "param_9": "param_writeArchiveInfo",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2"
            },
            "code": "\nundefined8 processFiles_001028ed(undefined8 param_fileList,long param_fileCount)\n\n{\n  undefined undefinedVar;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *intPointerVar;\n  char *charPointerVar1;\n  char *charPointerVar2;\n  char **charPointerPointerVar1;\n  undefined8 undefinedVar2;\n  long longVar1;\n  char *stringVar1;\n  char *stringVar2;\n  long longVar2;\n  undefined8 undefinedVar3;\n  ulong ulongVar;\n  char *charPointerVar3;\n  char **charPointerPointerVar2;\n  char **charPointerPointerVar3;\n  char **charPointerPointerVar4;\n  uint uintVar;\n  char **charPointerPointerVar5;\n  long longVar3;\n  bool boolVar;\n  byte byteVar2;\n  char **param_outputFileList;\n  undefined8 param_writeArchiveInfo;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar2 = 0;\ncode_r0x001028ed:\n  bfd_fatal(charPointerVar3,param_fileCount);\nLAB_001028f5:\n  undefinedVar3 = posname;\n  if (uintVar != 3) {\n    while( true ) {\n      if ((undefined8 *)*charPointerPointerVar4 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar = filename_cmp(*(undefined8 *)*charPointerPointerVar4,undefinedVar3);\n      if (intVar == 0) break;\n      charPointerPointerVar4 = (char **)(*charPointerPointerVar4 + 0xf0);\n    }\n    if (uintVar != 2) goto LAB_0010571f;\n    charPointerPointerVar4 = (char **)(*charPointerPointerVar4 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar1 = *(long *)(longVar3 + 0xf0);\n  if (*(long *)(longVar3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar2 = longVar1;\n    longVar1 = *(long *)(longVar2 + 0xf0);\n  } while (longVar1 != 0);\n  charPointerPointerVar4 = (char **)(longVar2 + 0xf0);\n  charPointerVar3 = *charPointerPointerVar3;\n  if (libdeps_bfd != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar = make_thin_archive;\n  uintVar = (uint)(verbose != 0);\n  param_fileCount = bfd_openr(charPointerVar3,target);\n  if (param_fileCount != 0) {\n    charPointerPointerVar3 = charPointerPointerVar3 + 1;\n    byteVar = do_ar_emul_append_constprop_0(charPointerPointerVar4,param_fileCount,uintVar,undefinedVar);\n    param_writeArchiveInfo._6_1_ = param_writeArchiveInfo._6_1_ | byteVar;\n    charPointerVar1 = *charPointerPointerVar3;\n    do {\n      if (charPointerVar1 == (char *)0x0) {\n        if (param_writeArchiveInfo._6_1_ == 0) {\n          output_filename = 0;\n          return 0;\n        }\n        undefinedVar3 = write_archive();\n        return undefinedVar3;\n      }\n      charPointerPointerVar2 = *(char ***)(longVar3 + 0xf0);\n      charPointerPointerVar4 = param_outputFileList;\n      if (param_writeArchiveInfo._7_1_ == '\\0') {\n        charPointerPointerVar5 = param_outputFileList;\n        if (charPointerPointerVar2 != (char **)0x0) {\n          do {\n            if (full_pathname == '\\0') {\n              stringVar1 = (char *)lbasename(*charPointerPointerVar2);\n              charPointerVar2 = stringVar1;\n              if (ar_truncate != '\\0') {\n                sizeVar = strlen(stringVar1);\n                ulongVar = (ulong)*(byte *)(*(long *)(longVar3 + 8) + 0x1e);\n                if (ulongVar < sizeVar) {\n                  charPointerVar2 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(longVar3 + 8);\n                  charPointerVar1 = charPointerVar2;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPointerVar1 = *stringVar1;\n                    stringVar1 = stringVar1 + (ulong)byteVar2 * -2 + 1;\n                    charPointerVar1 = charPointerVar1 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPointerVar2[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                charPointerVar1 = *charPointerPointerVar3;\n                stringVar1 = charPointerVar2;\n                if (full_pathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPointerVar1 = *charPointerPointerVar3;\n              if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              stringVar2 = (char *)lbasename(charPointerVar1);\n              if (ar_truncate != '\\0') {\n                sizeVar = strlen(stringVar2);\n                ulongVar = (ulong)*(byte *)(*(long *)(longVar3 + 8) + 0x1e);\n                charPointerVar1 = stringVar2;\n                stringVar1 = charPointerVar2;\n                if (ulongVar < sizeVar) {\n                  charPointerVar1 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(longVar3 + 8);\n                  charPointerVar2 = charPointerVar1;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPointerVar2 = *stringVar2;\n                    stringVar2 = stringVar2 + (ulong)byteVar2 * -2 + 1;\n                    charPointerVar2 = charPointerVar2 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPointerVar1[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar = filename_cmp(stringVar2,charPointerVar2);\n            }\n            else {\n              charPointerVar1 = *charPointerPointerVar3;\n              stringVar1 = *charPointerPointerVar2;\nLAB_00102980:\n              intVar = filename_cmp(charPointerVar1,stringVar1);\n            }\n            if ((intVar == 0) && (charPointerPointerVar2[0x1c] != (char *)0x0)) {\n              if (newer_only != 0) {\n                intVar = stat(*charPointerPointerVar3,(stat *)&stack0x000000b0);\n                if (intVar != 0) {\n                  intPointerVar = __errno_location();\n                  if (*intPointerVar != 2) {\n                    bfd_fatal(*charPointerPointerVar3);\nLAB_00102b7e:\n                    charPointerVar1 = *charPointerPointerVar2;\n                    undefinedVar3 = dcgettext(0,\"internal stat error on %s\",5);\n                    fatal(undefinedVar3,charPointerVar1);\n                    free(charPointerPointerVar3);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPointerPointerVar1 = (char **)charPointerPointerVar2[0x1d];\n                if ((char **)charPointerPointerVar2[0x1d] == (char **)0x0) {\n                  charPointerPointerVar1 = charPointerPointerVar2;\n                }\n                intVar = (**(code **)(charPointerPointerVar1[1] + 0x1e8))(charPointerPointerVar2,&stack0x00000020);\n                if (intVar != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              undefinedVar3 = get_pos_bfd(param_outputFileList,2,*charPointerPointerVar2);\n              if (libdeps_bfd == 0) {\nLAB_00102ae2:\n                charPointerVar1 = *charPointerPointerVar3;\n                boolVar = verbose != 0;\n                longVar1 = bfd_openr(charPointerVar1,target);\n                if (longVar1 == 0) {\n                  bfd_fatal(charPointerVar1,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar = ar_emul_default_replace(undefinedVar3,longVar1,boolVar);\n              }\n              else {\n                undefinedVar2 = normalize(*charPointerPointerVar3);\n                intVar = filename_cmp(undefinedVar2,\"__.LIBDEP\");\n                if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar = ar_emul_default_replace(undefinedVar3,libdeps_bfd,verbose != 0);\n              }\n              if (byteVar != 0) {\n                *charPointerPointerVar5 = *(char **)(*charPointerPointerVar5 + 0xf0);\n                param_writeArchiveInfo._6_1_ = byteVar;\n              }\n              goto LAB_0010577e;\n            }\n            charPointerPointerVar5 = charPointerPointerVar2 + 0x1e;\n            charPointerPointerVar2 = (char **)charPointerPointerVar2[0x1e];\n          } while (charPointerPointerVar2 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uintVar = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uintVar = postype;\n        if (postype != 0) goto LAB_001028f5;\n        longVar1 = *(long *)(longVar3 + 0xf0);\n        if (*(long *)(longVar3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      charPointerVar3 = *charPointerPointerVar3;\n      if (libdeps_bfd == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar3 = normalize(charPointerVar3);\n      intVar = filename_cmp(undefinedVar3,\"__.LIBDEP\");\n      if (intVar != 0) goto code_r0x0010574f;\n      byteVar = ar_emul_default_append(charPointerPointerVar4,libdeps_bfd,verbose != 0,make_thin_archive);\n      param_writeArchiveInfo._6_1_ = byteVar | param_writeArchiveInfo._6_1_;\nLAB_0010577e:\n      charPointerPointerVar3 = charPointerPointerVar3 + 1;\n      charPointerVar1 = *charPointerPointerVar3;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  charPointerVar3 = *charPointerPointerVar3;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_fatal",
                "strlen",
                "stat",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "write_archive",
                "ar_emul_default_append",
                "normalize",
                "ar_emul_default_replace",
                "fatal",
                "bfd_openr",
                "dcgettext",
                "FUN_00102943",
                "get_pos_bfd",
                "__errno_location",
                "filename_cmp",
                "lbasename",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "open_inarch",
                "ar_open",
                "replace_members.cold",
                "simple_copy.constprop.0.cold",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yy_init_buffer",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "main",
                "normalize.cold",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_error_001025a0",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleError_001025a0(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errorPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b"
            },
            "code": "\nundefined8 getOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "start_main_00105cc0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stack",
                "__libc_start_main": "libc_start_main"
            },
            "code": "\nvoid processEntry start_main_00105cc0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  libc_start_main_00105cc0(main,arg2,&stack0x00000008,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "inputString",
                "unaff_R12": "destinationPointer"
            },
            "code": "\nundefined8 printAndAssign_00102f08(void)\n\n{\n  undefined8 *inputString;\n  undefined8 *destinationPointer;\n  \n  printf(\"a - %s\\n\",*inputString);\n  inputString[0x1e] = *destinationPointer;\n  *destinationPointer = inputString;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "extract_and_replace_files_00105570",
                "param_1": "archive",
                "param_2": "file_list",
                "param_3": "is_recursive",
                "ppcVar1": "curr_entry_ptr",
                "uVar2": "undefined_retval",
                "bVar3": "byte_retval",
                "iVar4": "int_retval",
                "sVar5": "size_retval",
                "piVar6": "errno_ptr",
                "pcVar7": "file_name_1",
                "pcVar8": "file_name_2",
                "uVar9": "norm_file_name",
                "pcVar10": "curr_file_name",
                "__s": "base_file_name",
                "lVar11": "prev_entry_ptr",
                "lVar12": "entry_ptr",
                "uVar13": "func_retval",
                "uVar14": "ulong_retval",
                "ppcVar15": "entry_ptr_list",
                "ppcVar16": "curr_ptr_list",
                "uVar17": "uint_retval",
                "ppcVar18": "prev_ptr_list",
                "bVar19": "bool_retval",
                "bVar20": "byte_var",
                "local_15a": "local_retval",
                "auStack_158": "temp_stack_var",
                "lStack_100": "file_mod_time",
                "sStack_c8": "file_stats",
                "output_filename": "output_file_name",
                "initialize_output_filename_00102943": "initialize_output_filename",
                "ar_emul_default_append": "emul_default_append",
                "verbose": "is_verbose",
                "make_thin_archive": "is_thin_archive",
                "postype": "position_type",
                "normalize": "normalize_file_name",
                "filename_cmp": "compare_file_names",
                "bfd_openr": "open_bfd_read",
                "do_ar_emul_append_constprop_0": "emul_append_constprop",
                "bfd_fatal": "fatal_error",
                "posname": "position_name",
                "newer_only": "is_newer_only",
                "dcgettext": "get_text_domain",
                "fatal": "fatal_error_2",
                "full_pathname": "is_full_path",
                "ar_truncate": "is_truncate",
                "xmalloc": "allocate_memory",
                "stat": "get_file_stats",
                "get_pos_bfd": "get_position_bfd",
                "ar_emul_default_replace": "emul_default_replace"
            },
            "code": "\nundefined8 extract_and_replace_files_00105570(long archive,char **file_list,char is_recursive)\n\n{\n  char **curr_entry_ptr;\n  undefined undefined_retval;\n  byte byte_retval;\n  int int_retval;\n  size_t size_retval;\n  int *errno_ptr;\n  char *file_name_1;\n  char *file_name_2;\n  undefined8 norm_file_name;\n  char *curr_file_name;\n  char *base_file_name;\n  long prev_entry_ptr;\n  long entry_ptr;\n  undefined8 func_retval;\n  ulong ulong_retval;\n  char **entry_ptr_list;\n  char **curr_ptr_list;\n  uint uint_retval;\n  char **prev_ptr_list;\n  bool bool_retval;\n  byte byte_var;\n  byte local_retval;\n  undefined temp_stack_var [88];\n  long file_mod_time;\n  get_file_stats file_stats;\n  \n  byte_var = 0;\n  curr_entry_ptr = (char **)(archive + 0xf0);\n  local_retval = 0;\n  if (file_list == (char **)0x0) {\n    func_retval = initialize_output_filename();\n    return func_retval;\n  }\n  do {\n    curr_file_name = *file_list;\njoined_r0x001055aa:\n    if (curr_file_name == (char *)0x0) {\n      if (local_retval != 0) {\n        func_retval = write_archive(archive);\n        return func_retval;\n      }\n      output_file_name = 0;\n      return 0;\n    }\n    entry_ptr_list = *(char ***)(archive + 0xf0);\n    curr_ptr_list = curr_entry_ptr;\n    if (is_recursive != '\\0') {\nLAB_0010564c:\n      uint_retval = position_type;\n      if (position_type != 0) goto LAB_001028f5;\n      entry_ptr = *(long *)(archive + 0xf0);\n      if (*(long *)(archive + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        prev_entry_ptr = entry_ptr;\n        entry_ptr = *(long *)(prev_entry_ptr + 0xf0);\n      } while (entry_ptr != 0);\n      curr_ptr_list = (char **)(prev_entry_ptr + 0xf0);\n      curr_file_name = *file_list;\n      do {\n        if (libdeps_bfd != 0) {\n          func_retval = normalize_file_name(curr_file_name,archive);\n          int_retval = compare_file_names(func_retval,\"__.LIBDEP\");\n          if (int_retval == 0) {\n            byte_retval = emul_default_append(curr_ptr_list,libdeps_bfd,is_verbose != 0,is_thin_archive);\n            local_retval = byte_retval | local_retval;\n            goto LAB_0010577e;\n          }\n          curr_file_name = *file_list;\n        }\n        undefined_retval = is_thin_archive;\n        bool_retval = is_verbose != 0;\n        entry_ptr = open_bfd_read(curr_file_name,target);\n        if (entry_ptr != 0) {\n          file_list = file_list + 1;\n          byte_retval = emul_append_constprop(curr_ptr_list,entry_ptr,(uint)bool_retval,undefined_retval);\n          local_retval = local_retval | byte_retval;\n          curr_file_name = *file_list;\n          goto joined_r0x001055aa;\n        }\n        fatal_error(curr_file_name,0);\n        uint_retval = (uint)bool_retval;\nLAB_001028f5:\n        func_retval = position_name;\n        if (uint_retval == 3) {\n          entry_ptr = *(long *)(archive + 0xf0);\n          if (*(long *)(archive + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*curr_ptr_list != (undefined8 *)0x0;\n              curr_ptr_list = (char **)(*curr_ptr_list + 0xf0)) {\n            int_retval = compare_file_names(*(undefined8 *)*curr_ptr_list,func_retval);\n            if (int_retval == 0) {\n              if (uint_retval == 2) {\n                curr_ptr_list = (char **)(*curr_ptr_list + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        curr_file_name = *file_list;\n      } while( true );\n    }\n    prev_ptr_list = curr_entry_ptr;\n    if (entry_ptr_list == (char **)0x0) {\n      uint_retval = position_type;\n      if (position_type == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (is_full_path == '\\0') {\n      curr_file_name = (char *)lbasename(*entry_ptr_list);\n      file_name_2 = curr_file_name;\n      if (is_truncate != '\\0') {\n        size_retval = strlen(curr_file_name);\n        ulong_retval = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        if (ulong_retval < size_retval) {\n          file_name_2 = (char *)allocate_memory(ulong_retval + 1);\n          entry_ptr = *(long *)(archive + 8);\n          file_name_1 = file_name_2;\n          for (ulong_retval = (ulong)*(byte *)(entry_ptr + 0x1e); ulong_retval != 0; ulong_retval = ulong_retval - 1) {\n            *file_name_1 = *curr_file_name;\n            curr_file_name = curr_file_name + (ulong)byte_var * -2 + 1;\n            file_name_1 = file_name_1 + (ulong)byte_var * -2 + 1;\n          }\n          file_name_2[*(byte *)(entry_ptr + 0x1e)] = '\\0';\n        }\n        file_name_1 = *file_list;\n        curr_file_name = file_name_2;\n        if (is_full_path == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_name_1 = *file_list;\n      if (is_full_path != '\\0') goto LAB_00102980;\nLAB_00105611:\n      base_file_name = (char *)lbasename(file_name_1);\n      if (is_truncate != '\\0') {\n        size_retval = strlen(base_file_name);\n        ulong_retval = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        file_name_1 = base_file_name;\n        curr_file_name = file_name_2;\n        if (ulong_retval < size_retval) {\n          file_name_1 = (char *)allocate_memory(ulong_retval + 1);\n          entry_ptr = *(long *)(archive + 8);\n          file_name_2 = file_name_1;\n          for (ulong_retval = (ulong)*(byte *)(entry_ptr + 0x1e); ulong_retval != 0; ulong_retval = ulong_retval - 1) {\n            *file_name_2 = *base_file_name;\n            base_file_name = base_file_name + (ulong)byte_var * -2 + 1;\n            file_name_2 = file_name_2 + (ulong)byte_var * -2 + 1;\n          }\n          file_name_1[*(byte *)(entry_ptr + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      int_retval = compare_file_names(base_file_name,file_name_2);\n      if (int_retval == 0) goto LAB_00102993;\nLAB_00105639:\n      prev_ptr_list = entry_ptr_list + 0x1e;\n      entry_ptr_list = (char **)entry_ptr_list[0x1e];\n      if (entry_ptr_list == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_name_1 = *file_list;\n    curr_file_name = *entry_ptr_list;\nLAB_00102980:\n    int_retval = compare_file_names(file_name_1,curr_file_name);\n    if (int_retval != 0) goto LAB_00105639;\nLAB_00102993:\n    if (entry_ptr_list[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (is_newer_only != 0) {\n      int_retval = get_file_stats(*file_list,&file_stats);\n      if (int_retval != 0) {\n        errno_ptr = __errno_location();\n        if (*errno_ptr != 2) {\n          fatal_error(*file_list);\nLAB_00102b7e:\n          curr_file_name = *entry_ptr_list;\n          func_retval = get_text_domain(0,\"internal get_file_stats error on %s\",5);\n          fatal_error_2(func_retval,curr_file_name);\n          free(file_list);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      curr_ptr_list = (char **)entry_ptr_list[0x1d];\n      if ((char **)entry_ptr_list[0x1d] == (char **)0x0) {\n        curr_ptr_list = entry_ptr_list;\n      }\n      int_retval = (**(code **)(curr_ptr_list[1] + 0x1e8))(entry_ptr_list,temp_stack_var);\n      if (int_retval != 0) goto LAB_00102b7e;\n      if (file_stats.st_mtim.tv_sec <= file_mod_time) goto LAB_0010577e;\n    }\n    func_retval = get_position_bfd(curr_entry_ptr,2,*entry_ptr_list);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      curr_file_name = *file_list;\n      bool_retval = is_verbose != 0;\n      entry_ptr = open_bfd_read(curr_file_name,target);\n      if (entry_ptr == 0) {\n        fatal_error(curr_file_name,0);\n        goto LAB_00102b3e;\n      }\n      byte_retval = emul_default_replace(func_retval,entry_ptr,bool_retval);\n    }\n    else {\n      norm_file_name = normalize_file_name(*file_list,archive);\n      int_retval = compare_file_names(norm_file_name,\"__.LIBDEP\");\n      if (int_retval != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_retval = emul_default_replace(func_retval,libdeps_bfd,is_verbose != 0);\n    }\n    if (byte_retval != 0) {\n      *prev_ptr_list = *(char **)(*prev_ptr_list + 0xf0);\n      local_retval = byte_retval;\n    }\nLAB_0010577e:\n    file_list = file_list + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_replace_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_0010285f",
                "__format": "formatString",
                "lVar2": "normalizedEntry",
                "plVar3": "alternateEntry",
                "uVar4": "currentEntry",
                "plVar5": "entry",
                "unaff_RBP": "executionCallback",
                "unaff_R12": "archiveBase",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryList",
                "iStack000000000000000c": "nameCounter"
            },
            "code": "\n\n\nvoid printArchiveEntryNotFound_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long normalizedEntry;\n  long *alternateEntry;\n  undefined8 currentEntry;\n  long *entry;\n  code *executionCallback;\n  long archiveBase;\n  int entryCount;\n  undefined8 *entryList;\n  int nameCounter;\n  \ncode_r0x0010285f:\n  currentEntry = *entryList;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,currentEntry);\nLAB_0010553e:\n  entryList = entryList + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  entry = *(long **)(archiveBase + 0xf0);\n  nameCounter = 0;\n  do {\n    if (entry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)entry + 0xac) == 0) {\n      normalizedEntry = *entry;\n      if (normalizedEntry == 0) {\n        alternateEntry = (long *)entry[0x1d];\n        if ((long *)entry[0x1d] == (long *)0x0) {\n          alternateEntry = entry;\n        }\n        (**(code **)(alternateEntry[1] + 0x1e8))(entry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archiveBase + 0x49) & 0x10) == 0) || (normalizedEntry = normalize(), normalizedEntry != 0)) {\n        currentEntry = normalize(*entryList);\n        iVar1 = filename_cmp(currentEntry,normalizedEntry);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (nameCounter = nameCounter + 1,\n            nameCounter == counted_name_counter)))) break;\n      }\n    }\n    entry = (long *)entry[0x1e];\n  } while( true );\n  (*executionCallback)();\n  *(undefined4 *)((long)entry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_archive_entry_not_found_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_index_0010394a",
                "param_1": "outputToStdout",
                "uVar1": "programName",
                "__stream": "outputStream",
                "pcVar2": "localizedText"
            },
            "code": "\n\n\nvoid printArchiveIndex_0010394a(uint outputToStdout)\n\n{\n  undefined8 programName;\n  char *localizedText;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  localizedText = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,localizedText,programName);\n  localizedText = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  list_supported_targets(program_name,outputStream);\n  if (outputToStdout != 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_archive_index_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_return_value_00105bb0",
                "undefined8": "int",
                "return": "result"
            },
            "code": "\nint getReturnValue_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_return_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_program_00107640",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_program_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_program_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "exit_if_not_interactive_0010315d",
                "interactive": "isInteractive"
            },
            "code": "\nvoid exitIfNotInteractive_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "exit_if_not_interactive_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "descriptor",
                "_stdout": "output_stream",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 descriptor)\n\n{\n  print_arelt_descr(output_stream,descriptor,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "process_data_00103172",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "flag",
                "param_4": "value",
                "uVar1": "input_value",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\nprocess_data_00103172(undefined8 *input_ptr,undefined8 *output_ptr,char flag,undefined8 value)\n\n{\n  undefined8 input_value;\n  undefined result [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*output_ptr);\n  }\n  input_value = *input_ptr;\n  output_ptr[0x1e] = input_value;\n  result._1_7_ = (undefined7)((ulong)input_value >> 8);\n  result[0] = 1;\n  *input_ptr = output_ptr;\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_data_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "puVar1": "bufferPointer",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "yy_n_chars": "numberOfChars",
                "yy_c_buf_p": "currentBufferPointer",
                "yytext": "text",
                "yyin": "input",
                "yy_hold_char": "holdChar"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *bufferPointer;\n  \n  bufferPointer = *(undefined8 **)(bufferStack + bufferStackTop * 8);\n  numberOfChars = *(undefined4 *)((long)bufferPointer + 0x1c);\n  currentBufferPointer = (undefined *)bufferPointer[2];\n  text = currentBufferPointer;\n  input = *bufferPointer;\n  holdChar = *currentBufferPointer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yyparse.isra.0",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_file_and_delete_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermission",
                "param_4": "fileSize",
                "uVar1": "copyResult",
                "piVar2": "ptrErrno",
                "pcVar3": "errMessage",
                "uVar4": "translatedErrorMessage",
                "uVar5": "errorCode",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyFileAndDelete_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 filePermission,undefined8 fileSize)\n\n{\n  uint copyResult;\n  int *ptrErrno;\n  char *errMessage;\n  undefined8 translatedErrorMessage;\n  ulong errorCode;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    errorCode = 0;\n  }\n  else {\n    copyResult = simple_copy_constprop_0(filePermission);\n    errorCode = (ulong)copyResult;\n    if (copyResult != 0) {\n      ptrErrno = __errno_location();\n      errMessage = strerror(*ptrErrno);\n      translatedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(translatedErrorMessage,destinationFilePath,errMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = fileSize;\n  result._0_8_ = errorCode;\n  return result;\n}\n\n",
            "called": [
                "smart_rename.constprop.0.cold",
                "simple_copy.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "copy_file_and_delete_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_size_00107650",
                "param_1": "filePath",
                "uVar1": "returnValue",
                "lVar2": "fileSize",
                "write_armap": "writeArmap"
            },
            "code": "\nundefined8 checkFileSize_00107650(undefined8 filePath)\n\n{\n  undefined8 returnValue;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    returnValue = 1;\n  }\n  else {\n    writeArmap = 1;\n    fileSize = open_inarch(filePath,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "open_inarch",
                "ranlib_only.cold",
                "get_file_size",
                "write_archive",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_size_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_unlink_00102f1e",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorLocation",
                "uVar2": "errorString"
            },
            "code": "\nundefined  [16] copyFileAndUnlink_00102f1e(void)\n\n{\n  int *errorLocation;\n  undefined8 errorString;\n  ulong fileSize;\n  char *filePath;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorString);\n  unlink(filePath);\n  auVar3._0_8_ = fileSize & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_and_unlink_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_error_message_00102fd7",
                "piVar1": "errorNumPtr",
                "uVar2": "localizedErrorMsg"
            },
            "code": "\nvoid printTimeErrorMessage_00102fd7(void)\n\n{\n  int *errorNumPtr;\n  undefined8 localizedErrorMsg;\n  \n  errorNumPtr = __errno_location();\n  strerror(*errorNumPtr);\n  localizedErrorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(localizedErrorMsg);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_time_error_message_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_application_00105d60",
                "completed_0": "isInitialized",
                "__cxa_finalize": "finalizeConstructorDestructors",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "removeClonedTmFunctions"
            },
            "code": "\nvoid initializeApplication_00105d60(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  finalizeConstructorDestructors(dynamicSharedObjectHandle);\n  removeClonedTmFunctions();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_application_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "localizedString"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *localizedString;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  localizedString = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(localizedString);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "fileBuffer",
                "param_2": "callback",
                "param_3": "entryList",
                "param_4": "count",
                "iVar1": "comparisonResult",
                "__format": "errorMessage",
                "lVar2": "entryPtr",
                "plVar3": "nextEntry",
                "uVar4": "normalizedEntry",
                "plVar5": "currentEntry",
                "local_cc": "nameCounter",
                "local_c8": "temporaryBuffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long fileBuffer,code *callback,undefined8 *entryList,int count)\n\n{\n  int comparisonResult;\n  char *errorMessage;\n  long entryPtr;\n  long *nextEntry;\n  undefined8 normalizedEntry;\n  long *currentEntry;\n  int nameCounter;\n  undefined temporaryBuffer [152];\n  \n  entryPtr = *(long *)(fileBuffer + 0xf0);\n  if (count == 0) {\n    for (; entryPtr != 0; entryPtr = *(long *)(entryPtr + 0xf0)) {\n      (*callback)(entryPtr);\n    }\n  }\n  else {\n    for (; entryPtr != 0; entryPtr = *(long *)(entryPtr + 0xf0)) {\n      *(undefined4 *)(entryPtr + 0xac) = 0;\n    }\n    do {\n      currentEntry = *(long **)(fileBuffer + 0xf0);\n      nameCounter = 0;\n      for (; currentEntry != (long *)0x0; currentEntry = (long *)currentEntry[0x1e]) {\n        if (*(int *)((long)currentEntry + 0xac) == 0) {\n          entryPtr = *currentEntry;\n          if (entryPtr == 0) {\n            nextEntry = (long *)currentEntry[0x1d];\n            if ((long *)currentEntry[0x1d] == (long *)0x0) {\n              nextEntry = currentEntry;\n            }\n            (**(code **)(nextEntry[1] + 0x1e8))(currentEntry,temporaryBuffer);\n          }\n          else if (((*(byte *)(fileBuffer + 0x49) & 0x10) == 0) ||\n                  (entryPtr = normalize(entryPtr,fileBuffer), entryPtr != 0)) {\n            normalizedEntry = normalize(*entryList,fileBuffer);\n            comparisonResult = filename_cmp(normalizedEntry,entryPtr);\n            if ((comparisonResult == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (nameCounter = nameCounter + 1, nameCounter == counted_name_counter)))) {\n              (*callback)();\n              *(undefined4 *)((long)currentEntry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntry = *entryList;\n      errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessage,normalizedEntry);\nLAB_0010553e:\n      entryList = entryList + 1;\n      count = count + -1;\n    } while (count != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "normalize",
                "map_over_members.cold",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "input_archive",
                "iVar1": "status",
                "__ptr": "buffer",
                "puVar2": "archive_ptr",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "errno_ptr",
                "pcVar7": "error_string",
                "unaff_RBP": "remaining_bytes",
                "local_88": "file_size",
                "auStack_b8": "stack_buffer",
                "unaff_R13": "bytes_processed",
                "unaff_R14": "file_size_limit"
            },
            "code": "\n\n\nvoid extract_and_print_archive_00103a78(undefined8 *input_archive)\n\n{\n  int status;\n  void *buffer;\n  undefined8 *archive_ptr;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_ptr;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong bytes_processed;\n  ulong file_size_limit;\n  undefined stack_buffer [48];\n  ulong file_size;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive_ptr = (undefined8 *)input_archive[0x1d];\n  if ((undefined8 *)input_archive[0x1d] == (undefined8 *)0x0) {\n    archive_ptr = input_archive;\n  }\n  status = (**(code **)(archive_ptr[1] + 0x1e8))(input_archive,stack_buffer);\n  if (status == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*input_archive);\n    }\n    bytes_processed = 0;\n    bfd_seek(input_archive,0,0);\n    goto LAB_00103afd;\n  }\n  input_archive = (undefined8 *)*input_archive;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    fatal(error_message,input_archive);\n    file_size = file_size_limit;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno_ptr = __errno_location();\n        error_string = strerror(*errno_ptr);\n        fatal(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      bytes_processed = bytes_processed + bytes_written;\nLAB_00103afd:\n      if (file_size <= bytes_processed) goto LAB_00103b91;\n      remaining_bytes = file_size - bytes_processed;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,input_archive);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    input_archive = *(undefined8 **)input_archive[0x1d];\n    file_size_limit = file_size;\n  } while( true );\n}\n\n",
            "called": [
                "strerror",
                "bfd_bread",
                "free",
                "fatal",
                "dcgettext",
                "fwrite",
                "bfd_seek",
                "__errno_location",
                "printf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "input_data",
                "cVar1": "returnValue",
                "uVar2": "flags",
                "iVar3": "temp_file_descriptor",
                "uVar4": "format_string",
                "__format": "corrupt_data_message",
                "__ptr": "input_filename",
                "__stream": "output_file",
                "ppcVar5": "output_bfd",
                "uStack0000000000000020": "permissions",
                "in_stack_00000028": "inode_number",
                "in_stack_00000038": "timestamp",
                "local_3c": "temp_name",
                "uStack_33": "file_type",
                "cStack_32": "is_setuid",
                "cStack_31": "is_setgid"
            },
            "code": "\nvoid write_archive_to_file_001058b0(undefined8 *input_data)\n\n{\n  char returnValue;\n  uint flags;\n  int temp_file_descriptor;\n  undefined8 format_string;\n  char *corrupt_data_message;\n  void *input_filename;\n  FILE *output_file;\n  char **output_bfd;\n  uint permissions;\n  uint inode_number;\n  undefined8 timestamp;\n  int temp_name [2];\n  undefined file_type;\n  char is_setuid;\n  char is_setgid;\n  \n  format_string = input_data[0x1e];\n  temp_name[0] = -1;\n  input_filename = (void *)xstrdup(*input_data);\n  output_file = (FILE *)make_tempname(input_filename,temp_name);\n  temp_file_descriptor = temp_name[0];\n  if (output_file != (FILE *)0x0) {\n    output_filename = output_file;\n    output_bfd = (char **)bfd_fdopenw(output_file,*(undefined8 *)input_data[1],temp_name[0]);\n    if (output_bfd != (char **)0x0) {\n      output_bfd = output_bfd;\n      bfd_set_format(output_bfd,2);\n      flags = (~write_armap >> 0x1f) << 3 | *(byte *)((long)output_bfd + 0x49) & 0xfffffff7;\n      *(char *)((long)output_bfd + 0x49) = (char)flags;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)input_data + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)output_bfd + 0x49) = (byte)flags | 0x10;\n        }\n        returnValue = bfd_set_archive_head(output_bfd,format_string);\n        if (returnValue != '\\0') break;\n        flags = bfd_fatal(input_filename);\nLAB_00102d37:\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x100000;\n      }\n      temp_file_descriptor = dup(temp_file_descriptor);\n      returnValue = bfd_close(output_bfd);\n      if (returnValue == '\\0') {\n        bfd_fatal(input_filename);\n        corrupt_data_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,corrupt_data_message);\n        flags = permissions & 0xf000;\n        if (flags == 0x4000) {\n          file_type = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type = 0x73;\n        }\n        else {\n          file_type = 0x70;\n          if (flags != 0x1000) {\n            file_type = 0x2d;\n          }\n        }\n        is_setuid = (-((_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n        is_setgid = (-((_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&is_setuid,_permissions >> 0x20,\n                (ulong)inode_number,timestamp,&stack0xffffffffffffffd8,\n                _permissions & 0xffffffff);\n        fputs(*output_bfd,output_file);\n        if ((char)input_data != '\\0') {\n          if ((*(byte *)((long)output_bfd + 0x49) & 0x10) == 0) {\n            if (output_bfd[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (output_bfd[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(input_data);\n      temp_file_descriptor = smart_rename_constprop_0(output_file,input_filename,temp_file_descriptor);\n      if (temp_file_descriptor == 0) {\n        free(input_filename);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(temp_file_descriptor);\n    bfd_fatal(input_filename);\n  }\n  format_string = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(format_string);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_fdopenw",
                "bfd_fatal",
                "close",
                "bfd_set_format",
                "dcgettext",
                "make_tempname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "main",
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_and_save_file_00105a20",
                "param_1": "filename",
                "pcVar1": "outputDir",
                "pcVar2": "currentChar",
                "uVar3": "basename",
                "uVar4": "errorString",
                "pFVar5": "filePtr",
                "sVar6": "outputDirLength"
            },
            "code": "\nvoid extractAndSaveFile_00105a20(char *filename)\n\n{\n  char *outputDir;\n  char *currentChar;\n  undefined8 basename;\n  undefined8 errorString;\n  FILE *filePtr;\n  size_t outputDirLength;\n  \n  outputDir = output_dir;\n  output_filename = filename;\n  if (*filename == '/') {\nLAB_00102e9a:\n    basename = lbasename();\n    outputDir = output_filename;\n    errorString = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(errorString,outputDir,basename);\n    output_filename = (char *)basename;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*filename == '\\0') {\n      if ((output_dir != (char *)0x0) && (outputDirLength = strlen(output_dir), outputDirLength != 0)) {\n        if (outputDir[outputDirLength - 1] == '/') {\n          output_filename = (char *)concat(outputDir,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(outputDir,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      filePtr = fopen(output_filename,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentChar = filename;\n    if ((*filename == '.') && (currentChar = filename + 1, filename[1] == '.')) {\n      currentChar = filename + 2;\n      if ((filename[2] == '/') || (filename[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n    }\n    for (; filename = currentChar, *currentChar == '/'; currentChar = currentChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_and_save_file_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_and_set_error_00102f55",
                "piVar2": "error_location",
                "iVar1": "saved_errno",
                "unaff_R12D": "file_descriptor"
            },
            "code": "\nundefined8 close_and_set_error_00102f55(void)\n\n{\n  int saved_errno;\n  int *error_location;\n  int file_descriptor;\n  \n  error_location = __errno_location();\n  saved_errno = *error_location;\n  close(file_descriptor);\n  *error_location = saved_errno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_and_create_temp_file_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "iVar1": "temp_file_descriptor",
                "pcVar2": "last_slash",
                "lVar3": "file_name_length",
                "lVar4": "iterator",
                "lVar5": "last_slash_distance",
                "pcVar6": "new_file_path",
                "bVar7": "is_root_directory",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] extract_and_create_temp_file_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  int temp_file_descriptor;\n  char *last_slash;\n  long file_name_length;\n  long iterator;\n  long last_slash_distance;\n  char *new_file_path;\n  byte is_root_directory;\n  undefined result [16];\n  \n  is_root_directory = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    file_name_length = 0;\n  }\n  else {\n    last_slash_distance = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_distance + 0xb);\n    file_name_length = last_slash_distance + 1;\n    new_file_path = last_slash;\n    for (iterator = last_slash_distance; iterator != 0; iterator = iterator + -1) {\n      *new_file_path = *file_path;\n      file_path = file_path + (ulong)is_root_directory * -2 + 1;\n      new_file_path = new_file_path + (ulong)is_root_directory * -2 + 1;\n    }\n    last_slash[last_slash_distance] = '/';\n  }\n  *(undefined8 *)(last_slash + file_name_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + file_name_length) + 8) = 0;\n  temp_file_descriptor = mkstemp(last_slash);\n  if (temp_file_descriptor == -1) {\n    new_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = temp_file_descriptor;\n    new_file_path = last_slash;\n  }\n  result._8_8_ = unused_param2;\n  result._0_8_ = new_file_path;\n  return result;\n}\n\n",
            "called": [
                "make_tempname.cold",
                "mkstemp",
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "extract_and_create_temp_file_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "main",
                "ar_emul_default_usage",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "map_over_members.cold",
                "usage",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "bfd_nonfatal": "handleNonFatalError",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  handleNonFatalError();\n                    \n  exitCode(1);\n}\n\n",
            "called": [
                "bfd_nonfatal",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "write_archive",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "prompt",
                "bfd_nonfatal.cold",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "destroy_at_exit_handlers_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "atExitHandler",
                "uVar5": "remainingHandlers"
            },
            "code": "\nvoid destroyAtExitHandlers_00107cc0(void)\n\n{\n  long currentIndex;\n  long prevIndex;\n  long tempIndex;\n  long *atExitHandler;\n  uint remainingHandlers;\n  \n  atExitHandler = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      remainingHandlers = *(int *)(atExitHandler + 1) - 1;\n      if (-1 < (int)remainingHandlers) {\n        currentIndex = (long)(int)remainingHandlers;\n        remainingHandlers = remainingHandlers & 7;\n        (*(code *)atExitHandler[currentIndex + 2])();\n        prevIndex = currentIndex + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (remainingHandlers != 0) {\n            if (remainingHandlers != 1) {\n              if (remainingHandlers != 2) {\n                if (remainingHandlers != 3) {\n                  if (remainingHandlers != 4) {\n                    if (remainingHandlers != 5) {\n                      if (remainingHandlers != 6) {\n                        (*(code *)atExitHandler[currentIndex + 1])();\n                        prevIndex = currentIndex + -2;\n                      }\n                      (*(code *)atExitHandler[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)atExitHandler[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)atExitHandler[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)atExitHandler[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)atExitHandler[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)atExitHandler[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)atExitHandler[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)atExitHandler[tempIndex + 1])();\n            (*(code *)atExitHandler[tempIndex])();\n            (*(code *)atExitHandler[currentIndex])();\n            (*(code *)atExitHandler[tempIndex + -2])();\n            (*(code *)atExitHandler[tempIndex + -3])();\n            (*(code *)atExitHandler[tempIndex + -4])();\n            (*(code *)atExitHandler[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      atExitHandler = (long *)*atExitHandler;\n    } while (atExitHandler != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "destroy_at_exit_handlers_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_constant_propagation_00105ae0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4"
            },
            "code": "\nvoid appendConstantPropagation_00105ae0(undefined8 inputParam1,undefined8 inputParam2,undefined inputParam3,undefined inputParam4)\n\n{\n  do_ar_emul_append_constprop_0(inputParam1,inputParam2,inputParam3,inputParam4);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_constant_propagation_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "reportData",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "count",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "stack",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "input_1",
                "local_78": "input_2",
                "local_68": "input_3",
                "local_58": "input_4",
                "local_48": "input_5",
                "local_38": "input_6",
                "local_28": "input_7",
                "local_18": "input_8"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 reportData,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 count;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined stack [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 input_1;\n  undefined4 input_2;\n  undefined4 input_3;\n  undefined4 input_4;\n  undefined4 input_5;\n  undefined4 input_6;\n  undefined4 input_7;\n  undefined4 input_8;\n  \n  if (flag != '\\0') {\n    input_1 = input_1;\n    input_2 = input_2;\n    input_3 = input_3;\n    input_4 = input_4;\n    input_5 = input_5;\n    input_6 = input_6;\n    input_7 = input_7;\n    input_8 = input_8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = stack;\n  count = 0x30;\n  param_10 = input_10;\n  param_11 = input_11;\n  param_12 = input_12;\n  param_13 = input_13;\n  param_14 = input_14;\n  report(reportData,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "targetValue",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr",
                "fprintf": "print",
                "dcgettext": "getTranslatedMessage",
                "fputc": "putCharacter",
                "free": "releaseMemory"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *file)\n\n{\n  long targetValue;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)getTranslatedMessage(0,\"Supported targets:\",5);\n    print(file,message);\n  }\n  else {\n    message = (char *)getTranslatedMessage(0,\"%s: supported targets:\",5);\n    print(file,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    targetValue = *ptr;\n    ptr = ptr + 1;\n    if (targetValue == 0) break;\n    print(file,\" %s\");\n  }\n  putCharacter(10,file);\n  releaseMemory(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_basename_00105830",
                "param_1": "input_path",
                "param_2": "options",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "__s": "basename",
                "uVar3": "max_length",
                "pcVar4": "output_path",
                "bVar5": "flag",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extract_basename_00105830(char *input_path,long options,undefined8 arg_1,undefined8 arg_2)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *basename;\n  ulong max_length;\n  char *output_path;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if (full_pathname == '\\0') {\n    basename = (char *)lbasename();\n    input_path = basename;\n    if ((ar_truncate != '\\0') && (options != 0)) {\n      sVar2 = strlen(basename);\n      max_length = (ulong)*(byte *)(*(long *)(options + 8) + 0x1e);\n      if (max_length < sVar2) {\n        input_path = (char *)xmalloc(max_length + 1);\n        lVar1 = *(long *)(options + 8);\n        output_path = input_path;\n        for (max_length = (ulong)*(byte *)(lVar1 + 0x1e); max_length != 0; max_length = max_length - 1) {\n          *output_path = *basename;\n          basename = basename + (ulong)flag * -2 + 1;\n          output_path = output_path + (ulong)flag * -2 + 1;\n        }\n        input_path[*(byte *)(lVar1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = arg_2;\n  result._0_8_ = input_path;\n  return result;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "map_over_members",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "extract_basename_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorName",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorName)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 extraInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorName != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorName,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "initialize_output_file_00102e57",
                "output_filename": "generatedFilename",
                "verbose": "isVerbose",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid initializeOutputFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  generatedFilename = (char *)concat();\n  if (isVerbose != 0) {\n    printf(\"x - %s\\n\",generatedFilename);\n  }\n  filePointer = fopen(generatedFilename,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(generatedFilename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "reverse_archived_files_00105af0",
                "param_1": "file_pointer",
                "param_2": "file_handle",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "is_bfd_format_valid",
                "uVar2": "result",
                "lVar3": "archived_file_handle",
                "uVar4": "return_value"
            },
            "code": "\nulong reverse_archived_files_00105af0(long *file_pointer,long file_handle,char flag1,char flag2)\n\n{\n  char is_bfd_format_valid;\n  uint result;\n  long archived_file_handle;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  else {\n    is_bfd_format_valid = bfd_check_format(file_handle,2);\n    if (is_bfd_format_valid != '\\0') {\n      return_value = 0;\n      for (archived_file_handle = bfd_openr_next_archived_file(file_handle,0); archived_file_handle != 0;\n          archived_file_handle = bfd_openr_next_archived_file(file_handle,archived_file_handle)) {\n        result = reverse_archived_files_00105af0(file_pointer,archived_file_handle,flag1,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_pointer = (long *)(*file_pointer + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  *(long *)(file_handle + 0xf0) = *file_pointer;\n  *file_pointer = file_handle;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "do_ar_emul_append.constprop.0",
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "ar_emul_default_append"
            ],
            "imported": false,
            "current_name": "reverse_archived_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "get_file_size",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_memory_and_return_00102ba1",
                "unaff_RBP": "memoryPointer",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] freeMemoryAndReturn_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *memoryPointer;\n  ulong returnAddress;\n  \n  free(memoryPointer);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "free_memory_and_return_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "generate_file_listing_00102d2f",
                "unaff_RBX": "file_names",
                "unaff_RBP": "output_file",
                "unaff_R12": "is_thin_archive",
                "unaff_R13": "file_list",
                "unaff_R14D": "duplicate_fd",
                "uStack0000000000000068": "file_permissions",
                "uStack000000000000006c": "owner_id",
                "in_stack_00000070": "group_id",
                "in_stack_00000080": "mtime",
                "bVar1": "message_code",
                "cVar2": "result",
                "iVar3": "rename_result",
                "__format": "corrupt_time_message",
                "uVar4": "file_type",
                "uStack0000000000000015": "file_permission_char",
                "cStack0000000000000016": "read_permission",
                "cStack0000000000000017": "write_permission",
                "in_stack_00000018": "execute_permission",
                "cStack0000000000000019": "read_permission_group",
                "cStack000000000000001a": "write_permission_group",
                "cStack000000000000001b": "execute_permission_group",
                "cStack000000000000001c": "read_permission_other",
                "cStack000000000000001d": "write_permission_other",
                "cStack000000000000001e": "execute_permission_other"
            },
            "code": "\nvoid generate_file_listing_00102d2f(void)\n\n{\n  byte message_code;\n  char result;\n  int rename_result;\n  char *corrupt_time_message;\n  uint file_type;\n  char **file_names;\n  FILE *output_file;\n  long is_thin_archive;\n  void *file_list;\n  int duplicate_fd;\n  undefined file_permission_char;\n  char read_permission;\n  char write_permission;\n  char execute_permission;\n  char read_permission_group;\n  char write_permission_group;\n  char execute_permission_group;\n  char read_permission_other;\n  char write_permission_other;\n  char execute_permission_other;\n  undefined uStack000000000000001f;\n  uint file_permissions;\n  uint owner_id;\n  uint group_id;\n  undefined8 mtime;\n  \n  do {\n    message_code = bfd_fatal();\n    *(uint *)((long)file_names + 0x44) = *(uint *)((long)file_names + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(is_thin_archive + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)file_names + 0x49) = message_code | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  dup(duplicate_fd);\n  result = bfd_close();\n  if (result != '\\0') {\n    output_bfd = 0;\n    output_filename = 0;\n    bfd_close();\n    rename_result = smart_rename_constprop_0();\n    if (rename_result == 0) {\n      free(file_list);\n      free(output_file);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  corrupt_time_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corrupt_time_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_permission_char = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_permission_char = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_permission_char = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_permission_char = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_permission_char = 0x73;\n  }\n  else {\n    file_permission_char = 0x70;\n    if (file_type != 0x1000) {\n      file_permission_char = 0x2d;\n    }\n  }\n  read_permission = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  write_permission = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  execute_permission = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  read_permission_group = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  write_permission_group = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  execute_permission_group = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  read_permission_other = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  write_permission_other = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  execute_permission_other = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (execute_permission == 'x') {\n      execute_permission = 's';\n    }\n    else {\n      execute_permission = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (execute_permission_group == 'x') {\n      execute_permission_group = 's';\n    }\n    else {\n      execute_permission_group = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (execute_permission_other == 'x') {\n      execute_permission_other = 't';\n    }\n    else {\n      execute_permission_other = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)owner_id,\n          (ulong)group_id,mtime,&stack0x00000020,(ulong)file_permissions)\n  ;\n  fputs(*file_names,output_file);\n  if ((char)is_thin_archive != '\\0') {\n    if ((*(byte *)((long)file_names + 0x49) & 0x10) == 0) {\n      if (file_names[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_names[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "called": [
                "dup",
                "bfd_fatal",
                "free",
                "bfd_close",
                "smart_rename.constprop.0",
                "bfd_set_archive_head",
                "xexit",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "generate_file_listing_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "prompt",
                "main",
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "yyerror.constprop.0",
                "print_contents",
                "yyparse.isra.0",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main",
                "normalize",
                "replace_members.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_archive_file_00102c25",
                "param_7": "permissions",
                "param_11": "mode",
                "param_12": "fileSize",
                "puVar9": "paramArray",
                "pplVar6": "target",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "counter",
                "unaff_RBX": "fileArray",
                "plVar8": "currentFile",
                "uVar5": "errorMessage",
                "iVar2": "result",
                "iVar1": "comparisonResult",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "output_file": "outputFile",
                "output_filename": "filename",
                "preserve_dates": "shouldPreserveDates"
            },
            "code": "\nlong * extractArchiveFile_00102c25(void)\n\n{\n  int comparisonResult;\n  int result;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long **target;\n  void *buffer;\n  size_t bytesRead;\n  long counter;\n  long **fileArray;\n  long *currentFile;\n  undefined4 *paramArray;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 *permissions;\n  __mode_t mode;\n  ulong fileSize;\n  \n  paramArray = permissions;\n  for (counter = 0x24; counter != 0; counter = counter + -1) {\n    *paramArray = 0;\n    paramArray = paramArray + 1;\n  }\n  target = (long **)fileArray[0x1d];\n  if ((long **)fileArray[0x1d] == (long **)0x0) {\n    target = fileArray;\n  }\n  result = (*(code *)target[1][0x3d])();\n  if (result != 0) {\n    currentFile = *fileArray;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    result = fatal(errorMessage,currentFile);\n    errorMessage = posname;\n    if (result == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (comparisonResult == 0) {\n          if (result != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek();\n  outputFile = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*fileArray);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = fileSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        fileArray = (long **)*fileArray[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorMessage,fileArray);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*fileArray);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,outputFile);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        fatal(\"%s: %s\",filename,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  errorString = filename;\n  outputFile = (FILE *)0x0;\n  chmod(filename,mode);\n  if (shouldPreserveDates != 0) {\n    set_times(errorString,permissions);\n  }\n  filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_bread",
                "chmod",
                "open_output_file.isra.0",
                "free",
                "fclose",
                "fwrite",
                "set_times",
                "strerror",
                "fatal",
                "dcgettext",
                "bfd_seek",
                "__errno_location",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_archive_file_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_and_null_terminate_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "newString",
                "uVar4": "maxCopyLength",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "savedRbpValue",
                "puVar5": "destinationPointer",
                "bVar6": "isNegative",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyAndNullTerminateString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *newString;\n  ulong maxCopyLength;\n  undefined *sourcePointer;\n  long savedRbpValue;\n  undefined *destinationPointer;\n  byte isNegative;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isNegative = 0;\n  inputLength = strlen(inputString);\n  maxCopyLength = (ulong)*(byte *)(*(long *)(savedRbpValue + 8) + 0x1e);\n  newString = sourcePointer;\n  if (maxCopyLength < inputLength) {\n    newString = (undefined *)xmalloc(maxCopyLength + 1);\n    lVar1 = *(long *)(savedRbpValue + 8);\n    destinationPointer = newString;\n    for (maxCopyLength = (ulong)*(byte *)(lVar1 + 0x1e); maxCopyLength != 0; maxCopyLength = maxCopyLength - 1) {\n      *destinationPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)isNegative * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)isNegative * -2 + 1;\n    }\n    newString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = newString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_members",
                "map_over_list",
                "main",
                "get_pos_bfd.cold",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "main",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 64662,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}