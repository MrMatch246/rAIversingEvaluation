{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_file_offset_00102cd9",
                "in_EAX": "comparisonValue",
                "iVar1": "filenameComparisonResult",
                "unaff_RBX": "fileOffsets",
                "param_7": "filenameToFind"
            },
            "code": "\nlong * findFileOffset_00102cd9(void)\n\n{\n  int comparisonValue;\n  int filenameComparisonResult;\n  long *fileOffsets;\n  undefined8 filenameToFind;\n  \n  filenameToFind = posname;\n  if (comparisonValue == 3) {\n    for (; *fileOffsets != 0; fileOffsets = (long *)(*fileOffsets + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileOffsets != (undefined8 *)0x0; fileOffsets = (long *)(*fileOffsets + 0xf0)) {\n      filenameComparisonResult = filename_cmp(*(undefined8 *)*fileOffsets,filenameToFind);\n      if (filenameComparisonResult == 0) {\n        if (comparisonValue != 2) {\n          return fileOffsets;\n        }\n        return (long *)(*fileOffsets + 0xf0);\n      }\n    }\n  }\n  return fileOffsets;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_file_offset_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "data",
                "param_3": "showHeader",
                "param_4": "showAddress",
                "iVar1": "result",
                "ppcVar2": "filePtr",
                "pcVar3": "timeInfo",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "ownerUserRead",
                "cStack_f1": "ownerUserWrite",
                "cStack_f0": "ownerUserExecute",
                "cStack_ef": "ownerGroupRead",
                "cStack_ee": "ownerGroupWrite",
                "cStack_ed": "ownerGroupExecute",
                "cStack_ec": "otherUsersRead",
                "cStack_eb": "otherUsersWrite",
                "cStack_ea": "otherUsersExecute",
                "local_e8": "timeString",
                "local_b8": "unknownString",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDeviceNumber",
                "uStack_98": "minorDeviceNumber",
                "uStack_88": "inodeNumber",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *file,char **data,char showHeader,char showAddress)\n\n{\n  int result;\n  char **filePtr;\n  char *timeInfo;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermission;\n  char ownerUserRead;\n  char ownerUserWrite;\n  char ownerUserExecute;\n  char ownerGroupRead;\n  char ownerGroupWrite;\n  char ownerGroupExecute;\n  char otherUsersRead;\n  char otherUsersWrite;\n  char otherUsersExecute;\n  undefined uStack_e9;\n  char timeString [48];\n  undefined unknownString [24];\n  uint fileSize;\n  uint majorDeviceNumber;\n  uint minorDeviceNumber;\n  undefined8 inodeNumber;\n  time_t fileModificationTime;\n  \n  if (showHeader != '\\0') {\n    filePtr = (char **)data[0x1d];\n    if ((char **)data[0x1d] == (char **)0x0) {\n      filePtr = data;\n    }\n    result = (**(code **)(filePtr[1] + 0x1e8))(data,unknownString);\n    if (result == 0) {\n      currentTime = fileModificationTime;\n      timeInfo = ctime(&currentTime);\n      if (timeInfo == (char *)0x0) {\n        timeInfo = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeString,timeInfo);\n      }\n      else {\n        sprintf(timeString,\"%.12s %.4s\",timeInfo + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      ownerUserRead = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      ownerUserWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      ownerUserExecute = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      ownerGroupRead = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      ownerGroupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      ownerGroupExecute = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      otherUsersRead = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      otherUsersWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      otherUsersExecute = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (ownerUserExecute == 'x') {\n          ownerUserExecute = 's';\n        }\n        else {\n          ownerUserExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (ownerGroupExecute == 'x') {\n          ownerGroupExecute = 's';\n        }\n        else {\n          ownerGroupExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (otherUsersExecute == 'x') {\n          otherUsersExecute = 't';\n        }\n        else {\n          otherUsersExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&ownerUserRead,(ulong)majorDeviceNumber,(ulong)minorDeviceNumber,inodeNumber,\n              timeString,(ulong)fileSize);\n    }\n  }\n  fputs(*data,file);\n  if (showAddress != '\\0') {\n    if ((*(byte *)((long)data + 0x49) & 0x10) == 0) {\n      if (data[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (data[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr.cold",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "initialize_output_file_00105a68",
                "pcVar1": "outputDirectory",
                "pFVar2": "outputFile",
                "sVar3": "outputDirectoryLength"
            },
            "code": "\nvoid initializeOutputFile_00105a68(void)\n\n{\n  char *outputDirectory;\n  FILE *outputFile;\n  size_t outputDirectoryLength;\n  \n  outputDirectory = output_dir;\n  if (output_dir != (char *)0x0) {\n    outputDirectoryLength = strlen(output_dir);\n    if (outputDirectoryLength != 0) {\n      if (outputDirectory[outputDirectoryLength - 1] == '/') {\n        output_filename = (char *)concat(outputDirectory,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(outputDirectory,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  outputFile = fopen(output_filename,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "strlen",
                "open_output_file.isra.0.cold",
                "perror",
                "printf",
                "fopen",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_entries_from_archive_001032a8",
                "param_1": "archive",
                "param_2": "entryCallback",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "entryName",
                "bVar3": "foundEntry",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessage",
                "plVar6": "nextEntryInList",
                "lVar7": "currentArchiveEntry",
                "plVar8": "previousEntryInList"
            },
            "code": "\n\n\nundefined8 extractEntriesFromArchive_001032a8(long *archive,code *entryCallback,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 entryName;\n  bool foundEntry;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessage;\n  long *nextEntryInList;\n  long currentArchiveEntry;\n  long *previousEntryInList;\n  \n  currentArchiveEntry = archive[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentArchiveEntry != 0) {\n      nextEntry = *(long *)(currentArchiveEntry + 0xf0);\n      (*entryCallback)(currentArchiveEntry,0);\n      currentArchiveEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntry = (long *)archive[0x1e];\n      previousEntryInList = archive;\n      while (nextEntryInList = currentEntry, nextEntryInList != (long *)0x0) {\n        if (*nextEntryInList != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*entryCallback)(nextEntryInList,previousEntryInList);\n          }\n        }\n        previousEntryInList = nextEntryInList;\n        currentEntry = (long *)nextEntryInList[0x1e];\n      }\n      if (!foundEntry) {\n        entryName = *entryNames;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,entryName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_entries_from_archive_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "verboseMode",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint verboseMode)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (verboseMode != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,program_name);\n  programName = program_name;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (verboseMode != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(verboseMode ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "list_supported_targets",
                "ar_emul_default_usage",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_data_00107920",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "param_6": "data6",
                "param_7": "data7",
                "param_8": "data8",
                "param_9": "reportParam1",
                "param_10": "reportParam2",
                "param_11": "reportParam3",
                "param_12": "reportParam4",
                "param_13": "reportParam5",
                "param_14": "reportParam6",
                "in_AL": "flag",
                "local_d8": "count",
                "local_d4": "size",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "reportData1",
                "local_a8": "reportData2",
                "local_a0": "reportData3",
                "local_98": "reportData4",
                "local_90": "reportData5",
                "local_88": "reportData6",
                "local_78": "reportData7",
                "local_68": "reportData8",
                "local_58": "reportData9",
                "local_48": "reportData10",
                "local_38": "reportData11",
                "local_28": "reportData12",
                "local_18": "reportData13"
            },
            "code": "\nvoid reportData_00107920(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 data5,undefined4 data6,undefined4 data7,undefined4 data8,\n                 undefined8 reportParam1,undefined8 reportParam2,undefined8 reportParam3,undefined8 reportParam4,\n                 undefined8 reportParam5,undefined8 reportParam6)\n\n{\n  char flag;\n  undefined4 count;\n  undefined4 size;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 reportData_001079201;\n  undefined8 reportData_001079202;\n  undefined8 reportData_001079203;\n  undefined8 reportData_001079204;\n  undefined8 reportData_001079205;\n  undefined4 reportData_001079206;\n  undefined4 reportData_001079207;\n  undefined4 reportData_001079208;\n  undefined4 reportData_001079209;\n  undefined4 reportData_0010792010;\n  undefined4 reportData_0010792011;\n  undefined4 reportData_0010792012;\n  undefined4 reportData_0010792013;\n  \n  if (flag != '\\0') {\n    reportData_001079206 = data1;\n    reportData_001079207 = data2;\n    reportData_001079208 = data3;\n    reportData_001079209 = data4;\n    reportData_0010792010 = data5;\n    reportData_0010792011 = data6;\n    reportData_0010792012 = data7;\n    reportData_0010792013 = data8;\n  }\n  pointer1 = &stack0x00000008;\n  count = 8;\n  pointer2 = buffer;\n  size = 0x30;\n  reportData_001079201 = reportParam2;\n  reportData_001079202 = reportParam3;\n  reportData_001079203 = reportParam4;\n  reportData_001079204 = reportParam5;\n  reportData_001079205 = reportParam6;\n  report(reportParam1,&count);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "set_times.cold",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "get_file_size",
                "main",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_data_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "normalize.cold",
                "make_tempname",
                "print_contents",
                "replace_members.cold",
                "extract_file.cold",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "initialize_output_file_00102e6f",
                "pcVar1": "output_dir",
                "in_RAX": "current_dir",
                "uVar2": "local_var_1",
                "uVar3": "local_var_2",
                "pFVar4": "file_ptr",
                "sVar5": "dir_len",
                "pcVar6": "current_char"
            },
            "code": "\nvoid initialize_output_file_00102e6f(void)\n\n{\n  char *output_dir;\n  char *current_dir;\n  undefined8 local_var_1;\n  undefined8 local_var_2;\n  FILE *file_ptr;\n  size_t dir_len;\n  char *current_char;\n  \n  output_dir = output_dir;\n  do {\n    current_dir = current_dir + 1;\n    while (*current_dir != '/') {\n      if (*current_dir == '\\0') {\n        if ((output_dir != (char *)0x0) && (dir_len = strlen(output_dir), dir_len != 0)) {\n          if (output_dir[dir_len - 1] == '/') {\n            output_filename = (char *)concat(output_dir,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_dir,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        file_ptr = fopen(output_filename,\"w\");\n        if (file_ptr == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char = current_dir;\n      if ((*current_dir == '.') && (current_char = current_dir + 1, current_dir[1] == '.')) {\n        current_char = current_dir + 2;\n        if ((current_dir[2] == '/') || (current_dir[2] == '\\0')) {\n          local_var_1 = lbasename();\n          output_dir = output_filename;\n          local_var_2 = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(local_var_2,output_dir,local_var_1);\n          output_filename = (char *)local_var_1;\n          initialize_output_file_00102e6f_00105a68();\n          return;\n        }\n      }\n      for (; (current_dir = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "dcgettext",
                "non_fatal",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "buffer_size",
                "pvVar1": "buffer",
                "pvVar2": "allocated_buffer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 buffer_size,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  void *buffer;\n  void *allocated_buffer;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    allocated_buffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = allocated_buffer;\n  } while (allocated_buffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,buffer_size);\n  result._8_8_ = param_4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "yy_init_buffer",
                "yy_fatal_error",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "context",
                "iVar1": "entryPoint"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *context)\n\n{\n  int entryPoint;\n  \n  entryPoint = __gmon_start__();\n  return entryPoint;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "fatal",
                "bfd_fatal",
                "ranlib_only",
                "FUN_00105a68",
                "maybequit",
                "ranlib_usage",
                "write_archive.cold",
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_pointer_00105870",
                "param_1": "array",
                "param_2": "size",
                "param_3": "nameToFind",
                "posname": "defaultName",
                "iVar3": "position",
                "iVar1": "comparisonResult"
            },
            "code": "\nlong * findMatchingPointer_00105870(long *array,int size,undefined8 nameToFind)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  int position;\n  \n  uVar2 = defaultName;\n  position = postype;\n  if (postype == 0) {\n    uVar2 = nameToFind;\n    position = size;\n  }\n  if (position == 3) {\n    for (; *array != 0; array = (long *)(*array + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*array != (undefined8 *)0x0; array = (long *)(*array + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*array,uVar2);\n      if (comparisonResult == 0) {\n        if (position != 2) {\n          return array;\n        }\n        return (long *)(*array + 0xf0);\n      }\n    }\n  }\n  return array;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "find_matching_pointer_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "display_prompt_00103ba8",
                "interactive": "is_interactive",
                "printf": "print_message",
                "_stdout": "standard_output"
            },
            "code": "\n\n\nvoid display_prompt_00103ba8(void)\n\n{\n  if (is_interactive != 0) {\n    print_message(\"AR >\");\n    fflush(standard_output);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "display_prompt_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_descr_verbose_00103ddc",
                "param_1": "input_param",
                "outfile": "output_file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_descr_verbose_00103ddc(undefined8 input_param)\n\n{\n  print_arelt_descr(output_file,input_param,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_descr_verbose_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "error_message",
                "__gnuc_va_list": "arguments_list",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "name_of_program",
                "param_2": "format_arguments",
                "putc": "write_character",
                "fflush": "flush_output_buffer",
                "fprintf": "print_formatted",
                "vfprintf": "print_formatted_with_arguments"
            },
            "code": "\n\n\nvoid print_error_message_001078c0(char *error_message,arguments_list format_arguments)\n\n{\n  flush_output_buffer(standard_output);\n  print_formatted(standard_error,\"%s: \",name_of_program);\n  print_formatted_with_arguments(standard_error,error_message,format_arguments);\n  write_character(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "write_archive.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "errorMessage",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessage;\n  \n  lineNumber = linenumber + 1;\n  errorMessage = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessage,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "write_archive.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "__size": "size",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_end_ptr",
                "bVar4": "temp_byte",
                "yy_buffer_stack": "buffer_stack",
                "yy_buffer_stack_max": "buffer_stack_max",
                "yy_buffer_stack_top": "buffer_stack_top"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t size;\n  undefined8 input;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_end_ptr;\n  byte temp_byte;\n  \n  temp_byte = 0;\n  if (buffer_stack == (void *)0x0) {\n    buffer_stack = calloc(8,1);\n    if (buffer_stack != (void *)0x0) {\n      buffer_stack_max = 1;\n      buffer_stack_top = 0;\n      return input;\n    }\n  }\n  else {\n    if (buffer_stack_top < buffer_stack_max - 1U) {\n      return input;\n    }\n    new_size = buffer_stack_max + 8;\n    size = new_size * 8;\n    buffer_stack = realloc(buffer_stack,size);\n    if (buffer_stack != (void *)0x0) {\n      buffer_end_ptr = (undefined4 *)((long)buffer_stack + (size - 0x40));\n      buffer_stack_max = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_end_ptr = 0;\n        buffer_end_ptr = buffer_end_ptr + (ulong)temp_byte * -2 + 1;\n      }\n      return input;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  buffer_stack_top = 0;\n  buffer_stack_max = 1;\n  return input;\n}\n\n",
            "called": [
                "calloc",
                "yy_fatal_error",
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "yy_init_buffer",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_and_close_00102bf5",
                "output_file": "file",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanup_and_close_00102bf5(void)\n\n{\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "fclose",
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_and_close_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020",
                "undefined": "targetAddress"
            },
            "code": "\nvoid executeIndirectFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(targetAddress *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "extract_file.cold",
                "remove_output.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_filename_00102943",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid initializeOutputFilename_00102943(void)\n\n{\n  outputFilename = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members.cold",
                "replace_members"
            ],
            "imported": false,
            "current_name": "initialize_output_filename_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errNo",
                "pcVar3": "errorString",
                "uVar4": "errorMsg",
                "local_38": "accessTime",
                "uStack_34": "modTime",
                "uStack_30": "changeTime",
                "uStack_2c": "birthTime",
                "local_28": "backupAccessTime",
                "uStack_24": "backupModTime",
                "uStack_20": "backupChangeTime",
                "uStack_1c": "backupBirthTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errNo;\n  char *errorString;\n  undefined8 errorMsg;\n  undefined4 accessTime;\n  undefined4 modTime;\n  undefined4 changeTime;\n  undefined4 birthTime;\n  undefined4 backupAccessTime;\n  undefined4 backupModTime;\n  undefined4 backupChangeTime;\n  undefined4 backupBirthTime;\n  \n  backupAccessTime = *(undefined4 *)(fileInfo + 0x58);\n  backupModTime = *(undefined4 *)(fileInfo + 0x5c);\n  backupChangeTime = *(undefined4 *)(fileInfo + 0x60);\n  backupBirthTime = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  birthTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errNo = __errno_location();\n    errorString = strerror(*errNo);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(errorMsg,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "yy_init_buffer",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_and_print_time_data_00102d8c",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "fileAddress",
                "__format": "corruptTimeDataMessage",
                "uVar1": "fileType",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputStream",
                "unaff_R12B": "isHex",
                "uStack0000000000000015": "permissionChar",
                "cStack0000000000000016": "isReadable",
                "cStack0000000000000017": "isWritable",
                "param_9": "isExecutable",
                "cStack0000000000000019": "isSetUID",
                "cStack000000000000001a": "isSetGID",
                "cStack000000000000001b": "isSticky",
                "cStack000000000000001c": "isOwnerReadable",
                "cStack000000000000001d": "isOwnerWritable",
                "cStack000000000000001e": "isOwnerExecutable",
                "uStack000000000000001f": "nullByte",
                "uStack000000000000006c": "uid",
                "stack0x00000020": "formattedTimeData"
            },
            "code": "\nvoid formatAndPrintTimeData_00102d8c(void)\n\n{\n  char *corruptTimeDataMessage;\n  uint fileType;\n  char **fileData;\n  FILE *outputStream;\n  char isHex;\n  undefined permissionChar;\n  char isReadable;\n  char isWritable;\n  char isExecutable;\n  char isSetUID;\n  char isSetGID;\n  char isSticky;\n  char isOwnerReadable;\n  char isOwnerWritable;\n  char isOwnerExecutable;\n  undefined nullByte;\n  uint fileMode;\n  uint uid;\n  uint fileSize;\n  undefined8 fileAddress;\n  \n  corruptTimeDataMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&formattedTimeData,corruptTimeDataMessage);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    permissionChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    permissionChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    permissionChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    permissionChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    permissionChar = 0x73;\n  }\n  else {\n    permissionChar = 0x70;\n    if (fileType != 0x1000) {\n      permissionChar = 0x2d;\n    }\n  }\n  isReadable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  isExecutable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  isSetUID = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  isSetGID = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  isSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  isOwnerReadable = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  isOwnerWritable = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  isOwnerExecutable = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (isExecutable == 'x') {\n      isExecutable = 's';\n    }\n    else {\n      isExecutable = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (isSticky == 'x') {\n      isSticky = 's';\n    }\n    else {\n      isSticky = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (isOwnerExecutable == 'x') {\n      isOwnerExecutable = 't';\n    }\n    else {\n      isOwnerExecutable = 'T';\n    }\n  }\n  nullByte = 0;\n  fprintf(outputStream,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)uid,\n          (ulong)fileSize,fileAddress,&formattedTimeData,(ulong)fileMode);\n  fputs(*fileData,outputStream);\n  if (isHex != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputStream,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputStream,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputStream);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "fputc",
                "dcgettext",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "format_and_print_time_data_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "open_or_create_archive_00105300",
                "param_1": "input_filename",
                "param_2": "output_file",
                "plVar1": "archived_file_ptr",
                "pcVar2": "output_filename",
                "bVar3": "is_thin_library",
                "cVar4": "result",
                "iVar5": "error_code",
                "uVar6": "localized_error_message",
                "uVar7": "error_argument",
                "piVar8": "errno_ptr",
                "lVar9": "archived_file",
                "puVar10": "archived_file_handle",
                "local_b0": "matching_formats",
                "local_a8": "file_stats"
            },
            "code": "\n\n\nundefined8 * openOrCreateArchive_00105300(char *input_filename,undefined8 *output_file)\n\n{\n  long *archived_file_ptr;\n  char *output_filename;\n  byte is_thin_library;\n  char result;\n  int error_code;\n  undefined8 localized_error_message;\n  undefined8 error_argument;\n  int *errno_ptr;\n  long archived_file;\n  undefined8 *archived_file_handle;\n  undefined8 matching_formats;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (target == (char *)0x0) {\n    target = \"plugin\";\n  }\n  error_code = stat(input_filename,&file_stats);\n  output_filename = output_filename;\n  if (error_code == 0) goto LAB_001053be;\n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    if (operation_alters_arch == '\\0') {\n      fprintf(_stderr,\"%s: \",program_name);\n      perror(input_filename);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((target == (char *)0x0) && (output_file != (undefined8 *)0x0)) {\n      archived_file_handle = (undefined8 *)open_inarch_cold();\n      return archived_file_handle;\n    }\n    output_file = (undefined8 *)bfd_openw(input_filename,target);\n    if (((output_file != (undefined8 *)0x0) && (result = bfd_set_format(output_file,2), result != '\\0')) &&\n       (result = bfd_close(output_file), result != '\\0')) {\n      output_filename = input_filename;\n      if (silent_create == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(input_filename);\n  do {\n    is_thin_library = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (make_thin_archive == '\\0') {\n      if (is_thin_library != 0) {\n        error_argument = *output_file;\n        localized_error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(localized_error_message,error_argument);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      error_argument = *output_file;\n      localized_error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(localized_error_message,error_argument);\nLAB_001027cb:\n      bfd_nonfatal(input_filename);\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(matching_formats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = output_file + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(output_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(output_file,archived_file)) {\n        *archived_file_ptr = archived_file;\n        archived_file_ptr = (long *)(archived_file + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file;\n      }\n      do {\n        bfd_fatal(input_filename);\nLAB_00102826:\n        error_argument = dcgettext(0,\"creating %s\",5);\n        non_fatal(error_argument,input_filename);\n        output_filename = input_filename;\nLAB_001053be:\n        output_filename = output_filename;\n        output_file = (undefined8 *)bfd_openr(input_filename,target);\n      } while (output_file == (undefined8 *)0x0);\n      result = bfd_check_format_matches(output_file,2,&matching_formats);\n      if (result == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(output_file,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "called": [
                "xexit",
                "bfd_openr_next_archived_file",
                "bfd_fatal",
                "fprintf",
                "maybequit",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "bfd_openr",
                "dcgettext",
                "non_fatal",
                "fatal",
                "stat",
                "open_inarch.cold",
                "list_matching_formats",
                "__errno_location",
                "bfd_openw",
                "bfd_get_error",
                "perror",
                "bfd_close",
                "bfd_set_error",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "open_or_create_archive_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "numFiles",
                "param_2": "fileList",
                "pbVar1": "bytePtr1",
                "puVar2": "uintPtr1",
                "bVar3": "byteVar1",
                "plVar4": "longPtr1",
                "puVar5": "uint64Ptr1",
                "uVar6": "uint32Var1",
                "uVar7": "uint32Var2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPtrPtr1",
                "piVar11": "intPtr1",
                "puVar12": "bytePtr1",
                "bVar13": "byteVar2",
                "cVar14": "charVar1",
                "iVar15": "indexVar1",
                "uVar16": "uintVar1",
                "uVar17": "uint32Var3",
                "pFVar18": "filePtr1",
                "sVar19": "sizeVar1",
                "sVar20": "sizeVar2",
                "__ptr": "bytePtr2",
                "plVar21": "longPtr2",
                "pFVar22": "filePtr2",
                "pcVar23": "charPtr1",
                "lVar24": "longVar2",
                "uVar25": "ulongVar1",
                "puVar26": "uint64Ptr2",
                "uVar27": "uint64Var1",
                "pFVar28": "filePtr3",
                "lVar34": "longVar2",
                "lVar35": "longVar3",
                "uVar37": "uintVar2",
                "unaff_RBP": "charPtr2",
                "pbVar38": "bytePtr3",
                "pcVar39": "charPtr3",
                "uVar40": "ulongVar1",
                "uVar41": "ulongVar2",
                "uVar42": "ulongVar3",
                "uVar44": "uintVar3",
                "iVar45": "intVar1",
                "bVar47": "boolVar3",
                "bVar48": "byteVar3",
                "local_130": "filePtr4",
                "local_128": "filePtr5",
                "local_118": "bytePtr4",
                "local_110": "charPtrPtr2",
                "local_108": "sizeVar3",
                "local_100": "longVar4",
                "local_c8": "byteArr1"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint numFiles,FILE *fileList)\n\n{\n  byte *bytePtr1;\n  uint *uintPtr1;\n  byte byteVar1;\n  long *longPtr1;\n  undefined8 *uint64Ptr1;\n  undefined4 uint32Var1;\n  undefined4 uint32Var2;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPtrPtr1;\n  int *intPtr1;\n  undefined *bytePtr1;\n  byte byteVar2;\n  char charVar1;\n  int indexVar1;\n  uint uintVar1;\n  undefined4 uint32Var3;\n  FILE *filePtr1;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *bytePtr2;\n  long *longPtr2;\n  FILE *filePtr2;\n  char *charPtr1;\n  long longVar2;\n  ulong ulongVar1;\n  undefined8 *uint64Ptr2;\n  undefined8 uint64Var1;\n  FILE *filePtr3;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar13;\n  long longVar2;\n  long longVar3;\n  undefined1 *puVar36;\n  uint uintVar2;\n  char *charPtr2;\n  byte *bytePtr3;\n  char *charPtr3;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  ulong ulongVar3;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar3;\n  int intVar1;\n  char *pcVar46;\n  bool boolVar3;\n  byte byteVar3;\n  undefined8 filePtr4;\n  FILE *filePtr5;\n  byte *bytePtr4;\n  char **charPtrPtr2;\n  size_t sizeVar3;\n  long longVar4;\n  undefined byteArr1 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  byteVar3 = 0;\n  pcVar46 = (char *)(ulong)numFiles;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)fileList;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)fileList;\n  filePtr1 = fileList;\n  if ((int)numFiles < 2) goto LAB_001062c6;\n  charPtrPtr2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePtr5 = (FILE *)0x0;\n  filePtr2 = fileList;\n  do {\n    uintVar1 = (uint)unaff_R12;\n    charPtr2 = (char *)(long)(int)uintVar1;\n    filePtr4 = (FILE *)((long)charPtr2 * 8);\n    pcVar43 = (char *)filePtr2;\n    if (**(char **)(&filePtr2->_flags + (long)charPtr2 * 2) == '@') {\n      uintVar3 = (int)charPtrPtr2 - 1;\n      charPtrPtr2 = (char **)(ulong)uintVar3;\n      if (uintVar3 == 0) {\n        longPtr2 = *(long **)filePtr2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPtr2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPtr3 = *(char **)(&filePtr2->_flags + (long)charPtr2 * 2) + 1;\n      indexVar1 = stat(charPtr3,(stat *)byteArr1);\n      if (-1 < indexVar1) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPtr2 = *(long **)filePtr2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr1 = fopen(charPtr3,\"r\");\n        if (filePtr1 != (FILE *)0x0) {\n          indexVar1 = fseek(filePtr1,0,2);\n          if (((indexVar1 != -1) && (sizeVar1 = ftell(filePtr1), sizeVar1 != 0xffffffffffffffff)) &&\n             (indexVar1 = fseek(filePtr1,0,0), indexVar1 != -1)) {\n            bytePtr4 = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = fread(bytePtr4,1,sizeVar1,filePtr1);\n            if ((sizeVar1 == sizeVar2) || (indexVar1 = ferror(filePtr1), indexVar1 == 0)) {\n              bytePtr4[sizeVar2] = 0;\n              byteVar2 = *bytePtr4;\n              pbyteVar13 = bytePtr4;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar13[1];\n                pbyteVar13 = pbyteVar13 + 1;\n              }\n              sizeVar1 = strlen((char *)bytePtr4);\n              bytePtr2 = (byte *)xmalloc(sizeVar1 + 1);\n              filePtr3 = (FILE *)0x0;\n              indexVar1 = 0;\n              boolVar2 = false;\n              boolVar3 = false;\n              boolVar1 = false;\n              longVar4 = 0;\n              pbyteVar13 = bytePtr4;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar13 * 2] & 0x40) != 0) {\n                  pbyteVar13 = pbyteVar13 + 1;\n                }\n                if ((indexVar1 == 0) || (indexVar1 + -1 <= (int)longVar4)) {\n                  if (filePtr3 == (FILE *)0x0) {\n                    indexVar1 = 8;\n                    filePtr3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar4 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    indexVar1 = indexVar1 * 2;\n                    filePtr3 = (FILE *)xrealloc(filePtr3,(long)indexVar1 << 3);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar4 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr3->_flags + longVar4 * 8);\n                }\n                byteVar2 = *pbyteVar13;\n                bytePtr3 = bytePtr2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | boolVar3))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      boolVar3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar13 = pbyteVar13 + 1;\n                    *bytePtr3 = byteVar2;\n                    bytePtr3 = bytePtr3 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar13;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar2 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePtr3 = byteVar2;\n                      bytePtr3 = bytePtr3 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePtr1 = pbyteVar13 + 1;\n                  pbyteVar13 = pbyteVar13 + 1;\n                  byteVar2 = *bytePtr1;\n                }\nLAB_0010606f:\n                *bytePtr3 = 0;\n                longPtr2 = (long *)xstrdup(bytePtr2);\n                *ppcVar31 = (char *)longPtr2;\n                *(undefined8 *)(filePtr3->_shortbuf + longVar4 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar13;\n                byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar1 & 0x40) != 0) {\n                  byteVar2 = pbyteVar13[1];\n                  pbyteVar13 = pbyteVar13 + 1;\n                  byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                longVar4 = longVar4 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePtr2);\n                  if (filePtr2 == fileList) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePtr4);\n          }\n          fclose(filePtr1);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar1 + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar1 = (uint)unaff_R12;\n        indexVar1 = bfd_init();\n        charPtr3 = \"fatal error: libbfd ABI mismatch\";\n        if (indexVar1 != 0x118) goto LAB_00106803;\n        charPtr3 = \"x86_64-pc-linux-gnu\";\n        uintVar1 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        bytePtr1 = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uintVar1;\n        if ((char)uintVar1 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            bytePtr1 = xatexit_head;\n            indexVar1 = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = indexVar1 + 1;\n            *(code **)(bytePtr1 + (long)indexVar1 * 8 + 0x10) = remove_output;\n          }\n          else {\n            uint64Ptr2 = (undefined8 *)malloc(0x110);\n            if (uint64Ptr2 != (undefined8 *)0x0) {\n              *uint64Ptr2 = bytePtr1;\n              *(undefined4 *)(uint64Ptr2 + 1) = 0;\n              xatexit_head = (undefined *)uint64Ptr2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar2 = 1;\n          do {\n            longVar3 = longVar2;\n            indexVar1 = (int)pcVar46;\n            if (indexVar1 <= (int)longVar3) break;\n            charVar1 = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + longVar3 * 2));\n            longVar2 = longVar3 + 1;\n          } while (charVar1 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar3 * 8 + -8);\n          uintVar3 = indexVar1 - ((int)longVar3 + -1);\n          filePtr1 = (FILE *)(ulong)uintVar3;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar2 = 0;\n            while (indexVar1 = getopt_long(filePtr1,pcVar46,\"DhHUvVt\",long_options), indexVar1 != -1) {\n              if (indexVar1 < 0x77) {\n                if (0x43 < indexVar1) {\n                  switch(indexVar1) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uintVar2 = uintVar1;\n                  }\n                }\n              }\n              else if (indexVar1 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar3 < 2) {\nLAB_00107125:\n              charPtr3 = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar3 <= (int)pcVar43) goto LAB_00106f8b;\n                charPtr3 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar2 != '\\0') break;\n                uintVar1 = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar1);\n              }\n            }\n            while (longVar2 = get_file_size(charPtr3), longVar2 < 1) {\n              uintVar1 = 1;\nLAB_001071c4:\n              intPtr1 = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPtr1 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar1);\n              if ((int)uintVar3 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              charPtr3 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPtr1 * 8 + -0x7b);\n            }\n            indexVar1 = open(charPtr3,2,0);\n            if (indexVar1 < 0) {\n              bfd_set_error(1);\n              bfd_fatal(charPtr3);\nLAB_0010737f:\n              bfd_fatal(charPtr3);\nLAB_00107387:\n              bfd_nonfatal(charPtr3);\n              indexVar1 = bfd_get_error();\n              if (indexVar1 == 0xd) {\n                list_matching_formats\n                          (CONCAT53(uStack_c5,CONCAT12(uStack_c6,CONCAT11(byteArr1[1],byteArr1[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            charPtr2 = (char *)bfd_fdopenr(charPtr3,0);\n            if ((FILE *)charPtr2 == (FILE *)0x0) goto LAB_0010737f;\n            charVar1 = bfd_check_format_matches(charPtr2,2,byteArr1);\n            if (charVar1 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPtr2 + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                uintPtr1 = (uint *)((long)((long)charPtr2 + 0x40) + 4);\n                *uintPtr1 = *uintPtr1 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPtr2 + 8) + 0x1f0))(charPtr2);\n              charVar1 = bfd_close(charPtr2);\n              if (charVar1 != '\\0') {\n                uintVar1 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uint64Var1 = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(uint64Var1,charPtr3);\nLAB_001073cc:\n            charPtr3 = (char *)lbasename(program_name);\n            sizeVar1 = strlen(charPtr3);\n            if ((sizeVar1 < 6) ||\n               (indexVar1 = filename_cmp(charPtr3 + (sizeVar1 - 6),\"ranlib\"), indexVar1 != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 = long_options;\n          charPtr2 = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePtr2 = (FILE *)charPtr2;\n          filePtr3 = filePtr1;\n          if ((int)uintVar3 < 2) goto switchD_00107462_caseD_1;\n          filePtr4 = (FILE *)CONCAT71(filePtr4._1_7_,(char)uintVar1);\nLAB_001063a3:\n          filePtr2 = (FILE *)charPtr2;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            byteArr1[0] = 0x2d;\n            uStack_c6 = 0;\n            sizeVar1 = strlen(*(char **)((long)pcVar46 + 8));\n            indexVar1 = (int)sizeVar1 + (int)filePtr1;\n            unaff_R12 = (FILE *)xmalloc((long)indexVar1 * 8);\n            uint32Var3 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uint32Var3;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePtr5 = (FILE *)((long)pcVar46 + 0x10);\n            charPtrPtr2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePtr4 = byteArr1;\n              byteArr1[1] = *(char *)ppcVar31;\n              charPtr3 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = charPtr3;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                byteArr1[1] = *(char *)((long)ppcVar31 + 1);\n                charPtr3 = (char *)xstrdup(bytePtr4);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = charPtr3;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  byteArr1[1] = *(char *)((long)ppcVar31 + 2);\n                  charPtr3 = (char *)xstrdup(bytePtr4);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = charPtr3;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    byteArr1[1] = *(char *)((long)ppcVar31 + 3);\n                    charPtr3 = (char *)xstrdup(bytePtr4);\n                    unaff_R12->_IO_write_base = charPtr3;\n                    charVar1 = *(char *)((long)ppcVar31 + 4);\n                    charPtrPtr2 = ppcVar32;\n                    if (charVar1 != '\\0') {\n                      charPtr3 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        byteArr1[1] = charVar1;\n                        charPtr1 = (char *)xstrdup(bytePtr4);\n                        charPtr3 = charPtr3 + 1;\n                        *ppcVar31 = charPtr1;\n                        charVar1 = *charPtr3;\n                        ppcVar31 = ppcVar32;\n                        charPtrPtr2 = ppcVar32;\n                      } while (charVar1 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar2 = (long)(int)filePtr1;\n            intPtr1 = (int *)pcVar46 + longVar2 * 2;\n            if (filePtr5 < intPtr1) {\n              ulongVar1 = longVar2 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPtr1) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPtr1 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPtr1)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPtr1)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPtr1)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPtrPtr1 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPtr1;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar3 * -2 + 1) {\n                    *charPtrPtr1 = *ppcVar31;\n                    charPtrPtr1 = charPtrPtr1 + (ulong)byteVar3 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uint32Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uint32Var1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uint32Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                ulongVar1 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uint32Var3;\n                *(undefined4 *)(ppcVar32 + 1) = uint32Var1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uint32Var2;\n                uint32Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uint32Var1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uint32Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar1 = ulongVar1 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uint32Var3;\n                *(undefined4 *)(ppcVar32 + 3) = uint32Var1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uint32Var2;\n                if (ulongVar1 != 2) {\n                  uint32Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uint32Var1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uint32Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uint32Var3;\n                  *(undefined4 *)(ppcVar32 + 5) = uint32Var1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uint32Var2;\n                  if (ulongVar1 != 3) {\n                    ulongVar2 = 3;\n                    do {\n                      ulongVar3 = ulongVar2 + 1;\n                      charPtr3 = (char *)((long)pcVar46 + 0x83) + ulongVar2 * 0x10 + -0x73;\n                      uint32Var3 = *(undefined4 *)(charPtr3 + 4);\n                      uint32Var1 = *(undefined4 *)(charPtr3 + 8);\n                      uint32Var2 = *(undefined4 *)(charPtr3 + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar2 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPtr3;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uint32Var3;\n                      *(undefined4 *)(ppcVar31 + 1) = uint32Var1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uint32Var2;\n                      ulongVar2 = ulongVar3;\n                    } while (ulongVar3 != ulongVar1);\n                  }\n                }\n                if ((ulongVar1 & 1) != 0) {\n                  ppcVar32[ulongVar1 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePtr5 + (ulongVar1 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar2 + -2;\n            }\n            filePtr1 = (FILE *)(ulong)(indexVar1 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar1 = (uint)unaff_R12;\n            uintVar3 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,puVar36,0);\n            charPtr2 = (char *)filePtr2;\n            if (uintVar3 == 0xffffffff) break;\n            if (((uintVar3 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar3 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            filePtr3 = (FILE *)pcVar46;\n            if (uintVar3 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar3]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            pcVar46 = (char *)filePtr3;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uintVar3 = operation;\n          filePtr2 = (FILE *)charPtr2;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)filePtr1 <= _optind || (_optind < 1)))) {\n              uintVar3 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar1 = (int)filePtr1 - (_optind + -1);\n            filePtr1 = (FILE *)(ulong)uintVar1;\n            _optind = 0;\n            if (1 < (int)uintVar1) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)filePtr4 & 0xff);\n          uintVar1 = (uint)unaff_R12;\n          puVar36 = (undefined1 *)((int *)pcVar46 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              filePtr3 = (FILE *)pcVar46;\n              if (*(long *)puVar36 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uintVar3 == 3) goto LAB_00106abc;\n                  if (uintVar3 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPtr3 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar3 == 3) || (uintVar3 == 0)) {\n                if (write_armap == 1) {\n                  uint32Var3 = ranlib_only();\n                    \n                  xexit(uint32Var3);\n                }\nLAB_00106abc:\n                if (uintVar3 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  charPtr3 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              charPtr2 = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)puVar36;\n                charPtr2 = (char *)0x1;\n                charPtr3 = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                charPtr3 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  indexVar1 = (int)charPtr2;\n                  if (*(char **)((long)puVar36 + (long)indexVar1 * 2 * 4) == (char *)0x0) {\n                    uint64Var1 = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(uint64Var1);\n                    uintVar3 = extraout_EDX;\nLAB_00107548:\n                    if (uintVar3 == 2) {\nLAB_0010704f:\n                      charPtr3 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPtr2 = (char *)(ulong)(indexVar1 + 1);\n                  longVar2 = strtol(*(char **)((long)puVar36 + (long)indexVar1 * 2 * 4),(char **)0x0,10);\n                  charPtr3 = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)longVar2;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar2 = (long)(int)charPtr2;\n              filePtr2 = (FILE *)charPtr2;\n              if (*(long *)(int *)((long)puVar36 + longVar2 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr2 = (FILE *)((long)puVar36 + (longVar2 + 1) * 2 * 4);\n              if (*(FILE **)filePtr2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePtr2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (longVar2 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (longVar2 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (longVar2 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (longVar2 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePtr1 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePtr1;\n                  filePtr1 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)puVar36 + longVar2 * 2 * 4) + (long)filePtr1 * 2) != 0\n                        );\n              }\n              uint64Ptr2 = (undefined8 *)open_inarch();\n              filePtr1 = filePtr2;\n              if (operation == 5) {\n                charPtr3 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)uint64Ptr2 + 0x49) & 0x10) == 0) {\n                  charPtr2 = (char *)filePtr2;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(uint64Ptr2,extract_file,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar1 = strlen(libdeps);\n                pcVar46 = \"__.LIBDEP\";\n                charPtr2 = (char *)(sizeVar1 + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",uint64Ptr2);\n                if (libdeps_bfd == 0) {\n                  charPtr3 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar2 = bfd_find_target(\"binary\",libdeps_bfd);\n                  charPtr3 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar2 != 0) {\n                    charVar1 = bfd_set_format(libdeps_bfd,1,5);\n                    charPtr3 = \"Cannot set libdeps object format.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    charVar1 = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    charPtr3 = \"Cannot make libdeps object writable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    filePtr3 = (FILE *)bfd_bwrite(libdeps,charPtr2,libdeps_bfd);\n                    charPtr3 = \"Cannot write libdeps record.\";\n                    if (filePtr3 != (FILE *)charPtr2) goto LAB_00106803;\n                    charVar1 = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    charPtr3 = \"Cannot make libdeps object readable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    longVar2 = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    charPtr3 = \"Cannot reset libdeps record type.\";\n                    if (longVar2 == 0) goto LAB_00106803;\n                    indexVar1 = (int)pcVar43;\n                    filePtr4 = (FILE *)((long)(indexVar1 + 2) * 8);\n                    charPtr2 = (char *)xmalloc(filePtr4,\"Cannot reset libdeps record type.\");\n                    if (indexVar1 == 0) {\n                      longVar2 = 0;\n                    }\n                    else {\n                      uint32Var3 = *(undefined4 *)&filePtr2->field_0x4;\n                      *(int *)charPtr2 = filePtr2->_flags;\n                      *(undefined4 *)((long)charPtr2 + 4) = uint32Var3;\n                      longVar2 = 8;\n                      ppcVar31 = (char **)((long)charPtr2 + 8);\n                      for (pcVar43 = filePtr4[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr2->_flags;\n                        filePtr2 = (FILE *)((long)filePtr2 + (ulong)byteVar3 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar3 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPtr2 + longVar2) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(indexVar1 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPtr2 + -0xd8))->_unused2 + 0xc + (long)filePtr4) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr2 = (FILE *)charPtr2;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                charPtr2 = (char *)filePtr2;\n                if (filePtr2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPtr2 = (char *)filePtr2;\n                if ((filePtr2 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(uint64Ptr2,charPtr2,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPtr2 = (char *)filePtr2;\nswitchD_00106ed8_caseD_3:\n                map_over_members(uint64Ptr2,print_descr,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPtr2 = (char *)filePtr2;\nswitchD_00106ed8_caseD_4:\n                map_over_members(uint64Ptr2,print_contents,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPtr3 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr1 = (FILE *)(uint64Ptr2 + 0x1e);\n                do {\n                  unaff_R12 = filePtr1;\n                  if (*(FILE **)filePtr2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(uint64Ptr2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPtr2 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePtr2;\n                    if (longPtr2 == (long *)0x0) {\n                      uint64Var1 = *uint64Ptr2;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(uVar30,pcVar46,uint64Var1);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar2 = *longPtr2;\n                    uint64Var1 = normalize(pcVar46,uint64Ptr2);\n                    indexVar1 = filename_cmp(uint64Var1,longVar2);\n                    if (indexVar1 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPtr2[0x1e];\n                  pplVar29 = (long **)get_pos_bfd(filePtr1,3,0);\n                  boolVar3 = verbose != 0;\n                  longPtr1 = *pplVar29;\n                  *pplVar29 = longPtr2;\n                  longPtr2[0x1e] = (long)longPtr1;\n                  if (boolVar3) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr2);\n                  }\n                  filePtr2 = (FILE *)&filePtr2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          indexVar1 = fileno(_stdin);\n          interactive = isatty(indexVar1);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uint32Var3 = bfd_get_error();\n        filePtr2 = (FILE *)bfd_errmsg(uint32Var3);\n        uint64Var1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        indexVar1 = fatal(uint64Var1,\"x86_64-pc-linux-gnu\",filePtr2);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          puVar36 = charPtr3;\n          filePtr3 = (FILE *)pcVar46;\n          switch(indexVar1) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar1 = (uint)unaff_R12;\n            charPtr3 = \"libdeps specified more than once\";\n            charPtr2 = (char *)filePtr2;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPtr3 = \"two different operation options specified\";\n        charPtr2 = (char *)filePtr2;\nLAB_00106803:\n        uint64Var1 = dcgettext(0,charPtr3,5);\n        fatal(uint64Var1);\nLAB_00106814:\n        indexVar1 = (int)pcVar46;\n        filePtr3 = (FILE *)xmalloc(8);\n        *(long **)filePtr3 = (long *)0x0;\n        if ((FILE *)pcVar43 == fileList) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            indexVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              indexVar1 = (int)longVar2;\n              longVar3 = longVar2 * 2;\n              longVar2 = longVar2 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar3) != 0);\n          }\n          filePtr2 = (FILE *)xmalloc((long)(indexVar1 + 1) << 3);\n          longPtr2 = *(long **)pcVar43;\n          longVar2 = 0;\n          while (longPtr2 != (long *)0x0) {\n            uint64Var1 = xstrdup();\n            *(undefined8 *)((long)&filePtr2->_flags + longVar2) = uint64Var1;\n            longPtr2 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar2 + -0x7b);\n            longVar2 = longVar2 + 8;\n          }\n          *(undefined8 *)((long)&filePtr2->_flags + longVar2) = 0;\nLAB_0010610a:\n          indexVar1 = (int)pcVar46;\n          pcVar43 = (char *)filePtr2;\n          if (*(long **)filePtr3 == (long *)0x0) goto LAB_00106a80;\n          longVar2 = 0;\n          do {\n            longVar2 = longVar2 + 1;\n            longVar3 = longVar2 * 8;\n            longVar2 = longVar2;\n          } while (*(long *)(filePtr3->_shortbuf + longVar3 + -0x7b) != 0);\n          sizeVar3 = longVar2 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar2 = 0;\n          sizeVar3 = 0;\n        }\n        longVar2 = (long)charPtr2 * 2;\n        charPtr2 = (char *)((long)(char **)charPtr2 + longVar2);\n        free(*(void **)((int *)pcVar43 + longVar2));\n        filePtr2 = (FILE *)xrealloc(pcVar43,(longVar2 + 1 + (long)indexVar1) * 8);\n        uintVar3 = indexVar1 + -1 + (int)longVar2;\n        pcVar46 = (char *)(ulong)uintVar3;\n        memmove(&filePtr2->_flags + (long)charPtr2 * 2,\n                (void *)((long)&filePtr2->_IO_read_ptr + (long)filePtr4),\n                (long)(int)(indexVar1 - uintVar1) << 3);\n        memcpy((void *)((long)&filePtr4->_flags + (long)&filePtr2->_flags),filePtr3,sizeVar3);\n        free(filePtr3);\n        free(bytePtr4);\n        fclose(filePtr1);\n        uintVar1 = (int)filePtr5 + 1;\n        unaff_R12 = filePtr4;\n        pcVar43 = (char *)filePtr2;\n        filePtr4 = filePtr3;\n        if ((int)uintVar1 < (int)uintVar3) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar1 = uintVar1 + 1;\n    filePtr5 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar1;\n  } while( true );\nswitchD_00107462_caseD_0:\n  indexVar1 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,\"x86_64-pc-linux-gnu\");\n  charPtr2 = (char *)filePtr2;\n  if (indexVar1 == -1) goto LAB_00106680;\n  if ((0x14 < indexVar1 - 100U) || ((0x117201UL >> ((byte)(indexVar1 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uint64Var1 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(uint64Var1);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPtr2 == (FILE *)0x0) {\n    if ((char)filePtr1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  intVar1 = 0;\n  indexVar1 = strcmp((char *)*(FILE **)charPtr2,\"__.SYMDEF\");\n  uint64Ptr1 = uint64Ptr2;\n  if (indexVar1 == 0) {\n    *(byte *)((long)uint64Ptr2 + 0x49) = *(byte *)((long)uint64Ptr2 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      longPtr2 = uint64Ptr1 + 0x1e;\n      if ((undefined8 *)*longPtr2 == (undefined8 *)0x0) break;\n      uint64Var1 = *(undefined8 *)*longPtr2;\n      uVar30 = normalize(*(FILE **)charPtr2,uint64Ptr2);\n      indexVar1 = filename_cmp(uVar30,uint64Var1);\n      if ((indexVar1 == 0) &&\n         ((counted_name_mode == '\\0' || (intVar1 = intVar1 + 1, intVar1 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPtr2);\n        }\n        *longPtr2 = *(long *)(*longPtr2 + 0xf0);\n        filePtr1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      uint64Ptr1 = (undefined8 *)*longPtr2;\n    }\n    if (verbose != 0) {\n      filePtr2 = *(FILE **)charPtr2;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePtr2);\n    }\n  }\nLAB_00106d38:\n  charPtr2 = (char *)((long)charPtr2 + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "open_inarch",
                "bfd_fatal",
                "fprintf",
                "strtol",
                "fread",
                "fclose",
                "bfd_plugin_set_program_name",
                "bfd_errmsg",
                "bfd_plugin_set_plugin",
                "bfd_nonfatal",
                "dcgettext",
                "non_fatal",
                "strcmp",
                "fatal",
                "xmalloc",
                "memmove",
                "write_archive",
                "bindtextdomain",
                "normalize",
                "setlocale",
                "replace_members",
                "printf",
                "ranlib_usage",
                "bfd_close",
                "fopen",
                "bfd_set_format",
                "print_contents",
                "bfd_make_writable",
                "ar_emul_default_parse_arg",
                "bfd_check_format_matches",
                "memcpy",
                "bfd_find_target",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "open",
                "bfd_set_error",
                "free",
                "bfd_init",
                "xstrdup",
                "ranlib_only",
                "getopt_long",
                "ferror",
                "map_over_members",
                "get_file_size",
                "fileno",
                "bfd_create",
                "stat",
                "strlen",
                "filename_cmp",
                "bfd_set_default_target",
                "bfd_bwrite",
                "bfd_make_readable",
                "usage",
                "xexit",
                "bfd_fdopenr",
                "ftell",
                "textdomain",
                "fseek",
                "remove_output",
                "yyparse.isra.0",
                "xmalloc_set_program_name",
                "print_descr",
                "get_pos_bfd",
                "list_matching_formats",
                "extract_file",
                "xrealloc",
                "xatexit_cleanup",
                "isatty",
                "malloc",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "ar_open",
                "write_archive",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatArray",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatArray)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,programName);\n  for (currentFormat = formatArray; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatArray);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "fputc",
                "free",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "list_matching_formats",
                "print_contents",
                "list_supported_targets",
                "extract_file.cold",
                "write_archive.cold",
                "main",
                "make_tempname.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "lVar5": "bfd_handle",
                "plVar1": "archived_file",
                "cVar2": "format_matched",
                "bVar3": "is_thin_format",
                "iVar4": "error_code",
                "uVar6": "error_msg",
                "uVar7": "library_name",
                "puVar8": "output_bfd",
                "unaff_RBP": "output_filename",
                "in_stack_00000008": "stack_parameter",
                "silent_create": "is_silent_create",
                "make_thin_archive": "is_make_thin_archive",
                "target": "first_archived_file",
                "output_filename": "output_file",
                "operation": "current_operation"
            },
            "code": "\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *archived_file;\n  char format_matched;\n  byte is_thin_format;\n  int error_code;\n  long bfd_handle;\n  undefined8 error_msg;\n  undefined8 library_name;\n  undefined8 *output_bfd;\n  undefined8 output_filename;\n  undefined8 stack_parameter;\n  \n  bfd_handle = bfd_openr();\n  if (bfd_handle != 0) {\n    format_matched = bfd_check_format(bfd_handle,1);\n    if (format_matched != '\\0') {\n      first_archived_file = **(undefined8 **)(bfd_handle + 8);\n    }\n    bfd_close(bfd_handle);\n  }\n  output_bfd = (undefined8 *)bfd_openw();\n  if (((output_bfd != (undefined8 *)0x0) && (format_matched = bfd_set_format(output_bfd,2), format_matched != '\\0')) &&\n     (format_matched = bfd_close(output_bfd), format_matched != '\\0')) {\n    if (is_silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    is_thin_format = *(byte *)((long)output_bfd + 0x49) >> 4 & 1;\n    if (is_make_thin_archive == '\\0') {\n      if (is_thin_format != 0) {\n        library_name = *output_bfd;\n        error_msg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_msg,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_format == 0) {\n      library_name = *output_bfd;\n      error_msg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_msg,library_name);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(stack_parameter);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file = output_bfd + 0x1e;\n      for (bfd_handle = bfd_openr_next_archived_file(output_bfd,0); bfd_handle != 0;\n          bfd_handle = bfd_openr_next_archived_file(output_bfd,bfd_handle)) {\n        *archived_file = bfd_handle;\n        archived_file = (long *)(bfd_handle + 0xf0);\n      }\n      *archived_file = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_bfd;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        non_fatal(library_name);\nLAB_001053b7:\n        output_file = output_filename;\n        output_bfd = (undefined8 *)bfd_openr();\n      } while (output_bfd == (undefined8 *)0x0);\n      format_matched = bfd_check_format_matches(output_bfd,2,&stack0x00000008);\n      if (format_matched == '\\0') goto LAB_001027cb;\n    } while (((current_operation != 2) && (current_operation != 7)) ||\n            (bfd_handle = bfd_openr_next_archived_file(output_bfd,0), bfd_handle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompiled_function_00103e95",
                "pplVar1": "pointer_pointer_Var1",
                "cVar2": "char_Var2",
                "ppFVar3": "pointer_pointer_FileVar3",
                "pFVar4": "pointer_FileVar4",
                "plVar5": "pointer_LongVar5",
                "uVar6": "undefined8_Var6",
                "pbVar7": "pointer_ByteVar7",
                "iVar8": "int_Var8",
                "pcVar10": "pointer_char_Var10",
                "uVar11": "undefined8_Var11",
                "iVar9": "int_Var9",
                "plVar12": "pointer_LongVar12",
                "sVar13": "size_t_Var13",
                "pvVar14": "pointer_Var14",
                "pcVar15": "pointer_char_Var15",
                "pcVar16": "pointer_char_Var16",
                "lVar17": "long_Var17",
                "lVar18": "long_Var18",
                "uVar19": "ulong_Var19",
                "uVar20": "uint_Var20",
                "lVar21": "long_Var21",
                "puVar22": "pointer_undefined8_Var22",
                "puVar23": "pointer_undefined8_Var23",
                "uVar24": "uint_Var24",
                "iVar25": "int_Var25",
                "uVar26": "ulong_Var26",
                "ppcVar27": "pointer_pointer_charVar27",
                "bVar28": "bool_Var28",
                "ppcVar29": "pointer_pointer_charVar29",
                "bVar30": "byte_Var30",
                "lVar31": "long_Var31",
                "pbVar32": "pointer_ByteVar32",
                "pbVar33": "pointer_ByteVar33",
                "piVar34": "pointer_int_Var34",
                "pbVar35": "pointer_ByteVar35",
                "bVar39": "byte_Var39",
                "auVar40": "undefined_Var40",
                "auVar41": "undefined_Var41",
                "local_828": "local_pointer_char",
                "local_820": "local_pointer_char",
                "local_818": "local_long",
                "local_810": "local_pointer_pointer_char",
                "local_800": "local_int",
                "local_7fc": "local_uint",
                "local_7f8": "local_pointer_Byte",
                "local_7d0": "local_stat",
                "local_740": "local_char_array",
                "local_678": "local_char_array_array"
            },
            "code": "\n\n\nvoid decompiled_function_00103e95(void)\n\n{\n  long **pointer_pointer_Var1;\n  char char_Var2;\n  FILE **pointer_pointer_FileVar3;\n  FILE *pointer_FileVar4;\n  long *pointer_LongVar5;\n  undefined8 undefined8_Var6;\n  byte *pointer_ByteVar7;\n  int int_Var8;\n  char *pointer_char_Var10;\n  undefined8 undefined8_Var11;\n  int int_Var9;\n  long *pointer_LongVar12;\n  size_t size_t_Var13;\n  void *pointer_Var14;\n  char *pointer_char_Var15;\n  char *pointer_char_Var16;\n  long long_Var17;\n  long long_Var18;\n  ulong ulong_Var19;\n  uint uint_Var20;\n  long long_Var21;\n  undefined8 *pointer_undefined8_Var22;\n  undefined8 *pointer_undefined8_Var23;\n  uint uint_Var24;\n  int int_Var25;\n  ulong ulong_Var26;\n  char **pointer_pointer_charVar27;\n  bool bool_Var28;\n  char **pointer_pointer_charVar29;\n  byte byte_Var30;\n  long long_Var31;\n  byte *pointer_ByteVar32;\n  byte *pointer_ByteVar33;\n  int *pointer_int_Var34;\n  byte *pointer_ByteVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte byte_Var39;\n  undefined undefined_Var40 [16];\n  undefined undefined_Var41 [16];\n  char *local_pointer_char;\n  char *local_pointer_char;\n  long local_long;\n  char **local_pointer_pointer_char;\n  int local_int;\n  uint local_uint;\n  byte *local_pointer_Byte;\n  stat local_stat;\n  char local_char_array [200];\n  char *local_char_array_array [201];\n  \n  byte_Var39 = 0;\n  long_Var18 = 0;\n  yychar = -2;\n  pointer_pointer_charVar29 = local_char_array_array;\n  local_int = 0;\n  local_pointer_char = local_char_array;\n  local_long = 200;\n  local_pointer_char = local_pointer_char;\n  local_pointer_pointer_char = pointer_pointer_charVar29;\nLAB_00103ee9:\n  *local_pointer_char = (char)long_Var18;\n  if (local_pointer_char + local_long + -1 <= local_pointer_char) {\n    long_Var21 = (long)local_pointer_char - (long)local_pointer_char;\n    long_Var17 = long_Var21 + 1;\n    if (local_long < 10000) {\n      long_Var31 = local_long * 2;\n      local_long = 10000;\n      if (long_Var31 < 0x2711) {\n        local_long = long_Var31;\n      }\n      pointer_char_Var10 = (char *)malloc(local_long * 9 + 7);\n      if (pointer_char_Var10 != (char *)0x0) {\n        long_Var31 = long_Var17 * 8;\n        pointer_char_Var15 = local_pointer_char;\n        pointer_char_Var16 = pointer_char_Var10;\n        for (; long_Var17 != 0; long_Var17 = long_Var17 + -1) {\n          *pointer_char_Var16 = *pointer_char_Var15;\n          pointer_char_Var15 = pointer_char_Var15 + (ulong)byte_Var39 * -2 + 1;\n          pointer_char_Var16 = pointer_char_Var16 + (ulong)byte_Var39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pointer_char_Var10 + local_long);\n        pointer_pointer_charVar29 = ppcVar38;\n        for (; long_Var31 != 0; long_Var31 = long_Var31 + -1) {\n          *(undefined *)pointer_pointer_charVar29 = *(undefined *)local_pointer_pointer_char;\n          local_pointer_pointer_char = (char **)((long)local_pointer_pointer_char + (ulong)byte_Var39 * -2 + 1);\n          pointer_pointer_charVar29 = (char **)((long)pointer_pointer_charVar29 + (ulong)byte_Var39 * -2 + 1);\n        }\n        if (local_pointer_char != local_char_array) {\n          free(local_pointer_char);\n        }\n        local_pointer_char = pointer_char_Var10 + long_Var21;\n        pointer_pointer_charVar29 = ppcVar38 + long_Var21;\n        local_pointer_char = pointer_char_Var10;\n        local_pointer_pointer_char = ppcVar38;\n        if (pointer_char_Var10 + local_long + -1 <= local_pointer_char) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pointer_char_Var10 = local_pointer_char;\n    if (local_pointer_char == local_char_array) {\n      return;\n    }\nLAB_00105265:\n    free(pointer_char_Var10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)long_Var18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  char_Var2 = (&yypact)[iVar37];\n  if (char_Var2 != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          pointer_undefined8_Var22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          undefined8_Var11 = yy_create_buffer_constprop_0(yyin);\n          *pointer_undefined8_Var22 = undefined8_Var11;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      pointer_ByteVar32 = yy_c_buf_p;\n      pointer_ByteVar35 = yy_c_buf_p;\n      uint_Var20 = yy_start;\nLAB_001040d4:\n      ulong_Var19 = (ulong)uint_Var20;\n      ulong_Var26 = (ulong)local_uint;\n      bool_Var28 = false;\n      do {\n        byte_Var30 = yy_ec[*pointer_ByteVar35];\n        if (*(short *)(yy_accept + (long)(int)ulong_Var19 * 2) != 0) {\n          bool_Var28 = true;\n          ulong_Var26 = ulong_Var19 & 0xffffffff;\n          local_pointer_Byte = pointer_ByteVar35;\n        }\n        while( true ) {\n          int_Var8 = (int)ulong_Var19;\n          long_Var18 = (long)(int)((int)*(short *)(yy_base + (long)int_Var8 * 2) + (uint)byte_Var30);\n          if (int_Var8 == *(short *)(yy_chk + long_Var18 * 2)) break;\n          ulong_Var19 = (ulong)(uint)(int)*(short *)(yy_def + (long)int_Var8 * 2);\n          if (0xb0 < *(short *)(yy_def + (long)int_Var8 * 2)) {\n            byte_Var30 = yy_meta[(int)(uint)byte_Var30];\n          }\n        }\n        pointer_ByteVar35 = pointer_ByteVar35 + 1;\n        ulong_Var19 = (ulong)*(short *)(yy_nxt + long_Var18 * 2);\n      } while (*(short *)(yy_base + ulong_Var19 * 2) != 0xc2);\n      local_uint = (uint)ulong_Var26;\n      pointer_ByteVar33 = pointer_ByteVar32;\n      if (bool_Var28) {\n        yy_last_accepting_cpos = local_pointer_Byte;\n        yy_last_accepting_state = local_uint;\n      }\nLAB_0010419f:\n      int_Var8 = (int)*(short *)(yy_accept + (long)(int)ulong_Var19 * 2);\n      if (int_Var8 == 0) {\n        int_Var8 = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        pointer_ByteVar35 = yy_last_accepting_cpos;\n      }\n      yyleng = (int)pointer_ByteVar35 - (int)pointer_ByteVar33;\n      yy_hold_char = *pointer_ByteVar35;\n      yy_c_buf_p = pointer_ByteVar35;\n      yytext = pointer_ByteVar33;\n      *pointer_ByteVar35 = 0;\nLAB_001041f0:\n      pointer_ByteVar32 = yytext;\n      long_Var18 = yy_buffer_stack_top;\n      switch(int_Var8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      long_Var18 = (long)iVar37;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        iVar37 = 2;\n        if (yychar < 0x114) {\n          iVar37 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    yychar = 0;\nLAB_0010497d:\n    uint_Var20 = char_Var2 + iVar37;\n    if ((0x22 < uint_Var20) || (iVar37 != (char)yycheck[(int)uint_Var20])) goto LAB_001049db;\n    char_Var2 = yytable[(int)uint_Var20];\n    long_Var18 = (long)char_Var2;\n    if (char_Var2 < '\\x01') {\n      iVar37 = -(int)char_Var2;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    local_int = local_int + -1 + (uint)(local_int == 0);\n    pointer_pointer_charVar29 = pointer_pointer_charVar29 + 1;\n    *pointer_pointer_charVar29 = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&yydefact)[(int)long_Var18];\n  if ((&yydefact)[(int)long_Var18] == '\\0') {\n    if (local_int == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[long_Var18] != -0xe) &&\n             (uint_Var20 = (int)(char)(&yypact)[long_Var18] + 1, uint_Var20 < 0x23)) &&\n            (yycheck[(int)uint_Var20] == '\\x01')) &&\n           (long_Var18 = (long)(char)yytable[(int)uint_Var20], '\\0' < (char)yytable[(int)uint_Var20]))\n        goto LAB_00105227;\n        if (local_pointer_char == local_pointer_char) goto LAB_0010524c;\n        local_pointer_char = local_pointer_char + -1;\n        pointer_pointer_charVar29 = pointer_pointer_charVar29 + -1;\n        long_Var18 = (long)*local_pointer_char;\n      } while( true );\n    }\n    if (local_int != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8_Var11 = program_name;\n  pointer_pointer_charVar27 = obfd;\n  char_Var2 = yyr2[iVar37];\n  ppcVar38 = (char **)pointer_pointer_charVar29[1 - char_Var2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    pointer_undefined8_Var22 = (undefined8 *)*pointer_pointer_charVar29;\n    if (obfd == (char **)0x0) {\n      pointer_char_Var10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointer_char_Var10 = (char *)dcgettext(0,pointer_char_Var10,5);\n      fprintf(_stderr,pointer_char_Var10,undefined8_Var11);\n      maybequit();\n    }\n    else {\n      for (; pointer_undefined8_Var22 != (undefined8 *)0x0; pointer_undefined8_Var22 = (undefined8 *)pointer_undefined8_Var22[1]) {\n        for (pointer_undefined8_Var23 = (undefined8 *)obfd[0x1f]; pointer_undefined8_Var23 != (undefined8 *)0x0;\n            pointer_undefined8_Var23 = (undefined8 *)pointer_undefined8_Var23[0x1e]) {\n          int_Var8 = filename_cmp(*pointer_undefined8_Var23);\n          if (int_Var8 == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointer_undefined8_Var22,0);\n        undefined8_Var6 = program_name;\n        undefined8_Var11 = *pointer_undefined8_Var22;\n        pointer_char_Var10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_char_Var10,undefined8_Var6,undefined8_Var11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointer_undefined8_Var22 = (undefined8 *)*pointer_pointer_charVar29;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      pointer_char_Var10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointer_undefined8_Var22 != (undefined8 *)0x0; pointer_undefined8_Var22 = (undefined8 *)pointer_undefined8_Var22[1]) {\n      bool_Var28 = false;\n      pointer_pointer_charVar27 = obfd + 0x1f;\n      for (pointer_char_Var10 = obfd[0x1f]; pointer_char_Var10 != (char *)0x0; pointer_char_Var10 = *(char **)(pointer_char_Var10 + 0xf0)) {\n        int_Var8 = filename_cmp();\n        if (int_Var8 == 0) {\n          pointer_char_Var15 = (char *)bfd_openr(*pointer_undefined8_Var22,0);\n          undefined8_Var11 = program_name;\n          if (pointer_char_Var15 == (char *)0x0) {\n            undefined8_Var6 = *pointer_undefined8_Var22;\n            pointer_char_Var15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointer_char_Var15,undefined8_Var11,undefined8_Var6);\n            maybequit();\n          }\n          else {\n            *pointer_pointer_charVar27 = pointer_char_Var15;\n            bool_Var28 = true;\n            *(undefined8 *)(pointer_char_Var15 + 0xf0) = *(undefined8 *)(pointer_char_Var10 + 0xf0);\n          }\n        }\n        else {\n          pointer_pointer_charVar27 = (char **)(pointer_char_Var10 + 0xf0);\n        }\n      }\n      if (!bool_Var28) {\n        pointer_char_Var10 = (char *)bfd_openr(*pointer_undefined8_Var22,0);\n        undefined8_Var6 = program_name;\n        undefined8_Var11 = *pointer_undefined8_Var22;\n        pointer_char_Var15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_char_Var15,undefined8_Var6,undefined8_Var11);\n        undefined8_Var11 = program_name;\n        if (pointer_char_Var10 == (char *)0x0) {\n          undefined8_Var6 = *pointer_undefined8_Var22;\n          pointer_char_Var10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointer_char_Var10,undefined8_Var11,undefined8_Var6);\n          maybequit();\n        }\n        else {\n          *pointer_pointer_charVar27 = pointer_char_Var10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointer_undefined8_Var22 = (undefined8 *)*pointer_pointer_charVar29;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_undefined8_Var22 != (undefined8 *)0x0; pointer_undefined8_Var22 = (undefined8 *)pointer_undefined8_Var22[1]) {\n      bool_Var28 = false;\n      pointer_pointer_charVar27 = obfd + 0x1f;\n      for (pointer_undefined8_Var23 = (undefined8 *)obfd[0x1f]; undefined8_Var11 = program_name, pointer_undefined8_Var23 != (undefined8 *)0x0;\n          pointer_undefined8_Var23 = (undefined8 *)pointer_undefined8_Var23[0x1e]) {\n        int_Var8 = filename_cmp(*pointer_undefined8_Var23,*pointer_undefined8_Var22);\n        if (int_Var8 == 0) {\n          bool_Var28 = true;\n          *pointer_pointer_charVar27 = (char *)pointer_undefined8_Var23[0x1e];\n        }\n        else {\n          pointer_pointer_charVar27 = (char **)(pointer_undefined8_Var23 + 0x1e);\n        }\n      }\n      if (!bool_Var28) {\n        undefined8_Var6 = *pointer_undefined8_Var22;\n        pointer_char_Var10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_char_Var10,undefined8_Var11,undefined8_Var6);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    pointer_undefined8_Var22 = (undefined8 *)*pointer_pointer_charVar29;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_undefined8_Var22 != (undefined8 *)0x0; pointer_undefined8_Var22 = (undefined8 *)pointer_undefined8_Var22[1]) {\n      pointer_char_Var10 = (char *)bfd_openr(*pointer_undefined8_Var22,\"plugin\");\n      undefined8_Var11 = program_name;\n      pointer_pointer_charVar27 = obfd;\n      if (pointer_char_Var10 == (char *)0x0) {\n        undefined8_Var6 = *pointer_undefined8_Var22;\n        pointer_char_Var10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointer_char_Var10,undefined8_Var11,undefined8_Var6);\n        maybequit();\n      }\n      else {\n        *(char **)(pointer_char_Var10 + 0xf0) = obfd[0x1f];\n        pointer_pointer_charVar27[0x1f] = pointer_char_Var10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    pointer_char_Var10 = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    pointer_char_Var15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_char_Var15,pointer_char_Var10);\n    for (pointer_char_Var10 = obfd[0x1f]; pointer_char_Var10 != (char *)0x0; pointer_char_Var10 = *(char **)(pointer_char_Var10 + 0xf0)) {\n      ar_directory_doer(pointer_char_Var10,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(pointer_pointer_charVar27);\n    pointer_char_Var10 = real_name;\n    int_Var8 = stat(real_name,&local_stat);\n    if ((int_Var8 != 0) && (obfd = (char **)bfd_openw(pointer_char_Var10,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*pointer_pointer_charVar29,0);\n    break;\n  case 0x1f:\n    ar_open(*pointer_pointer_charVar29,1);\n    break;\n  case 0x20:\n    pointer_char_Var10 = *pointer_pointer_charVar29;\n    if (obfd == (char **)0x0) {\n      pointer_char_Var10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long_Var18 = open_inarch(pointer_pointer_charVar29[-1],0);\n    if (long_Var18 != 0) {\n      map_over_list(long_Var18,ar_addlib_doer,pointer_char_Var10);\n    }\n    break;\n  case 0x21:\n    pointer_char_Var10 = *pointer_pointer_charVar29;\n    pointer_char_Var15 = pointer_pointer_charVar29[-1];\n    undefined8_Var11 = open_inarch(pointer_pointer_charVar29[-2],0);\n    if (pointer_char_Var10 == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(pointer_char_Var10,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(undefined8_Var11,ar_directory_doer,pointer_char_Var15);\n        bfd_close(undefined8_Var11);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      pointer_char_Var16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointer_char_Var16,pointer_char_Var10);\n    }\n    map_over_list(undefined8_Var11,ar_directory_doer,pointer_char_Var15);\n    bfd_close(undefined8_Var11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*pointer_pointer_charVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)pointer_pointer_charVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pointer_char_Var10 = pointer_pointer_charVar29[-2];\n    *ppcVar38 = *pointer_pointer_charVar29;\n    ppcVar38[1] = pointer_char_Var10;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  long_Var18 = (long)char_Var2;\n  local_pointer_char = local_pointer_char + -long_Var18;\n  pointer_pointer_charVar29[1 - long_Var18] = (char *)ppcVar38;\n  pointer_pointer_charVar29 = pointer_pointer_charVar29 + (1 - long_Var18);\n  uint_Var20 = (int)(char)yypgoto[(char)yyr1[iVar37] + -0x18] + (int)*local_pointer_char;\n  if ((uint_Var20 < 0x23) && (*local_pointer_char == yycheck[(int)uint_Var20])) {\n    long_Var18 = (long)(char)yytable[(int)uint_Var20];\n  }\n  else {\n    long_Var18 = (long)(char)yydefgoto[(char)yyr1[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  int_Var8 = ((int)pointer_ByteVar35 - (int)yytext) + -1;\n  *pointer_ByteVar35 = yy_hold_char;\n  pointer_pointer_Var1 = (long **)(yy_buffer_stack + long_Var18 * 8);\n  pointer_pointer_FileVar3 = (FILE **)*pointer_pointer_Var1;\n  if (*(int *)(pointer_pointer_FileVar3 + 7) == 0) {\n    yy_n_chars = *(uint *)((long)pointer_pointer_FileVar3 + 0x1c);\n    *(undefined4 *)(pointer_pointer_FileVar3 + 7) = 1;\n    *pointer_pointer_FileVar3 = yyin;\n  }\n  pointer_ByteVar7 = yy_c_buf_p;\n  pointer_FileVar4 = pointer_pointer_FileVar3[1];\n  undefined_Var40._8_8_ = pointer_FileVar4;\n  undefined_Var40._0_8_ = pointer_pointer_FileVar3;\n  if ((byte *)((long)&pointer_FileVar4->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&pointer_FileVar4->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      undefined_Var40 = yy_fatal_error();\n    }\n    if (*(int *)(undefined_Var40._0_8_ + 0x34) != 0) {\n      uint_Var20 = (int)((long)pointer_ByteVar7 - (long)pointer_ByteVar32) - 1;\n      for (long_Var18 = 0; (int)long_Var18 < (int)uint_Var20; long_Var18 = long_Var18 + 1) {\n        *(byte *)(undefined_Var40._8_8_ + long_Var18) = pointer_ByteVar32[long_Var18];\n      }\n      pointer_LongVar12 = *pointer_pointer_Var1;\n      if (*(int *)(pointer_LongVar12 + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)pointer_LongVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pointer_FileVar4 = yyin;\n        if (uint_Var20 == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            pointer_undefined8_Var22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            undefined8_Var11 = yy_create_buffer_constprop_0(pointer_FileVar4);\n            *pointer_undefined8_Var22 = undefined8_Var11;\n          }\n          long_Var18 = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            long_Var18 = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          int_Var9 = 1;\n          yy_init_buffer(long_Var18);\n          yy_load_buffer_state();\n        }\n        else {\n          int_Var9 = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_LongVar5 = *pointer_pointer_Var1;\n          uint_Var24 = ~uint_Var20 + *(int *)(pointer_LongVar12 + 3);\n          if (0 < (int)uint_Var24) break;\n          uint_Var24 = (int)yy_c_buf_p - (int)(void *)pointer_LongVar5[1];\n          if (*(int *)(pointer_LongVar5 + 4) == 0) {\n            pointer_LongVar5[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          int_Var9 = *(int *)(pointer_LongVar5 + 3);\n          int_Var25 = int_Var9;\n          if (int_Var9 < 1) {\n            int_Var25 = int_Var9 / 8;\n          }\n          *(int *)(pointer_LongVar5 + 3) = int_Var25 + int_Var9;\n          pointer_Var14 = realloc((void *)pointer_LongVar5[1],(long)(int_Var25 + int_Var9 + 2));\n          pointer_LongVar5[1] = (long)pointer_Var14;\n          if (pointer_Var14 == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)pointer_Var14 + (long)(int)uint_Var24);\n          pointer_LongVar12 = *pointer_pointer_Var1;\n        }\n        if (0x2000 < (int)uint_Var24) {\n          uint_Var24 = 0x2000;\n        }\n        ulong_Var26 = (ulong)uint_Var24;\n        if (*(int *)((long)pointer_LongVar5 + 0x24) == 0) {\n          pointer_int_Var34 = __errno_location();\n          ulong_Var26 = (ulong)(int)uint_Var24;\n          ulong_Var19 = (ulong)(int)uint_Var20;\n          *pointer_int_Var34 = 0;\n          goto LAB_001046c7;\n        }\n        ulong_Var19 = 0;\n        pointer_int_Var34 = (int *)(long)(int)uint_Var20;\n        do {\n          int_Var9 = getc(yyin);\n          uVar36 = (uint)ulong_Var19;\n          if (int_Var9 == -1) {\n            int_Var9 = ferror(yyin);\n            uint_Var24 = uVar36;\n            if (int_Var9 != 0) {\n              do {\n                pointer_char_Var10 = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *pointer_int_Var34 = 0;\n                  clearerr((FILE *)pointer_char_Var10);\nLAB_001046c7:\n                  size_t_Var13 = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + ulong_Var19)\n                                 ,1,ulong_Var26,yyin);\n                  pointer_char_Var10 = (char *)yyin;\n                  yy_n_chars = (uint)size_t_Var13;\n                  uint_Var24 = yy_n_chars;\n                  if ((yy_n_chars != 0) || (int_Var9 = ferror(yyin), uint_Var24 = yy_n_chars, int_Var9 == 0))\n                  goto LAB_00104738;\n                } while (*pointer_int_Var34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (int_Var9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_Var20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            uint_Var24 = uVar36 + 1;\n            break;\n          }\n          ulong_Var19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)pointer_int_Var34) = (char)int_Var9;\n          pointer_int_Var34 = (int *)((long)pointer_int_Var34 + 1);\n        } while (uint_Var24 != uVar36 + 1);\nLAB_00104738:\n        yy_n_chars = uint_Var24;\n        uint_Var24 = yy_n_chars;\n        int_Var9 = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (uint_Var24 == 0) goto LAB_0010475e;\n      }\n      pointer_LongVar12 = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      long_Var18 = *pointer_LongVar12;\n      uint_Var20 = uint_Var20 + yy_n_chars;\n      if (*(int *)(long_Var18 + 0x18) < (int)uint_Var20) {\n        int_Var25 = ((int)yy_n_chars >> 1) + uint_Var20;\n        pointer_Var14 = realloc(*(void **)(long_Var18 + 8),(long)int_Var25);\n        *(void **)(long_Var18 + 8) = pointer_Var14;\n        undefined_Var41._8_8_ = pointer_LongVar12;\n        undefined_Var41._0_8_ = *pointer_LongVar12;\n        if (*(long *)(*pointer_LongVar12 + 8) == 0) {\n          undefined_Var41 = yy_fatal_error();\n        }\n        pointer_LongVar12 = undefined_Var41._8_8_;\n        *(int *)(undefined_Var41._0_8_ + 0x18) = int_Var25 + -2;\n      }\n      yy_n_chars = uint_Var20;\n      *(undefined *)(*(long *)(*pointer_LongVar12 + 8) + (long)(int)uint_Var20) = 0;\n      *(undefined *)(*(long *)(*pointer_LongVar12 + 8) + 1 + (long)(int)uint_Var20) = 0;\n      pointer_ByteVar32 = *(byte **)(*pointer_LongVar12 + 8);\n      yytext = pointer_ByteVar32;\n      if (int_Var9 == 1) goto LAB_001048a4;\n      if (int_Var9 == 2) goto LAB_001048ca;\n      pointer_ByteVar35 = pointer_ByteVar32 + int_Var8;\n      yy_c_buf_p = pointer_ByteVar35;\n      uint_Var20 = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)pointer_ByteVar7 - (long)pointer_ByteVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointer_ByteVar35 = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = pointer_ByteVar35;\n    ulong_Var19 = yy_get_previous_state();\n    pointer_ByteVar33 = yytext;\n    goto LAB_0010419f;\n  }\n  pointer_ByteVar35 = pointer_ByteVar32 + int_Var8;\n  yy_c_buf_p = pointer_ByteVar35;\n  ulong_Var19 = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)ulong_Var19 * 2) != 0) {\n    yy_last_accepting_cpos = pointer_ByteVar35;\n    yy_last_accepting_state = (uint)ulong_Var19;\n  }\n  ulong_Var26 = ulong_Var19 & 0xffffffff;\n  while( true ) {\n    int_Var8 = (int)ulong_Var26;\n    if (int_Var8 == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)int_Var8 * 2) + 1) * 2)) break;\n    ulong_Var26 = (ulong)(uint)(int)*(short *)(yy_def + (long)int_Var8 * 2);\n  }\n  uint_Var20 = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)int_Var8 * 2) + 1) * 2);\n  pointer_ByteVar33 = pointer_ByteVar32;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)int_Var8 * 2) + 1) * 2) == 0) ||\n     (uint_Var20 == 0xb0)) goto LAB_0010419f;\n  pointer_ByteVar35 = pointer_ByteVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  int_Var8 = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointer_ByteVar35 = yy_hold_char;\n  ulong_Var19 = (ulong)yy_last_accepting_state;\n  pointer_ByteVar35 = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  pointer_pointer_charVar29 = pointer_pointer_charVar29 + 1;\n  local_int = 3;\n  *pointer_pointer_charVar29 = yylval;\nLAB_001049d1:\n  local_pointer_char = local_pointer_char + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "open_inarch",
                "prompt",
                "smart_rename.constprop.0",
                "fprintf",
                "ferror",
                "fread",
                "fclose",
                "clearerr",
                "maybequit",
                "dcgettext",
                "map_over_list",
                "yy_load_buffer_state",
                "ar_directory_doer",
                "fwrite",
                "stat",
                "ar_open",
                "filename_cmp",
                "__errno_location",
                "yyerror.constprop.0",
                "bfd_openw",
                "dup",
                "ar_addlib_doer",
                "yy_fatal_error",
                "printf",
                "fopen",
                "bfd_close",
                "unlink",
                "bfd_set_format",
                "yy_init_buffer",
                "bfd_cache_close",
                "yy_get_previous_state",
                "bfd_openr",
                "realloc",
                "yyensure_buffer_stack",
                "yy_create_buffer.constprop.0",
                "getc",
                "extract_file",
                "free",
                "malloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "decompiled_function_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_matching_formats",
                "list_supported_targets",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupOutput_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  removeFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "error",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errorPtr",
                "lVar5": "bufferStack"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int error;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errorPtr;\n  long bufferStack;\n  \n  errorPtr = __errno_location();\n  bufferStack = yy_buffer_stack;\n  error = *errorPtr;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (yy_buffer_stack != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(bufferStack + yy_buffer_stack_top * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (bufferStack != 0) {\n      if (filePtr == *(FILE ***)(bufferStack + yy_buffer_stack_top * 8)) {\n        yy_load_buffer_state();\n      }\n      *filePtr = inputFile;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = inputFile;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTerminal;\n  *errorPtr = error;\n  return param5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "__errno_location",
                "isatty",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = obfd;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_data_to_file_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "fileName",
                "_Var3": "currentOffset",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "errno",
                "iVar2": "readResult",
                "__fd": "outputFileDescriptor",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyDataToFile_00105c00(int fileDescriptor,char *fileName)\n\n{\n  int errno;\n  int outputFileDescriptor;\n  int readResult;\n  __off_t currentOffset;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (currentOffset = lseek(fileDescriptor,0,0), currentOffset == 0)) {\n    outputFileDescriptor = open(fileName,0x201);\n    if (outputFileDescriptor < 0) {\n      bytesRead = simple_copy_constprop_0_cold();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      readResult = (int)bytesRead;\n      if (readResult < 1) {\n        errnoPointer = __errno_location();\n        errno = *errnoPointer;\n        close(fileDescriptor);\n        close(outputFileDescriptor);\n        if (readResult != 0) {\n          *errnoPointer = errno;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(outputFileDescriptor,buffer,(long)readResult);\n    } while (bytesWritten == (long)readResult);\n    errnoPointer = __errno_location();\n    readResult = *errnoPointer;\n    close(fileDescriptor);\n    close(outputFileDescriptor);\n    *errnoPointer = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "write",
                "open",
                "read",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_data_to_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_status_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_number",
                "uVar3": "error_message",
                "pcVar4": "error_description",
                "sStack_a8": "file_status"
            },
            "code": "\nlong check_file_status_001052a0(char *file_path)\n\n{\n  int status;\n  int *error_number;\n  undefined8 error_message;\n  char *error_description;\n  stat file_status;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_status);\n    if (status < 0) {\n      error_number = __errno_location();\n      if (*error_number == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,file_path);\n      }\n      else {\n        error_description = strerror(*error_number);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,file_path,error_description);\n      }\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,file_path);\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_status.st_size) {\n        return file_status.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "get_file_size.cold",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_status_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptions"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptions;\n  \n  emulationOptions = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptions);\n  emulationOptions = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptions);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_archive_file_00103c60",
                "param_1": "archiveFilename",
                "param_2": "isPlugin",
                "cVar1": "checkResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "programName",
                "plVar7": "currentFile"
            },
            "code": "\n\n\nvoid processArchiveFile_00103c60(char *archiveFilename,int isPlugin)\n\n{\n  char checkResult;\n  int *errorLocation;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 programName;\n  long *currentFile;\n  \n  real_name = xstrdup();\n  temp_name = (char *)make_tempname(real_name,&temp_fd);\n  if (temp_name == (char *)0x0) {\n    errorLocation = __errno_location();\n    archiveFilename = strerror(*errorLocation);\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    obfd = bfd_fdopenw(temp_name,0,temp_fd);\n    if (obfd == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      archiveFilename = temp_name;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(obfd,2);\n        *(byte *)(obfd + 0x49) = *(byte *)(obfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(archiveFilename,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkResult = bfd_check_format(inputArchive,2);\n        if (checkResult != '\\0') {\n          currentFile = (long *)(obfd + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *currentFile = archivedFile;\n            currentFile = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,archiveFilename);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "make_tempname",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "strerror",
                "fprintf",
                "bfd_check_format",
                "maybequit",
                "bfd_fdopenw",
                "bfd_openr",
                "dcgettext",
                "bfd_set_format",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archive_file_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "open_inarch",
                "print_contents",
                "bfd_nonfatal.cold",
                "replace_members.cold",
                "list_supported_targets",
                "extract_file.cold",
                "ar_emul_default_usage",
                "get_file_size",
                "main",
                "FUN_00102e6f",
                "yyparse.isra.0",
                "map_over_list",
                "ar_open",
                "list_matching_formats",
                "write_archive",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "map_over_members.cold",
                "print_arelt_descr.cold",
                "smart_rename.constprop.0.cold",
                "print_version",
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_accepting_state_0010300e",
                "yy_start": "startState",
                "yytext": "currentChar",
                "yy_c_buf_p": "bufferPointer",
                "yy_ec": "ecMap",
                "yy_accept": "acceptMap",
                "yy_base": "baseMap",
                "yy_chk": "checkMap",
                "yy_def": "defMap",
                "yy_meta": "metaMap",
                "yy_nxt": "nextMap",
                "yy_last_accepting_cpos": "lastAcceptingCharPosition",
                "yy_last_accepting_state": "lastAcceptingState"
            },
            "code": "\nvoid findAcceptingState_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 = false;\n  iVar2 = startState;\n  for (pbVar5 = currentChar; pbVar5 < bufferPointer; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = ecMap[*pbVar5];\n    }\n    if (*(short *)(acceptMap + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      in_R9 = pbVar5;\n      in_R10D = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(baseMap + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(checkMap + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(defMap + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = metaMap[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(nextMap + lVar3 * 2);\n  }\n  if (bVar1) {\n    lastAcceptingCharPosition = in_R9;\n    lastAcceptingState = in_R10D;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "find_accepting_state_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_file_from_binary_00107740",
                "param_1": "binaryData",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "translatedString",
                "pplVar6": "filePointer",
                "__ptr": "bufferPointer",
                "__n": "bufferSize",
                "lVar7": "loopVariable",
                "plVar8": "filePointer2",
                "puVar9": "preserveDatesArray",
                "uVar10": "dataSize",
                "sVar11": "readSize",
                "local_c8": "dateArray",
                "_Stack_b0": "filePermissions",
                "uStack_98": "archiveSize",
                "uStack_80": "timeValue1",
                "uStack_70": "timeValue2",
                "output_file": "outputFile",
                "output_filename": "outputFileName"
            },
            "code": "\nlong * extractFileFromBinary_00107740(long **binaryData)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 translatedString;\n  long **filePointer;\n  void *bufferPointer;\n  size_t bufferSize;\n  long loopVariable;\n  long *filePointer2;\n  undefined4 *preserveDatesArray;\n  ulong dataSize;\n  size_t readSize;\n  undefined4 dateArray [6];\n  __mode_t filePermissions;\n  ulong archiveSize;\n  undefined8 timeValue1;\n  undefined8 timeValue2;\n  \n  if (preserve_dates != 0) {\n    preserveDatesArray = dateArray;\n    for (loopVariable = 0x24; loopVariable != 0; loopVariable = loopVariable + -1) {\n      *preserveDatesArray = 0;\n      preserveDatesArray = preserveDatesArray + 1;\n    }\n  }\n  filePointer = (long **)binaryData[0x1d];\n  if ((long **)binaryData[0x1d] == (long **)0x0) {\n    filePointer = binaryData;\n  }\n  errorCode = (*(code *)filePointer[1][0x3d])(binaryData,dateArray);\n  if (errorCode != 0) {\n    filePointer2 = *binaryData;\n    translatedString = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = fatal(translatedString,filePointer2);\n    translatedString = posname;\n    if (errorCode == 3) {\n      for (; *filePointer2 != 0; filePointer2 = (long *)(*filePointer2 + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePointer2 != (undefined8 *)0x0; filePointer2 = (long *)(*filePointer2 + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*filePointer2,translatedString);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return filePointer2;\n          }\n          return (long *)(*filePointer2 + 0xf0);\n        }\n      }\n    }\n    return filePointer2;\n  }\n  bfd_seek(binaryData,0,0);\n  outputFile = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*binaryData);\n  }\n  else {\n    dataSize = 0;\n    bufferPointer = (void *)xmalloc(0x2000);\n    do {\n      readSize = archiveSize - dataSize;\n      if (0x2000 < readSize) {\n        readSize = 0x2000;\n      }\n      bufferSize = bfd_bread(bufferPointer,readSize,binaryData);\n      if (readSize != bufferSize) {\nLAB_00102c78:\n        binaryData = (long **)*binaryData[0x1d];\n        translatedString = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(translatedString,binaryData);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*binaryData);\n      }\n      readSize = fwrite(bufferPointer,1,bufferSize,outputFile);\n      if (readSize != bufferSize) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        fatal(\"%s: %s\",outputFileName,errorString);\n        goto LAB_00102c78;\n      }\n      dataSize = dataSize + bufferSize;\n    } while (dataSize < archiveSize);\n    free(bufferPointer);\n  }\n  fclose(outputFile);\n  errorString = outputFileName;\n  outputFile = (FILE *)0x0;\n  chmod(outputFileName,filePermissions);\n  if (preserve_dates != 0) {\n    timeValue1 = timeValue2;\n    set_times(errorString,dateArray);\n  }\n  outputFileName = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_file_from_binary_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_archives_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "tempVar1",
                "bVar2": "tempVar2",
                "iVar3": "tempVar3",
                "sVar4": "tempVar4",
                "piVar5": "tempVar5",
                "pcVar6": "tempVar6",
                "pcVar7": "tempVar7",
                "ppcVar8": "tempVar8",
                "uVar9": "tempVar9",
                "lVar10": "tempVar10",
                "__s": "str1",
                "__s_00": "str2",
                "lVar11": "tempVar11",
                "uVar12": "tempVar12",
                "uVar13": "tempVar13",
                "unaff_RBX": "tempVar14",
                "ppcVar14": "tempVar15",
                "unaff_RBP": "tempVar16",
                "unaff_R12": "tempVar17",
                "unaff_R13D": "tempVar18",
                "ppcVar15": "tempVar19",
                "unaff_R14": "tempVar20",
                "bVar16": "tempVar21",
                "bVar17": "tempVar22",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2",
                "posname": "positionName",
                "filename_cmp": "compareFilenames",
                "libdeps_bfd": "libraryDependencyBfd",
                "verbose": "isVerbose",
                "bfd_fatal": "handleBfdFatal",
                "bfd_openr": "openBfdRead",
                "do_ar_emul_append_constprop_0": "emulateArAppendConstProp",
                "output_filename": "outputFilename",
                "write_archive": "writeArchive",
                "full_pathname": "isFullPathname",
                "lbasename": "getBaseName",
                "ar_truncate": "shouldTruncateAr",
                "xmalloc": "allocateMemory",
                "fatal": "handleFatalError",
                "__errno_location": "getErrorNumberLocation",
                "stack0x000000b0": "stackVar3",
                "get_pos_bfd": "getBfdPosition",
                "normalize": "normalizePath",
                "ar_emul_default_replace": "emulateArDefaultReplace",
                "ar_emul_default_append": "emulateArDefaultAppend",
                "newer_only": "isNewerOnly",
                "stat": "getFileStatus"
            },
            "code": "\nundefined8 processArchives_001028ed(undefined8 param1,long param2)\n\n{\n  undefined tempVar1;\n  byte tempVar2;\n  int tempVar3;\n  size_t tempVar4;\n  int *tempVar5;\n  char *tempVar6;\n  char *tempVar7;\n  char **tempVar8;\n  undefined8 tempVar9;\n  long tempVar10;\n  char *str1;\n  char *str2;\n  long tempVar11;\n  undefined8 tempVar12;\n  ulong tempVar13;\n  char *tempVar14;\n  char **tempVar15;\n  char **tempVar16;\n  char **tempVar17;\n  uint tempVar18;\n  char **tempVar19;\n  long tempVar20;\n  bool tempVar21;\n  byte tempVar22;\n  char **param7;\n  undefined8 param9;\n  long stackVar1;\n  long stackVar2;\n  \n  tempVar22 = 0;\ncode_r0x001028ed:\n  handleBfdFatal(tempVar14,param2);\nLAB_001028f5:\n  tempVar12 = positionName;\n  if (tempVar18 != 3) {\n    while( true ) {\n      if ((undefined8 *)*tempVar17 == (undefined8 *)0x0) goto LAB_0010571f;\n      tempVar3 = compareFilenames(*(undefined8 *)*tempVar17,tempVar12);\n      if (tempVar3 == 0) break;\n      tempVar17 = (char **)(*tempVar17 + 0xf0);\n    }\n    if (tempVar18 != 2) goto LAB_0010571f;\n    tempVar17 = (char **)(*tempVar17 + 0xf0);\n    goto LAB_0010571f;\n  }\n  tempVar10 = *(long *)(tempVar20 + 0xf0);\n  if (*(long *)(tempVar20 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    tempVar11 = tempVar10;\n    tempVar10 = *(long *)(tempVar11 + 0xf0);\n  } while (tempVar10 != 0);\n  tempVar17 = (char **)(tempVar11 + 0xf0);\n  tempVar14 = *tempVar16;\n  if (libraryDependencyBfd != 0) goto LAB_00105731;\nLAB_00105698:\n  tempVar1 = make_thin_archive;\n  tempVar18 = (uint)(isVerbose != 0);\n  param2 = openBfdRead(tempVar14,target);\n  if (param2 != 0) {\n    tempVar16 = tempVar16 + 1;\n    tempVar2 = emulateArAppendConstProp(tempVar17,param2,tempVar18,tempVar1);\n    param9._6_1_ = param9._6_1_ | tempVar2;\n    tempVar6 = *tempVar16;\n    do {\n      if (tempVar6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          outputFilename = 0;\n          return 0;\n        }\n        tempVar12 = writeArchive();\n        return tempVar12;\n      }\n      tempVar15 = *(char ***)(tempVar20 + 0xf0);\n      tempVar17 = param7;\n      if (param9._7_1_ == '\\0') {\n        tempVar19 = param7;\n        if (tempVar15 != (char **)0x0) {\n          do {\n            if (isFullPathname == '\\0') {\n              str1 = (char *)getBaseName(*tempVar15);\n              tempVar7 = str1;\n              if (shouldTruncateAr != '\\0') {\n                tempVar4 = strlen(str1);\n                tempVar13 = (ulong)*(byte *)(*(long *)(tempVar20 + 8) + 0x1e);\n                if (tempVar13 < tempVar4) {\n                  tempVar7 = (char *)allocateMemory(tempVar13 + 1);\n                  tempVar10 = *(long *)(tempVar20 + 8);\n                  tempVar6 = tempVar7;\n                  for (tempVar13 = (ulong)*(byte *)(tempVar10 + 0x1e); tempVar13 != 0; tempVar13 = tempVar13 - 1) {\n                    *tempVar6 = *str1;\n                    str1 = str1 + (ulong)tempVar22 * -2 + 1;\n                    tempVar6 = tempVar6 + (ulong)tempVar22 * -2 + 1;\n                  }\n                  tempVar7[*(byte *)(tempVar10 + 0x1e)] = '\\0';\n                }\n                tempVar6 = *tempVar16;\n                str1 = tempVar7;\n                if (isFullPathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              tempVar6 = *tempVar16;\n              if (isFullPathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              str2 = (char *)getBaseName(tempVar6);\n              if (shouldTruncateAr != '\\0') {\n                tempVar4 = strlen(str2);\n                tempVar13 = (ulong)*(byte *)(*(long *)(tempVar20 + 8) + 0x1e);\n                tempVar6 = str2;\n                str1 = tempVar7;\n                if (tempVar13 < tempVar4) {\n                  tempVar6 = (char *)allocateMemory(tempVar13 + 1);\n                  tempVar10 = *(long *)(tempVar20 + 8);\n                  tempVar7 = tempVar6;\n                  for (tempVar13 = (ulong)*(byte *)(tempVar10 + 0x1e); tempVar13 != 0; tempVar13 = tempVar13 - 1) {\n                    *tempVar7 = *str2;\n                    str2 = str2 + (ulong)tempVar22 * -2 + 1;\n                    tempVar7 = tempVar7 + (ulong)tempVar22 * -2 + 1;\n                  }\n                  tempVar6[*(byte *)(tempVar10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              tempVar3 = compareFilenames(str2,tempVar7);\n            }\n            else {\n              tempVar6 = *tempVar16;\n              str1 = *tempVar15;\nLAB_00102980:\n              tempVar3 = compareFilenames(tempVar6,str1);\n            }\n            if ((tempVar3 == 0) && (tempVar15[0x1c] != (char *)0x0)) {\n              if (isNewerOnly != 0) {\n                tempVar3 = getFileStatus(*tempVar16,(getFileStatus *)&stackVar3);\n                if (tempVar3 != 0) {\n                  tempVar5 = getErrorNumberLocation();\n                  if (*tempVar5 != 2) {\n                    handleBfdFatal(*tempVar16);\nLAB_00102b7e:\n                    tempVar6 = *tempVar15;\n                    tempVar12 = dcgettext(0,\"internal getFileStatus error on %s\",5);\n                    handleFatalError(tempVar12,tempVar6);\n                    free(tempVar16);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                tempVar8 = (char **)tempVar15[0x1d];\n                if ((char **)tempVar15[0x1d] == (char **)0x0) {\n                  tempVar8 = tempVar15;\n                }\n                tempVar3 = (**(code **)(tempVar8[1] + 0x1e8))(tempVar15,&stack0x00000020);\n                if (tempVar3 != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              tempVar12 = getBfdPosition(param7,2,*tempVar15);\n              if (libraryDependencyBfd == 0) {\nLAB_00102ae2:\n                tempVar6 = *tempVar16;\n                tempVar21 = isVerbose != 0;\n                tempVar10 = openBfdRead(tempVar6,target);\n                if (tempVar10 == 0) {\n                  handleBfdFatal(tempVar6,0);\n                  goto LAB_00102b3e;\n                }\n                tempVar2 = emulateArDefaultReplace(tempVar12,tempVar10,tempVar21);\n              }\n              else {\n                tempVar9 = normalizePath(*tempVar16);\n                tempVar3 = compareFilenames(tempVar9,\"__.LIBDEP\");\n                if (tempVar3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                tempVar2 = emulateArDefaultReplace(tempVar12,libraryDependencyBfd,isVerbose != 0);\n              }\n              if (tempVar2 != 0) {\n                *tempVar19 = *(char **)(*tempVar19 + 0xf0);\n                param9._6_1_ = tempVar2;\n              }\n              goto LAB_0010577e;\n            }\n            tempVar19 = tempVar15 + 0x1e;\n            tempVar15 = (char **)tempVar15[0x1e];\n          } while (tempVar15 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        tempVar18 = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        tempVar18 = postype;\n        if (postype != 0) goto LAB_001028f5;\n        tempVar10 = *(long *)(tempVar20 + 0xf0);\n        if (*(long *)(tempVar20 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      tempVar14 = *tempVar16;\n      if (libraryDependencyBfd == 0) goto LAB_00105698;\nLAB_00105731:\n      tempVar12 = normalizePath(tempVar14);\n      tempVar3 = compareFilenames(tempVar12,\"__.LIBDEP\");\n      if (tempVar3 != 0) goto code_r0x0010574f;\n      tempVar2 = emulateArDefaultAppend(tempVar17,libraryDependencyBfd,isVerbose != 0,make_thin_archive);\n      param9._6_1_ = tempVar2 | param9._6_1_;\nLAB_0010577e:\n      tempVar16 = tempVar16 + 1;\n      tempVar6 = *tempVar16;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  tempVar14 = *tempVar16;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0",
                "bfd_fatal",
                "replace_members.cold",
                "bfd_openr",
                "dcgettext",
                "ar_emul_default_replace",
                "ar_emul_default_append",
                "xmalloc",
                "fatal",
                "stat",
                "strlen",
                "filename_cmp",
                "get_pos_bfd",
                "__errno_location",
                "write_archive",
                "normalize",
                "FUN_00102943",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archives_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "yy_init_buffer",
                "open_inarch",
                "simple_copy.constprop.0.cold",
                "ar_open",
                "print_contents",
                "set_times.cold",
                "get_file_size.cold",
                "replace_members.cold",
                "simple_copy.constprop.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "normalize.cold",
                "FUN_00105a68",
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_return_value_0010284b"
            },
            "code": "\nundefined8 getReturnValue_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_return_value_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "start_main_00105cc0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stack",
                "__libc_start_main": "initialize",
                "main": "entryPoint",
                "&stack0x00000008": "stackPointer"
            },
            "code": "\nvoid processEntry startMain_00105cc0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  initialize(entryPoint,arg2,stackPointer,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_00102f08",
                "unaff_RBX": "dataPointer",
                "unaff_R12": "targetPointer"
            },
            "code": "\nundefined8 printAndSwap_00102f08(void)\n\n{\n  undefined8 *dataPointer;\n  undefined8 *targetPointer;\n  \n  printf(\"a - %s\\n\",*dataPointer);\n  dataPointer[0x1e] = *targetPointer;\n  *targetPointer = dataPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_swap_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_archives_00105570",
                "param_1": "archiveManager",
                "param_2": "inputFiles",
                "param_3": "isRecursive",
                "ppcVar1": "currentArchive",
                "uVar2": "undefinedValue",
                "bVar3": "byteValue",
                "iVar4": "intValue",
                "sVar5": "sizeValue",
                "piVar6": "errorNum",
                "pcVar7": "inputFileName",
                "pcVar8": "baseName",
                "uVar9": "normalizedFileName",
                "pcVar10": "currentFile",
                "__s": "baseName2",
                "lVar11": "currentLink",
                "lVar12": "nextLink",
                "uVar13": "returnValue",
                "uVar14": "ulongValue",
                "ppcVar15": "nextFile",
                "ppcVar16": "nextArchive",
                "uVar17": "uintValue",
                "ppcVar18": "previousFile",
                "bVar19": "boolValue",
                "bVar20": "byteValue2",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "timeValue",
                "sStack_c8": "fileStat"
            },
            "code": "\nundefined8 processArchives_00105570(long archiveManager,char **inputFiles,char isRecursive)\n\n{\n  char **currentArchive;\n  undefined undefinedValue;\n  byte byteValue;\n  int intValue;\n  size_t sizeValue;\n  int *errorNum;\n  char *inputFileName;\n  char *baseName;\n  undefined8 normalizedFileName;\n  char *currentFile;\n  char *baseName2;\n  long currentLink;\n  long nextLink;\n  undefined8 returnValue;\n  ulong ulongValue;\n  char **nextFile;\n  char **nextArchive;\n  uint uintValue;\n  char **previousFile;\n  bool boolValue;\n  byte byteValue2;\n  byte localFlag;\n  undefined stackArray [88];\n  long timeValue;\n  stat fileStat;\n  \n  byteValue2 = 0;\n  currentArchive = (char **)(archiveManager + 0xf0);\n  localFlag = 0;\n  if (inputFiles == (char **)0x0) {\n    returnValue = initialize_output_filename_00102943();\n    return returnValue;\n  }\n  do {\n    currentFile = *inputFiles;\njoined_r0x001055aa:\n    if (currentFile == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = write_archive(archiveManager);\n        return returnValue;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    nextFile = *(char ***)(archiveManager + 0xf0);\n    nextArchive = currentArchive;\n    if (isRecursive != '\\0') {\nLAB_0010564c:\n      uintValue = postype;\n      if (postype != 0) goto LAB_001028f5;\n      nextLink = *(long *)(archiveManager + 0xf0);\n      if (*(long *)(archiveManager + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentLink = nextLink;\n        nextLink = *(long *)(currentLink + 0xf0);\n      } while (nextLink != 0);\n      nextArchive = (char **)(currentLink + 0xf0);\n      currentFile = *inputFiles;\n      do {\n        if (libdeps_bfd != 0) {\n          returnValue = normalize(currentFile,archiveManager);\n          intValue = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (intValue == 0) {\n            byteValue = ar_emul_default_append(nextArchive,libdeps_bfd,verbose != 0,make_thin_archive);\n            localFlag = byteValue | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFile = *inputFiles;\n        }\n        undefinedValue = make_thin_archive;\n        boolValue = verbose != 0;\n        nextLink = bfd_openr(currentFile,target);\n        if (nextLink != 0) {\n          inputFiles = inputFiles + 1;\n          byteValue = do_ar_emul_append_constprop_0(nextArchive,nextLink,(uint)boolValue,undefinedValue);\n          localFlag = localFlag | byteValue;\n          currentFile = *inputFiles;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(currentFile,0);\n        uintValue = (uint)boolValue;\nLAB_001028f5:\n        returnValue = posname;\n        if (uintValue == 3) {\n          nextLink = *(long *)(archiveManager + 0xf0);\n          if (*(long *)(archiveManager + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextArchive != (undefined8 *)0x0;\n              nextArchive = (char **)(*nextArchive + 0xf0)) {\n            intValue = filename_cmp(*(undefined8 *)*nextArchive,returnValue);\n            if (intValue == 0) {\n              if (uintValue == 2) {\n                nextArchive = (char **)(*nextArchive + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFile = *inputFiles;\n      } while( true );\n    }\n    previousFile = currentArchive;\n    if (nextFile == (char **)0x0) {\n      uintValue = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      currentFile = (char *)lbasename(*nextFile);\n      baseName = currentFile;\n      if (ar_truncate != '\\0') {\n        sizeValue = strlen(currentFile);\n        ulongValue = (ulong)*(byte *)(*(long *)(archiveManager + 8) + 0x1e);\n        if (ulongValue < sizeValue) {\n          baseName = (char *)xmalloc(ulongValue + 1);\n          nextLink = *(long *)(archiveManager + 8);\n          inputFileName = baseName;\n          for (ulongValue = (ulong)*(byte *)(nextLink + 0x1e); ulongValue != 0; ulongValue = ulongValue - 1) {\n            *inputFileName = *currentFile;\n            currentFile = currentFile + (ulong)byteValue2 * -2 + 1;\n            inputFileName = inputFileName + (ulong)byteValue2 * -2 + 1;\n          }\n          baseName[*(byte *)(nextLink + 0x1e)] = '\\0';\n        }\n        inputFileName = *inputFiles;\n        currentFile = baseName;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      inputFileName = *inputFiles;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName2 = (char *)lbasename(inputFileName);\n      if (ar_truncate != '\\0') {\n        sizeValue = strlen(baseName2);\n        ulongValue = (ulong)*(byte *)(*(long *)(archiveManager + 8) + 0x1e);\n        inputFileName = baseName2;\n        currentFile = baseName;\n        if (ulongValue < sizeValue) {\n          inputFileName = (char *)xmalloc(ulongValue + 1);\n          nextLink = *(long *)(archiveManager + 8);\n          baseName = inputFileName;\n          for (ulongValue = (ulong)*(byte *)(nextLink + 0x1e); ulongValue != 0; ulongValue = ulongValue - 1) {\n            *baseName = *baseName2;\n            baseName2 = baseName2 + (ulong)byteValue2 * -2 + 1;\n            baseName = baseName + (ulong)byteValue2 * -2 + 1;\n          }\n          inputFileName[*(byte *)(nextLink + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      intValue = filename_cmp(baseName2,baseName);\n      if (intValue == 0) goto LAB_00102993;\nLAB_00105639:\n      previousFile = nextFile + 0x1e;\n      nextFile = (char **)nextFile[0x1e];\n      if (nextFile == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    inputFileName = *inputFiles;\n    currentFile = *nextFile;\nLAB_00102980:\n    intValue = filename_cmp(inputFileName,currentFile);\n    if (intValue != 0) goto LAB_00105639;\nLAB_00102993:\n    if (nextFile[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      intValue = stat(*inputFiles,&fileStat);\n      if (intValue != 0) {\n        errorNum = __errno_location();\n        if (*errorNum != 2) {\n          bfd_fatal(*inputFiles);\nLAB_00102b7e:\n          currentFile = *nextFile;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(returnValue,currentFile);\n          free(inputFiles);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextArchive = (char **)nextFile[0x1d];\n      if ((char **)nextFile[0x1d] == (char **)0x0) {\n        nextArchive = nextFile;\n      }\n      intValue = (**(code **)(nextArchive[1] + 0x1e8))(nextFile,stackArray);\n      if (intValue != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= timeValue) goto LAB_0010577e;\n    }\n    returnValue = get_pos_bfd(currentArchive,2,*nextFile);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      currentFile = *inputFiles;\n      boolValue = verbose != 0;\n      nextLink = bfd_openr(currentFile,target);\n      if (nextLink == 0) {\n        bfd_fatal(currentFile,0);\n        goto LAB_00102b3e;\n      }\n      byteValue = ar_emul_default_replace(returnValue,nextLink,boolValue);\n    }\n    else {\n      normalizedFileName = normalize(*inputFiles,archiveManager);\n      intValue = filename_cmp(normalizedFileName,\"__.LIBDEP\");\n      if (intValue != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteValue = ar_emul_default_replace(returnValue,libdeps_bfd,verbose != 0);\n    }\n    if (byteValue != 0) {\n      *previousFile = *(char **)(*previousFile + 0xf0);\n      localFlag = byteValue;\n    }\nLAB_0010577e:\n    inputFiles = inputFiles + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archives_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "smart_rename.constprop.0.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archived_entry_not_found_0010285f",
                "__format": "errorMessage",
                "lVar2": "entryPath",
                "plVar3": "entryPathPtr",
                "uVar4": "entry",
                "plVar5": "currentEntry",
                "unaff_RBP": "callbackFunction",
                "unaff_R12": "archive",
                "unaff_R13D": "numEntries",
                "unaff_R14": "entryList",
                "iStack000000000000000c": "nameCounter"
            },
            "code": "\n\n\nvoid printArchivedEntryNotFound_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long entryPath;\n  long *entryPathPtr;\n  undefined8 entry;\n  long *currentEntry;\n  code *callbackFunction;\n  long archive;\n  int numEntries;\n  undefined8 *entryList;\n  int nameCounter;\n  \ncode_r0x0010285f:\n  entry = *entryList;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessage,entry);\nLAB_0010553e:\n  entryList = entryList + 1;\n  numEntries = numEntries + -1;\n  if (numEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archive + 0xf0);\n  nameCounter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entryPath = *currentEntry;\n      if (entryPath == 0) {\n        entryPathPtr = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          entryPathPtr = currentEntry;\n        }\n        (**(code **)(entryPathPtr[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archive + 0x49) & 0x10) == 0) || (entryPath = normalize(), entryPath != 0)) {\n        entry = normalize(*entryList);\n        iVar1 = filename_cmp(entry,entryPath);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (nameCounter = nameCounter + 1,\n            nameCounter == counted_name_counter)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callbackFunction)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_archived_entry_not_found_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_and_exit_0010394a",
                "param_1": "isVerbose",
                "uVar1": "programName",
                "__stream": "outputStream",
                "pcVar2": "message"
            },
            "code": "\n\n\nvoid printUsageAndExit_0010394a(uint isVerbose)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  list_supported_targets(program_name,outputStream);\n  if (isVerbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "list_supported_targets",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_success_00105bb0",
                "undefined8": "bool"
            },
            "code": "\nbool check_success_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_success_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "return_zero_00107640"
            },
            "code": "\nundefined8 return_zero_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "return_zero_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "extract_file.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "exit_if_not_interactive_0010315d",
                "interactive": "isInteractive"
            },
            "code": "\nvoid exitIfNotInteractive_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "exit_if_not_interactive_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "output",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets",
                "_stdout": "standard_output"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 output)\n\n{\n  print_arelt_descr(standard_output,output,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "copy_and_print_00103172",
                "param_1": "source_ptr",
                "param_2": "dest_ptr",
                "param_3": "should_print",
                "param_4": "additional_data",
                "uVar1": "source_value",
                "auVar2": "result_array"
            },
            "code": "\nundefined  [16]\ncopy_and_print_00103172(undefined8 *source_ptr,undefined8 *dest_ptr,char should_print,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined result_array [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*dest_ptr);\n  }\n  source_value = *source_ptr;\n  dest_ptr[0x1e] = source_value;\n  result_array._1_7_ = (undefined7)((ulong)source_value >> 8);\n  result_array[0] = 1;\n  *source_ptr = dest_ptr;\n  result_array._8_8_ = additional_data;\n  return result_array;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "copy_and_print_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "puVar1": "bufferPointer",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "yy_n_chars": "numChars",
                "yy_c_buf_p": "currentBufferPointer",
                "yytext": "textOutput",
                "yyin": "input",
                "yy_hold_char": "heldCharacter"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *bufferPointer;\n  \n  bufferPointer = *(undefined8 **)(bufferStack + bufferStackTop * 8);\n  numChars = *(undefined4 *)((long)bufferPointer + 0x1c);\n  currentBufferPointer = (undefined *)bufferPointer[2];\n  textOutput = currentBufferPointer;\n  input = *bufferPointer;\n  heldCharacter = *currentBufferPointer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yy_init_buffer",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_file_00105bc0",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "copy_flags",
                "param_4": "file_size",
                "uVar1": "copy_result",
                "piVar2": "errno_loc",
                "pcVar3": "error_msg",
                "uVar4": "translated_msg",
                "uVar5": "unlink_result"
            },
            "code": "\nundefined  [16] copy_and_unlink_file_00105bc0(char *source_file_path,char *destination_file_path,undefined4 copy_flags,undefined8 file_size)\n\n{\n  uint copy_result;\n  int *errno_loc;\n  char *error_msg;\n  undefined8 translated_msg;\n  ulong unlink_result;\n  undefined auVar6 [16];\n  \n  if (destination_file_path == source_file_path) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = simple_copy_constprop_0(copy_flags);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_loc = __errno_location();\n      error_msg = strerror(*errno_loc);\n      translated_msg = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(translated_msg,destination_file_path,error_msg);\n    }\n    unlink(source_file_path);\n  }\n  auVar6._8_8_ = file_size;\n  auVar6._0_8_ = unlink_result;\n  return auVar6;\n}\n\n",
            "called": [
                "simple_copy.constprop.0",
                "smart_rename.constprop.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "write_archive.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_size_00107650",
                "param_1": "fileToCheck",
                "uVar1": "result",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileSize_00107650(undefined8 fileToCheck)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(fileToCheck,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "xexit",
                "open_inarch",
                "write_archive",
                "ranlib_only.cold",
                "get_file_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_size_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "handle_file_copy_00102f1e",
                "piVar1": "errorCode",
                "uVar2": "errorMessage",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] handleFileCopy_00102f1e(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  result._0_8_ = fileSize & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "handle_file_copy_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "set_time_error_handling_00102fd7",
                "piVar1": "errnoPtr",
                "uVar2": "errorString"
            },
            "code": "\nvoid setTimeErrorHandling_00102fd7(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorString;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(errorString);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "set_time_error_handling_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyensure_buffer_stack",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "do_ar_emul_append.constprop.0",
                "ar_open"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "finalize_and_deregister_00105d60",
                "completed_0": "isCompleted",
                "__dso_handle": "handle",
                "deregister_tm_clones": "deregisterClones"
            },
            "code": "\nvoid finalizeAndDeregister_00105d60(void)\n\n{\n  if (isCompleted != '\\0') {\n    return;\n  }\n  __cxa_finalize(handle);\n  deregisterClones();\n  isCompleted = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "finalize_and_deregister_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_00105480",
                "param_1": "archivePtr",
                "param_2": "callbackFunc",
                "param_3": "entryNames",
                "param_4": "entryCount",
                "iVar1": "filenameComparison",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "normalizedName",
                "plVar5": "entryPtr",
                "local_cc": "counter",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchive_00105480(long archivePtr,code *callbackFunc,undefined8 *entryNames,int entryCount)\n\n{\n  int filenameComparison;\n  char *formatString;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 normalizedName;\n  long *entryPtr;\n  int counter;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archivePtr + 0xf0);\n  if (entryCount == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callbackFunc)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryPtr = *(long **)(archivePtr + 0xf0);\n      counter = 0;\n      for (; entryPtr != (long *)0x0; entryPtr = (long *)entryPtr[0x1e]) {\n        if (*(int *)((long)entryPtr + 0xac) == 0) {\n          currentEntry = *entryPtr;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entryPtr[0x1d];\n            if ((long *)entryPtr[0x1d] == (long *)0x0) {\n              fallbackEntry = entryPtr;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entryPtr,buffer);\n          }\n          else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) ||\n                  (currentEntry = normalize(currentEntry,archivePtr), currentEntry != 0)) {\n            normalizedName = normalize(*entryNames,archivePtr);\n            filenameComparison = filename_cmp(normalizedName,currentEntry);\n            if ((filenameComparison == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (counter = counter + 1, counter == counted_name_counter)))) {\n              (*callbackFunc)();\n              *(undefined4 *)((long)entryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedName = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,normalizedName);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      entryCount = entryCount + -1;\n    } while (entryCount != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "normalize",
                "map_over_members.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archive_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "do_ar_emul_append.constprop.0",
                "ar_open"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "param",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "secondary_param",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errnoLocation",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "maxBytesToRead"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *param)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *secondary_param;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errnoLocation;\n  size_t remaining_bytes;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong maxBytesToRead;\n  \n  buffer = (void *)xmalloc(0x2000);\n  secondary_param = (undefined8 *)param[0x1d];\n  if ((undefined8 *)param[0x1d] == (undefined8 *)0x0) {\n    secondary_param = param;\n  }\n  result = (**(code **)(secondary_param[1] + 0x1e8))(param,stackBuffer);\n  if (result == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*param);\n    }\n    totalBytesRead = 0;\n    bfd_seek(param,0,0);\n    goto LAB_00103afd;\n  }\n  param = (undefined8 *)*param;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    fatal(errorMessage,param);\n    maxBytesToRead = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytesWritten != remaining_bytes) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        fatal(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (maxBytesToRead <= totalBytesRead) goto LAB_00103b91;\n      remaining_bytes = maxBytesToRead - totalBytesRead;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remaining_bytes,param);\n    } while (remaining_bytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    param = *(undefined8 **)param[0x1d];\n    archiveSize = maxBytesToRead;\n  } while( true );\n}\n\n",
            "called": [
                "fwrite",
                "xmalloc",
                "fatal",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "printf",
                "free",
                "dcgettext",
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "parameters",
                "cVar1": "char_variable",
                "uVar2": "unsigned_variable",
                "iVar3": "int_variable",
                "uVar4": "undefined_variable",
                "__format": "format_string",
                "__ptr": "temporary_string",
                "__stream": "output_file",
                "ppcVar5": "output_bfd_ptr",
                "uStack0000000000000020": "stack_variable_1",
                "in_stack_00000028": "stack_variable_2",
                "in_stack_00000038": "stack_variable_3",
                "uStack_33": "stack_variable_4",
                "cStack_32": "char_stack_1",
                "cStack_31": "char_stack_2"
            },
            "code": "\nvoid write_archive_to_file_001058b0(undefined8 *parameters)\n\n{\n  char char_variable;\n  uint unsigned_variable;\n  int int_variable;\n  undefined8 undefined_variable;\n  char *format_string;\n  void *temporary_string;\n  FILE *output_file;\n  char **output_bfd_ptr;\n  uint stack_variable_1;\n  uint stack_variable_2;\n  undefined8 stack_variable_3;\n  int local_3c [2];\n  undefined stack_variable_4;\n  char char_stack_1;\n  char char_stack_2;\n  \n  undefined_variable = parameters[0x1e];\n  local_3c[0] = -1;\n  temporary_string = (void *)xstrdup(*parameters);\n  output_file = (FILE *)make_tempname(temporary_string,local_3c);\n  int_variable = local_3c[0];\n  if (output_file != (FILE *)0x0) {\n    output_filename = output_file;\n    output_bfd_ptr = (char **)bfd_fdopenw(output_file,*(undefined8 *)parameters[1],local_3c[0]);\n    if (output_bfd_ptr != (char **)0x0) {\n      output_bfd = output_bfd_ptr;\n      bfd_set_format(output_bfd_ptr,2);\n      unsigned_variable = (~write_armap >> 0x1f) << 3 | *(byte *)((long)output_bfd_ptr + 0x49) & 0xfffffff7;\n      *(char *)((long)output_bfd_ptr + 0x49) = (char)unsigned_variable;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)output_bfd_ptr + 0x44) = *(uint *)((long)output_bfd_ptr + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)output_bfd_ptr + 0x44) = *(uint *)((long)output_bfd_ptr + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)output_bfd_ptr + 0x49) = (byte)unsigned_variable | 0x10;\n        }\n        char_variable = bfd_set_archive_head(output_bfd_ptr,undefined_variable);\n        if (char_variable != '\\0') break;\n        unsigned_variable = bfd_fatal(temporary_string);\nLAB_00102d37:\n        *(uint *)((long)output_bfd_ptr + 0x44) = *(uint *)((long)output_bfd_ptr + 0x44) | 0x100000;\n      }\n      int_variable = dup(int_variable);\n      char_variable = bfd_close(output_bfd_ptr);\n      if (char_variable == '\\0') {\n        bfd_fatal(temporary_string);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,format_string);\n        unsigned_variable = stack_variable_1 & 0xf000;\n        if (unsigned_variable == 0x4000) {\n          stack_variable_4 = 100;\n        }\n        else if (unsigned_variable == 0xa000) {\n          stack_variable_4 = 0x6c;\n        }\n        else if (unsigned_variable == 0x6000) {\n          stack_variable_4 = 0x62;\n        }\n        else if (unsigned_variable == 0x2000) {\n          stack_variable_4 = 99;\n        }\n        else if (unsigned_variable == 0xc000) {\n          stack_variable_4 = 0x73;\n        }\n        else {\n          stack_variable_4 = 0x70;\n          if (unsigned_variable != 0x1000) {\n            stack_variable_4 = 0x2d;\n          }\n        }\n        char_stack_1 = (-((_stack_variable_1 & 0x100) == 0) & 0xbbU) + 0x72;\n        char_stack_2 = (-((_stack_variable_1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&char_stack_1,_stack_variable_1 >> 0x20,\n                (ulong)stack_variable_2,stack_variable_3,&stack0xffffffffffffffd8,\n                _stack_variable_1 & 0xffffffff);\n        fputs(*output_bfd_ptr,output_file);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)output_bfd_ptr + 0x49) & 0x10) == 0) {\n            if (output_bfd_ptr[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (output_bfd_ptr[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(parameters);\n      int_variable = smart_rename_constprop_0(output_file,temporary_string,int_variable);\n      if (int_variable == 0) {\n        free(temporary_string);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(int_variable);\n    bfd_fatal(temporary_string);\n  }\n  undefined_variable = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(undefined_variable);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "make_tempname",
                "close",
                "bfd_fatal",
                "bfd_fdopenw",
                "dcgettext",
                "bfd_set_format",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "input_path",
                "pcVar1": "output_dir",
                "pcVar2": "current_path",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "pFVar5": "output_file",
                "sVar6": "output_dir_length"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *input_path)\n\n{\n  char *output_dir;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *output_file;\n  size_t output_dir_length;\n  \n  output_dir = output_dir;\n  output_filename = input_path;\n  if (*input_path == '/') {\nLAB_00102e9a:\n    base_name = lbasename();\n    output_dir = output_filename;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(error_message,output_dir,base_name);\n    output_filename = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*input_path == '\\0') {\n      if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n        if (output_dir[output_dir_length - 1] == '/') {\n          output_filename = (char *)concat(output_dir,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(output_dir,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      output_file = fopen(output_filename,\"w\");\n      if (output_file == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = input_path;\n    if ((*input_path == '.') && (current_path = input_path + 1, input_path[1] == '.')) {\n      current_path = input_path + 2;\n      if ((input_path[2] == '/') || (input_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; input_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_00102f55",
                "piVar2": "errorLocation",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "previousError"
            },
            "code": "\nundefined8 closeFileAndSetError_00102f55(void)\n\n{\n  int previousError;\n  int *errorLocation;\n  int fileDescriptor;\n  \n  errorLocation = __errno_location();\n  previousError = *errorLocation;\n  close(fileDescriptor);\n  *errorLocation = previousError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_filename_and_create_temp_file_001057a0",
                "param_1": "path",
                "param_2": "fileDescriptor",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "iVar1": "result",
                "pcVar2": "fileName",
                "lVar3": "fileNameLength",
                "lVar4": "loopIndex1",
                "lVar5": "loopIndex2",
                "pcVar6": "newFileName",
                "bVar7": "terminateLoop",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] extractFilenameAndCreateTempFile_001057a0(char *path,int *fileDescriptor,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  int result;\n  char *fileName;\n  long fileNameLength;\n  long loopIndex1;\n  long loopIndex2;\n  char *newFileName;\n  byte terminateLoop;\n  undefined returnValue [16];\n  \n  terminateLoop = 0;\n  fileName = strrchr(path,0x2f);\n  if (fileName == (char *)0x0) {\n    fileName = (char *)xmalloc(9);\n    fileNameLength = 0;\n  }\n  else {\n    loopIndex2 = (long)fileName - (long)path;\n    fileName = (char *)xmalloc(loopIndex2 + 0xb);\n    fileNameLength = loopIndex2 + 1;\n    newFileName = fileName;\n    for (loopIndex1 = loopIndex2; loopIndex1 != 0; loopIndex1 = loopIndex1 + -1) {\n      *newFileName = *path;\n      path = path + (ulong)terminateLoop * -2 + 1;\n      newFileName = newFileName + (ulong)terminateLoop * -2 + 1;\n    }\n    fileName[loopIndex2] = '/';\n  }\n  *(undefined8 *)(fileName + fileNameLength) = 0x5858585858587473;\n  *(undefined *)((long)(fileName + fileNameLength) + 8) = 0;\n  result = mkstemp(fileName);\n  if (result == -1) {\n    newFileName = (char *)0x0;\n    free(fileName);\n  }\n  else {\n    *fileDescriptor = result;\n    newFileName = fileName;\n  }\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = newFileName;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr",
                "mkstemp",
                "make_tempname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "extract_filename_and_create_temp_file_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "print_contents",
                "set_times.cold",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "open_inarch",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "ar_emul_default_usage",
                "main",
                "yyparse.isra.0",
                "map_over_list",
                "ar_open",
                "list_matching_formats",
                "map_over_members.cold",
                "print_arelt_descr.cold",
                "yy_fatal_error",
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "handle_abort_00107c10",
                "bfd_nonfatal": "handleTransientError",
                "xexit": "terminateProgram"
            },
            "code": "\nvoid handleAbort_00107c10(void)\n\n{\n  handleTransientError();\n                    \n  terminateProgram(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "write_archive",
                "replace_members.cold",
                "write_archive.cold",
                "main"
            ],
            "imported": false,
            "current_name": "handle_abort_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "list_matching_formats",
                "prompt",
                "bfd_nonfatal.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_exit_functions_00107cc0",
                "plVar4": "exitFunctionList",
                "uVar5": "remainingCalls",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex"
            },
            "code": "\nvoid executeExitFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *exitFunctionList;\n  uint remainingCalls;\n  \n  exitFunctionList = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      remainingCalls = *(int *)(exitFunctionList + 1) - 1;\n      if (-1 < (int)remainingCalls) {\n        currentIndex = (long)(int)remainingCalls;\n        remainingCalls = remainingCalls & 7;\n        (*(code *)exitFunctionList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (remainingCalls != 0) {\n            if (remainingCalls != 1) {\n              if (remainingCalls != 2) {\n                if (remainingCalls != 3) {\n                  if (remainingCalls != 4) {\n                    if (remainingCalls != 5) {\n                      if (remainingCalls != 6) {\n                        (*(code *)exitFunctionList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)exitFunctionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)exitFunctionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)exitFunctionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)exitFunctionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)exitFunctionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)exitFunctionList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)exitFunctionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)exitFunctionList[tempIndex + 1])();\n            (*(code *)exitFunctionList[tempIndex])();\n            (*(code *)exitFunctionList[currentIndex])();\n            (*(code *)exitFunctionList[tempIndex + -2])();\n            (*(code *)exitFunctionList[tempIndex + -3])();\n            (*(code *)exitFunctionList[tempIndex + -4])();\n            (*(code *)exitFunctionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      exitFunctionList = (long *)*exitFunctionList;\n    } while (exitFunctionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_constprop_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid appendConstprop_00105ae0(undefined8 input1,undefined8 input2,undefined param3,undefined param4)\n\n{\n  do_ar_emul_append_constprop_0(input1,input2,param3,param4);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_constprop_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "local_d8": "bufferSize",
                "local_d4": "copySize",
                "local_d0": "buffer",
                "local_c8": "localCopy",
                "local_b8": "localArray",
                "local_b0": "param2Copy",
                "local_a8": "param3Copy",
                "local_a0": "param4Copy",
                "local_98": "param5Copy",
                "local_90": "param6Copy",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char in_AL;\n  undefined4 bufferSize;\n  undefined4 copySize;\n  undefined *buffer;\n  undefined *localCopy;\n  undefined localArray [8];\n  undefined8 param2Copy;\n  undefined8 param3Copy;\n  undefined8 param4Copy;\n  undefined8 param5Copy;\n  undefined8 param6Copy;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (in_AL != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localCopy = localArray;\n  copySize = 0x30;\n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  param5Copy = param5;\n  param6Copy = param6;\n  report(param1,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "print_contents",
                "replace_members.cold",
                "extract_file.cold",
                "main"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetId = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_last_path_component_00105830",
                "param_1": "path",
                "param_2": "fileInfo",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "__s": "pathPtr",
                "uVar3": "maxLength",
                "pcVar4": "destination",
                "bVar5": "increment",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractLastPathComponent_00105830(char *path,long fileInfo,undefined8 unknown1,undefined8 unknown2)\n\n{\n  long lVar1;\n  size_t sVar2;\n  char *pathPtr;\n  ulong maxLength;\n  char *destination;\n  byte increment;\n  undefined result [16];\n  \n  increment = 0;\n  if (full_pathname == '\\0') {\n    pathPtr = (char *)lbasename();\n    path = pathPtr;\n    if ((ar_truncate != '\\0') && (fileInfo != 0)) {\n      sVar2 = strlen(pathPtr);\n      maxLength = (ulong)*(byte *)(*(long *)(fileInfo + 8) + 0x1e);\n      if (maxLength < sVar2) {\n        path = (char *)xmalloc(maxLength + 1);\n        lVar1 = *(long *)(fileInfo + 8);\n        destination = path;\n        for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n          *destination = *pathPtr;\n          pathPtr = pathPtr + (ulong)increment * -2 + 1;\n          destination = destination + (ulong)increment * -2 + 1;\n        }\n        path[*(byte *)(lVar1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unknown2;\n  result._0_8_ = path;\n  return result;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "replace_members.cold",
                "map_over_members",
                "main"
            ],
            "imported": false,
            "current_name": "extract_last_path_component_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorType",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "extraMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorType)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 extraMessage;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorType,errorMessage,extraMessage);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,extraMessage);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr.cold",
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_output_to_file_00102e57",
                "pFVar1": "outputFile",
                "output_filename": "filename"
            },
            "code": "\nvoid writeOutputToFile_00102e57(void)\n\n{\n  FILE *outputFile;\n  \n  filename = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",filename);\n  }\n  outputFile = fopen(filename,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_output_to_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archives_and_update_00105af0",
                "param_1": "archive_list",
                "param_2": "archive",
                "param_3": "append_constprop_flag",
                "param_4": "check_format_flag",
                "cVar1": "is_bfd_valid",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong extract_archives_and_update_00105af0(long *archive_list,long archive,char append_constprop_flag,char check_format_flag)\n\n{\n  char is_bfd_valid;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (check_format_flag == '\\0') {\n    if (append_constprop_flag != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  else {\n    is_bfd_valid = bfd_check_format(archive,2);\n    if (is_bfd_valid != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive,archived_file)) {\n        result = extract_archives_and_update_00105af0(archive_list,archived_file,append_constprop_flag,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          archive_list = (long *)(*archive_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (append_constprop_flag != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  *(long *)(archive + 0xf0) = *archive_list;\n  *archive_list = archive;\n  return 1;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file",
                "do_ar_emul_append.constprop.0",
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "ar_emul_default_append",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "extract_archives_and_update_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "replace_members.cold",
                "get_file_size",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_value_00102ba1",
                "unaff_RBP": "pointer_to_free",
                "unaff_retaddr": "return_address",
                "auVar1": "result"
            },
            "code": "\nundefined  [16] free_and_return_value_00102ba1(void)\n\n{\n  undefined result [16];\n  void *pointer_to_free;\n  ulong return_address;\n  \n  free(pointer_to_free);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "free_and_return_value_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "errorCode",
                "cVar2": "archiveStatus",
                "iVar3": "renameStatus",
                "__format": "timeFormat",
                "uVar4": "filePermission",
                "unaff_RBX": "fileData",
                "unaff_RBP": "fileStream",
                "unaff_R12": "timeData",
                "unaff_R13": "memoryData",
                "unaff_R14D": "duplicateHandle",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "isExecutable",
                "cStack0000000000000017": "isWritable",
                "in_stack_00000018": "isReadable",
                "cStack0000000000000019": "isOwnerExecutable",
                "cStack000000000000001a": "isOwnerWritable",
                "cStack000000000000001b": "isOwnerReadable",
                "cStack000000000000001c": "isGroupExecutable",
                "cStack000000000000001d": "isGroupWritable",
                "cStack000000000000001e": "isGroupReadable",
                "uStack000000000000001f": "isOtherExecutable",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "inodeNumber",
                "in_stack_00000070": "deviceNumber",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte errorCode;\n  char archiveStatus;\n  int renameStatus;\n  char *timeFormat;\n  uint filePermission;\n  char **fileData;\n  FILE *fileStream;\n  long timeData;\n  void *memoryData;\n  int duplicateHandle;\n  undefined fileType;\n  char isExecutable;\n  char isWritable;\n  char isReadable;\n  char isOwnerExecutable;\n  char isOwnerWritable;\n  char isOwnerReadable;\n  char isGroupExecutable;\n  char isGroupWritable;\n  char isGroupReadable;\n  undefined isOtherExecutable;\n  uint fileMode;\n  uint inodeNumber;\n  uint deviceNumber;\n  undefined8 fileSize;\n  \n  do {\n    errorCode = bfd_fatal();\n    *(uint *)((long)fileData + 0x44) = *(uint *)((long)fileData + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(timeData + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileData + 0x49) = errorCode | 0x10;\n    }\n    archiveStatus = bfd_set_archive_head();\n  } while (archiveStatus == '\\0');\n  dup(duplicateHandle);\n  archiveStatus = bfd_close();\n  if (archiveStatus != '\\0') {\n    output_bfd = 0;\n    output_filename = 0;\n    bfd_close();\n    renameStatus = smart_rename_constprop_0();\n    if (renameStatus == 0) {\n      free(memoryData);\n      free(fileStream);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  timeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeFormat);\n  filePermission = fileMode & 0xf000;\n  if (filePermission == 0x4000) {\n    fileType = 100;\n  }\n  else if (filePermission == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (filePermission == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (filePermission == 0x2000) {\n    fileType = 99;\n  }\n  else if (filePermission == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (filePermission != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  isExecutable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  isReadable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  isOwnerExecutable = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  isOwnerWritable = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  isOwnerReadable = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  isGroupExecutable = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  isGroupWritable = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  isGroupReadable = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (isReadable == 'x') {\n      isReadable = 's';\n    }\n    else {\n      isReadable = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (isOwnerReadable == 'x') {\n      isOwnerReadable = 's';\n    }\n    else {\n      isOwnerReadable = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (isGroupReadable == 'x') {\n      isGroupReadable = 't';\n    }\n    else {\n      isGroupReadable = 'T';\n    }\n  }\n  isOtherExecutable = 0;\n  fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)deviceNumber,fileSize,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileData,fileStream);\n  if ((char)timeData != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(fileStream,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(fileStream,\" 0x%lx\");\n    }\n  }\n  fputc(10,fileStream);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_fatal",
                "dup",
                "smart_rename.constprop.0",
                "bfd_close",
                "bfd_set_archive_head",
                "free",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "print_contents",
                "prompt",
                "FUN_00105a68",
                "yyerror.constprop.0",
                "print_version",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "exit": "terminateProgram"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 errorMessage)\n\n{\n  printFormatted(standardError,\"%s\\n\",errorMessage);\n                    \n  terminateProgram(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyensure_buffer_stack",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "replace_members.cold",
                "normalize",
                "main",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_file_00102c25",
                "param_7": "errorFlags",
                "unaff_RBX": "inputData",
                "iVar1": "filenameComparisonResult",
                "plVar8": "currentFile",
                "uVar5": "errorMessage",
                "param_12": "archiveFileSize",
                "output_file": "outputFile",
                "piVar3": "errnoLocation",
                "pcVar4": "outputFilename",
                "param_11": "filePermissions",
                "preserve_dates": "preserveDates"
            },
            "code": "\nlong * extractAndWriteArchiveFile_00102c25(void)\n\n{\n  int filenameComparisonResult;\n  int iVar2;\n  int *errnoLocation;\n  char *outputFilename;\n  undefined8 errorMessage;\n  long **pplVar6;\n  void *__ptr;\n  size_t __n;\n  long lVar7;\n  long **inputData;\n  long *currentFile;\n  undefined4 *puVar9;\n  ulong uVar10;\n  size_t sVar11;\n  undefined4 *errorFlags;\n  __mode_t filePermissions;\n  ulong archiveFileSize;\n  \n  puVar9 = errorFlags;\n  for (lVar7 = 0x24; lVar7 != 0; lVar7 = lVar7 + -1) {\n    *puVar9 = 0;\n    puVar9 = puVar9 + 1;\n  }\n  pplVar6 = (long **)inputData[0x1d];\n  if ((long **)inputData[0x1d] == (long **)0x0) {\n    pplVar6 = inputData;\n  }\n  iVar2 = (*(code *)pplVar6[1][0x3d])();\n  if (iVar2 != 0) {\n    currentFile = *inputData;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    iVar2 = fatal(errorMessage,currentFile);\n    errorMessage = posname;\n    if (iVar2 == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (filenameComparisonResult == 0) {\n          if (iVar2 != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek();\n  outputFile = (FILE *)0x0;\n  if (archiveFileSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*inputData);\n  }\n  else {\n    uVar10 = 0;\n    __ptr = (void *)xmalloc(0x2000);\n    do {\n      sVar11 = archiveFileSize - uVar10;\n      if (0x2000 < sVar11) {\n        sVar11 = 0x2000;\n      }\n      __n = bfd_bread(__ptr,sVar11);\n      if (sVar11 != __n) {\nLAB_00102c78:\n        inputData = (long **)*inputData[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorMessage,inputData);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*inputData);\n      }\n      sVar11 = fwrite(__ptr,1,__n,outputFile);\n      if (sVar11 != __n) {\n        errnoLocation = __errno_location();\n        outputFilename = strerror(*errnoLocation);\n        fatal(\"%s: %s\",outputFilename,outputFilename);\n        goto LAB_00102c78;\n      }\n      uVar10 = uVar10 + __n;\n    } while (uVar10 < archiveFileSize);\n    free(__ptr);\n  }\n  fclose(outputFile);\n  outputFilename = outputFilename;\n  outputFile = (FILE *)0x0;\n  chmod(outputFilename,filePermissions);\n  if (preserveDates != 0) {\n    set_times(outputFilename,errorFlags);\n  }\n  outputFilename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "open_output_file.isra.0",
                "strerror",
                "fclose",
                "set_times",
                "dcgettext",
                "bfd_bread",
                "chmod",
                "fwrite",
                "fatal",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_file_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_limited_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "destination",
                "uVar4": "limit",
                "unaff_RBX": "source",
                "unaff_RBP": "framePointer",
                "puVar5": "destinationPointer",
                "bVar6": "isReversed",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress",
                "lVar1": "ptrToLimit"
            },
            "code": "\nundefined  [16] copyStringLimited_00102bb0(void)\n\n{\n  long ptrToLimit;\n  char *inputString;\n  size_t inputLength;\n  undefined *destination;\n  ulong limit;\n  undefined *source;\n  long framePointer;\n  undefined *destinationPointer;\n  byte isReversed;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isReversed = 0;\n  inputLength = strlen(inputString);\n  limit = (ulong)*(byte *)(*(long *)(framePointer + 8) + 0x1e);\n  destination = source;\n  if (limit < inputLength) {\n    destination = (undefined *)xmalloc(limit + 1);\n    ptrToLimit = *(long *)(framePointer + 8);\n    destinationPointer = destination;\n    for (limit = (ulong)*(byte *)(ptrToLimit + 0x1e); limit != 0; limit = limit - 1) {\n      *destinationPointer = *source;\n      source = source + (ulong)isReversed * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)isReversed * -2 + 1;\n    }\n    destination[*(byte *)(ptrToLimit + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = destination;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "copy_string_limited_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "ar_open",
                "write_archive",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_list",
                "replace_members.cold",
                "map_over_members",
                "get_pos_bfd.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "simple_copy.constprop.0",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 101880,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}