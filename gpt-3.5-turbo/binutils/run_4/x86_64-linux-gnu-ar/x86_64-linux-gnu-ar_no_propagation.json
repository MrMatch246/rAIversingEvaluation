{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_element_00102cd9",
                "in_EAX": "condition",
                "unaff_RBX": "elements",
                "param_7": "filename"
            },
            "code": "\nlong * findMatchingElement_00102cd9(void)\n\n{\n  int condition;\n  int iVar1;\n  long *elements;\n  undefined8 filename;\n  \n  filename = DAT_0010d638;\n  if (condition == 3) {\n    for (; *elements != 0; elements = (long *)(*elements + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*elements != (undefined8 *)0x0; elements = (long *)(*elements + 0xf0)) {\n      iVar1 = filename_cmp(*(undefined8 *)*elements,filename);\n      if (iVar1 == 0) {\n        if (condition != 2) {\n          return elements;\n        }\n        return (long *)(*elements + 0xf0);\n      }\n    }\n  }\n  return elements;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_element_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105830",
                "FUN_00102e6f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "isVerbose",
                "param_4": "includeAddress",
                "iVar1": "returnCode",
                "ppcVar2": "ptrToFileInfo",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTimestamp",
                "uStack_f3": "permissionBits",
                "cStack_f2": "isReadable",
                "cStack_f1": "isWritable",
                "cStack_f0": "isExecutable",
                "cStack_ef": "isSetuid",
                "cStack_ee": "isSetgid",
                "cStack_ed": "isSticky",
                "cStack_ec": "otherReadable",
                "cStack_eb": "otherWritable",
                "cStack_ea": "otherExecutable",
                "local_e8": "formattedTime",
                "local_b8": "unknownData",
                "uStack_a0": "filePermission",
                "uStack_9c": "userId",
                "uStack_98": "groupId",
                "uStack_88": "fileSize",
                "local_60": "modificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char isVerbose,char includeAddress)\n\n{\n  int returnCode;\n  char **ptrToFileInfo;\n  char *timeString;\n  uint fileType;\n  time_t currentTimestamp;\n  undefined permissionBits;\n  char isReadable;\n  char isWritable;\n  char isExecutable;\n  char isSetuid;\n  char isSetgid;\n  char isSticky;\n  char otherReadable;\n  char otherWritable;\n  char otherExecutable;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined unknownData [24];\n  uint filePermission;\n  uint userId;\n  uint groupId;\n  undefined8 fileSize;\n  time_t modificationTime;\n  \n  if (isVerbose != '\\0') {\n    ptrToFileInfo = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      ptrToFileInfo = fileInfo;\n    }\n    returnCode = (**(code **)(ptrToFileInfo[1] + 0x1e8))(fileInfo,unknownData);\n    if (returnCode == 0) {\n      currentTimestamp = modificationTime;\n      timeString = ctime(&currentTimestamp);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = filePermission & 0xf000;\n      if (fileType == 0x4000) {\n        permissionBits = 100;\n      }\n      else if (fileType == 0xa000) {\n        permissionBits = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        permissionBits = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        permissionBits = 99;\n      }\n      else if (fileType == 0xc000) {\n        permissionBits = 0x73;\n      }\n      else {\n        permissionBits = 0x70;\n        if (fileType != 0x1000) {\n          permissionBits = 0x2d;\n        }\n      }\n      isReadable = (-((filePermission & 0x100) == 0) & 0xbbU) + 0x72;\n      isWritable = (-((filePermission & 0x80) == 0) & 0xb6U) + 0x77;\n      isExecutable = (-((filePermission & 0x40) == 0) & 0xb5U) + 0x78;\n      isSetuid = (-((filePermission & 0x20) == 0) & 0xbbU) + 0x72;\n      isSetgid = (-((filePermission & 0x10) == 0) & 0xb6U) + 0x77;\n      isSticky = (-((filePermission & 8) == 0) & 0xb5U) + 0x78;\n      otherReadable = (-((filePermission & 4) == 0) & 0xbbU) + 0x72;\n      otherWritable = (-((filePermission & 2) == 0) & 0xb6U) + 0x77;\n      otherExecutable = (-((filePermission & 1) == 0) & 0xb5U) + 0x78;\n      if ((filePermission & 0x800) != 0) {\n        if (isExecutable == 'x') {\n          isExecutable = 's';\n        }\n        else {\n          isExecutable = 'S';\n        }\n      }\n      if ((filePermission & 0x400) != 0) {\n        if (isSticky == 'x') {\n          isSticky = 's';\n        }\n        else {\n          isSticky = 'S';\n        }\n      }\n      if ((filePermission & 0x200) != 0) {\n        if (otherExecutable == 'x') {\n          otherExecutable = 't';\n        }\n        else {\n          otherExecutable = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&isReadable,(ulong)userId,(ulong)groupId,fileSize,\n              formattedTime,(ulong)filePermission);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (includeAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00102d8c",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "initialize_output_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "fileHandle",
                "sVar3": "directoryPathLength"
            },
            "code": "\nvoid initializeOutputFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *fileHandle;\n  size_t directoryPathLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directoryPathLength = strlen(DAT_0010d5e8);\n    if (directoryPathLength != 0) {\n      if (directoryPath[directoryPathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  fileHandle = fopen(DAT_0010d618,\"w\");\n  if (fileHandle != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00102e57",
                "concat",
                "strlen",
                "perror",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entries",
                "param_4": "result",
                "lVar1": "nextEntry",
                "uVar2": "entry",
                "bVar3": "entryFound",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "message",
                "plVar6": "nextEntry",
                "lVar7": "currentEntry",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archive,code *callback,undefined8 *entries,undefined8 result)\n\n{\n  long nextEntry;\n  undefined8 entry;\n  bool entryFound;\n  long *currentEntry;\n  int comparisonResult;\n  char *message;\n  long *nextEntry;\n  long currentEntry;\n  long *previousEntry;\n  \n  currentEntry = archive[0x1e];\n  if (entries == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*callback)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntry = (long *)archive[0x1e];\n      previousEntry = archive;\n      while (nextEntry = currentEntry, nextEntry != (long *)0x0) {\n        if (*nextEntry != 0) {\n          comparisonResult = filename_cmp(*entries);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callback)(nextEntry,previousEntry);\n          }\n        }\n        previousEntry = nextEntry;\n        currentEntry = (long *)nextEntry[0x1e];\n      }\n      if (!entryFound) {\n        entry = *entries;\n        message = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,message,entry);\n      }\n      entries = (undefined8 *)entries[1];\n    } while (entries != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_0010285f",
                "__format": "formatString",
                "iVar1": "comparisonResult",
                "lVar2": "entry",
                "plVar3": "currentEntry",
                "uVar4": "entryName",
                "plVar5": "nextEntry",
                "unaff_RBP": "printEntry",
                "unaff_R12": "context",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryList",
                "iStack000000000000000c": "entryCount"
            },
            "code": "\n\n\nvoid printMissingEntries_0010285f(void)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long entry;\n  long *currentEntry;\n  undefined8 entryName;\n  long *nextEntry;\n  code *printEntry;\n  long context;\n  int remainingEntries;\n  undefined8 *entryList;\n  int entryCount;\n  \ncode_r0x0010285f:\n  entryName = *entryList;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryList = entryList + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  nextEntry = *(long **)(context + 0xf0);\n  entryCount = 0;\n  do {\n    if (nextEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)nextEntry + 0xac) == 0) {\n      entry = *nextEntry;\n      if (entry == 0) {\n        currentEntry = (long *)nextEntry[0x1d];\n        if ((long *)nextEntry[0x1d] == (long *)0x0) {\n          currentEntry = nextEntry;\n        }\n        (**(code **)(currentEntry[1] + 0x1e8))(nextEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(context + 0x49) & 0x10) == 0) || (entry = FUN_00105830(), entry != 0))\n      {\n        entryName = FUN_00105830(*entryList);\n        comparisonResult = filename_cmp(entryName,entry);\n        if ((comparisonResult == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryCount = entryCount + 1,\n            entryCount == _DAT_0010d630)))) break;\n      }\n    }\n    nextEntry = (long *)nextEntry[0x1e];\n  } while( true );\n  (*printEntry)();\n  *(undefined4 *)((long)nextEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entries_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_details_00102f96",
                "uVar1": "errorCause",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorDetails_00102f96(void)\n\n{\n  undefined8 errorCause;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorCause = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorCause,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_details_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "outputToFile",
                "uVar1": "message",
                "pcVar2": "localizedMessage",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint outputToFile)\n\n{\n  undefined8 message;\n  char *localizedMessage;\n  FILE *outputStream;\n  \n  localizedMessage = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToFile != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedMessage,DAT_0010d660);\n  message = DAT_0010d660;\n  localizedMessage = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedMessage,message);\n  localizedMessage = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  FUN_0010336b(outputStream);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (outputToFile != 0) {\n    localizedMessage = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToFile ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010336b",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "optionFlag",
                "uVar1": "defaultUsage",
                "pcVar2": "message",
                "__stream": "outputFile"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint optionFlag)\n\n{\n  undefined8 defaultUsage;\n  char *message;\n  FILE *outputFile;\n  \n  defaultUsage = DAT_0010d660;\n  outputFile = _stderr;\n  if (optionFlag != 0) {\n    outputFile = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputFile,message,defaultUsage);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_0010266f(DAT_0010d660,outputFile);\n  if (optionFlag != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(optionFlag ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "initialize_function_00107920",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "param_8": "inputParam8",
                "param_9": "inputParam9",
                "param_10": "inputParam10",
                "param_11": "inputParam11",
                "param_12": "inputParam12",
                "param_13": "inputParam13",
                "param_14": "inputParam14",
                "in_AL": "inputFlag",
                "local_d8": "size",
                "local_d4": "localVariable1",
                "local_d0": "localArray",
                "local_c8": "localPointer",
                "local_b8": "localBuffer",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\nvoid initializeFunction_00107920(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4,\n                 undefined4 inputParam5,undefined4 inputParam6,undefined4 inputParam7,undefined4 inputParam8,\n                 undefined8 inputParam9,undefined8 inputParam10,undefined8 inputParam11,undefined8 inputParam12,\n                 undefined8 inputParam13,undefined8 inputParam14)\n\n{\n  char inputFlag;\n  undefined4 size;\n  undefined4 localVariable1;\n  undefined *localArray;\n  undefined *localPointer;\n  undefined localBuffer [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (inputFlag != '\\0') {\n    localParam1 = inputParam1;\n    localParam2 = inputParam2;\n    localParam3 = inputParam3;\n    localParam4 = inputParam4;\n    localParam5 = inputParam5;\n    localParam6 = inputParam6;\n    localParam7 = inputParam7;\n    localParam8 = inputParam8;\n  }\n  localArray = &stack0x00000008;\n  size = 8;\n  localPointer = localBuffer;\n  localVariable1 = 0x30;\n  localParam10 = inputParam10;\n  localParam11 = inputParam11;\n  localParam12 = inputParam12;\n  localParam13 = inputParam13;\n  localParam14 = inputParam14;\n  FUN_001078c0(inputParam9,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "initialize_function_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_status_00105bb0",
                "undefined8": "bool",
                "return": "result"
            },
            "code": "\nbool check_status_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_status_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_program_00107640"
            },
            "code": "\nundefined8 initializeProgram_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_program_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_and_write_file_from_binary_00102e6f",
                "pcVar1": "original_filepath",
                "in_RAX": "current_filepath",
                "uVar2": "base_filename",
                "uVar3": "error_message",
                "pFVar4": "file_pointer",
                "sVar5": "filepath_length",
                "pcVar6": "segment_filepath"
            },
            "code": "\nvoid extract_and_write_file_from_binary_00102e6f(void)\n\n{\n  char *original_filepath;\n  char *current_filepath;\n  undefined8 base_filename;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t filepath_length;\n  char *segment_filepath;\n  \n  original_filepath = DAT_0010d5e8;\n  do {\n    current_filepath = current_filepath + 1;\n    while (*current_filepath != '/') {\n      if (*current_filepath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (filepath_length = strlen(DAT_0010d5e8), filepath_length != 0)) {\n          if (original_filepath[filepath_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(original_filepath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(original_filepath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      segment_filepath = current_filepath;\n      if ((*current_filepath == '.') && (segment_filepath = current_filepath + 1, current_filepath[1] == '.')) {\n        segment_filepath = current_filepath + 2;\n        if ((current_filepath[2] == '/') || (current_filepath[2] == '\\0')) {\n          base_filename = lbasename();\n          original_filepath = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(error_message,original_filepath,base_filename);\n          DAT_0010d618 = (char *)base_filename;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (current_filepath = segment_filepath, *segment_filepath != '\\0' && (*segment_filepath != '/')); segment_filepath = segment_filepath + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00107920",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_and_write_file_from_binary_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_conditional_output_00107890",
                "param_1": "outputMessage",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printConditionalOutput_00107890(undefined8 outputMessage)\n\n{\n  FUN_001079c0(outputStream,outputMessage,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_conditional_output_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param_ptr_1",
                "param_2": "param_ptr_2",
                "param_3": "param_ptr_3",
                "param_4": "param_ptr_4",
                "pvVar1": "buffer",
                "pvVar2": "dynamic_mem",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 param_ptr_1,undefined8 param_ptr_2,undefined8 param_ptr_3,undefined8 param_ptr_4)\n\n{\n  void *buffer;\n  void *dynamic_mem;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamic_mem = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamic_mem;\n  } while (dynamic_mem == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param_ptr_1);\n  result._8_8_ = param_ptr_4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "copy_and_print_string_00103172",
                "param_1": "source_ptr",
                "param_2": "destination_ptr",
                "param_3": "should_print",
                "param_4": "additional_data",
                "uVar1": "source_value",
                "auVar2": "new_data"
            },
            "code": "\nundefined  [16]\ncopy_and_print_string_00103172(undefined8 *source_ptr,undefined8 *destination_ptr,char should_print,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined new_data [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*destination_ptr);\n  }\n  source_value = *source_ptr;\n  destination_ptr[0x1e] = source_value;\n  new_data._1_7_ = (undefined7)((ulong)source_value >> 8);\n  new_data[0] = 1;\n  *source_ptr = destination_ptr;\n  new_data._8_8_ = additional_data;\n  return new_data;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "copy_and_print_string_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_next_matching_entry_00105870",
                "param_1": "entryList",
                "param_2": "entryCount",
                "param_3": "requestedFilename",
                "iVar1": "filenameComparisonResult",
                "iVar3": "mode",
                "uVar2": "defaultFilename"
            },
            "code": "\nlong * findNextMatchingEntry_00105870(long *entryList,int entryCount,undefined8 requestedFilename)\n\n{\n  int filenameComparisonResult;\n  undefined8 defaultFilename;\n  int mode;\n  \n  defaultFilename = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFilename = requestedFilename;\n    mode = entryCount;\n  }\n  if (mode == 3) {\n    for (; *entryList != 0; entryList = (long *)(*entryList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryList != (undefined8 *)0x0; entryList = (long *)(*entryList + 0xf0)) {\n      filenameComparisonResult = filename_cmp(*(undefined8 *)*entryList,defaultFilename);\n      if (filenameComparisonResult == 0) {\n        if (mode != 2) {\n          return entryList;\n        }\n        return (long *)(*entryList + 0xf0);\n      }\n    }\n  }\n  return entryList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_next_matching_entry_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_data_001030ed",
                "puVar1": "pointer"
            },
            "code": "\nvoid initializeData_001030ed(void)\n\n{\n  undefined8 *pointer;\n  \n  pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)pointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "flags",
                "param_4": "fileSize",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "result",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 flags,undefined8 fileSize)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong result;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    result = 0;\n  }\n  else {\n    copyResult = FUN_00105c00(flags);\n    result = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  returnValue._8_8_ = fileSize;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_input_00107650",
                "param_1": "input",
                "lVar2": "result",
                "uVar1": "returnValue"
            },
            "code": "\nundefined8 checkAndProcessInput_00107650(undefined8 input)\n\n{\n  undefined8 returnValue;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    returnValue = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(input,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(result);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001052a0",
                "FUN_00105300",
                "xexit",
                "FUN_001058b0",
                "FUN_0010284b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_input_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_failure_00102f1e",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_path",
                "auVar3": "return_value",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] copy_file_failure_00102f1e(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(error_message);\n  unlink(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_failure_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_set_time_error_00102fd7",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSetTimeError_00102fd7(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_set_time_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00102cd9",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_001025a0",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_00102f1e",
                "FUN_0010285f",
                "FUN_001052a0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "initialize_data_00103ddc",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_00103ddc(undefined8 data)\n\n{\n  FUN_001079c0(DAT_0010d578,data,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "putc",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_001028ed",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyRightMsg"
            },
            "code": "\nvoid printInfo_001075e0(undefined8 version)\n\n{\n  char *copyRightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyRightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightMsg);\n  copyRightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "entryTable",
                "param_2": "processEntry",
                "param_3": "fileNames",
                "param_4": "numFiles",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "tmpEntry",
                "uVar4": "result",
                "plVar5": "entryList",
                "local_cc": "count",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long entryTable,code *processEntry,undefined8 *fileNames,int numFiles)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *tmpEntry;\n  undefined8 result;\n  long *entryList;\n  int count;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(entryTable + 0xf0);\n  if (numFiles == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*processEntry)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryList = *(long **)(entryTable + 0xf0);\n      count = 0;\n      for (; entryList != (long *)0x0; entryList = (long *)entryList[0x1e]) {\n        if (*(int *)((long)entryList + 0xac) == 0) {\n          currentEntry = *entryList;\n          if (currentEntry == 0) {\n            tmpEntry = (long *)entryList[0x1d];\n            if ((long *)entryList[0x1d] == (long *)0x0) {\n              tmpEntry = entryList;\n            }\n            (**(code **)(tmpEntry[1] + 0x1e8))(entryList,buffer);\n          }\n          else if (((*(byte *)(entryTable + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,entryTable), currentEntry != 0)) {\n            result = FUN_00105830(*fileNames,entryTable);\n            comparisonResult = filename_cmp(result,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*processEntry)();\n              *(undefined4 *)((long)entryList + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *fileNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,result);\nLAB_0010553e:\n      fileNames = fileNames + 1;\n      numFiles = numFiles + -1;\n    } while (numFiles != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "formatString",
                "uVar1": "updatedVar"
            },
            "code": "\nvoid printSyntaxErrorInArchiveScript_001031a5(void)\n\n{\n  uint updatedVar;\n  char *formatString;\n  \n  updatedVar = DAT_0010d554 + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)updatedVar);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_in_archive_script_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102ba1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_0010315d",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00105a68",
                "FUN_00102d2f",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_buffer_size",
                "puVar3": "buffer_ptr",
                "bVar4": "loop_increment"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_buffer_size;\n  undefined4 *buffer_ptr;\n  byte loop_increment;\n  \n  loop_increment = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_buffer_size = DAT_0010d580 + 8;\n    buffer_size = new_buffer_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_buffer_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)loop_increment * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "called": [
                "calloc",
                "realloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_bfd_data_00103a78",
                "param_1": "inputData",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "auxData",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errorCode",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalReadBytes",
                "unaff_R14": "archiveSize",
                "auStack_b8": "auxStack",
                "local_88": "expectedSize"
            },
            "code": "\n\n\nvoid extractBFDData_00103a78(undefined8 *inputData)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *auxData;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errorCode;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalReadBytes;\n  ulong archiveSize;\n  undefined auxStack [48];\n  ulong expectedSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  auxData = (undefined8 *)inputData[0x1d];\n  if ((undefined8 *)inputData[0x1d] == (undefined8 *)0x0) {\n    auxData = inputData;\n  }\n  result = (**(code **)(auxData[1] + 0x1e8))(inputData,auxStack);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputData);\n    }\n    totalReadBytes = 0;\n    bfd_seek(inputData,0,0);\n    goto LAB_00103afd;\n  }\n  inputData = (undefined8 *)*inputData;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    FUN_00107690(errorMessage,inputData);\n    expectedSize = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorCode = __errno_location();\n        errorString = strerror(*errorCode);\n        FUN_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalReadBytes = totalReadBytes + bytesWritten;\nLAB_00103afd:\n      if (expectedSize <= totalReadBytes) goto LAB_00103b91;\n      remainingBytes = expectedSize - totalReadBytes;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,inputData);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    inputData = *(undefined8 **)inputData[0x1d];\n    archiveSize = expectedSize;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_bread",
                "free",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "printf",
                "strerror",
                "dcgettext",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_bfd_data_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "parameters",
                "cVar1": "flag",
                "uVar2": "flags",
                "iVar3": "fileDescriptor",
                "uVar4": "param",
                "__format": "formatString",
                "__ptr": "duplicatePointer",
                "__stream": "file",
                "ppcVar5": "pointerPointer",
                "uStack0000000000000020": "stackVariable1",
                "in_stack_00000028": "stackVariable2",
                "in_stack_00000038": "stackVariable3",
                "local_3c": "array",
                "uStack_33": "uStack33",
                "cStack_32": "cStack32",
                "cStack_31": "cStack31"
            },
            "code": "\n\n\nvoid writeArchiveToFile_001058b0(undefined8 *parameters)\n\n{\n  char flag;\n  uint flags;\n  int fileDescriptor;\n  undefined8 param;\n  char *formatString;\n  void *duplicatePointer;\n  FILE *file;\n  char **pointerPointer;\n  uint stackVariable1;\n  uint stackVariable2;\n  undefined8 stackVariable3;\n  int array [2];\n  undefined uStack33;\n  char cStack32;\n  char cStack31;\n  \n  param = parameters[0x1e];\n  array[0] = -1;\n  duplicatePointer = (void *)xstrdup(*parameters);\n  file = (FILE *)FUN_001057a0(duplicatePointer,array);\n  fileDescriptor = array[0];\n  if (file != (FILE *)0x0) {\n    DAT_0010d618 = file;\n    pointerPointer = (char **)bfd_fdopenw(file,*(undefined8 *)parameters[1],array[0]);\n    if (pointerPointer != (char **)0x0) {\n      DAT_0010d5e0 = pointerPointer;\n      bfd_set_format(pointerPointer,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)pointerPointer + 0x49) & 0xfffffff7;\n      *(char *)((long)pointerPointer + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)pointerPointer + 0x44) = *(uint *)((long)pointerPointer + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)pointerPointer + 0x44) = *(uint *)((long)pointerPointer + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)pointerPointer + 0x49) = (byte)flags | 0x10;\n        }\n        flag = bfd_set_archive_head(pointerPointer,param);\n        if (flag != '\\0') break;\n        flags = FUN_00107c10(duplicatePointer);\nLAB_00102d37:\n        *(uint *)((long)pointerPointer + 0x44) = *(uint *)((long)pointerPointer + 0x44) | 0x100000;\n      }\n      fileDescriptor = dup(fileDescriptor);\n      flag = bfd_close(pointerPointer);\n      if (flag == '\\0') {\n        FUN_00107c10(duplicatePointer);\n        formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,formatString);\n        flags = stackVariable1 & 0xf000;\n        if (flags == 0x4000) {\n          uStack33 = 100;\n        }\n        else if (flags == 0xa000) {\n          uStack33 = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          uStack33 = 0x62;\n        }\n        else if (flags == 0x2000) {\n          uStack33 = 99;\n        }\n        else if (flags == 0xc000) {\n          uStack33 = 0x73;\n        }\n        else {\n          uStack33 = 0x70;\n          if (flags != 0x1000) {\n            uStack33 = 0x2d;\n          }\n        }\n        cStack32 = (-((_stackVariable1 & 0x100) == 0) & 0xbbU) + 0x72;\n        cStack31 = (-((_stackVariable1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file,\"%s %ld/%ld %6lu %s \",&cStack32,_stackVariable1 >> 0x20,\n                (ulong)stackVariable2,stackVariable3,&stack0xffffffffffffffd8,\n                _stackVariable1 & 0xffffffff);\n        fputs(*pointerPointer,file);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)pointerPointer + 0x49) & 0x10) == 0) {\n            if (pointerPointer[0xb] != (char *)0x0) {\n              fprintf(file,\" 0x%lx\");\n            }\n          }\n          else if (pointerPointer[0xc] != (char *)0x0) {\n            fprintf(file,\" 0x%lx\");\n          }\n        }\n        fputc(10,file);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(parameters);\n      fileDescriptor = FUN_00105bc0(file,duplicatePointer,fileDescriptor);\n      if (fileDescriptor == 0) {\n        free(duplicatePointer);\n        free(file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(fileDescriptor);\n    FUN_00107c10(duplicatePointer);\n  }\n  param = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(param);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_set_format",
                "close",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "FUN_001057a0",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "closeBfdCache",
                "fclose": "closeFile",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer"
            },
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00103ba8",
                "FUN_00102f96"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filename",
                "param_2": "metadata",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedError",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "statusChangeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filename,long metadata)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 localizedError;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 statusChangeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(metadata + 0x58);\n  uStack_24 = *(undefined4 *)(metadata + 0x5c);\n  uStack_20 = *(undefined4 *)(metadata + 0x60);\n  uStack_1c = *(undefined4 *)(metadata + 100);\n  accessTime = *(undefined4 *)(metadata + 0x48);\n  modificationTime = *(undefined4 *)(metadata + 0x4c);\n  statusChangeTime = *(undefined4 *)(metadata + 0x50);\n  creationTime = *(undefined4 *)(metadata + 0x54);\n  result = utimensat(-100,filename,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorString = strerror(*errnoPtr);\n    localizedError = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(localizedError,filename,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "outputPath",
                "pcVar1": "basePath",
                "pcVar2": "currentPath",
                "uVar3": "basenameResult",
                "uVar4": "errorMessage",
                "pFVar5": "filePtr",
                "sVar6": "baseLen"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *outputPath)\n\n{\n  char *basePath;\n  char *currentPath;\n  undefined8 basenameResult;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t baseLen;\n  \n  basePath = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    basenameResult = lbasename();\n    basePath = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorMessage,basePath,basenameResult);\n    DAT_0010d618 = (char *)basenameResult;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (baseLen = strlen(DAT_0010d5e8), baseLen != 0)) {\n        if (basePath[baseLen - 1] == '/') {\n          DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPath = outputPath;\n    if ((*outputPath == '.') && (currentPath = outputPath + 1, outputPath[1] == '.')) {\n      currentPath = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n    }\n    for (; outputPath = currentPath, *currentPath == '/'; currentPath = currentPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_and_set_errno_00102f55",
                "__errno_location": "get_errno_location",
                "piVar2": "errno_ptr",
                "iVar1": "saved_errno"
            },
            "code": "\nundefined8 close_and_set_errno_00102f55(void)\n\n{\n  int saved_errno;\n  int *errno_ptr;\n  int unaff_R12D;\n  \n  errno_ptr = __errno_location();\n  saved_errno = *errno_ptr;\n  close(unaff_R12D);\n  *errno_ptr = saved_errno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_path_and_create_temp_file_001057a0",
                "param_1": "input_path",
                "param_2": "output_fd",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "temp_fd",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "counter",
                "lVar5": "slash_offset",
                "pcVar6": "temp_path",
                "bVar7": "false",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] extract_file_path_and_create_temp_file_001057a0(char *input_path,int *output_fd,undefined8 unused1,undefined8 unused2)\n\n{\n  int temp_fd;\n  char *last_slash;\n  long path_length;\n  long counter;\n  long slash_offset;\n  char *temp_path;\n  byte false;\n  undefined result [16];\n  \n  false = 0;\n  last_slash = strrchr(input_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)input_path;\n    last_slash = (char *)xmalloc(slash_offset + 0xb);\n    path_length = slash_offset + 1;\n    temp_path = last_slash;\n    for (counter = slash_offset; counter != 0; counter = counter + -1) {\n      *temp_path = *input_path;\n      input_path = input_path + (ulong)false * -2 + 1;\n      temp_path = temp_path + (ulong)false * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  temp_fd = mkstemp(last_slash);\n  if (temp_fd == -1) {\n    temp_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *output_fd = temp_fd;\n    temp_path = last_slash;\n  }\n  result._8_8_ = unused2;\n  result._0_8_ = temp_path;\n  return result;\n}\n\n",
            "called": [
                "mkstemp",
                "strrchr",
                "xmalloc",
                "FUN_00102ba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_file_path_and_create_temp_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_and_print_file_info_00102d8c",
                "param_19": "filePermissions",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "filePointer",
                "unaff_R12B": "isFormatted",
                "uStack0000000000000015": "typeChar",
                "cStack0000000000000016": "permissionChar1",
                "cStack0000000000000017": "permissionChar2",
                "param_9": "permissionChar3",
                "cStack0000000000000019": "permissionChar4",
                "cStack000000000000001a": "permissionChar5",
                "cStack000000000000001b": "permissionChar6",
                "cStack000000000000001c": "permissionChar7",
                "cStack000000000000001d": "permissionChar8",
                "cStack000000000000001e": "permissionChar9",
                "uStack000000000000001f": "isExecutable",
                "uStack000000000000006c": "fileSize",
                "param_20": "paramSize",
                "param_22": "paramAddress",
                "__format": "corruptTimeMessage"
            },
            "code": "\nvoid formatAndPrintFileInfo_00102d8c(void)\n\n{\n  char *corruptTimeMessage;\n  uint uVar1;\n  char **fileContents;\n  FILE *filePointer;\n  char isFormatted;\n  undefined typeChar;\n  char permissionChar1;\n  char permissionChar2;\n  char permissionChar3;\n  char permissionChar4;\n  char permissionChar5;\n  char permissionChar6;\n  char permissionChar7;\n  char permissionChar8;\n  char permissionChar9;\n  undefined isExecutable;\n  uint filePermissions;\n  uint fileSize;\n  uint paramSize;\n  undefined8 paramAddress;\n  \n  corruptTimeMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corruptTimeMessage);\n  uVar1 = filePermissions & 0xf000;\n  if (uVar1 == 0x4000) {\n    typeChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    typeChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    typeChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    typeChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    typeChar = 0x73;\n  }\n  else {\n    typeChar = 0x70;\n    if (uVar1 != 0x1000) {\n      typeChar = 0x2d;\n    }\n  }\n  permissionChar1 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionChar2 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionChar3 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionChar4 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionChar5 = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionChar6 = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  permissionChar7 = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  permissionChar8 = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  permissionChar9 = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (permissionChar3 == 'x') {\n      permissionChar3 = 's';\n    }\n    else {\n      permissionChar3 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (permissionChar6 == 'x') {\n      permissionChar6 = 's';\n    }\n    else {\n      permissionChar6 = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (permissionChar9 == 'x') {\n      permissionChar9 = 't';\n    }\n    else {\n      permissionChar9 = 'T';\n    }\n  }\n  isExecutable = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize,\n          (ulong)paramSize,paramAddress,&stack0x00000020,(ulong)filePermissions);\n  fputs(*fileContents,filePointer);\n  if (isFormatted != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "sprintf",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "format_and_print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_001028ed",
                "FUN_00102fd7",
                "FUN_00102f55",
                "FUN_00105c00",
                "FUN_00102c25",
                "FUN_001031cf",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_and_convert_archived_files_00105300",
                "param_1": "filename",
                "param_2": "archived_files",
                "plVar1": "current_file",
                "pcVar2": "default_plugin",
                "bVar3": "is_thin_library",
                "cVar4": "format_check",
                "iVar5": "stat_result",
                "uVar6": "gettext_message",
                "uVar7": "gettext_domain",
                "piVar8": "errno_location",
                "lVar9": "archived_file",
                "puVar10": "plugin_result",
                "local_b0": "buffer",
                "local_a8": "file_stat"
            },
            "code": "\n\n\nundefined8 * extract_and_convert_archived_files_00105300(char *filename,undefined8 *archived_files)\n\n{\n  long *current_file;\n  char *default_plugin;\n  byte is_thin_library;\n  char format_check;\n  int stat_result;\n  undefined8 gettext_message;\n  undefined8 gettext_domain;\n  int *errno_location;\n  long archived_file;\n  undefined8 *plugin_result;\n  undefined8 buffer;\n  stat file_stat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  stat_result = stat(filename,&file_stat);\n  default_plugin = DAT_0010d618;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archived_files != (undefined8 *)0x0)) {\n      plugin_result = (undefined8 *)FUN_00102710();\n      return plugin_result;\n    }\n    archived_files = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archived_files != (undefined8 *)0x0) && (format_check = bfd_set_format(archived_files,2), format_check != '\\0')) &&\n       (format_check = bfd_close(archived_files), format_check != '\\0')) {\n      default_plugin = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(filename);\n  do {\n    is_thin_library = *(byte *)((long)archived_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        gettext_domain = *archived_files;\n        gettext_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(gettext_message,gettext_domain);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      gettext_domain = *archived_files;\n      gettext_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(gettext_message,gettext_domain);\nLAB_001027cb:\n      FUN_00107c20(filename);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(buffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      current_file = archived_files + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(archived_files,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archived_files,archived_file)) {\n        *current_file = archived_file;\n        current_file = (long *)(archived_file + 0xf0);\n      }\n      *current_file = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return archived_files;\n      }\n      do {\n        FUN_00107c10(filename);\nLAB_00102826:\n        gettext_domain = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(gettext_domain,filename);\n        default_plugin = filename;\nLAB_001053be:\n        DAT_0010d618 = default_plugin;\n        archived_files = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archived_files == (undefined8 *)0x0);\n      format_check = bfd_check_format_matches(archived_files,2,&buffer);\n      if (format_check == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(archived_files,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "FUN_00102710",
                "xexit",
                "bfd_close",
                "__errno_location",
                "bfd_openw",
                "bfd_openr",
                "bfd_set_error",
                "dcgettext",
                "stat",
                "fprintf",
                "FUN_0010315d",
                "FUN_00107c20",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00107920",
                "perror",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_convert_archived_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "extract_and_process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVariable",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "undefined4Variable1",
                "uVar7": "undefined4Variable2",
                "bVar8": "boolVariable1",
                "bVar9": "boolVariable2",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVariable2",
                "cVar14": "charVariable",
                "iVar15": "intVariable",
                "uVar16": "uintVariable1",
                "uVar17": "undefined4Variable",
                "uVar27": "undefined8Variable2",
                "pFVar18": "filePointer1",
                "sVar19": "size_tVariable1",
                "sVar20": "size_tVariable2",
                "__ptr": "bytePointer2",
                "plVar21": "longPointer2",
                "pFVar22": "filePointer2",
                "pcVar23": "charPointer2",
                "lVar24": "longVariable1",
                "uVar25": "ulongVariable1",
                "puVar26": "undefined8Pointer2",
                "pFVar28": "filePointer3",
                "pplVar29": "longPointerPointer",
                "uVar30": "undefined8Variable3",
                "local_130": "undefined8Variable4",
                "local_128": "filePointer4",
                "local_118": "bytePointer3",
                "local_110": "charPointerPointer2",
                "local_108": "size_tVariable3",
                "local_100": "longVariable2",
                "lVar34": "longVariable3",
                "local_b0": "uintVariable2"
            },
            "code": "\n\n\nvoid extractAndProcessFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVariable;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 undefined4Variable1;\n  undefined4 undefined4Variable2;\n  bool boolVariable1;\n  bool boolVariable2;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVariable2;\n  char charVariable;\n  int intVariable;\n  uint uintVariable1;\n  undefined4 undefined4Variable;\n  FILE *filePointer1;\n  size_t size_tVariable1;\n  size_t size_tVariable2;\n  byte *bytePointer2;\n  long *longPointer2;\n  FILE *filePointer2;\n  char *charPointer2;\n  long longVariable1;\n  ulong ulongVariable1;\n  undefined8 *undefined8Pointer2;\n  undefined8 undefined8Variable2;\n  FILE *filePointer3;\n  long **longPointerPointer;\n  undefined8 undefined8Variable3;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVariable3;\n  long longVariable3;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVariable8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 undefined8Variable4;\n  FILE *filePointer4;\n  byte *bytePointer3;\n  char **charPointerPointer2;\n  size_t size_tVariable3;\n  long longVariable2;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint uintVariable2;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPointerPointer2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePointer4 = (FILE *)0x0;\n  filePointer2 = argv;\n  do {\n    uintVariable1 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVariable1;\n    undefined8Variable4 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePointer2;\n    if (**(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)charPointerPointer2 - 1;\n      charPointerPointer2 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        longPointer2 = *(long **)filePointer2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPointer2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) + 1;\n      intVariable = stat(pcVar39,(stat *)local_c8);\n      if (-1 < intVariable) {\n        if ((uintVariable2 & 0xf000) == 0x4000) {\n          longPointer2 = *(long **)filePointer2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer1 = fopen(pcVar39,\"r\");\n        if (filePointer1 != (FILE *)0x0) {\n          intVariable = fseek(filePointer1,0,2);\n          if (((intVariable != -1) && (size_tVariable1 = ftell(filePointer1), size_tVariable1 != 0xffffffffffffffff)) &&\n             (intVariable = fseek(filePointer1,0,0), intVariable != -1)) {\n            bytePointer3 = (byte *)xmalloc(size_tVariable1 + 1);\n            size_tVariable2 = fread(bytePointer3,1,size_tVariable1,filePointer1);\n            if ((size_tVariable1 == size_tVariable2) || (intVariable = ferror(filePointer1), intVariable == 0)) {\n              bytePointer3[size_tVariable2] = 0;\n              byteVariable2 = *bytePointer3;\n              pbyteVariable3 = bytePointer3;\n              while( true ) {\n                if (byteVariable2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVariable2 * 2] & 0x40) == 0) break;\n                byteVariable2 = pbyteVariable3[1];\n                pbyteVariable3 = pbyteVariable3 + 1;\n              }\n              size_tVariable1 = strlen((char *)bytePointer3);\n              bytePointer2 = (byte *)xmalloc(size_tVariable1 + 1);\n              filePointer3 = (FILE *)0x0;\n              intVariable = 0;\n              boolVariable2 = false;\n              bVar47 = false;\n              boolVariable1 = false;\n              longVariable2 = 0;\n              pbyteVariable3 = bytePointer3;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVariable3 * 2] & 0x40) != 0) {\n                  pbyteVariable3 = pbyteVariable3 + 1;\n                }\n                if ((intVariable == 0) || (intVariable + -1 <= (int)longVariable2)) {\n                  if (filePointer3 == (FILE *)0x0) {\n                    intVariable = 8;\n                    filePointer3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVariable2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVariable = intVariable * 2;\n                    filePointer3 = (FILE *)xrealloc(filePointer3,(long)intVariable << 3);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVariable2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer3->_flags + longVariable2 * 8);\n                }\n                byteVariable2 = *pbyteVariable3;\n                pbyteVariable8 = bytePointer2;\n                while (byteVariable2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVariable2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVariable2 | boolVariable1 | bVar47))) {\n                      boolVariable1 = false;\n                      boolVariable2 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVariable1) break;\n                    pbyteVariable3 = pbyteVariable3 + 1;\n                    *pbyteVariable8 = byteVariable2;\n                    pbyteVariable8 = pbyteVariable8 + 1;\n                    boolVariable1 = false;\n                    byteVariable2 = *pbyteVariable3;\n                    if (byteVariable2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVariable2 == 0x5c) {\n                    boolVariable1 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVariable2 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVariable8 = byteVariable2;\n                      pbyteVariable8 = pbyteVariable8 + 1;\n                    }\n                  }\n                  else if (boolVariable2) {\n                    if (byteVariable2 != 0x22) goto LAB_001061f1;\n                    boolVariable2 = false;\n                  }\n                  else if (byteVariable2 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVariable2 != 0x22) goto LAB_001061f1;\n                    boolVariable2 = true;\n                  }\n                  bytePointer = pbyteVariable3 + 1;\n                  pbyteVariable3 = pbyteVariable3 + 1;\n                  byteVariable2 = *bytePointer;\n                }\nLAB_0010606f:\n                *pbyteVariable8 = 0;\n                longPointer2 = (long *)xstrdup(bytePointer2);\n                *ppcVar31 = (char *)longPointer2;\n                *(undefined8 *)(filePointer3->_shortbuf + longVariable2 * 8 + -0x7b) = 0;\n                byteVariable2 = *pbyteVariable3;\n                byteVariable = (&_sch_istable)[(ulong)byteVariable2 * 2];\n                while ((byteVariable & 0x40) != 0) {\n                  byteVariable2 = pbyteVariable3[1];\n                  pbyteVariable3 = pbyteVariable3 + 1;\n                  byteVariable = (&_sch_istable)[(ulong)byteVariable2 * 2];\n                }\n                longVariable2 = longVariable2 + 1;\n                if (byteVariable2 == 0) {\n                  free(bytePointer2);\n                  if (filePointer2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePointer3);\n          }\n          fclose(filePointer1);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVariable1 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVariable1 = (uint)unaff_R12;\n        intVariable = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVariable != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVariable1 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVariable1;\n        if ((char)uintVariable1 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intVariable = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVariable + 1;\n            *(code **)(undefinedPointer + (long)intVariable * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8Pointer2 = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer2 != (undefined8 *)0x0) {\n              *undefined8Pointer2 = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer2;\n              goto LAB_0010632b;\n            }\n          }\n          longVariable1 = 1;\n          do {\n            lVar35 = longVariable1;\n            intVariable = (int)pcVar46;\n            if (intVariable <= (int)lVar35) break;\n            charVariable = FUN_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            longVariable1 = lVar35 + 1;\n          } while (charVariable != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = intVariable - ((int)lVar35 + -1);\n          filePointer1 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVariable = getopt_long(filePointer1,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVariable != -1)\n            {\n              if (intVariable < 0x77) {\n                if (0x43 < intVariable) {\n                  switch(intVariable) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVariable1;\n                  }\n                }\n              }\n              else if (intVariable == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVariable1 = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVariable1);\n              }\n            }\n            while (longVariable1 = FUN_001052a0(pcVar39), longVariable1 < 1) {\n              uintVariable1 = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVariable1);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVariable = open(pcVar39,2,0);\n            if (intVariable < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(pcVar39);\nLAB_0010737f:\n              FUN_00107c10(pcVar39);\nLAB_00107387:\n              FUN_00107c20(pcVar39);\n              intVariable = bfd_get_error();\n              if (intVariable == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVariable = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVariable == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVariable = bfd_close(unaff_RBP);\n              if (charVariable != '\\0') {\n                uintVariable1 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Variable2 = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Variable2,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            size_tVariable1 = strlen(pcVar39);\n            if ((size_tVariable1 < 6) ||\n               (intVariable = filename_cmp(pcVar39 + (size_tVariable1 - 6),\"ranlib\"), intVariable != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer2 = (FILE *)unaff_RBP;\n          filePointer3 = filePointer1;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          undefined8Variable4 = (FILE *)CONCAT71(undefined8Variable4._1_7_,(char)uintVariable1);\nLAB_001063a3:\n          filePointer2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVariable1 = strlen(*(char **)((long)pcVar46 + 8));\n            intVariable = (int)size_tVariable1 + (int)filePointer1;\n            unaff_R12 = (FILE *)xmalloc((long)intVariable * 8);\n            undefined4Variable = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Variable;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePointer4 = (FILE *)((long)pcVar46 + 0x10);\n            charPointerPointer2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePointer3 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(bytePointer3);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(bytePointer3);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(bytePointer3);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVariable = *(char *)((long)ppcVar31 + 4);\n                    charPointerPointer2 = ppcVar32;\n                    if (charVariable != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVariable;\n                        charPointer2 = (char *)xstrdup(bytePointer3);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = charPointer2;\n                        charVariable = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        charPointerPointer2 = ppcVar32;\n                      } while (charVariable != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVariable1 = (long)(int)filePointer1;\n            intPointer = (int *)pcVar46 + longVariable1 * 2;\n            if (filePointer4 < intPointer) {\n              ulongVariable1 = longVariable1 * 8 - 0x11;\n              if ((ulongVariable1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Variable = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4Variable1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4Variable2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVariable1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Variable;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Variable1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Variable2;\n                undefined4Variable = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4Variable1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4Variable2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVariable1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Variable;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Variable1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Variable2;\n                if (ulongVariable1 != 2) {\n                  undefined4Variable = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4Variable1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4Variable2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Variable;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Variable1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Variable2;\n                  if (ulongVariable1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4Variable = *(undefined4 *)(pcVar39 + 4);\n                      undefined4Variable1 = *(undefined4 *)(pcVar39 + 8);\n                      undefined4Variable2 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Variable;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Variable1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Variable2;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVariable1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePointer4 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVariable1 + -2;\n            }\n            filePointer1 = (FILE *)(ulong)(intVariable - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVariable1 = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)filePointer1 & 0xffffffff,pcVar46,filePointer2,ppuVar36,0);\n            unaff_RBP = (char *)filePointer2;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer3 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)filePointer3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          filePointer2 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer1 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVariable1 = (int)filePointer1 - (_optind + -1);\n            filePointer1 = (FILE *)(ulong)uintVariable1;\n            _optind = 0;\n            if (1 < (int)uintVariable1) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)undefined8Variable4 & 0xff);\n          uintVariable1 = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer3 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Variable = FUN_00107650();\n                    \n                  xexit(undefined4Variable);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVariable = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVariable * 2 * 4) == (char *)0x0) {\n                    undefined8Variable2 = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Variable2);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVariable + 1);\n                  longVariable1 = strtol(*(char **)((long)ppuVar36 + (long)intVariable * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVariable1;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVariable1 = (long)(int)unaff_RBP;\n              filePointer2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + longVariable1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer2 = (FILE *)((long)ppuVar36 + (longVariable1 + 1) * 2 * 4);\n              if (*(FILE **)filePointer2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVariable1 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVariable1 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVariable1 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVariable1 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer1 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer1;\n                  filePointer1 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVariable1 * 2 * 4) + (long)filePointer1 * 2) !=\n                         0);\n              }\n              undefined8Pointer2 = (undefined8 *)FUN_00105300();\n              filePointer1 = filePointer2;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer2 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePointer2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8Pointer2,FUN_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVariable1 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(size_tVariable1 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer2);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVariable1 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVariable1 != 0) {\n                    charVariable = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVariable == '\\0') goto LAB_00106803;\n                    charVariable = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVariable == '\\0') goto LAB_00106803;\n                    filePointer3 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePointer3 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVariable = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVariable == '\\0') goto LAB_00106803;\n                    longVariable1 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVariable1 == 0) goto LAB_00106803;\n                    intVariable = (int)pcVar43;\n                    undefined8Variable4 = (FILE *)((long)(intVariable + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(undefined8Variable4,\"Cannot reset libdeps record type.\");\n                    if (intVariable == 0) {\n                      longVariable1 = 0;\n                    }\n                    else {\n                      undefined4Variable = *(undefined4 *)&filePointer2->field_0x4;\n                      *(int *)unaff_RBP = filePointer2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = undefined4Variable;\n                      longVariable1 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = undefined8Variable4[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer2->_flags;\n                        filePointer2 = (FILE *)((long)filePointer2 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVariable1) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVariable + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)undefined8Variable4) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer2 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)filePointer2;\n                if (filePointer2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePointer2;\n                if ((filePointer2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8Pointer2,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8Pointer2,FUN_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8Pointer2,FUN_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer1 = (FILE *)(undefined8Pointer2 + 0x1e);\n                do {\n                  unaff_R12 = filePointer1;\n                  if (*(FILE **)filePointer2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(undefined8Pointer2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer2 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePointer2;\n                    if (longPointer2 == (long *)0x0) {\n                      undefined8Variable2 = *undefined8Pointer2;\n                      undefined8Variable3 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(undefined8Variable3,pcVar46,undefined8Variable2);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVariable1 = *longPointer2;\n                    undefined8Variable2 = FUN_00105830(pcVar46,undefined8Pointer2);\n                    intVariable = filename_cmp(undefined8Variable2,longVariable1);\n                    if (intVariable == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer2[0x1e];\n                  longPointerPointer = (long **)FUN_00105870(filePointer1,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPointer = *longPointerPointer;\n                  *longPointerPointer = longPointer2;\n                  longPointer2[0x1e] = (long)longPointer;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer2);\n                  }\n                  filePointer2 = (FILE *)&filePointer2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVariable = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVariable);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Variable = bfd_get_error();\n        filePointer2 = (FILE *)bfd_errmsg(undefined4Variable);\n        undefined8Variable2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVariable = FUN_00107690(undefined8Variable2,\"x86_64-pc-linux-gnu\",filePointer2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          filePointer3 = (FILE *)pcVar46;\n          switch(intVariable) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVariable1 = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePointer2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePointer2;\nLAB_00106803:\n        undefined8Variable2 = dcgettext(0,pcVar39,5);\n        FUN_00107690(undefined8Variable2);\nLAB_00106814:\n        intVariable = (int)pcVar46;\n        filePointer3 = (FILE *)xmalloc(8);\n        *(long **)filePointer3 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVariable = 0;\n          }\n          else {\n            longVariable1 = 1;\n            do {\n              intVariable = (int)longVariable1;\n              lVar35 = longVariable1 * 2;\n              longVariable1 = longVariable1 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          filePointer2 = (FILE *)xmalloc((long)(intVariable + 1) << 3);\n          longPointer2 = *(long **)pcVar43;\n          longVariable1 = 0;\n          while (longPointer2 != (long *)0x0) {\n            undefined8Variable2 = xstrdup();\n            *(undefined8 *)((long)&filePointer2->_flags + longVariable1) = undefined8Variable2;\n            longPointer2 = *(long **)((char *)((long)pcVar43 + 0x83) + longVariable1 + -0x7b);\n            longVariable1 = longVariable1 + 8;\n          }\n          *(undefined8 *)((long)&filePointer2->_flags + longVariable1) = 0;\nLAB_0010610a:\n          intVariable = (int)pcVar46;\n          pcVar43 = (char *)filePointer2;\n          if (*(long **)filePointer3 == (long *)0x0) goto LAB_00106a80;\n          longVariable1 = 0;\n          do {\n            longVariable3 = longVariable1 + 1;\n            lVar35 = longVariable1 * 8;\n            longVariable1 = longVariable3;\n          } while (*(long *)(filePointer3->_shortbuf + lVar35 + -0x7b) != 0);\n          size_tVariable3 = longVariable3 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVariable3 = 0;\n          size_tVariable3 = 0;\n        }\n        longVariable1 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + longVariable3);\n        free(*(void **)((int *)pcVar43 + longVariable1));\n        filePointer2 = (FILE *)xrealloc(pcVar43,(longVariable3 + 1 + (long)intVariable) * 8);\n        uVar44 = intVariable + -1 + (int)longVariable3;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&filePointer2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePointer2->_IO_read_ptr + (long)undefined8Variable4),\n                (long)(int)(intVariable - uintVariable1) << 3);\n        memcpy((void *)((long)&undefined8Variable4->_flags + (long)&filePointer2->_flags),filePointer3,size_tVariable3);\n        free(filePointer3);\n        free(bytePointer3);\n        fclose(filePointer1);\n        uintVariable1 = (int)filePointer4 + 1;\n        unaff_R12 = undefined8Variable4;\n        pcVar43 = (char *)filePointer2;\n        undefined8Variable4 = filePointer3;\n        if ((int)uintVariable1 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVariable1 = uintVariable1 + 1;\n    filePointer4 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVariable1;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVariable = getopt_long((ulong)filePointer1 & 0xffffffff,pcVar46,filePointer2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePointer2;\n  if (intVariable == -1) goto LAB_00106680;\n  if ((0x14 < intVariable - 100U) || ((0x117201UL >> ((byte)(intVariable - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Variable2 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Variable2);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePointer1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVariable = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer2;\n  if (intVariable == 0) {\n    *(byte *)((long)undefined8Pointer2 + 0x49) = *(byte *)((long)undefined8Pointer2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer2 = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer2 == (undefined8 *)0x0) break;\n      undefined8Variable2 = *(undefined8 *)*longPointer2;\n      undefined8Variable3 = FUN_00105830(*(FILE **)unaff_RBP,undefined8Pointer2);\n      intVariable = filename_cmp(undefined8Variable3,undefined8Variable2);\n      if ((intVariable == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPointer2 = *(long *)(*longPointer2 + 0xf0);\n        filePointer1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer2;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer2 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePointer2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00105870",
                "fileno",
                "bfd_set_error_program_name",
                "FUN_0010342d",
                "textdomain",
                "filename_cmp",
                "bfd_check_format_matches",
                "memcpy",
                "strlen",
                "bfd_plugin_set_plugin",
                "FUN_001075e0",
                "FUN_00107c10",
                "FUN_00105300",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "bfd_close",
                "strtol",
                "isatty",
                "FUN_00107cc0",
                "FUN_00107730",
                "fread",
                "ferror",
                "bfd_set_error",
                "dcgettext",
                "fopen",
                "bindtextdomain",
                "FUN_00107c20",
                "free",
                "FUN_00105830",
                "FUN_00107650",
                "lbasename",
                "FUN_00103a78",
                "xstrdup",
                "FUN_00105480",
                "bfd_find_target",
                "FUN_0010394a",
                "open",
                "bfd_make_writable",
                "fseek",
                "fprintf",
                "stat",
                "FUN_001052a0",
                "xrealloc",
                "bfd_make_readable",
                "bfd_set_default_target",
                "FUN_00107740",
                "FUN_00107920",
                "getopt_long",
                "ftell",
                "printf",
                "FUN_00103e95",
                "FUN_00107890",
                "FUN_00107690",
                "fclose",
                "FUN_00103bd1",
                "bfd_set_format",
                "setlocale",
                "xexit",
                "xmalloc",
                "bfd_fdopenr",
                "FUN_00107640",
                "bfd_bwrite",
                "bfd_get_error",
                "FUN_001058b0",
                "bfd_init",
                "strcmp",
                "bfd_create",
                "bfd_plugin_set_program_name",
                "malloc",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "extract_and_process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formats",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "dataPointer"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formats)\n\n{\n  undefined8 dataPointer;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  dataPointer = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,dataPointer);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "fflush",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102d2f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_and_convert_archive_00102710",
                "plVar1": "current_file_ptr",
                "cVar2": "format_check_result",
                "bVar3": "is_thin",
                "iVar4": "error_code",
                "lVar5": "file_ptr",
                "uVar6": "err_msg",
                "uVar7": "library_name",
                "puVar8": "output_file_ptr",
                "unaff_RBP": "extra_param",
                "in_stack_00000008": "extra_param_2"
            },
            "code": "\n\n\nundefined8 * open_and_convert_archive_00102710(void)\n\n{\n  long *current_file_ptr;\n  char format_check_result;\n  byte is_thin;\n  int error_code;\n  long file_ptr;\n  undefined8 err_msg;\n  undefined8 library_name;\n  undefined8 *output_file_ptr;\n  undefined8 extra_param;\n  undefined8 extra_param_2;\n  \n  file_ptr = bfd_openr();\n  if (file_ptr != 0) {\n    format_check_result = bfd_check_format(file_ptr,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_ptr + 8);\n    }\n    bfd_close(file_ptr);\n  }\n  output_file_ptr = (undefined8 *)bfd_openw();\n  if (((output_file_ptr != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_file_ptr,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_file_ptr), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    is_thin = *(byte *)((long)output_file_ptr + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin != 0) {\n        library_name = *output_file_ptr;\n        err_msg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(err_msg,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin == 0) {\n      library_name = *output_file_ptr;\n      err_msg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(err_msg,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(extra_param_2);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      current_file_ptr = output_file_ptr + 0x1e;\n      for (file_ptr = bfd_openr_next_archived_file(output_file_ptr,0); file_ptr != 0;\n          file_ptr = bfd_openr_next_archived_file(output_file_ptr,file_ptr)) {\n        *current_file_ptr = file_ptr;\n        current_file_ptr = (long *)(file_ptr + 0xf0);\n      }\n      *current_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file_ptr;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = extra_param;\n        output_file_ptr = (undefined8 *)bfd_openr();\n      } while (output_file_ptr == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_file_ptr,2,&stack0x00000008);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_ptr = bfd_openr_next_archived_file(output_file_ptr,0), file_ptr == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_close",
                "bfd_check_format",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "open_and_convert_archive_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompile_and_improve_00103e95"
            },
            "code": "\n\n\nvoid decompile_and_improve_00103e95(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *plVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long lVar17;\n  long lVar18;\n  ulong uVar19;\n  uint uVar20;\n  long lVar21;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcVar27;\n  bool bVar28;\n  char **ppcVar29;\n  byte bVar30;\n  long lVar31;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  lVar18 = 0;\n  DAT_0010d550 = -2;\n  ppcVar29 = local_678;\n  local_800 = 0;\n  local_828 = local_740;\n  local_818 = 200;\n  local_820 = local_828;\n  local_810 = ppcVar29;\nLAB_00103ee9:\n  *local_828 = (char)lVar18;\n  if (local_820 + local_818 + -1 <= local_828) {\n    lVar21 = (long)local_828 - (long)local_820;\n    lVar17 = lVar21 + 1;\n    if (local_818 < 10000) {\n      lVar31 = local_818 * 2;\n      local_818 = 10000;\n      if (lVar31 < 0x2711) {\n        local_818 = lVar31;\n      }\n      pcVar10 = (char *)malloc(local_818 * 9 + 7);\n      if (pcVar10 != (char *)0x0) {\n        lVar31 = lVar17 * 8;\n        pcVar15 = local_820;\n        pcVar16 = pcVar10;\n        for (; lVar17 != 0; lVar17 = lVar17 + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pcVar10 + local_818);\n        ppcVar29 = ppcVar38;\n        for (; lVar31 != 0; lVar31 = lVar31 + -1) {\n          *(undefined *)ppcVar29 = *(undefined *)local_810;\n          local_810 = (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ppcVar29 = (char **)((long)ppcVar29 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 != local_740) {\n          free(local_820);\n        }\n        local_828 = pcVar10 + lVar21;\n        ppcVar29 = ppcVar38 + lVar21;\n        local_820 = pcVar10;\n        local_810 = ppcVar38;\n        if (pcVar10 + local_818 + -1 <= local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    pcVar10 = local_820;\n    if (local_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pcVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)lVar18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  cVar2 = (&DAT_0010a200)[iVar37];\n  if (cVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = FUN_001033d6(DAT_0010d590);\n          *puVar22 = uVar11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pbVar32 = DAT_0010d5b0;\n      pbVar35 = DAT_0010d5b0;\n      uVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      uVar26 = (ulong)local_7fc;\n      bVar28 = false;\n      do {\n        bVar30 = (&DAT_0010ab00)[*pbVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          bVar28 = true;\n          uVar26 = uVar19 & 0xffffffff;\n          local_7f8 = pbVar35;\n        }\n        while( true ) {\n          iVar8 = (int)uVar19;\n          lVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + (uint)bVar30);\n          if (iVar8 == *(short *)(&DAT_0010a440 + lVar18 * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)iVar8 * 2)) {\n            bVar30 = (&DAT_0010a7c0)[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 = pbVar35 + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + lVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      local_7fc = (uint)uVar26;\n      pbVar33 = pbVar32;\n      if (bVar28) {\n        DAT_0010d5b8 = local_7f8;\n        DAT_0010d5c0 = local_7fc;\n      }\nLAB_0010419f:\n      iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (iVar8 == 0) {\n        iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pbVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pbVar35 - (int)pbVar33;\n      DAT_0010d588 = *pbVar35;\n      DAT_0010d5b0 = pbVar35;\n      DAT_0010d5c8 = pbVar33;\n      *pbVar35 = 0;\nLAB_001041f0:\n      pbVar32 = DAT_0010d5c8;\n      lVar18 = DAT_0010d5a0;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      lVar18 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uVar20 = cVar2 + iVar37;\n    if ((0x22 < uVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uVar20])) goto LAB_001049db;\n    cVar2 = (&DAT_0010a060)[(int)uVar20];\n    lVar18 = (long)cVar2;\n    if (cVar2 < '\\x01') {\n      iVar37 = -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    ppcVar29 = ppcVar29 + 1;\n    *ppcVar29 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)lVar18];\n  if ((&DAT_0010a020)[(int)lVar18] == '\\0') {\n    if (local_800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[lVar18] != -0xe) &&\n             (uVar20 = (int)(char)(&DAT_0010a200)[lVar18] + 1, uVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uVar20] == '\\x01')) &&\n           (lVar18 = (long)(char)(&DAT_0010a060)[(int)uVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uVar20])) goto LAB_00105227;\n        if (local_820 == local_828) goto LAB_0010524c;\n        local_828 = local_828 + -1;\n        ppcVar29 = ppcVar29 + -1;\n        lVar18 = (long)*local_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  ppcVar27 = DAT_0010d558;\n  cVar2 = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)ppcVar29[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pcVar10 = (char *)dcgettext(0,pcVar10,5);\n      fprintf(_stderr,pcVar10,uVar11);\n      FUN_0010315d();\n    }\n    else {\n      for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n        for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; puVar23 != (undefined8 *)0x0;\n            puVar23 = (undefined8 *)puVar23[0x1e]) {\n          iVar8 = filename_cmp(*puVar23);\n          if (iVar8 == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pcVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0;\n          pcVar10 = *(char **)(pcVar10 + 0xf0)) {\n        iVar8 = filename_cmp();\n        if (iVar8 == 0) {\n          pcVar15 = (char *)bfd_openr(*puVar22,0);\n          uVar11 = DAT_0010d660;\n          if (pcVar15 == (char *)0x0) {\n            uVar6 = *puVar22;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uVar11,uVar6);\n            FUN_0010315d();\n          }\n          else {\n            *ppcVar27 = pcVar15;\n            bVar28 = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(pcVar10 + 0xf0);\n          }\n        }\n        else {\n          ppcVar27 = (char **)(pcVar10 + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        pcVar10 = (char *)bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,uVar6,uVar11);\n        uVar11 = DAT_0010d660;\n        if (pcVar10 == (char *)0x0) {\n          uVar6 = *puVar22;\n          pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pcVar10,uVar11,uVar6);\n          FUN_0010315d();\n        }\n        else {\n          *ppcVar27 = pcVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          puVar23 != (undefined8 *)0x0; puVar23 = (undefined8 *)puVar23[0x1e]) {\n        iVar8 = filename_cmp(*puVar23,*puVar22);\n        if (iVar8 == 0) {\n          bVar28 = true;\n          *ppcVar27 = (char *)puVar23[0x1e];\n        }\n        else {\n          ppcVar27 = (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 = (undefined8 *)*ppcVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      pcVar10 = (char *)bfd_openr(*puVar22,\"plugin\");\n      uVar11 = DAT_0010d660;\n      ppcVar27 = DAT_0010d558;\n      if (pcVar10 == (char *)0x0) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(pcVar10 + 0xf0) = DAT_0010d558[0x1f];\n        ppcVar27[0x1f] = pcVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pcVar10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,pcVar10);\n    for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0; pcVar10 = *(char **)(pcVar10 + 0xf0))\n    {\n      FUN_00103ddc(pcVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(ppcVar27);\n    pcVar10 = DAT_0010d570;\n    iVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((iVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(pcVar10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*ppcVar29,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*ppcVar29,1);\n    break;\n  case 0x20:\n    pcVar10 = *ppcVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    lVar18 = FUN_00105300(ppcVar29[-1],0);\n    if (lVar18 != 0) {\n      FUN_001032a8(lVar18,FUN_0010312d,pcVar10);\n    }\n    break;\n  case 0x21:\n    pcVar10 = *ppcVar29;\n    pcVar15 = ppcVar29[-1];\n    uVar11 = FUN_00105300(ppcVar29[-2],0);\n    if (pcVar10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pcVar10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(uVar11,FUN_00103ddc,pcVar15);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,pcVar10);\n    }\n    FUN_001032a8(uVar11,FUN_00103ddc,pcVar15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pcVar10 = ppcVar29[-2];\n    *ppcVar38 = *ppcVar29;\n    ppcVar38[1] = pcVar10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  lVar18 = (long)cVar2;\n  local_828 = local_828 + -lVar18;\n  ppcVar29[1 - lVar18] = (char *)ppcVar38;\n  ppcVar29 = ppcVar29 + (1 - lVar18);\n  uVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*local_828;\n  if ((uVar20 < 0x23) && (*local_828 == (&DAT_0010a0a0)[(int)uVar20])) {\n    lVar18 = (long)(char)(&DAT_0010a060)[(int)uVar20];\n  }\n  else {\n    lVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 = ((int)pbVar35 - (int)DAT_0010d5c8) + -1;\n  *pbVar35 = DAT_0010d588;\n  pplVar1 = (long **)(DAT_0010d5a8 + lVar18 * 8);\n  ppFVar3 = (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) = 1;\n    *ppFVar3 = DAT_0010d590;\n  }\n  pbVar7 = DAT_0010d5b0;\n  pFVar4 = ppFVar3[1];\n  auVar40._8_8_ = pFVar4;\n  auVar40._0_8_ = ppFVar3;\n  if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = FUN_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)pbVar7 - (long)pbVar32) - 1;\n      for (lVar18 = 0; (int)lVar18 < (int)uVar20; lVar18 = lVar18 + 1) {\n        *(byte *)(auVar40._8_8_ + lVar18) = pbVar32[lVar18];\n      }\n      plVar12 = *pplVar1;\n      if (*(int *)(plVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pFVar4 = DAT_0010d590;\n        if (uVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = FUN_001033d6(pFVar4);\n            *puVar22 = uVar11;\n          }\n          lVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            lVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          FUN_001031cf(lVar18);\n          FUN_001030ed();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          plVar5 = *pplVar1;\n          uVar24 = ~uVar20 + *(int *)(plVar12 + 3);\n          if (0 < (int)uVar24) break;\n          uVar24 = (int)DAT_0010d5b0 - (int)(void *)plVar5[1];\n          if (*(int *)(plVar5 + 4) == 0) {\n            plVar5[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          iVar9 = *(int *)(plVar5 + 3);\n          iVar25 = iVar9;\n          if (iVar9 < 1) {\n            iVar25 = iVar9 / 8;\n          }\n          *(int *)(plVar5 + 3) = iVar25 + iVar9;\n          pvVar14 = realloc((void *)plVar5[1],(long)(iVar25 + iVar9 + 2));\n          plVar5[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pvVar14 + (long)(int)uVar24);\n          plVar12 = *pplVar1;\n        }\n        if (0x2000 < (int)uVar24) {\n          uVar24 = 0x2000;\n        }\n        uVar26 = (ulong)uVar24;\n        if (*(int *)((long)plVar5 + 0x24) == 0) {\n          piVar34 = __errno_location();\n          uVar26 = (ulong)(int)uVar24;\n          uVar19 = (ulong)(int)uVar20;\n          *piVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        piVar34 = (int *)(long)(int)uVar20;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            uVar24 = uVar36;\n            if (iVar9 != 0) {\n              do {\n                pcVar10 = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *piVar34 = 0;\n                  clearerr((FILE *)pcVar10);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,uVar26,DAT_0010d590);\n                  pcVar10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sVar13;\n                  uVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), uVar24 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*piVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uVar24 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)piVar34) =\n               (char)iVar9;\n          piVar34 = (int *)((long)piVar34 + 1);\n        } while (uVar24 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uVar24;\n        uVar24 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uVar24 == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      lVar18 = *plVar12;\n      uVar20 = uVar20 + DAT_0010d598;\n      if (*(int *)(lVar18 + 0x18) < (int)uVar20) {\n        iVar25 = ((int)DAT_0010d598 >> 1) + uVar20;\n        pvVar14 = realloc(*(void **)(lVar18 + 8),(long)iVar25);\n        *(void **)(lVar18 + 8) = pvVar14;\n        auVar41._8_8_ = plVar12;\n        auVar41._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          auVar41 = FUN_001033b0();\n        }\n        plVar12 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = iVar25 + -2;\n      }\n      DAT_0010d598 = uVar20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uVar20) = 0;\n      pbVar32 = *(byte **)(*plVar12 + 8);\n      DAT_0010d5c8 = pbVar32;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pbVar35 = pbVar32 + iVar8;\n      DAT_0010d5b0 = pbVar35;\n      uVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pbVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pbVar35;\n    uVar19 = FUN_0010300e();\n    pbVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pbVar35 = pbVar32 + iVar8;\n  DAT_0010d5b0 = pbVar35;\n  uVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = pbVar35;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  uVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    iVar8 = (int)uVar26;\n    if (iVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2)) break;\n    uVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n  }\n  uVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 = pbVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2) == 0)\n     || (uVar20 == 0xb0)) goto LAB_0010419f;\n  pbVar35 = pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  iVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  pbVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcVar29 = ppcVar29 + 1;\n  local_800 = 3;\n  *ppcVar29 = DAT_0010d548;\nLAB_001049d1:\n  local_828 = local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "FUN_0010312d",
                "bfd_openw",
                "FUN_001031cf",
                "dup",
                "fprintf",
                "stat",
                "FUN_001033d6",
                "FUN_00107740",
                "filename_cmp",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_0010300e",
                "clearerr",
                "printf",
                "fclose",
                "FUN_00105300",
                "bfd_set_format",
                "bfd_close",
                "getc",
                "fwrite",
                "__errno_location",
                "fread",
                "bfd_openr",
                "ferror",
                "dcgettext",
                "FUN_001033b0",
                "fopen",
                "FUN_00103df9",
                "FUN_001030ed",
                "bfd_cache_close",
                "FUN_0010315d",
                "FUN_00105bc0",
                "FUN_00103c60",
                "free",
                "FUN_00103ddc",
                "xstrdup",
                "malloc",
                "FUN_001032a8",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "tempIndex",
                "lVar3": "loopIndex",
                "plVar4": "functionArray",
                "uVar5": "functionCount"
            },
            "code": "\nvoid executeReverseFunctions_00107cc0(void)\n\n{\n  long index;\n  long tempIndex;\n  long loopIndex;\n  long *functionArray;\n  uint functionCount;\n  \n  functionArray = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      functionCount = *(int *)(functionArray + 1) - 1;\n      if (-1 < (int)functionCount) {\n        index = (long)(int)functionCount;\n        functionCount = functionCount & 7;\n        (*(code *)functionArray[index + 2])();\n        tempIndex = index + -1;\n        if (-1 < (int)tempIndex) {\n          loopIndex = tempIndex;\n          if (functionCount != 0) {\n            if (functionCount != 1) {\n              if (functionCount != 2) {\n                if (functionCount != 3) {\n                  if (functionCount != 4) {\n                    if (functionCount != 5) {\n                      if (functionCount != 6) {\n                        (*(code *)functionArray[index + 1])();\n                        tempIndex = index + -2;\n                      }\n                      (*(code *)functionArray[tempIndex + 2])();\n                      tempIndex = tempIndex + -1;\n                    }\n                    (*(code *)functionArray[tempIndex + 2])();\n                    tempIndex = tempIndex + -1;\n                  }\n                  (*(code *)functionArray[tempIndex + 2])();\n                  tempIndex = tempIndex + -1;\n                }\n                (*(code *)functionArray[tempIndex + 2])();\n                tempIndex = tempIndex + -1;\n              }\n              (*(code *)functionArray[tempIndex + 2])();\n              tempIndex = tempIndex + -1;\n            }\n            (*(code *)functionArray[tempIndex + 2])();\n            loopIndex = tempIndex + -1;\n            if ((int)(tempIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionArray[loopIndex + 2])();\n            index = loopIndex + -1;\n            (*(code *)functionArray[loopIndex + 1])();\n            (*(code *)functionArray[loopIndex])();\n            (*(code *)functionArray[index])();\n            (*(code *)functionArray[loopIndex + -2])();\n            (*(code *)functionArray[loopIndex + -3])();\n            (*(code *)functionArray[loopIndex + -4])();\n            (*(code *)functionArray[loopIndex + -5])();\n            loopIndex = loopIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionArray = (long *)*functionArray;\n    } while (functionArray != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid executeFunction_00105ae0(undefined8 argument1,undefined8 argument2,undefined param3,undefined param4)\n\n{\n  FUN_00105af0(argument1,argument2,param3,param4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "execute_function_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "initialize_and_exit_00107690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "constant_0x30",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "var_1",
                "local_a8": "var_2",
                "local_a0": "var_3",
                "local_98": "var_4",
                "local_90": "var_5",
                "local_88": "input_1_new",
                "local_78": "input_2_new",
                "local_68": "input_3_new",
                "local_58": "input_4_new",
                "local_48": "input_5_new",
                "local_38": "input_6_new",
                "local_28": "input_7_new",
                "local_18": "input_8_new"
            },
            "code": "\nvoid initialize_and_exit_00107690(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant_0x30;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 var_1;\n  undefined8 var_2;\n  undefined8 var_3;\n  undefined8 var_4;\n  undefined8 var_5;\n  undefined4 input_1_new;\n  undefined4 input_2_new;\n  undefined4 input_3_new;\n  undefined4 input_4_new;\n  undefined4 input_5_new;\n  undefined4 input_6_new;\n  undefined4 input_7_new;\n  undefined4 input_8_new;\n  \n  if (flag != '\\0') {\n    input_1_new = input_1;\n    input_2_new = input_2;\n    input_3_new = input_3;\n    input_4_new = input_4;\n    input_5_new = input_5;\n    input_6_new = input_6;\n    input_7_new = input_7;\n    input_8_new = input_8;\n  }\n  pointer1 = &stack0x00000008;\n  size = 8;\n  pointer2 = buffer;\n  constant_0x30 = 0x30;\n  var_1 = input_10;\n  var_2 = input_11;\n  var_3 = input_12;\n  var_4 = input_13;\n  var_5 = input_14;\n  FUN_001078c0(param_9,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "get_basename_00105830",
                "param_1": "input_string",
                "param_2": "structure_address",
                "lVar1": "structure_base_pointer",
                "sVar2": "string_length",
                "uVar3": "byte_length",
                "__s": "basename",
                "pcVar4": "destination_string",
                "bVar5": "copy_direction",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] get_basename_00105830(char *input_string,long structure_address,undefined8 param_3,undefined8 param_4)\n\n{\n  long structure_base_pointer;\n  size_t string_length;\n  char *basename;\n  ulong byte_length;\n  char *destination_string;\n  byte copy_direction;\n  undefined result [16];\n  \n  copy_direction = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    basename = (char *)lbasename();\n    input_string = basename;\n    if ((DAT_0010d5fa != '\\0') && (structure_address != 0)) {\n      string_length = strlen(basename);\n      byte_length = (ulong)*(byte *)(*(long *)(structure_address + 8) + 0x1e);\n      if (byte_length < string_length) {\n        input_string = (char *)xmalloc(byte_length + 1);\n        structure_base_pointer = *(long *)(structure_address + 8);\n        destination_string = input_string;\n        for (byte_length = (ulong)*(byte *)(structure_base_pointer + 0x1e); byte_length != 0; byte_length = byte_length - 1) {\n          *destination_string = *basename;\n          basename = basename + (ulong)copy_direction * -2 + 1;\n          destination_string = destination_string + (ulong)copy_direction * -2 + 1;\n        }\n        input_string[*(byte *)(structure_base_pointer + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "get_basename_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_files_00107730",
                "unlink_if_ordinary": "removeOrdinaryFile"
            },
            "code": "\nvoid cleanupFiles_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_files_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_bfd_error_message_00107c20",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorMsg",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_00107c20(long errorMessage)\n\n{\n  int error;\n  undefined8 errorMsg;\n  undefined8 extraInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorMessage,errorMsg,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMsg,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "sourceFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errorValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errorLocation",
                "lVar5": "dataLocation"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *sourceFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errorValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errorLocation;\n  long dataLocation;\n  \n  errorLocation = __errno_location();\n  dataLocation = DAT_0010d5a8;\n  errorValue = *errorLocation;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = sourceFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(dataLocation + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (dataLocation != 0) {\n      if (filePtr == *(FILE ***)(dataLocation + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePtr = sourceFile;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = sourceFile;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (sourceFile != (FILE *)0x0) {\n    fileDescriptor = fileno(sourceFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTerminal;\n  *errorLocation = errorValue;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "__errno_location",
                "fileno",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long temp;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationPath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "sourceFilePosition",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFileDescriptor,char *destinationPath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t sourceFilePosition;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFilePosition = lseek(sourceFileDescriptor,0,0), sourceFilePosition == 0)) {\n    destinationFileDescriptor = open(destinationPath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = FUN_00102f55();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPointer = __errno_location();\n    bytesRead = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "write",
                "close",
                "open",
                "FUN_00102f55",
                "__errno_location",
                "lseek",
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_information_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong getFileInformation_001052a0(char *filePath)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_information_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "filePointer",
                "pcVar1": "optionString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *filePointer)\n\n{\n  char *optionString;\n  \n  optionString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(filePointer,optionString);\n  optionString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(filePointer,optionString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00103ba8",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "create_output_archive_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "flag",
                "cVar1": "checkFormatResult",
                "piVar2": "errnoLocationResult",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "programName",
                "plVar7": "archivedFilePtr"
            },
            "code": "\n\n\nvoid createOutputArchive_00103c60(char *inputArchivePath,int flag)\n\n{\n  char checkFormatResult;\n  int *errnoLocationResult;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 programName;\n  long *archivedFilePtr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errnoLocationResult = __errno_location();\n    inputArchivePath = strerror(*errnoLocationResult);\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkFormatResult = bfd_check_format(inputArchive,2);\n        if (checkFormatResult != '\\0') {\n          archivedFilePtr = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *archivedFilePtr = archivedFile;\n            archivedFilePtr = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,inputArchivePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "FUN_0010315d",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "bfd_openr",
                "strerror",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "fprintf",
                "FUN_001057a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_output_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "save_to_file_00102e57",
                "pFVar1": "filePtr"
            },
            "code": "\nvoid saveToFile_00102e57(void)\n\n{\n  FILE *filePtr;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePtr = fopen(DAT_0010d618,\"w\");\n  if (filePtr != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "save_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archives_00105af0",
                "param_1": "archive_list",
                "param_2": "archive_handle",
                "param_3": "check_format",
                "param_4": "process_archives",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "file_handle",
                "uVar4": "success"
            },
            "code": "\nulong extract_archives_00105af0(long *archive_list,long archive_handle,char check_format,char process_archives)\n\n{\n  char is_valid_format;\n  uint result;\n  long file_handle;\n  ulong success;\n  \n  if (process_archives == '\\0') {\n    if (check_format != '\\0') {\n      success = FUN_00102f08();\n      return success;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_handle,2);\n    if (is_valid_format != '\\0') {\n      success = 0;\n      for (file_handle = bfd_openr_next_archived_file(archive_handle,0); file_handle != 0;\n          file_handle = bfd_openr_next_archived_file(archive_handle,file_handle)) {\n        result = extract_archives_00105af0(archive_list,file_handle,check_format,1);\n        if ((char)result != '\\0') {\n          success = (ulong)result;\n          archive_list = (long *)(*archive_list + 0xf0);\n        }\n      }\n      return success;\n    }\n    if (check_format != '\\0') {\n      success = FUN_00102f08();\n      return success;\n    }\n  }\n  *(long *)(archive_handle + 0xf0) = *archive_list;\n  *archive_list = archive_handle;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_001028ed",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "extract_archives_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_value_0010300e",
                "bVar1": "foundMatchingValue",
                "iVar2": "index",
                "lVar3": "computedIndex",
                "bVar4": "tempValue",
                "pbVar5": "currentBytePointer",
                "in_R9": "matchingBytePointer",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingValue_0010300e(void)\n\n{\n  bool foundMatchingValue;\n  int index;\n  long computedIndex;\n  byte tempValue;\n  byte *currentBytePointer;\n  byte *matchingBytePointer;\n  int matchingIndex;\n  \n  foundMatchingValue = false;\n  index = DAT_0010d5d0;\n  for (currentBytePointer = DAT_0010d5c8; currentBytePointer < DAT_0010d5b0; currentBytePointer = currentBytePointer + 1) {\n    tempValue = 1;\n    if (*currentBytePointer != 0) {\n      tempValue = (&DAT_0010ab00)[*currentBytePointer];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)index * 2) != 0) {\n      foundMatchingValue = true;\n      matchingBytePointer = currentBytePointer;\n      matchingIndex = index;\n    }\n    while( true ) {\n      computedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)index * 2) + (uint)tempValue);\n      if (*(short *)(&DAT_0010a440 + computedIndex * 2) == index) break;\n      index = (int)*(short *)(&DAT_0010a800 + (long)index * 2);\n      if (0xb0 < index) {\n        tempValue = (&DAT_0010a7c0)[(int)(uint)tempValue];\n      }\n    }\n    index = (int)*(short *)(&DAT_0010a240 + computedIndex * 2);\n  }\n  if (foundMatchingValue) {\n    DAT_0010d5b8 = matchingBytePointer;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_value_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_memory_and_return_zero_00102ba1",
                "unaff_RBP": "pointerToFreeMemory",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] freeMemoryAndReturnZero_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *pointerToFreeMemory;\n  ulong returnAddress;\n  \n  free(pointerToFreeMemory);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_memory_and_return_zero_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_store_files_00107740",
                "param_1": "fileList",
                "iVar1": "cmpResult",
                "iVar2": "statResult",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "archiveList",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "offset",
                "plVar8": "currentFile",
                "puVar9": "localBuffer",
                "uVar10": "bytesWritten",
                "sVar11": "bufferSize",
                "local_c8": "localBufferArray",
                "_Stack_b0": "filePermission",
                "uStack_98": "totalFileSize",
                "uStack_80": "reversedFilePointer",
                "uStack_70": "reversedFilePointer2"
            },
            "code": "\n\n\nlong * extractAndStoreFiles_00107740(long **fileList)\n\n{\n  int cmpResult;\n  int statResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long **archiveList;\n  void *buffer;\n  size_t bytesRead;\n  long offset;\n  long *currentFile;\n  undefined4 *localBuffer;\n  ulong bytesWritten;\n  size_t bufferSize;\n  undefined4 localBufferArray [6];\n  __mode_t filePermission;\n  ulong totalFileSize;\n  undefined8 reversedFilePointer;\n  undefined8 reversedFilePointer2;\n  \n  if (_DAT_0010d600 != 0) {\n    localBuffer = localBufferArray;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *localBuffer = 0;\n      localBuffer = localBuffer + 1;\n    }\n  }\n  archiveList = (long **)fileList[0x1d];\n  if ((long **)fileList[0x1d] == (long **)0x0) {\n    archiveList = fileList;\n  }\n  statResult = (*(code *)archiveList[1][0x3d])(fileList,localBufferArray);\n  if (statResult != 0) {\n    currentFile = *fileList;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    statResult = FUN_00107690(errorMessage,currentFile);\n    errorMessage = DAT_0010d638;\n    if (statResult == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        cmpResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (cmpResult == 0) {\n          if (statResult != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(fileList,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (totalFileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*fileList);\n  }\n  else {\n    bytesWritten = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bufferSize = totalFileSize - bytesWritten;\n      if (0x2000 < bufferSize) {\n        bufferSize = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bufferSize,fileList);\n      if (bufferSize != bytesRead) {\nLAB_00102c78:\n        fileList = (long **)*fileList[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,fileList);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*fileList);\n      }\n      bufferSize = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bufferSize != bytesRead) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesWritten = bytesWritten + bytesRead;\n    } while (bytesWritten < totalFileSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermission);\n  if (_DAT_0010d600 != 0) {\n    reversedFilePointer = reversedFilePointer2;\n    FUN_00107c80(errorString,localBufferArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_store_files_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "filePermission",
                "unaff_R13": "fileData",
                "unaff_R14D": "dupFileDescriptor",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "readPermissionChar",
                "cStack0000000000000017": "writePermissionChar",
                "in_stack_00000018": "executePermissionChar",
                "cStack0000000000000019": "fileTypeChar2",
                "cStack000000000000001a": "readPermissionChar2",
                "cStack000000000000001b": "writePermissionChar2",
                "cStack000000000000001c": "fileTypeChar3",
                "cStack000000000000001d": "readPermissionChar3",
                "cStack000000000000001e": "executePermissionChar2",
                "uStack000000000000001f": "flag",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileOwnerID",
                "in_stack_00000070": "fileGroupID",
                "in_stack_00000080": "fileSize",
                "uVar4": "fileType",
                "bVar1": "randomByte",
                "cVar2": "result",
                "iVar3": "returnValue",
                "__format": "timeData"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte randomByte;\n  char result;\n  int returnValue;\n  char *timeData;\n  uint fileType;\n  char **fileInfo;\n  FILE *outputFile;\n  long filePermission;\n  void *fileData;\n  int dupFileDescriptor;\n  undefined fileTypeChar;\n  char readPermissionChar;\n  char writePermissionChar;\n  char executePermissionChar;\n  char fileTypeChar2;\n  char readPermissionChar2;\n  char writePermissionChar2;\n  char fileTypeChar3;\n  char readPermissionChar3;\n  char executePermissionChar2;\n  undefined flag;\n  uint fileMode;\n  uint fileOwnerID;\n  uint fileGroupID;\n  undefined8 fileSize;\n  \n  do {\n    randomByte = FUN_00107c10();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(filePermission + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = randomByte | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  dup(dupFileDescriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    returnValue = FUN_00105bc0();\n    if (returnValue == 0) {\n      free(fileData);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeData);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  readPermissionChar = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermissionChar = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  executePermissionChar = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  fileTypeChar2 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  readPermissionChar2 = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  writePermissionChar2 = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  fileTypeChar3 = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  readPermissionChar3 = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  executePermissionChar2 = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (executePermissionChar == 'x') {\n      executePermissionChar = 's';\n    }\n    else {\n      executePermissionChar = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (writePermissionChar2 == 'x') {\n      writePermissionChar2 = 's';\n    }\n    else {\n      writePermissionChar2 = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (executePermissionChar2 == 'x') {\n      executePermissionChar2 = 't';\n    }\n    else {\n      executePermissionChar2 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileOwnerID,\n          (ulong)fileGroupID,fileSize,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)filePermission != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "bfd_set_archive_head",
                "xexit",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "dup",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "param_ptr1",
                "param_2": "param2",
                "uVar1": "undefined_var1",
                "bVar2": "byte_var2",
                "iVar3": "int_var3",
                "sVar4": "size_var4",
                "piVar5": "int_ptr5",
                "pcVar6": "char_var6",
                "pcVar7": "char_var7",
                "ppcVar8": "char_ptr_ptr8",
                "uVar9": "undefined_var9",
                "lVar10": "long_var10",
                "__s": "string1",
                "__s_00": "string2",
                "lVar11": "long_var11",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "unaff_RBX": "char_ptr1",
                "ppcVar14": "char_ptr_ptr14",
                "unaff_RBP": "char_ptr_ptr_unaff",
                "unaff_R12": "char_ptr_ptr_unaff2",
                "unaff_R13D": "uint_unaff_R13D",
                "ppcVar15": "char_ptr_ptr15",
                "unaff_R14": "long_unaff_R14",
                "bVar16": "bool_var16",
                "bVar17": "byte_var17",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "in_stack78",
                "in_stack_00000108": "in_stack108"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 param_ptr1,long param2)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_var4;\n  int *int_ptr5;\n  char *char_var6;\n  char *char_var7;\n  char **char_ptr_ptr8;\n  undefined8 undefined_var9;\n  long long_var10;\n  char *string1;\n  char *string2;\n  long long_var11;\n  undefined8 undefined_var12;\n  ulong ulong_var13;\n  char *char_ptr1;\n  char **char_ptr_ptr14;\n  char **char_ptr_ptr_unaff;\n  char **char_ptr_ptr_unaff2;\n  uint uint_unaff_R13D;\n  char **char_ptr_ptr15;\n  long long_unaff_R14;\n  bool bool_var16;\n  byte byte_var17;\n  char **param7;\n  undefined8 param9;\n  long in_stack78;\n  long in_stack108;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(char_ptr1,param2);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (uint_unaff_R13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*char_ptr_ptr_unaff2 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(undefined8 *)*char_ptr_ptr_unaff2,undefined_var12);\n      if (int_var3 == 0) break;\n      char_ptr_ptr_unaff2 = (char **)(*char_ptr_ptr_unaff2 + 0xf0);\n    }\n    if (uint_unaff_R13D != 2) goto LAB_0010571f;\n    char_ptr_ptr_unaff2 = (char **)(*char_ptr_ptr_unaff2 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(long_unaff_R14 + 0xf0);\n  if (*(long *)(long_unaff_R14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  char_ptr_ptr_unaff2 = (char **)(long_var11 + 0xf0);\n  char_ptr1 = *char_ptr_ptr_unaff;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_unaff_R13D = (uint)(DAT_0010d60c != 0);\n  param2 = bfd_openr(char_ptr1,DAT_0010d5f0);\n  if (param2 != 0) {\n    char_ptr_ptr_unaff = char_ptr_ptr_unaff + 1;\n    byte_var2 = FUN_00105af0(char_ptr_ptr_unaff2,param2,uint_unaff_R13D,undefined_var1);\n    param9._6_1_ = param9._6_1_ | byte_var2;\n    char_var6 = *char_ptr_ptr_unaff;\n    do {\n      if (char_var6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = FUN_001058b0();\n        return undefined_var12;\n      }\n      char_ptr_ptr14 = *(char ***)(long_unaff_R14 + 0xf0);\n      char_ptr_ptr_unaff2 = param7;\n      if (param9._7_1_ == '\\0') {\n        char_ptr_ptr15 = param7;\n        if (char_ptr_ptr14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string1 = (char *)lbasename(*char_ptr_ptr14);\n              char_var7 = string1;\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string1);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_unaff_R14 + 8) + 0x1e);\n                if (ulong_var13 < size_var4) {\n                  char_var7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_unaff_R14 + 8);\n                  char_var6 = char_var7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_var6 = *string1;\n                    string1 = string1 + (ulong)byte_var17 * -2 + 1;\n                    char_var6 = char_var6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_var7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_var6 = *char_ptr_ptr_unaff;\n                string1 = char_var7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_var6 = *char_ptr_ptr_unaff;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string2 = (char *)lbasename(char_var6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string2);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_unaff_R14 + 8) + 0x1e);\n                char_var6 = string2;\n                string1 = char_var7;\n                if (ulong_var13 < size_var4) {\n                  char_var6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_unaff_R14 + 8);\n                  char_var7 = char_var6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_var7 = *string2;\n                    string2 = string2 + (ulong)byte_var17 * -2 + 1;\n                    char_var7 = char_var7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_var6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(string2,char_var7);\n            }\n            else {\n              char_var6 = *char_ptr_ptr_unaff;\n              string1 = *char_ptr_ptr14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_var6,string1);\n            }\n            if ((int_var3 == 0) && (char_ptr_ptr14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*char_ptr_ptr_unaff,(stat *)&stack0x000000b0);\n                if (int_var3 != 0) {\n                  int_ptr5 = __errno_location();\n                  if (*int_ptr5 != 2) {\n                    FUN_00107c10(*char_ptr_ptr_unaff);\nLAB_00102b7e:\n                    char_var6 = *char_ptr_ptr14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined_var12,char_var6);\n                    free(char_ptr_ptr_unaff);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr8 = (char **)char_ptr_ptr14[0x1d];\n                if ((char **)char_ptr_ptr14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr8 = char_ptr_ptr14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr8[1] + 0x1e8))(char_ptr_ptr14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (in_stack108 <= in_stack78) goto LAB_0010577e;\n              }\n              undefined_var12 = FUN_00105870(param7,2,*char_ptr_ptr14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_var6 = *char_ptr_ptr_unaff;\n                bool_var16 = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_var6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  FUN_00107c10(char_var6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = FUN_00103172(undefined_var12,long_var10,bool_var16);\n              }\n              else {\n                undefined_var9 = FUN_00105830(*char_ptr_ptr_unaff);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = FUN_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_ptr_ptr15 = *(char **)(*char_ptr_ptr15 + 0xf0);\n                param9._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_ptr_ptr15 = char_ptr_ptr14 + 0x1e;\n            char_ptr_ptr14 = (char **)char_ptr_ptr14[0x1e];\n          } while (char_ptr_ptr14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(long_unaff_R14 + 0xf0);\n        if (*(long *)(long_unaff_R14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      char_ptr1 = *char_ptr_ptr_unaff;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = FUN_00105830(char_ptr1);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = FUN_00105ae0(char_ptr_ptr_unaff2,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      param9._6_1_ = byte_var2 | param9._6_1_;\nLAB_0010577e:\n      char_ptr_ptr_unaff = char_ptr_ptr_unaff + 1;\n      char_var6 = *char_ptr_ptr_unaff;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  char_ptr1 = *char_ptr_ptr_unaff;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "__errno_location",
                "bfd_openr",
                "xmalloc",
                "FUN_00102943",
                "FUN_00105870",
                "FUN_00103172",
                "dcgettext",
                "stat",
                "FUN_00105ae0",
                "FUN_001058b0",
                "filename_cmp",
                "FUN_001028ed",
                "FUN_00105830",
                "strlen",
                "lbasename",
                "FUN_00105af0",
                "FUN_00107c10",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errorLocationPtr",
                "uVar2": "errorMessage",
                "dcgettext": "obtainErrorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errorLocationPtr;\n  undefined8 errorMessage;\n  \n  errorLocationPtr = __errno_location();\n  if (*errorLocationPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*errorLocationPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_constant_one_0010284b"
            },
            "code": "\nundefined8 getConstantOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_constant_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "flags",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "iVar1": "filename_comparison_result",
                "iVar2": "stat_error",
                "piVar3": "errno_location",
                "pcVar4": "error_string",
                "uVar5": "gettext_string",
                "pplVar6": "archive_ptr",
                "__ptr": "buffer_ptr",
                "__n": "bytes_read",
                "lVar7": "loop_variable",
                "unaff_RBX": "input_ptr",
                "plVar8": "output_ptr",
                "puVar9": "param_7_ptr",
                "uVar10": "bytes_written",
                "sVar11": "bytes_to_write"
            },
            "code": "\n\n\nlong * extract_and_write_archive_00102c25(void)\n\n{\n  int filename_comparison_result;\n  int stat_error;\n  int *errno_location;\n  char *error_string;\n  undefined8 gettext_string;\n  long **archive_ptr;\n  void *buffer_ptr;\n  size_t bytes_read;\n  long loop_variable;\n  long **input_ptr;\n  long *output_ptr;\n  undefined4 *param_7_ptr;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *flags;\n  __mode_t file_permissions;\n  ulong archive_size;\n  \n  param_7_ptr = flags;\n  for (loop_variable = 0x24; loop_variable != 0; loop_variable = loop_variable + -1) {\n    *param_7_ptr = 0;\n    param_7_ptr = param_7_ptr + 1;\n  }\n  archive_ptr = (long **)input_ptr[0x1d];\n  if ((long **)input_ptr[0x1d] == (long **)0x0) {\n    archive_ptr = input_ptr;\n  }\n  stat_error = (*(code *)archive_ptr[1][0x3d])();\n  if (stat_error != 0) {\n    output_ptr = *input_ptr;\n    gettext_string = dcgettext(0,\"internal stat error on %s\",5);\n    stat_error = FUN_00107690(gettext_string,output_ptr);\n    gettext_string = DAT_0010d638;\n    if (stat_error == 3) {\n      for (; *output_ptr != 0; output_ptr = (long *)(*output_ptr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*output_ptr != (undefined8 *)0x0; output_ptr = (long *)(*output_ptr + 0xf0)) {\n        filename_comparison_result = filename_cmp(*(undefined8 *)*output_ptr,gettext_string);\n        if (filename_comparison_result == 0) {\n          if (stat_error != 2) {\n            return output_ptr;\n          }\n          return (long *)(*output_ptr + 0xf0);\n        }\n      }\n    }\n    return output_ptr;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*input_ptr);\n  }\n  else {\n    bytes_written = 0;\n    buffer_ptr = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = archive_size - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer_ptr,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        input_ptr = (long **)*input_ptr[0x1d];\n        gettext_string = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(gettext_string,input_ptr);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*input_ptr);\n      }\n      bytes_to_write = fwrite(buffer_ptr,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,error_string);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer_ptr);\n  }\n  fclose(DAT_0010d5d8);\n  error_string = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(error_string,flags);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "chmod",
                "FUN_00105a20",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "strerror",
                "dcgettext",
                "bfd_bread",
                "free",
                "FUN_00107c80",
                "fclose",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "outputBuffer",
                "uVar4": "maxLength",
                "unaff_RBX": "inputPointer",
                "unaff_RBP": "basePointer",
                "puVar5": "outputPointer",
                "bVar6": "byteValue",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *outputBuffer;\n  ulong maxLength;\n  undefined *inputPointer;\n  long basePointer;\n  undefined *outputPointer;\n  byte byteValue;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  byteValue = 0;\n  inputLength = strlen(inputString);\n  maxLength = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  outputBuffer = inputPointer;\n  if (maxLength < inputLength) {\n    outputBuffer = (undefined *)xmalloc(maxLength + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    outputPointer = outputBuffer;\n    for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *outputPointer = *inputPointer;\n      inputPointer = inputPointer + (ulong)byteValue * -2 + 1;\n      outputPointer = outputPointer + (ulong)byteValue * -2 + 1;\n    }\n    outputBuffer[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = outputBuffer;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_copy_data_00102f08",
                "unaff_RBX": "stringPtr",
                "unaff_R12": "dataPtr"
            },
            "code": "\nundefined8 printAndCopyData_00102f08(void)\n\n{\n  undefined8 *stringPtr;\n  undefined8 *dataPtr;\n  \n  printf(\"a - %s\\n\",*stringPtr);\n  stringPtr[0x1e] = *dataPtr;\n  *dataPtr = stringPtr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_copy_data_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "input",
                "param_2": "filenames",
                "param_3": "flag",
                "ppcVar1": "filePointer",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "errnoLocation",
                "pcVar7": "filename",
                "pcVar8": "basename",
                "uVar9": "result",
                "pcVar10": "currentFilename",
                "__s": "basenameTemp",
                "lVar11": "tempVar1",
                "lVar12": "tempVar2",
                "uVar13": "returnValue",
                "uVar14": "ulongVar",
                "ppcVar15": "currentFilePointer",
                "ppcVar16": "tempFilePointer",
                "uVar17": "tempFlag",
                "ppcVar18": "prevFilePointer",
                "bVar19": "boolVar",
                "bVar20": "byteVar2",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "lStackVar",
                "sStack_c8": "statStruct"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long input,char **filenames,char flag)\n\n{\n  char **filePointer;\n  undefined undefinedVar;\n  byte byteVar;\n  int index;\n  size_t size;\n  int *errnoLocation;\n  char *filename;\n  char *basename;\n  undefined8 result;\n  char *currentFilename;\n  char *basenameTemp;\n  long tempVar1;\n  long tempVar2;\n  undefined8 returnValue;\n  ulong ulongVar;\n  char **currentFilePointer;\n  char **tempFilePointer;\n  uint tempFlag;\n  char **prevFilePointer;\n  bool boolVar;\n  byte byteVar2;\n  byte localFlag;\n  undefined stackArray [88];\n  long lStackVar;\n  stat statStruct;\n  \n  byteVar2 = 0;\n  filePointer = (char **)(input + 0xf0);\n  localFlag = 0;\n  if (filenames == (char **)0x0) {\n    returnValue = FUN_00102943();\n    return returnValue;\n  }\n  do {\n    currentFilename = *filenames;\njoined_r0x001055aa:\n    if (currentFilename == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = FUN_001058b0(input);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentFilePointer = *(char ***)(input + 0xf0);\n    tempFilePointer = filePointer;\n    if (flag != '\\0') {\nLAB_0010564c:\n      tempFlag = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      tempVar2 = *(long *)(input + 0xf0);\n      if (*(long *)(input + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        tempVar1 = tempVar2;\n        tempVar2 = *(long *)(tempVar1 + 0xf0);\n      } while (tempVar2 != 0);\n      tempFilePointer = (char **)(tempVar1 + 0xf0);\n      currentFilename = *filenames;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = FUN_00105830(currentFilename,input);\n          index = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (index == 0) {\n            byteVar = FUN_00105ae0(tempFilePointer,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localFlag = byteVar | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFilename = *filenames;\n        }\n        undefinedVar = DAT_0010d5f8;\n        boolVar = DAT_0010d60c != 0;\n        tempVar2 = bfd_openr(currentFilename,DAT_0010d5f0);\n        if (tempVar2 != 0) {\n          filenames = filenames + 1;\n          byteVar = FUN_00105af0(tempFilePointer,tempVar2,(uint)boolVar,undefinedVar);\n          localFlag = localFlag | byteVar;\n          currentFilename = *filenames;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(currentFilename,0);\n        tempFlag = (uint)boolVar;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (tempFlag == 3) {\n          tempVar2 = *(long *)(input + 0xf0);\n          if (*(long *)(input + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*tempFilePointer != (undefined8 *)0x0;\n              tempFilePointer = (char **)(*tempFilePointer + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*tempFilePointer,returnValue);\n            if (index == 0) {\n              if (tempFlag == 2) {\n                tempFilePointer = (char **)(*tempFilePointer + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilename = *filenames;\n      } while( true );\n    }\n    prevFilePointer = filePointer;\n    if (currentFilePointer == (char **)0x0) {\n      tempFlag = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFilename = (char *)lbasename(*currentFilePointer);\n      basename = currentFilename;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(currentFilename);\n        ulongVar = (ulong)*(byte *)(*(long *)(input + 8) + 0x1e);\n        if (ulongVar < size) {\n          basename = (char *)xmalloc(ulongVar + 1);\n          tempVar2 = *(long *)(input + 8);\n          filename = basename;\n          for (ulongVar = (ulong)*(byte *)(tempVar2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *filename = *currentFilename;\n            currentFilename = currentFilename + (ulong)byteVar2 * -2 + 1;\n            filename = filename + (ulong)byteVar2 * -2 + 1;\n          }\n          basename[*(byte *)(tempVar2 + 0x1e)] = '\\0';\n        }\n        filename = *filenames;\n        currentFilename = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      filename = *filenames;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basenameTemp = (char *)lbasename(filename);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(basenameTemp);\n        ulongVar = (ulong)*(byte *)(*(long *)(input + 8) + 0x1e);\n        filename = basenameTemp;\n        currentFilename = basename;\n        if (ulongVar < size) {\n          filename = (char *)xmalloc(ulongVar + 1);\n          tempVar2 = *(long *)(input + 8);\n          basename = filename;\n          for (ulongVar = (ulong)*(byte *)(tempVar2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *basename = *basenameTemp;\n            basenameTemp = basenameTemp + (ulong)byteVar2 * -2 + 1;\n            basename = basename + (ulong)byteVar2 * -2 + 1;\n          }\n          filename[*(byte *)(tempVar2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(basenameTemp,basename);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      prevFilePointer = currentFilePointer + 0x1e;\n      currentFilePointer = (char **)currentFilePointer[0x1e];\n      if (currentFilePointer == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    filename = *filenames;\n    currentFilename = *currentFilePointer;\nLAB_00102980:\n    index = filename_cmp(filename,currentFilename);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentFilePointer[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*filenames,&statStruct);\n      if (index != 0) {\n        errnoLocation = __errno_location();\n        if (*errnoLocation != 2) {\n          FUN_00107c10(*filenames);\nLAB_00102b7e:\n          currentFilename = *currentFilePointer;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(returnValue,currentFilename);\n          free(filenames);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      tempFilePointer = (char **)currentFilePointer[0x1d];\n      if ((char **)currentFilePointer[0x1d] == (char **)0x0) {\n        tempFilePointer = currentFilePointer;\n      }\n      index = (**(code **)(tempFilePointer[1] + 0x1e8))(currentFilePointer,stackArray);\n      if (index != 0) goto LAB_00102b7e;\n      if (statStruct.st_mtim.tv_sec <= lStackVar) goto LAB_0010577e;\n    }\n    returnValue = FUN_00105870(filePointer,2,*currentFilePointer);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFilename = *filenames;\n      boolVar = DAT_0010d60c != 0;\n      tempVar2 = bfd_openr(currentFilename,DAT_0010d5f0);\n      if (tempVar2 == 0) {\n        FUN_00107c10(currentFilename,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = FUN_00103172(returnValue,tempVar2,boolVar);\n    }\n    else {\n      result = FUN_00105830(*filenames,input);\n      index = filename_cmp(result,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = FUN_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar != 0) {\n      *prevFilePointer = *(char **)(*prevFilePointer + 0xf0);\n      localFlag = byteVar;\n    }\nLAB_0010577e:\n    filenames = filenames + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 77216,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}