{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_memory_00113dfe",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "lVar1": "memoryAddress"
            },
            "code": "\nvoid updateMemory_00113dfe(undefined4 dataAddress,undefined newValue)\n\n{\n  long memoryAddress;\n  \n  memoryAddress = FUN_00112904(3,dataAddress);\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "update_memory_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_data_0010ab4d",
                "param_1": "dataAddress",
                "param_2": "newData",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "structAddress",
                "lVar2": "structData",
                "auVar3": "result",
                "sVar4": "newDataLength",
                "pcVar5": "existingData",
                "sVar6": "existingDataLength",
                "auVar7": "updatedResult"
            },
            "code": "\nundefined  [16] updateData_0010ab4d(long dataAddress,char *newData,undefined8 param3,undefined8 param4)\n\n{\n  ulong structAddress;\n  long structData;\n  undefined result [16];\n  size_t newDataLength;\n  char *existingData;\n  size_t existingDataLength;\n  undefined updatedResult [16];\n  \n  structAddress = *(ulong *)(dataAddress + 0x60);\n  if ((structAddress != 0) && (*(long *)(structAddress + 0x20) != 0)) {\n    existingData = *(char **)(structAddress + 0x30);\n    newDataLength = strlen(newData);\n    if (existingData == (char *)0x0) {\n      existingData = (char *)xmalloc(newDataLength + 3);\n      *existingData = '\\0';\n    }\n    else {\n      existingDataLength = strlen(existingData);\n      existingData = (char *)xrealloc(existingData,newDataLength + 4 + existingDataLength);\n    }\n    newDataLength = strlen(existingData);\n    sprintf(existingData + newDataLength,\"%s::\",newData);\n    structData = *(long *)(dataAddress + 0x60);\n    *(char **)(structData + 0x30) = existingData;\n    updatedResult._1_7_ = (undefined7)((ulong)structData >> 8);\n    updatedResult[0] = 1;\n    updatedResult._8_8_ = param4;\n    return updatedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = structAddress;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "sprintf",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "extract_debug_info_0010c218",
                "param_1": "ptr_1",
                "param_2": "ptr_2",
                "param_3": "ptr_3",
                "uVar1": "localized_error",
                "lVar2": "debug_info_ptr",
                "pauVar3": "ptr_array",
                "lVar4": "current_file",
                "_stderr": "standard_error"
            },
            "code": "\n\n\nlong extract_debug_info_0010c218(long ptr_1,long ptr_2,long ptr_3)\n\n{\n  undefined8 localized_error;\n  long debug_info_ptr;\n  undefined (*ptr_array) [16];\n  long current_file;\n  \n  if ((ptr_2 != 0) && (ptr_3 != 0)) {\n    if ((*(long *)(ptr_1 + 8) == 0) || (*(long *)(ptr_1 + 0x10) == 0)) {\n      localized_error = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(standard_error,\"%s\\n\",localized_error);\n    }\n    else {\n      debug_info_ptr = FUN_00112904(0x16,0);\n      if (debug_info_ptr != 0) {\n        ptr_array = (undefined (*) [16])xmalloc(0x10);\n        current_file = *(long *)(ptr_1 + 0x10);\n        *ptr_array = ZEXT816(0);\n        *(long *)(*ptr_array + 8) = ptr_3;\n        *(undefined (**) [16])(debug_info_ptr + 0x10) = ptr_array;\n        current_file = FUN_00112925(current_file + 0x10,ptr_2,0,3);\n        if (current_file != 0) {\n          *(long *)(current_file + 0x20) = debug_info_ptr;\n          *(long *)*ptr_array = current_file;\n          return debug_info_ptr;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "extract_debug_info_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_001279e8 = FUN_00113f20();\n  DAT_001279e0 = FUN_00113f20();\n  DAT_001279d8 = FUN_00113f20();\n  DAT_001279d0 = FUN_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278c8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = FUN_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    FUN_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = FUN_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = FUN_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    FUN_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "textdomain",
                "dup",
                "bfd_set_error_program_name",
                "mkstemp",
                "bfd_scan_arch",
                "FUN_00108c86",
                "fclose",
                "bfd_set_default_target",
                "fread",
                "bfd_errmsg",
                "FUN_00114190",
                "fseek",
                "FUN_00108916",
                "free",
                "FUN_0011a390",
                "htab_create_alloc",
                "getopt_long",
                "bfd_get_error",
                "getc",
                "xmalloc_set_program_name",
                "FUN_00119dd0",
                "FUN_00114c80",
                "filename_cmp",
                "strtol",
                "strcasecmp",
                "htab_find_slot",
                "FUN_00114d60",
                "FUN_001054af",
                "setlocale",
                "xstrdup",
                "strncasecmp",
                "FUN_00113f50",
                "FUN_00108800",
                "FUN_00114c20",
                "strtoul",
                "memmove",
                "FUN_00113fb0",
                "free",
                "strcpy",
                "memcpy",
                "FUN_001126c0",
                "FUN_00119940",
                "xmalloc",
                "strncpy",
                "FUN_00108d9a",
                "fprintf",
                "FUN_00119ed0",
                "bindtextdomain",
                "unlink_if_ordinary",
                "FUN_00108a2a",
                "fopen",
                "FUN_00119970",
                "strchr",
                "FUN_0011a480",
                "FUN_00113fe0",
                "ftell",
                "FUN_00114460",
                "strcmp",
                "ferror",
                "FUN_00115970",
                "FUN_00114cf0",
                "bfd_init",
                "htab_elements",
                "strlen",
                "__errno_location",
                "malloc",
                "FUN_001199d0",
                "strerror",
                "xexit",
                "stat",
                "FUN_00114690",
                "FUN_00113f20",
                "xcalloc",
                "xrealloc",
                "FUN_00108898"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugger_0010be88",
                "param_1": "debuggerContext",
                "param_2": "currentBlock",
                "param_3": "unusedParameter",
                "param_4": "returnCode",
                "puVar1": "currentNode",
                "uVar2": "errorText",
                "puVar3": "newBlock",
                "puVar4": "nextNode",
                "lVar5": "blockAddress",
                "puVar6": "lastNode",
                "puVar7": "blockPointer",
                "bVar8": "isFirstNode",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugger_0010be88(long debuggerContext,undefined8 currentBlock,undefined8 unusedParameter,undefined8 returnCode)\n\n{\n  undefined8 *currentNode;\n  undefined8 errorText;\n  undefined4 *newBlock;\n  undefined8 *nextNode;\n  long blockAddress;\n  undefined8 *lastNode;\n  undefined4 *blockPointer;\n  byte isFirstNode;\n  undefined returnValue [16];\n  \n  isFirstNode = 0;\n  if ((*(long *)(debuggerContext + 8) == 0) || (*(long *)(debuggerContext + 0x20) == 0)) {\n    errorText = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",errorText);\n    errorText = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    blockPointer = newBlock;\n    for (blockAddress = 0xc; blockAddress != 0; blockAddress = blockAddress + -1) {\n      *blockPointer = 0;\n      blockPointer = blockPointer + (ulong)isFirstNode * -2 + 1;\n    }\n    blockAddress = *(long *)(debuggerContext + 0x20);\n    *(undefined8 *)(newBlock + 6) = currentBlock;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = blockAddress;\n    currentNode = *(undefined8 **)(blockAddress + 0x10);\n    lastNode = (undefined8 *)(blockAddress + 0x10);\n    while (nextNode = currentNode, nextNode != (undefined8 *)0x0) {\n      lastNode = nextNode;\n      currentNode = (undefined8 *)*nextNode;\n    }\n    *lastNode = newBlock;\n    errorText = 1;\n    *(undefined4 **)(debuggerContext + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = returnCode;\n  returnValue._0_8_ = errorText;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_block_debugger_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "functionContext",
                "param_2": "fieldName",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "cVar1": "flag",
                "iVar2": "size",
                "lVar3": "contextOffset",
                "__s": "formattedString",
                "sVar4": "contextSize",
                "sVar5": "fieldNameLength",
                "sVar6": "param3ValueLength",
                "__s_00": "newString",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *functionContext,char *fieldName,undefined8 param3Value,ulong param4Value,int param5Value)\n\n{\n  char flag;\n  int size;\n  long contextOffset;\n  char *formattedString;\n  size_t contextSize;\n  size_t fieldNameLength;\n  size_t param3ValueLength;\n  char *newString;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flag = *(char *)(functionContext[0xc] + 0x1c);\n  size = *(int *)(functionContext[0xc] + 0x18);\n  formattedString = (char *)FUN_00109b2f();\n  if (*(char **)(functionContext[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    contextSize = strlen(*(char **)(functionContext[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    param3ValueLength = strlen(formattedString);\n    newString = (char *)xmalloc(contextSize + 0x32 + fieldNameLength + param3ValueLength);\n    if (param5Value == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((param5Value != 2) && (flagString = \"\", param5Value != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((param4Value == 0) && (param4Value = (ulong)(uint)(size * 8), param4Value == 0)) {\n      returnValue = *(undefined8 *)*functionContext;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(newString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(functionContext[0xc] + 0x20),fieldName,flagString,formattedString,\n            param3Value,param4Value);\n    free(*(void **)(functionContext[0xc] + 0x20));\n    contextOffset = functionContext[0xc];\n    *(char **)(contextOffset + 0x20) = newString;\n    if (flag != '\\0') {\n      *(undefined *)(contextOffset + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)contextOffset >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "create_log_entry_0010aa53",
                "param_1": "binary",
                "param_2": "entry",
                "param_3": "flag",
                "param_4": "status",
                "cVar1": "flagValue",
                "__s": "message",
                "sVar5": "messageLength",
                "pcVar6": "newEntry",
                "cVar3": "statusValue",
                "lVar2": "binaryPtr",
                "uVar8": "result",
                "uVar9": "counter",
                "uVar10": "lastIndex",
                "uVar4": "index",
                "lVar7": "newPtr"
            },
            "code": "\nundefined8 createLogEntry_0010aa53(long binary,undefined8 entry,char flag,int status)\n\n{\n  char flagValue;\n  long binaryPtr;\n  char statusValue;\n  uint index;\n  char *message;\n  size_t messageLength;\n  char *newEntry;\n  long newPtr;\n  undefined8 result;\n  ulong counter;\n  ulong lastIndex;\n  \n  flagValue = *(char *)(*(long *)(binary + 0x60) + 0x1c);\n  message = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  newEntry = (char *)xmalloc(messageLength + 0x19);\n  *newEntry = flag + '0';\n  if (status == 1) {\n    statusValue = '1';\n  }\n  else {\n    statusValue = '0';\n    if ((status != 2) && (statusValue = '2', status != 0)) {\n                    \n      abort();\n    }\n  }\n  newEntry[1] = statusValue;\n  sprintf(newEntry + 2,\"%ld,%s;\",entry);\n  free(message);\n  binaryPtr = *(long *)(binary + 0x60);\n  result = 0;\n  if ((binaryPtr != 0) && (*(long *)(binaryPtr + 0x20) != 0)) {\n    binaryPtr = *(long *)(binaryPtr + 0x28);\n    lastIndex = 0;\n    if (binaryPtr != 0) {\n      index = 0;\n      do {\n        counter = (ulong)index;\n        lastIndex = (ulong)index;\n        index = index + 1;\n      } while (*(long *)(binaryPtr + counter * 8) != 0);\n    }\n    newPtr = xrealloc(binaryPtr,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(newPtr + lastIndex * 8) = newEntry;\n    *(undefined8 *)(newPtr + (ulong)((int)lastIndex + 1) * 8) = 0;\n    binaryPtr = *(long *)(binary + 0x60);\n    *(long *)(binaryPtr + 0x28) = newPtr;\n    if (flagValue != '\\0') {\n      *(undefined *)(binaryPtr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_log_entry_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_debug_info_0011173a",
                "param_1": "param1",
                "param_2": "debugData",
                "param_3": "opcode",
                "param_4": "operandType",
                "param_5": "operandValue",
                "param_6": "name",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptrData",
                "cVar3": "condition",
                "uVar4": "result",
                "iVar5": "index",
                "puVar6": "ptr8",
                "plVar7": "ptr64",
                "pcVar8": "ptrChar",
                "uVar9": "result",
                "lVar10": "local64_1",
                "lVar11": "local64_2",
                "lVar12": "local64_3",
                "pplVar13": "ptrPtr64_1",
                "uVar14": "ulong1",
                "uVar15": "ulong2",
                "pcVar16": "ptrChar_2",
                "uVar17": "uint1",
                "dVar19": "double1",
                "local_48": "localCharArr_1",
                "local_40": "localPtr64Arr_1"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parseDebugInfo_0011173a(undefined8 param1,long *debugData,int opcode,int operandType,ulong operandValue,\n                      char *name)\n\n{\n  char char1;\n  byte byte1;\n  void *ptrData;\n  char condition;\n  undefined result;\n  int index;\n  undefined8 *ptr8;\n  long *ptr64;\n  char *ptrChar;\n  undefined8 result;\n  long local64_1;\n  long local64_2;\n  long local64_3;\n  long **ptrPtr64_1;\n  ulong ulong1;\n  ulong ulong2;\n  char *ptrChar_2;\n  uint uint1;\n  long **pplVar18;\n  double double1;\n  char *localCharArr_1;\n  long **localPtr64Arr_1 [2];\n  \n  if (debugData[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debugData[5] == operandValue)) goto LAB_00111a06;\n    condition = FUN_0010bbd3(param1);\n    if (condition == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugData + 0x44) = 0;\n    *(undefined4 *)(debugData + 8) = 0;\n    debugData[9] = debugData[4];\n    if (*(char *)(debugData + 1) == '\\0') {\n      debugData[6] = debugData[5];\n    }\n    *(undefined4 *)(debugData + 0x10) = 1;\n    ptr8 = (undefined8 *)xmalloc(8);\n    debugData[0x11] = (long)ptr8;\n    *ptr8 = 0;\n    debugData[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    result = FUN_00108f08(param1,name);\n    return result;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      index = strcmp(name,\"gcc2_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(debugData + 8) = 2;\n        return 1;\n      }\n      index = strcmp(name,\"gcc_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(debugData + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugData + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debugData + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugData + 1) != '\\0') {\n            operandValue = operandValue + debugData[7];\n          }\n          condition = FUN_0010c1c6(param1,debugData);\n          if (condition != '\\0') {\n            condition = FUN_0010be1a(param1,operandValue);\n            if (condition != '\\0') {\n              *(undefined *)(debugData + 0xc) = 0;\n              debugData[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugData + 0xc) != '\\0') &&\n           ((operandValue < (ulong)debugData[0xd] || (debugData[0xd] == 0xffffffffffffffff)))) {\n          debugData[0xd] = operandValue;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debugData + 0xc) != '\\0') {\n          ulong1 = operandValue;\n          if (((*name != '\\0') && (ulong2 = debugData[0xd], ulong2 != 0xffffffffffffffff)) &&\n             (ulong1 = ulong2, operandValue < ulong2)) {\n            ulong1 = operandValue;\n          }\n          condition = FUN_0010c1c6(param1,debugData);\n          if (condition == '\\0') {\n            return 0;\n          }\n          condition = FUN_0010be1a(param1,ulong1);\n          if (condition == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugData + 0xc) = 0;\n          debugData[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptrData = (void *)debugData[4];\n        if (ptrData == (void *)0x0) {\n          local64_3 = xstrdup(name);\n          debugData[4] = local64_3;\n        }\n        else {\n          if (*name == '/') {\n            local64_3 = xstrdup(name);\n          }\n          else {\n            local64_3 = concat(ptrData,name,0);\n          }\n          debugData[4] = local64_3;\n          free(ptrData);\n        }\n        debugData[5] = operandValue;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          local64_3 = 0;\n          if (*(char *)(debugData + 0xc) != '\\0') {\n            local64_3 = debugData[7];\n          }\n          result = FUN_0010bf86(param1,(long)operandType,local64_3 + operandValue);\n          return result;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        ptr64 = (long *)xmalloc();\n        index = *(int *)(debugData + 0x10);\n        local64_1 = debugData[10];\n        local64_2 = debugData[0xb];\n        ptr64[5] = 0;\n        local64_3 = debugData[0x11];\n        *(int *)(ptr64 + 4) = index;\n        uint1 = index + 1;\n        *(uint *)(debugData + 0x10) = uint1;\n        *ptr64 = local64_2;\n        ptr64[1] = local64_1;\n        ptr64[2] = (long)name;\n        ptr64[3] = operandValue;\n        debugData[10] = (long)ptr64;\n        debugData[0xb] = (long)ptr64;\n        local64_3 = xrealloc(local64_3,(ulong)uint1 << 3);\n        uint1 = *(uint *)(ptr64 + 4);\n        debugData[0x11] = local64_3;\n        *(undefined8 *)(local64_3 + (ulong)uint1 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptrChar = strchr(name,0x3a);\n    if ((ptrChar != (char *)0x0) && ((ptrChar[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugData + 0xc) != '\\0') {\n        ulong1 = debugData[0xd];\n        ulong2 = operandValue;\n        if ((ulong1 != 0xffffffffffffffff) && (ulong2 = ulong1, operandValue < ulong1)) {\n          ulong2 = operandValue;\n        }\n        condition = FUN_0010c1c6(param1,debugData);\n        if (condition == '\\0') {\n          return 0;\n        }\n        condition = FUN_0010be1a(param1,ulong2);\n        if (condition == '\\0') {\n          return 0;\n        }\n        debugData[0xd] = -1;\n      }\n      if (*(char *)(debugData + 1) != '\\0') {\n        debugData[7] = operandValue;\n      }\n      *(undefined *)(debugData + 0xc) = 1;\n    }\n    localCharArr_1 = strchr(name,0x3a);\n    if (localCharArr_1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharArr_1[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      condition = name[1];\n      ptrChar_2 = \"eh_throw\";\n      if (condition != 'e') {\n        if (condition < 'f') {\n          if ((condition != 'X') && (condition != '_')) {\nLAB_00111d1a:\n            result = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(name,result);\n          }\n        }\n        else {\n          ptrChar_2 = \"this\";\n          if (condition == 't') goto LAB_00111d62;\n          if (condition != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptrChar_2 = (char *)0x0;\n      if ((name != localCharArr_1) && ((*name != ' ' || (localCharArr_1 != name + 1)))) {\n        ptrChar_2 = (char *)FUN_00109a0b(name,(int)localCharArr_1 - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte1 = localCharArr_1[1];\n    ptrChar = localCharArr_1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    ptrChar = localCharArr_1 + 2;\n    condition = localCharArr_1[1];\n    switch(condition) {\n    case 'C':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      ptrChar = \"debug_record_label: not implemented\";\n      if (local64_3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      condition = FUN_0010bc80(param1,ptrChar_2,local64_3,condition == 'F',operandValue);\n      if (condition != '\\0') {\n        do {\n          if (*localCharArr_1 != ';') {\n            return 1;\n          }\n          localCharArr_1 = localCharArr_1 + 1;\n          local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n        } while (local64_3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      if (ptrChar_2 == (char *)0x0) goto LAB_0011208f;\n      local64_1 = debugData[3];\n      ptr64 = (long *)debugData[2];\n      condition = *(char *)(*(long *)(*debugData + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localCharArr_1 = ptrChar;\n        do {\n          if (*localCharArr_1 != ';') {\n            return 1;\n          }\n          localCharArr_1 = localCharArr_1 + 1;\n          local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n        } while (local64_3 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 2;\n      break;\n    case 'S':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 2;\n      goto LAB_001121c4;\n    case 'T':\n      condition = localCharArr_1[2];\n      if (condition == 't') {\n        ptrChar = localCharArr_1 + 3;\n      }\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,ptrChar_2,&localCharArr_1,localPtr64Arr_1);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      if (ptrChar_2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(debugData + 0x35);\n      ptr64 = (long *)FUN_0010c6be(param1,ptrChar_2,local64_3);\n      if (ptr64 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtr64Arr_1[0] != (long **)0x0) {\n        *localPtr64Arr_1[0] = ptr64;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      ptrPtr64_1 = (long **)(debugData + 0x34);\n      pplVar18 = (long **)debugData[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptrChar = localCharArr_1 + 3;\n      if (((localCharArr_1[2] != '\\0') && (ptrChar = localCharArr_1 + 4, localCharArr_1[3] == 'n')) &&\n         (ptrChar = localCharArr_1 + 5, ptrChar_2 = localCharArr_1 + 4, localCharArr_1 = ptrChar, *ptrChar_2 == '0')) {\n        for (; ptrChar = localCharArr_1, *localCharArr_1 != '\\0'; localCharArr_1 = localCharArr_1 + 1) {\n          if (*localCharArr_1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 4;\n      break;\n    case 'c':\n      if (localCharArr_1[2] == '=') {\n        ptrChar = localCharArr_1 + 4;\n        condition = localCharArr_1[3];\n        localCharArr_1 = ptrChar;\n        if (condition == 'i') {\n          local64_3 = strtol(ptrChar,(char **)0x0,10);\n          if (ptrChar_2 == (char *)0x0) {\n            return 0;\n          }\n          local64_1 = FUN_00112996(param1,ptrChar_2,4);\n          if (local64_1 != 0) {\n            *(long *)(local64_1 + 0x20) = (long)(int)local64_3;\n            return 1;\n          }\n          return 0;\n        }\n        if (condition == 'r') {\n          double1 = strtod(ptrChar,(char **)0x0);\n          if (ptrChar_2 == (char *)0x0) {\n            return 0;\n          }\n          local64_3 = FUN_00112996(param1,ptrChar_2,5);\n          if (local64_3 != 0) {\n            *(double *)(local64_3 + 0x20) = double1;\n            return 1;\n          }\n          return 0;\n        }\n        if (condition == 'e') {\n          local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n          if (local64_3 == 0) {\n            return 0;\n          }\n          ptrChar = localCharArr_1;\n          if (*localCharArr_1 == ',') {\n            local64_1 = strtol(localCharArr_1,(char **)0x0,10);\n            if (ptrChar_2 == (char *)0x0) {\n              return 0;\n            }\n            local64_2 = FUN_00112996(param1,ptrChar_2,6);\n            if (local64_2 != 0) {\n              ptr64 = (long *)xmalloc(0x10);\n              *ptr64 = local64_3;\n              ptr64[1] = (long)(int)local64_1;\n              *(long **)(local64_2 + 0x20) = ptr64;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharArr_1[2] == 'F') {\n        localCharArr_1 = localCharArr_1 + 3;\n        local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n        if (local64_3 == 0) {\n          return 0;\n        }\n        result = FUN_00113ce0(local64_3,0,0);\n        local64_3 = FUN_00113d3a(result);\n      }\n      else {\n        localCharArr_1 = ptrChar;\n        local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      }\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 1;\n      break;\n    case 'r':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 5;\nLAB_001123e8:\n      condition = FUN_0010c139(param1,debugData,ptrChar_2,local64_3,result,operandValue);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,ptrChar_2,&localCharArr_1,localPtr64Arr_1);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      if (ptrChar_2 == (char *)0x0) {\n        return 1;\n      }\n      ptr64 = (long *)FUN_0010c218(param1,ptrChar_2,local64_3);\n      if (ptr64 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtr64Arr_1[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtr64Arr_1[0] = ptr64;\n      return 1;\n    case 'v':\n      localCharArr_1 = ptrChar;\n      local64_3 = FUNC_0010ee3f(param1,debugData,0,&localCharArr_1,0);\n      if (local64_3 == 0) {\n        return 0;\n      }\n      result = 3;\n    }\n    condition = FUN_0010bd62(param1,ptrChar_2,local64_3,result,operandValue);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debugData + 0x44) != '\\0') && (operandType == 1)) {\n      return 1;\n    }\n    condition = FUN_0010c1c6(param1,debugData);\n    if (condition == '\\0') {\n      return 0;\n    }\n    condition = FUN_0010bf20(param1,debugData[7] + debugData[6] + operandValue);\n    if (condition == '\\0') {\n      return 0;\n    }\n    debugData = debugData + 0xe;\n    *(int *)debugData = *(int *)debugData + -1;\n    ptrChar = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugData) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        ptrChar = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptrChar = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      result = dcgettext(0,ptrChar,5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        index = *(int *)(debugData + 0x10);\n        *(uint *)(debugData + 0x10) = index + 1U;\n        local64_3 = xrealloc(debugData[0x11],(ulong)(index + 1U) << 3);\n        ptr8 = (undefined8 *)debugData[0xb];\n        debugData[0x11] = local64_3;\n        while( true ) {\n          if (ptr8 == (undefined8 *)0x0) {\n            result = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(name,result);\n            *(undefined8 *)(debugData[0x11] + (ulong)(*(int *)(debugData + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((operandValue == ptr8[3]) && (index = strcmp((char *)ptr8[2],name), index == 0))\n          break;\n          ptr8 = (undefined8 *)*ptr8;\n        }\n        *(undefined8 *)(local64_3 + (ulong)(*(int *)(debugData + 0x10) - 1) * 8) = ptr8[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        local64_3 = debugData[10];\n        if (local64_3 != 0) {\n          local64_1 = *(long *)(local64_3 + 8);\n          uint1 = *(uint *)(local64_3 + 0x20);\n          debugData[10] = local64_1;\n          if ((uint1 < *(uint *)(debugData + 0x10)) &&\n             (*(undefined8 *)(local64_3 + 0x28) = *(undefined8 *)(debugData[0x11] + (ulong)uint1 * 8),\n             local64_1 != 0)) {\n            name = *(char **)(local64_1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debugData[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugData + 0x44) != '\\0') && (operandType == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugData + 0xc) != '\\0') {\n      condition = FUN_0010be88(param1,debugData[7] + debugData[6] + operandValue);\n      if (condition == '\\0') {\n        return 0;\n      }\n      condition = FUN_0010c1c6(param1,debugData);\n      if (condition != '\\0') {\n        *(int *)(debugData + 0xe) = *(int *)(debugData + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptrChar = \"N_LBRAC not within function\\n\";\n  }\n  ptrChar = (char *)dcgettext(0,ptrChar,5);\n  fprintf(_stderr,ptrChar);\n  return 0;\ncode_r0x00111cc7:\n  localCharArr_1 = localCharArr_1 + 2;\n  localCharArr_1 = strchr(localCharArr_1,0x3a);\n  if (localCharArr_1 == (char *)0x0) {\n    ptrChar = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharArr_1 = ptrChar;\n    FUN_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (condition != 't') {\n      return 1;\n    }\n    ptr64 = (long *)FUN_0010c218(param1,ptrChar_2,ptr64);\n    if (ptr64 != (long *)0x0) {\n      if (localPtr64Arr_1[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtr64Arr_1[0] = ptr64;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *ptrChar_2) &&\n     (index = strcmp((char *)pplVar18[1],ptrChar_2), index == 0)) {\n    pplVar18[3] = ptr64;\n    *ptrPtr64_1 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrPtr64_1 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (local64_1 < 1) {\nLAB_0011208f:\n    result = 1;\nLAB_001121c4:\n    condition = FUN_0010c05d(param1,ptrChar_2,local64_3,result,operandValue);\njoined_r0x001123f8:\n    if (condition != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptrChar = *(char **)(*ptr64 + 8);\n  if ((condition != '\\0') && (condition == *ptrChar)) {\n    ptrChar = ptrChar + 1;\n  }\n  if ((*ptrChar == *ptrChar_2) && (index = strcmp(ptrChar,ptrChar_2), index == 0)) {\n    operandValue = *(long *)(*ptr64 + 0x10) + *(long *)(*(long *)(*ptr64 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  local64_1 = local64_1 + -1;\n  ptr64 = ptr64 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "xmalloc",
                "fprintf",
                "FUN_00108fe8",
                "FUN_0010c139",
                "FUN_00108fb9",
                "strchr",
                "free",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "strtod",
                "strcmp",
                "FUN_0010bbd3",
                "strtol",
                "FUN_00112996",
                "concat",
                "FUN_0010be88",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_00109a0b",
                "strlen",
                "xstrdup",
                "FUN_0010c1c6",
                "FUN_0010c05d",
                "FUN_0010c218",
                "xrealloc",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "isError",
                "iVar2": "error",
                "uVar3": "result",
                "lVar4": "relocSize",
                "puVar5": "relocArray",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "destArray",
                "puVar8": "destArrayPtr",
                "uVar9": "temp",
                "uStack_38": "tempStackVar"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char isError;\n  int error;\n  undefined8 result;\n  long relocSize;\n  undefined8 *relocArray;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *destArray;\n  undefined8 *destArrayPtr;\n  ulong temp;\n  undefined8 tempStackVar;\n  \n  isError = FUN_00115f50(param1,param2,0);\n  if (isError != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (relocSize = FUN_00114190(*param2,0,0x100), relocSize == 0)) {\n    relocSize = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocSize < 0) {\n      if ((relocSize != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a20 = 1;\n        result = 0;\nLAB_00108315:\n        FUN_001126c0(0,param1,param2,result,tempStackVar);\n        return;\n      }\n    }\n    else if (relocSize != 0) {\n      relocArray = (undefined8 *)param2[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(param3);\n        if (relocArray == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocArray,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        destArray = relocArray;\n        for (temp = 0; temp != relocCount; temp = temp + 1) {\n          destArrayPtr = destArray;\n          if (((*(long **)relocArray[temp] != (long *)0x0) &&\n              (relocSize = **(long **)relocArray[temp], relocSize != 0)) &&\n             (isError = FUN_00115d70(*(undefined8 *)(relocSize + 8),DAT_00127a08), isError != '\\0')) {\n            destArrayPtr = destArray + 1;\n            *destArray = relocArray[temp];\n          }\n          destArray = destArrayPtr;\n        }\n        *destArray = 0;\n        relocCount = (long)destArray - (long)relocArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,result,relocArray,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "FUN_00114190",
                "xexit",
                "bfd_alloc",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00115f50",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_process_data_0010d559",
                "param_1": "input_array",
                "param_2": "data_ptr",
                "param_3": "output_count",
                "bVar1": "current_byte",
                "pbVar2": "current_ptr",
                "cVar3": "result",
                "uVar4": "string_length",
                "iVar5": "comparison_result",
                "ppcVar6": "string_cache",
                "sVar7": "cache_length",
                "lVar8": "output_value",
                "plVar9": "cache_entry",
                "pcVar10": "temp_string",
                "__s1": "cache_string",
                "__ptr": "temp_ptr",
                "pbVar11": "next_ptr",
                "uVar12": "case_value",
                "local_64": "count",
                "local_40": "cache_array"
            },
            "code": "\nundefined8 parse_and_process_data_0010d559(undefined8 *input_array,byte **data_ptr,long *output_count)\n\n{\n  byte current_byte;\n  byte *current_ptr;\n  char result;\n  uint string_length;\n  int comparison_result;\n  char **string_cache;\n  size_t cache_length;\n  long output_value;\n  long *cache_entry;\n  char *temp_string;\n  char *cache_string;\n  void *temp_ptr;\n  byte *next_ptr;\n  undefined8 case_value;\n  byte *__nptr;\n  int count;\n  char *cache_array [2];\n  \n  current_ptr = *data_ptr;\n  current_byte = current_ptr[1];\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '1') goto LAB_0010d5d8;\n    count = (char)current_byte + -0x30;\n    if (current_ptr[2] == 0x5f) {\n      *data_ptr = current_ptr + 1;\n    }\n    next_ptr = *data_ptr + 2;\n  }\n  else {\n    if (((current_byte != 0x5f) || (((&_sch_istable)[(ulong)current_ptr[2] * 2] & 4) == 0)) ||\n       (current_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_ptr + 2;\n    output_value = strtol((char *)__nptr,(char **)0x0,10);\n    count = (int)output_value;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    next_ptr = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *data_ptr = next_ptr;\n  string_cache = (char **)0x0;\n  if (output_count != (long *)0x0) {\n    string_cache = cache_array;\n  }\n  output_value = 0;\n  while( true ) {\n    while( true ) {\n      count = count + -1;\n      if (count == -1) {\n        if (output_count != (long *)0x0) {\n          *output_count = output_value;\n        }\n        return 1;\n      }\n      if (**data_ptr == 0x5f) {\n        *data_ptr = *data_ptr + 1;\n      }\n      if (**data_ptr != 0x74) break;\n      result = FUN_0010d21c(input_array,data_ptr,string_cache);\n      temp_string = cache_array[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_count != (long *)0x0) {\n        cache_length = strlen(cache_array[0]);\n        output_value = FUN_0010afd5(*input_array,input_array[1],temp_string,cache_length & 0xffffffff,9);\n        free(temp_string);\n        if (output_value == 0) {\n          return 0;\n        }\n      }\n    }\n    string_length = FUN_00108e76(data_ptr);\n    cache_length = strlen((char *)*data_ptr);\n    if (cache_length < string_length) break;\n    if (output_count != (long *)0x0) {\n      if ((output_value != 0) && (cache_entry = (long *)FUN_00113b1e(output_value), cache_entry != (long *)0x0)) {\n        temp_string = (char *)FUN_00109a0b(*data_ptr,string_length);\n        for (; output_value = *cache_entry, output_value != 0; cache_entry = cache_entry + 1) {\n          output_value = *(long *)(output_value + 8);\n          if (output_value == 0) {\n            free(temp_string);\n            return 0;\n          }\n          cache_string = (char *)FUN_001129f4(output_value);\n          if ((cache_string != (char *)0x0) && (comparison_result = strcmp(cache_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (output_value != 0) goto LAB_0010d7ad;\n      }\n      case_value = 9;\n      if (count == 0) {\n        temp_ptr = (void *)FUN_00109a0b(*data_ptr,string_length);\n        output_value = FUN_0010914e(*input_array,temp_ptr);\n        free(temp_ptr);\n        if (output_value != 0) goto LAB_0010d7ad;\n        case_value = 0;\n      }\n      output_value = FUN_0010afd5(*input_array,input_array[1],*data_ptr,string_length,case_value);\n      if (output_value == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *data_ptr = *data_ptr + string_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_ptr);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010914e",
                "strtol",
                "FUN_0010afd5",
                "free",
                "FUN_0010911f",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_formatted_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "args"
            },
            "code": "\n\n\nvoid printFormattedErrorMessage_00119e70(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_001275e0);\n  vfprintf(_stderr,errorMessage,args);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryBlock",
                "free": "releaseMemory"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryBlock;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0);\n  free(memoryBlock);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_string_00108e76",
                "param_1": "input_string",
                "bVar1": "current_char",
                "iVar2": "result"
            },
            "code": "\nint extract_number_from_string_00108e76(byte **input_string)\n\n{\n  byte current_char;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_char = **input_string;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *input_string = *input_string + 1;\n    result = result * 10 + -0x30 + (int)(char)current_char;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "extract_number_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_param",
                "param_2": "hash_param1",
                "param_3": "hash_param2",
                "lVar1": "new_hash",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_newfunc"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_param,undefined8 hash_param1,undefined8 hash_param2)\n\n{\n  long new_hash;\n  \n  if (((input_param != 0) || (input_param = bfd_hash_allocate(hash_param1,0x30), input_param != 0)) &&\n     (new_hash = bfd_hash_newfunc(input_param,hash_param1,hash_param2), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "store_param_and_call_function_thunk_0010e439",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "code": "\nvoid storeParamAndCallFunction_thunk_0010e439(long baseAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = newValue;\n  FUN_0010e2f0(baseAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "store_param_and_call_function_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "param_1": "file_path",
                "param_2": "directory_path",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_permission_0011283f(char *file_path,char *directory_path)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((directory_path == (char *)0x0) && (file_path != (char *)0x0)) {\n    access_result = access(file_path,7);\n    if (access_result == 0) {\n      access_result = stat(file_path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        directory_path = file_path;\n      }\n    }\n  }\n  return directory_path;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permission_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_handle_and_set_errno_00108237",
                "unaff_R12D": "handle",
                "piVar2": "errnoLocation",
                "iVar1": "savedErrno"
            },
            "code": "\nundefined8 closeHandleAndSetErrno_00108237(void)\n\n{\n  int savedErrno;\n  int *errnoLocation;\n  int handle;\n  \n  errnoLocation = __errno_location();\n  savedErrno = *errnoLocation;\n  close(handle);\n  *errnoLocation = savedErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_handle_and_set_errno_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "record_function_ptr",
                "param_2": "debug_filename",
                "param_3": "debug_set_filename",
                "param_4": "debug_flag",
                "param_5": "debug_record",
                "param_6": "result",
                "plVar2": "debug_record_ptr",
                "puVar3": "debug_buffer",
                "lVar4": "loop_counter",
                "puVar5": "buffer_ptr",
                "pcVar6": "default_filename",
                "bVar7": "byte_flag",
                "uVar1": "error_message",
                "auVar8": "output"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long record_function_ptr,char *debug_filename,long debug_set_filename,uint debug_flag,undefined8 debug_record,\n            undefined8 result)\n\n{\n  undefined8 error_message;\n  long *debug_record_ptr;\n  undefined4 *debug_buffer;\n  long loop_counter;\n  undefined4 *buffer_ptr;\n  char *default_filename;\n  byte byte_flag;\n  undefined output [16];\n  \n  byte_flag = 0;\n  default_filename = \"\";\n  if (debug_filename != (char *)0x0) {\n    default_filename = debug_filename;\n  }\n  if (debug_set_filename != 0) {\n    if (*(long *)(record_function_ptr + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_record_ptr = (long *)xmalloc(0x18);\n      *debug_record_ptr = debug_set_filename;\n      *(undefined (*) [16])(debug_record_ptr + 1) = ZEXT816(0);\n      debug_buffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(record_function_ptr + 0x18) = debug_record_ptr;\n      debug_record_ptr[2] = (long)debug_buffer;\n      buffer_ptr = debug_buffer;\n      for (loop_counter = 0xc; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)byte_flag * -2 + 1;\n      }\n      *(undefined4 **)(record_function_ptr + 0x20) = debug_buffer;\n      loop_counter = *(long *)(record_function_ptr + 0x10);\n      *(undefined8 *)(debug_buffer + 6) = debug_record;\n      *(undefined8 *)(debug_buffer + 8) = 0xffffffffffffffff;\n      loop_counter = FUN_00112925(loop_counter + 0x10,default_filename,3,(debug_flag & 0xff) + 1);\n      if (loop_counter != 0) {\n        *(long **)(loop_counter + 0x20) = debug_record_ptr;\n        error_message = CONCAT71((int7)((ulong)loop_counter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  output._8_8_ = result;\n  output._0_8_ = error_message;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlashPosition",
                "lVar2": "index",
                "lVar3": "filenameLength",
                "lVar4": "slashIndex",
                "pcVar5": "newFilePath",
                "bVar6": "foundSlash",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid createFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlashPosition;\n  long index;\n  long filenameLength;\n  long slashIndex;\n  char *newFilePath;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlashPosition = strrchr(filePath,0x2f);\n  if (lastSlashPosition == (char *)0x0) {\n    lastSlashPosition = (char *)xmalloc(9);\n    filenameLength = 0;\n  }\n  else {\n    slashIndex = (long)lastSlashPosition - (long)filePath;\n    lastSlashPosition = (char *)xmalloc(slashIndex + 0xb);\n    filenameLength = slashIndex + 1;\n    newFilePath = lastSlashPosition;\n    for (index = slashIndex; index != 0; index = index + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)foundSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlashPosition[slashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlashPosition + filenameLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashPosition + filenameLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "inputData",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "tempChar",
                "__s": "str1",
                "__s_00": "str2",
                "sVar5": "lenStr1",
                "sVar6": "lenStr2",
                "__s_01": "resultStr",
                "lVar7": "counter",
                "local_41": "localFlag",
                "iVar2": "constant",
                "iVar3": "result",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long inputData,long startValue,long endValue,byte flag)\n\n{\n  char tempChar;\n  int constant;\n  int result;\n  undefined4 returnValue;\n  char *str1;\n  char *str2;\n  size_t lenStr1;\n  size_t lenStr2;\n  char *resultStr;\n  long counter;\n  byte localFlag;\n  \n  tempChar = *(char *)(*(long *)(inputData + 0x60) + 0x1c);\n  str1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (tempChar == '\\0') {\n    localFlag = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n  }\n  constant = *(int *)(*(long *)(inputData + 0x60) + 0x18);\n  str2 = (char *)FUN_00109b2f(inputData);\n  lenStr1 = strlen(str1);\n  lenStr2 = strlen(str2);\n  resultStr = (char *)xmalloc(lenStr1 + 100 + lenStr2);\n  if (flag == 0) {\n    *resultStr = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(inputData + 0x68);\n    *(long *)(inputData + 0x68) = counter + 1;\n    sprintf(resultStr,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  lenStr1 = strlen(resultStr);\n  sprintf(resultStr + lenStr1,\"ar%s;%ld;%ld;%s\",str1,startValue,endValue,str2);\n  free(str1);\n  free(str2);\n  result = 0;\n  if (startValue <= endValue) {\n    result = constant * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = FUN_00109b52(inputData,resultStr,counter,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(resultStr);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_target_architectures_001199d0",
                "pcVar4": "headerString",
                "iVar1": "numColumns",
                "iVar2": "archIndex",
                "iVar3": "comparisonResult",
                "pcVar6": "tempFilePath",
                "uVar7": "returnValue",
                "piVar8": "errorCode",
                "iVar9": "targetIndex",
                "lVar10": "archStringLength",
                "lVar11": "archIndex2",
                "ppcVar12": "archStringList",
                "uVar13": "maxArchLength",
                "uVar14": "stringLength",
                "local_70": "tempFileDescriptor"
            },
            "code": "\n\n\nvoid printTargetArchitectures_001199d0(void)\n\n{\n  int numColumns;\n  int archIndex;\n  int comparisonResult;\n  char *headerString;\n  size_t sVar5;\n  char *tempFilePath;\n  undefined8 returnValue;\n  int *errorCode;\n  int targetIndex;\n  long archStringLength;\n  long archIndex2;\n  char **archStringList;\n  uint maxArchLength;\n  ulong stringLength;\n  int tempFileDescriptor;\n  \n  headerString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerString,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerString = getenv(\"TMPDIR\");\n    returnValue = FUN_0011283f(headerString,0);\n    headerString = getenv(\"TMP\");\n    returnValue = FUN_0011283f(headerString,returnValue);\n    headerString = getenv(\"TEMP\");\n    returnValue = FUN_0011283f(headerString,returnValue);\n    returnValue = FUN_0011283f(&DAT_0011b39a,returnValue);\n    returnValue = FUN_0011283f(\"/var/tmp\",returnValue);\n    headerString = (char *)FUN_0011283f(&DAT_00120324,returnValue);\n    if (headerString == (char *)0x0) {\n      headerString = \".\";\n    }\n    sVar5 = strlen(headerString);\n    tempFilePath = (char *)xmalloc((int)sVar5 + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerString);\n    DAT_001278c0[sVar5 & 0xffffffff] = '/';\n    DAT_001278c0[(int)sVar5 + 1] = '\\0';\n  }\n  headerString = DAT_001278c0;\n  sVar5 = strlen(DAT_001278c0);\n  archStringLength = (long)(int)sVar5;\n  tempFilePath = (char *)xmalloc(archStringLength + 9);\n  strcpy(tempFilePath,headerString);\n  *(undefined2 *)(tempFilePath + archStringLength) = 0x6363;\n  *(undefined4 *)(tempFilePath + archStringLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + archStringLength + 2) + 3) = 0x585858;\n  tempFilePath[archStringLength + 8] = '\\0';\n  archIndex = mkstemps(tempFilePath,0);\n  if (archIndex == -1) {\n    errorCode = __errno_location();\n    tempFilePath = strerror(*errorCode);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerString,tempFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  tempFileDescriptor = 0;\n  do {\n    headerString = (char *)bfd_printable_arch_mach(archIndex);\n    sVar5 = strlen(headerString);\n    if ((int)maxArchLength < (int)(uint)sVar5) {\n      maxArchLength = (uint)sVar5;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerString = getenv(\"COLUMNS\");\n  archIndex = tempFileDescriptor;\n  if (headerString != (char *)0x0) {\n    archStringLength = strtol(headerString,(char **)0x0,10);\n    numColumns = (int)archStringLength;\n    if (numColumns != 0) goto LAB_00119b11;\n  }\n  numColumns = 0x50;\nLAB_00119b11:\n  do {\n    tempFileDescriptor = archIndex;\n    if (-1 < tempFileDescriptor) {\n      return;\n    }\n    archIndex2 = (long)tempFileDescriptor;\n    targetIndex = (numColumns - maxArchLength) + -1;\n    archStringLength = archIndex2;\n    do {\n      archIndex = (int)archStringLength;\n      if (-1 < archIndex) break;\n      sVar5 = strlen(*(char **)(archStringLength * 0x60));\n      archStringLength = archStringLength + 1;\n      targetIndex = (targetIndex - (int)sVar5) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (archStringList = (char **)(archIndex2 * 0x60);\n        ((ulong)(uint)(archIndex - tempFileDescriptor) + archIndex2) * 0x60 - (long)archStringList != 0;\n        archStringList = archStringList + 0xc) {\n      printf(\"%s \",*archStringList);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerString = (char *)bfd_printable_arch_mach(targetIndex,0);\n      comparisonResult = strcmp(headerString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        returnValue = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,returnValue);\n        archStringList = (char **)(archIndex2 * 0x60);\n        comparisonResult = tempFileDescriptor;\n        while (archIndex != comparisonResult) {\n          if (*(char *)((long)archStringList + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            sVar5 = strlen(*archStringList);\n            for (stringLength = sVar5 & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archStringList,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (archIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          archStringList = archStringList + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_00119f70",
                "xmalloc",
                "bfd_iterate_over_targets",
                "fprintf",
                "abort",
                "unlink",
                "FUN_00104943",
                "strlen",
                "__errno_location",
                "strerror",
                "bfd_printable_arch_mach",
                "free",
                "printf",
                "mkstemps",
                "strcpy",
                "FUN_0011283f",
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_target_architectures_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a"
            },
            "code": "\nvoid executeInitialization_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byte1",
                "pbVar2": "bytePtr",
                "bVar3": "byte2",
                "cVar4": "char1",
                "bVar5": "byte3",
                "uVar6": "result",
                "iVar7": "index",
                "uVar8": "value",
                "sVar9": "strlenResult",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "value2",
                "pcVar13": "var13",
                "pcVar15": "var15",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "byte7",
                "bVar19": "byte8",
                "uVar20": "counter",
                "uVar21": "value3",
                "local_3c": "array3c"
            },
            "code": "\nundefined4 reverseAndImprove_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byte1;\n  byte *bytePtr;\n  byte byte2;\n  char char1;\n  byte byte3;\n  undefined4 result;\n  int index;\n  uint value;\n  size_t strlenResult;\n  byte *bytePtr2;\n  void *ptr;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 value2;\n  char *var13;\n  byte byte14;\n  char *var15;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  uint counter;\n  ulong value3;\n  uint array3c [3];\n  \n  bytePtr = *param2;\n  *param2 = bytePtr + 1;\n  array3c[0] = FUN_00108e76(param2);\n  value3 = (ulong)array3c[0];\n  if (array3c[0] != 0) {\n    bytePtr2 = *param2;\n    strlenResult = strlen((char *)bytePtr2);\n    if (value3 <= strlenResult) {\n      *param2 = bytePtr2 + value3;\n      counter = 0;\n      result = FUN_00108ea1(param2,array3c);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (array3c[0] <= counter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr = (void *)FUN_00109a0b(bytePtr,(int)*param2 - (int)bytePtr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr,0);\n          free(ptr);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            value2 = FUN_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param3 = value2;\n            free(haystack);\n            return result;\n          }\n          FUN_0010911f(bytePtr);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *param2;\n        if (*bytePtr2 != 0x5a) {\n          byte3 = FUN_0010c95e(param1,param2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          byte2 = 0;\n          byte14 = 0;\n          byte7 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = byte2;\n              byte1 = *bytePtr2;\n              if ((byte14 | byte1 == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte2 = byte3;\n              byte14 = byte3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                value3 = 1L << (byte1 + 0xbd & 0x3f);\n                if ((value3 & 0x11409) == 0) {\n                  if ((value3 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byte2 = byte5;\n              byte14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte2 = byte5;\n              byte7 = byte3;\n              break;\n            case 99:\n              byte2 = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte2 = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePtr2 + 1;\n        char1 = FUN_0010c95e(param1,param2,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(bytePtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (byte7 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            value = FUN_00108e76(param2);\n            if (value == 0) goto LAB_0010d280;\n            *param2 = *param2 + value;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePtr2 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *param2 = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *param2;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        value = FUN_00108e76(param2);\n        if (1 < value) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      index = FUN_00108e76(param2);\n      if (index == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "concat",
                "free",
                "cplus_demangle",
                "FUN_0010911f",
                "strstr",
                "abort",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strlen",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_resources_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "tempValue"
            },
            "code": "\nvoid cleanupResources_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 tempValue;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,tempValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_resources_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_and_initialize_0010c139",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "tempVar1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "allocatedMemory",
                "in_R10": "inputR10",
                "unaff_R15": "unaffectedR15"
            },
            "code": "\nulong allocateAndInitialize_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 tempVar1;\n  char flag;\n  ulong result;\n  undefined8 *allocatedMemory;\n  undefined8 inputR10;\n  undefined8 unaffectedR15;\n  \n  flag = *(char *)(param2 + 0x60);\n  if ((flag != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    tempVar1 = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[2] = param4;\n    *(undefined4 *)(allocatedMemory + 3) = param5;\n    allocatedMemory[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = allocatedMemory;\n    *allocatedMemory = tempVar1;\n    allocatedMemory[1] = param3;\n    return CONCAT71((int7)((ulong)unaffectedR15 >> 8),flag) & 0xffffffff;\n  }\n  result = FUN_0010c05d(param1,param3,param4,param5,param6,inputR10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_parameter_0010e439",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "code": "\nvoid updateParameter_0010e439(long baseAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = newValue;\n  FUN_0010e2f0(baseAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "update_parameter_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010e842",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_00109dfe",
                "FUN_0010ee3f",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00115530",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_001199d0",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_00113fb0",
                "FUN_0010a377",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid processData_00109d3e(undefined8 param1,int param2)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (param2 - 1U < 8) {\n    defaultValue = *(undefined8 *)(&DAT_00121360 + (ulong)(param2 - 1U) * 8);\n  }\n  FUN_00109cf4(param1,defaultValue,param2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_value_00112502",
                "param_1": "data",
                "param_2": "param",
                "param_3": "value",
                "uVar1": "index",
                "puVar2": "ptr",
                "uVar3": "temp",
                "cVar4": "result"
            },
            "code": "\nundefined checkValue_00112502(long data,undefined8 param,ulong value)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(data + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (value <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    temp = *ptr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_value_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_and_store_lines_00104cc1",
                "uVar1": "rubbishErrorMsg",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentCharPtr",
                "bVar4": "currentChar",
                "unaff_RBX": "lineStartPtr",
                "pbVar5": "lineEndPtr",
                "unaff_EBP": "lineNum",
                "in_R10": "linePtr",
                "unaff_R13": "returnVal",
                "unaff_R14": "endOfLinePtr",
                "unaff_R15": "startOfLinePtr",
                "param_7": "msgContext",
                "param_8": "returnPtr",
                "param_9": "filename"
            },
            "code": "\nvoid parseAndStoreLines_00104cc1(void)\n\n{\n  undefined8 rubbishErrorMsg;\n  byte **slotPtr;\n  byte *currentCharPtr;\n  byte currentChar;\n  byte *lineStartPtr;\n  byte *lineEndPtr;\n  int lineNum;\n  byte *linePtr;\n  undefined8 returnVal;\n  byte *endOfLinePtr;\n  byte *startOfLinePtr;\n  undefined8 msgContext;\n  undefined8 *returnPtr;\n  byte *filename;\n  \ncode_r0x00104cc1:\n  filename = linePtr;\n  rubbishErrorMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(rubbishErrorMsg,msgContext,lineNum);\n  lineEndPtr = lineStartPtr;\n  linePtr = filename;\nLAB_00114599:\n  do {\n    *linePtr = 0;\n    if (startOfLinePtr < linePtr) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = startOfLinePtr;\n    }\n    lineNum = lineNum + 1;\n    currentCharPtr = lineEndPtr;\n    if (endOfLinePtr[1] == 0) {\n      *returnPtr = returnVal;\n      return;\n    }\n    for (; currentChar = *currentCharPtr, endOfLinePtr = currentCharPtr, currentChar != 10; currentCharPtr = currentCharPtr + 1) {\n      if ((char)currentChar < '\\v') {\n        if (currentChar == 0) {\n          lineStartPtr = currentCharPtr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentChar == 0xd) {\n          *currentCharPtr = 0;\n          lineStartPtr = currentCharPtr + 1;\n          if (currentCharPtr[1] == 10) {\n            lineStartPtr = currentCharPtr + 2;\n            endOfLinePtr = currentCharPtr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentCharPtr = 0;\n    if (currentCharPtr[1] == 0xd) {\n      endOfLinePtr = currentCharPtr + 1;\n      lineStartPtr = currentCharPtr + 2;\n    }\n    else {\n      lineStartPtr = currentCharPtr + 1;\n    }\nLAB_00114553:\n    currentChar = *lineEndPtr;\n    startOfLinePtr = lineEndPtr;\n    while ((currentChar == 0x20 || (linePtr = startOfLinePtr, currentChar == 9))) {\n      lineEndPtr = startOfLinePtr + 1;\n      startOfLinePtr = startOfLinePtr + 1;\n      currentChar = *lineEndPtr;\n    }\n    do {\n      lineEndPtr = lineStartPtr;\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentChar = linePtr[1];\n    if ((((((currentChar == 9) || (currentChar == 0x20)) && ((currentChar = linePtr[2], currentChar == 9 || (currentChar == 0x20)))\n          ) && ((currentChar = linePtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n        ((currentChar = linePtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n       ((currentChar = linePtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n      currentChar = linePtr[6];\n      currentCharPtr = linePtr + 6;\n      if ((currentChar == 9) || (currentChar == 0x20)) {\n        do {\n          do {\n            currentChar = currentCharPtr[1];\n            currentCharPtr = currentCharPtr + 1;\n          } while (currentChar == 0x20);\n        } while (currentChar == 9);\n      }\n    }\n    if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104d1c",
                "htab_find_slot",
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_store_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_00109c2e",
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010b6ea",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_initialize_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong allocateAndInitialize_00113bfa(long input1,long input2)\n\n{\n  long result;\n  long *allocatedMemory;\n  \n  if (((input1 != 0) && (input2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocatedMemory = (long *)xmalloc(0x10);\n    *allocatedMemory = input1;\n    allocatedMemory[1] = input2;\n    *(long **)(result + 0x10) = allocatedMemory;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "validate_and_drop_share_flag_00108375",
                "param_1": "input",
                "param_2": "parameters",
                "param_3": "output",
                "uVar1": "paramValue",
                "uVar2": "errorText",
                "unaff_EBX": "flags",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nuint validateAndDropShareFlag_00108375(undefined8 input,undefined8 *parameters,undefined8 output)\n\n{\n  undefined8 paramValue;\n  undefined8 errorText;\n  uint flags;\n  \n  if (*(int *)(parameters[1] + 8) != 2) {\n    paramValue = *parameters;\n    flags = flags & 0xf7ffffff;\n    errorText = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(errorText,paramValue,output);\n  }\n  return flags;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "validate_and_drop_share_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "increment_counter_and_log_00109e76",
                "param_1": "counterAddress",
                "param_2": "value",
                "lVar1": "counterValue",
                "local_5a": "logString"
            },
            "code": "\nvoid incrementCounterAndLog_00109e76(long counterAddress,uint value)\n\n{\n  long counterValue;\n  char logString [58];\n  \n  counterValue = *(long *)(counterAddress + 0x68);\n  *(long *)(counterAddress + 0x68) = counterValue + 1;\n  sprintf(logString,\"%ld=r%ld;%u;0;\",counterValue,counterValue,(ulong)value);\n  FUN_00109b52(counterAddress,logString,counterValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "increment_counter_and_log_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "currentIndex",
                "lVar2": "currentDataIndex",
                "lVar3": "currentEntryIndex",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int currentIndex;\n  long currentDataIndex;\n  long currentEntryIndex;\n  undefined8 duplicatedString;\n  \n  currentDataIndex = (long)DAT_001278a0;\n  currentEntryIndex = currentDataIndex * 0x18;\n  free((void *)(&DAT_00127730)[currentDataIndex * 3]);\n  *(undefined4 *)(&DAT_00127720 + currentEntryIndex) = newValue1;\n  *(undefined4 *)(&DAT_00127724 + currentEntryIndex) = newValue2;\n  *(undefined8 *)(&DAT_00127728 + currentEntryIndex) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  (&DAT_00127730)[currentDataIndex * 3] = duplicatedString;\n  currentIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "param_1": "inputList",
                "param_2": "context",
                "param_3": "searchString",
                "param_4": "size1",
                "param_5": "size2",
                "param_6": "result",
                "__s2": "searchStringCopy",
                "puVar2": "currentEntry",
                "uVar3": "tempVar",
                "lVar4": "tempVar2",
                "puVar5": "innerEntry",
                "puVar6": "tempVar3",
                "bVar7": "counter",
                "auVar8": "resultArray"
            },
            "code": "\nundefined  [16]\nfindMatchingString_0010afd5(undefined8 *inputList,long context,undefined8 searchString,undefined4 size1,\n            undefined4 size2,undefined8 result)\n\n{\n  int iVar1;\n  char *searchStringCopy;\n  undefined8 *currentEntry;\n  undefined8 tempVar;\n  long tempVar2;\n  undefined8 *innerEntry;\n  undefined4 *tempVar3;\n  byte counter;\n  undefined resultArray [16];\n  \n  counter = 0;\n  searchStringCopy = (char *)FUN_00109a0b(searchString,size1);\n  for (inputList = (undefined8 *)*inputList; inputList != (undefined8 *)0x0;\n      inputList = (undefined8 *)*inputList) {\n    for (currentEntry = (undefined8 *)inputList[1]; currentEntry != (undefined8 *)0x0;\n        currentEntry = (undefined8 *)*currentEntry) {\n      if ((undefined8 *)currentEntry[2] != (undefined8 *)0x0) {\n        for (innerEntry = *(undefined8 **)(undefined8 *)currentEntry[2]; innerEntry != (undefined8 *)0x0;\n            innerEntry = (undefined8 *)*innerEntry) {\n          if ((*(int *)((long)innerEntry + 0x14) == 1) && (*(char *)innerEntry[1] == *searchStringCopy)) {\n            iVar1 = strcmp((char *)innerEntry[1],searchStringCopy);\n            if (iVar1 == 0) {\n              tempVar2 = innerEntry[4];\n              if (tempVar2 == 0) goto LAB_0010b05b;\n              free(searchStringCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentEntry = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (currentEntry == (undefined8 *)0x0) {\n      currentEntry = (undefined8 *)xmalloc(0x28);\n      tempVar = *(undefined8 *)(context + 0x1a0);\n      tempVar3 = (undefined4 *)((long)currentEntry + 0x14);\n      for (tempVar2 = 5; tempVar2 != 0; tempVar2 = tempVar2 + -1) {\n        *tempVar3 = 0;\n        tempVar3 = tempVar3 + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(currentEntry + 2) = size2;\n      *currentEntry = tempVar;\n      currentEntry[1] = searchStringCopy;\n      tempVar = FUN_00113e23(currentEntry + 3,searchStringCopy);\n      *(undefined8 **)(context + 0x1a0) = currentEntry;\n      currentEntry[4] = tempVar;\nLAB_0010b0e7:\n      tempVar2 = currentEntry[4];\nLAB_0010b0eb:\n      resultArray._8_8_ = result;\n      resultArray._0_8_ = tempVar2;\n      return resultArray;\n    }\n    if (*(char *)currentEntry[1] == *searchStringCopy) {\n      iVar1 = strcmp((char *)currentEntry[1],searchStringCopy);\n      if (iVar1 == 0) {\n        if (*(int *)(currentEntry + 2) == 0) {\n          *(undefined4 *)(currentEntry + 2) = size2;\n        }\n        free(searchStringCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentEntry = (undefined8 *)*currentEntry;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "free",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_matching_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00108fe8",
                "sprintf",
                "FUN_0010d882",
                "FUN_00108fb9",
                "free",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_00112b6e",
                "FUN_0010d559",
                "strtol",
                "concat",
                "FUN_0010afd5",
                "FUN_00113d6e",
                "cplus_demangle_init_info",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00109a0b",
                "strncmp",
                "FUN_00113e5e",
                "FUN_00113bfa",
                "FUN_00113fb0",
                "strcpy",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "strcat",
                "xmalloc",
                "fprintf",
                "FUN_00109ab1",
                "strchr",
                "FUN_00113e17",
                "FUN_00109022",
                "cplus_demangle_mangled_name",
                "FUN_00109a32",
                "strcmp",
                "FUN_00113b4a",
                "strstr",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "strlen",
                "malloc",
                "strspn",
                "FUN_001129f4",
                "FUN_00112904",
                "FUN_00113da9",
                "xrealloc",
                "FUN_00113df2",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00107880",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "ptrSymbol",
                "iVar5": "count"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *ptrSymbol;\n  int count;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  count = DAT_001278a0;\n  do {\n    index = (long)count;\n    offset = index * 0x18;\n    ptrSymbol = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*ptrSymbol);\n      if (stabName == 0) {\n        if (*ptrSymbol == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*ptrSymbol != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    count = (count + 1) % 0x10;\n  } while (DAT_001278a0 != count);\n  return param_3;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_stab_name",
                "fputc",
                "fwrite",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_0010a083(long data)\n\n{\n  FUN_00109ed3(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "newSize",
                "param_4": "flag",
                "param_5": "outData",
                "param_6": "param6",
                "lVar1": "newElement",
                "plVar2": "currentElement",
                "lVar3": "remainingSpace",
                "puVar4": "ptr",
                "uVar5": "currentSize",
                "bVar6": "flag2",
                "auVar7": "result"
            },
            "code": "\nundefined  [16]\nexpandArray_00109c2e(long array,long value,ulong newSize,int flag,undefined4 *outData,\n            undefined8 param6)\n\n{\n  long newElement;\n  long *currentElement;\n  long remainingSpace;\n  undefined *ptr;\n  ulong currentSize;\n  byte flag2;\n  undefined result [16];\n  \n  flag2 = 0;\n  newSize = newSize & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= newSize) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= newSize; currentSize = currentSize * 2) {\n    }\n    newElement = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newElement;\n    ptr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newElement);\n    for (remainingSpace = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingSpace != 0; remainingSpace = remainingSpace + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag2 * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  currentElement = (long *)(newSize * 0x18 + *(long *)(array + 0x1a8));\n  if (*currentElement == 0) {\n    newElement = *(long *)(array + 0x68);\n    *currentElement = newElement;\n    *(long *)(array + 0x68) = newElement + 1;\n    currentElement[1] = value;\n    *(int *)(currentElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *outData;\n  }\n  else {\n    *outData = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  result._8_8_ = param6;\n  result._0_8_ = *currentElement;\n  return result;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "expand_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage"
            },
            "code": "\nvoid displayErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_file_to_namespace_00112996",
                "param_1": "file",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 addFileToNamespace_00112996(long file,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(file + 8) != 0) && (*(long *)(file + 0x10) != 0)) {\n    offset = *(long *)(file + 0x10) + 0x10;\n    if (*(long *)(file + 0x20) != 0) {\n      offset = *(long *)(file + 0x20) + 0x28;\n    }\n    result = FUN_00112925(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_file_to_namespace_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "find_or_create_class_0010c7a0",
                "param_1": "classList",
                "param_2": "className",
                "param_3": "typeKind",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "classId",
                "lVar3": "classListPtr",
                "piVar4": "classListEntry",
                "__s1": "entryClassName",
                "cVar5": "found",
                "iVar6": "count",
                "puVar7": "newEntry",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] findOrCreateClass_0010c7a0(long classList,char *className,int *typeKind,undefined8 param4)\n\n{\n  undefined8 result;\n  uint classId;\n  long classListPtr;\n  int *classListEntry;\n  char *entryClassName;\n  char found;\n  int count;\n  undefined8 *newEntry;\n  undefined returnValue [16];\n  \n  if (3 < *typeKind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  classListPtr = *(long *)(typeKind + 4);\n  newEntry = (undefined8 *)(ulong)*(uint *)(classListPtr + 0xc);\n  if (*(uint *)(classListPtr + 0xc) <= *(uint *)(classList + 0x38)) {\n    for (newEntry = *(undefined8 **)(classList + 0x50); newEntry != (undefined8 *)0x0;\n        newEntry = (undefined8 *)*newEntry) {\n      classListEntry = (int *)newEntry[1];\n      if (*classListEntry == *typeKind) {\n        entryClassName = (char *)newEntry[2];\n        if (className == (char *)0x0) {\n          if (entryClassName == (char *)0x0) {\nLAB_0010c82c:\n            found = FUN_0010922b(classList,classListEntry,typeKind);\n            if (found != '\\0') {\n              classId = *(uint *)(*(long *)(newEntry[1] + 0x10) + 0xc);\n              newEntry = (undefined8 *)(ulong)classId;\n              *(uint *)(classListPtr + 0xc) = classId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((entryClassName != (char *)0x0) && (*entryClassName == *className)) &&\n                (count = strcmp(entryClassName,className), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(classList + 0x34) + 1;\n    *(int *)(classList + 0x34) = count;\n    *(int *)(classListPtr + 0xc) = count;\n    newEntry = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(classList + 0x50);\n    newEntry[2] = className;\n    *(undefined8 **)(classList + 0x50) = newEntry;\n    *newEntry = result;\n    newEntry[1] = typeKind;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)newEntry >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "find_or_create_class_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "arg1",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "uVar1": "var1",
                "uVar2": "var2",
                "pplVar3": "ptrToPtr1",
                "ppcVar4": "ptrToCharPtr1",
                "ppcVar5": "ptrToCharPtr2",
                "lVar6": "var3",
                "lVar7": "var4",
                "lVar8": "var5",
                "pcVar9": "charPtr1",
                "pcVar10": "charPtr2",
                "cVar11": "var6",
                "bVar12": "result",
                "iVar13": "var7",
                "uVar14": "arg1_1",
                "uVar15": "arg1_2",
                "puVar16": "ptrToArg1",
                "puVar17": "ptrToArg2",
                "plVar18": "ptrVal1",
                "lVar19": "var8",
                "plVar20": "ptrVal2",
                "plVar21": "ptrVal3",
                "lVar22": "var9",
                "local_70": "localPtr1",
                "local_58": "localPtr2",
                "plStack_50": "stackPtr1",
                "local_48": "localPtr3"
            },
            "code": "\nbyte checkEquality_0010922b(long arg1,long *ptr1,long *ptr2)\n\n{\n  uint var1;\n  uint var2;\n  long **ptrToPtr1;\n  char **ptrToCharPtr1;\n  char **ptrToCharPtr2;\n  long var3;\n  long var4;\n  long var5;\n  char *charPtr1;\n  char *charPtr2;\n  char var6;\n  byte result;\n  int var7;\n  undefined8 arg1_1;\n  undefined8 arg1_2;\n  undefined8 *ptrToArg1;\n  undefined8 *ptrToArg2;\n  long *ptrVal1;\n  long var8;\n  long *ptrVal2;\n  long *ptrVal3;\n  long var9;\n  long *localPtr1;\n  undefined8 *localPtr2;\n  long *stackPtr1;\n  long *localPtr3;\n  \n  ptrVal1 = ptr2;\n  if (ptr1 == (long *)0x0) {\nLAB_00109241:\n    return ptr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptrVal1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    var1 = *(uint *)ptr1;\n    if (var1 == 1) goto code_r0x00109263;\n    while (var2 = *(uint *)ptr2, var2 == 1) {\n      ptr2 = **(long ***)ptr2[2];\n      if (ptr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptr1 == ptr2) {\n      return true;\n    }\n    if (var1 != 0x16) break;\n    if (var2 != 0x17) goto LAB_001092cb;\n    ptr1 = *(long **)(ptr1[2] + 8);\n    if (ptr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((var1 == 0x17) && (var2 == 0x16)) {\n    ptr2 = *(long **)(ptr2[2] + 8);\n    ptrVal1 = ptr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptr1 != *ptr2) {\n    return false;\n  }\n  if (var1 == 3) {\n    return *(char *)(ptr1 + 2) == *(char *)(ptr2 + 2);\n  }\n  if (var1 < 4) {\n    if (var1 == 2) {\n      return true;\n    }\n  }\n  else if (var1 - 4 < 3) {\n    return true;\n  }\n  localPtr2 = *(undefined8 **)(arg1 + 0x58);\n  for (ptrToArg2 = localPtr2; ptrToArg2 != (undefined8 *)0x0; ptrToArg2 = (undefined8 *)*ptrToArg2) {\n    if (((long *)ptrToArg2[1] == ptr1) && ((long *)ptrToArg2[2] == ptr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(arg1 + 0x58) = &localPtr2;\n  stackPtr1 = ptr1;\n  localPtr3 = ptr2;\n  switch(var1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptrVal1 = (long *)ptr1[2];\n    ptrToPtr1 = (long **)ptr2[2];\n    if (ptrVal1 == (long *)0x0) {\n      result = ptrToPtr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrToPtr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(arg1 + 0x38) < *(uint *)((long)ptrVal1 + 0xc)) &&\n       (*(uint *)((long)ptrVal1 + 0xc) == *(uint *)((long)ptrToPtr1 + 0xc))) goto LAB_001097af;\n    ptrToArg2 = (undefined8 *)*ptrVal1;\n    localPtr1 = *ptrToPtr1;\n    if (((ptrToArg2 == (undefined8 *)0x0) == (localPtr1 == (long *)0x0)) &&\n       ((((ptrVal1[2] == 0) == (ptrToPtr1[2] == (long *)0x0) &&\n         ((ptrVal1[3] == 0) == (ptrToPtr1[3] == (long *)0x0))) &&\n        ((ptrVal1[4] == 0) == (ptrToPtr1[4] == (long *)0x0))))) {\n      if (ptrToArg2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptrVal1[4] != 0) &&\n           (var6 = checkEquality_0010922b(arg1,ptrVal1[4],ptrToPtr1[4]), var6 == '\\0'))\n        goto LAB_00109382;\n        ptrVal3 = (long *)ptrVal1[2];\n        if (ptrVal3 == (long *)0x0) {\nLAB_00109540:\n          ptrToArg2 = (undefined8 *)ptrVal1[3];\n          if (ptrToArg2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptrVal1 = ptrToPtr1[3];\n          while( true ) {\n            ptrToCharPtr2 = (char **)*ptrToArg2;\n            if (ptrToCharPtr2 == (char **)0x0) {\n              result = *ptrVal1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrToCharPtr1 = (char **)*ptrVal1;\n            if (ptrToCharPtr1 == (char **)0x0) break;\n            if ((**ptrToCharPtr2 != **ptrToCharPtr1) || (var7 = strcmp(*ptrToCharPtr2,*ptrToCharPtr1), var7 != 0))\n            break;\n            charPtr1 = ptrToCharPtr2[1];\n            charPtr2 = ptrToCharPtr1[1];\n            if ((charPtr1 == (char *)0x0) != (charPtr2 == (char *)0x0)) break;\n            if (charPtr1 != (char *)0x0) {\n              var9 = 0;\n              while( true ) {\n                ptrToCharPtr2 = *(char ***)(charPtr1 + var9);\n                ptrToCharPtr1 = *(char ***)(charPtr2 + var9);\n                if (ptrToCharPtr2 == (char **)0x0) break;\n                if (ptrToCharPtr1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrToCharPtr2 != **ptrToCharPtr1) ||\n                     ((((ulong)ptrToCharPtr2[2] ^ (ulong)ptrToCharPtr1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrToCharPtr2[3] != ptrToCharPtr1[3] ||\n                     ((((ptrToCharPtr2[4] == (char *)0x0) != (ptrToCharPtr1[4] == (char *)0x0) ||\n                       (var7 = strcmp(*ptrToCharPtr2,*ptrToCharPtr1), var7 != 0)) ||\n                      (var6 = checkEquality_0010922b(arg1,ptrToCharPtr2[1],ptrToCharPtr1[1]), var6 == '\\0')))))) ||\n                   ((ptrToCharPtr2[4] != (char *)0x0 &&\n                    (var6 = checkEquality_0010922b(arg1,ptrToCharPtr2[4],ptrToCharPtr1[4]), var6 == '\\0'))))\n                goto LAB_00109382;\n                var9 = var9 + 8;\n              }\n              if (ptrToCharPtr1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptrToArg2 = ptrToArg2 + 1;\n            ptrVal1 = ptrVal1 + 1;\n          }\n        }\n        else {\n          ptrVal2 = ptrToPtr1[2];\n          for (; ptrToArg2 = (undefined8 *)*ptrVal3, ptrToArg2 != (undefined8 *)0x0;\n              ptrVal3 = ptrVal3 + 1) {\n            ptrToArg1 = (undefined8 *)*ptrVal2;\n            if ((((ptrToArg1 == (undefined8 *)0x0) ||\n                 (((ptrToArg2[1] ^ ptrToArg1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptrToArg2 + 2) != *(int *)(ptrToArg1 + 2))) ||\n               (var6 = checkEquality_0010922b(arg1,*ptrToArg2,*ptrToArg1), var6 == '\\0'))\n            goto LAB_00109382;\n            ptrVal2 = ptrVal2 + 1;\n          }\n          if (*ptrVal2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrToCharPtr2 = (char **)*ptrToArg2, ptrToCharPtr2 != (char **)0x0; ptrToArg2 = ptrToArg2 + 1) {\n          ptrToCharPtr1 = (char **)*localPtr1;\n          if (ptrToCharPtr1 == (char **)0x0) goto LAB_00109382;\n          charPtr1 = *ptrToCharPtr1;\n          charPtr2 = *ptrToCharPtr2;\n          if ((*charPtr2 != *charPtr1) ||\n             ((((ulong)ptrToCharPtr2[2] ^ (ulong)ptrToCharPtr1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrToCharPtr2 + 0x14) == '\\0') {\n            if (ptrToCharPtr2[3] == ptrToCharPtr1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          var7 = strcmp(ptrToCharPtr2[3],ptrToCharPtr1[3]);\n          if (var7 != 0) goto LAB_00109382;\nLAB_00109480:\n          var7 = strcmp(charPtr2,charPtr1);\n          if (((var7 != 0) || (ptrToCharPtr2[1] == (char *)0x0)) || (ptrToCharPtr1[1] == (char *)0x0))\n          goto LAB_00109382;\n          arg1_1 = FUN_00112b6e(ptrToCharPtr1[1],0);\n          arg1_2 = FUN_00112b6e(ptrToCharPtr2[1],0);\n          var6 = checkEquality_0010922b(arg1,arg1_2,arg1_1);\n          if (var6 == '\\0') goto LAB_00109382;\n          localPtr1 = localPtr1 + 1;\n        }\n        if (*localPtr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptrVal1 = (long *)ptr1[2];\n    ptrVal3 = (long *)ptr2[2];\n    if (ptrVal1 == (long *)0x0) {\n      result = ptrVal3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrVal3 == (long *)0x0) goto LAB_00109382;\n    var9 = *ptrVal1;\n    var3 = *ptrVal3;\n    var8 = 0;\n    var4 = ptrVal1[1];\n    var5 = ptrVal3[1];\n    do {\n      charPtr1 = *(char **)(var9 + var8);\n      if (charPtr1 == (char *)0x0) {\n        result = *(long *)(var3 + var8) == 0;\n        goto LAB_001099c1;\n      }\n      charPtr2 = *(char **)(var3 + var8);\n      if (((charPtr2 == (char *)0x0) || (*charPtr1 != *charPtr2)) ||\n         (*(long *)(var4 + var8) != *(long *)(var5 + var8))) break;\n      var7 = strcmp(charPtr1,charPtr2);\n      var8 = var8 + 8;\n    } while (var7 == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(arg1,ptr1[2],ptr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptr1[2] + 2) == *(char *)((undefined8 *)ptr2[2] + 2)) &&\n       (var6 = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n       var6 != '\\0')) {\n      ptrVal1 = *(long **)(ptr1[2] + 8);\n      ptrVal3 = *(long **)(ptr2[2] + 8);\n      if ((ptrVal1 == (long *)0x0) == (ptrVal3 == (long *)0x0)) {\n        if (ptrVal1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptrVal1 != 0 && (*ptrVal3 != 0)) &&\n               (var6 = checkEquality_0010922b(arg1), var6 != '\\0'))) {\n          ptrVal1 = ptrVal1 + 1;\n          ptrVal3 = ptrVal3 + 1;\n        }\nLAB_0010995d:\n        if (*ptrVal1 != 0) goto LAB_00109964;\n        result = *ptrVal3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptrToArg2 = (undefined8 *)ptr2[2];\n    ptrToArg1 = (undefined8 *)ptr1[2];\n    result = 0;\n    if ((ptrToArg1[1] == ptrToArg2[1]) && (ptrToArg1[2] == ptrToArg2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(arg1,*ptrToArg1,*ptrToArg2);\n    }\n    break;\n  case 0x10:\n    ptrToArg2 = (undefined8 *)ptr2[2];\n    ptrToArg1 = (undefined8 *)ptr1[2];\n    result = 0;\n    if (((ptrToArg1[2] == ptrToArg2[2]) && (ptrToArg1[3] == ptrToArg2[3])) &&\n       (*(char *)(ptrToArg1 + 4) == *(char *)(ptrToArg2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptrToArg2 = (undefined8 *)ptr2[2];\n    ptrToArg1 = (undefined8 *)ptr1[2];\n    result = 0;\n    if (*(char *)(ptrToArg1 + 1) == *(char *)(ptrToArg2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    var6 = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]);\n    result = 0;\n    if (var6 != '\\0') {\n      result = checkEquality_0010922b(arg1,*(undefined8 *)(ptr1[2] + 8),*(undefined8 *)(ptr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptr1[2] + 3) == *(char *)((undefined8 *)ptr2[2] + 3)) &&\n        (var6 = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n        var6 != '\\0')) &&\n       (var6 = checkEquality_0010922b(arg1,*(undefined8 *)(ptr1[2] + 8),\n                              *(undefined8 *)(ptr2[2] + 8)), var6 != '\\0')) {\n      ptrVal1 = *(long **)(ptr1[2] + 0x10);\n      ptrVal3 = *(long **)(ptr2[2] + 0x10);\n      if ((ptrVal1 == (long *)0x0) == (ptrVal3 == (long *)0x0)) {\n        if (ptrVal1 != (long *)0x0) {\n          while (((*ptrVal1 != 0 && (*ptrVal3 != 0)) &&\n                 (var6 = checkEquality_0010922b(arg1), var6 != '\\0'))) {\n            ptrVal1 = ptrVal1 + 1;\n            ptrVal3 = ptrVal3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptrVal1 = (long *)ptr2[2];\n    ptrVal3 = (long *)ptr1[2];\n    var7 = strcmp(*(char **)(*ptrVal3 + 8),*(char **)(*ptrVal1 + 8));\n    result = 0;\n    if (var7 == 0) {\n      result = checkEquality_0010922b(arg1,ptrVal3[1],ptrVal1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(arg1 + 0x58) = localPtr2;\n  return result;\ncode_r0x00109263:\n  ptr1 = **(long ***)ptr1[2];\n  ptrVal1 = ptr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "FUN_0010922b",
                "strcmp",
                "FUN_00112b6e",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_archive_001052a2",
                "param_1": "undefined_1",
                "param_2": "undefined_2",
                "param_3": "pathname",
                "cVar1": "character",
                "iVar2": "integer_1",
                "iVar3": "integer_2",
                "ppcVar4": "pointer_to_pointer_to_character",
                "lVar5": "long_1",
                "uVar6": "undefined_3",
                "__format": "format_string",
                "puVar7": "pointer_to_undefined_4",
                "piVar8": "pointer_to_integer",
                "uVar9": "undefined_5",
                "in_RAX": "value_of_RAX",
                "pcVar10": "current_character",
                "ppcVar11": "pointer_to_pointer_to_character_2",
                "lVar12": "long_2",
                "pvVar13": "pointer_to_void",
                "pcVar14": "pointer_to_function",
                "lVar15": "long_3",
                "pcVar16": "current_character_2",
                "psVar17": "pointer_to_stat",
                "unaff_R14": "undefined_6",
                "unaff_R15": "pointer_to_pointer_to_character_3",
                "bVar18": "byte",
                "unaff_retaddr": "undefined_7",
                "in_stack_00000008": "in_stack_parameter_1",
                "in_stack_00000010": "in_stack_1",
                "in_stack_00000018": "in_stack_parameter_2",
                "in_stack_00000020": "in_stack_parameter_3",
                "in_stack_00000028": "in_stack_parameter_4",
                "in_stack_00000030": "in_stack_parameter_5",
                "in_stack_000000f8": "in_stack_parameter_6",
                "in_stack_00000110": "in_stack_2"
            },
            "code": "\nvoid extractArchive_001052a2(undefined8 undefined_1,undefined8 undefined_2,char *pathname)\n\n{\n  char character;\n  int integer_1;\n  int integer_2;\n  char **pointer_to_pointer_to_character;\n  long long_1;\n  undefined8 undefined_3;\n  char *format_string;\n  undefined8 *pointer_to_undefined_4;\n  int *pointer_to_integer;\n  undefined8 undefined_5;\n  long value_of_RAX;\n  char *current_character;\n  char **pointer_to_pointer_to_character_2;\n  long long_2;\n  void *pointer_to_void;\n  code *pointer_to_function;\n  long long_3;\n  char *current_character_2;\n  stat *pointer_to_stat;\n  undefined8 *undefined_6;\n  char **pointer_to_pointer_to_character_3;\n  byte byte;\n  undefined8 undefined_7;\n  undefined8 *in_stack_parameter_1;\n  long *in_stack_1;\n  char *in_stack_parameter_2;\n  undefined8 *in_stack_parameter_3;\n  undefined8 in_stack_parameter_4;\n  undefined8 in_stack_parameter_5;\n  uint in_stack_parameter_6;\n  long in_stack_2;\n  \n  byte = 0;\n  current_character = (char *)(value_of_RAX + 1);\n  do {\n    if (*current_character == '/') {\n      extractArchive_001052a2();\n      return;\n    }\n    while (*current_character == '\\0') {\n      current_character = (char *)concat(in_stack_parameter_2,&DAT_0011b47d);\n      integer_2 = stat(current_character,(stat *)&stack0x00000050);\n      pointer_to_undefined_4 = undefined_6;\n      if (-1 < integer_2) {\n        long_2 = FUN_0011a0e0(current_character);\n        free(current_character);\n        if (long_2 == 0) {\n          pointer_to_integer = __errno_location();\n          current_character = strerror(*pointer_to_integer);\n          undefined_5 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(undefined_5,current_character);\n          goto LAB_00104e93;\n        }\n        pointer_to_undefined_4 = (undefined8 *)xmalloc(0x18);\n        current_character = *pointer_to_pointer_to_character_3;\n        *pointer_to_undefined_4 = undefined_6;\n        pointer_to_undefined_4[2] = 0;\n        pointer_to_undefined_4[1] = long_2;\n        current_character = (char *)concat(long_2,&DAT_0011b47d,current_character);\n      }\n      integer_2 = 0;\n      if (DAT_001279cb != '\\0') {\n        pointer_to_stat = (stat *)&stack0x00000050;\n        for (long_2 = 0x24; long_2 != 0; long_2 = long_2 + -1) {\n          *(undefined4 *)&pointer_to_stat->st_dev = 0;\n          pointer_to_stat = (stat *)((long)pointer_to_stat + (ulong)byte * -8 + 4);\n        }\n        pointer_to_pointer_to_character_2 = (char **)pointer_to_pointer_to_character_3[0x1d];\n        if ((char **)pointer_to_pointer_to_character_3[0x1d] == (char **)0x0) {\n          pointer_to_pointer_to_character_2 = pointer_to_pointer_to_character_3;\n        }\n        integer_2 = (**(code **)(pointer_to_pointer_to_character_2[1] + 0x1e8))(pointer_to_pointer_to_character_3,(stat *)&stack0x00000050);\n        if (integer_2 != 0) {\n          current_character_2 = *pointer_to_pointer_to_character_3;\n          undefined_5 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(undefined_5,current_character_2);\n        }\n      }\n      undefined_6 = (undefined8 *)xmalloc(0x18);\n      undefined_6[1] = current_character;\n      *undefined_6 = pointer_to_undefined_4;\n      undefined_6[2] = 0;\n      character = bfd_check_format(pointer_to_pointer_to_character_3,1);\n      if (character == '\\0') {\n        undefined_5 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,pointer_to_pointer_to_character_3,0,undefined_5);\n        pointer_to_pointer_to_character_2 = (char **)bfd_openw(current_character,in_stack_parameter_4);\n        if (pointer_to_pointer_to_character_2 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        pointer_to_pointer_to_character = (char **)pointer_to_pointer_to_character_3[0x1d];\n        if ((char **)pointer_to_pointer_to_character_3[0x1d] == (char **)0x0) {\n          pointer_to_pointer_to_character = pointer_to_pointer_to_character_3;\n        }\n        integer_1 = (**(code **)(pointer_to_pointer_to_character[1] + 0x1e8))(pointer_to_pointer_to_character_3,&stack0x000000e0);\n        long_2 = in_stack_2;\n        if (integer_1 == 0) {\n          if (in_stack_2 < 0) {\n            undefined_5 = FUN_001125fa(pointer_to_pointer_to_character_3);\n            undefined_3 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(undefined_3,undefined_5);\n          }\n          else {\n            integer_1 = bfd_seek(pointer_to_pointer_to_character_3,0,0);\n            if (integer_1 == 0) {\n              if (DAT_001279c9 != '\\0') {\n                current_character_2 = *pointer_to_pointer_to_character_2;\n                undefined_5 = FUN_001125fa(pointer_to_pointer_to_character_3);\n                format_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,undefined_5,current_character_2);\n              }\n              pointer_to_void = (void *)xmalloc(0x2000);\n              for (; long_2 != 0; long_2 = long_2 - long_3) {\n                long_3 = 0x2000;\n                if (long_2 < 0x2001) {\n                  long_3 = long_2;\n                }\n                long_1 = bfd_bread(pointer_to_void,long_3,pointer_to_pointer_to_character_3);\n                pointer_to_pointer_to_character = pointer_to_pointer_to_character_3;\n                if ((long_3 != long_1) ||\n                   (long_1 = bfd_bwrite(pointer_to_void,long_3,pointer_to_pointer_to_character_2), pointer_to_pointer_to_character = pointer_to_pointer_to_character_2, long_3 != long_1\n                   )) {\n                  FUN_001126c0(0,pointer_to_pointer_to_character,0,0);\n                  free(pointer_to_void);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*pointer_to_pointer_to_character_2,in_stack_parameter_6 | 0x100);\n              free(pointer_to_void);\n              character = bfd_close_all_done(pointer_to_pointer_to_character_2);\n              if (character == '\\0') {\n                FUN_001126c0(current_character,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            undefined_5 = FUN_001125fa(pointer_to_pointer_to_character_3);\n            FUN_0011a110(undefined_5);\n          }\n        }\n        else {\n          FUN_001126c0(0,pointer_to_pointer_to_character_3,0,0);\n        }\nLAB_00104f00:\n        character = bfd_close_all_done(pointer_to_pointer_to_character_2);\n        if (character == '\\0') {\n          FUN_001126c0(current_character,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_character);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (in_stack_parameter_5._7_1_ == '\\0') {\n          pointer_to_pointer_to_character_2 = (char **)bfd_openw(current_character,*(undefined8 *)pointer_to_pointer_to_character_3[1]);\n        }\n        else {\n          pointer_to_pointer_to_character_2 = (char **)bfd_openw(current_character,in_stack_parameter_4);\n        }\n        if (pointer_to_pointer_to_character_2 == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(current_character,0,0,0);\n          goto LAB_00104e93;\n        }\n        character = FUNC_00114e50(pointer_to_pointer_to_character_3,pointer_to_pointer_to_character_2,undefined_7);\n        if (character == '\\0') {\n          integer_1 = bfd_get_arch(pointer_to_pointer_to_character_3);\n          if (integer_1 == 0) goto LAB_00104d75;\n          character = bfd_close_all_done(pointer_to_pointer_to_character_2);\n          if (character == '\\0') {\n            FUN_001126c0(current_character,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        character = bfd_close(pointer_to_pointer_to_character_2);\n        if (character == '\\0') {\n          FUN_001126c0(current_character,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (integer_2 == 0)) {\n          FUN_0011a350(current_character,(stat *)&stack0x00000050);\n        }\n        long_2 = bfd_openr(current_character,in_stack_parameter_4);\n        undefined_6[2] = long_2;\n        *in_stack_1 = long_2;\n        in_stack_1 = (long *)(long_2 + 0xf0);\n        pointer_to_pointer_to_character_2 = (char **)bfd_openr_next_archived_file(in_stack_parameter_3,pointer_to_pointer_to_character_3);\n        bfd_close(pointer_to_pointer_to_character_3);\n        pointer_to_pointer_to_character_3 = pointer_to_pointer_to_character_2;\n      }\n      if ((DAT_00127a20 != 0) || (pointer_to_pointer_to_character_3 == (char **)0x0)) {\n        *in_stack_1 = 0;\n        pointer_to_void = (void *)xstrdup(*in_stack_parameter_1);\n        if (DAT_00127a20 == 0) {\n          pointer_to_function = bfd_close;\n        }\n        else {\n          pointer_to_function = bfd_close_all_done;\n        }\n        character = (*pointer_to_function)(in_stack_parameter_1);\n        if (character == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(pointer_to_void,0,0,0);\n        }\n        free(pointer_to_void);\n        pointer_to_void = (void *)xstrdup(*in_stack_parameter_3);\n        character = bfd_close(in_stack_parameter_3);\n        if (character == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(pointer_to_void,0,0,0);\n        }\n        free(pointer_to_void);\n        goto LAB_00114b4b;\n      }\n      current_character = *pointer_to_pointer_to_character_3;\n      pathname = current_character;\n      if (*current_character == '/') goto LAB_0010527d;\n    }\n    current_character_2 = current_character;\n    if ((*current_character == '.') && (current_character_2 = current_character + 1, current_character[1] == '.')) {\n      current_character_2 = current_character + 2;\n      if ((current_character[2] == '\\0') || (current_character[2] == '/')) {\nLAB_0010527d:\n        undefined_5 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(undefined_5,pathname);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (undefined_6 != (undefined8 *)0x0) {\n          if (undefined_6[2] == 0) {\n            rmdir((char *)undefined_6[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)undefined_6[1]);\n          }\n          free((void *)undefined_6[1]);\n          pointer_to_undefined_4 = (undefined8 *)*undefined_6;\n          free(undefined_6);\n          undefined_6 = pointer_to_undefined_4;\n        }\n        rmdir(in_stack_parameter_2);\n        free(in_stack_parameter_2);\n        return;\n      }\n    }\n    for (; (current_character = current_character_2, *current_character_2 != '\\0' && (*current_character_2 != '/')); current_character_2 = current_character_2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "execute_command_0010e453",
                "param_1": "commandTable",
                "param_2": "command",
                "param_3": "arguments",
                "lVar1": "argAddress",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedCommand",
                "uVar4": "success",
                "lVar5": "counter",
                "ppcVar6": "argPtr",
                "lVar7": "offset"
            },
            "code": "\nundefined8 executeCommand_0010e453(long commandTable,char *command,char **arguments)\n\n{\n  long argAddress;\n  char result;\n  size_t length;\n  undefined2 *formattedCommand;\n  undefined8 success;\n  long counter;\n  char **argPtr;\n  long offset;\n  \n  if (arguments == (char **)0x0) {\n    if (command != (char *)0x0) {\n      length = strlen(command);\n      formattedCommand = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedCommand,\"xe%s:\",command);\nLAB_0010e578:\n      result = FUN_00109b52(commandTable,formattedCommand,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    success = 0;\n  }\n  else {\n    counter = 10;\n    argPtr = arguments;\n    if (command != (char *)0x0) {\n      length = strlen(command);\n      counter = length + 10;\n    }\n    for (; *argPtr != (char *)0x0; argPtr = argPtr + 1) {\n      length = strlen(*argPtr);\n      counter = counter + 0x14 + length;\n    }\n    formattedCommand = (undefined2 *)xmalloc(counter);\n    if (command == (char *)0x0) {\n      *formattedCommand = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(commandTable + 0x68);\n      *(long *)(commandTable + 0x68) = counter + 1;\n      sprintf((char *)formattedCommand,\"%s:T%ld=e\",command,counter);\n    }\n    offset = 0;\n    while( true ) {\n      argAddress = *(long *)((long)arguments + offset);\n      length = strlen((char *)formattedCommand);\n      if (argAddress == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedCommand + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedCommand + length) = 0x3b;\n    if (command == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(commandTable,0x80,0,0,formattedCommand);\n    if ((result == '\\0') || (result = FUN_00109cf4(commandTable,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedCommand);\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_command_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_execute_00109d5c",
                "param_1": "input_param",
                "lVar1": "result",
                "uVar2": "execution_result"
            },
            "code": "\nundefined8 check_and_execute_00109d5c(undefined8 input_param)\n\n{\n  long result;\n  undefined8 execution_result;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    execution_result = FUN_00109cf4(input_param,result,0);\n    return execution_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_execute_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_data_0010ed2c",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "param_3": "inputValue",
                "extraout_RDX": "extraValue",
                "in_R10": "additionalValue",
                "cVar1": "isValid",
                "iVar2": "counter",
                "uVar3": "result",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] updateData_0010ed2c(long dataPtr,ulong newValue,undefined8 inputValue)\n\n{\n  char isValid;\n  int counter;\n  undefined8 extraValue;\n  ulong result;\n  undefined8 additionalValue;\n  undefined returnValue [16];\n  \n  if (*(ulong *)(dataPtr + 0x1f0) < newValue) {\n    *(ulong *)(dataPtr + 0x1f0) = newValue;\n  }\n  if (*(long *)(dataPtr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(dataPtr + 0x1f8) != 0) {\n      counter = *(int *)(dataPtr + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)inputValue >> 8),1);\n      *(int *)(dataPtr + 0x1f8) = counter;\n      if (counter != 0) {\n        returnValue = FUN_0010e2f0(dataPtr,0xe0,0,newValue - *(long *)(dataPtr + 0x200),0,additionalValue);\n        return returnValue;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    isValid = FUN_0010e2f0(dataPtr,0xc0,0,*(long *)(dataPtr + 0x208),0);\n    if (isValid != '\\0') {\n      *(undefined8 *)(dataPtr + 0x208) = 0xffffffffffffffff;\n      inputValue = extraValue;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  returnValue._0_8_ = result & 0xffffffff;\n  returnValue._8_8_ = additionalValue;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_blocks_0011a1b0",
                "param_1": "block1",
                "param_2": "block2",
                "param_3": "size_param1",
                "param_4": "size_param2",
                "uVar1": "size_block1",
                "uVar2": "size_block2",
                "iVar3": "comparison_result",
                "extraout_var": "additional_variable",
                "uVar4": "final_result",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareMemoryBlocks_0011a1b0(ulong *block1,ulong *block2,undefined8 size_param1,undefined8 size_param2)\n\n{\n  ulong size_block1;\n  ulong size_block2;\n  int comparison_result;\n  undefined4 additional_variable;\n  ulong final_result;\n  undefined result [16];\n  \n  final_result = *block1;\n  if (*block2 <= *block1) {\n    final_result = *block2;\n  }\n  comparison_result = memcmp((void *)(block1[3] + 3),(void *)(block2[3] + 3),final_result - 3);\n  final_result = CONCAT44(additional_variable,comparison_result);\n  if (comparison_result == 0) {\n    size_block1 = block1[8];\n    if (size_block1 < block2[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      size_block2 = block2[8];\n      if (size_block2 < block1[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (block2[7] <= block1[7]) {\n          if (size_block2 < size_block1) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (size_block2 <= size_block1) {\n              if (block1[2] == 0x100) {\n                final_result = (ulong)-(uint)(block2[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(block2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = size_param2;\n  result._0_8_ = final_result;\n  return result;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_blocks_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_build_attributes_001163d0",
                "param_1": "param_dest",
                "param_2": "param_src",
                "param_3": "size",
                "param_4": "output",
                "uVar1": "result",
                "uVar2": "param_dest_0",
                "uVar3": "param_src_0",
                "uVar5": "reloc_upper_bound",
                "iVar6": "reloc_size",
                "uVar7": "error_message",
                "lVar8": "message_length",
                "__ptr": "reloc_buffer",
                "uVar9": "desc_size",
                "uVar10": "name_size",
                "uVar11": "note_type",
                "uVar12": "attr_size",
                "uVar13": "padded_size",
                "uVar14": "build_version",
                "uVar15": "note_name",
                "uVar16": "remaining_size",
                "puVar17": "current_entry",
                "puVar18": "note_start",
                "iVar21": "loop_counter",
                "puVar22": "current_pos",
                "puVar23": "entries",
                "uVar24": "attr_value",
                "__nmemb": "num_entries",
                "puVar25": "previous_entry",
                "bVar26": "byte_flag",
                "local_88": "version_1",
                "uStack_80": "version_2",
                "local_70": "latest_version",
                "local_68": "output_size",
                "local_60": "new_entries",
                "cVar19": "note_version",
                "puVar20": "note_value"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_build_attributes_001163d0(undefined8 *param_dest,undefined8 *param_src,ulong size,undefined *output)\n\n{\n  ulong result;\n  undefined8 param_dest_0;\n  undefined8 param_src_0;\n  bool bVar4;\n  ulong *preloc_upper_bound;\n  int reloc_size;\n  undefined8 error_message;\n  long message_length;\n  void *reloc_buffer;\n  ulong desc_size;\n  ulong name_size;\n  ulong note_type;\n  ulong attr_size;\n  undefined *reloc_buffer_00;\n  ulong padded_size;\n  ulong build_version;\n  ulong note_name;\n  ulong remaining_size;\n  ulong *current_entry;\n  undefined *note_start;\n  char note_version;\n  undefined *note_value;\n  int loop_counter;\n  undefined *current_pos;\n  ulong *entries;\n  ulong attr_value;\n  size_t num_entries;\n  ulong *previous_entry;\n  byte byte_flag;\n  ulong version_1;\n  ulong version_2;\n  ulong latest_version;\n  ulong output_size;\n  ulong *new_entries;\n  \n  byte_flag = 0;\n  message_length = bfd_get_reloc_upper_bound();\n  output_size = size;\n  if (0 < message_length) {\n    reloc_buffer = (void *)xmalloc(message_length);\n    message_length = bfd_canonicalize_reloc(param_dest,param_src,reloc_buffer,DAT_001278b0);\n    free(reloc_buffer);\n    if (message_length != 0) {\n      if (_DAT_00127a24 == 0) {\n        param_dest_0 = *param_dest;\n        param_src_0 = *param_src;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(error_message,param_dest_0,param_src_0);\n      }\n      new_entries = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  new_entries = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  version_1 = 0;\n  latest_version = 0;\n  remaining_size = size;\n  note_name = 0;\n  entries = new_entries;\n  build_version = 0;\n  current_pos = output;\n  while (0xb < remaining_size) {\n    name_size = (**(code **)(param_dest[1] + 0x40))(current_pos);\n    *entries = name_size;\n    name_size = (**(code **)(param_dest[1] + 0x40))(current_pos + 4);\n    entries[1] = name_size;\n    note_type = (**(code **)(param_dest[1] + 0x40))(current_pos + 8);\n    name_size = *entries;\n    entries[2] = note_type;\n    attr_size = entries[1];\n    padded_size = name_size + 3 & 0xfffffffffffffffc;\n    entries[6] = padded_size;\n    if (attr_size != (attr_size + 3 & 0xfffffffffffffffc)) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = padded_size + attr_size + 0xc;\n    if (remaining_size < result) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (name_size < 2) {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    entries[3] = (ulong)(current_pos + 0xc);\n    entries[4] = (ulong)(current_pos + padded_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (padded_size + attr_size));\n    if (name_size != 2) {\n      if (current_pos[0xc] == '$') {\n        if ((current_pos[0xd] == '\\x01') && (current_pos[0xe] == '1')) {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < name_size) && (current_pos[0xc] == 'G')) && (current_pos[0xd] == 'A')) &&\n              ((current_pos[0xe] == '$' && (current_pos[0xf] == '\\x01')))) {\n        if (current_pos[0x10] == '2') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        if (current_pos[0x10] == '3') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        message_length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    desc_size = note_name;\n    attr_value = build_version;\n    if (attr_size == 0) {\n      if (note_type == 0x100) {\n        entries[7] = version_1;\nLAB_001164af:\n        attr_size = build_version;\n        attr_value = build_version;\n      }\n      else {\n        entries[7] = latest_version;\nLAB_0011669e:\n        desc_size = note_name;\n        attr_size = note_name;\n      }\n    }\n    else {\n      if (attr_size != 0x10) {\n        if (attr_size < 0x11) {\n          if (attr_size == 4) {\n            note_type = (**(code **)(param_dest[1] + 0x40))();\n            attr_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (attr_size == 8) {\n            remaining_size = FUN_001086af();\n            return remaining_size;\n          }\n        }\n        message_length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type = (**(code **)(param_dest[1] + 0x28))(current_pos + padded_size + 0xc);\n      attr_size = (**(code **)(param_dest[1] + 0x28))();\n      if (attr_size < note_type) {\n        note_type = attr_size;\n      }\nLAB_00116631:\n      if (entries[2] == 0x100) {\n        if (note_type == 0) {\n          note_type = version_1;\n        }\n        name_size = *entries;\n        entries[7] = note_type;\n        attr_value = attr_size;\n        version_1 = note_type;\n        if (attr_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type == 0) {\n          note_type = latest_version;\n        }\n        name_size = *entries;\n        entries[7] = note_type;\n        desc_size = attr_size;\n        latest_version = note_type;\n        if (attr_size == 0) goto LAB_0011669e;\n      }\n    }\n    entries[8] = attr_size;\n    if (*(char *)((entries[3] - 1) + name_size) != '\\0') {\n      message_length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    entries = entries + 9;\n    note_name = desc_size;\n    build_version = attr_value;\n    current_pos = current_pos + result;\n  }\n  if (remaining_size == 0) {\n    param_dest_0 = *param_dest;\n    param_src_0 = *param_src;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(error_message,param_dest_0,param_src_0);\n    num_entries = ((long)entries - (long)new_entries >> 3) * -0x71c71c71c71c71c7;\n    qsort(new_entries,num_entries,0x48,FUN_0011a1b0);\n    for (current_entry = new_entries; current_entry < entries; current_entry = current_entry + 9) {\n      remaining_size = current_entry[2];\n      if (remaining_size != 0) {\n        note_name = current_entry[7];\n        build_version = current_entry[8];\n        previous_entry = current_entry;\n        loop_counter = 0;\n        if (note_name == build_version) {\n          current_entry[2] = 0;\n        }\n        else {\n          do {\n            do {\n              preloc_upper_bound = previous_entry;\n              previous_entry = preloc_upper_bound + -9;\n              if (previous_entry < new_entries) goto LAB_001167f5;\n              name_size = preloc_upper_bound[-7];\n            } while (name_size == 0);\n            if ((*previous_entry != *current_entry) ||\n               (reloc_size = memcmp((void *)preloc_upper_bound[-6],(void *)current_entry[3],*current_entry), reloc_size != 0)) break;\n            attr_size = preloc_upper_bound[-2];\n            note_type = preloc_upper_bound[-1];\n            if (note_name == attr_size) {\n              if (build_version == note_type) {\n                current_entry[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (build_version <= note_type) {\n                current_entry[2] = 0;\n                break;\n              }\n              if (note_type < note_name) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type) || (note_name <= (note_type + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (name_size == 0x101)) {\n                if (note_type <= build_version) {\n                  note_type = build_version;\n                }\n                if (attr_size < note_name) {\n                  note_name = attr_size;\n                }\n                preloc_upper_bound[-1] = note_type;\n                preloc_upper_bound[-2] = note_name;\n                current_entry[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (attr_size <= note_name) goto LAB_001167a6;\n              if (note_type < note_name) goto LAB_0010852c;\n              if (build_version < note_name) {\n                if ((0xfffffffffffffff0 < build_version) || (attr_size <= (build_version + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (build_version != note_type) goto LAB_001167b8;\n            }\nFUN_00116852:\n            bVar4 = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (bVar4);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(new_entries,num_entries,0x48,FUN_0011a250);\n    reloc_buffer_00 = (undefined *)xmalloc(size * 2);\n    version_2 = 0;\n    latest_version = 0;\n    current_pos = reloc_buffer_00;\n    for (current_entry = new_entries; current_entry < entries; current_entry = current_entry + 9) {\n      if (current_entry[2] != 0) {\n        note_start = current_pos + 0xc;\n        if ((current_entry[7] == latest_version) && (current_entry[8] == version_2)) {\n          (**(code **)(param_dest[1] + 0x50))(*current_entry,current_pos);\n          (**(code **)(param_dest[1] + 0x50))(0,current_pos + 4);\n          (**(code **)(param_dest[1] + 0x50))(current_entry[2],current_pos + 8);\n          note_name = current_entry[6];\n          remaining_size = *current_entry;\n          current_pos = (undefined *)current_entry[3];\n          note_value = note_start;\n          for (build_version = remaining_size; build_version != 0; build_version = build_version - 1) {\n            *note_value = *current_pos;\n            current_pos = current_pos + (ulong)byte_flag * -2 + 1;\n            note_value = note_value + (ulong)byte_flag * -2 + 1;\n          }\n          if (remaining_size < note_name) {\n            for (message_length = note_name - remaining_size; message_length != 0; message_length = message_length + -1) {\n              *note_value = 0;\n              note_value = note_value + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          current_pos = note_start + note_name;\n        }\n        else {\n          (**(code **)(param_dest[1] + 0x50))();\n          if (*(int *)(param_dest[1] + 8) == 5) {\n            note_version = (*(char *)(param_dest[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_version = '\\b';\n          }\n          (**(code **)(param_dest[1] + 0x50))(note_version,current_pos + 4);\n          (**(code **)(param_dest[1] + 0x50))(current_entry[2],current_pos + 8);\n          remaining_size = *current_entry;\n          current_pos = (undefined *)current_entry[3];\n          note_value = note_start;\n          for (note_name = remaining_size; note_name != 0; note_name = note_name - 1) {\n            *note_value = *current_pos;\n            current_pos = current_pos + (ulong)byte_flag * -2 + 1;\n            note_value = note_value + (ulong)byte_flag * -2 + 1;\n          }\n          note_name = current_entry[6];\n          if (remaining_size < note_name) {\n            for (message_length = note_name - remaining_size; message_length != 0; message_length = message_length + -1) {\n              *note_value = 0;\n              note_value = note_value + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          message_length = param_dest[1];\n          note_start = note_start + note_name;\n          current_pos = note_start + 8;\n          if ((*(int *)(message_length + 8) == 5) && (*(char *)(param_dest[0x22] + 4) == '\\x02')) {\n            (**(code **)(message_length + 0x38))(current_entry[7],note_start);\n            (**(code **)(param_dest[1] + 0x38))(current_entry[8],current_pos);\n            current_pos = note_start + 0x10;\n          }\n          else {\n            (**(code **)(message_length + 0x50))(current_entry[7],note_start);\n            (**(code **)(param_dest[1] + 0x50))(current_entry[8],note_start + 4);\n          }\n          latest_version = current_entry[7];\n          version_2 = current_entry[8];\n        }\n      }\n    }\n    note_name = (long)current_pos - (long)reloc_buffer_00;\n    remaining_size = note_name;\n    current_pos = reloc_buffer_00;\n    output_size = size;\n    if (note_name < size) {\n      for (; output_size = note_name, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output = *current_pos;\n        current_pos = current_pos + (ulong)byte_flag * -2 + 1;\n        output = output + (ulong)byte_flag * -2 + 1;\n      }\n    }\n    free(reloc_buffer_00);\n  }\n  else {\n    message_length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (message_length != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param_dest,param_src,message_length);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(new_entries);\n  return output_size;\n}\n\n",
            "called": [
                "xcalloc",
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_stripped_help_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "versionNumber",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printStrippedHelp_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 versionNumber;\n  char *localizedString;\n  \n  versionNumber = DAT_001275e0;\n  localizedString = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedString,versionNumber);\n  localizedString = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_stripped_help_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_decompiled_code_00108c86",
                "param_1": "input_value",
                "cVar1": "first_check",
                "iVar2": "second_check",
                "sVar3": "string_length",
                "puVar4": "new_string",
                "lVar5": "offset",
                "__s": "input_string",
                "__s1": "architecture_string",
                "puVar6": "new_string_pointer",
                "uVar7": "return_value",
                "bVar8": "byte_value"
            },
            "code": "\nundefined8 extract_decompiled_code_00108c86(long *input_value)\n\n{\n  char first_check;\n  int second_check;\n  size_t string_length;\n  undefined2 *new_string;\n  long offset;\n  char *input_string;\n  char *architecture_string;\n  undefined2 *new_string_pointer;\n  undefined8 return_value;\n  byte byte_value;\n  \n  byte_value = 0;\n  offset = *input_value;\n  input_string = (char *)(offset + 4);\n  first_check = FUN_00113fb0(input_string,&DAT_0011b73b);\n  if (first_check == '\\0') {\n    first_check = FUN_00113fb0(input_string,\"bsdrv-\");\n    if (first_check == '\\0') {\n      first_check = FUN_00113fb0(input_string,\"rtdrv-\");\n      if (first_check == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  new_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture_string = input_string + 4;\n  new_string_pointer = new_string;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)new_string_pointer = *input_string;\n    input_string = input_string + (ulong)byte_value * -2 + 1;\n    new_string_pointer = (undefined2 *)((long)new_string_pointer + (ulong)byte_value * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  second_check = strcmp(architecture_string,\"ia32\");\n  if (second_check == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    second_check = strcmp(architecture_string,\"x86_64\");\n    if (second_check == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      second_check = strcmp(architecture_string,\"aarch64\");\n      if (second_check == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_value = (long)new_string;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_decompiled_code_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "unaff_R12": "ptr_to_status",
                "unaff_R14": "ptr_to_bfd",
                "bfd_close_all_done": "close_all_bfds"
            },
            "code": "\nundefined4 close_bfd_and_return_status_001053d5(void)\n\n{\n  long ptr_to_status;\n  undefined8 *ptr_to_bfd;\n  \n  FUN_0011a110(*ptr_to_bfd);\n  *(undefined4 *)(ptr_to_status + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptr_to_status + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "close_bfd_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "eaxFlag",
                "unaff_EBP": "ebpFlag",
                "unaff_R14": "r14Flag",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint eaxFlag;\n  undefined8 errorMessage;\n  uint ebpFlag;\n  long r14Flag;\n  \n  if ((eaxFlag & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((eaxFlag & 8) == 0) || ((ebpFlag & 0x10) == 0)) && ((ebpFlag & 0x18) != 0x18)) {\n    if ((((eaxFlag & 0x20) == 0) || ((ebpFlag & 0x40) == 0)) && ((ebpFlag & 0x60) != 0x60)) {\n      *(uint *)(r14Flag + 0x14) = eaxFlag | ebpFlag;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "size",
                "puVar1": "destination",
                "lVar2": "index",
                "puVar3": "destPtr",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int size)\n\n{\n  undefined *destination;\n  long index;\n  undefined *destPtr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(size + 1));\n  destPtr = destination;\n  for (index = (long)size; index != 0; index = index + -1) {\n    *destPtr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destPtr = destPtr + (ulong)increment * -2 + 1;\n  }\n  destination[size] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slotsList",
                "param_2": "slotIndex",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "errorMessage",
                "plVar2": "newSlot",
                "lVar3": "lIndex",
                "uVar5": "uIndex",
                "bVar6": "tempByte",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16] allocateAndInitializeSlots_0010da0b(long **slotsList,ulong slotIndex,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 errorMessage;\n  long *newSlot;\n  long lIndex;\n  long lVar4;\n  ulong uIndex;\n  byte tempByte;\n  undefined returnValue [16];\n  \n  tempByte = 0;\n  uIndex = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)uIndex; uIndex = uIndex - 0x10) {\n      if (*slotsList == (long *)0x0) {\n        newSlot = (long *)xmalloc(0x88);\n        *slotsList = newSlot;\n        for (lIndex = 0x22; lIndex != 0; lIndex = lIndex + -1) {\n          *(undefined4 *)newSlot = 0;\n          newSlot = (long *)((long)newSlot + (ulong)tempByte * -8 + 4);\n        }\n      }\n      slotsList = (long **)*slotsList;\n    }\n    lIndex = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      lIndex = 0;\n    }\n    if (*slotsList == (long *)0x0) {\n      newSlot = (long *)xmalloc(0x88);\n      *slotsList = newSlot;\n      for (lVar4 = 0x22; lVar4 != 0; lVar4 = lVar4 + -1) {\n        *(undefined4 *)newSlot = 0;\n        newSlot = (long *)((long)newSlot + (ulong)tempByte * -8 + 4);\n      }\n    }\n    returnValue._8_8_ = arg4;\n    returnValue._0_8_ = *slotsList + slotIndex + lIndex + 1;\n    return returnValue;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "memoryBlock",
                "puVar2": "currentPointer",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *currentPointer;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  currentPointer = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)currentPointer = 0;\n    currentPointer = (undefined8 *)((long)currentPointer + (ulong)byteValue * -8 + 4);\n  }\n  *memoryBlock = input1;\n  *(undefined *)(memoryBlock + 1) = input2;\n  memoryBlock[2] = input3;\n  memoryBlock[3] = input4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  currentPointer = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = currentPointer;\n  *currentPointer = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_pointer_00109b2f",
                "param_1": "ptrAddress",
                "__ptr": "pointer",
                "puVar1": "returnValue"
            },
            "code": "\nundefined8 * extractAndFreePointer_00109b2f(long ptrAddress)\n\n{\n  undefined8 *pointer;\n  undefined8 *returnValue;\n  \n  pointer = *(undefined8 **)(ptrAddress + 0x60);\n  if (pointer != (undefined8 *)0x0) {\n    returnValue = (undefined8 *)pointer[1];\n    *(undefined8 *)(ptrAddress + 0x60) = *pointer;\n    free(pointer);\n    return returnValue;\n  }\n  return pointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e918",
                "FUN_0010a0e9",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a424",
                "FUN_0010a2b9",
                "FUN_0010e7c2",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010a83e"
            ],
            "imported": false,
            "current_name": "extract_and_free_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefined_00108d9a",
                "param_1": "file_name",
                "param_2": "symbol_name_1",
                "param_3": "symbol_name_2",
                "param_4": "result",
                "ppcVar1": "strings",
                "pcVar2": "duplicate_string",
                "lVar3": "found_location",
                "uVar4": "error_msg",
                "plVar5": "slot_location"
            },
            "code": "\nundefined8 checkSymbolRedefined_00108d9a(undefined8 file_name,char *symbol_name_1,char *symbol_name_2,undefined8 result)\n\n{\n  char **strings;\n  char *duplicate_string;\n  long found_location;\n  undefined8 error_msg;\n  long *slot_location;\n  \n  strings = (char **)xmalloc(0x10);\n  duplicate_string = strdup(symbol_name_1);\n  *strings = duplicate_string;\n  duplicate_string = strdup(symbol_name_2);\n  error_msg = DAT_001278d0;\n  strings[1] = duplicate_string;\n  found_location = htab_find(error_msg,strings);\n  if (found_location != 0) {\n    error_msg = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(error_msg,file_name,symbol_name_1);\n  }\n  found_location = htab_find(DAT_001278c8,symbol_name_2);\n  if (found_location != 0) {\n    error_msg = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(error_msg,file_name,symbol_name_2);\n  }\n  slot_location = (long *)htab_find_slot(DAT_001278d0,strings,1);\n  error_msg = DAT_001278c8;\n  *slot_location = (long)strings;\n  duplicate_string = strings[1];\n  strings = (char **)htab_find_slot(error_msg,duplicate_string,1);\n  *strings = duplicate_string;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefined_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_string_and_call_0010e9a0",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "option",
                "param_4": "param",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "formattedString",
                "__s_00": "allocatedString_1",
                "sVar3": "inputLength",
                "sVar4": "formattedStringLength",
                "__s_01": "allocatedString_2",
                "pcVar5": "optionChar",
                "uVar6": "intValue"
            },
            "code": "\nundefined4 formatStringAndCall_0010e9a0(long input,char *prefix,undefined4 option,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *formattedString;\n  byte *allocatedString_1;\n  size_t inputLength;\n  size_t formattedStringLength;\n  char *allocatedString_2;\n  char *optionChar;\n  undefined8 intValue;\n  \n  formattedString = (byte *)FUN_00109b2f();\n  switch(option) {\n  case 1:\n    optionChar = \"G\";\n    intValue = 0x20;\n    break;\n  case 2:\n    optionChar = \"S\";\n    intValue = 0x26;\n    break;\n  case 3:\n    optionChar = \"V\";\n    intValue = 0x26;\n    break;\n  case 4:\n    optionChar = \"\";\n    intValue = 0x80;\n    if (((&_sch_istable)[(ulong)*formattedString * 2] & 4) == 0) {\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      inputLength = strlen((char *)formattedString);\n      allocatedString_1 = (byte *)xmalloc(inputLength + 0x14);\n      sprintf((char *)allocatedString_1,\"%ld=%s\",counter,formattedString);\n      free(formattedString);\n      formattedString = allocatedString_1;\n    }\n    break;\n  case 5:\n    optionChar = \"r\";\n    intValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputLength = strlen(prefix);\n  formattedStringLength = strlen((char *)formattedString);\n  allocatedString_2 = (char *)xmalloc(inputLength + 3 + formattedStringLength);\n  sprintf(allocatedString_2,\"%s:%s%s\",prefix,optionChar,formattedString);\n  free(formattedString);\n  result = FUN_0010e2f0(input,intValue,0,param,allocatedString_2);\n  if ((char)result != '\\0') {\n    free(allocatedString_2);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_string_and_call_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "check_section_match_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid checkSectionMatch_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  sectionValue = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_section_match_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "validate_and_print_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid validateAndPrintErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,isEqualString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "xcalloc",
                "htab_eq_string",
                "free",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00108d9a",
                "FUN_00104cc1",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_001126c0",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "lVar1": "alignment",
                "lVar2": "value",
                "cVar3": "result",
                "lVar4": "errorMessage",
                "lVar5": "result",
                "unaff_RBX": "thisPointer",
                "unaff_RBP": "basePointer",
                "unaff_R12": "anotherPointer",
                "unaff_R14B": "boolFlag",
                "unaff_R15": "address"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long alignment;\n  long value;\n  char result;\n  long errorMessage;\n  long result;\n  long thisPointer;\n  long basePointer;\n  long anotherPointer;\n  char boolFlag;\n  long address;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(address + 0xb4) = *(undefined4 *)(thisPointer + 0xb4);\n  *(byte *)(address + 0x28) =\n       *(byte *)(address + 0x28) & 0xcf | *(byte *)(thisPointer + 0x28) & 0x30;\n  *(long *)(thisPointer + 0x60) = address;\n  *(undefined8 *)(thisPointer + 0x58) = 0;\n  if ((*(byte *)(thisPointer + 0x27) & 2) != 0) {\n    alignment = *(long *)(thisPointer + 0xd0);\n    result = FUN_00115d00(alignment,*(undefined8 *)(thisPointer + 0xe0));\n    if ((result != 0) &&\n       (value = *(long *)(anotherPointer + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(value + 8) == 5)) {\n      *(long *)(alignment + 0xb0) = result;\n      result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (result == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (result == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (boolFlag != '\\0') {\n    *(undefined4 *)(*(long *)(address + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "process_file_type_00109022",
                "param_1": "fileCount",
                "param_2": "typeIndices",
                "uVar1": "fileType",
                "pcVar2": "errorMsg",
                "plVar3": "typeInfo",
                "lVar4": "loopIndex",
                "uVar5": "typeIndex",
                "pplVar6": "typePtrs",
                "bVar7": "indexVariable",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] processFileType_00109022(long fileCount,uint *typeIndices,undefined8 param_3,undefined8 param_4)\n\n{\n  uint fileType;\n  char *errorMsg;\n  long *typeInfo;\n  long loopIndex;\n  uint typeIndex;\n  long **typePtrs;\n  byte indexVariable;\n  undefined result [16];\n  \n  indexVariable = 0;\n  typeIndex = *typeIndices;\n  fileType = typeIndices[1];\n  if (((int)typeIndex < 0) || (*(uint *)(fileCount + 0x80) <= typeIndex)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)typeIndex);\n  }\n  else {\n    if (-1 < (int)fileType) {\n      typePtrs = (long **)(*(long *)(fileCount + 0x88) + (long)(int)typeIndex * 8);\n      for (typeIndex = fileType; 0xf < (int)typeIndex; typeIndex = typeIndex - 0x10) {\n        if (*typePtrs == (long *)0x0) {\n          typeInfo = (long *)xmalloc(0x88);\n          *typePtrs = typeInfo;\n          for (loopIndex = 0x22; loopIndex != 0; loopIndex = loopIndex + -1) {\n            *(undefined4 *)typeInfo = 0;\n            typeInfo = (long *)((long)typeInfo + (ulong)indexVariable * -8 + 4);\n          }\n        }\n        typePtrs = (long **)*typePtrs;\n      }\n      if (*typePtrs == (long *)0x0) {\n        typeInfo = (long *)xmalloc(0x88);\n        *typePtrs = typeInfo;\n        for (loopIndex = 0x22; loopIndex != 0; loopIndex = loopIndex + -1) {\n          *(undefined4 *)typeInfo = 0;\n          typeInfo = (long *)((long)typeInfo + (ulong)indexVariable * -8 + 4);\n        }\n      }\n      typeInfo = *typePtrs + (long)(int)((fileType >> 4) * -0x10 + fileType) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)fileType);\n  }\n  typeInfo = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param_4;\n  result._0_8_ = typeInfo;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_file_type_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_0010c05d",
                "param_1": "file_info",
                "param_2": "variable",
                "param_3": "file_path",
                "param_4": "variable_type",
                "auVar1": "result",
                "uVar2": "status",
                "piVar3": "allocated_memory",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "current_file_address",
                "bVar8": "byte_flag",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_debug_0010c05d(long file_info,long variable,ulong file_path,int variable_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *allocated_memory;\n  char flag;\n  long loop_counter;\n  long current_file_address;\n  int *piVar7;\n  byte byte_flag;\n  undefined return_value [16];\n  \n  byte_flag = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = file_path;\n    return result << 0x40;\n  }\n  if (file_path != 0) {\n    if ((*(long *)(file_info + 8) == 0) || (current_file_address = *(long *)(file_info + 0x10), current_file_address == 0)) {\n      status = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",status);\n    }\n    else {\n      if (variable_type - 1U < 2) {\n        current_file_address = current_file_address + 0x10;\n        flag = (variable_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_info + 0x20) == 0) {\n        current_file_address = current_file_address + 0x10;\n        flag = '\\0';\n      }\n      else {\n        current_file_address = *(long *)(file_info + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      current_file_address = FUN_00112925(current_file_address,variable,2,flag);\n      if (current_file_address != 0) {\n        allocated_memory = (int *)xmalloc(0x18);\n        piVar7 = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *piVar7 = 0;\n          piVar7 = piVar7 + (ulong)byte_flag * -2 + 1;\n        }\n        *allocated_memory = variable_type;\n        status = 1;\n        *(ulong *)(allocated_memory + 2) = file_path;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(current_file_address + 0x20) = allocated_memory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = status;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_debug_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_parameter_00109d97",
                "param_1": "param",
                "local_40": "result",
                "lVar1": "counter"
            },
            "code": "\nvoid processParameter_00109d97(long param)\n\n{\n  long counter;\n  char result [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    FUN_00109cf4(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  counter = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = counter + 1;\n  sprintf(result,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(param,result,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "process_parameter_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "extract_and_sort_build_attributes_001086af",
                "unaff_R14": "function_pointer",
                "unaff_retaddr": "return_address",
                "param_7": "input_value",
                "unaff_R12": "attribute_note",
                "unaff_R13": "temp_value",
                "unaff_RBP": "previous_value",
                "unaff_RBX": "loop_counter",
                "param_11": "extracted_notes",
                "param_14": "warning_message",
                "in_stack_00000030": "buffer"
            },
            "code": "\nulong extract_and_sort_build_attributes_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong loop_counter;\n  ulong previous_value;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *attribute_note;\n  ulong temp_value;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *function_pointer;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong return_address;\n  ulong input_value;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *extracted_notes;\n  undefined *buffer;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *warning_message;\n  \n  bVar22 = 0;\n  input_value = in_RCX;\n  uVar9 = (**(code **)(function_pointer[1] + 0x40))();\n  uVar10 = (**(code **)(function_pointer[1] + 0x40))(attribute_note[4] + 4);\nLAB_0011662a:\n  uVar13 = previous_value;\n  uVar20 = temp_value;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = input_value;\n    uVar12 = input_value;\n    puVar15 = attribute_note;\n    if (attribute_note[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = return_address;\n      }\n      uVar14 = *attribute_note;\n      attribute_note[7] = uVar9;\n      previous_value = uVar13;\n      temp_value = uVar10;\n      return_address = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *attribute_note;\n      attribute_note[7] = uVar9;\n      previous_value = uVar10;\n      temp_value = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attribute_note = puVar15 + 9;\n    if (loop_counter < 0xc) {\n      if (loop_counter != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *function_pointer;\n      uVar3 = *warning_message;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)attribute_note - (long)extracted_notes >> 3) * -0x71c71c71c71c71c7;\n      qsort(extracted_notes,__nmemb,0x48,FUN_0011a1b0);\n      puVar15 = extracted_notes;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(function_pointer[1] + 0x40))(uVar12);\n    *attribute_note = uVar10;\n    uVar10 = (**(code **)(function_pointer[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(function_pointer[1] + 0x40))(uVar12 + 8);\n    uVar14 = *attribute_note;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (loop_counter < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    loop_counter = loop_counter + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = FUN_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = FUN_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = FUN_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = previous_value;\n    uVar20 = temp_value;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = return_address;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = attribute_note;\n        temp_value = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        previous_value = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = attribute_note;\n        temp_value = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,function_pointer,warning_message,lVar7);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = extract_and_sort_build_attributes_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    input_value = uVar11;\n    uVar9 = (**(code **)(function_pointer[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  input_value = uVar11;\n  uVar9 = (**(code **)(function_pointer[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(function_pointer[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (attribute_note <= puVar15) {\n    qsort(extracted_notes,__nmemb,0x48,FUN_0011a250);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    input_value = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = extracted_notes; puVar15 < attribute_note; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == input_value)) {\n          (**(code **)(function_pointer[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(function_pointer[1] + 0x50))(0,puVar18);\n          (**(code **)(function_pointer[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(function_pointer[1] + 0x50))();\n          if (*(int *)(function_pointer[1] + 8) == 5) {\n            cVar17 = (*(char *)(function_pointer[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(function_pointer[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(function_pointer[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = function_pointer[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(function_pointer[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(function_pointer[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(function_pointer[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          input_value = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *buffer = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        buffer = buffer + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(extracted_notes);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < extracted_notes) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        input_value = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((input_value == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nFUN_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = input_value;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "FUN_00116490",
                "qsort",
                "FUN_00119ed0",
                "FUN_0010847a",
                "bfd_set_error",
                "FUN_0011a1b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "extract_and_sort_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_system_0010add5"
            },
            "code": "\nvoid initializeSystem_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_system_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_system_00113e17"
            },
            "code": "\nvoid initializeSystem_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_system_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "ptr3",
                "param_4": "data",
                "param_5": "value",
                "uVar1": "prevValue",
                "puVar2": "dynamicArray",
                "uVar3": "duplicatePtr",
                "xmalloc": "allocateMemory",
                "xstrdup": "duplicateString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long ptr1,undefined8 ptr2,undefined8 ptr3,undefined data,\n                      undefined4 value)\n\n{\n  undefined8 prevValue;\n  undefined8 *dynamicArray;\n  undefined8 duplicatePtr;\n  \n  dynamicArray = (undefined8 *)xmalloc(0x40);\n  duplicatePtr = xstrdup(ptr2);\n  dynamicArray[2] = ptr3;\n  *(undefined (*) [16])(dynamicArray + 4) = ZEXT816(0);\n  *(undefined (*) [16])(dynamicArray + 6) = ZEXT816(0);\n  prevValue = *(undefined8 *)(ptr1 + 0x60);\n  *(undefined *)((long)dynamicArray + 0x1c) = data;\n  *(undefined4 *)(dynamicArray + 3) = value;\n  *(undefined8 **)(ptr1 + 0x60) = dynamicArray;\n  *dynamicArray = prevValue;\n  dynamicArray[1] = duplicatePtr;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010a181",
                "FUN_00109dfe",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010a2b9",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010a377",
                "FUN_0010a77a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_string_to_unsigned_long_00109a32",
                "param_1": "stringPtr",
                "param_2": "errorFlagPtr",
                "param_3": "endPtr",
                "param_4": "unknownArg1",
                "param_5": "unknownArg2",
                "__nptr": "currentCharPtr",
                "piVar1": "errnoPtr",
                "uVar2": "result",
                "uVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nparseStringToUnsignedLong_00109a32(char **stringPtr,undefined *errorFlagPtr,char *endPtr,undefined8 unknownArg1,undefined8 unknownArg2)\n\n{\n  char *currentCharPtr;\n  int *errnoPtr;\n  ulong result;\n  undefined8 errorString;\n  undefined returnValue [16];\n  \n  if (errorFlagPtr != (undefined *)0x0) {\n    *errorFlagPtr = 0;\n  }\n  currentCharPtr = *stringPtr;\n  if ((currentCharPtr < endPtr) && (*currentCharPtr != '\\0')) {\n    errnoPtr = __errno_location();\n    *errnoPtr = 0;\n    result = strtoul(currentCharPtr,stringPtr,0);\n    if ((result != 0xffffffffffffffff) || (*errnoPtr == 0)) goto LAB_00109aa9;\n    if (errorFlagPtr == (undefined *)0x0) {\n      errorString = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(currentCharPtr,errorString);\n    }\n    else {\n      *errorFlagPtr = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  returnValue._8_8_ = unknownArg2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strtoul",
                "FUN_00108fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_string_to_unsigned_long_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "file_address",
                "param_2": "tag_name",
                "param_3": "tag_value",
                "iVar1": "tag_comparison_result",
                "uVar2": "error_message",
                "piVar3": "new_tag_value",
                "pauVar4": "new_debug_tag",
                "lVar5": "current_file_address",
                "pcVar6": "error_message",
                "xmalloc": "allocate_memory",
                "ZEXT816": "initialize_memory",
                "_stderr": "standard_error"
            },
            "code": "\n\n\nint * process_debug_tag_0010c6be(long file_address,char *tag_name,int *tag_value)\n\n{\n  int tag_comparison_result;\n  undefined8 error_message;\n  int *new_tag_value;\n  undefined (*new_debug_tag) [16];\n  long current_file_address;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_value != (int *)0x0)) {\n    if (*(long *)(file_address + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_value != 0x17) {\n        new_tag_value = (int *)FUN_00112904(0x17,0);\n        if (new_tag_value == (int *)0x0) {\n          return (int *)0x0;\n        }\n        new_debug_tag = (undefined (*) [16])xmalloc(0x10);\n        current_file_address = *(long *)(file_address + 0x10);\n        *new_debug_tag = initialize_memory(0);\n        *(int **)(*new_debug_tag + 8) = tag_value;\n        *(undefined (**) [16])(new_tag_value + 4) = new_debug_tag;\n        current_file_address = FUN_00112925(current_file_address + 0x10,tag_name,1,3);\n        if (current_file_address == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(current_file_address + 0x20) = new_tag_value;\n        *(long *)*new_debug_tag = current_file_address;\n        return new_tag_value;\n      }\n      tag_comparison_result = strcmp(*(char **)(**(long **)(tag_value + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (tag_comparison_result == 0) {\n        return tag_value;\n      }\n    }\n    error_message = dcgettext(0,error_message,5);\n    fprintf(standard_error,\"%s\\n\",error_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00119970"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "arglist",
                "param_4": "hasError",
                "__ptr": "result",
                "__format": "errMsg",
                "lVar1": "demangledValue",
                "uVar2": "index",
                "uVar3": "size",
                "uVar4": "newIndex",
                "local_39": "tempBuffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 input1,undefined8 input2,int *arglist,undefined *hasError)\n\n{\n  void *result;\n  char *errMsg;\n  long demangledValue;\n  ulong index;\n  ulong size;\n  uint newIndex;\n  char tempBuffer [9];\n  \n  size = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *hasError = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      errMsg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,errMsg);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangledValue = FUN_0010b0fa(input1,input2,*(long *)(arglist + 4),0,tempBuffer);\n    if (demangledValue == 0) {\n      if (tempBuffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *hasError = 1;\n    }\n    else {\n      newIndex = (int)index + 1;\n      if ((uint)size <= newIndex) {\n        size = (ulong)((uint)size + 10);\n        result = (void *)xrealloc(result,size << 3);\n      }\n      *(long *)((long)result + index * 8) = demangledValue;\n      index = (ulong)newIndex;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "fprintf",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "section_info",
                "param_2": "binary_file",
                "uVar1": "section_ptr",
                "uVar2": "msg",
                "lVar3": "section_info_new",
                "lVar4": "section_ptr_new"
            },
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary_file)\n\n{\n  undefined8 section_ptr;\n  undefined8 msg;\n  long section_info_new;\n  long section_ptr_new;\n  \n  section_info_new = (**(code **)(*(long *)(binary_file + 8) + 0x208))(binary_file);\n  section_ptr_new = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info_new + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info_new + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info_new + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr_new == 0) {\n    section_ptr_new = 0x128598;\n  }\n  else {\n    section_ptr_new = bfd_get_section_by_name(binary_file);\n    if (section_ptr_new == 0) {\n      section_ptr = *(undefined8 *)(section_info + 0x20);\n      msg = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(msg,section_ptr);\n    }\n  }\n  *(long *)(section_info_new + 0x20) = section_ptr_new;\n  return section_info_new;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "identifier",
                "param_2": "data",
                "param_3": "message",
                "uVar1": "result",
                "sVar2": "message_length",
                "__s": "formatted_message"
            },
            "code": "\nundefined4 format_and_send_data_0010e8a9(undefined8 identifier,undefined8 data,char *message)\n\n{\n  undefined4 result;\n  size_t message_length;\n  char *formatted_message;\n  \n  message_length = strlen(message);\n  formatted_message = (char *)xmalloc(message_length + 0x14);\n  sprintf(formatted_message,\"%s:c=f%g\",identifier,message);\n  result = FUN_0010e2f0(data,0x80,0,0,formatted_message);\n  if ((char)result != '\\0') {\n    free(formatted_message);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "section_flag_check_00104ad6",
                "unaff_RBP": "currentSection",
                "__s": "sectionString",
                "sVar4": "sectionLength",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "supportedFlags",
                "iVar5": "stringLength",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] sectionFlagCheck_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentSection;\n  char *sectionString;\n  size_t sectionLength;\n  int stringLength;\n  uint sectionFlags;\n  char *supportedFlags;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    sectionString = currentSection;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = sectionFlags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(sectionString);\n                stringLength = (int)sectionLength;\n                currentSection = (char *)0x0;\n              }\n              else {\n                currentSection = commaPosition + 1;\n                stringLength = (int)commaPosition - (int)sectionString;\n              }\n              sectionLength = (size_t)stringLength;\n              comparisonResult = strncasecmp(supportedFlags,sectionString,sectionLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              sectionString = currentSection;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionString,sectionLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            sectionString = currentSection;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionString,sectionLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          sectionString = currentSection;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionString,sectionLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        sectionString = currentSection;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionString,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionString,sectionLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        sectionString = currentSection;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionString,sectionLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          sectionString = currentSection;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionString,sectionLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            sectionString = currentSection;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionString,sectionLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              sectionString = currentSection;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionString,sectionLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                sectionString = currentSection;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionString,sectionLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  sectionString = currentSection;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionString,sectionLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    sectionString = currentSection;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionString,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(stringLength + 1));\n                      strncpy(commaPosition,sectionString,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    sectionString = currentSection;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "strncasecmp",
                "FUN_00119dd0",
                "strchr",
                "xmalloc",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "section_flag_check_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_value_is256_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "auVar1._1_7_": "firstByte",
                "auVar1[0]": "isValue256",
                "auVar1._8_8_": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfValueIs256_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 unaff_retaddr;\n  \n  firstByte = 0;\n  isValue256 = inputValue == 0x100;\n  returnAddress = unaff_retaddr;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_value_is256_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "unit_ptr",
                "param_2": "type_name",
                "param_3": "unused_param",
                "param_4": "output_ptr",
                "lVar1": "comp_unit_ptr",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_ptr",
                "lVar5": "inner_list_ptr",
                "puVar6": "outer_list_ptr",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long unit_ptr,char *type_name,undefined8 unused_param,undefined8 output_ptr)\n\n{\n  long comp_unit_ptr;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_ptr;\n  long inner_list_ptr;\n  undefined8 *outer_list_ptr;\n  undefined result [16];\n  \n  comp_unit_ptr = *(long *)(unit_ptr + 8);\n  if (comp_unit_ptr == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (inner_list_ptr = *(long *)(unit_ptr + 0x20); inner_list_ptr != 0; inner_list_ptr = *(long *)(inner_list_ptr + 8)) {\n      if (*(undefined8 **)(inner_list_ptr + 0x28) != (undefined8 *)0x0) {\n        for (current_ptr = (undefined8 *)**(undefined8 **)(inner_list_ptr + 0x28); current_ptr != (undefined8 *)0x0;\n            current_ptr = (undefined8 *)*current_ptr) {\n          if (*(int *)((long)current_ptr + 0x14) == 0) {\n            if (*(char *)current_ptr[1] == *type_name) {\n              comparison_result = strcmp((char *)current_ptr[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (outer_list_ptr = *(undefined8 **)(comp_unit_ptr + 8); outer_list_ptr != (undefined8 *)0x0;\n        outer_list_ptr = (undefined8 *)*outer_list_ptr) {\n      if ((undefined8 *)outer_list_ptr[2] != (undefined8 *)0x0) {\n        for (current_ptr = *(undefined8 **)(undefined8 *)outer_list_ptr[2]; current_ptr != (undefined8 *)0x0;\n            current_ptr = (undefined8 *)*current_ptr) {\n          if (*(int *)((long)current_ptr + 0x14) == 0) {\n            if (*(char *)current_ptr[1] == *type_name) {\n              comparison_result = strcmp((char *)current_ptr[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = output_ptr;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_ptr[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_condition_and_return_result_0010829e",
                "unaff_EBP": "condition",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkConditionAndReturnResult_0010829e(void)\n\n{\n  undefined8 result;\n  int condition;\n  \n  if (condition == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((condition != 4) && (condition == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_condition_and_return_result_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_info_00104943",
                "in_RAX": "inputStr",
                "lVar3": "parsedInt",
                "iVar1": "defaultLength",
                "iVar9": "currentLength",
                "uStack000000000000000c": "indentationLevel",
                "param_7": "maxParam",
                "uVar11": "archMachOffset",
                "sVar4": "strLength",
                "pcVar5": "printableStr",
                "uVar6": "printableArch",
                "iVar2": "cmpResult",
                "lVar8": "currentParam",
                "iVar7": "archIndex",
                "param_11": "paramArray",
                "param_13": "dataAddress",
                "unaff_R15D": "paramValue",
                "uVar10": "loopCounter"
            },
            "code": "\n\n\nvoid printReverseArchInfo_00104943(void)\n\n{\n  int defaultLength;\n  int cmpResult;\n  char *inputStr;\n  long parsedInt;\n  size_t strLength;\n  char *printableStr;\n  undefined8 printableArch;\n  int archIndex;\n  long currentParam;\n  int currentLength;\n  uint paramValue;\n  ulong loopCounter;\n  uint archMachOffset;\n  int maxParam;\n  uint indentationLevel;\n  undefined8 paramArray;\n  long dataAddress;\n  \n  parsedInt = strtol(inputStr,(char **)0x0,10);\n  defaultLength = (int)parsedInt;\n  currentLength = maxParam;\n  indentationLevel = paramValue;\n  if (defaultLength == 0) {\n    defaultLength = 0x50;\n  }\n  do {\n    maxParam = currentLength;\n    if (paramArray._4_4_ <= maxParam) {\n      return;\n    }\n    currentParam = (long)maxParam;\n    archIndex = (defaultLength - indentationLevel) + -1;\n    parsedInt = currentParam;\n    do {\n      currentLength = (int)parsedInt;\n      if (paramArray._4_4_ <= currentLength) break;\n      strLength = strlen(*(char **)(dataAddress + parsedInt * 0x60));\n      parsedInt = parsedInt + 1;\n      archIndex = (archIndex - (int)strLength) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(indentationLevel + 1),&DAT_0011b4a1);\n    for (parsedInt = currentParam * 0x60; ((ulong)(uint)(currentLength - maxParam) + currentParam) * 0x60 - parsedInt != 0;\n        parsedInt = parsedInt + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataAddress + parsedInt));\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      printableStr = (char *)bfd_printable_arch_mach(archIndex,0);\n      cmpResult = strcmp(printableStr,\"UNKNOWN!\");\n      if (cmpResult != 0) {\n        printableArch = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)indentationLevel,printableArch);\n        archMachOffset = archIndex - 2;\n        parsedInt = currentParam * 0x60;\n        cmpResult = maxParam;\n        while (currentLength != cmpResult) {\n          printableStr = *(char **)(dataAddress + parsedInt);\n          if (*(char *)((long)(char **)(dataAddress + parsedInt) + (ulong)archMachOffset + 8) == '\\0') {\n            strLength = strlen(printableStr);\n            for (loopCounter = strLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableStr,_stdout);\n          }\n          cmpResult = cmpResult + 1;\n          if (currentLength != cmpResult) {\n            putc(0x20,_stdout);\n          }\n          parsedInt = parsedInt + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_new_entry_00113e23",
                "param_1": "key",
                "param_2": "value",
                "lVar1": "entry_address",
                "puVar2": "new_entry"
            },
            "code": "\nlong create_new_entry_00113e23(undefined8 key,undefined8 value)\n\n{\n  long entry_address;\n  undefined8 *new_entry;\n  \n  entry_address = FUN_00112904(1,0);\n  if (entry_address != 0) {\n    new_entry = (undefined8 *)xmalloc(0x10);\n    *new_entry = key;\n    new_entry[1] = value;\n    *(undefined8 **)(entry_address + 0x10) = new_entry;\n  }\n  return entry_address;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "imported": false,
            "current_name": "create_new_entry_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_and_move_pointer_00108ea1",
                "param_1": "byte_array_ptr",
                "param_2": "result_ptr",
                "iVar1": "current_digit",
                "pbVar2": "byte_ptr",
                "pbVar3": "next_byte_ptr",
                "uVar4": "concatenated_result"
            },
            "code": "\nulong parse_number_and_move_pointer_00108ea1(byte **byte_array_ptr,int *result_ptr)\n\n{\n  int current_digit;\n  byte *byte_ptr;\n  byte *next_byte_ptr;\n  ulong concatenated_result;\n  \n  byte_ptr = *byte_array_ptr;\n  concatenated_result = 0;\n  if (((&_sch_istable)[(ulong)*byte_ptr * 2] & 4) != 0) {\n    next_byte_ptr = byte_ptr + 1;\n    current_digit = (char)*byte_ptr + -0x30;\n    *result_ptr = current_digit;\n    *byte_array_ptr = next_byte_ptr;\n    if (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0) {\n      do {\n        byte_ptr = next_byte_ptr;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*byte_ptr;\n        next_byte_ptr = byte_ptr + 1;\n      } while (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0);\n      if (byte_ptr[1] == 0x5f) {\n        next_byte_ptr = byte_ptr + 2;\n        *byte_array_ptr = next_byte_ptr;\n        *result_ptr = current_digit;\n      }\n    }\n    concatenated_result = CONCAT71((int7)((ulong)next_byte_ptr >> 8),1);\n  }\n  return concatenated_result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_and_move_pointer_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_alignment_and_size_00108072",
                "unaff_RBX": "parameters",
                "unaff_RBP": "currentStackFrame",
                "unaff_R12": "data",
                "lVar5": "errorString",
                "lVar6": "memoryBlock1",
                "lVar7": "offset",
                "lVar8": "memoryBlock2",
                "unaff_R14B": "flag",
                "unaff_R15": "target",
                "bVar1": "byteVar",
                "uVar2": "tempVar1",
                "uVar4": "tempVar2"
            },
            "code": "\n\n\nvoid setAlignmentAndSize_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 tempVar1;\n  char cVar3;\n  uint tempVar2;\n  long errorString;\n  long memoryBlock1;\n  long offset;\n  undefined8 *parameters;\n  long currentStackFrame;\n  long data;\n  long memoryBlock2;\n  char flag;\n  long target;\n  \n  errorString = dcgettext(0,\"failed to set size\",5);\n  memoryBlock2 = parameters[6];\n  memoryBlock1 = FUN_00114190(*parameters,0,0x18);\n  if (memoryBlock1 == 0) {\n    *(byte *)(target + 0x28) = *(byte *)(target + 0x28) | 1;\n    tempVar1 = *parameters;\n    memoryBlock2 = memoryBlock2 + _DAT_00127990;\n    *(long *)(target + 0x30) = memoryBlock2;\n    *(long *)(target + 0x38) = memoryBlock2;\n    memoryBlock2 = parameters[7];\n    memoryBlock1 = FUN_00114190(tempVar1,0,0x60);\n    if (memoryBlock1 == 0) goto LAB_00115695;\nLAB_00115860:\n    offset = *(long *)(memoryBlock1 + 0x20);\n    if ((*(byte *)(memoryBlock1 + 0x14) & 0x40) != 0) {\n      offset = offset + memoryBlock2;\n    }\n    *(long *)(target + 0x38) = offset;\n    memoryBlock2 = FUN_00114190(*parameters,0,0x200);\n    if (memoryBlock2 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempVar2 = *(uint *)((long)parameters + 0x7c);\n    if (tempVar2 < 0x3f) goto LAB_001156c4;\n    errorString = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(target + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(target + 0x28) =\n         *(byte *)(target + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = target;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    offset = *(long *)(memoryBlock1 + 0x18);\n    if ((*(byte *)(memoryBlock1 + 0x14) & 8) == 0) {\n      offset = offset + memoryBlock2;\n    }\n    *(byte *)(target + 0x28) = *(byte *)(target + 0x28) | 1;\n    tempVar1 = *parameters;\n    *(long *)(target + 0x30) = offset;\n    *(long *)(target + 0x38) = offset;\n    memoryBlock2 = parameters[7];\n    memoryBlock1 = FUN_00114190(tempVar1,0,0x60);\n    if (memoryBlock1 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVar1 = *parameters;\n    *(long *)(target + 0x38) = memoryBlock2 + _DAT_00127990;\n    memoryBlock2 = FUN_00114190(tempVar1,0,0x200);\n    if (memoryBlock2 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempVar2 = *(uint *)(memoryBlock2 + 0x2c);\n    if (0x3e < tempVar2) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(target + 0x7c) = tempVar2;\n    *(undefined4 *)(target + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(target + 0x28) =\n         *(byte *)(target + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = target;\n    parameters[0xb] = 0;\n    byteVar = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    memoryBlock2 = parameters[0x1a];\n    memoryBlock1 = FUN_00115d00(memoryBlock2,parameters[0x1c]);\n    if ((memoryBlock1 != 0) &&\n       (offset = *(long *)(data + 8), *(uint *)(memoryBlock1 + 0x18) = *(uint *)(memoryBlock1 + 0x18) | 0x20,\n       *(int *)(offset + 8) == 5)) {\n      *(long *)(memoryBlock2 + 0xb0) = memoryBlock1;\n      cVar3 = (**(code **)(*(long *)(currentStackFrame + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(currentStackFrame + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(target + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_alignment_and_size_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "extract_and_format_string_0010a2b9",
                "param_1": "input_ptr",
                "param_2": "mode_flag",
                "param_4": "output_param",
                "cVar1": "char1",
                "__s": "string_ptr",
                "sVar2": "string_length",
                "__s_00": "formatted_string_ptr",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] extractAndFormatString_0010a2b9(long input_ptr,char mode_flag,undefined8 param_3,undefined8 output_param)\n\n{\n  char char1;\n  char *string_ptr;\n  size_t string_length;\n  char *formatted_string_ptr;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  string_ptr = (char *)FUN_00109b2f();\n  string_length = strlen(string_ptr);\n  formatted_string_ptr = (char *)xmalloc(string_length + 0x1e);\n  if (mode_flag == '\\0') {\n    *formatted_string_ptr = '\\0';\n    counter = 0;\n    mode_flag = char1;\n  }\n  else {\n    counter = *(long *)(input_ptr + 0x68);\n    *(long *)(input_ptr + 0x68) = counter + 1;\n    sprintf(formatted_string_ptr,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(formatted_string_ptr);\n  sprintf(formatted_string_ptr + string_length,\"S%s\",string_ptr);\n  free(string_ptr);\n  result._0_4_ = FUN_00109b52(input_ptr,formatted_string_ptr,counter,mode_flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string_ptr);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_format_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateData_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = FUN_0010e2f0(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "check_endianness_00114e00",
                "param_1": "endiannessValue",
                "dcgettext": "getEndiannessText"
            },
            "code": "\nvoid checkEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "check_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "permission",
                "param_4": "fileInfo",
                "param_5": "shouldCopy",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "errorCode",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFile,char *destinationFile,undefined4 permission,undefined8 fileInfo,char shouldCopy,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong errorCode;\n  undefined returnValue [16];\n  \n  if (destinationFile == sourceFile) {\n    errorCode = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(permission,destinationFile,fileInfo);\n    errorCode = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = __errno_location();\n      errorString = strerror(*errnoPtr);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationFile,errorString);\n    }\n    unlink(sourceFile);\n  }\n  if (shouldCopy != '\\0') {\n    FUN_0011a350(destinationFile,fileInfo);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorCode;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_application_0010adf2"
            },
            "code": "\nvoid initialize_application_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_application_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "count1",
                "param_5": "count2",
                "uVar1": "value1",
                "cVar2": "result",
                "uVar3": "returnValue",
                "lVar4": "temp",
                "plVar5": "tempArray",
                "uVar6": "tempCount",
                "local_40": "localArray"
            },
            "code": "\nundefined4\nprocessData_0010d7d4(undefined8 input1,undefined8 *input2,long *output1,uint *count1,uint *count2)\n\n{\n  undefined8 value1;\n  char result;\n  undefined4 returnValue;\n  long temp;\n  long *tempArray;\n  uint tempCount;\n  long localArray [2];\n  \n  value1 = *input2;\n  tempArray = localArray;\n  if (output1 == (long *)0x0) {\n    tempArray = (long *)0x0;\n  }\n  result = FUN_0010c95e(input1,input2,tempArray);\n  if ((result != '\\0') &&\n     (returnValue = FUN_00109be3(input1,value1,(int)*input2 - (int)value1), (char)returnValue != '\\0')) {\n    if (output1 == (long *)0x0) {\n      return returnValue;\n    }\n    if (localArray[0] != 0) {\n      if (*count2 <= *count1 + 1) {\n        tempCount = *count2 + 10;\n        temp = *output1;\n        *count2 = tempCount;\n        temp = xrealloc(temp,(ulong)tempCount << 3);\n        *output1 = temp;\n      }\n      tempCount = *count1;\n      *(long *)(*output1 + (ulong)tempCount * 8) = localArray[0];\n      *count1 = tempCount + 1;\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "xrealloc",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errLocation",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFile_00113f50(char *filePath)\n\n{\n  int status;\n  int *errLocation;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errLocation = __errno_location();\n      if (*errLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_program_001087fd"
            },
            "code": "\nundefined8 initialize_program_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_program_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "formatSpecifier",
                "__format": "translatedMessage",
                "plVar2": "currentFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 formatSpecifier;\n  char *translatedMessage;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  formatSpecifier = DAT_001275e0;\n  translatedMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,translatedMessage,formatSpecifier);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_001126c0",
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "analyze_binary_0011378f",
                "param_1": "input_files",
                "param_2": "output_files",
                "param_3": "memory_locations",
                "param_4": "hash_values",
                "param_5": "strings",
                "param_6": "result",
                "auVar1": "temp_buffer",
                "cVar2": "result_status",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "temp",
                "sVar6": "string_length",
                "lVar7": "loop_index",
                "puVar8": "pointer",
                "puVar9": "pointer_array",
                "__dest": "destination",
                "puVar10": "linked_list",
                "plVar11": "linked_list_pointer",
                "bVar12": "flag",
                "local_258": "input_files_ptr",
                "local_250": "allocated_memory",
                "local_248": "var_1",
                "uStack_244": "var_2",
                "uStack_240": "var_3",
                "uStack_23c": "var_4",
                "local_238": "hash_table_buffer",
                "local_228": "var_5",
                "local_220": "buffer_1",
                "local_1f8": "var_6",
                "local_1f0": "var_7",
                "local_1e8": "hash_array",
                "local_a0": "buffer_2",
                "local_78": "buffer_3",
                "uStack_70": "var_8",
                "local_68": "var_9",
                "local_60": "var_10",
                "local_58": "var_11",
                "uStack_54": "var_12",
                "uStack_50": "var_13",
                "uStack_4c": "var_14"
            },
            "code": "\nundefined4\nanalyze_binary_0011378f(undefined8 *input_files,undefined8 *output_files,long *memory_locations,undefined8 *hash_values,\n            undefined8 *strings,undefined8 *result)\n\n{\n  undefined temp_buffer [16];\n  char result_status;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp;\n  size_t string_length;\n  long loop_index;\n  undefined8 *pointer;\n  undefined4 *pointer_array;\n  char *destination;\n  undefined8 *linked_list;\n  long *linked_list_pointer;\n  byte flag;\n  undefined8 *input_files_ptr;\n  long allocated_memory;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined hash_table_buffer [16];\n  undefined8 var_5;\n  undefined buffer_1 [40];\n  undefined8 var_6;\n  undefined8 var_7;\n  undefined4 hash_array [82];\n  undefined buffer_2 [40];\n  undefined buffer_3 [8];\n  undefined8 var_8;\n  undefined8 var_9;\n  undefined4 var_10;\n  undefined4 var_11;\n  undefined4 var_12;\n  undefined4 var_13;\n  undefined4 var_14;\n  \n  flag = 0;\n  var_1 = 0;\n  var_2 = 0;\n  var_3 = 500;\n  var_4 = 0;\n  input_files_ptr = input_files;\n  allocated_memory = xmalloc(500);\n  var_5 = 1;\n  hash_table_buffer = ZEXT816(0);\n  result_status = bfd_hash_table_init(buffer_1,FUN_0010bb52,0x30);\n  if ((result_status == '\\0') || (result_status = bfd_hash_table_init(buffer_2,FUN_0010bb52,0x30), result_status == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var_6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    buffer_3 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    pointer_array = hash_array;\n    for (loop_index = 0x52; loop_index != 0; loop_index = loop_index + -1) {\n      *pointer_array = 0;\n      pointer_array = pointer_array + (ulong)flag * -2 + 1;\n    }\n    var_9 = 0;\n    var_10 = 0;\n    var_7 = 1;\n    var_11 = 0;\n    var_12 = 0;\n    var_13 = 0xffffffff;\n    var_14 = 0xffffffff;\n    result_status = FUN_0010e2f0(&input_files_ptr,0,0,0,0);\n    temp_buffer = _buffer_3;\n    if (result_status != '\\0') {\n      buffer_3._4_4_ = var_2;\n      buffer_3._0_4_ = var_1;\n      var_8 = temp_buffer._8_8_;\n      result_status = FUN_0010e2f0(&input_files_ptr,100,0,0,*input_files);\n      if (result_status != '\\0') {\n        *(int *)(output_files + 6) = *(int *)(output_files + 6) + 1;\n        output_files[10] = 0;\n        linked_list = (undefined8 *)*output_files;\n        *(undefined4 *)(output_files + 7) = *(undefined4 *)((long)output_files + 0x34);\n        for (; linked_list != (undefined8 *)0x0; linked_list = (undefined8 *)*linked_list) {\n          output_files[8] = linked_list[2];\n          *(undefined4 *)(output_files + 9) = 0;\n          result_status = thunk_FUN_0010e439(&input_files_ptr,*(undefined8 *)(linked_list[1] + 8));\n          if (result_status == '\\0') {\n            return 0;\n          }\n          linked_list_pointer = (long *)linked_list[1];\n          if (linked_list_pointer != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)linked_list_pointer[2] != (undefined8 *)0x0) {\n                for (pointer = *(undefined8 **)(undefined8 *)linked_list_pointer[2]; pointer != (undefined8 *)0x0;\n                    pointer = (undefined8 *)*pointer) {\n                  result_status = FUN_001135a5(output_files,&input_files_ptr);\n                  if (result_status == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              linked_list_pointer = (long *)*linked_list_pointer;\n              if (linked_list_pointer == (long *)0x0) break;\n              result_status = FUN_0010e439(&input_files_ptr,linked_list_pointer[1]);\n              if (result_status == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result_status = FUN_00112502(output_files,&input_files_ptr,0xffffffffffffffff);\n          if (result_status == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_14,var_13) == -1) &&\n           (error_code = FUN_0010e2f0(&input_files_ptr,100,0,var_9,0), (char)error_code != '\\0')) {\n          (**(code **)(input_files[1] + 0x50))(var_5,allocated_memory + 8);\n          *memory_locations = allocated_memory;\n          *hash_values = CONCAT44(var_2,var_1);\n          *result = var_5;\n          temp = (undefined *)xmalloc();\n          *temp = 0;\n          destination = temp + 1;\n          *strings = temp;\n          for (loop_index = hash_table_buffer._0_8_; loop_index != 0; loop_index = *(long *)(loop_index + 0x18)) {\n            strcpy(destination,*(char **)(loop_index + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010bb52",
                "FUN_00112502",
                "FUN_0010e2f0",
                "FUN_0010e439",
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "bfd_errmsg",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a0a0(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x26,4,dataPointer + 0x198,dataPointer + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "process_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "value1",
                "param_10": "value2",
                "param_11": "value3",
                "param_12": "value4",
                "param_13": "value5",
                "param_14": "value6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "arg1",
                "local_a8": "arg2",
                "local_a0": "arg3",
                "local_98": "arg4",
                "local_90": "arg5",
                "local_88": "temp1",
                "local_78": "temp2",
                "local_68": "temp3",
                "local_58": "temp4",
                "local_48": "temp5",
                "local_38": "temp6",
                "local_28": "temp7",
                "local_18": "temp8"
            },
            "code": "\nvoid processData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 value1,undefined8 value2,undefined8 value3,undefined8 value4,\n                 undefined8 value5,undefined8 value6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 arg1;\n  undefined8 arg2;\n  undefined8 arg3;\n  undefined8 arg4;\n  undefined8 arg5;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  \n  if (flag != '\\0') {\n    temp1 = input1;\n    temp2 = input2;\n    temp3 = input3;\n    temp4 = input4;\n    temp5 = input5;\n    temp6 = input6;\n    temp7 = input7;\n    temp8 = input8;\n  }\n  pointer1 = &stack0x00000008;\n  size = 8;\n  pointer2 = buffer;\n  constant = 0x30;\n  arg1 = value2;\n  arg2 = value3;\n  arg3 = value4;\n  arg4 = value5;\n  arg5 = value6;\n  FUN_00119e70(value1,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00107880",
                "FUN_0010e2f0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00104cc1",
                "FUN_0010e6a8",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_0010b800",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_00108375",
                "FUN_00114690",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00105828",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "process_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "decompiled_function_00112c1f",
                "param_3": "object",
                "param_4": "base_address",
                "plVar1": "ptr_1",
                "lVar2": "var_1",
                "puVar3": "ptr_2",
                "puVar4": "ptr_3",
                "cVar5": "flag_1",
                "piVar6": "ptr_4",
                "uVar7": "result",
                "uVar8": "var_2",
                "iVar9": "var_3",
                "uVar10": "var_4",
                "uVar11": "var_5",
                "uVar12": "var_6",
                "uVar13": "var_7",
                "bVar14": "flag_2",
                "local_3c": "var_8"
            },
            "code": "\n\n\nundefined8 decompiled_function_00112c1f(ulong param_1,undefined8 param_2,int *object,long base_address)\n\n{\n  long *ptr_1;\n  long var_1;\n  undefined8 *ptr_2;\n  undefined8 *ptr_3;\n  char flag_1;\n  int *ptr_4;\n  undefined8 result;\n  undefined8 var_2;\n  int var_3;\n  undefined4 var_4;\n  undefined8 var_5;\n  ulong var_6;\n  uint var_7;\n  bool flag_2;\n  uint var_8;\n  \n  var_6 = param_1;\nLAB_00112c39:\n  if (object != (int *)0x0) {\n    var_3 = *object;\n    if (var_3 - 0x16U < 2) {\n      do {\n        ptr_1 = *(long **)(object + 4);\n        var_7 = *(uint *)(param_1 + 0x30);\n        var_6 = (ulong)var_7;\n        var_1 = *ptr_1;\n        if (*(uint *)(var_1 + 0x10) == var_7) {\n          if (var_3 == 0x16) {\n            result = FUN_0010bba1(param_2,*(undefined8 *)(var_1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr_4 = (int *)FUN_00112b6e(object,0);\n          if (ptr_4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr_4 - 7U < 4) && (*(long *)(ptr_4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr_4 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n               (flag_1 = FUN_0010c7a0(param_1,*(undefined8 *)(**(long **)(object + 4) + 8),ptr_4),\n               flag_1 == '\\0')) {\n              return 0;\n            }\n            var_7 = *(uint *)(*(long *)(ptr_4 + 4) + 0xc);\n          }\n          else {\n            var_7 = 0;\n          }\n          var_3 = *ptr_4;\n          result = *(undefined8 *)(**(long **)(object + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var_3 == 0x17) {\n          if (var_1 != base_address) goto LAB_00112c94;\n          *(uint *)(base_address + 0x10) = var_7;\n          base_address = *ptr_1;\n          object = (int *)ptr_1[1];\n          goto LAB_00112c39;\n        }\n        if (base_address != 0) {\n          *(uint *)(base_address + 0x10) = var_7;\n        }\n        object = (int *)ptr_1[1];\n        if (object == (int *)0x0) goto LAB_00112dd6;\n        var_3 = *object;\n        base_address = 0;\n      } while (var_3 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (base_address == 0) goto LAB_00112d74;\n      *(undefined4 *)(base_address + 0x10) = *(undefined4 *)(param_1 + 0x30);\n      if (*(int *)(base_address + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(base_address + 8);\n    }\n    switch(var_3) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(param_2);\n      return result;\n    case 3:\n      result = FUN_0010b800(param_2,object[1],*(undefined *)(object + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(param_2,object[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(param_2,object[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(param_2,object[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(object + 4) != 0) {\n        if ((*(uint *)(*(long *)(object + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (flag_1 = FUN_0010c7a0(param_1,result,object), flag_1 == '\\0')) {\n          return 0;\n        }\n        var_1 = *(long *)(object + 4);\n        if (*(int *)(param_1 + 0x30) == *(int *)(var_1 + 8)) {\n          var_7 = *(uint *)(var_1 + 0xc);\n          if (var_7 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var_3 = *object;\nLAB_00112ed2:\n          result = FUN_00109d5c(param_2,result,var_7,var_3);\n          return result;\n        }\n        *(int *)(var_1 + 8) = *(int *)(param_1 + 0x30);\n      }\n      var_4 = 0;\n      if (*(long *)(object + 4) != 0) {\n        var_4 = *(undefined4 *)(*(long *)(object + 4) + 0xc);\n      }\n      flag_1 = FUN_0010a69a(param_2,result,var_4,*object == 7,object[1]);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(object + 4) != (long *)0x0) && (var_6 = 0, **(long **)(object + 4) != 0)) {\n        while( true ) {\n          ptr_3 = *(undefined8 **)(**(long **)(object + 4) + var_6 * 8);\n          if (ptr_3 == (undefined8 *)0x0) break;\n          flag_1 = decompiled_function_00112c1f(param_1,param_2,ptr_3[1],0);\n          if (flag_1 == '\\0') {\n            return 0;\n          }\n          flag_1 = FUN_0010ba08(param_2,*ptr_3,*(undefined4 *)(ptr_3 + 3),\n                               *(undefined4 *)((long)ptr_3 + 0x1c),*(undefined4 *)(ptr_3 + 2));\n          if (flag_1 == '\\0') {\n            return 0;\n          }\n          var_6 = (ulong)((int)var_6 + 1);\n        }\n      }\n      result = FUN_0010a77a(param_2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(object + 4) == 0) {\n        var_7 = 0;\n        ptr_4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(object + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (var_6 = param_1, flag_1 = FUN_0010c7a0(param_1,result,object), flag_1 == '\\0')) {\n          return 0;\n        }\n        var_1 = *(long *)(object + 4);\n        var_7 = *(uint *)(var_1 + 0xc);\n        if (*(int *)(param_1 + 0x30) == *(int *)(var_1 + 8)) {\n          if (var_7 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var_3 = *object;\n          goto LAB_00112ed2;\n        }\n        ptr_4 = *(int **)(var_1 + 0x20);\n        *(int *)(var_1 + 8) = *(int *)(param_1 + 0x30);\n        if (((ptr_4 != (int *)0x0) && (object != ptr_4)) &&\n           (var_6 = param_1, flag_1 = decompiled_function_00112c1f(param_1,param_2,ptr_4,0), flag_1 == '\\0')) {\n          return 0;\n        }\n      }\n      flag_1 = FUN_0010a83e(param_2,result,var_7,*object == 9,object[1],ptr_4 != (int *)0x0,\n                           object == ptr_4,var_6);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(object + 4) != (long *)0x0) {\n        var_7 = 0;\n        if (**(long **)(object + 4) != 0) {\n          while (ptr_3 = *(undefined8 **)(**(long **)(object + 4) + (ulong)var_7 * 8),\n                ptr_3 != (undefined8 *)0x0) {\n            flag_1 = decompiled_function_00112c1f(param_1,param_2,ptr_3[1],0);\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr_3 + 0x14) == '\\0') {\n              flag_1 = FUN_0010ba08(param_2,*ptr_3,*(undefined4 *)(ptr_3 + 3));\n            }\n            else {\n              flag_1 = FUN_0010a94e(param_2,*ptr_3,ptr_3[3]);\n            }\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            var_7 = var_7 + 1;\n          }\n        }\n        var_7 = 0;\n        if (*(long *)(*(long *)(object + 4) + 0x10) != 0) {\n          while (ptr_3 = *(undefined8 **)\n                           (*(long *)(*(long *)(object + 4) + 0x10) + (ulong)var_7 * 8),\n                ptr_3 != (undefined8 *)0x0) {\n            flag_1 = decompiled_function_00112c1f(param_1,param_2,*ptr_3,0);\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            flag_1 = FUN_0010aa53(param_2,*(undefined4 *)(ptr_3 + 1),\n                                 *(undefined *)((long)ptr_3 + 0xc));\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            var_7 = var_7 + 1;\n          }\n        }\n        var_8 = 0;\n        if (*(long *)(*(long *)(object + 4) + 0x18) != 0) {\n          while (ptr_3 = *(undefined8 **)\n                           (*(long *)(*(long *)(object + 4) + 0x18) + (ulong)var_8 * 8),\n                ptr_3 != (undefined8 *)0x0) {\n            flag_1 = FUN_0010ab4d(param_2,*ptr_3);\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            var_7 = 0;\n            while (ptr_2 = *(undefined8 **)(ptr_3[1] + (ulong)var_7 * 8),\n                  ptr_2 != (undefined8 *)0x0) {\n              if ((ptr_2[4] != 0) &&\n                 (flag_1 = decompiled_function_00112c1f(param_1,param_2,ptr_2[4],0), flag_1 == '\\0')) {\n                return 0;\n              }\n              flag_1 = decompiled_function_00112c1f(param_1,param_2,ptr_2[1],0);\n              if (flag_1 == '\\0') {\n                return 0;\n              }\n              if (ptr_2[3] == -1) {\n                flag_1 = FUN_0010adf2(param_2,*ptr_2,*(undefined4 *)(ptr_2 + 2),\n                                     *(undefined *)((long)ptr_2 + 0x14),\n                                     *(undefined *)((long)ptr_2 + 0x15));\n              }\n              else {\n                flag_1 = FUN_0010add5(param_2);\n              }\n              if (flag_1 == '\\0') {\n                return 0;\n              }\n              var_7 = var_7 + 1;\n            }\n            flag_1 = FUN_00109bbb(param_2);\n            if (flag_1 == '\\0') {\n              return 0;\n            }\n            var_8 = var_8 + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(param_2);\n      return result;\n    case 0xb:\n      ptr_3 = *(undefined8 **)(object + 4);\n      if (ptr_3 == (undefined8 *)0x0) {\n        var_2 = 0;\n        var_5 = 0;\n      }\n      else {\n        var_2 = ptr_3[1];\n        var_5 = *ptr_3;\n      }\n      result = FUN_0010e453(param_2,result,var_5,var_2);\n      return result;\n    case 0xc:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(param_2);\n      return result;\n    case 0xd:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      var_6 = 0;\n      if (*(long *)(*(long *)(object + 4) + 8) == 0) {\n        var_6 = 0xffffffff;\n      }\n      else {\n        while (var_1 = *(long *)(*(long *)(*(long *)(object + 4) + 8) + var_6 * 8), var_1 != 0) {\n          var_6 = var_6 + 1;\n          flag_1 = decompiled_function_00112c1f(param_1,param_2,var_1,0);\n          if (flag_1 == '\\0') {\n            return 0;\n          }\n        }\n        var_6 = var_6 & 0xffffffff;\n      }\n      result = FUN_0010e5db(param_2,var_6,*(undefined *)(*(long *)(object + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(param_2);\n      return result;\n    case 0xf:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(param_2,*(undefined8 *)(*(long *)(object + 4) + 8),\n                           *(undefined8 *)(*(long *)(object + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(object + 4) + 8),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      var_1 = *(long *)(object + 4);\n      result = FUN_0010a181(param_2,*(undefined8 *)(var_1 + 0x10),*(undefined8 *)(var_1 + 0x18),\n                           *(undefined *)(var_1 + 0x20));\n      return result;\n    case 0x11:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(param_2,*(undefined *)(*(long *)(object + 4) + 8));\n      return result;\n    case 0x12:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(object + 4) + 8),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(param_2);\n      return result;\n    case 0x13:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,**(undefined8 **)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      var_6 = 0;\n      if (*(long *)(*(long *)(object + 4) + 0x10) == 0) {\n        var_6 = 0xffffffff;\n      }\n      else {\n        while (var_1 = *(long *)(*(long *)(*(long *)(object + 4) + 0x10) + var_6 * 8), var_1 != 0)\n        {\n          var_6 = var_6 + 1;\n          flag_1 = decompiled_function_00112c1f(param_1,param_2,var_1,0);\n          if (flag_1 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(object + 4) + 8) != 0) &&\n         (flag_1 = decompiled_function_00112c1f(param_1,param_2,*(long *)(*(long *)(object + 4) + 8),0),\n         flag_1 == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(param_2,*(long *)(*(long *)(object + 4) + 8) != 0,var_6 & 0xffffffff,\n                           *(undefined *)(*(long *)(object + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(param_2);\n      return result;\n    case 0x15:\n      flag_1 = decompiled_function_00112c1f(param_1,param_2,*(undefined8 *)(object + 4),0);\n      if (flag_1 == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(param_2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag_2 = *(int **)**(undefined8 **)(object + 4) == object;\n  object = *(int **)**(undefined8 **)(object + 4);\n  if (flag_2) {\nLAB_00112dd6:\n    result = FUN_00109d97(param_2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "dcgettext",
                "FUN_0010bba1",
                "FUN_0010a0e9",
                "FUN_0010adf2",
                "FUN_0010a0d3",
                "fprintf",
                "FUN_00109d5c",
                "FUN_0010a083",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "FUN_0010e453",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_00109e76",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "FUN_0010a0a0",
                "abort",
                "FUN_0010a181",
                "__assert_fail",
                "FUN_00109dfe",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "decompiled_function_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopySuccessful",
                "unaff_R15": "dataPointer",
                "lVar1": "errorString",
                "dcgettext": "getLocalizedMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorString;\n  char isCopySuccessful;\n  long dataPointer;\n  \n  errorString = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "errorMessage",
                "param_2": "warningMessage",
                "in_RAX": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 errorMessage,undefined8 warningMessage)\n\n{\n  undefined8 message;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,warningMessage,errorMessage,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_00109a32",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_input_file_format_00105828",
                "uVar2": "architecture",
                "uVar3": "machine",
                "uVar4": "errorMessage",
                "iVar1": "architectureResult"
            },
            "code": "\nundefined8 recognizeInputFileFormat_00105828(void)\n\n{\n  int architectureResult;\n  undefined4 architecture;\n  undefined8 machine;\n  undefined8 errorMessage;\n  \n  architectureResult = bfd_get_arch();\n  if (architectureResult == 0) {\n    machine = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,machine);\n  }\n  else {\n    machine = bfd_get_mach();\n    architecture = bfd_get_arch();\n    machine = bfd_printable_arch_mach(architecture,machine);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,machine);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "FUN_001125fa",
                "FUN_00119ed0",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_input_file_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "temp_directory",
                "mkdtemp": "make_temp_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *temp_directory;\n  \n  template = (char *)FUN_00114cf0();\n  temp_directory = mkdtemp(template);\n  if (temp_directory == (char *)0x0) {\n    free(template);\n  }\n  return temp_directory;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "FUN_00114cf0",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_call_function_0010bba1",
                "param_1": "bfd_handle",
                "param_2": "hash_key",
                "lVar1": "lookup_result",
                "uVar2": "function_result"
            },
            "code": "\nundefined8 lookup_and_call_function_0010bba1(long bfd_handle,undefined8 hash_key)\n\n{\n  long lookup_result;\n  undefined8 function_result;\n  \n  lookup_result = bfd_hash_lookup(bfd_handle + 0x1b8,hash_key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    function_result = FUN_00109cf4(bfd_handle,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return function_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_call_function_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "format_and_store_string_0010e6a8",
                "param_1": "paramPointer",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "temporaryString",
                "sVar3": "inputStringLen",
                "sVar4": "temporaryStringLen",
                "__s_00": "formattedString",
                "lVar5": "stringLookupResult",
                "uVar1": "hashLookupResult",
                "uVar2": "dataValue",
                "lVar8": "counter",
                "uVar6": "bfdErr",
                "uVar7": "errorMsg",
                "uVar9": "returnValue",
                "auVar10": "returnVals"
            },
            "code": "\nundefined  [16] formatAndStoreString_0010e6a8(long paramPointer,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  uint hashLookupResult;\n  undefined4 dataValue;\n  char *temporaryString;\n  size_t inputStringLen;\n  size_t temporaryStringLen;\n  char *formattedString;\n  long stringLookupResult;\n  undefined8 bfdErr;\n  undefined8 errorMsg;\n  long counter;\n  ulong returnValue;\n  undefined returnVals [16];\n  \n  counter = *(long *)(*(long *)(paramPointer + 0x60) + 0x10);\n  dataValue = *(undefined4 *)(*(long *)(paramPointer + 0x60) + 0x18);\n  temporaryString = (char *)FUN_00109b2f();\n  inputStringLen = strlen(inputString);\n  temporaryStringLen = strlen(temporaryString);\n  formattedString = (char *)xmalloc(inputStringLen + 0x14 + temporaryStringLen);\n  if (counter < 1) {\n    counter = *(long *)(paramPointer + 0x68);\n    *(long *)(paramPointer + 0x68) = counter + 1;\n    sprintf(formattedString,\"%s:t%ld=%s\",inputString,counter,temporaryString);\n  }\n  else {\n    sprintf(formattedString,\"%s:t%s\",inputString,temporaryString);\n  }\n  free(temporaryString);\n  hashLookupResult = FUN_0010e2f0(paramPointer,0x80,0,0,formattedString);\n  returnValue = (ulong)hashLookupResult;\n  if ((char)hashLookupResult != '\\0') {\n    free(formattedString);\n    stringLookupResult = bfd_hash_lookup(paramPointer + 0x1b8,inputString,1,0);\n    if (stringLookupResult != 0) {\n      *(long *)(stringLookupResult + 0x20) = counter;\n      *(undefined4 *)(stringLookupResult + 0x28) = dataValue;\n      goto LAB_0010e7b3;\n    }\n    dataValue = bfd_get_error();\n    bfdErr = bfd_errmsg(dataValue);\n    errorMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(errorMsg,bfdErr);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnVals._8_8_ = param4;\n  returnVals._0_8_ = returnValue;\n  return returnVals;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00119ed0",
                "sprintf",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_store_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "generate_modified_string_0010e7c2",
                "param_1": "input1",
                "param_2": "inputString",
                "param_3": "input2",
                "param_4": "output",
                "__s": "generatedString",
                "sVar1": "inputStringLength",
                "sVar2": "generatedStringLength",
                "__s_00": "modifiedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] generateModifiedString_0010e7c2(undefined8 input1,char *inputString,undefined8 input2,undefined8 output)\n\n{\n  char *generatedString;\n  size_t inputStringLength;\n  size_t generatedStringLength;\n  char *modifiedString;\n  undefined result [16];\n  \n  generatedString = (char *)FUN_00109b2f();\n  inputStringLength = strlen(inputString);\n  generatedStringLength = strlen(generatedString);\n  modifiedString = (char *)xmalloc(inputStringLength + 3 + generatedStringLength);\n  sprintf(modifiedString,\"%s:T%s\",inputString,generatedString);\n  free(generatedString);\n  result._0_4_ = FUN_0010e2f0(input1,0x80,0,0,modifiedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modifiedString);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_modified_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_and_exit_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "someFlag",
                "local_d8": "length",
                "local_d4": "limit",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporary",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid initializeAndExit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char someFlag;\n  undefined4 length;\n  undefined4 limit;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporary [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (someFlag != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  buffer = &stack0x00000008;\n  length = 8;\n  localBuffer = temporary;\n  limit = 0x30;\n  value1 = param2;\n  value2 = param3;\n  value3 = param4;\n  value4 = param5;\n  value5 = param6;\n  FUN_00119e70(param1,&length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00104920",
                "FUN_0010da0b",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00115b70",
                "FUN_001083de",
                "FUN_00114190",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "functionPointer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *functionPointer;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*functionPointer);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "inputArray",
                "in_R10": "count",
                "unaff_RBX": "param_5",
                "unaff_RBP": "param_6",
                "unaff_R14": "currentItem",
                "unaff_R13": "endOfArray",
                "unaff_R15": "param_7",
                "param_11": "tempArray",
                "param_12": "outputArray",
                "param_13": "param_8",
                "param_14": "arraySize",
                "bVar14": "flag",
                "sVar1": "itemSize",
                "iVar3": "comparisonResult",
                "uVar4": "index",
                "uVar5": "minSize",
                "uVar6": "maxSize",
                "lVar7": "remainingSize",
                "uVar8": "currentSize",
                "__ptr": "mallocedPtr",
                "puVar9": "currentOutputPtr",
                "cVar10": "character",
                "puVar11": "inputPtr",
                "puVar12": "outputPtr",
                "pcVar2": "functionPointer"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t itemSize;\n  code *functionPointer;\n  int comparisonResult;\n  uint index;\n  undefined *mallocedPtr;\n  size_t *inputArray;\n  ulong minSize;\n  ulong maxSize;\n  long remainingSize;\n  ulong currentSize;\n  size_t param_5;\n  size_t *param_6;\n  undefined *currentOutputPtr;\n  char character;\n  undefined *inputPtr;\n  ulong count;\n  undefined *outputPtr;\n  size_t in_R11;\n  size_t *endOfArray;\n  size_t *currentItem;\n  size_t param_7;\n  size_t *pitemSize3;\n  byte flag;\n  size_t param_7;\n  size_t param_9;\n  ulong param_10;\n  size_t *tempArray;\n  undefined *outputArray;\n  long param_8;\n  size_t arraySize;\n  \n  flag = 0;\ncode_r0x00116852:\n  index = (int)count + 1;\n  if (0x10 < (int)count) goto LAB_001167f5;\nLAB_00116863:\n  currentItem = currentItem + -9;\n  do {\n    if (endOfArray <= currentItem) {\n      itemSize = currentItem[2];\n      if (itemSize == 0) goto LAB_00116863;\n      currentSize = (ulong)index;\n      if ((*currentItem == *param_6) &&\n         (comparisonResult = memcmp((void *)currentItem[3],(void *)param_6[3],*param_6), comparisonResult == 0)) {\n        maxSize = currentItem[7];\n        minSize = currentItem[8];\n        count = currentSize & 0xffffffff;\n        if (param_7 == maxSize) {\n          if (param_5 != minSize) goto LAB_001167a6;\n          param_6[2] = 0;\n        }\n        else {\n          if (param_7 < maxSize) {\n            if (minSize < param_7) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minSize) || (param_7 <= (minSize + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (param_5 < param_7) {\n              if ((0xfffffffffffffff0 < param_5) ||\n                 (maxSize <= (param_5 + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (param_5 == minSize) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (param_5 <= minSize) {\n              param_6[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minSize < param_7) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (itemSize == 0x101)) goto code_r0x00116852;\n          if (minSize <= param_5) {\n            minSize = param_5;\n          }\n          if (maxSize < param_7) {\n            param_7 = maxSize;\n          }\n          currentItem[8] = minSize;\n          currentItem[7] = param_7;\n          param_6[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentItem = param_6;\n        param_6 = currentItem + 9;\n        if (inputArray <= param_6) {\n          qsort(tempArray,arraySize,0x48,FUN_0011a250);\n          mallocedPtr = (undefined *)xmalloc(param_10 * 2);\n          param_7 = 0;\n          outputPtr = mallocedPtr;\n          for (pitemSize3 = tempArray; pitemSize3 < inputArray; pitemSize3 = pitemSize3 + 9) {\n            if (pitemSize3[2] != 0) {\n              inputPtr = outputPtr + 4;\n              currentOutputPtr = outputPtr + 0xc;\n              functionPointer = *(code **)(*(long *)(param_8 + 8) + 0x50);\n              if ((pitemSize3[7] == param_9) && (pitemSize3[8] == param_7)) {\n                (*functionPointer)(*pitemSize3,outputPtr);\n                (**(code **)(*(long *)(param_8 + 8) + 0x50))(0,inputPtr);\n                (**(code **)(*(long *)(param_8 + 8) + 0x50))(pitemSize3[2],outputPtr + 8);\n                maxSize = pitemSize3[6];\n                currentSize = *pitemSize3;\n                outputPtr = (undefined *)pitemSize3[3];\n                inputPtr = currentOutputPtr;\n                for (minSize = currentSize; minSize != 0; minSize = minSize - 1) {\n                  *inputPtr = *outputPtr;\n                  outputPtr = outputPtr + (ulong)flag * -2 + 1;\n                  inputPtr = inputPtr + (ulong)flag * -2 + 1;\n                }\n                if (currentSize < maxSize) {\n                  for (remainingSize = maxSize - currentSize; remainingSize != 0; remainingSize = remainingSize + -1) {\n                    *inputPtr = 0;\n                    inputPtr = inputPtr + (ulong)flag * -2 + 1;\n                  }\n                }\n                outputPtr = currentOutputPtr + maxSize;\n              }\n              else {\n                (*functionPointer)();\n                if (*(int *)(*(long *)(param_8 + 8) + 8) == 5) {\n                  character = (*(char *)(*(long *)(param_8 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  character = '\\b';\n                }\n                (**(code **)(*(long *)(param_8 + 8) + 0x50))(character,inputPtr);\n                (**(code **)(*(long *)(param_8 + 8) + 0x50))(pitemSize3[2],outputPtr + 8);\n                currentSize = *pitemSize3;\n                outputPtr = (undefined *)pitemSize3[3];\n                inputPtr = currentOutputPtr;\n                for (maxSize = currentSize; maxSize != 0; maxSize = maxSize - 1) {\n                  *inputPtr = *outputPtr;\n                  outputPtr = outputPtr + (ulong)flag * -2 + 1;\n                  inputPtr = inputPtr + (ulong)flag * -2 + 1;\n                }\n                maxSize = pitemSize3[6];\n                if (currentSize < maxSize) {\n                  for (remainingSize = maxSize - currentSize; remainingSize != 0; remainingSize = remainingSize + -1) {\n                    *inputPtr = 0;\n                    inputPtr = inputPtr + (ulong)flag * -2 + 1;\n                  }\n                }\n                remainingSize = *(long *)(param_8 + 8);\n                currentOutputPtr = currentOutputPtr + maxSize;\n                outputPtr = currentOutputPtr + 8;\n                if ((*(int *)(remainingSize + 8) == 5) &&\n                   (*(char *)(*(long *)(param_8 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(remainingSize + 0x38))(pitemSize3[7],currentOutputPtr);\n                  (**(code **)(*(long *)(param_8 + 8) + 0x38))(pitemSize3[8],outputPtr);\n                  outputPtr = currentOutputPtr + 0x10;\n                }\n                else {\n                  (**(code **)(remainingSize + 0x50))(pitemSize3[7],currentOutputPtr);\n                  (**(code **)(*(long *)(param_8 + 8) + 0x50))(pitemSize3[8],currentOutputPtr + 4);\n                }\n                param_9 = pitemSize3[7];\n                param_7 = pitemSize3[8];\n              }\n            }\n          }\n          maxSize = (long)outputPtr - (long)mallocedPtr;\n          currentSize = maxSize;\n          outputPtr = mallocedPtr;\n          if (maxSize < param_10) {\n            for (; param_10 = maxSize, currentSize != 0; currentSize = currentSize - 1) {\n              *outputArray = *outputPtr;\n              outputPtr = outputPtr + (ulong)flag * -2 + 1;\n              outputArray = outputArray + (ulong)flag * -2 + 1;\n            }\n          }\n          free(mallocedPtr);\n          free(tempArray);\n          return param_10;\n        }\n        in_R11 = currentItem[0xb];\n      } while (in_R11 == 0);\n      param_7 = currentItem[0x10];\n      param_5 = currentItem[0x11];\n      index = 0;\n      if (param_7 != param_5) break;\n      currentItem[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "memcmp",
                "xmalloc",
                "qsort",
                "free",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "extract_long_from_param_00113d3a",
                "param_1": "input_param",
                "lVar1": "result"
            },
            "code": "\nlong extract_long_from_param_00113d3a(long input_param)\n\n{\n  long result;\n  \n  if (input_param != 0) {\n    result = *(long *)(input_param + 8);\n    if (result == 0) {\n      result = FUN_00112904(0xc,0);\n      if (result == 0) {\n        result = 0;\n      }\n      else {\n        *(long *)(result + 0x10) = input_param;\n        *(long *)(input_param + 8) = result;\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_long_from_param_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "extract_data_from_binary_0010a0d3",
                "param_1": "binaryAddress"
            },
            "code": "\nvoid extractDataFromBinary_0010a0d3(long binaryAddress)\n\n{\n  FUN_00109ed3(binaryAddress,0x42,*(undefined4 *)(*(long *)(binaryAddress + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_binary_code_00115530",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "argument3",
                "lVar1": "tempVar1",
                "pcVar2": "tempVar2",
                "ppcVar3": "tempVar3",
                "cVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "sVar7": "tempVar7",
                "sVar8": "tempVar8",
                "lVar9": "tempVar9",
                "pcVar10": "tempVar10",
                "pcVar11": "tempVar11",
                "pcVar12": "tempVar12",
                "uVar13": "tempVar13",
                "bVar14": "tempVar14",
                "local_50": "localVar1",
                "local_48": "localVar2",
                "local_40": "localArr1"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processBinaryCode_00115530(long argument1,char **argument2,long argument3)\n\n{\n  long tempVar1;\n  char *tempVar2;\n  char **tempVar3;\n  char tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  size_t tempVar7;\n  size_t tempVar8;\n  long tempVar9;\n  char *tempVar10;\n  char *tempVar11;\n  char *tempVar12;\n  uint tempVar13;\n  bool tempVar14;\n  long localVar1;\n  char *localVar2;\n  long localArr1 [2];\n  \n  tempVar4 = FUN_001159d0(argument2);\n  if (tempVar4 != '\\0') {\n    return;\n  }\n  tempVar10 = *argument2;\n  tempVar13 = *(uint *)((long)argument2 + 0x24);\n  localVar2 = tempVar10;\n  tempVar3 = DAT_001278d8;\n  if (*(int *)(*(long *)(argument1 + 8) + 8) != *(int *)(*(long *)(argument3 + 8) + 8)) {\n    tempVar13 = tempVar13 & *(uint *)(*(long *)(argument1 + 8) + 0x18) &\n             *(uint *)(*(long *)(argument3 + 8) + 0x18);\n  }\n  for (; tempVar3 != (char **)0x0; tempVar3 = (char **)tempVar3[3]) {\n    tempVar5 = strcmp(*tempVar3,tempVar10);\n    if (tempVar5 == 0) {\n      if (*(uint *)(tempVar3 + 2) != 0xffffffff) {\n        tempVar13 = *(uint *)(tempVar3 + 2);\n      }\n      if (tempVar10 != tempVar3[1]) {\n        localVar2 = tempVar3[1];\n        tempVar13 = FUN_00115f30(tempVar13,argument3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (tempVar10 = DAT_001278f8, (*(byte *)((long)argument2 + 0x24) & 1) != 0)) ||\n     (tempVar10 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    tempVar7 = strlen(tempVar10);\n    tempVar8 = strlen(localVar2);\n    tempVar12 = (char *)xmalloc(tempVar7 + 1 + tempVar8);\n    tempVar10 = strcpy(tempVar12,tempVar10);\n    localVar2 = strcat(tempVar10,localVar2);\n  }\n  tempVar9 = FUN_00114190(*argument2,0,0x80);\n  tempVar14 = false;\n  if (tempVar9 == 0) {\n    if ((DAT_00127a2c == 4) && ((tempVar13 & 0x2000001) != 0)) {\n      tempVar5 = *(int *)(*(long *)(argument1 + 8) + 8);\n      if (tempVar5 == 5) {\n        if (*(int *)(argument2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(argument3 + 8) + 8) == 5) {\n            tempVar14 = (tempVar13 & 0x2000000) == 0;\n            tempVar6 = ~((-(uint)((tempVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)argument2 + 0x24) = *(uint *)((long)argument2 + 0x24) & tempVar6;\n          }\n          else {\n            tempVar6 = 0xfdfffefd;\n          }\n          tempVar13 = tempVar13 & tempVar6;\n        }\n      }\n      else if ((tempVar5 != 2) || (tempVar5 = strcmp(*argument2,\".buildid\"), tempVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    tempVar13 = FUN_00115f30(tempVar13 & 0x104 | *(uint *)(tempVar9 + 0x28),argument3,*argument2);\n  }\n  tempVar4 = bfd_convert_section_setup(argument1,argument2,argument3,&localVar2,localArr1);\n  if (tempVar4 == '\\0') {\n    tempVar10 = (char *)0x0;\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  tempVar10 = (char *)bfd_make_section_anyway_with_flags(argument3,localVar2,tempVar13);\n  if (tempVar10 == (char *)0x0) {\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      localArr1[0] = 0;\n      goto LAB_001158e7;\n    }\n    tempVar4 = bfd_set_section_size(tempVar10,localArr1[0]);\n    if (tempVar4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    localArr1[0] = ((((long)DAT_00127a1c - 1U) + localArr1[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    tempVar4 = bfd_set_section_size(tempVar10);\n    if (tempVar4 == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  localVar1 = 0;\n  tempVar12 = argument2[6];\n  tempVar9 = FUN_00114190(*argument2,0,0x18);\n  if (tempVar9 == 0) {\n    tempVar10[0x28] = tempVar10[0x28] | 1;\n    tempVar11 = *argument2;\n    tempVar12 = tempVar12 + _DAT_00127990;\n    *(char **)(tempVar10 + 0x30) = tempVar12;\n    *(char **)(tempVar10 + 0x38) = tempVar12;\n    tempVar12 = argument2[7];\n    tempVar9 = FUN_00114190(tempVar11,0,0x60);\n    if (tempVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar11 = *(char **)(tempVar9 + 0x20);\n    if ((*(byte *)(tempVar9 + 0x14) & 0x40) != 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    *(char **)(tempVar10 + 0x38) = tempVar11;\n    tempVar9 = FUN_00114190(*argument2,0,0x200);\n    if (tempVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempVar13 = *(uint *)((long)argument2 + 0x7c);\n    if (tempVar13 < 0x3f) goto LAB_001156c4;\n    localVar1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(tempVar10 + 0xb4) = *(undefined4 *)((long)argument2 + 0xb4);\n    tempVar10[0x28] = tempVar10[0x28] & 0xcfU | *(byte *)(argument2 + 5) & 0x30;\n    argument2[0xc] = tempVar10;\n    argument2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)argument2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    tempVar4 = (**(code **)(*(long *)(argument3 + 8) + 0x158))(argument1,argument2,argument3,tempVar10);\n    if (tempVar4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    tempVar11 = *(char **)(tempVar9 + 0x18);\n    if ((*(byte *)(tempVar9 + 0x14) & 8) == 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    tempVar10[0x28] = tempVar10[0x28] | 1;\n    tempVar2 = *argument2;\n    *(char **)(tempVar10 + 0x30) = tempVar11;\n    *(char **)(tempVar10 + 0x38) = tempVar11;\n    tempVar12 = argument2[7];\n    tempVar9 = FUN_00114190(tempVar2,0,0x60);\n    if (tempVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVar11 = *argument2;\n    *(char **)(tempVar10 + 0x38) = tempVar12 + _DAT_00127990;\n    tempVar9 = FUN_00114190(tempVar11,0,0x200);\n    if (tempVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempVar13 = *(uint *)(tempVar9 + 0x2c);\n    if (0x3e < tempVar13) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(tempVar10 + 0x7c) = tempVar13;\n    *(undefined4 *)(tempVar10 + 0xb4) = *(undefined4 *)((long)argument2 + 0xb4);\n    tempVar10[0x28] = tempVar10[0x28] & 0xcfU | *(byte *)(argument2 + 5) & 0x30;\n    argument2[0xc] = tempVar10;\n    argument2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)argument2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempVar12 = argument2[0x1a];\n    tempVar9 = FUN_00115d00(tempVar12,argument2[0x1c]);\n    if ((tempVar9 == 0) ||\n       (tempVar1 = *(long *)(argument1 + 8), *(uint *)(tempVar9 + 0x18) = *(uint *)(tempVar9 + 0x18) | 0x20,\n       *(int *)(tempVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempVar12 + 0xb0) = tempVar9;\n    tempVar4 = (**(code **)(*(long *)(argument3 + 8) + 0x158))(argument1,argument2,argument3,tempVar10);\n    if (tempVar4 == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (tempVar14) {\n    *(undefined4 *)(*(long *)(tempVar10 + 0xd0) + 4) = 8;\n  }\n  if (localVar1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  FUN_001126c0(0,argument3,tempVar10,localVar1);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00115f30",
                "bfd_set_section_size",
                "xmalloc",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "strlen",
                "FUN_001159d0",
                "FUN_00114190",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_code_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "execute_function_0010a0bd",
                "param_1": "inputParameter"
            },
            "code": "\nvoid executeFunction_0010a0bd(long inputParameter)\n\n{\n  FUN_00109ed3(inputParameter,0x6b,*(undefined4 *)(*(long *)(inputParameter + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_type_00113e5e",
                "param_1": "input",
                "param_2": "output",
                "param_3": "offset",
                "cVar1": "result",
                "local_20": "temp"
            },
            "code": "\nundefined8 validate_type_00113e5e(undefined8 input,char **output,long offset)\n\n{\n  char result;\n  char *temp [2];\n  \n  temp[0] = *output;\n  *output = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)temp[0] < 5) ||\n      (result = FUN_00113fb0(temp[0],\"type\"), result == '\\0')) ||\n     ((temp[0][4] != '$' && (temp[0][4] != '.')))) {\n    if (*temp[0] != '_') {\n      return 1;\n    }\n    if (temp[0][1] != '_') {\n      return 1;\n    }\n    if (temp[0][2] != 'o') {\n      return 1;\n    }\n    if (temp[0][3] != 'p') {\n      return 1;\n    }\n    temp[0] = temp[0] + 4;\n  }\n  else {\n    temp[0] = temp[0] + 5;\n  }\n  result = FUN_0010c95e(input,temp,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_type_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "lVar1": "dataStructPtr",
                "pcVar2": "str1",
                "bVar3": "byteVal",
                "pcVar4": "str2",
                "__s": "str3",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVal1",
                "cVar11": "charVal2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long param1,char *param2,uint param3,char param4,char param5,char param6,\n            undefined8 param7,char param8)\n\n{\n  long dataStructPtr;\n  char *str1;\n  byte byteVal;\n  char *str2;\n  char *str3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVal1;\n  char charVal2;\n  byte localByte;\n  \n  str3 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n  str2 = (char *)FUN_00109b2f();\n  if (param8 != '\\0') {\n    byteVal = 1;\n    if (localByte == 0) {\n      byteVal = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n    }\n    localByte = byteVal & 1;\n    str3 = (char *)FUN_00109b2f(param1);\n  }\n  dataStructPtr = *(long *)(param1 + 0x60);\n  if ((dataStructPtr == 0) || (str1 = *(char **)(dataStructPtr + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < param3) {\n                    \n      abort();\n    }\n    if (param5 == '\\0') {\n      charVal2 = (-(param6 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVal2 = (-(param6 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVal1 = '?';\n    if (param4 == '\\0') {\n      charVal1 = (-(param8 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    len3 = strlen(param2);\n    len4 = 0;\n    if (param8 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(dataStructPtr + 0x30) = result;\n    str1 = *(char **)(*(long *)(param1 + 0x60) + 0x30);\n    len1 = strlen(str1);\n    sprintf(str1 + len1,\"%s:%s;%c%c%c\",str2,param2,(ulong)(byte)(0x32 - (char)param3),\n            (ulong)(uint)(int)charVal2,(ulong)(uint)(int)charVal1,len1);\n    free(str2);\n    if (param8 != '\\0') {\n      str2 = *(char **)(*(long *)(param1 + 0x60) + 0x30);\n      len1 = strlen(str2);\n      sprintf(str2 + len1,\"%ld;%s;\",param7,str3);\n      free(str3);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(param1 + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "pointers",
                "param_3": "size",
                "uVar1": "value1",
                "uVar2": "errorMessage"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *pointers,undefined8 size)\n\n{\n  undefined8 value1;\n  undefined8 errorMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(pointers[1] + 8) != 2)) {\n    value1 = *pointers;\n    flags = flags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(errorMessage,value1,size);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_value_from_parameter_001129f4",
                "param_1": "input_array",
                "puVar1": "pointer_to_input_array",
                "piVar2": "current_array"
            },
            "code": "\nundefined8 get_value_from_parameter_001129f4(int *input_array)\n\n{\n  undefined8 *pointer_to_input_array;\n  int *current_array;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    pointer_to_input_array = (undefined8 *)(input_array + 4);\n    current_array = **(int ***)(undefined8 *)*pointer_to_input_array;\n  } while ((input_array != current_array) && (input_array = current_array, current_array != (int *)0x0));\n  return ((undefined8 *)*pointer_to_input_array)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_value_from_parameter_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "toggle_output_001082b3",
                "uVar1": "outputStatus"
            },
            "code": "\nuint toggleOutput_001082b3(void)\n\n{\n  uint outputStatus;\n  \n  outputStatus = FUN_00113ede();\n  return outputStatus ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "toggle_output_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "decompile_and_copy_file_00114690",
                "param_1": "input_path",
                "param_2": "output_path",
                "param_3": "file_descriptor",
                "param_4": "stat_pointer",
                "param_5": "open_flags",
                "param_6": "tempdir_mode",
                "param_7": "copy_mode",
                "bVar1": "byte_var",
                "cVar2": "char_var_1",
                "cVar3": "char_var_2",
                "iVar4": "int_var_1",
                "iVar5": "int_var_2",
                "ppcVar6": "pointer_pointer_char_1",
                "pvVar7": "pointer_void",
                "lVar8": "long_var_1",
                "puVar9": "pointer_undefined8_1",
                "piVar10": "pointer_int",
                "uVar11": "undefined8_var_1",
                "uVar12": "undefined8_var_2",
                "lVar13": "long_var_2",
                "puVar14": "pointer_undefined8_2",
                "pcVar15": "pointer_char_2",
                "ppcVar16": "pointer_pointer_char_2",
                "pcVar17": "pointer_char_3",
                "pcVar18": "pointer_char_4",
                "pcVar23": "pointer_char_5",
                "bVar25": "bool_var_1",
                "bVar26": "byte_var_2",
                "local_1a0": "local_pointer_undefined8_1",
                "local_198": "local_pointer_long_1",
                "local_158": "local_stat",
                "local_c8": "local_void_pointer_3",
                "uStack_b0": "unsigned_int_stack_var",
                "lStack_98": "long_stack_var"
            },
            "code": "\n\n\nvoid decompile_and_copy_file_00114690(undefined8 input_path,undefined8 output_path,int file_descriptor,undefined8 stat_pointer,\n                 undefined8 open_flags,long tempdir_mode,undefined8 copy_mode)\n\n{\n  byte byte_var;\n  char char_var_1;\n  char char_var_2;\n  int int_var_1;\n  int int_var_2;\n  char **pointer_pointer_char_1;\n  void *pointer_void;\n  long long_var_1;\n  undefined8 *pointer_undefined8_1;\n  int *pointer_int;\n  undefined8 undefined8_var_1;\n  undefined8 undefined8_var_2;\n  long long_var_2;\n  undefined8 *pointer_undefined8_2;\n  char *pointer_char_2;\n  char **pointer_pointer_char_2;\n  char *pointer_char_3;\n  char *pointer_char_4;\n  undefined8 *__ptr;\n  char **ppcVar19;\n  code *pchar_var_10;\n  long lVar21;\n  uint uVar22;\n  char *pointer_char_5;\n  stat *psVar24;\n  bool bool_var_1;\n  byte byte_var_2;\n  undefined8 *local_pointer_undefined8_1;\n  long *local_pointer_long_1;\n  stat local_stat;\n  void *local_void_pointer_3 [3];\n  uint unsigned_int_stack_var;\n  long long_stack_var;\n  \n  byte_var_2 = 0;\n  long_var_2 = FUN_00113f50();\n  if (long_var_2 < 1) {\n    if (long_var_2 == 0) {\n      undefined8_var_2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(undefined8_var_2,input_path);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  pointer_undefined8_2 = (undefined8 *)bfd_openr(input_path,open_flags);\n  if ((pointer_undefined8_2 == (undefined8 *)0x0) || (int_var_2 = bfd_stat(pointer_undefined8_2,stat_pointer), int_var_2 != 0)) {\n    FUN_001126c0(input_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)pointer_undefined8_2 + 0x44) = *(uint *)((long)pointer_undefined8_2 + 0x44) | 0x40000;\n  }\n  char_var_1 = bfd_check_format(pointer_undefined8_2,2);\n  if (char_var_1 != '\\0') {\n    if (tempdir_mode == 0) {\n      char_var_1 = '\\0';\n      tempdir_mode = *(long *)pointer_undefined8_2[1];\n    }\n    if (file_descriptor < 0) {\n      local_pointer_undefined8_1 = (undefined8 *)bfd_openw(output_path,tempdir_mode);\n    }\n    else {\n      local_pointer_undefined8_1 = (undefined8 *)bfd_fdopenw(output_path,tempdir_mode,file_descriptor);\n    }\n    if (local_pointer_undefined8_1 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        undefined8_var_2 = *pointer_undefined8_2;\n        undefined8_var_1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(undefined8_var_1,undefined8_var_2);\n        DAT_00127a10 = 0;\n      }\n      FUN_00114d50(local_pointer_undefined8_1,pointer_undefined8_2,DAT_001264b4);\n      local_pointer_long_1 = local_pointer_undefined8_1 + 0x1f;\n      if ((*(byte *)((long)pointer_undefined8_2 + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        undefined8_var_2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,pointer_undefined8_2,0,undefined8_var_2);\n        return;\n      }\n      pointer_char_2 = (char *)FUN_0011a0e0(*local_pointer_undefined8_1);\n      if (pointer_char_2 == (char *)0x0) {\n        pointer_int = __errno_location();\n        pointer_char_2 = strerror(*pointer_int);\n        undefined8_var_2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(undefined8_var_2,pointer_char_2);\n      }\n      if (DAT_00127a2c == 7) {\n        byte_var = *(byte *)((long)pointer_undefined8_2 + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        byte_var = *(byte *)((long)pointer_undefined8_2 + 0x49);\n        uVar22 = byte_var >> 3 & 1;\n      }\n      bool_var_1 = _DAT_001264b0 != 0;\n      *(byte *)((long)local_pointer_undefined8_1 + 0x49) =\n           byte_var & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)local_pointer_undefined8_1 + 0x49) & 0xe7;\n      if (bool_var_1) {\n        *(uint *)((long)local_pointer_undefined8_1 + 0x44) = *(uint *)((long)local_pointer_undefined8_1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointer_pointer_char_2 = (char **)bfd_openr_next_archived_file(pointer_undefined8_2,0);\n      char_var_2 = bfd_set_format(local_pointer_undefined8_1,*(byte *)(pointer_undefined8_2 + 9) & 7);\n      if (char_var_2 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(0,local_pointer_undefined8_1,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (pointer_pointer_char_2 != (char **)0x0))) {\n        pointer_char_4 = *pointer_pointer_char_2;\n        pointer_char_3 = pointer_char_4;\n        if (*pointer_char_4 == '/') {\nLAB_0010527d:\n          undefined8_var_2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(undefined8_var_2,pointer_char_4);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointer_char_3 != '\\0') {\n          pointer_char_5 = pointer_char_3;\n          if ((*pointer_char_3 == '.') && (pointer_char_5 = pointer_char_3 + 1, pointer_char_3[1] == '.')) {\n            pointer_char_5 = pointer_char_3 + 2;\n            if ((pointer_char_3[2] == '\\0') || (pointer_char_3[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_char_5 != '\\0' && (*pointer_char_5 != '/')); pointer_char_5 = pointer_char_5 + 1) {\n          }\n          pointer_char_3 = pointer_char_5;\n          if (*pointer_char_5 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        pointer_char_4 = (char *)concat(pointer_char_2,&DAT_0011b47d);\n        int_var_2 = stat(pointer_char_4,&local_stat);\n        pointer_undefined8_1 = __ptr;\n        if (-1 < int_var_2) {\n          long_var_2 = FUN_0011a0e0(pointer_char_4);\n          free(pointer_char_4);\n          if (long_var_2 == 0) {\n            pointer_int = __errno_location();\n            pointer_char_4 = strerror(*pointer_int);\n            undefined8_var_2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(undefined8_var_2,pointer_char_4);\n            goto LAB_00104e93;\n          }\n          pointer_undefined8_1 = (undefined8 *)xmalloc(0x18);\n          pointer_char_4 = *pointer_pointer_char_2;\n          *pointer_undefined8_1 = __ptr;\n          pointer_undefined8_1[2] = 0;\n          pointer_undefined8_1[1] = long_var_2;\n          pointer_char_4 = (char *)concat(long_var_2,&DAT_0011b47d,pointer_char_4);\n        }\n        int_var_2 = 0;\n        if (DAT_001279cb != '\\0') {\n          psVar24 = &local_stat;\n          for (long_var_2 = 0x24; long_var_2 != 0; long_var_2 = long_var_2 + -1) {\n            *(undefined4 *)&psVar24->st_dev = 0;\n            psVar24 = (stat *)((long)psVar24 + (ulong)byte_var_2 * -8 + 4);\n          }\n          ppcVar19 = (char **)pointer_pointer_char_2[0x1d];\n          if ((char **)pointer_pointer_char_2[0x1d] == (char **)0x0) {\n            ppcVar19 = pointer_pointer_char_2;\n          }\n          int_var_2 = (**(code **)(ppcVar19[1] + 0x1e8))(pointer_pointer_char_2,&local_stat);\n          if (int_var_2 != 0) {\n            pointer_char_3 = *pointer_pointer_char_2;\n            undefined8_var_2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(undefined8_var_2,pointer_char_3);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pointer_char_4;\n        *__ptr = pointer_undefined8_1;\n        __ptr[2] = 0;\n        char_var_2 = bfd_check_format(pointer_pointer_char_2,1);\n        if (char_var_2 == '\\0') {\n          undefined8_var_2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,pointer_pointer_char_2,0,undefined8_var_2);\n          ppcVar19 = (char **)bfd_openw(pointer_char_4,tempdir_mode);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(pointer_char_4,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointer_pointer_char_1 = (char **)pointer_pointer_char_2[0x1d];\n          if ((char **)pointer_pointer_char_2[0x1d] == (char **)0x0) {\n            pointer_pointer_char_1 = pointer_pointer_char_2;\n          }\n          int_var_1 = (**(code **)(pointer_pointer_char_1[1] + 0x1e8))(pointer_pointer_char_2);\n          long_var_2 = long_stack_var;\n          if (int_var_1 == 0) {\n            if (long_stack_var < 0) {\n              FUN_001125fa(pointer_pointer_char_2);\n              undefined8_var_2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(undefined8_var_2);\n            }\n            else {\n              int_var_1 = bfd_seek(pointer_pointer_char_2,0,0);\n              if (int_var_1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  pointer_char_3 = *ppcVar19;\n                  undefined8_var_2 = FUN_001125fa(pointer_pointer_char_2);\n                  pointer_char_5 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointer_char_5,undefined8_var_2,pointer_char_3);\n                }\n                pointer_void = (void *)xmalloc(0x2000);\n                for (; long_var_2 != 0; long_var_2 = long_var_2 - lVar21) {\n                  lVar21 = 0x2000;\n                  if (long_var_2 < 0x2001) {\n                    lVar21 = long_var_2;\n                  }\n                  long_var_1 = bfd_bread(pointer_void,lVar21,pointer_pointer_char_2);\n                  pointer_pointer_char_1 = pointer_pointer_char_2;\n                  if ((lVar21 != long_var_1) ||\n                     (long_var_1 = bfd_bwrite(pointer_void,lVar21,ppcVar19), pointer_pointer_char_1 = ppcVar19,\n                     lVar21 != long_var_1)) {\n                    FUN_001126c0(0,pointer_pointer_char_1,0,0);\n                    free(pointer_void);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,unsigned_int_stack_var | 0x100);\n                free(pointer_void);\n                char_var_2 = bfd_close_all_done(ppcVar19);\n                if (char_var_2 == '\\0') {\n                  FUN_001126c0(pointer_char_4,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8_var_2 = FUN_001125fa(pointer_pointer_char_2);\n              FUN_0011a110(undefined8_var_2);\n            }\n          }\n          else {\n            FUN_001126c0(0,pointer_pointer_char_2,0,0);\n          }\nLAB_00104f00:\n          char_var_2 = bfd_close_all_done(ppcVar19);\n          if (char_var_2 == '\\0') {\n            FUN_001126c0(pointer_char_4,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointer_char_4);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (char_var_1 == '\\0') {\n            ppcVar19 = (char **)bfd_openw(pointer_char_4,*(undefined8 *)pointer_pointer_char_2[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(pointer_char_4,tempdir_mode);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          char_var_2 = FUNC_00114e50(pointer_pointer_char_2,ppcVar19,copy_mode);\n          if (char_var_2 == '\\0') {\n            int_var_1 = bfd_get_arch(pointer_pointer_char_2);\n            if (int_var_1 == 0) goto LAB_00104d75;\n            char_var_2 = bfd_close_all_done(ppcVar19);\n            if (char_var_2 == '\\0') {\n              FUN_001126c0(pointer_char_4,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var_2 = bfd_close(ppcVar19);\n          if (char_var_2 == '\\0') {\n            FUN_001126c0(pointer_char_4,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (int_var_2 == 0)) {\n            FUN_0011a350(pointer_char_4,&local_stat);\n          }\n          long_var_2 = bfd_openr(pointer_char_4,tempdir_mode);\n          __ptr[2] = long_var_2;\n          *local_pointer_long_1 = long_var_2;\n          local_pointer_long_1 = (long *)(long_var_2 + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(pointer_undefined8_2);\n          bfd_close(pointer_pointer_char_2);\n          pointer_pointer_char_2 = ppcVar19;\n        }\n      }\n      *local_pointer_long_1 = 0;\n      pointer_void = (void *)xstrdup(*local_pointer_undefined8_1);\n      if (DAT_00127a20 == 0) {\n        pchar_var_10 = bfd_close;\n      }\n      else {\n        pchar_var_10 = bfd_close_all_done;\n      }\n      char_var_1 = (*pchar_var_10)(local_pointer_undefined8_1);\n      if (char_var_1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(pointer_void,0,0,0);\n      }\n      free(pointer_void);\n      pointer_void = (void *)xstrdup(*pointer_undefined8_2);\n      char_var_1 = bfd_close(pointer_undefined8_2);\n      if (char_var_1 == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(pointer_void,0,0,0);\n      }\n      free(pointer_void);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointer_undefined8_2 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointer_undefined8_2;\n      }\n      rmdir(pointer_char_2);\n      free(pointer_char_2);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    FUN_001126c0(output_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  char_var_1 = bfd_check_format_matches(pointer_undefined8_2,1,local_void_pointer_3);\n  if (char_var_1 == '\\0') {\n    int_var_2 = bfd_get_error();\n    char_var_1 = bfd_check_format_matches(pointer_undefined8_2,3,&local_stat);\n    if (char_var_1 == '\\0') {\n      int_var_1 = bfd_get_error();\n      if (int_var_2 != int_var_1) {\n        bfd_set_error(int_var_2);\n      }\n      FUN_001126c0(input_path,0,0,0);\n      if (int_var_2 == 0xd) {\n        FUN_0011256b(local_void_pointer_3[0]);\n      }\n      if (int_var_1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      FUN_0011256b(local_stat.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (int_var_2 == 0xd) {\n      free(local_void_pointer_3[0]);\n    }\n  }\n  if (tempdir_mode == 0) {\n    tempdir_mode = *(long *)pointer_undefined8_2[1];\n  }\n  if (file_descriptor < 0) {\n    long_var_2 = bfd_openw(output_path,tempdir_mode);\n  }\n  else {\n    long_var_2 = bfd_fdopenw(output_path,tempdir_mode,file_descriptor);\n  }\n  if (long_var_2 == 0) goto LAB_00105231;\n  FUN_00114d50(long_var_2,pointer_undefined8_2,DAT_001264b4);\n  char_var_1 = FUNC_00114e50(pointer_undefined8_2,long_var_2,copy_mode);\n  if (char_var_1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    char_var_1 = bfd_close(long_var_2);\n    goto LAB_001147d5;\n  }\n  char_var_1 = bfd_close_all_done(long_var_2);\nLAB_001147d5:\n  if (char_var_1 != '\\x01') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(output_path,0,0,0);\n    return;\n  }\n  char_var_1 = bfd_close(pointer_undefined8_2);\n  if (char_var_1 == '\\0') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(input_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "FUN_00114e50",
                "bfd_check_format_matches",
                "bfd_check_format",
                "bfd_set_format",
                "free",
                "FUN_00114d50",
                "bfd_close",
                "bfd_close_all_done",
                "bfd_get_error",
                "bfd_fdopenw",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_set_error",
                "bfd_openr",
                "bfd_openw",
                "__errno_location",
                "FUN_00113f50",
                "strerror",
                "bfd_stat",
                "FUN_0011a0e0",
                "FUN_0011256b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decompile_and_copy_file_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_integer_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "typeSize",
                "param_3": "isNegative",
                "plVar1": "ptrToValue",
                "uVar2": "returnValue",
                "sVar3": "stringLength",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "local_8c": "stringBuffer",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processIntegerType_0010b800(long baseAddress,int typeSize,char isNegative)\n\n{\n  long *ptrToValue;\n  undefined8 returnValue;\n  size_t stringLength;\n  long temp1;\n  long temp2;\n  undefined2 stringBuffer;\n  undefined4 stackArray [24];\n  \n  if (typeSize - 1U < 8) {\n    temp1 = baseAddress + 0xb8;\n    if (isNegative != '\\0') {\n      temp1 = baseAddress + 0x78;\n    }\n    ptrToValue = (long *)(temp1 + (ulong)(typeSize - 1U) * 8);\n    temp1 = *ptrToValue;\n    if (temp1 != 0) {\n      returnValue = FUN_00109cf4(baseAddress,temp1,typeSize);\n      return returnValue;\n    }\n    temp1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = temp1 + 1;\n    *ptrToValue = temp1;\n    sprintf((char *)&stringBuffer,\"%ld=r%ld;\",temp1,temp1);\n    if (isNegative == '\\0') {\n      temp2 = 1L << ((char)typeSize * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&stringBuffer);\n      sprintf((char *)((long)&stringBuffer + stringLength),\"%ld;%ld;\",-temp2,temp2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&stringBuffer);\n      *(undefined2 *)((long)&stringBuffer + stringLength) = 0x3b30;\n      *(undefined *)((long)&stringBuffer + stringLength + 2) = 0;\n      if (typeSize == 8) {\n        *(undefined4 *)((long)&stringBuffer + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&stringBuffer + stringLength + 2),\"%ld;\",\n                (1L << ((char)typeSize * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = FUN_00109b52(baseAddress,&stringBuffer,temp1,1,typeSize);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(returnValue,typeSize);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_integer_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "reverse_function_00109ed3",
                "param_1": "inputParam",
                "param_2": "flag",
                "param_3": "status",
                "param_4": "buffer",
                "param_5": "bufferSize",
                "uVar1": "count",
                "uVar2": "temp",
                "cVar3": "result",
                "pcVar4": "str",
                "sVar5": "length",
                "__s": "newStr",
                "lVar6": "var1",
                "__ptr": "ptr",
                "uVar7": "returnValue",
                "uVar8": "flag2",
                "lVar9": "loopVar",
                "uVar10": "newSize",
                "puVar11": "ptr2",
                "bVar12": "flag3"
            },
            "code": "\nundefined8 reverseFunction_00109ed3(long inputParam,uint flag,undefined4 status,long *buffer,ulong *bufferSize)\n\n{\n  ulong count;\n  ulong temp;\n  char result;\n  char *str;\n  size_t length;\n  char *newStr;\n  long var1;\n  void *ptr;\n  undefined8 returnValue;\n  undefined flag2;\n  long loopVar;\n  ulong newSize;\n  undefined *ptr2;\n  byte flag3;\n  \n  flag3 = 0;\n  var1 = *(long *)(inputParam + 0x60);\n  if (var1 != 0) {\n    count = *(ulong *)(var1 + 0x10);\n    if (((long)count < 1) || (buffer == (long *)0x0)) {\n      flag2 = *(undefined *)(var1 + 0x1c);\n      str = (char *)FUN_00109b2f(inputParam);\n      length = strlen(str);\n      newStr = (char *)xmalloc(length + 2);\n      sprintf(newStr,\"%c%s\",(ulong)flag,str);\n      free(str);\n      var1 = 0;\n    }\n    else {\n      newSize = *bufferSize;\n      if (newSize <= count) {\n        if (newSize == 0) {\n          newSize = 10;\n        }\n        for (; newSize <= count; newSize = newSize * 2) {\n        }\n        var1 = xrealloc(*buffer,newSize * 8);\n        temp = *bufferSize;\n        *buffer = var1;\n        ptr2 = (undefined *)(var1 + temp * 8);\n        for (loopVar = (newSize - temp) * 8; loopVar != 0; loopVar = loopVar + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)flag3 * -2 + 1;\n        }\n        *bufferSize = newSize;\n      }\n      var1 = *(long *)(*buffer + count * 8);\n      if ((var1 != 0) && (*(char *)(*(long *)(inputParam + 0x60) + 0x1c) == '\\0')) {\n        ptr = (void *)FUN_00109b2f(inputParam);\n        free(ptr);\n        returnValue = FUN_00109cf4(inputParam,var1,status);\n        return returnValue;\n      }\n      var1 = *(long *)(inputParam + 0x68);\n      *(long *)(inputParam + 0x68) = var1 + 1;\n      str = (char *)FUN_00109b2f(inputParam);\n      length = strlen(str);\n      newStr = (char *)xmalloc(length + 0x14);\n      sprintf(newStr,\"%ld=%c%s\",var1,(ulong)flag,str);\n      free(str);\n      flag2 = 1;\n      *(long *)(*buffer + count * 8) = var1;\n    }\n    result = FUN_00109b52(inputParam,newStr,var1,flag2,status);\n    if (result != '\\0') {\n      free(newStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "xrealloc",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "reverse_function_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00113c43",
                "FUN_0010d882",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_00114190",
                "FUN_0010aa53",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010bbd3",
                "FUN_0010e918",
                "FUN_00114c80",
                "FUN_00116852",
                "FUN_0010da0b",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_00113ce0",
                "FUN_0010ab4d",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_00109a0b",
                "FUN_00112894",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_00113bfa",
                "FUN_00109b52",
                "FUN_0010c218",
                "FUN_0010c7a0",
                "FUN_0010bd62",
                "FUN_00113b98",
                "FUN_0011173a",
                "FUN_00113e23",
                "FUN_00107880",
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_00112925",
                "FUN_0010ae0e",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010bc80",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00116030",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_00114cf0",
                "FUN_0010ebb0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00112904",
                "FUN_0010eafe",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_data_0010bbd3",
                "param_1": "debugData",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "unitsPtr",
                "puVar2": "unitsMemory",
                "puVar3": "infoMemory",
                "lVar4": "loopCounter",
                "puVar5": "tempPtr",
                "pcVar6": "emptyString",
                "bVar7": "zeroByte",
                "auVar8": "returnVal"
            },
            "code": "\nundefined  [16] initializeDebugData_0010bbd3(long *debugData,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *unitsPtr;\n  undefined4 *unitsMemory;\n  undefined4 *infoMemory;\n  long loopCounter;\n  undefined4 *tempPtr;\n  char *emptyString;\n  byte zeroByte;\n  undefined returnVal [16];\n  \n  zeroByte = 0;\n  emptyString = \"\";\n  if (filename != (char *)0x0) {\n    emptyString = filename;\n  }\n  unitsMemory = (undefined4 *)xmalloc(0x18);\n  tempPtr = unitsMemory;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *tempPtr = 0;\n    tempPtr = tempPtr + (ulong)zeroByte * -2 + 1;\n  }\n  *(char **)(unitsMemory + 2) = emptyString;\n  infoMemory = (undefined4 *)xmalloc(0x18);\n  debugData[2] = (long)unitsMemory;\n  tempPtr = infoMemory;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *tempPtr = 0;\n    tempPtr = tempPtr + (ulong)zeroByte * -2 + 1;\n  }\n  unitsPtr = (undefined8 *)debugData[1];\n  *(undefined4 **)(infoMemory + 2) = unitsMemory;\n  if (unitsPtr == (undefined8 *)0x0) {\n    if (*debugData != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugData = (long)infoMemory;\n  }\n  else {\n    *unitsPtr = infoMemory;\n  }\n  debugData[1] = (long)infoMemory;\n  debugData[5] = 0;\n  *(undefined (*) [16])(debugData + 3) = ZEXT816(0);\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = 1;\n  return returnVal;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_data_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_001125fa",
                "FUN_00119ed0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputParam",
                "param_2": "binaryParam",
                "uVar1": "value",
                "lVar2": "result"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputParam,long binaryParam)\n\n{\n  uint value;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binaryParam + 8) + 8) == 5) {\n      if (*(int *)(inputParam + 0x28) == *(int *)(*(long *)(binaryParam + 0x110) + 0xd40)) {\n        value = *(uint *)(inputParam + 0x2c);\n        if (value == 0) {\n          result = 0;\n        }\n        else if ((ulong)value <\n                 *(ulong *)(*(long *)(binaryParam + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryParam + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(value - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "flag",
                "param_6": "result",
                "lVar1": "allocationSize",
                "plVar2": "dataStructure",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ninitializeDataStructure_00113c43(long source,long destination,long value1,long value2,undefined flag,\n            undefined8 result)\n\n{\n  long allocationSize;\n  long *dataStructure;\n  undefined returnValue [16];\n  \n  if ((source != 0) && (destination != 0)) {\n    allocationSize = FUN_00112904(0x10,0);\n    if (allocationSize != 0) {\n      dataStructure = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)dataStructure + 0x21) = 0;\n      *dataStructure = source;\n      *(undefined4 *)((long)dataStructure + 0x24) = 0;\n      dataStructure[1] = destination;\n      dataStructure[2] = value1;\n      dataStructure[3] = value2;\n      *(undefined *)(dataStructure + 4) = flag;\n      *(long **)(allocationSize + 0x10) = dataStructure;\n      goto LAB_00113caa;\n    }\n  }\n  allocationSize = 0;\nLAB_00113caa:\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = allocationSize;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_input_00112a33",
                "param_1": "inputStructPtr",
                "param_2": "dataStructPtr",
                "param_3": "outputStructPtr",
                "param_4": "inputType",
                "param_5": "arg1",
                "param_6": "arg2",
                "param_7": "arg3",
                "uVar1": "result",
                "lVar2": "temp",
                "plVar3": "outputPtr"
            },
            "code": "\nbool processInput_00112a33(undefined8 inputStructPtr,long dataStructPtr,undefined8 outputStructPtr,byte inputType,undefined8 arg1\n                 ,undefined8 arg2,uint arg3)\n\n{\n  undefined result;\n  long temp;\n  long *outputPtr;\n  \n  if (inputType < 0x12) {\n    if (inputType != 0) {\n      switch(inputType) {\n      case 1:\n        result = FUN_0010c05d(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,4,\n                             *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,(arg3 & 0xff) + 2,\n                             *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,5,\n                             *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,1,\n                             *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        temp = FUN_0010c6be(arg1,*(undefined8 *)(dataStructPtr + 8));\n        if (temp == 0) {\n          return false;\n        }\n        outputPtr = (long *)FUN_0010da0b(inputStructPtr,outputStructPtr);\n        *outputPtr = temp;\n        break;\n      case 0xd:\n        temp = FUN_0010c218(arg1,*(undefined8 *)(dataStructPtr + 8));\n        return temp != 0;\n      case 0x11:\n        result = FUN_0010bd62(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,2,\n                             *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (inputType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(arg1,*(undefined8 *)(dataStructPtr + 8),arg2,1,\n                         *(long *)(dataStructPtr + 0x10) + *(long *)(*(long *)(dataStructPtr + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bd62",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_input_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "uVar1": "dataTypeIndex",
                "pcVar2": "dataTypeString",
                "uVar3": "dataTypeValue",
                "lVar4": "dataTypeResult",
                "plVar5": "ptrResult",
                "uVar6": "negDataTypeIndex",
                "_stderr": "stderr"
            },
            "code": "\n\n\nlong getDataType_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint dataTypeIndex;\n  char *dataTypeString;\n  undefined8 dataTypeValue;\n  long dataTypeResult;\n  long *ptrResult;\n  uint negDataTypeIndex;\n  \n  if ((*param_3 == 0) && (dataTypeIndex = param_3[1], (int)dataTypeIndex < 0)) {\n    negDataTypeIndex = ~dataTypeIndex;\n    if (negDataTypeIndex < 0x22) {\n      dataTypeResult = *(long *)(param_2 + 0x90 + (ulong)negDataTypeIndex * 8);\n      if (dataTypeResult == 0) {\n        switch(negDataTypeIndex) {\n        case 1:\n          dataTypeValue = FUN_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          dataTypeValue = FUN_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          dataTypeValue = FUN_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          dataTypeValue = FUN_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          dataTypeValue = FUN_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          dataTypeValue = FUN_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          dataTypeValue = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          dataTypeValue = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          dataTypeValue = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          dataTypeValue = FUN_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          dataTypeValue = FUN_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          dataTypeValue = FUN_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          dataTypeValue = FUN_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          dataTypeValue = FUN_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          dataTypeValue = FUN_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          dataTypeValue = FUN_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          dataTypeValue = FUN_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          dataTypeValue = 0;\n          break;\n        case 0x13:\n          dataTypeValue = FUN_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          dataTypeValue = FUN_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          dataTypeValue = FUN_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          dataTypeValue = FUN_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          dataTypeValue = FUN_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          dataTypeValue = FUN_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          dataTypeValue = FUN_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          dataTypeValue = FUN_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          dataTypeValue = FUN_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          dataTypeValue = FUN_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          dataTypeValue = FUN_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          dataTypeValue = FUN_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          dataTypeValue = FUN_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          dataTypeValue = FUN_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          dataTypeValue = FUN_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          dataTypeValue = FUN_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        dataTypeResult = FUN_0010c218(param_1,dataTypeString,dataTypeValue);\n        *(long *)(param_2 + 0x90 + (ulong)negDataTypeIndex * 8) = dataTypeResult;\n        return dataTypeResult;\n      }\n      return dataTypeResult;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(stderr,dataTypeString,(ulong)dataTypeIndex);\n  }\n  else {\n    ptrResult = (long *)FUN_00109022(param_2);\n    if (ptrResult != (long *)0x0) {\n      if (*ptrResult == 0) {\n        dataTypeResult = FUN_00113e23(ptrResult,0);\n        return dataTypeResult;\n      }\n      return *ptrResult;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "fprintf",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "param_1": "param_elfFile",
                "param_2": "param_symbolTable",
                "param_3": "param_stringTable",
                "param_4": "param_arch",
                "param_5": "param_coffData",
                "param_6": "param_memoryContext",
                "lVar1": "symbolTableEnd",
                "lVar2": "symbolAddress",
                "lVar3": "symbolIndex",
                "cVar4": "symbolResult",
                "uVar5": "bfdError",
                "__ptr": "symbolData",
                "uVar6": "symbolValue",
                "uVar7": "errorMessage",
                "puVar8": "newSymbol",
                "pcVar9": "errorMessageFmt",
                "puVar10": "auxData",
                "uVar11": "entrySize",
                "lVar12": "symbolCounter",
                "iVar13": "symbolOffset",
                "iVar14": "symbolCapacity",
                "local_a8": "newSymbolValue",
                "uStack_a4": "newSymbolValueHigh",
                "uStack_a0": "newSymbolAddr",
                "uStack_9c": "newSymbolAddrHigh",
                "local_88": "symbolName",
                "local_6a": "symbolType",
                "local_68": "symbolClass",
                "local_67": "symbolNumAux",
                "local_60": "auxDataBuffer",
                "local_56": "auxFunction"
            },
            "code": "\nundefined8\nparseCOFFSymbols_0010e07c(undefined8 param_elfFile,long *param_symbolTable,undefined8 param_stringTable,int param_arch,long param_coffData,\n            undefined8 param_memoryContext)\n\n{\n  long symbolTableEnd;\n  long symbolAddress;\n  long symbolIndex;\n  char symbolResult;\n  undefined4 bfdError;\n  void *symbolData;\n  undefined8 symbolValue;\n  undefined8 errorMessage;\n  undefined4 *newSymbol;\n  char *errorMessageFmt;\n  undefined *auxData;\n  uint entrySize;\n  long symbolCounter;\n  int symbolOffset;\n  int symbolCapacity;\n  undefined4 newSymbolValue;\n  undefined4 newSymbolValueHigh;\n  undefined4 newSymbolAddr;\n  undefined4 newSymbolAddrHigh;\n  undefined symbolName [30];\n  undefined2 symbolType;\n  byte symbolClass;\n  byte symbolNumAux;\n  undefined auxDataBuffer [10];\n  ushort auxFunction;\n  \n  symbolCapacity = 10;\n  symbolCounter = 0;\n  symbolTableEnd = *(long *)(param_coffData + 0x18);\n  symbolData = (void *)xmalloc(0x50);\n  while ((param_symbolTable[3] < symbolTableEnd && (param_symbolTable[2] < param_symbolTable[1]))) {\n    symbolAddress = *(long *)(*param_symbolTable + param_symbolTable[2] * 8);\n    symbolResult = bfd_coff_get_syment(param_elfFile,symbolAddress,symbolName);\n    if (symbolResult == '\\0') {\n      bfdError = bfd_get_error();\n      symbolValue = bfd_errmsg(bfdError);\n      errorMessageFmt = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errorMessage = dcgettext(0,errorMessageFmt,5);\n      FUN_00119ed0(errorMessage,symbolValue);\n      free(symbolData);\n      return 0;\n    }\n    symbolIndex = param_symbolTable[3];\n    auxData = (undefined *)0x0;\n    param_symbolTable[2] = param_symbolTable[2] + 1;\n    param_symbolTable[3] = symbolIndex + 1 + (ulong)symbolNumAux;\n    if (symbolNumAux != 0) {\n      auxData = auxDataBuffer;\n      symbolResult = bfd_coff_get_auxent(param_elfFile,symbolAddress,0,auxData);\n      if (symbolResult == '\\0') {\n        bfdError = bfd_get_error();\n        symbolValue = bfd_errmsg(bfdError);\n        errorMessageFmt = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolClass == 0x12) {\n      entrySize = (uint)auxFunction;\n      symbolOffset = (int)*(undefined8 *)(symbolAddress + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30);\n    }\n    else {\n      if (symbolClass < 0x13) {\n        if ((symbolClass == 8) || (symbolClass == 0xb)) {\n          entrySize = 0;\n          symbolOffset = ((int)*(undefined8 *)(symbolAddress + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolClass == 0x66) break;\n      entrySize = 0;\n      symbolOffset = 0;\n    }\nLAB_0010e214:\n    errorMessage = FUN_0010dac0(param_elfFile,param_symbolTable,param_stringTable,symbolIndex,symbolType,auxData,1);\n    symbolValue = *(undefined8 *)(symbolAddress + 8);\n    newSymbol = (undefined4 *)xmalloc(0x20);\n    newSymbolValue = (undefined4)symbolValue;\n    newSymbolValueHigh = (undefined4)((ulong)symbolValue >> 0x20);\n    newSymbolAddr = (undefined4)errorMessage;\n    newSymbolAddrHigh = (undefined4)((ulong)errorMessage >> 0x20);\n    *(undefined8 *)(newSymbol + 5) = 0;\n    newSymbol[6] = symbolOffset;\n    newSymbol[7] = entrySize;\n    newSymbol[4] = 0;\n    *newSymbol = newSymbolValue;\n    newSymbol[1] = newSymbolValueHigh;\n    newSymbol[2] = newSymbolAddr;\n    newSymbol[3] = newSymbolAddrHigh;\n    if (symbolCapacity <= (int)symbolCounter + 1) {\n      symbolCapacity = symbolCapacity + 10;\n      symbolData = (void *)xrealloc(symbolData,(long)symbolCapacity << 3,newSymbol,0,param_memoryContext);\n    }\n    *(undefined4 **)((long)symbolData + symbolCounter * 8) = newSymbol;\n    symbolCounter = symbolCounter + 1;\n  }\n  *(undefined8 *)((long)symbolData + (long)(int)symbolCounter * 8) = 0;\n  symbolValue = FUN_00113da9(param_arch == 8,*(undefined2 *)(param_coffData + 10),symbolData);\n  return symbolValue;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "FUN_00113da9",
                "xrealloc",
                "bfd_coff_get_auxent",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_symbols_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_zero_001082c3"
            },
            "code": "\nundefined8 getZero_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_zero_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "fileName",
                "param_2": "hashTable",
                "param_3": "fileContent",
                "iVar1": "lineNumber",
                "piVar2": "errorCode",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "slotPtr",
                "pbVar7": "ptrToNextChar",
                "bVar8": "currentChar",
                "pbVar9": "nextCharPtr",
                "pbVar10": "currentLinePtr",
                "pbVar11": "nextLinePtr",
                "pbVar12": "lineStartPtr"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *fileName,undefined8 hashTable,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  size_t fileSize;\n  byte *buffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **slotPtr;\n  byte *ptrToNextChar;\n  byte currentChar;\n  byte *nextCharPtr;\n  byte *currentLinePtr;\n  byte *nextLinePtr;\n  byte *lineStartPtr;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(fileName,\"r\");\n    if (file == (FILE *)0x0) {\n      errorCode = __errno_location();\n      errorMessage = strerror(*errorCode);\n      translatedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translatedMessage,fileName,errorMessage);\n    }\n    bytesRead = fread(buffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineNumber = ferror(file), lineNumber != 0)) {\n      translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translatedMessage,fileName);\n    }\n    lineNumber = 1;\n    fclose(file);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentChar = *buffer;\n    lineStartPtr = buffer;\n    while (currentLinePtr = lineStartPtr, currentChar != 0) {\n      for (; currentChar = *currentLinePtr, nextLinePtr = currentLinePtr, currentChar != 10; currentLinePtr = currentLinePtr + 1) {\n        if ((char)currentChar < '\\v') {\n          if (currentChar == 0) {\n            nextCharPtr = currentLinePtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentChar == 0xd) {\n            *currentLinePtr = 0;\n            nextCharPtr = currentLinePtr + 1;\n            if (currentLinePtr[1] == 10) {\n              nextCharPtr = currentLinePtr + 2;\n              nextLinePtr = currentLinePtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentChar == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentLinePtr = 0;\n      if (currentLinePtr[1] == 0xd) {\n        nextLinePtr = currentLinePtr + 1;\n        nextCharPtr = currentLinePtr + 2;\n      }\n      else {\n        nextCharPtr = currentLinePtr + 1;\n      }\nLAB_00114553:\n      currentChar = *lineStartPtr;\n      while ((currentChar == 0x20 || (currentLinePtr = lineStartPtr, currentChar == 9))) {\n        currentLinePtr = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        currentChar = *currentLinePtr;\n      }\n      do {\n        if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n        if (currentChar == 0) goto LAB_00114599;\n        currentChar = currentLinePtr[1];\n        currentLinePtr = currentLinePtr + 1;\n      } while ((currentChar != 0x20) && (currentChar != 9));\n      if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentChar = currentLinePtr[1];\n        if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n              ((currentChar = currentLinePtr[2], currentChar == 9 || (currentChar == 0x20)))) &&\n             ((currentChar = currentLinePtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n            ((currentChar = currentLinePtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentLinePtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n          currentChar = currentLinePtr[6];\n          ptrToNextChar = currentLinePtr + 6;\n          if ((currentChar == 9) || (currentChar == 0x20)) {\n            do {\n              do {\n                currentChar = ptrToNextChar[1];\n                ptrToNextChar = ptrToNextChar + 1;\n              } while (currentChar == 0x20);\n            } while (currentChar == 9);\n          }\n        }\n        if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n          translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translatedMessage,fileName,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentLinePtr = 0;\n      if (lineStartPtr < currentLinePtr) {\n        slotPtr = (byte **)htab_find_slot(hashTable,lineStartPtr,1);\n        *slotPtr = lineStartPtr;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPtr = nextCharPtr;\n      currentChar = nextLinePtr[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "fread",
                "FUN_00113f50",
                "strerror",
                "FUN_00119dd0",
                "fopen",
                "xmalloc",
                "ferror",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_url_0010a94e",
                "param_1": "address",
                "param_2": "username",
                "param_3": "password",
                "param_4": "option",
                "cVar1": "flag",
                "lVar2": "structAddress",
                "__s": "randomString",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "url",
                "uVar8": "result",
                "pcVar9": "optionStr"
            },
            "code": "\nundefined8 generateURL_0010a94e(long address,char *username,char *password,int option)\n\n{\n  char flag;\n  long structAddress;\n  char *randomString;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *url;\n  undefined8 result;\n  char *optionStr;\n  \n  flag = *(char *)(*(long *)(address + 0x60) + 0x1c);\n  randomString = (char *)FUN_00109b2f();\n  url = *(char **)(*(long *)(address + 0x60) + 0x20);\n  if (url == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(url);\n    length2 = strlen(username);\n    length3 = strlen(randomString);\n    length4 = strlen(password);\n    url = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (option == 1) {\n      optionStr = \"/1\";\n    }\n    else {\n      optionStr = \"/0\";\n      if ((option != 2) && (optionStr = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(url,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(address + 0x60) + 0x20),username,optionStr,\n            randomString,password,*(long *)(address + 0x60));\n    free(*(void **)(*(long *)(address + 0x60) + 0x20));\n    structAddress = *(long *)(address + 0x60);\n    *(char **)(structAddress + 0x20) = url;\n    if (flag != '\\0') {\n      *(undefined *)(structAddress + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)structAddress >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_url_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "evaluate_conditions_00113b1e",
                "param_1": "input_param",
                "param_2": "ptr_param",
                "param_3": "ulong_param",
                "param_4": "ptr_param2",
                "auVar1": "result1",
                "piVar2": "ptr_var",
                "uVar3": "result2",
                "auVar4": "result3"
            },
            "code": "\nundefined  [16] evaluate_conditions_00113b1e(long input_param,undefined8 ptr_param,ulong ulong_param,undefined8 ptr_param2)\n\n{\n  undefined result1 [16];\n  int *ptr_var;\n  undefined8 result2;\n  undefined result3 [16];\n  \n  if (input_param != 0) {\n    ptr_var = (int *)FUN_00112b6e(input_param,0);\n    if ((ptr_var == (int *)0x0) || (3 < *ptr_var - 7U)) {\n      result2 = 0;\n    }\n    else {\n      result2 = **(undefined8 **)(ptr_var + 4);\n    }\n    result3._8_8_ = ptr_param2;\n    result3._0_8_ = result2;\n    return result3;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = ulong_param;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "evaluate_conditions_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "execute_remote_command_0010a0e9",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "someValue",
                "uVar2": "result",
                "__s": "string",
                "sVar3": "stringLength",
                "__s_00": "modifiedString"
            },
            "code": "\nundefined4 executeRemoteCommand_0010a0e9(long baseAddress,undefined8 value1,undefined8 value2)\n\n{\n  undefined someValue;\n  undefined4 result;\n  char *string;\n  size_t stringLength;\n  char *modifiedString;\n  \n  someValue = *(undefined *)(*(long *)(baseAddress + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(baseAddress + 0x60) + 0x18);\n  string = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  modifiedString = (char *)xmalloc(stringLength + 100);\n  sprintf(modifiedString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  result = FUN_00109b52(baseAddress,modifiedString,0,someValue,result);\n  if ((char)result != '\\0') {\n    free(modifiedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_remote_command_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_string_validity_00115f50",
                "param_1": "stringLength",
                "param_2": "stringArray",
                "param_3": "flag",
                "__s1": "currentString",
                "uVar1": "stringComparisonResult",
                "uVar2": "extraData",
                "extraout_EDX": "extraOutData",
                "plVar3": "stringPointer",
                "auVar4": "functionResult"
            },
            "code": "\nuint checkStringValidity_00115f50(long stringLength,char **stringArray,char flag)\n\n{\n  char *currentString;\n  uint stringComparisonResult;\n  undefined4 extraData;\n  undefined4 extraOutData;\n  long *stringPointer;\n  undefined functionResult [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  functionResult = FUN_001159d0(stringArray);\n  if (functionResult[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      currentString = *stringArray;\n      stringPointer = DAT_001279b8;\n      do {\n        stringComparisonResult = strcmp(currentString,(char *)stringPointer[1]);\n        functionResult._4_4_ = 0;\n        functionResult._0_4_ = stringComparisonResult;\n        functionResult._8_4_ = extraOutData;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        stringPointer = (long *)*stringPointer;\n      } while (stringPointer != (long *)0x0);\n    }\n    extraData = functionResult._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (functionResult._8_4_ = extraData, functionResult._0_8_ = *(long *)(stringLength + 8),\n         *(int *)(*(long *)(stringLength + 8) + 8) != 5)) ||\n        ((functionResult._0_8_ = (ulong)stringArray[0x1a], *(int *)(stringArray[0x1a] + 4) != 7 ||\n         (functionResult = FUN_00113fb0(*stringArray,\".gnu.build.attributes\"), functionResult[0] == '\\0')))) &&\n       ((*(byte *)((long)stringArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(functionResult._1_7_,stringArray[8] == (char *)0x0) |\n             CONCAT31(functionResult._9_3_,stringArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001159d0",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_string_validity_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_section_bytes_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseSectionBytes_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_section_bytes_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPointer",
                "param_2": "length",
                "lVar1": "currentValue",
                "cVar2": "resultFlag",
                "__ptr": "stringPointer",
                "uVar3": "unsignedLength",
                "uVar4": "adjustedLength",
                "local_5a": "formatString"
            },
            "code": "\nvoid processData_0010b948(long dataPointer,uint length)\n\n{\n  long currentValue;\n  char resultFlag;\n  void *stringPointer;\n  ulong unsignedLength;\n  uint adjustedLength;\n  char formatString [50];\n  \n  adjustedLength = length - 1;\n  unsignedLength = (ulong)length;\n  if ((adjustedLength < 0x10) && (currentValue = *(long *)(dataPointer + 0xf8 + (ulong)adjustedLength * 8), currentValue != 0)) {\n    FUN_00109cf4(dataPointer,currentValue,unsignedLength);\n    return;\n  }\n  resultFlag = FUN_0010b800(dataPointer,4,0);\n  if (resultFlag != '\\0') {\n    stringPointer = (void *)FUN_00109b2f(dataPointer);\n    currentValue = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = currentValue + 1;\n    if (adjustedLength < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)adjustedLength * 8) = currentValue;\n    }\n    sprintf(formatString,\"%ld=r%s;%u;0;\",currentValue,stringPointer,unsignedLength);\n    free(stringPointer);\n    FUN_00109b52(dataPointer,formatString,currentValue,1,unsignedLength);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010914e",
                "FUN_00108072",
                "FUN_00119f70",
                "FUN_00108fe8",
                "FUN_0010882c",
                "FUN_00115b70",
                "FUN_00114e50",
                "FUN_00114190",
                "FUN_00108fb9",
                "FUN_00108916",
                "FUN_0010543c",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010da0b",
                "FUN_00112996",
                "FUN_00115530",
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_001083de",
                "FUN_0010b800",
                "FUN_00113f50",
                "FUN_001152b6",
                "FUN_00108179",
                "FUN_0010c218",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_0010808f",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_00104920",
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00114e00",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00107976",
                "FUN_00108a2a",
                "FUN_0010e07c",
                "FUN_00116490",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_00108375",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00109a32",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_0010e6a8",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010827b",
                "FUN_001086af",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_00114690",
                "FUN_0010bf20",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "input_ptr",
                "param_2": "debug_info",
                "iVar1": "input_value",
                "__format": "format_string",
                "piVar3": "result_ptr",
                "plVar4": "debug_ptr",
                "bVar5": "is_circular",
                "local_18": "local_debug",
                "local_10": "local_input",
                "uVar2": "circular_info"
            },
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_ptr,long *debug_info)\n\n{\n  int input_value;\n  undefined8 circular_info;\n  char *format_string;\n  int *result_ptr;\n  long *debug_ptr;\n  bool is_circular;\n  long *local_debug;\n  int *local_input;\n  \n  input_value = *input_ptr;\n  if ((input_value != 1) && (1 < input_value - 0x16U)) {\n    return input_ptr;\n  }\n  debug_ptr = debug_info;\n  while (debug_ptr != (long *)0x0) {\n    if ((input_ptr == (int *)debug_ptr[1]) ||\n       (is_circular = debug_ptr == (long *)*debug_ptr, debug_ptr = (long *)*debug_ptr, is_circular)) {\n      circular_info = FUN_001129f4(input_ptr,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,circular_info);\n      return (int *)0x0;\n    }\n  }\n  local_debug = debug_info;\n  local_input = input_ptr;\n  if (input_value - 0x16U < 2) {\n    result_ptr = (int *)get_real_type_00112b6e((*(undefined8 **)(input_ptr + 4))[1],&local_debug);\n    return result_ptr;\n  }\n  result_ptr = *(int **)**(undefined8 **)(input_ptr + 4);\n  if (input_ptr == result_ptr) {\n    return input_ptr;\n  }\n  if (result_ptr == (int *)0x0) {\n    return input_ptr;\n  }\n  result_ptr = (int *)get_real_type_00112b6e(result_ptr,&local_debug);\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001129f4",
                "FUN_00112b6e",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "size_1",
                "param_5": "size_2",
                "param_6": "flag_1",
                "param_7": "flag_2",
                "uVar1": "result",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar2": "string_length",
                "cVar3": "char_value"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data_ptr,undefined8 param_ptr,ulong size_1,undefined param_4,ulong size_2,\n            byte flag_1,byte flag_2)\n\n{\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag_2 ^ 1) & flag_1) == 0) {\n    string_1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string_1 = (char *)FUN_00109b2f();\n    size_2 = size_2 & 0xffffffff;\n    size_1 = size_1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data_ptr,param_ptr,size_1,param_4,size_2);\n  if ((char)result != '\\0') {\n    if (flag_1 == 0) {\n      return result;\n    }\n    if (flag_2 == 0) {\n      if (string_1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string_1);\n      string_2 = (char *)xmalloc(string_length + 3);\n      sprintf(string_2,\"~%%%s\",string_1);\n      free(string_1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string_2 = (char *)xmalloc(0x14);\n      sprintf(string_2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = string_2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "result",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong allocateAndStoreData_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *allocatedMemory;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = data1;\n    allocatedMemory[1] = data2;\n    *(undefined8 **)(result + 0x10) = allocatedMemory;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010e842",
                "FUN_0010aa53",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_00108863",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104a35",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_0011256b",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_001081e9",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_00116030",
                "FUN_0010c95e",
                "FUN_00114b84",
                "FUN_00104ea2",
                "FUN_0010b948",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_action_00114d50",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "condition"
            },
            "code": "\nvoid executeAction_00114d50(long source,long destination,uint condition)\n\n{\n  if (*(int *)(*(long *)(source + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(destination + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(destination + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(source + 8) + 0x380) + 0x78))(source,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_action_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "param_1": "file",
                "param_2": "exitCode",
                "uVar1": "usageMessage",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageMessage_00108916(FILE *file,int exitCode)\n\n{\n  undefined8 usageMessage;\n  char *message;\n  \n  usageMessage = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,message,usageMessage);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,message);\n  FUN_00104a35(DAT_001275e0,file);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_001126c0",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3",
                "param_4": "flag4",
                "param_5": "flag5",
                "param_6": "flag6",
                "param_7": "flag7",
                "param_8": "flag8",
                "param_9": "errorMessage",
                "param_10": "errorCode",
                "param_11": "errorData",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "stackPointer",
                "local_f0": "localBuffer",
                "local_e8": "buffer",
                "local_c8": "param13",
                "local_c0": "param14",
                "local_b8": "flag1Copy",
                "local_a8": "flag2Copy",
                "local_98": "flag3Copy",
                "local_88": "flag4Copy",
                "local_78": "flag5Copy",
                "local_68": "flag6Copy",
                "local_58": "flag7Copy",
                "local_48": "flag8Copy"
            },
            "code": "\n\n\nvoid printError_001126c0(undefined4 flag1,undefined4 flag2,undefined4 flag3,undefined4 flag4,\n                 undefined4 flag5,undefined4 flag6,undefined4 flag7,undefined4 flag8,\n                 long errorMessage,long errorCode,long *errorData,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int errorCode;\n  undefined8 errorMessage;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined buffer [32];\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 flag1Copy;\n  undefined4 flag2Copy;\n  undefined4 flag3Copy;\n  undefined4 flag4Copy;\n  undefined4 flag5Copy;\n  undefined4 flag6Copy;\n  undefined4 flag7Copy;\n  undefined4 flag8Copy;\n  \n  if (flag != '\\0') {\n    flag1Copy = flag1;\n    flag2Copy = flag2;\n    flag3Copy = flag3;\n    flag4Copy = flag4;\n    flag5Copy = flag5;\n    flag6Copy = flag6;\n    flag7Copy = flag7;\n    flag8Copy = flag8;\n  }\n  param13 = param13;\n  param14 = param14;\n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (errorCode != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(errorCode);\n    }\n    if ((errorData != (long *)0x0) && (*errorData != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    stackPointer = &stack0x00000008;\n    localBuffer = buffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "fputs",
                "fwrite",
                "fflush",
                "FUN_001125fa",
                "vfprintf",
                "fprintf",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_0010551d",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00108466"
            ],
            "imported": false,
            "current_name": "print_error_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_pointer_00113b4a",
                "param_1": "inputValue",
                "lVar1": "resultPtr"
            },
            "code": "\nlong initializePointer_00113b4a(long inputValue)\n\n{\n  long resultPtr;\n  \n  if (inputValue != 0) {\n    resultPtr = FUN_00112904(0x15,0);\n    if (resultPtr == 0) {\n      resultPtr = 0;\n    }\n    else {\n      *(long *)(resultPtr + 0x10) = inputValue;\n    }\n    return resultPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_metadata_0010edb4",
                "param_1": "fileData",
                "param_2": "fileName",
                "param_3": "permission",
                "param_4": "fileSize",
                "cVar1": "isValid",
                "iVar2": "filenameComparison",
                "uVar3": "result",
                "in_R10": "unknownVar"
            },
            "code": "\nundefined8 updateFileMetadata_0010edb4(long fileData,undefined8 fileName,undefined4 permission,ulong fileSize)\n\n{\n  char isValid;\n  int filenameComparison;\n  undefined8 result;\n  undefined8 unknownVar;\n  \n  if (*(long *)(fileData + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileData + 0x1f0) < fileSize) {\n    *(ulong *)(fileData + 0x1f0) = fileSize;\n  }\n  filenameComparison = filename_cmp(fileName);\n  if (filenameComparison != 0) {\n    isValid = FUN_0010e2f0(fileData,0x84,0,fileSize,fileName);\n    if (isValid == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileData + 0x210) = fileName;\n  }\n  result = FUN_0010e2f0(fileData,0x44,permission,fileSize - *(long *)(fileData + 0x200),0,unknownVar);\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_metadata_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010914e",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_00108fe8",
                "FUN_00119e70",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00112996",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bf20",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "data_ptr",
                "param_2": "num_iters",
                "__ptr": "ptr",
                "__s": "string",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "result",
                "iVar3": "iteration_count",
                "auVar4": "result_array",
                "cVar1": "success_check"
            },
            "code": "\nundefined  [16] process_data_0010e5db(long data_ptr,int num_iters)\n\n{\n  char success_check;\n  void *ptr;\n  char *string;\n  size_t string_length;\n  char *modified_string;\n  ulong result;\n  int iteration_count;\n  undefined result_array [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iters <= iteration_count) {\n      result_array = FUN_00109ed3(data_ptr,0x66,0,data_ptr + 0x188,data_ptr + 400,result);\n      return result_array;\n    }\n    if (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)FUN_00109b2f(data_ptr);\n      free(ptr);\n    }\n    else {\n      string = (char *)FUN_00109b2f(data_ptr);\n      string_length = strlen(string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string);\n      free(string);\n      success_check = FUN_0010e2f0(data_ptr,0x80,0,0,modified_string);\n      if (success_check == '\\0') {\n        result_array._8_8_ = 0;\n        result_array._0_8_ = result;\n        return result_array << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_data_00104d25",
                "param_7": "param"
            },
            "code": "\nvoid initializeData_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0,param,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_data_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "process_debug_sections_0010551d",
                "puVar1": "ptrArray",
                "bVar2": "byteVar",
                "puVar3": "ptrVar",
                "pcVar4": "codeFunc",
                "puVar5": "ptrVar2",
                "uVar6": "ulongVar1",
                "uVar7": "ulongVar2",
                "__s": "charArray",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "uintVar1",
                "iVar11": "intVar",
                "uVar12": "uintVar2",
                "uVar13": "uintVar3",
                "iVar14": "intVar2",
                "plVar15": "ptrArrayVar",
                "uVar16": "ulongVar3",
                "uVar17": "ulongVar4",
                "sVar18": "sizeVar",
                "pcVar19": "charVar3",
                "pcVar28": "charVar4",
                "pcVar33": "charVar5"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong processDebugSections_0010551d(void)\n\n{\n  uint *ptrArray;\n  byte byteVar;\n  undefined *ptrVar;\n  code *codeFunc;\n  undefined8 *ptrVar2;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *charArray;\n  char charVar;\n  char charVar2;\n  uint uintVar1;\n  int intVar;\n  uint uintVar2;\n  undefined4 uintVar3;\n  int intVar2;\n  long *ptrArrayVar;\n  undefined8 ulongVar3;\n  undefined8 ulongVar4;\n  size_t sizeVar;\n  char *charVar3;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *charArray_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *charVar4;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *charVar5;\n  undefined4 *ptrVar4;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pptrVar7;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = FUN_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lVar27 = FUN_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeVar = *(size_t *)(lVar25 + 0x40);\n      charArray_00 = fopen((char *)puVar29[2],\"w\");\n      if (charArray_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeVar != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sizeVar,charArray_00), sVar26 != sizeVar)) {\n          piVar23 = __errno_location();\n          charVar5 = strerror(*piVar23);\n          ulongVar4 = puVar29[2];\n          ulongVar3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulongVar3,ulongVar4,charVar5);\n          free(in_stack_00000140);\n          fclose(charArray_00);\n          return 0;\n        }\n        fclose(charArray_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      ulongVar4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(ulongVar4);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulongVar4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar4,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        ulongVar1 = uVar24;\n        ulongVar2 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulongVar1, ulongVar2 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongVar1 = uVar20;\n            ulongVar2 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUN_0010554f();\n    return uVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptrVar7 = &PTR_scharArraytab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrVar4 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *ptrVar4 = 0;\n      ptrVar4 = ptrVar4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrVar = *pptrVar7;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar3 = bfd_get_error();\n            bfd_errmsg(uintVar3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                uintVar3 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    charVar5 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar = strlen(charVar5);\n                      if (((sizeVar == 0) || (charVar4 = charVar5 + (sizeVar - 1), *charVar4 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *charVar4 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      charVar5 = (char *)concat(charVar5,(long)__ptr_00 + uVar20,0);\n                      *charVar4 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = charVar5;\n                    }\n                    ulongVar4 = *unaff_R14;\n                    charVar4 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,charVar4,ulongVar4,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVar,uintVar3,lVar27,charVar5);\n                    charVar2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar4 = *unaff_R14;\n                    charVar5 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,charVar5,ulongVar4,ptrVar,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptrVar7 = pptrVar7 + 2;\n    } while (pptrVar7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (ptrArrayVar = plVar32; ptrArrayVar < plVar32 + in_stack_00000010; ptrArrayVar = ptrArrayVar + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = FUN_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            charVar5 = (char *)0x0;\n            charVar4 = in_stack_00000150;\n            while (((*charVar4 != '\\0' && (sizeVar = strlen(charVar4), charVar4[sizeVar - 1] == '\\')) &&\n                   (ptrArrayVar + 1 < plVar32 + in_stack_00000010))) {\n              charVar3 = (char *)xstrdup(charVar4);\n              sizeVar = strlen(charVar3);\n              charVar3[sizeVar - 1] = '\\0';\n              charVar4 = (char *)concat(charVar3,*(undefined8 *)(ptrArrayVar[1] + 8),0);\n              free(charVar3);\n              free(charVar5);\n              ptrArrayVar = ptrArrayVar + 1;\n              charVar5 = charVar4;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         charVar4);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((lVar25 != 0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        charVar5 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          charVar5 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar4 = dcgettext(0,charVar5,5);\n          FUN_00119ed0(ulongVar4);\n          goto LAB_00105981;\n        }\n        charVar5 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          charVar5 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = FUN_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = charVar5;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar = strcmp(charVar5,\".bb\");\n              if (intVar == 0) {\n                charVar = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar = strcmp(charVar5,\".eb\");\n              if (intVar == 0) {\n                charVar = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar = strcmp(charVar5,\".bf\");\n              if (intVar == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = FUN_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVar2 = FUN_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charVar = FUN_0010bf86(puStack0000000000000020,intVar + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charVar5 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar = strcmp(charVar5,\".ef\");\n                if (intVar != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = FUN_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charVar5 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar4 = dcgettext(0,charVar5,5);\n              FUN_00119ed0(ulongVar4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = FUN_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVar = FUN_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278b0 + in_stack_00000010;\n        ptrArrayVar = DAT_001278b0;\n        do {\n          uintVar1 = *(uint *)(*ptrArrayVar + 0x18);\n          if ((uintVar1 & 0x1000000) != 0) {\n            *(uint *)(*ptrArrayVar + 0x18) = uintVar1 & 0xfeffffff;\n          }\n          ptrArrayVar = ptrArrayVar + 1;\n        } while (plVar32 != ptrArrayVar);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          ptrArray = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *ptrArray = *ptrArray | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar = bfd_get_error();\n      if (intVar != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278a8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar = DAT_001279a0;\n        ptrArrayVar = (long *)plVar32[_in_stack_00000018];\n        codeFunc = (code *)ptrArrayVar[4];\n        uintVar1 = *(uint *)(ptrArrayVar + 3);\n        charVar5 = (char *)ptrArrayVar[1];\n        charVar4 = charVar5;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar <= iVar31) || (charVar3 = (char *)puVar29[5], charVar3 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (charVar3 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar2 = strcmp(charVar3,charVar5);\n          if (intVar2 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(charVar3);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          ulongVar3 = FUN_0011a2e0(puVar29);\n          ulongVar4 = DAT_001278d0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = ulongVar3;\n          lVar27 = htab_elements(ulongVar4);\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *charVar5;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          charVar5 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278d0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (charVar5 != (char *)0x0) {\nLAB_001064eb:\n          if (((*charVar5 == '_') && (charVar5[1] == '_')) &&\n             (intVar = strcmp(charVar5 + (charVar5[2] == '_'),\"__gnu_lto_slim\"), intVar == 0)) {\n            ulongVar4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(ulongVar4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = charVar5;\n        lVar27 = htab_find(DAT_001278d0);\n        if (((lVar27 == 0) || (charVar4 = *(char **)(lVar27 + 8), charVar5 == charVar4)) &&\n           (charVar4 = charVar5, ppcVar35 = DAT_001278d8, (uintVar1 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar = strcmp(*ppcVar35,charVar5);\n            if (intVar == 0) {\n              charVar4 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        ptrArrayVar[1] = (long)charVar4;\n        charVar2 = *charVar4;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        charVar5 = DAT_00127908;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar2) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintVar1 & 0x82) == 0 && (codeFunc != bfd_map_over_sections)) &&\n                ((*(byte *)(ptrArrayVar[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            charVar4 = charVar4 + 1;\n            ptrArrayVar[1] = (long)charVar4;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            charVar4 = charVar4 + 1;\n            ptrArrayVar[1] = (long)charVar4;\n            sizeVar = strlen(charVar4);\n            lVar27 = sizeVar + 2;\n            goto LAB_001066bc;\n          }\n          *charVar4 = charVar2;\n          ptrArrayVar[1] = (long)charVar4;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (charVar5 == (char *)0x0) goto LAB_00105b32;\n            sizeVar = strlen(charVar4);\n            sVar26 = strlen(charVar5);\n            charVar5 = (char *)xmalloc(sVar26 + sizeVar + 1);\n            charVar3 = charVar5;\n          }\n          else {\nLAB_0010668d:\n            charVar5 = DAT_00127908;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar = strlen(charVar4);\n            lVar27 = sizeVar + 2;\n            if (charVar5 == (char *)0x0) {\n              charVar3 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar = strlen(charVar5);\n              charVar3 = (char *)xmalloc(sizeVar + lVar27);\n            }\n            charVar5 = charVar3 + 1;\n            *charVar3 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          charArray = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(charVar5,DAT_00127908);\n            sizeVar = strlen(charArray);\n            charVar5 = charVar5 + sizeVar;\n          }\n          strcpy(charVar5,charVar4);\n          ptrArrayVar[1] = (long)charVar3;\n          charVar4 = charVar3;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintVar1 & 0x20) == 0) &&\n           (((uintVar1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(ptrArrayVar[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar1 & 0x82) != 0 || ((*(byte *)(ptrArrayVar[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar = bfd_decode_symclass(ptrArrayVar), intVar == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = charVar4;\n              htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar1 & 0x82) == 0) && (codeFunc != bfd_map_over_sections)) &&\n                  ((*(byte *)(ptrArrayVar[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar1 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(ptrArrayVar[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            ulongVar4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(ulongVar4);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = charVar4;\n          htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charVar4;\n            htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintVar1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = charVar4;\n            htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = FUN_001159d0(ptrArrayVar[4]);\n          if (charVar2 == '\\0') {\n            if (((uintVar1 & 0x800002) == 0) && (codeFunc != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar1 & 0x82) != 0) {\n                charVar2 = FUN_00115d70(charVar4);\n                if ((charVar2 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                    (charVar2 = FUN_00115d70(charVar4), charVar2 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintVar2 = *(uint *)(ptrArrayVar + 3), (uintVar2 & 0x200000) != 0)) ||\n                       (lVar27 = *ptrArrayVar, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)ptrArrayVar + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar2 = *(uint *)(ptrArrayVar + 3);\n                }\n                *(uint *)(ptrArrayVar + 3) = uintVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar1 & 1) != 0) && (charVar2 = FUN_00115d70(charVar4), charVar2 != '\\0')) {\n                *(uint *)(ptrArrayVar + 3) = *(uint *)(ptrArrayVar + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charVar2 = FUN_00115d70(charVar4), charVar2 != '\\0')) {\n                *(uint *)(ptrArrayVar + 3) = *(uint *)(ptrArrayVar + 3) & 0xff7ffffd | 0x80;\n              }\n              if (codeFunc != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = ptrArrayVar;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279a8;\n      intVar = DAT_001279a0;\n      for (lVar27 = 0; lVar27 < intVar; lVar27 = lVar27 + 1) {\n        charVar5 = (char *)puVar29[5];\n        if (charVar5 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          ulongVar4 = FUN_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = ulongVar4;\n          intVar = DAT_001279a0;\n        }\n        else if (charVar5 != \"\") {\n          ulongVar4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(ulongVar4,charVar5);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar != 5) && (intVar != 2)) {\n        ulongVar4 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,ulongVar3,ulongVar4);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar2 = bfd_set_section_size(lVar25,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lVar27,in_stack_00000140), charVar2 == '\\0')) {\n        charVar5 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar4 = dcgettext(0,charVar5,5);\n        FUN_001126c0(0,in_stack_00000008,0,ulongVar4);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar2 == '\\0')) {\n        charVar5 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_001279f8);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a08), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_001279e8), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_001279e0), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279d8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279d0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278d0), lVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279c0; ptrVar2 = DAT_001279b8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; ptrVar2 != (undefined8 *)0x0; ptrVar2 = (undefined8 *)*ptrVar2) {\n    ulongVar4 = *(undefined8 *)(ptrVar2[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,ulongVar4,ptrVar2[4],0,ptrVar2[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,ulongVar4,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulongVar4 = *unaff_R14;\n      ulongVar3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulongVar3,ulongVar4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a10, charVar2 != '\\0')) {\n      uintVar1 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uintVar1;\n      if ((char)uintVar1 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar24;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        uVar20 = DAT_00127910;\n        if (charVar2 != '\\0') {\n          return uVar24;\n        }\n        ulongVar4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(ulongVar4,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar4 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(ulongVar4);\n          return uVar24;\n        }\n        ulongVar4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(ulongVar4);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return uVar24;\n      }\n      ulongVar4 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar4);\n    }\n    else {\n      ulongVar4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar4,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar2 = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      ptrArrayVar = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        charVar5 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (charVar2 == '\\0') {\n            ulongVar4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,puVar29,ulongVar4);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = ptrArrayVar;\n          if (*(undefined8 **)(*ptrArrayVar + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)ptrArrayVar[3];\n          ptrArrayVar = plVar32;\n        } while (plVar32 != (long *)0x0);\n        charVar5 = \"error: failed to locate merged notes\";\n      }\n      ulongVar4 = dcgettext(0,charVar5,5);\n      FUN_001126c0(0,in_stack_00000008,puVar29,ulongVar4);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid calculateHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_linked_list_0010c1c6",
                "param_2": "listAddress",
                "puVar1": "nextNode",
                "cVar2": "result",
                "__ptr": "currentNode"
            },
            "code": "\nundefined processLinkedList_0010c1c6(undefined8 param_1,long listAddress,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *nextNode;\n  char result;\n  undefined8 *currentNode;\n  \n  currentNode = *(undefined8 **)(listAddress + 0x78);\n  while( true ) {\n    if (currentNode == (undefined8 *)0x0) {\n      *(undefined8 *)(listAddress + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(param_1,currentNode[1],currentNode[2],*(undefined4 *)(currentNode + 3),currentNode[4],param_6,\n                         param_5);\n    if (result == '\\0') break;\n    nextNode = (undefined8 *)*currentNode;\n    free(currentNode);\n    currentNode = nextNode;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_linked_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "extract_valid_pointers_001082df",
                "uVar1": "count",
                "lVar2": "pointerValue",
                "cVar3": "result",
                "unaff_RBX": "basePointer",
                "puVar4": "outputPointer",
                "puVar5": "nextOutputPointer",
                "unaff_RBP": "stackBasePointer",
                "uVar6": "index",
                "unaff_R13": "inputPointer"
            },
            "code": "\nvoid extractValidPointers_001082df(void)\n\n{\n  uint count;\n  long pointerValue;\n  char result;\n  long basePointer;\n  undefined8 *outputPointer;\n  undefined8 *nextOutputPointer;\n  long stackBasePointer;\n  ulong index;\n  undefined8 *inputPointer;\n  \n  count = *(uint *)(basePointer + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputPointer = inputPointer;\n    for (index = 0; index != count; index = index + 1) {\n      nextOutputPointer = outputPointer;\n      if (((*(long **)inputPointer[index] != (long *)0x0) &&\n          (pointerValue = **(long **)inputPointer[index], pointerValue != 0)) &&\n         (result = FUN_00115d70(*(undefined8 *)(pointerValue + 8),DAT_00127a08), result != '\\0')) {\n        nextOutputPointer = outputPointer + 1;\n        *outputPointer = inputPointer[index];\n      }\n      outputPointer = nextOutputPointer;\n    }\n    *outputPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(stackBasePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "extract_valid_pointers_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_data_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofFlag",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "__stream": "fileStream",
                "uVar4": "message",
                "uVar5": "filePointer",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getTranslatedMessage",
                "lVar7": "bytesRead",
                "lVar8": "bufferSize",
                "xmalloc": "allocateMemory",
                "xrealloc": "reallocateMemory",
                "fread": "readFromFile",
                "ferror": "checkFileError"
            },
            "code": "\nvoid readAndStoreFileData_00114d60(long fileInfo)\n\n{\n  int eofFlag;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 message;\n  FILE *fileStream;\n  undefined8 filePointer;\n  size_t sVar6;\n  long bytesRead;\n  long bufferSize;\n  \n  fileStream = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    filePointer = *(undefined8 *)(fileInfo + 0x10);\n    message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(message,filePointer,errorMessage);\n  }\n  bufferSize = 0x1000;\n  bytesRead = 0;\n  filePointer = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = filePointer;\n  while( true ) {\n    eofFlag = feof(fileStream);\n    if (eofFlag != 0) {\n      *(long *)(fileInfo + 0x18) = bytesRead;\n      fclose(fileStream);\n      return;\n    }\n    if (bytesRead == bufferSize) {\n      bufferSize = bytesRead * 2;\n      filePointer = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = filePointer;\n    }\n    sVar6 = fread((void *)(*(long *)(fileInfo + 0x20) + bytesRead),1,bufferSize - bytesRead,fileStream);\n    eofFlag = ferror(fileStream);\n    if (eofFlag != 0) break;\n    bytesRead = bytesRead + sVar6;\n  }\n  filePointer = *(undefined8 *)(fileInfo + 0x10);\n  message = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(message,filePointer);\n}\n\n",
            "called": [
                "fopen",
                "FUN_0010543c",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_data_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_section_and_execute_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findSectionAndExecute_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionAddress = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_section_and_execute_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "uVar1": "result",
                "ppbVar2": "slot",
                "pbVar3": "ptr",
                "bVar4": "byteVal",
                "pbVar5": "nextLine",
                "unaff_EBP": "count",
                "pbVar6": "ptr2",
                "unaff_R13": "file",
                "pbVar7": "ptr3",
                "unaff_R14": "currentLine",
                "unaff_R15": "lineStart",
                "in_stack_00000008": "errorMessage",
                "in_stack_00000010": "returnValue"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 result;\n  byte **slot;\n  byte *ptr;\n  byte byteVal;\n  byte *nextLine;\n  int count;\n  byte *ptr2;\n  undefined8 file;\n  byte *ptr3;\n  byte *currentLine;\n  byte *lineStart;\n  undefined8 errorMessage;\n  undefined8 *returnValue;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    byteVal = *currentLine;\n    ptr3 = currentLine;\n    if (byteVal == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        ptr3 = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)byteVal < '\\v') {\n      if (byteVal != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (byteVal != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        ptr3 = currentLine + 1;\n      }\n    }\n    byteVal = *lineStart;\n    while ((byteVal == 0x20 || (ptr2 = lineStart, byteVal == 9))) {\n      ptr2 = lineStart + 1;\n      lineStart = lineStart + 1;\n      byteVal = *ptr2;\n    }\n    do {\n      if ((byteVal == 10) || (byteVal == 0xd)) goto LAB_00114676;\n      if (byteVal == 0) goto LAB_00114599;\n      byteVal = ptr2[1];\n      ptr2 = ptr2 + 1;\n    } while ((byteVal != 0x20) && (byteVal != 9));\n    if ((char)byteVal < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (byteVal & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      byteVal = ptr2[1];\n      if ((((((byteVal == 9) || (byteVal == 0x20)) &&\n            ((byteVal = ptr2[2], byteVal == 9 || (byteVal == 0x20)))) &&\n           ((byteVal = ptr2[3], byteVal == 9 || (byteVal == 0x20)))) &&\n          ((byteVal = ptr2[4], byteVal == 9 || (byteVal == 0x20)))) &&\n         ((byteVal = ptr2[5], byteVal == 9 || (byteVal == 0x20)))) {\n        byteVal = ptr2[6];\n        ptr = ptr2 + 6;\n        if ((byteVal == 9) || (byteVal == 0x20)) {\n          do {\n            do {\n              byteVal = ptr[1];\n              ptr = ptr + 1;\n            } while (byteVal == 0x20);\n          } while (byteVal == 9);\n        }\n      }\n      if ((0xd < byteVal) || ((-0x2402L >> (byteVal & 0x3f) & 1U) != 0)) {\n        result = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(result,errorMessage,count);\n      }\n    }\nLAB_00114599:\n    *ptr2 = 0;\n    if (lineStart < ptr2) {\n      slot = (byte **)htab_find_slot();\n      *slot = lineStart;\n    }\n    count = count + 1;\n    currentLine = nextLine;\n    lineStart = nextLine;\n    if (ptr3[1] == 0) {\n      *returnValue = file;\n      return;\n    }\n  } while( true );\n  if (byteVal == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_process_bad_number_00119940",
                "param_1": "input_value",
                "param_2": "error_message",
                "uVar1": "translated_error_message",
                "local_20": "scanned_value"
            },
            "code": "\nvoid check_and_process_bad_number_00119940(undefined8 input_value,undefined8 error_message)\n\n{\n  undefined8 translated_error_message;\n  char *scanned_value [2];\n  \n  bfd_scan_vma(input_value,scanned_value,0);\n  if (*scanned_value[0] == '\\0') {\n    return;\n  }\n  translated_error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(translated_error_message,error_message,input_value);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_process_bad_number_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "check_validity_and_process_00113a4d",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "data_ptr",
                "param_4": "arg4",
                "param_5": "arg5",
                "cVar1": "flag",
                "uVar2": "result",
                "puVar3": "ptr",
                "auVar4": "result_array"
            },
            "code": "\nundefined8\ncheck_validity_and_process_00113a4d(undefined8 arg1,undefined8 arg2,long data_ptr,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char flag;\n  undefined8 result;\n  undefined8 *ptr;\n  undefined result_array [16];\n  \n  flag = FUN_00112502(arg1,arg2,*(undefined8 *)(data_ptr + 0x18));\n  if ((flag != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (flag = FUN_0010ec73(arg2,*(undefined8 *)(data_ptr + 0x18)), flag != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        flag = FUN_001135a5(arg1,arg2,ptr);\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      flag = check_validity_and_process_00113a4d(arg1,arg2,ptr);\n      if (flag == '\\0') {\n        return 0;\n      }\n    }\n    result_array = FUN_00112502(arg1,arg2,*(undefined8 *)(data_ptr + 0x20));\n    if (result_array[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return result_array._0_8_;\n      }\n      result = FUN_0010ed2c(arg2,*(undefined8 *)(data_ptr + 0x20),result_array._8_8_,arg5);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_001135a5",
                "FUN_0010ed2c",
                "FUN_00113a4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_validity_and_process_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "result",
                "unaff_RBX": "memory_ptr",
                "param_7": "return_value"
            },
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 result;\n  void *memory_ptr;\n  undefined8 return_value;\n  \n  return_value = result;\n  free(memory_ptr);\n  return return_value;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010922b",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_parameter_00113b71",
                "param_1": "inputValue",
                "lVar1": "result"
            },
            "code": "\nlong initializeParameter_00113b71(long inputValue)\n\n{\n  long result;\n  \n  if (inputValue != 0) {\n    result = FUN_00112904(0x14,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = inputValue;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_parameter_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_parameter_00109dfe",
                "param_1": "parameter",
                "local_40": "outputString",
                "lVar1": "incrementedValue"
            },
            "code": "\nvoid processParameter_00109dfe(long parameter)\n\n{\n  long incrementedValue;\n  char outputString [40];\n  \n  if (*(long *)(parameter + 0x70) != 0) {\n    FUN_00109cf4(parameter,*(long *)(parameter + 0x70),0);\n    return;\n  }\n  incrementedValue = *(long *)(parameter + 0x68);\n  *(long *)(parameter + 0x68) = incrementedValue + 1;\n  *(long *)(parameter + 0x70) = incrementedValue;\n  sprintf(outputString,\"%ld=%ld\",incrementedValue,incrementedValue);\n  FUN_00109b52(parameter,outputString,incrementedValue,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_parameter_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "param_1": "inputAddress",
                "__s": "stringToAppend",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonToString_00109bbb(long inputAddress)\n\n{\n  char *stringToAppend;\n  size_t stringLength;\n  \n  if (*(long *)(inputAddress + 0x60) != 0) {\n    stringToAppend = *(char **)(*(long *)(inputAddress + 0x60) + 0x30);\n    if (stringToAppend != (char *)0x0) {\n      stringLength = strlen(stringToAppend);\n      *(undefined2 *)(stringToAppend + stringLength) = 0x3b;\n    }\n    return stringToAppend != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "combine_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "stringData",
                "lVar2": "dataArray",
                "__ptr": "ptr",
                "pcVar3": "temp",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "result",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "counter",
                "uVar10": "numStrings"
            },
            "code": "\nundefined8 combineStrings_0010ae0e(long input)\n\n{\n  long stringData;\n  long dataArray;\n  void *ptr;\n  char *temp;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 returnValue;\n  long totalLen;\n  uint counter;\n  ulong numStrings;\n  \n  returnValue = 0;\n  stringData = *(long *)(input + 0x60);\n  if (((stringData != 0) && (*(char **)(stringData + 8) != (char *)0x0)) &&\n     (result = *(char **)(stringData + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(stringData + 8));\n    len2 = strlen(result);\n    dataArray = *(long *)(stringData + 0x28);\n    if (dataArray == 0) {\n      totalLen = len1 + len2 + 10;\n      numStrings = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      numStrings = 0;\n      while( true ) {\n        result = *(char **)(dataArray + numStrings * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        numStrings = (ulong)((int)numStrings + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(stringData + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(stringData + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(stringData + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(stringData + 0x38));\n      totalLen = totalLen + len1;\n    }\n    result = (char *)xmalloc(totalLen);\n    stringData = *(long *)(input + 0x60);\n    strcpy(result,*(char **)(stringData + 8));\n    if (*(long *)(stringData + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",numStrings);\n      while( true ) {\n        stringData = *(long *)(input + 0x60);\n        numStrings = (ulong)counter;\n        ptr = *(void **)(stringData + 0x28);\n        temp = *(char **)((long)ptr + numStrings * 8);\n        if (temp == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result,temp);\n        free(*(void **)(*(long *)(stringData + 0x28) + numStrings * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    stringData = *(long *)(input + 0x60);\n    strcat(result,*(char **)(stringData + 0x20));\n    free(*(void **)(stringData + 0x20));\n    stringData = *(long *)(input + 0x60);\n    *(undefined8 *)(stringData + 0x20) = 0;\n    if (*(char **)(stringData + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(stringData + 0x30));\n      free(*(void **)(stringData + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    stringData = *(long *)(input + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    temp = *(char **)(stringData + 0x38);\n    if (temp != (char *)0x0) {\n      strcpy(result + len1 + 1,temp);\n      free(*(void **)(stringData + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    stringData = *(long *)(input + 0x60);\n    *(char **)(stringData + 8) = result;\n    returnValue = CONCAT71((int7)((ulong)stringData >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "combine_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "execute_operation_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operationInfo",
                "iVar1": "condition",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "currentNode",
                "puVar5": "headNode"
            },
            "code": "\nundefined8 executeOperation_001135a5(undefined8 input1,undefined8 input2,long operationInfo)\n\n{\n  int condition;\n  char result;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  undefined8 *headNode;\n  \n  if (6 < *(uint *)(operationInfo + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(operationInfo + 0x14)) {\n  case 0:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(operationInfo + 0x20),operationInfo);\n    if (result != '\\0') {\n      returnValue = FUN_0010e6a8(input2,*(undefined8 *)(operationInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(operationInfo + 0x20),operationInfo);\n    if (result != '\\0') {\n      returnValue = FUN_0010e7c2(input2,*(undefined8 *)(operationInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(operationInfo + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = FUN_0010e9a0(input2,*(undefined8 *)(operationInfo + 8),**(undefined4 **)(operationInfo + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(operationInfo + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    headNode = *(undefined8 **)(operationInfo + 0x20);\n    condition = *(int *)(operationInfo + 0x18);\n    returnValue = *(undefined8 *)(operationInfo + 8);\n    result = FUN_00112502(input1,input2,*(undefined8 *)(headNode[2] + 0x18));\n    if (((result != '\\0') && (result = FUN_00112c1f(input1,input2,*headNode,0), result != '\\0')) &&\n       (result = FUN_0010eafe(input2,returnValue,condition == 2), result != '\\0')) {\n      for (currentNode = (undefined8 *)headNode[1]; currentNode != (undefined8 *)0x0;\n          currentNode = (undefined8 *)*currentNode) {\n        result = FUN_00112c1f(input1,input2,currentNode[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = FUN_0010ebb0(input2,currentNode[1],*(undefined4 *)(currentNode + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      headNode = (undefined8 *)headNode[2];\n      while( true ) {\n        if (headNode == (undefined8 *)0x0) {\n          returnValue = FUN_00108f05(input2);\n          return returnValue;\n        }\n        result = FUN_00113a4d(input1,input2,headNode);\n        if (result == '\\0') break;\n        headNode = (undefined8 *)*headNode;\n      }\n    }\n    break;\n  case 4:\n    returnValue = FUN_0010e842(input2,*(undefined8 *)(operationInfo + 8),*(undefined8 *)(operationInfo + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = FUN_0010e8a9(*(undefined8 *)(operationInfo + 0x20),input2,*(undefined8 *)(operationInfo + 8));\n    return returnValue;\n  case 6:\n    result = FUN_00112c1f(input1,input2,**(undefined8 **)(operationInfo + 0x20),0);\n    if (result != '\\0') {\n      returnValue = FUN_0010e918(input2,*(undefined8 *)(operationInfo + 8),\n                           *(undefined8 *)(*(long *)(operationInfo + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "abort",
                "FUN_0010ebb0",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112c1f",
                "FUN_00113a4d",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "execute_operation_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001152b6",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "FUN_001125fa",
                "printf",
                "bfd_get_arch",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ae0e",
                "FUN_00115530",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "demangle_and_print_0010b0fa",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "components",
                "param_4": "templateCount",
                "param_5": "errorFlag",
                "uVar1": "component",
                "iVar2": "comparisonResult",
                "pcVar3": "demangledString",
                "plVar4": "templates",
                "pcVar5": "builtInTypeString",
                "sVar6": "builtInTypeLength",
                "__ptr": "ptr",
                "lVar7": "length",
                "local_40": "buffer"
            },
            "code": "\n\n\nchar * demangleAndPrint_0010b0fa(undefined8 arg1,undefined8 arg2,uint *components,long templateCount,\n                   undefined *errorFlag)\n\n{\n  uint component;\n  int comparisonResult;\n  char *demangledString;\n  long *templates;\n  char *builtInTypeString;\n  size_t builtInTypeLength;\n  void *ptr;\n  long length;\n  undefined buffer [16];\n  \n  if (errorFlag != (undefined *)0x0) {\n    *errorFlag = 0;\n  }\n  while( true ) {\n    component = *components;\n    if (0x29 < component) break;\n    if (0x17 < component) {\n      switch(component) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        demangledString = (char *)demangleAndPrint_0010b0fa(arg1,arg2,*(undefined8 *)(components + 4),0,0);\n        if (demangledString != (char *)0x0) {\n          switch(*components) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            demangledString = (char *)FUN_00113b4a(demangledString);\n            return demangledString;\n          case 0x1b:\n            demangledString = (char *)FUN_00113b71(demangledString);\n            return demangledString;\n          default:\n                    \n            abort();\n          case 0x22:\n            demangledString = (char *)FUN_00113d3a(demangledString);\n            return demangledString;\n          case 0x23:\n            demangledString = (char *)FUN_00113cb9(demangledString);\n            return demangledString;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        demangledString = (char *)cplus_demangle_print(3,components,0x14,buffer);\n        if (demangledString == (char *)0x0) {\n          builtInTypeString = \"Couldn\\'t get demangled builtin type\\n\";\n          demangledString = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(demangledString,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          builtInTypeString = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"bool\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(demangledString,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(demangledString,\"long double\"), comparisonResult == 0)) {\n          builtInTypeString = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"float\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"__float128\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"unsigned char\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          builtInTypeString = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          builtInTypeString = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(demangledString,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(demangledString,\"__int128\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"short\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"unsigned short\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"void\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(demangledString,\"long long\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          builtInTypeString = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledString,\"...\");\n        if (comparisonResult == 0) {\n          builtInTypeString = \"Unexpected demangled varargs\\n\";\n          if (errorFlag == (undefined *)0x0) goto LAB_0010b6a9;\n          *errorFlag = 1;\n        }\n        else {\n          builtInTypeString = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          builtInTypeString = (char *)dcgettext(0,builtInTypeString,5);\n          fprintf(_stderr,builtInTypeString);\n        }\n        builtInTypeString = (char *)0x0;\nLAB_0010b6c6:\n        free(demangledString);\n        return builtInTypeString;\n      case 0x29:\n        if (*(long *)(components + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)demangleAndPrint_0010b0fa(arg1,arg2,*(long *)(components + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          length = FUN_0010b6ea(arg1,arg2,*(undefined8 *)(components + 6),buffer);\n          if (length != 0) {\n            demangledString = (char *)FUN_00113ce0(ptr,length,buffer[0]);\n            return demangledString;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (component != 1) {\n      if (component == 4) {\n        demangledString = (char *)cplus_demangle_print(3,components,0x14,buffer);\n        builtInTypeString = \"Failed to print demangled template\\n\";\n        if (demangledString != (char *)0x0) {\n          builtInTypeLength = strlen(demangledString);\n          builtInTypeString = (char *)FUN_0010afd5(arg1,arg2,demangledString,builtInTypeLength & 0xffffffff,9);\n          free(demangledString);\n          return builtInTypeString;\n        }\nLAB_0010b3d3:\n        builtInTypeString = (char *)dcgettext(0,builtInTypeString,5);\n        fprintf(_stderr,builtInTypeString);\n        return demangledString;\n      }\n      if (component == 0) {\n        if ((templateCount == 0) || (templates = (long *)FUN_00113b1e(templateCount), templates == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    templateCount = demangleAndPrint_0010b0fa(arg1,arg2,*(undefined8 *)(components + 4),templateCount,0);\n    if (templateCount == 0) goto LAB_0010b38c;\n    components = *(uint **)(components + 6);\n    errorFlag = (undefined *)0x0;\n  }\n  demangledString = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,demangledString,(ulong)component);\nLAB_0010b38c:\n  demangledString = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return demangledString;\nLAB_0010b1a5:\n  if (*templates == 0) {\nswitchD_0010b158_caseD_18:\n    demangledString = (char *)FUN_0010afd5(arg1,arg2,*(undefined8 *)(components + 4),components[6],0);\n    return demangledString;\n  }\n  demangledString = *(char **)(*templates + 8);\n  if (demangledString == (char *)0x0) goto LAB_0010b38c;\n  builtInTypeString = (char *)FUN_001129f4(demangledString);\n  if (builtInTypeString != (char *)0x0) {\n    builtInTypeLength = strlen(builtInTypeString);\n    if ((components[6] == (uint)builtInTypeLength) &&\n       (comparisonResult = strncmp(builtInTypeString,*(char **)(components + 4),(long)(int)components[6]), comparisonResult == 0)) {\n      return demangledString;\n    }\n  }\n  templates = templates + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "abort",
                "strlen",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "FUN_0010b6ea",
                "free",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_and_print_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_input_lines_00104c36",
                "uVar1": "result",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentChar",
                "in_CL": "currentByte",
                "bVar4": "nextByte",
                "unaff_RBX": "lineStart",
                "unaff_EBP": "lineCounter",
                "pbVar5": "currentLine",
                "unaff_R14": "lastLine",
                "unaff_R15": "nextLine",
                "unaff_R13": "errorString",
                "in_stack_00000008": "lineNumber",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid processInputLines_00104c36(void)\n\n{\n  undefined8 result;\n  byte **slotPtr;\n  byte *currentChar;\n  byte currentByte;\n  byte nextByte;\n  byte *lineStart;\n  int lineCounter;\n  byte *currentLine;\n  undefined8 errorString;\n  byte *lastLine;\n  byte *nextLine;\n  undefined8 lineNumber;\n  undefined8 *returnAddress;\n  \n  do {\n    currentLine = nextLine;\n    if (currentByte == 9) goto LAB_00104c3f;\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextByte = currentLine[1];\n      if ((((((nextByte == 9) || (nextByte == 0x20)) &&\n            ((nextByte = currentLine[2], nextByte == 9 || (nextByte == 0x20)))) &&\n           ((nextByte = currentLine[3], nextByte == 9 || (nextByte == 0x20)))) &&\n          ((nextByte = currentLine[4], nextByte == 9 || (nextByte == 0x20)))) &&\n         ((nextByte = currentLine[5], nextByte == 9 || (nextByte == 0x20)))) {\n        nextByte = currentLine[6];\n        currentChar = currentLine + 6;\n        if ((nextByte == 9) || (nextByte == 0x20)) {\n          do {\n            do {\n              nextByte = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextByte == 0x20);\n          } while (nextByte == 9);\n        }\n      }\n      if ((0xd < nextByte) || ((-0x2402L >> (nextByte & 0x3f) & 1U) != 0)) {\n        result = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(result,lineNumber,lineCounter);\n      }\n    }\nLAB_00114599:\n    *currentLine = 0;\n    if (nextLine < currentLine) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = nextLine;\n    }\n    lineCounter = lineCounter + 1;\n    currentLine = lineStart;\n    if (lastLine[1] == 0) {\n      *returnAddress = errorString;\n      return;\n    }\n    for (; nextByte = *currentLine, lastLine = currentLine, nextByte != 10; currentLine = currentLine + 1) {\n      if ((char)nextByte < '\\v') {\n        if (nextByte == 0) {\n          currentChar = currentLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextByte == 0xd) {\n          *currentLine = 0;\n          currentChar = currentLine + 1;\n          if (currentLine[1] == 10) {\n            currentChar = currentLine + 2;\n            lastLine = currentLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextByte == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentLine = 0;\n    if (currentLine[1] == 0xd) {\n      lastLine = currentLine + 1;\n      currentChar = currentLine + 2;\n    }\n    else {\n      currentChar = currentLine + 1;\n    }\nLAB_00114553:\n    currentByte = *lineStart;\n    nextLine = lineStart;\n    while (lineStart = currentChar, currentByte == 0x20) {\nLAB_00104c3f:\n      currentLine = nextLine + 1;\n      nextLine = nextLine + 1;\n      currentChar = lineStart;\n      currentByte = *currentLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_debug_info_0010554f",
                "param_7": "file",
                "param_8": "numSections",
                "param_9": "hasDebugSymbols",
                "param_12": "paddingSize",
                "param_14": "gapSizes",
                "param_17": "sectionOffsets",
                "param_21": "debugLinkFilename",
                "param_30": "sectionHeaders",
                "param_33": "mergedNotes",
                "param_36": "isCOFF",
                "param_37": "isExecutable",
                "param_39": "elfMachineCode",
                "in_R10": "mergedNoteSections"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processDebugInfo_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *mergedNoteSections;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long file;\n  ulong numSections;\n  char hasDebugSymbols;\n  undefined4 *__ptr_02;\n  ulong paddingSize;\n  char *param_13;\n  undefined *gapSizes;\n  uint param_15;\n  long *sectionOffsets;\n  undefined8 in_stack_00000068;\n  undefined8 debugLinkFilename;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *sectionHeaders;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *mergedNotes;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte isCOFF;\n  byte isExecutable;\n  undefined8 param_38;\n  ushort elfMachineCode;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    paddingSize = 0;\n    gapSizes = (undefined *)0x0;\n    sectionOffsets = (long *)0x0;\n    uVar29 = paddingSize;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    sectionOffsets = (long *)xmalloc(lVar14);\n    param_40 = sectionOffsets;\n    bfd_map_over_sections(file,FUN_0010870e,&stack0x00000140);\n    qsort(sectionOffsets,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    gapSizes = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = gapSizes;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      paddingSize = 0;\n      do {\n        puVar30 = (ulong *)(gapSizes + uVar29 * 8);\n        plVar28 = sectionOffsets + uVar29;\n        uVar21 = paddingSize;\n        do {\n          paddingSize = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(file,*plVar28);\n          uVar13 = bfd_octets_per_byte(file);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,file,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (paddingSize < uVar21);\n      } while( true );\n    }\n    paddingSize = 0;\nLAB_00107cd1:\n    uVar29 = paddingSize;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(file);\n      lVar14 = sectionOffsets[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,file,sectionOffsets[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(gapSizes + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= paddingSize) {\n            uVar29 = paddingSize;\n          }\n        }\n      }\n    }\n  }\n  paddingSize = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          hasDebugSymbols = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (hasDebugSymbols == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUN_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          hasDebugSymbols = FUN_0011173a(__ptr_02,lVar14,param_43);\n          if (hasDebugSymbols == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (hasDebugSymbols == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        param_40 = (long *)0x0;\n        sectionHeaders = plVar28;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)isExecutable + 1 + in_stack_000000d8;\n            if (isExecutable != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (isCOFF != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)isCOFF < '\\0') {\n            if (isCOFF == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (isCOFF < 100) {\n              switch(isCOFF) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(isCOFF) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (isExecutable != 0) {\n                      iVar10 = elfMachineCode - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(file + 0x44) & 0x42) != 0) && ((*(uint *)(file + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(file + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (numSections != 0) {\n        plVar28 = DAT_001278b0 + numSections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(file + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = lVar14;\n      if (numSections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _hasDebugSymbols = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_hasDebugSymbols];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(file + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(file + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(file + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(file + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _hasDebugSymbols = _hasDebugSymbols + 1;\n        } while (numSections != _hasDebugSymbols);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,file);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(file + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        mergedNotes = (void *)0x0;\n        cVar7 = FUN_0011378f(file,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(file,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(file,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(file,lVar14,sectionHeaders,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(file,lVar37,mergedNotes,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,file,0,uVar17);\n          free(mergedNotes);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(file + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,file,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_001279f8);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a08), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_001279e8), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_001279e0), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279d8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279d0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278d0), lVar14 != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(file,DAT_001278a8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,file);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,file);\n    for (puVar26 = DAT_001279c0; puVar4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(file,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,file,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(file,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,file,uVar17,0);\n        return 0;\n      }\n    }\n    if (mergedNoteSections == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(file + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(file + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = mergedNoteSections;\n          }\n          plVar15 = mergedNoteSections;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(file,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,file,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,file,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)mergedNoteSections[3];\n        free((void *)mergedNoteSections[1]);\n        free(mergedNoteSections);\n        mergedNoteSections = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(file,debugLinkFilename), lVar14 = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (gapSizes != (undefined *)0x0) {\n        if (0x2000 < paddingSize) {\n          paddingSize = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(paddingSize);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (paddingSize = paddingSize & 0xffffffff; paddingSize != 0; paddingSize = paddingSize - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(gapSizes + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*sectionOffsets + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(file,*sectionOffsets,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,file,*sectionOffsets,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          sectionOffsets = sectionOffsets + 1;\n        }\n        free(__ptr);\n        free(gapSizes);\n      }\n      uVar9 = (**(code **)(*(long *)(file + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(file,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(file + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(file + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,file,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,file,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "bfd_is_local_label",
                "bfd_errmsg",
                "free",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010875d",
                "FUN_00108863",
                "bfd_get_error",
                "FUN_00112a33",
                "FUN_0010bbd3",
                "FUN_00119dd0",
                "bfd_set_section_size",
                "concat",
                "bfd_set_error",
                "bfd_make_section_with_flags",
                "FUN_001159d0",
                "xstrdup",
                "bfd_decode_symclass",
                "bfd_octets_per_byte",
                "FUN_00112894",
                "FUN_00113fb0",
                "strcpy",
                "bfd_set_section_contents",
                "FUN_0011173a",
                "htab_traverse",
                "FUN_00115d70",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_001126c0",
                "xmalloc",
                "qsort",
                "fprintf",
                "FUN_00119ed0",
                "FUN_001088ae",
                "bfd_coff_get_auxent",
                "FUN_0011378f",
                "FUN_0011a2e0",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00116030",
                "strcmp",
                "FUN_0010c892",
                "bfd_map_over_sections",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116110",
                "htab_find",
                "bfd_fill_in_gnu_debuglink_section",
                "bfd_alt_mach_code",
                "htab_elements",
                "strlen",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_0010870e",
                "FUN_0010bf20",
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_call_function_00109cf4",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "argument3",
                "local_3c": "formattedArgument"
            },
            "code": "\nvoid formatAndCallFunction_00109cf4(undefined8 argument1,undefined8 argument2,undefined4 argument3)\n\n{\n  char formattedArgument [28];\n  \n  sprintf(formattedArgument,\"%ld\",argument2);\n  FUN_00109b52(argument1,formattedArgument,argument2,0,argument3);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010b800",
                "FUN_0010bba1",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "format_and_call_function_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "extract_function_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "uVar1": "value1",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "final_result"
            },
            "code": "\nundefined  [16]\nextract_function_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 value1;\n  char *current_char;\n  undefined8 result;\n  undefined final_result [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    value1 = FUN_00109a32(input_string,0);\n    *output_values = value1;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      value1 = FUN_00109a32(input_string,0,param_3);\n      output_values[1] = value1;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  final_result._8_8_ = param_5;\n  final_result._0_8_ = result;\n  return final_result;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_function_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "validate_permissions_001159d0",
                "param_1": "input_value",
                "uVar1": "returnValue",
                "cVar2": "charValue",
                "uVar3": "result",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2"
            },
            "code": "\nundefined4 validate_permissions_001159d0(long input_value)\n\n{\n  undefined8 returnValue;\n  char charValue;\n  undefined4 result;\n  long tempVar1;\n  long tempVar2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(input_value + 0x27) & 2) == 0) {\n      return result;\n    }\n    tempVar1 = FUN_00115d00(*(undefined8 *)(input_value + 0xd0),*(undefined8 *)(input_value + 0xe0));\n    if ((tempVar1 != 0) &&\n       (((returnValue = *(undefined8 *)(tempVar1 + 8), DAT_00127a2c != 7 ||\n         (charValue = FUN_00115d70(returnValue,DAT_00127a08), charValue != '\\0')) &&\n        (charValue = FUN_00115d70(returnValue,DAT_001279f8), charValue == '\\0')))) {\n      tempVar1 = *(long *)(*(long *)(input_value + 0xd0) + 0xc0);\n      tempVar2 = tempVar1;\n      do {\n        if (tempVar2 == 0) {\n          return 1;\n        }\n        charValue = FUN_00115b70(tempVar2);\n        if (charValue == '\\0') {\n          return result;\n        }\n        tempVar2 = *(long *)(*(long *)(tempVar2 + 0xd0) + 0xc0);\n      } while (tempVar1 != tempVar2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d70",
                "FUN_00115d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "validate_permissions_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "reverse_and_process_string_0010a77a",
                "param_1": "input_param",
                "__s": "string_1",
                "uVar4": "result",
                "uVar1": "character",
                "uVar3": "something",
                "__s_00": "temp_string_1",
                "sVar5": "length_1",
                "sVar6": "length_2",
                "__s_01": "final_string",
                "lVar2": "pointer"
            },
            "code": "\nundefined4 reverseAndProcessString_0010a77a(long input_param)\n\n{\n  undefined character;\n  long pointer;\n  char *string_1;\n  undefined8 something;\n  undefined4 result;\n  char *temp_string_1;\n  size_t length_1;\n  size_t length_2;\n  char *final_string;\n  \n  pointer = *(long *)(input_param + 0x60);\n  if ((pointer != 0) && (string_1 = *(char **)(pointer + 0x20), string_1 != (char *)0x0)) {\n    result = *(undefined4 *)(pointer + 0x18);\n    character = *(undefined *)(pointer + 0x1c);\n    something = *(undefined8 *)(pointer + 0x10);\n    temp_string_1 = (char *)FUN_00109b2f();\n    length_1 = strlen(temp_string_1);\n    length_2 = strlen(string_1);\n    final_string = (char *)xmalloc(length_1 + 2 + length_2);\n    sprintf(final_string,\"%s%s;\",temp_string_1,string_1);\n    free(temp_string_1);\n    free(string_1);\n    result = FUN_00109b52(input_param,final_string,something,character,result);\n    if ((char)result != '\\0') {\n      free(final_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_process_string_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_and_display_error_0010543c",
                "unaff_RBP": "base_pointer",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "uVar1": "file_handle",
                "uVar4": "error_format_string"
            },
            "code": "\nvoid open_file_and_display_error_0010543c(void)\n\n{\n  undefined8 file_handle;\n  int *error_location;\n  char *error_message;\n  undefined8 error_format_string;\n  long base_pointer;\n  \n  error_location = __errno_location();\n  error_message = strerror(*error_location);\n  file_handle = *(undefined8 *)(base_pointer + 0x10);\n  error_format_string = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(error_format_string,file_handle,error_message);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_and_display_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "create_improved_string_0010a424",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "additionalFlag",
                "cVar1": "result",
                "bVar2": "tmpByte",
                "iVar3": "tmpInt",
                "uVar4": "output",
                "pcVar5": "str1",
                "__ptr": "ptrArray",
                "uVar6": "tmpVar",
                "__s": "str2",
                "sVar7": "len1",
                "sVar8": "len2",
                "__s_00": "resultString",
                "lVar9": "index",
                "bVar10": "bitFlag",
                "lVar11": "loopIndex",
                "uVar12": "bitOrFlag"
            },
            "code": "\nundefined4 createImprovedString_0010a424(long input,char flag,int size,char additionalFlag)\n\n{\n  char result;\n  byte tmpByte;\n  int tmpInt;\n  undefined4 output;\n  char *str1;\n  undefined8 *ptrArray;\n  undefined8 tmpVar;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *resultString;\n  long index;\n  byte bitFlag;\n  long loopIndex;\n  undefined bitOrFlag;\n  \n  if ((flag == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  bitFlag = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n  str1 = (char *)FUN_00109b2f(input);\n  if (size < 0) {\n    ptrArray = (undefined8 *)0x0;\n    size = 0;\nLAB_0010a582:\n    bitOrFlag = 1;\n    if (bitFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (size != 0) {\n      tmpInt = size + 1;\n      ptrArray = (undefined8 *)xmalloc((long)tmpInt * 8);\n      index = (long)(size + -1);\n      do {\n        tmpByte = 1;\n        if (bitFlag == 0) {\n          tmpByte = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        tmpVar = FUN_00109b2f(input);\n        bitFlag = tmpByte & 1;\n        ptrArray[index] = tmpVar;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (additionalFlag == '\\0') {\n        result = FUN_00109d97(input);\n        if (result == '\\0') {\n          return 0;\n        }\n        tmpByte = 1;\n        if (bitFlag == 0) {\n          tmpByte = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        bitFlag = tmpByte & 1;\n        tmpVar = FUN_00109b2f(input);\n        ptrArray[(long)tmpInt + -1] = tmpVar;\n        size = tmpInt;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (additionalFlag != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(input);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((bitFlag != 0) || (*(char *)(*(long *)(input + 0x60) + 0x1c) != '\\0')) {\n      tmpVar = FUN_00109b2f(input);\n      size = 1;\n      bitOrFlag = 1;\n      *ptrArray = tmpVar;\n      goto LAB_0010a596;\n    }\n    tmpVar = FUN_00109b2f(input);\n    size = 1;\n    *ptrArray = tmpVar;\n  }\n  bitOrFlag = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)FUN_00109b2f(input);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  index = len1 + 10 + len2;\n  for (loopIndex = 0; (int)loopIndex < size; loopIndex = loopIndex + 1) {\n    len1 = strlen((char *)ptrArray[loopIndex]);\n    index = index + len1;\n  }\n  resultString = (char *)xmalloc(index);\n  sprintf(resultString,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    len1 = strlen(resultString);\n    if (size <= (int)index) break;\n    *(undefined2 *)(resultString + len1) = 0x2c;\n    str1 = (char *)ptrArray[index];\n    index = index + 1;\n    strcpy(resultString + len1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(resultString + len1) = 0x3b;\n  free(ptrArray);\n  output = FUN_00109b52(input,resultString,0,bitOrFlag,0);\n  if ((char)output == '\\0') {\n    return 0;\n  }\n  free(resultString);\n  return output;\n}\n\n",
            "called": [
                "FUN_00109d97",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_improved_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_gnu_info_00119970",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid printGNUInfo_00119970(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_gnu_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_pairs_00114c80",
                "param_1": "input_string",
                "param_2": "default_value",
                "param_3": "error_message",
                "param_4": "additional_data",
                "pcVar1": "equal_sign_position",
                "uVar2": "error_message_ptr",
                "auVar3": "result",
                "xmalloc": "allocate_memory",
                "strchr": "find_character",
                "dcgettext": "get_error_message"
            },
            "code": "\nundefined  [16] extract_key_value_pairs_00114c80(char *input_string,undefined8 default_value,undefined8 error_message,undefined8 additional_data)\n\n{\n  char *equal_sign_position;\n  undefined8 error_message_ptr;\n  undefined result [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message_ptr = FUN_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    result._0_8_[2] = equal_sign_position + 1;\n    result._0_8_[1] = error_message_ptr;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = default_value;\n    result._8_8_ = additional_data;\n    return result;\n  }\n  error_message_ptr = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_message_ptr,error_message);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_0011a480",
                "FUN_001053b5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_key_value_pairs_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "valueToUpdate",
                "param_2": "newValue",
                "param_3": "pointer",
                "puVar1": "updatedPointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 valueToUpdate,undefined8 newValue,long *pointer)\n\n{\n  undefined8 *updatedPointer;\n  \n  updatedPointer = (undefined8 *)*pointer;\n  *updatedPointer = newValue;\n  *pointer = (long)(updatedPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_data",
                "param_2": "symbol_table",
                "param_3": "type_table",
                "param_5": "type_code",
                "param_6": "field_table",
                "lVar1": "temp_var_1",
                "cVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "lVar5": "result",
                "uVar6": "temp_var_6",
                "plVar7": "temp_var_7",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "temp_var_8",
                "iVar9": "temp_var_9",
                "pcVar10": "temp_var_10",
                "uVar11": "temp_var_11",
                "lVar12": "temp_var_12",
                "uVar13": "temp_var_13",
                "uVar14": "temp_var_14",
                "uVar15": "temp_var_15",
                "local_68": "local_buffer",
                "local_48": "local_var_1",
                "local_47": "local_var_2"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *symbol_table,long type_table,undefined8 param_4,uint type_code,\n                 long *field_table,char param_7,undefined8 param_8)\n\n{\n  long temp_var_1;\n  char temp_var_2;\n  undefined4 temp_var_3;\n  undefined8 temp_var_4;\n  long result;\n  undefined8 temp_var_6;\n  long *temp_var_7;\n  void *ptr_1;\n  void *ptr_2;\n  byte temp_var_8;\n  int temp_var_9;\n  char *temp_var_10;\n  ulong temp_var_11;\n  long temp_var_12;\n  uint temp_var_13;\n  uint temp_var_14;\n  undefined8 temp_var_15;\n  undefined local_buffer [32];\n  char local_var_1;\n  byte local_var_2;\n  \n  result = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp_var_13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    temp_var_11 = (ulong)(type_code & *(uint *)(result + 0x40));\n    temp_var_8 = (byte)*(undefined4 *)(result + 0x3c);\n    temp_var_13 = (temp_var_13 ^ type_code) & *(uint *)(result + 0x38) ^ temp_var_13;\n    if (temp_var_11 == 1L << (temp_var_8 & 0x3f)) {\n      temp_var_4 = parse_coff_type_0010dac0(coff_data,symbol_table,type_table,param_4,temp_var_13,field_table,param_7,param_8);\n      result = FUN_00113d3a(temp_var_4);\n      return result;\n    }\n    if (temp_var_11 != 2L << (temp_var_8 & 0x3f)) {\n      if (temp_var_11 != 3L << (temp_var_8 & 0x3f)) {\n        temp_var_4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp_var_13);\n        FUN_00119ed0(temp_var_4,type_code);\n        return 0;\n      }\n      temp_var_14 = 0;\n      if (field_table != (long *)0x0) {\n        temp_var_14 = (uint)*(ushort *)(field_table + 2);\n        temp_var_7 = field_table + 2;\n        for (temp_var_9 = 0; (*(short *)temp_var_7 != 0 && (temp_var_9 != 3)); temp_var_9 = temp_var_9 + 1) {\n          *(short *)temp_var_7 = *(short *)((long)temp_var_7 + 2);\n          temp_var_7 = (long *)((long)temp_var_7 + 2);\n        }\n        *(short *)temp_var_7 = 0;\n      }\n      temp_var_15 = 0;\n      temp_var_4 = param_8;\n      temp_var_6 = parse_coff_type_0010dac0(coff_data,symbol_table,type_table,param_4,temp_var_13,field_table,0);\n      result = *(long *)(type_table + 0x28);\n      if (result == 0) {\n        temp_var_4 = FUN_00113dfe(4,0,temp_var_15,temp_var_4);\n        result = FUN_0010c218(param_8,\"int\",temp_var_4);\n        *(long *)(type_table + 0x28) = result;\n      }\n      result = FUN_00113c43(temp_var_6,result,0,(long)(int)(temp_var_14 - 1),0);\n      return result;\n    }\n    temp_var_4 = parse_coff_type_0010dac0(coff_data,symbol_table,type_table,param_4,temp_var_13,field_table,param_7,param_8);\n    result = FUN_00113ce0(temp_var_4,0,0);\n    return result;\n  }\n  if ((field_table != (long *)0x0) && (0 < *field_table)) {\n    temp_var_7 = (long *)FUN_0010da0b(type_table);\n    if (*temp_var_7 != 0) {\n      return *temp_var_7;\n    }\n    result = FUN_00113e23(temp_var_7,0);\n    return result;\n  }\n  if (param_7 == '\\0') {\n    field_table = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = FUN_00113e17();\n    return result;\n  }\n  result = *(long *)(type_table + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    temp_var_4 = FUN_00113e17();\n    temp_var_10 = \"void\";\n    break;\n  case 2:\n    temp_var_4 = FUN_00113dfe(1,0);\n    temp_var_10 = \"char\";\n    break;\n  case 3:\n    temp_var_4 = FUN_00113dfe(2,0);\n    temp_var_10 = \"short\";\n    break;\n  case 4:\n    temp_var_4 = FUN_00113dfe(4,0);\n    temp_var_10 = \"int\";\n    break;\n  case 5:\n    temp_var_4 = FUN_00113dfe(4,0);\n    temp_var_10 = \"long\";\n    break;\n  case 6:\n    temp_var_4 = FUN_00113df2(4);\n    temp_var_10 = \"float\";\n    break;\n  case 7:\n    temp_var_4 = FUN_00113df2(8);\n    temp_var_10 = \"double\";\n    break;\n  case 8:\n    if (field_table == (long *)0x0) {\n      result = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var_4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (field_table == (long *)0x0) {\n      result = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var_4 = 9;\nLAB_0010de7a:\n    result = FUN_0010e07c(coff_data,symbol_table,type_table,temp_var_4,field_table,param_8);\nLAB_0010e046:\n    temp_var_7 = (long *)FUN_0010da0b(type_table,param_4);\n    *temp_var_7 = result;\n    return result;\n  case 10:\n    if (field_table == (long *)0x0) {\n      result = FUN_00113d6e(0,0);\n    }\n    else {\n      result = field_table[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      temp_var_12 = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          temp_var_9 = (int)temp_var_12;\n          temp_var_1 = *(long *)(*symbol_table + symbol_table[2] * 8);\n          temp_var_2 = bfd_coff_get_syment(coff_data,temp_var_1,local_buffer);\n          temp_var_12 = (long)temp_var_9;\n          if (temp_var_2 == '\\0') {\n            temp_var_3 = bfd_get_error();\n            temp_var_4 = bfd_errmsg(temp_var_3);\n            temp_var_6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(temp_var_6,temp_var_4);\n            free(ptr_1);\n            free(ptr_2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_var_2 + 1 + symbol_table[3];\n          if (local_var_1 != '\\x10') break;\n          if ((int)type_code <= temp_var_9 + 1) {\n            type_code = type_code + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)type_code << 3);\n          }\n          temp_var_12 = *(long *)(temp_var_1 + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)temp_var_9 * 8) = *(undefined8 *)(temp_var_1 + 8);\n          *(long *)((long)ptr_2 + (long)temp_var_9 * 8) =\n               *(long *)(temp_var_1 + 0x10) + *(long *)(temp_var_12 + 0x30);\n          temp_var_12 = (long)(temp_var_9 + 1);\n        }\n      } while (local_var_1 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + temp_var_12 * 8) = 0;\n      result = FUN_00113d6e(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    temp_var_4 = FUN_00113dfe(1,1);\n    temp_var_10 = \"unsigned char\";\n    break;\n  case 0xd:\n    temp_var_4 = FUN_00113dfe(2,1);\n    temp_var_10 = \"unsigned short\";\n    break;\n  case 0xe:\n    temp_var_4 = FUN_00113dfe(4,1);\n    temp_var_10 = \"unsigned int\";\n    break;\n  case 0xf:\n    temp_var_4 = FUN_00113dfe(4,1);\n    temp_var_10 = \"unsigned long\";\n    break;\n  case 0x10:\n    temp_var_4 = FUN_00113df2(0xc);\n    temp_var_10 = \"long double\";\n  }\n  result = FUN_0010c218(param_8,temp_var_10,temp_var_4);\nLAB_0010e065:\n  *(long *)(type_table + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010da0b",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_0010dac0",
                "bfd_errmsg",
                "FUN_0010e07c",
                "bfd_coff_get_syment",
                "free",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00113df2",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "comparisonResult",
                "auVar2": "result",
                "iVar1": "strncmpResult",
                "in_RAX": "input_8bytes"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int strncmpResult;\n  undefined8 input_8bytes;\n  size_t length;\n  undefined4 comparisonResult;\n  undefined result [16];\n  \n  length = strlen(string2);\n  strncmpResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparisonResult,strncmpResult) >> 8);\n  result[0] = strncmpResult == 0;\n  result._8_8_ = input_8bytes;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_and_exit_0010882c",
                "piVar1": "pointerToErrno",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nvoid printErrorMessageAndExit_0010882c(void)\n\n{\n  int *pointerToErrno;\n  undefined8 translatedErrorMessage;\n  \n  pointerToErrno = __errno_location();\n  strerror(*pointerToErrno);\n  translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(translatedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "generate_error_message_0010ebb0",
                "param_1": "message",
                "param_2": "errorType",
                "param_3": "errorLength",
                "param_4": "extraInfo",
                "__s": "resultString",
                "cVar1": "typeChar",
                "uVar2": "remainingLength",
                "uVar3": "returnValue",
                "sVar4": "inputLength",
                "sVar5": "resultLength",
                "__s_00": "finalString"
            },
            "code": "\nundefined4 generateErrorMessage_0010ebb0(undefined8 message,char *errorType,int errorLength,undefined8 extraInfo)\n\n{\n  char typeChar;\n  uint remainingLength;\n  undefined4 returnValue;\n  char *resultString;\n  size_t inputLength;\n  size_t resultLength;\n  char *finalString;\n  \n  resultString = (char *)FUN_00109b2f();\n  remainingLength = errorLength - 1;\n  if (remainingLength < 4) {\n    returnValue = *(undefined4 *)(&DAT_00121340 + (ulong)remainingLength * 4);\n    typeChar = (&DAT_00121334)[remainingLength];\n    inputLength = strlen(errorType);\n    resultLength = strlen(resultString);\n    finalString = (char *)xmalloc(inputLength + 3 + resultLength);\n    sprintf(finalString,\"%s:%c%s\",errorType,(ulong)(uint)(int)typeChar,resultString);\n    free(resultString);\n    returnValue = FUN_0010e2f0(message,returnValue,0,extraInfo,finalString);\n    if ((char)returnValue != '\\0') {\n      free(finalString);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_error_message_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "allocate_and_store_params_00113b98",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "lVar1": "allocated_address",
                "plVar2": "allocated_ptr"
            },
            "code": "\nlong allocate_and_store_params_00113b98(long input_1,long input_2,long input_3,undefined input_4)\n\n{\n  long allocated_address;\n  long *allocated_ptr;\n  \n  if ((input_1 != 0) && (allocated_address = FUN_00112904(0x13,0), allocated_address != 0)) {\n    allocated_ptr = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_ptr + 0x19) = 0;\n    *allocated_ptr = input_1;\n    *(undefined4 *)((long)allocated_ptr + 0x1c) = 0;\n    allocated_ptr[1] = input_2;\n    allocated_ptr[2] = input_3;\n    *(undefined *)(allocated_ptr + 3) = input_4;\n    *(long **)(allocated_address + 0x10) = allocated_ptr;\n    return allocated_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_store_params_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_htab_entry_00115d70",
                "param_1": "entry_key",
                "param_2": "hash_table",
                "lVar1": "entry_value",
                "local_18": "traverse_data",
                "local_10": "is_entry_found"
            },
            "code": "\nundefined check_htab_entry_00115d70(undefined8 entry_key,undefined8 hash_table)\n\n{\n  long entry_value;\n  undefined8 traverse_data;\n  undefined is_entry_found;\n  \n  if (DAT_001279ca == '\\0') {\n    entry_value = htab_find(hash_table,entry_key);\n    is_entry_found = entry_value != 0;\n  }\n  else {\n    is_entry_found = 0;\n    traverse_data = entry_key;\n    htab_traverse(hash_table,FUN_0011a170,&traverse_data);\n  }\n  return is_entry_found;\n}\n\n",
            "called": [
                "FUN_0011a170",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "imported": false,
            "current_name": "check_htab_entry_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_insert_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "code",
                "uVar1": "newDataPtr",
                "puVar2": "dataPtr",
                "uVar3": "newSize"
            },
            "code": "\nundefined8 resizeAndInsertData_00109be3(long data,undefined8 value,undefined4 code)\n\n{\n  undefined8 newDataPtr;\n  undefined8 *dataPtr;\n  uint newSize;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    newSize = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = newSize;\n    newDataPtr = xrealloc(*(undefined8 *)(data + 0x20),(ulong)newSize << 4);\n    *(undefined8 *)(data + 0x20) = newDataPtr;\n  }\n  newSize = *(uint *)(data + 0x28);\n  dataPtr = (undefined8 *)((ulong)newSize * 0x10 + *(long *)(data + 0x20));\n  *dataPtr = value;\n  *(undefined4 *)(dataPtr + 1) = code;\n  *(uint *)(data + 0x28) = newSize + 1;\n  return CONCAT71((int7)((ulong)dataPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "resize_and_insert_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strnlen",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_encrypted_request_0010e918",
                "param_1": "socket",
                "param_2": "request",
                "param_3": "dataSize",
                "__s": "response",
                "sVar2": "requestSize",
                "sVar3": "responseSize",
                "__s_00": "encryptedRequest",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendEncryptedRequest_0010e918(undefined8 socket,char *request,undefined8 dataSize)\n\n{\n  undefined4 result;\n  char *response;\n  size_t requestSize;\n  size_t responseSize;\n  char *encryptedRequest;\n  \n  response = (char *)FUN_00109b2f();\n  requestSize = strlen(request);\n  responseSize = strlen(response);\n  encryptedRequest = (char *)xmalloc(requestSize + 0x14 + responseSize);\n  sprintf(encryptedRequest,\"%s:c=e%s,%ld\",request,response,dataSize);\n  free(response);\n  result = FUN_0010e2f0(socket,0x80,0,0,encryptedRequest);\n  if ((char)result != '\\0') {\n    free(encryptedRequest);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_encrypted_request_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "parse_and_reverse_section_00116110",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "tempByte",
                "uVar2": "tempVar2",
                "lVar3": "tempVar3",
                "iVar4": "tempVar4",
                "iVar5": "tempVar5",
                "cVar6": "tempChar",
                "uVar7": "tempVar7",
                "__ptr": "bufferPtr",
                "lVar8": "tempVar8",
                "uVar9": "tempVar9",
                "iVar10": "tempVar10",
                "uVar11": "tempVar11",
                "puVar12": "tempPtr12",
                "lVar13": "tempVar13",
                "puVar14": "tempPtr14",
                "puVar15": "tempPtr15",
                "pvVar16": "tempVoidPtr16",
                "uVar17": "tempVar17",
                "uVar18": "tempVar18",
                "uVar19": "tempVar19",
                "bVar20": "tempByte2",
                "local_38": "sectionSize",
                "local_30": "sectionData"
            },
            "code": "\nvoid parseAndReverseSection_00116110(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined tempByte;\n  undefined8 tempVar2;\n  long tempVar3;\n  int tempVar4;\n  int tempVar5;\n  char tempChar;\n  undefined8 tempVar7;\n  undefined8 *bufferPtr;\n  long tempVar8;\n  ulong tempVar9;\n  int tempVar10;\n  ulong tempVar11;\n  undefined *tempPtr12;\n  long tempVar13;\n  undefined8 *tempPtr14;\n  undefined8 *tempPtr15;\n  void *tempVoidPtr16;\n  ulong tempVar17;\n  ulong tempVar18;\n  ulong tempVar19;\n  byte tempByte2;\n  ulong sectionSize;\n  void *sectionData;\n  \n  tempByte2 = 0;\n  tempChar = FUN_00115f50(param1,param2,1);\n  if (tempChar != '\\0') {\n    return;\n  }\n  sectionSize = param2[8];\n  tempVar3 = param2[0xc];\n  if (((*(byte *)((long)param2 + 0x25) & 1) == 0) || ((*(byte *)(tempVar3 + 0x25) & 1) == 0)) {\n    tempVar13 = FUN_00114190(*param2,0,0x80);\n    if (tempVar13 == 0) {\n      return;\n    }\n    if ((*(byte *)(tempVar13 + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPtr = (undefined8 *)xmalloc(sectionSize);\n    tempPtr15 = bufferPtr;\n    if (7 < sectionSize) {\n      for (tempVar18 = sectionSize >> 3; tempVar18 != 0; tempVar18 = tempVar18 - 1) {\n        *tempPtr15 = 0;\n        tempPtr15 = tempPtr15 + (ulong)tempByte2 * -2 + 1;\n      }\n    }\n    tempPtr14 = tempPtr15;\n    if ((sectionSize & 4) != 0) {\n      tempPtr14 = (undefined8 *)((long)tempPtr15 + (ulong)tempByte2 * -8 + 4);\n      *(undefined4 *)tempPtr15 = 0;\n    }\n    tempPtr15 = tempPtr14;\n    if ((sectionSize & 2) != 0) {\n      tempPtr15 = (undefined8 *)((long)tempPtr14 + (ulong)tempByte2 * -4 + 2);\n      *(undefined2 *)tempPtr14 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPtr15 = 0;\n    }\n    tempChar = bfd_set_section_contents(param3,tempVar3,bufferPtr,0);\n    if (tempChar != '\\0') {\n      free(bufferPtr);\n      return;\n    }\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,param3,tempVar3,0);\n    free(bufferPtr);\n    return;\n  }\n  sectionData = (void *)0x0;\n  tempChar = bfd_get_full_section_contents(param1,param2,&sectionData);\n  if ((tempChar == '\\0') ||\n     (tempChar = bfd_convert_section_contents(param1,param2,param3,&sectionData,&sectionSize),\n     tempVar10 = DAT_001278e8, tempChar == '\\0')) {\n    bfd_set_section_size(tempVar3,0);\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,param1,param2,0);\n    free(sectionData);\n    return;\n  }\n  tempVar4 = DAT_001264b8;\n  tempVar5 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    tempVar18 = (ulong)DAT_001278e8;\n    if (sectionSize % tempVar18 != 0) {\n      tempVar2 = *param2;\n      tempVar7 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(tempVar7,tempVar2,tempVar10);\n    }\n    tempVar10 = DAT_001278e8 / 2;\n    tempVar11 = 0;\n    while (tempVar19 = tempVar11, tempVar4 = DAT_001264b8, tempVar5 = DAT_001264bc, tempVar19 < sectionSize) {\n      tempVar11 = tempVar18 + tempVar19;\n      tempVar17 = tempVar11;\n      for (tempVar9 = 0; tempVar9 < (ulong)(long)tempVar10; tempVar9 = tempVar9 + 1) {\n        tempVar17 = tempVar17 - 1;\n        tempPtr12 = (undefined *)(tempVar19 + tempVar9 + (long)sectionData);\n        tempByte = *tempPtr12;\n        *tempPtr12 = *(undefined *)((long)sectionData + tempVar17);\n        *(undefined *)((long)sectionData + tempVar17) = tempByte;\n      }\n    }\n  }\n  DAT_001264b8 = tempVar4;\n  DAT_001264bc = tempVar5;\n  if (-1 < tempVar5) {\n    tempVar18 = (ulong)DAT_00127a1c;\n    tempVar10 = (int)((ulong)param2[7] % tempVar18);\n    tempVar11 = ((long)tempVar5 - (long)tempVar10) + (long)sectionData;\n    if (tempVar5 < tempVar10) {\n      tempVar11 = tempVar11 + tempVar18;\n    }\n    tempVar13 = (sectionSize + (long)sectionData) - tempVar11;\n    tempVoidPtr16 = sectionData;\n    for (; tempVar11 < sectionSize + (long)sectionData; tempVar11 = tempVar11 + tempVar18) {\n      for (tempVar8 = 0; ((int)tempVar8 < tempVar4 && (tempVar8 != tempVar13)); tempVar8 = tempVar8 + 1) {\n        *(undefined *)((long)tempVoidPtr16 + tempVar8) = *(undefined *)(tempVar11 + tempVar8);\n      }\n      tempVoidPtr16 = (void *)((long)tempVoidPtr16 + tempVar8);\n      tempVar13 = tempVar13 - tempVar18;\n    }\n    sectionSize = ((((tempVar18 - 1) + sectionSize) - (long)tempVar5) / tempVar18) * (long)tempVar4;\n    tempVar18 = *(ulong *)(tempVar3 + 0x38) / tempVar18;\n    *(ulong *)(tempVar3 + 0x38) = tempVar18;\n    if (tempVar5 < tempVar10) {\n      *(ulong *)(tempVar3 + 0x38) = tempVar18 + 1;\n      tempChar = bfd_set_section_contents(param3,tempVar3,sectionData,0,sectionSize);\n      if (tempChar == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  tempChar = bfd_set_section_contents(param3,tempVar3,sectionData,0,sectionSize);\n  if (tempChar == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "FUN_00114190",
                "FUN_001126c0",
                "bfd_get_full_section_contents",
                "xmalloc",
                "bfd_set_section_size",
                "free",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00115f50",
                "FUN_00108466"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_and_reverse_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "stdout",
                "_stderr": "stderr",
                "fprintf": "printToStandardError",
                "fflush": "flushStandardOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(stdout);\n  if (errorCode != 0) {\n    fprintf(stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_0010bf20",
                "param_1": "blockPointer",
                "param_2": "newBlockPointer",
                "param_3": "unusedParam",
                "param_4": "param4",
                "lVar1": "currentBlock",
                "uVar2": "localizedString",
                "pcVar3": "errorMessage",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] endBlock_0010bf20(long blockPointer,undefined8 newBlockPointer,undefined8 unusedParam,undefined8 param4)\n\n{\n  long currentBlock;\n  undefined8 localizedString;\n  char *errorMessage;\n  undefined result [16];\n  \n  if ((*(long *)(blockPointer + 8) == 0) || (currentBlock = *(long *)(blockPointer + 0x20), currentBlock == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newBlockPointer;\n      localizedString = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(blockPointer + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  localizedString = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",localizedString);\n  localizedString = 0;\nLAB_0010bf84:\n  result._8_8_ = param4;\n  result._0_8_ = localizedString;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "decompile_and_improve_0010c95e",
                "param_1": "param_array",
                "param_2": "byte_array",
                "param_3": "long_array",
                "bVar1": "byte_var1",
                "bVar2": "byte_var2",
                "pbVar3": "byte_ptr3",
                "bVar4": "bool_var1",
                "bVar5": "bool_var2",
                "bVar6": "bool_var3",
                "cVar7": "char_var",
                "uVar8": "uint_var",
                "pbVar9": "byte_ptr9",
                "lVar10": "long_var1",
                "uVar11": "uint_var1",
                "pcVar12": "char_ptr1",
                "sVar13": "size_var1",
                "uVar14": "ulong_var1",
                "__ptr": "ptr",
                "lVar15": "long_var2",
                "puVar16": "ulong_ptr1",
                "puVar17": "void_ptr1",
                "ppcVar18": "char_ptr_ptr1",
                "pcVar19": "char_ptr2",
                "local_49": "undefined_var1",
                "local_48": "ulong_var2",
                "local_40": "char_ptr_array1"
            },
            "code": "\nundefined8 decompile_and_improve_0010c95e(undefined8 *param_array,byte **byte_array,long *long_array)\n\n{\n  byte byte_var1;\n  byte byte_var2;\n  byte *byte_ptr3;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_var;\n  uint uint_var;\n  byte *byte_ptr9;\n  long long_var1;\n  undefined8 uint_var1;\n  char *char_ptr1;\n  size_t size_var1;\n  ulong ulong_var1;\n  void *ptr;\n  long long_var2;\n  ulong *ulong_ptr1;\n  undefined *void_ptr1;\n  char **char_ptr_ptr1;\n  char *char_ptr2;\n  byte *pbyte_var20;\n  undefined undefined_var1;\n  ulong ulong_var2;\n  char *char_ptr_array1 [2];\n  \n  while( true ) {\n    pbyte_var20 = *byte_array;\n    byte_var1 = *pbyte_var20;\n    if ('T' < (char)byte_var1) break;\n    if ((char)byte_var1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_var1) {\n    case 0x41:\n      long_var2 = 0;\n      byte_ptr3 = pbyte_var20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_array = pbyte_var20 + 1;\n      char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (long_array == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = FUN_00113b71(*long_array);\n      *long_array = long_var2;\n      return 1;\n    case 0x46:\n      *byte_array = pbyte_var20 + 1;\n      if (long_array == (long *)0x0) {\n        ulong_ptr1 = (ulong *)0x0;\n        char_ptr_ptr1 = (char **)0x0;\n      }\n      else {\n        ulong_ptr1 = &ulong_var2;\n        char_ptr_ptr1 = char_ptr_array1;\n      }\n      char_var = FUN_0010d882(param_array,byte_array,char_ptr_ptr1,ulong_ptr1);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (long_array == (long *)0x0) {\n          return 1;\n        }\n        long_var2 = FUN_00113ce0(*long_array,char_ptr_array1[0],ulong_var2 & 0xff);\n        *long_array = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_array = pbyte_var20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_var1 = 0;\n      char_ptr_array1[0] = (char *)0x0;\n      ulong_var2 = 0;\n      *byte_array = pbyte_var20 + 1;\n      if (((&_sch_istable)[(ulong)pbyte_var20[1] * 2] & 4) == 0) {\n        if (pbyte_var20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        char_ptr_ptr1 = char_ptr_array1;\n        if (long_array == (long *)0x0) {\n          char_ptr_ptr1 = (char **)0x0;\n        }\n        char_var = FUN_0010d559(param_array,byte_array,char_ptr_ptr1);\n        if (char_var == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uint_var = FUN_00108e76(byte_array);\n        byte_ptr3 = *byte_array;\n        size_var1 = strlen((char *)byte_ptr3);\n        if (size_var1 < uint_var) goto switchD_0010cdf9_caseD_60;\n        *byte_array = byte_ptr3 + uint_var;\n        if ((long_array != (long *)0x0) &&\n           (char_ptr_array1[0] = (char *)FUN_0010afd5(*param_array,param_array[1],byte_ptr3,uint_var,9),\n           char_ptr_array1[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byte_var2 = **byte_array;\n      if (byte_var1 == 0x4d) {\n        if ((byte_var2 == 0x43) || (byte_var2 == 0x56)) {\n          *byte_array = *byte_array + 1;\n        }\n        if (**byte_array != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_array = *byte_array + 1;\n        if (long_array == (long *)0x0) {\n          void_ptr1 = (undefined *)0x0;\n          ulong_ptr1 = (ulong *)0x0;\n        }\n        else {\n          void_ptr1 = &undefined_var1;\n          ulong_ptr1 = &ulong_var2;\n        }\n        char_var = FUN_0010d882(param_array,byte_array,ulong_ptr1,void_ptr1);\n        if (char_var == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n        char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (long_array == (long *)0x0) {\n          return 1;\n        }\n        if (byte_var1 != 0x4d) {\n          long_var2 = FUN_00113bfa(char_ptr_array1[0],*long_array);\n          *long_array = long_var2;\n          return 1;\n        }\n        long_var2 = FUN_00113b98(*long_array,char_ptr_array1[0],ulong_var2,undefined_var1);\n        *long_array = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uint_var1 = FUN_0010d559(param_array,byte_array,long_array);\n      return uint_var1;\n    case 0x52:\n      *byte_array = pbyte_var20 + 1;\n      char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (long_array == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = FUN_00113cb9(*long_array);\n      *long_array = long_var2;\n      return 1;\n    case 0x54:\n      *byte_array = pbyte_var20 + 1;\n      char_var = FUN_00108ea1(byte_array,&ulong_var2);\n      if (char_var != '\\0') {\n        if ((uint)ulong_var2 < *(uint *)(param_array + 5)) {\n          char_ptr_array1[0] = *(char **)((ulong_var2 & 0xffffffff) * 0x10 + param_array[4]);\n          char_var = decompile_and_improve_0010c95e(param_array,char_ptr_array1,long_array);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_var1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_array = pbyte_var20 + 1;\n    char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n    if (char_var == '\\0') {\n      return 0;\n    }\n    if (long_array == (long *)0x0) {\n      return 1;\n    }\n    long_var2 = FUN_00113d3a(*long_array);\n    *long_array = long_var2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_var3 = false;\n  bool_var1 = false;\n  char_var = '\\0';\n  bool_var2 = false;\n  do {\n    byte_ptr3 = *byte_array;\n    byte_var1 = *byte_ptr3;\n    if (byte_var1 == 0x55) {\n      char_var = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_var1) {\n      if (byte_var1 == 0x56) {\n        bool_var3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_var1) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_var1 < '_') goto LAB_0010cdfb;\n      switch(byte_var1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (long_array == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_array = byte_ptr3 + 1;\n          return 1;\n        }\n        long_var2 = FUN_0010914e(*param_array,&DAT_00120436);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00112904(6,4);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((char_var == '\\0') && (char_ptr2 = \"char\", bool_var1)) {\n          char_ptr2 = \"signed char\";\n        }\n        long_var2 = FUN_0010914e(*param_array,char_ptr2);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113dfe(1,char_var);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = FUN_0010914e(*param_array,\"float\");\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113df2(4);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_ptr1 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_ptr1 = \"long int\";\nLAB_0010ced2:\n        if (char_var == '\\0') {\n          char_ptr2 = char_ptr1;\n        }\n        long_var2 = FUN_0010914e(*param_array,char_ptr2);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113dfe(4,char_var);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_var2 = FUN_0010914e(*param_array,char_ptr2);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113df2(8);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (char_var == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        long_var2 = FUN_0010914e(*param_array,char_ptr2);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113dfe(2,char_var);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        char_ptr_ptr1 = char_ptr_array1;\n        if (long_array == (long *)0x0) {\n          char_ptr_ptr1 = (char **)0x0;\n        }\n        char_var = FUN_0010d21c(param_array,byte_array,char_ptr_ptr1);\n        if (char_var == '\\0') {\n          return 0;\n        }\n        if (long_array == (long *)0x0) {\n          return 1;\n        }\n        size_var1 = strlen(char_ptr_array1[0]);\n        long_var2 = FUN_0010afd5(*param_array,param_array[1],char_ptr_array1[0],size_var1 & 0xffffffff,9);\n        *long_array = long_var2;\n        free(char_ptr_array1[0]);\n        long_var2 = *long_array;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = FUN_0010914e(*param_array,&DAT_00120495);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113e17();\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = FUN_0010914e(*param_array,\"__wchar_t\");\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113dfe(2,1);\n          *long_array = long_var2;\n          *byte_array = *byte_array + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (long_array == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (char_var == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        long_var2 = FUN_0010914e(*param_array,char_ptr2);\n        *long_array = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = FUN_00113dfe(8,char_var);\n          *long_array = long_var2;\n        }\n      }\n      *byte_array = *byte_array + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_var1 == 0x43) {\n      bool_var2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_var1 != 0x53) goto LAB_0010cdc5;\n    bool_var1 = true;\nLAB_0010cd84:\n    *byte_array = byte_ptr3 + 1;\n  } while( true );\nLAB_0010ca26:\n  byte_ptr9 = byte_ptr3 + 1;\n  *byte_array = byte_ptr9;\n  byte_var1 = *byte_ptr9;\n  if (byte_var1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_var1 == 0x5f) {\n    *byte_array = byte_ptr3 + 2;\n    char_var = decompile_and_improve_0010c95e(param_array,byte_array,long_array);\n    if (char_var == '\\0') {\n      return 0;\n    }\n    if (long_array == (long *)0x0) {\n      return 1;\n    }\n    long_var1 = FUN_0010914e(*param_array,\"int\");\n    if (long_var1 == 0) {\n      long_var1 = FUN_00113dfe(4,0);\n    }\n    long_var2 = FUN_00113c43(*long_array,long_var1,0,long_var2,0);\n    *long_array = long_var2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_var1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  long_var2 = long_var2 * 10 + (long)((char)byte_var1 + -0x30);\n  byte_ptr3 = byte_ptr9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_var1 < ':') {\n    if ((char)byte_var1 < '0') {\n      if (byte_var1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pbyte_var20);\n      if (long_array == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_var1 != 0x47) || (*byte_array = byte_ptr3 + 1, ((&_sch_istable)[(ulong)byte_ptr3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbyte_var20 = *byte_array;\n  uint_var = FUN_00108e76(byte_array);\n  byte_ptr3 = *byte_array;\n  size_var1 = strlen((char *)byte_ptr3);\n  ulong_var1 = (ulong)uint_var;\n  if (ulong_var1 <= size_var1) {\n    *byte_array = byte_ptr3 + ulong_var1;\n    if (long_array == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)FUN_00109a0b(byte_ptr3,ulong_var1);\n    long_var2 = FUN_0010914e(*param_array,ptr);\n    *long_array = long_var2;\n    free(ptr);\n    if (*long_array == 0) {\n      long_var2 = FUN_0010afd5(*param_array,param_array[1],byte_ptr3,(int)*byte_array - (int)byte_ptr3,0);\n      *long_array = long_var2;\njoined_r0x0010d1d8:\n      if (long_var2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool_var2) {\n      long_var2 = FUN_00113b71(*long_array);\n      *long_array = long_var2;\n    }\n    if (bool_var3) {\n      long_var2 = FUN_00113b4a(*long_array);\n      *long_array = long_var2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pbyte_var20);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010d21c",
                "strlen",
                "FUN_00109a0b",
                "FUN_00112904",
                "free",
                "FUN_00113bfa",
                "FUN_0010911f",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00108ea1",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010c95e",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_00113e5e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f30",
                "FUN_0010554f",
                "FUN_00119ed0",
                "fclose",
                "fopen",
                "FUN_00114190",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_0010551d",
                "free",
                "bfd_set_format",
                "bfd_get_section_by_name",
                "FUN_001163d0",
                "FUN_00105828",
                "bfd_set_section_size",
                "FUN_00115530",
                "bfd_get_arch",
                "bfd_make_section_with_flags",
                "__errno_location",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "bfd_malloc_and_get_section"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "creationTime",
                "uStack_2c": "changeTime",
                "local_28": "backupAccessTime",
                "uStack_24": "backupModificationTime",
                "uStack_20": "backupCreationTime",
                "uStack_1c": "backupChangeTime"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 creationTime;\n  undefined4 changeTime;\n  undefined4 backupAccessTime;\n  undefined4 backupModificationTime;\n  undefined4 backupCreationTime;\n  undefined4 backupChangeTime;\n  \n  backupAccessTime = *(undefined4 *)(fileInfo + 0x58);\n  backupModificationTime = *(undefined4 *)(fileInfo + 0x5c);\n  backupCreationTime = *(undefined4 *)(fileInfo + 0x60);\n  backupChangeTime = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  creationTime = *(undefined4 *)(fileInfo + 0x50);\n  changeTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorMessage = strerror(*errnoPtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_bfd_error_message_0011a110",
                "param_1": "errorType",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printBFDErrorMessage_0011a110(long errorType)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorType,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hashTable",
                "param_2": "undefinedParam",
                "param_3": "intParam",
                "param_4": "paramValue",
                "param_5": "inputString",
                "lVar1": "tempLong1",
                "uVar2": "error",
                "lVar3": "tempLong2",
                "uVar4": "errorMessage",
                "uVar5": "i18nMessage",
                "sVar6": "stringLength",
                "lVar7": "hashValue",
                "local_44": "localVar1",
                "uStack_40": "localVar2",
                "uStack_3f": "localVar3",
                "uStack_3e": "localVar4",
                "local_3c": "localVars"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *hashTable,undefined undefinedParam,int intParam,undefined8 paramValue,char *inputString)\n\n{\n  long tempLong1;\n  undefined4 error;\n  long tempLong2;\n  undefined8 errorMessage;\n  undefined8 i18nMessage;\n  size_t stringLength;\n  long hashValue;\n  undefined4 localVar1;\n  undefined localVar2;\n  undefined localVar3;\n  undefined2 localVar4;\n  undefined4 localVars [3];\n  \n  if (inputString == (char *)0x0) {\n    hashValue = 0;\n  }\n  else {\n    tempLong2 = bfd_hash_lookup(hashTable + 7,inputString,1,1);\n    if (tempLong2 == 0) {\n      error = bfd_get_error();\n      errorMessage = bfd_errmsg(error);\n      i18nMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(i18nMessage,errorMessage);\n      return 0;\n    }\n    hashValue = *(long *)(tempLong2 + 0x20);\n    if (hashValue == -1) {\n      hashValue = hashTable[6];\n      tempLong1 = hashTable[5];\n      *(long *)(tempLong2 + 0x20) = hashValue;\n      if (tempLong1 == 0) {\n        hashTable[4] = tempLong2;\n      }\n      else {\n        *(long *)(tempLong1 + 0x18) = tempLong2;\n      }\n      hashTable[5] = tempLong2;\n      stringLength = strlen(inputString);\n      hashTable[6] = hashValue + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(hashValue,&localVar1);\n  localVar3 = 0;\n  localVar2 = undefinedParam;\n  (**(code **)(*(long *)(*hashTable + 8) + 0x68))((long)intParam,&localVar4);\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(paramValue,localVars);\n  if ((ulong)hashTable[3] < hashTable[2] + 0xcU) {\n    hashTable[3] = hashTable[3] * 2;\n    hashValue = xrealloc(hashTable[1]);\n    hashTable[1] = hashValue;\n  }\n  hashValue = hashTable[2];\n  tempLong2 = hashTable[1];\n  *(ulong *)(tempLong2 + hashValue) = CONCAT26(localVar4,CONCAT15(localVar3,CONCAT14(localVar2,localVar1)));\n  *(undefined4 *)(tempLong2 + 8 + hashValue) = localVars[0];\n  hashTable[2] = hashTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)hashValue >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "xrealloc",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e918",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_4": "sectionFlagValue",
                "iVar1": "result",
                "uVar2": "errorMessage",
                "pcVar3": "commaPosition",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "flagIndex",
                "uVar7": "parsedFlags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param_2,undefined8 param_3,undefined8 sectionFlagValue)\n\n{\n  int result;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *nextFlag;\n  size_t flagLength;\n  int flagIndex;\n  uint parsedFlags;\n  undefined resultStruct [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPosition = strchr(sectionFlags,0x2c);\n    if (commaPosition == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      flagIndex = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPosition + 1;\n      flagIndex = (int)commaPosition - (int)sectionFlags;\n    }\n    flagLength = (size_t)flagIndex;\n    result = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (result == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (result == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (result == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (result == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (result == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (result == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (result == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (result == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (result == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (result == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (result == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (result == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (result != 0) {\n                              commaPosition = (char *)xmalloc((long)(flagIndex + 1));\n                              strncpy(commaPosition,sectionFlags,flagLength);\n                              commaPosition[flagLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorMessage,commaPosition);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = parsedFlags;\n  resultStruct._8_8_ = sectionFlagValue;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_formatted_string_001125fa",
                "param_1": "inputArray",
                "uVar1": "totalLength",
                "ppcVar2": "stringPtr",
                "sVar3": "stringLength1",
                "sVar4": "stringLength2",
                "__s": "formattedString"
            },
            "code": "\nchar * generateFormattedString_001125fa(char **inputArray)\n\n{\n  ulong totalLength;\n  char **stringPtr;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *formattedString;\n  \n  if (inputArray == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  stringPtr = (char **)inputArray[0x1d];\n  formattedString = *inputArray;\n  if ((stringPtr != (char **)0x0) && ((*(byte *)((long)stringPtr + 0x49) & 0x10) == 0)) {\n    stringLength1 = strlen(*stringPtr);\n    stringLength2 = strlen(formattedString);\n    totalLength = stringLength1 + 3 + stringLength2;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)inputArray[0x1d],*inputArray);\n    formattedString = DAT_00127a30;\n  }\n  return formattedString;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "pointerToData",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *pointerToData;\n  undefined4 *nextPointer;\n  \n  pointerToData = (undefined4 *)&DAT_00127720;\n  do {\n    nextPointer = pointerToData + 6;\n    free(*(void **)(pointerToData + 4));\n    *(undefined8 *)(pointerToData + 4) = 0;\n    pointerToData = nextPointer;\n  } while (nextPointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_00104020"
            },
            "code": "\nvoid executeFunction_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_list",
                "param_2": "filename",
                "iVar1": "cmp_result",
                "uVar2": "result",
                "puVar3": "current_filename_node",
                "puVar4": "previous",
                "lVar5": "count",
                "puVar6": "source_ptr",
                "pcVar7": "current_filename",
                "puVar8": "prev",
                "bVar9": "byte_check"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_list,char *filename)\n\n{\n  int cmp_result;\n  undefined8 result;\n  undefined8 *current_filename_node;\n  undefined8 *previous;\n  long count;\n  undefined8 *source_ptr;\n  char *current_filename;\n  undefined8 *prev;\n  byte byte_check;\n  \n  byte_check = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_list + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_filename_node = *(undefined8 **)(*(long *)(source_list + 8) + 8); current_filename_node != (undefined8 *)0x0;\n        current_filename_node = (undefined8 *)*current_filename_node) {\n      cmp_result = filename_cmp(current_filename_node[1],current_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    current_filename_node = (undefined8 *)xmalloc(0x18);\n    source_ptr = *(undefined8 **)(source_list + 0x10);\n    prev = current_filename_node;\n    for (count = 6; count != 0; count = count + -1) {\n      *(undefined4 *)prev = 0;\n      prev = (undefined8 *)((long)prev + (ulong)byte_check * -8 + 4);\n    }\n    current_filename_node[1] = current_filename;\n    prev = (undefined8 *)*source_ptr;\n    while (previous = prev, previous != (undefined8 *)0x0) {\n      source_ptr = previous;\n      prev = (undefined8 *)*previous;\n    }\n    *source_ptr = current_filename_node;\nLAB_00108fad:\n    *(undefined8 **)(source_list + 0x10) = current_filename_node;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "find_matching_pattern_00114190",
                "param_1": "input",
                "param_2": "exactMatch",
                "param_3": "flags",
                "uVar1": "flagCheck",
                "plVar2": "pattern",
                "pplVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "errorText",
                "pplVar6": "matchingPattern",
                "pplVar7": "currentPattern",
                "pplVar8": "nextPattern"
            },
            "code": "\nlong ** findMatchingPattern_00114190(long *input,char exactMatch,uint flags)\n\n{\n  uint flagCheck;\n  long *pattern;\n  long **result;\n  int comparisonResult;\n  undefined8 errorText;\n  long **matchingPattern;\n  long **currentPattern;\n  long **nextPattern;\n  \n  currentPattern = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (exactMatch == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (exactMatch == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      matchingPattern = (long **)*currentPattern;\n      if (matchingPattern == (long **)0x0) {\n        return (long **)0x0;\n      }\n      currentPattern = (long **)0x0;\n    }\n    else {\n      pattern = DAT_001278e0[1];\n      if (*(char *)pattern == '!') {\n        comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)input,0);\n        matchingPattern = currentPattern;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)pattern,(char *)input,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      matchingPattern = (long **)*currentPattern;\n      if (matchingPattern == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)matchingPattern + 0x14)) != 0) {\n      pattern = matchingPattern[1];\n      if (*(char *)pattern == '!') {\n        comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)input,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(matchingPattern + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)pattern,(char *)input,0);\n        if ((currentPattern == (long **)0x0) && (comparisonResult == 0)) {\n          nextPattern = (long **)*matchingPattern;\n          currentPattern = matchingPattern;\n          if (nextPattern == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextPattern = (long **)*matchingPattern;\n    matchingPattern = currentPattern;\n    if (nextPattern != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_001278e0[1],(char *)input);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      flagCheck = *(uint *)((long)currentPattern + 0x14);\n      if ((((flagCheck & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flagCheck & 2) != 0)))) {\n        errorText = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorText,input);\n      }\n      if ((((flagCheck & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        errorText = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorText,input);\n      }\n      if ((((flagCheck & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)currentPattern + 0x14) = flagCheck | flags;\n        return currentPattern;\n      }\n      errorText = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorText,input);\n    }\n    currentPattern = (long **)*currentPattern;\n    if (currentPattern == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)currentPattern[1],(char *)input);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextPattern = (long **)*currentPattern;\n    matchingPattern = (long **)0x0;\n    if (nextPattern == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      currentPattern = matchingPattern;\n      if (exactMatch == '\\0') {\n        while (matchingPattern = nextPattern, result = currentPattern, nextPattern = matchingPattern,\n              (flags & *(uint *)((long)matchingPattern + 0x14)) != 0) {\n          pattern = matchingPattern[1];\n          if (*(char *)pattern == '!') {\n            comparisonResult = fnmatch((char *)((long)pattern + 1),(char *)input,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextPattern = (long **)*matchingPattern;\n            if ((long **)*matchingPattern == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)pattern,(char *)input,0);\n            if ((currentPattern == (long **)0x0) && (comparisonResult == 0)) {\n              currentPattern = matchingPattern;\n              nextPattern = (long **)*matchingPattern;\n              if ((long **)*matchingPattern == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextPattern = (long **)*matchingPattern;\n              if ((long **)*matchingPattern == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextPattern[1],(char *)input);\n        result = matchingPattern;\n        currentPattern = nextPattern;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      matchingPattern = result;\n      nextPattern = (long **)*nextPattern;\n      currentPattern = matchingPattern;\n    } while (nextPattern != (long **)0x0);\nLAB_001142a1:\n    if (exactMatch != '\\0') {\nLAB_001142a9:\n      matchingPattern = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(matchingPattern + 3) = (undefined  [16])0x0;\n      *(undefined *)(matchingPattern + 2) = 0;\n      *(uint *)((long)matchingPattern + 0x14) = flags;\n      matchingPattern[5] = (long *)0x0;\n      currentPattern = matchingPattern;\n      *matchingPattern = (long *)DAT_001278e0;\n      DAT_001278e0 = currentPattern;\n      matchingPattern[1] = input;\n      return matchingPattern;\n    }\n  }\nLAB_00114212:\n  if (currentPattern == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(currentPattern + 2) = 1;\n  return currentPattern;\n}\n\n",
            "called": [
                "fnmatch",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "find_matching_pattern_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_attributes_00116490",
                "param_1": "param1",
                "param_2": "attrCount",
                "param_3": "attrName",
                "param_4": "inputBuf",
                "uVar1": "retValue",
                "uVar2": "tempValue",
                "uVar3": "result",
                "bVar4": "isTrue",
                "puVar5": "attrPointer",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "tempResult",
                "in_RAX": "attrType",
                "uVar9": "tempVar1",
                "uVar10": "tempVar2",
                "uVar11": "tempVar3",
                "uVar12": "tempVar4",
                "__ptr": "buffer",
                "uVar13": "tempVar5",
                "unaff_RBX": "noteSize",
                "unaff_RBP": "rBP",
                "puVar14": "noteArray",
                "puVar15": "attrBuffer",
                "cVar16": "character",
                "puVar17": "attrPointer2",
                "puVar18": "attrBuffer2",
                "in_R11": "length2",
                "unaff_R12": "notePtr",
                "puVar19": "tempNotePtr",
                "unaff_R13": "r13",
                "__nmemb": "noteIndex",
                "unaff_R14": "ptrArray",
                "puVar20": "tempNotePtr2",
                "bVar21": "boolValue",
                "iVar22": "loopIndex",
                "unaff_retaddr": "retAddress",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "in_stack_00000020": "bufferSize",
                "in_stack_00000028": "noteArray2",
                "in_stack_00000030": "bufferPointer",
                "in_stack_00000038": "boolValue1",
                "in_stack_00000040": "boolValue2",
                "in_stack_00000048": "strArrayPointer"
            },
            "code": "\nulong extractAttributes_00116490(undefined8 param1,ulong attrCount,ulong attrName,long inputBuf)\n\n{\n  undefined8 retValue;\n  undefined8 tempValue;\n  ulong result;\n  bool isTrue;\n  ulong *attrPointer;\n  int index;\n  long length;\n  undefined8 tempResult;\n  ulong attrType;\n  ulong tempVar1;\n  ulong tempVar2;\n  ulong tempVar3;\n  ulong tempVar4;\n  undefined *buffer;\n  ulong tempVar5;\n  ulong noteSize;\n  ulong rBP;\n  ulong *noteArray;\n  undefined *attrBuffer;\n  char character;\n  undefined *attrPointer2;\n  undefined *attrBuffer2;\n  ulong length2;\n  ulong *notePtr;\n  ulong *tempNotePtr;\n  ulong r13;\n  size_t noteIndex;\n  undefined8 *ptrArray;\n  ulong *tempNotePtr2;\n  byte boolValue;\n  int loopIndex;\n  ulong retAddress;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong bufferSize;\n  ulong *noteArray2;\n  undefined *bufferPointer;\n  uint boolValue1;\n  uint boolValue2;\n  undefined8 *strArrayPointer;\n  \n  boolValue = 0;\ncode_r0x00116490:\n  length = inputBuf;\n  tempVar2 = rBP;\n  tempVar5 = r13;\n  if (attrType == 0) {\n    if (attrCount == 0x100) {\n      notePtr[7] = retAddress;\n      tempVar3 = retAddress;\nLAB_001164af:\n      tempVar1 = r13;\n      tempVar5 = r13;\n      retAddress = tempVar3;\n    }\n    else {\n      notePtr[7] = param9;\nLAB_0011669e:\n      tempVar2 = rBP;\n      tempVar1 = rBP;\n    }\nLAB_001164bb:\n    notePtr[8] = tempVar1;\n    if (*(char *)((notePtr[3] - 1) + attrName) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    tempNotePtr = notePtr + 9;\n    if (0xb < noteSize) {\n      tempVar1 = (**(code **)(ptrArray[1] + 0x40))(length);\n      *tempNotePtr = tempVar1;\n      tempVar1 = (**(code **)(ptrArray[1] + 0x40))(length + 4);\n      notePtr[10] = tempVar1;\n      attrCount = (**(code **)(ptrArray[1] + 0x40))(length + 8);\n      attrName = *tempNotePtr;\n      notePtr[0xb] = attrCount;\n      attrType = notePtr[10];\n      tempVar1 = attrName + 3 & 0xfffffffffffffffc;\n      notePtr[0xf] = tempVar1;\n      if (attrType != (attrType + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < attrCount - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      tempVar3 = tempVar1 + attrType + 0xc;\n      if (noteSize < tempVar3) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attrName < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      notePtr[0xc] = length + 0xc;\n      length2 = length + 0xc + tempVar1;\n      notePtr[0xd] = length2;\n      noteSize = noteSize + (-0xc - (tempVar1 + attrType));\n      inputBuf = length + tempVar3;\n      rBP = tempVar2;\n      notePtr = tempNotePtr;\n      r13 = tempVar5;\n      if (attrName != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            tempVar2 = extractAttributes_00116490();\n            return tempVar2;\n          }\n        }\n        else if ((((4 < attrName) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            tempVar2 = extractAttributes_00116490();\n            return tempVar2;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            tempVar2 = extractAttributes_00116490();\n            return tempVar2;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (noteSize != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((boolValue1 | boolValue2 | param8) == 0) {\n      retValue = *ptrArray;\n      tempValue = *strArrayPointer;\n      tempResult = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(tempResult,retValue,tempValue);\nLAB_0011671b:\n      noteIndex = ((long)tempNotePtr - (long)noteArray2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteArray2,noteIndex,0x48,FUN_0011a1b0);\n      for (noteArray = noteArray2; noteArray < tempNotePtr; noteArray = noteArray + 9) {\n        tempVar2 = noteArray[2];\n        if (tempVar2 != 0) {\n          tempVar5 = noteArray[7];\n          tempVar1 = noteArray[8];\n          tempNotePtr2 = noteArray;\n          loopIndex = 0;\n          if (tempVar5 == tempVar1) {\n            noteArray[2] = 0;\n          }\n          else {\n            do {\n              do {\n                attrPointer = tempNotePtr2;\n                tempNotePtr2 = attrPointer + -9;\n                if (tempNotePtr2 < noteArray2) goto LAB_001167f5;\n                tempVar3 = attrPointer[-7];\n              } while (tempVar3 == 0);\n              if ((*tempNotePtr2 != *noteArray) ||\n                 (index = memcmp((void *)attrPointer[-6],(void *)noteArray[3],*noteArray), index != 0))\n              break;\n              result = attrPointer[-2];\n              tempVar4 = attrPointer[-1];\n              if (tempVar5 == result) {\n                if (tempVar1 == tempVar4) {\n                  noteArray[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (tempVar1 <= tempVar4) {\n                  noteArray[2] = 0;\n                  break;\n                }\n                if (tempVar4 < tempVar5) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < tempVar4) ||\n                     (tempVar5 <= (tempVar4 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((tempVar2 == 0x101) == (tempVar3 == 0x101)) {\n                  if (tempVar4 <= tempVar1) {\n                    tempVar4 = tempVar1;\n                  }\n                  if (result < tempVar5) {\n                    tempVar5 = result;\n                  }\n                  attrPointer[-1] = tempVar4;\n                  attrPointer[-2] = tempVar5;\n                  noteArray[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (result <= tempVar5) goto LAB_001167a6;\n                if (tempVar4 < tempVar5) goto LAB_0010852c;\n                if (tempVar1 < tempVar5) {\n                  if ((0xfffffffffffffff0 < tempVar1) || (result <= (tempVar1 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (tempVar1 != tempVar4) goto LAB_001167b8;\n              }\nFUN_00116852:\n              isTrue = loopIndex < 0x11;\n              loopIndex = loopIndex + 1;\n            } while (isTrue);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteArray2,noteIndex,0x48,FUN_0011a250);\n      buffer = (undefined *)xmalloc(bufferSize * 2);\n      param7 = 0;\n      param9 = 0;\n      attrBuffer2 = buffer;\n      for (noteArray = noteArray2; noteArray < tempNotePtr; noteArray = noteArray + 9) {\n        if (noteArray[2] != 0) {\n          attrPointer2 = attrBuffer2 + 4;\n          attrBuffer = attrBuffer2 + 0xc;\n          if ((noteArray[7] == param9) && (noteArray[8] == param7)) {\n            (**(code **)(ptrArray[1] + 0x50))(*noteArray,attrBuffer2);\n            (**(code **)(ptrArray[1] + 0x50))(0,attrPointer2);\n            (**(code **)(ptrArray[1] + 0x50))(noteArray[2],attrBuffer2 + 8);\n            tempVar5 = noteArray[6];\n            tempVar2 = *noteArray;\n            attrBuffer2 = (undefined *)noteArray[3];\n            attrPointer2 = attrBuffer;\n            for (tempVar1 = tempVar2; tempVar1 != 0; tempVar1 = tempVar1 - 1) {\n              *attrPointer2 = *attrBuffer2;\n              attrBuffer2 = attrBuffer2 + (ulong)boolValue * -2 + 1;\n              attrPointer2 = attrPointer2 + (ulong)boolValue * -2 + 1;\n            }\n            if (tempVar2 < tempVar5) {\n              for (length = tempVar5 - tempVar2; length != 0; length = length + -1) {\n                *attrPointer2 = 0;\n                attrPointer2 = attrPointer2 + (ulong)boolValue * -2 + 1;\n              }\n            }\n            attrBuffer2 = attrBuffer + tempVar5;\n          }\n          else {\n            (**(code **)(ptrArray[1] + 0x50))();\n            if (*(int *)(ptrArray[1] + 8) == 5) {\n              character = (*(char *)(ptrArray[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              character = '\\b';\n            }\n            (**(code **)(ptrArray[1] + 0x50))(character,attrPointer2);\n            (**(code **)(ptrArray[1] + 0x50))(noteArray[2],attrBuffer2 + 8);\n            tempVar2 = *noteArray;\n            attrBuffer2 = (undefined *)noteArray[3];\n            attrPointer2 = attrBuffer;\n            for (tempVar5 = tempVar2; tempVar5 != 0; tempVar5 = tempVar5 - 1) {\n              *attrPointer2 = *attrBuffer2;\n              attrBuffer2 = attrBuffer2 + (ulong)boolValue * -2 + 1;\n              attrPointer2 = attrPointer2 + (ulong)boolValue * -2 + 1;\n            }\n            tempVar5 = noteArray[6];\n            if (tempVar2 < tempVar5) {\n              for (length = tempVar5 - tempVar2; length != 0; length = length + -1) {\n                *attrPointer2 = 0;\n                attrPointer2 = attrPointer2 + (ulong)boolValue * -2 + 1;\n              }\n            }\n            length = ptrArray[1];\n            attrBuffer = attrBuffer + tempVar5;\n            attrBuffer2 = attrBuffer + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(ptrArray[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(noteArray[7],attrBuffer);\n              (**(code **)(ptrArray[1] + 0x38))(noteArray[8],attrBuffer2);\n              attrBuffer2 = attrBuffer + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(noteArray[7],attrBuffer);\n              (**(code **)(ptrArray[1] + 0x50))(noteArray[8],attrBuffer + 4);\n            }\n            param9 = noteArray[7];\n            param7 = noteArray[8];\n          }\n        }\n      }\n      tempVar5 = (long)attrBuffer2 - (long)buffer;\n      tempVar2 = tempVar5;\n      attrBuffer2 = buffer;\n      if (tempVar5 < bufferSize) {\n        for (; bufferSize = tempVar5, tempVar2 != 0; tempVar2 = tempVar2 - 1) {\n          *bufferPointer = *attrBuffer2;\n          attrBuffer2 = attrBuffer2 + (ulong)boolValue * -2 + 1;\n          bufferPointer = bufferPointer + (ulong)boolValue * -2 + 1;\n        }\n      }\n      free(buffer);\nLAB_001166f8:\n      free(noteArray2);\n      return bufferSize;\n    }\n    if (((boolValue2 | param8) == 0) || (boolValue1 == 0)) {\n      if (boolValue2 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (attrType == 0x10) {\n      tempVar3 = (**(code **)(ptrArray[1] + 0x28))(length2);\n      tempVar1 = (**(code **)(ptrArray[1] + 0x28))(notePtr[4] + 8);\n      if (tempVar1 < tempVar3) {\n        tempVar3 = tempVar1;\n      }\nLAB_00116631:\n      if (notePtr[2] == 0x100) {\n        if (tempVar3 == 0) {\n          tempVar3 = retAddress;\n        }\n        attrName = *notePtr;\n        notePtr[7] = tempVar3;\n        tempVar5 = tempVar1;\n        retAddress = tempVar3;\n        if (tempVar1 == 0) goto LAB_001164af;\n      }\n      else {\n        if (tempVar3 == 0) {\n          tempVar3 = param9;\n        }\n        attrName = *notePtr;\n        notePtr[7] = tempVar3;\n        tempVar2 = tempVar1;\n        param9 = tempVar3;\n        if (tempVar1 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (attrType < 0x11) {\n      if (attrType == 4) {\n        tempVar3 = (**(code **)(ptrArray[1] + 0x40))(length2);\n        tempVar1 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (attrType == 8) {\n        tempVar2 = FUN_001086af();\n        return tempVar2;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,ptrArray,strArrayPointer,length);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "extract_attributes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "targetMessage",
                "__ptr": "targetList",
                "plVar3": "currentPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *targetMessage;\n  long *targetList;\n  long *currentPtr;\n  \n  if (target == 0) {\n    targetMessage = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,targetMessage);\n  }\n  else {\n    targetMessage = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,targetMessage,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentPtr = targetList;\n  while( true ) {\n    currentTarget = *currentPtr;\n    currentPtr = currentPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "free",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_ptr",
                "param_2": "new_param_1",
                "param_3": "new_param_2",
                "param_4": "new_param_3",
                "lVar1": "block_ptr",
                "uVar2": "message",
                "pcVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_ptr,undefined8 new_param_1,undefined8 new_param_2,undefined8 new_param_3)\n\n{\n  long block_ptr;\n  undefined8 message;\n  char *error_message;\n  undefined result [16];\n  \n  if (((*(long *)(function_ptr + 8) == 0) || (block_ptr = *(long *)(function_ptr + 0x20), block_ptr == 0)) ||\n     (*(long *)(function_ptr + 0x18) == 0)) {\n    error_message = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(block_ptr + 8) == 0) {\n      *(undefined8 *)(block_ptr + 0x20) = new_param_1;\n      message = CONCAT71((int7)((ulong)block_ptr >> 8),1);\n      *(undefined (*) [16])(function_ptr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_message = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",message);\n  message = 0;\nLAB_0010be86:\n  result._8_8_ = new_param_3;\n  result._0_8_ = message;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "numBits",
                "param_2": "param2",
                "param_3": "data",
                "param_4": "param4",
                "puVar1": "dataStructure",
                "lVar2": "count",
                "puVar3": "currentPosition",
                "bVar4": "bitValue",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDataStructure_00113da9(byte numBits,undefined8 param2,undefined8 data,undefined8 param4)\n\n{\n  undefined8 *dataStructure;\n  long count;\n  undefined8 *currentPosition;\n  byte bitValue;\n  undefined result [16];\n  \n  bitValue = 0;\n  result._0_8_ = FUN_00112904(8 - (uint)numBits);\n  if (result._0_8_ != 0) {\n    dataStructure = (undefined8 *)xmalloc(0x28);\n    currentPosition = dataStructure + 1;\n    for (count = 8; count != 0; count = count + -1) {\n      *(undefined4 *)currentPosition = 0;\n      currentPosition = (undefined8 *)((long)currentPosition + (ulong)bitValue * -8 + 4);\n    }\n    *dataStructure = data;\n    *(undefined8 **)(result._0_8_ + 0x10) = dataStructure;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1Value2",
                "param_1[2]": "record1Value2",
                "param_2[2]": "record2Value2",
                "param_2[7]": "record2Value7",
                "param_1[7]": "record1Value7",
                "param_2[8]": "record2Value8",
                "param_1[8]": "record1Value8",
                "param_1[3]": "record1Value3",
                "param_2[3]": "record2Value3"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1Value2;\n  \n  record1Value2 = record1Value2;\n  if (record1Value2 == record2Value2) {\n    if (record2Value7 <= record1Value7) {\n      if (record1Value7 <= record2Value7) {\n        if (record2Value8 < record1Value8) {\n          return -1;\n        }\n        if (record2Value8 <= record1Value8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1Value3 + 3) != *(char *)(record2Value3 + 3)) {\n              return (int)*(char *)(record1Value3 + 3) - (int)*(char *)(record2Value3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1Value2 == 0) || ((record1Value2 != 0x100 && (record2Value2 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "convert_and_allocate_memory_0010a69a",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "isLengthZero",
                "param_4": "isParamZero",
                "param_5": "paramValue",
                "uVar1": "returnValue",
                "lVar2": "convertedValue",
                "sVar3": "localStringSize",
                "uVar4": "allocatedMemory",
                "uVar5": "isConverted",
                "local_60": "localString"
            },
            "code": "\nundefined4 convertAndAllocateMemory_0010a69a(long inputParam,undefined8 outputParam,int isLengthZero,char isParamZero,uint paramValue)\n\n{\n  undefined4 returnValue;\n  long convertedValue;\n  size_t localStringSize;\n  undefined8 allocatedMemory;\n  undefined isConverted;\n  char localString [48];\n  \n  if (isLengthZero == 0) {\n    localString[0] = '\\0';\n    isConverted = 0;\n    convertedValue = 0;\n  }\n  else {\n    convertedValue = FUN_00109c2e();\n    if (convertedValue < 0) {\n      return 0;\n    }\n    isConverted = 1;\n    sprintf(localString,\"%ld=\",convertedValue);\n  }\n  localStringSize = strlen(localString);\n  sprintf(localString + localStringSize,\"%c%u\",(ulong)((-(uint)(isParamZero == '\\0') & 2) + 0x73),(ulong)paramValue);\n  returnValue = FUN_00109b52(inputParam,localString,convertedValue,isConverted,paramValue);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  convertedValue = *(long *)(inputParam + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(convertedValue + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(inputParam + 0x60) + 0x20) = 0;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109c2e",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "convert_and_allocate_memory_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_conflicts_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "currentSection",
                "iVar2": "strcmpResult",
                "iVar3": "sectionType",
                "lVar4": "sectionFlags",
                "lVar5": "sectionSize",
                "uVar6": "errorCode",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 checkSectionConflicts_00115b70(char **sectionNames)\n\n{\n  char *currentSection;\n  int strcmpResult;\n  int sectionType;\n  long sectionFlags;\n  long sectionSize;\n  undefined8 errorCode;\n  long *sectionList;\n  \n  sectionFlags = FUN_00114190(*sectionNames,0,4);\n  if (sectionFlags == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      sectionFlags = FUN_00114190(*sectionNames,0,1);\n      sectionSize = FUN_00114190(*sectionNames,0,2);\n      if (sectionFlags != 0) {\n        if (sectionSize != 0) {\n          currentSection = *sectionNames;\n          errorCode = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(errorCode,currentSection);\n        }\n        if (sectionFlags != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sectionNames;\n          sectionList = DAT_001279b8;\n          do {\n            sectionType = strcmp(currentSection,(char *)sectionList[1]);\n            if (sectionType == 0) {\n              errorCode = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(errorCode,currentSection);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (sectionSize == 0)) {\n        return 1;\n      }\n    }\n    sectionType = DAT_00127a2c;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        currentSection = *sectionNames;\n        strcmpResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((strcmpResult != 0) && (strcmpResult = strcmp(currentSection,\".gnu_debuglink\"), strcmpResult != 0)) {\n          sectionType = strcmp(currentSection,\".reloc\");\n          if (sectionType != 0) {\n            return 1;\n          }\n          errorCode = FUN_0010829e();\n          return errorCode;\n        }\n      }\n      if (sectionType == 5) {\n        errorCode = FUN_00113ede(sectionNames);\n        return errorCode;\n      }\n      if (sectionType == 4) {\n        return 0;\n      }\n    }\n    if (sectionType == 6) {\n      errorCode = FUN_001082b3();\n      return errorCode;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00114190",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_conflicts_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "param_1": "input_array",
                "param_2": "param_offset",
                "plVar1": "pointer",
                "lVar2": "value",
                "lVar3": "constant1",
                "lVar4": "constant2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "reloc_bound",
                "__ptr": "reloc_ptr",
                "lVar7": "result2",
                "extraout_RAX": "result3",
                "lVar8": "loop_index",
                "uStack_28": "return_value"
            },
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *input_array,long param_offset)\n\n{\n  long *pointer;\n  long value;\n  long constant1;\n  long constant2;\n  int error_code;\n  undefined8 result;\n  long reloc_bound;\n  void *reloc_ptr;\n  long result2;\n  undefined8 result3;\n  long loop_index;\n  undefined8 return_value;\n  \n  if (*(long *)(param_offset + 0x60) == 0) {\n    return result;\n  }\n  reloc_bound = bfd_get_reloc_upper_bound();\n  if (reloc_bound < 0) {\n    if ((reloc_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*input_array);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_bound != 0) {\n    reloc_ptr = (void *)xmalloc();\n    result2 = bfd_canonicalize_reloc(input_array,param_offset,reloc_ptr);\n    constant2 = _DAT_00128680;\n    constant1 = _DAT_00128568;\n    reloc_bound = _fwrite;\n    if (result2 < 0) {\n      FUN_0011a110(*input_array);\n                    \n      xexit(1);\n    }\n    if (result2 != 0) {\n      loop_index = 0;\n      do {\n        pointer = **(long ***)((long)reloc_ptr + loop_index * 8);\n        if ((((pointer != (long *)0x0) && (value = *pointer, value != 0)) && (value != reloc_bound)) &&\n           ((value != constant2 && (value != constant1)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        loop_index = loop_index + 1;\n      } while (result2 != loop_index);\n    }\n    free(reloc_ptr);\n    return result3;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "xmalloc",
                "free",
                "FUN_001083b7",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocation_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_and_execute_function_00113ede",
                "param_1": "input_string",
                "__s": "current_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_and_execute_function_00113ede(char **input_string)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_string == (char **)0x0) {\n    return 0;\n  }\n  current_string = *input_string;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "param_1": "data",
                "param_2": "ptr",
                "cVar1": "charValue",
                "lVar2": "size",
                "lVar3": "address",
                "uVar4": "result",
                "puVar5": "ptrList",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processData_0010c892(undefined8 data,long ptr)\n\n{\n  char charValue;\n  long size;\n  long address;\n  undefined8 result;\n  undefined8 *ptrList;\n  int kind;\n  \n  if (*(char *)(ptr + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptrList = *(undefined8 **)(ptr + 0x1a0); ptrList != (undefined8 *)0x0;\n        ptrList = (undefined8 *)*ptrList) {\n      kind = *(int *)(ptrList + 2);\n      address = ptrList[1];\n      if (kind != 0) {\n        if (address != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptrList[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (address == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      size = FUN_00112904(kind,0);\n      if (size == 0) goto LAB_0010c910;\n      address = FUN_0010c6be(data,address,size);\n      ptrList[3] = address;\n      if (address == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    charValue = FUN_0010c1c6();\n    if (charValue != '\\0') {\n      charValue = FUN_0010be1a(data,*(undefined8 *)(ptr + 0x68));\n      if (charValue != '\\0') {\n        *(undefined *)(ptr + 0x60) = 0;\n        *(undefined8 *)(ptr + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904",
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "data1",
                "param_2": "data2",
                "puVar1": "dynamicData"
            },
            "code": "\nvoid initializeData_00112904(undefined4 data1,undefined4 data2)\n\n{\n  undefined4 *dynamicData;\n  \n  dynamicData = (undefined4 *)xmalloc(0x18);\n  *dynamicData = data1;\n  dynamicData[1] = data2;\n  *(undefined (*) [16])(dynamicData + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113c43",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00113bfa",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00107880",
                "FUN_00109a32",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00115b70",
                "FUN_0010922b",
                "FUN_00114190",
                "FUN_0010c7a0",
                "FUN_00108898",
                "FUN_0011173a",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_functions_0011a390",
                "lVar1": "index",
                "lVar2": "counter",
                "lVar3": "loopCounter",
                "plVar4": "functionPtr",
                "uVar5": "numFunctions"
            },
            "code": "\nvoid executeFunctions_0011a390(void)\n\n{\n  long index;\n  long counter;\n  long loopCounter;\n  long *functionPtr;\n  uint numFunctions;\n  \n  functionPtr = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(functionPtr + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        index = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)functionPtr[index + 2])();\n        counter = index + -1;\n        if (-1 < (int)counter) {\n          loopCounter = counter;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)functionPtr[index + 1])();\n                        counter = index + -2;\n                      }\n                      (*(code *)functionPtr[counter + 2])();\n                      counter = counter + -1;\n                    }\n                    (*(code *)functionPtr[counter + 2])();\n                    counter = counter + -1;\n                  }\n                  (*(code *)functionPtr[counter + 2])();\n                  counter = counter + -1;\n                }\n                (*(code *)functionPtr[counter + 2])();\n                counter = counter + -1;\n              }\n              (*(code *)functionPtr[counter + 2])();\n              counter = counter + -1;\n            }\n            (*(code *)functionPtr[counter + 2])();\n            loopCounter = counter + -1;\n            if ((int)(counter + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionPtr[loopCounter + 2])();\n            index = loopCounter + -1;\n            (*(code *)functionPtr[loopCounter + 1])();\n            (*(code *)functionPtr[loopCounter])();\n            (*(code *)functionPtr[index])();\n            (*(code *)functionPtr[loopCounter + -2])();\n            (*(code *)functionPtr[loopCounter + -3])();\n            (*(code *)functionPtr[loopCounter + -4])();\n            (*(code *)functionPtr[loopCounter + -5])();\n            loopCounter = loopCounter + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionPtr = (long *)*functionPtr;\n    } while (functionPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_functions_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_send_data_0010e842",
                "param_1": "data",
                "param_2": "message",
                "param_3": "count",
                "param_4": "extraInfo",
                "__s": "formattedMessage",
                "sVar1": "messageLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e842(undefined8 data,char *message,undefined8 count,undefined8 extraInfo)\n\n{\n  size_t messageLength;\n  char *formattedMessage;\n  undefined result [16];\n  \n  messageLength = strlen(message);\n  formattedMessage = (char *)xmalloc(messageLength + 0x14);\n  sprintf(formattedMessage,\"%s:c=i%ld\",message,count);\n  result._0_4_ = FUN_0010e2f0(data,0x80,0,0,formattedMessage);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedMessage);\n  }\n  result._8_8_ = extraInfo;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "param_1": "inputValue",
                "lVar1": "result"
            },
            "code": "\nlong initializeData_00113cb9(long inputValue)\n\n{\n  long result;\n  \n  if (inputValue != 0) {\n    result = FUN_00112904(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = inputValue;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "send_formatted_message_0010eafe",
                "param_1": "messageManager",
                "param_2": "recipient",
                "param_3": "flag",
                "__s": "sender",
                "sVar2": "recipientLength",
                "sVar3": "senderLength",
                "__s_00": "formattedMessage",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendFormattedMessage_0010eafe(long messageManager,char *recipient,char flag)\n\n{\n  undefined4 result;\n  char *sender;\n  size_t recipientLength;\n  size_t senderLength;\n  char *formattedMessage;\n  \n  if ((*(int *)(messageManager + 0x1f8) == 0) && (*(long *)(messageManager + 0x1e8) == -1)) {\n    sender = (char *)FUN_00109b2f();\n    recipientLength = strlen(recipient);\n    senderLength = strlen(sender);\n    formattedMessage = (char *)xmalloc(recipientLength + 3 + senderLength);\n    sprintf(formattedMessage,\"%s:%c%s\",recipient,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),sender);\n    *(undefined8 *)(messageManager + 0x1e8) = *(undefined8 *)(messageManager + 0x10);\n    result = FUN_0010e2f0(messageManager,0x24,0,0,formattedMessage);\n    if ((char)result != '\\0') {\n      free(formattedMessage);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_formatted_message_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "execute_function_00113df2",
                "param_1": "inputData"
            },
            "code": "\nvoid executeFunction_00113df2(undefined4 inputData)\n\n{\n  FUN_00112904(4,inputData);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "execute_function_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "param_1": "input",
                "cVar1": "flag",
                "__s": "buffer1",
                "__s_00": "buffer2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "combinedBuffer",
                "uVar2": "result",
                "uVar5": "defaultValue"
            },
            "code": "\nundefined4 processData_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *buffer1;\n  char *buffer2;\n  size_t length1;\n  size_t length2;\n  char *combinedBuffer;\n  undefined defaultValue;\n  \n  defaultValue = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  buffer1 = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    defaultValue = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  buffer2 = (char *)FUN_00109b2f(input);\n  length1 = strlen(buffer1);\n  length2 = strlen(buffer2);\n  combinedBuffer = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedBuffer,\"@%s,%s\",buffer2,buffer1);\n  free(buffer2);\n  free(buffer1);\n  result = FUN_00109b52(input,combinedBuffer,0,defaultValue,0);\n  if ((char)result != '\\0') {\n    free(combinedBuffer);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_params_0010d882",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "counter",
                "pcVar2": "ptr1",
                "pcVar5": "ptr2",
                "cVar3": "ch",
                "lVar4": "allocSize",
                "uVar6": "index",
                "bVar7": "flag",
                "local_50": "totalParams",
                "local_4c": "paramSize",
                "local_48": "paramVal",
                "local_44": "count",
                "local_40": "results[2]"
            },
            "code": "\nundefined8 processParams_0010d882(long arg1,char **arg2,long *arg3,undefined *arg4)\n\n{\n  int counter;\n  char *ptr1;\n  char ch;\n  long allocSize;\n  char *ptr2;\n  ulong index;\n  bool flag;\n  uint totalParams;\n  undefined4 paramSize;\n  uint paramVal;\n  int count;\n  undefined8 results[2] [2];\n  \n  ptr1 = *arg2;\n  paramSize = 10;\n  if (arg3 != (long *)0x0) {\n    allocSize = xmalloc();\n    *arg3 = allocSize;\n    *arg4 = 0;\n  }\n  totalParams = 0;\n  while( true ) {\n    ptr2 = *arg2;\n    ch = *ptr2;\n    if ((ch == '_' || ch == '\\0') || (ch == 'e')) break;\n    if ((ch == 'N') || (ch == 'T')) {\n      *arg2 = ptr2 + 1;\n      if (ch == 'T') {\n        count = 1;\n      }\n      else {\n        ch = FUN_00108ea1(arg2,&count);\n        if (ch == '\\0') goto LAB_0010d958;\n      }\n      ch = FUN_00108ea1(arg2,&paramVal);\n      if ((ch == '\\0') || (*(uint *)(arg1 + 0x28) <= paramVal)) {\nLAB_0010d958:\n        FUN_0010911f(ptr1);\n        return 0;\n      }\n      index = (ulong)paramVal;\n      while (counter = count + -1, flag = count != 0, count = counter, flag) {\n        results[2][0] = *(undefined8 *)(*(long *)(arg1 + 0x20) + index * 0x10);\n        ch = FUN_0010d7d4(arg1,results[2],arg3,&totalParams,&paramSize);\n        if (ch == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      ch = FUN_0010d7d4(arg1,arg2,arg3,&totalParams,&paramSize);\n      if (ch == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (arg3 == (long *)0x0) {\n    if (ch != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*arg3 + (ulong)totalParams * 8) = 0;\n    if (*ptr2 != 'e') goto LAB_0010d9fa;\n    *arg4 = 1;\n  }\n  ptr2 = ptr2 + 1;\n  *arg2 = ptr2;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)ptr2 >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_0010d7d4",
                "FUN_00108ea1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_params_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "pointerArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocatedMemory",
                "pauVar2": "pointerToMemory",
                "lVar3": "loopCounter",
                "puVar4": "currentPointer",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**pointerArray) [16],undefined8 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocatedMemory;\n  undefined (*pointerToMemory) [16];\n  long loopCounter;\n  undefined4 *currentPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined4 *)xmalloc(0x28);\n  currentPointer = allocatedMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPointer = 0;\n    currentPointer = currentPointer + (ulong)byteValue * -2 + 1;\n  }\n  pointerToMemory = *pointerArray;\n  *(undefined8 *)(allocatedMemory + 2) = param2;\n  allocatedMemory[5] = param3;\n  allocatedMemory[6] = param4;\n  if (pointerToMemory == (undefined (*) [16])0x0) {\n    pointerToMemory = (undefined (*) [16])xmalloc(0x10);\n    *pointerToMemory = ZEXT816(0);\n    *pointerArray = pointerToMemory;\n    *(undefined (**) [16])(*pointerToMemory + 8) = pointerToMemory;\n  }\n  **(undefined8 **)(*pointerToMemory + 8) = allocatedMemory;\n  *(undefined4 **)(*pointerToMemory + 8) = allocatedMemory;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_00112996",
                "FUN_0010bc80",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010c6be"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "record",
                "param_2": "unit",
                "param_3": "line",
                "uVar1": "errorMessage",
                "puVar2": "currentUnitPtr",
                "uVar3": "index",
                "puVar4": "newRecordPtr",
                "lVar5": "counter",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long record,undefined8 unit,undefined8 line)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentUnitPtr;\n  ulong index;\n  undefined4 *newRecordPtr;\n  long counter;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    counter = *(long *)(record + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(record + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          currentUnitPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)currentUnitPtr * 8) = unit;\n          *(undefined8 *)(counter + 0x60 + (long)currentUnitPtr * 8) = line;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    ptr = newRecordPtr;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = unit;\n    *(undefined8 *)(newRecordPtr + 2) = errorMessage;\n    *(undefined8 *)(newRecordPtr + 0x18) = line;\n    ptr = newRecordPtr + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    currentUnitPtr = *(undefined8 **)(record + 0x28);\n    if (currentUnitPtr == (undefined8 *)0x0) {\n      currentUnitPtr = *(undefined8 **)(record + 8);\n      currentUnitPtr[2] = newRecordPtr;\n    }\n    else {\n      *currentUnitPtr = newRecordPtr;\n    }\n    *(undefined4 **)(record + 0x28) = newRecordPtr;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentUnitPtr >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "perform_pattern_matching_0011a170",
                "param_1": "pattern",
                "param_2": "stringToMatch",
                "__pattern": "currentPattern",
                "iVar1": "matchingResult"
            },
            "code": "\nint performPatternMatching_0011a170(char **pattern,char **stringToMatch)\n\n{\n  char *currentPattern;\n  int matchingResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchingResult = fnmatch(currentPattern + 1,*stringToMatch,0);\n    if (matchingResult == 0) {\n      *(undefined *)(stringToMatch + 1) = 0;\n      return matchingResult;\n    }\n  }\n  else {\n    matchingResult = fnmatch(currentPattern,*stringToMatch,0);\n    if (matchingResult == 0) {\n      *(undefined *)(stringToMatch + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "perform_pattern_matching_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_ptr",
                "puVar1": "next_ptr",
                "uVar2": "error_msg",
                "puVar3": "new_ptr",
                "puVar4": "current_ptr",
                "lVar5": "loop_counter",
                "puVar6": "last_ptr",
                "puVar7": "new_ptr_2",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_ptr,long param_2,long param_3,undefined4 param_4,undefined8 param_5)\n\n{\n  undefined8 *next_ptr;\n  undefined8 error_msg;\n  undefined4 *new_ptr;\n  undefined8 *current_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *new_ptr_2;\n  byte flag;\n  \n  flag = 0;\n  if (param_2 == 0) {\n    return 0;\n  }\n  if (param_3 != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_ptr = (undefined4 *)xmalloc(0x28);\n      new_ptr_2 = new_ptr;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *new_ptr_2 = 0;\n        new_ptr_2 = new_ptr_2 + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_ptr + 0x18);\n      *(long *)(new_ptr + 2) = param_2;\n      *(long *)(new_ptr + 4) = param_3;\n      new_ptr[6] = param_4;\n      next_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_ptr + 8) = param_5;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (current_ptr = next_ptr, current_ptr != (undefined8 *)0x0) {\n        last_ptr = current_ptr;\n        next_ptr = (undefined8 *)*current_ptr;\n      }\n      *last_ptr = new_ptr;\n      return 1;\n    }\n    error_msg = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_msg);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_from_archive_00104ea2",
                "cVar1": "result",
                "iVar2": "archValue",
                "ppcVar3": "filePointerList",
                "pvVar4": "tempBuffer",
                "lVar5": "bytesRead",
                "ppcVar6": "filePointer",
                "pcVar7": "currentChar",
                "puVar8": "allocPointer",
                "piVar9": "errorNumber",
                "pcVar10": "errorMessage",
                "uVar11": "translatedString",
                "lVar12": "fileSize",
                "pcVar13": "closeFunction",
                "lVar14": "bytesWritten",
                "unaff_EBX": "archError",
                "unaff_RBP": "statStruct",
                "pcVar15": "pathPointer",
                "psVar16": "pointerToArray"
            },
            "code": "\nvoid copyFromArchive_00104ea2(void)\n\n{\n  char result;\n  int archValue;\n  char **filePointerList;\n  void *tempBuffer;\n  long bytesRead;\n  char **filePointer;\n  char *currentChar;\n  undefined8 *allocPointer;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 translatedString;\n  long fileSize;\n  code *closeFunction;\n  long bytesWritten;\n  int archError;\n  stat *statStruct;\n  char *pathPointer;\n  stat *pointerToArray;\n  char *unaff_R12;\n  undefined8 *unaff_R13;\n  char **unaff_R15;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *param_7;\n  long *param_8;\n  char *param_9;\n  undefined8 *param_10;\n  undefined8 param_11;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long param_19;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  filePointer = (char **)bfd_openw(unaff_R12,param_11);\n  if (filePointer == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(unaff_R12,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = FUNC_00114e50(unaff_R15,filePointer,unaff_retaddr);\n    if (result == '\\0') {\n      archValue = bfd_get_arch(unaff_R15);\n      if (archValue == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(filePointer);\n      if (result != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(unaff_R12,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(filePointer);\n    filePointer = unaff_R15;\n    if (result == '\\0') {\n      FUN_001126c0(unaff_R12,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (archError == 0)) {\n      FUN_0011a350(unaff_R12,statStruct);\n    }\n    fileSize = bfd_openr(unaff_R12,param_11);\n    unaff_R13[2] = fileSize;\n    *param_8 = fileSize;\n    param_8 = (long *)(fileSize + 0xf0);\n    unaff_R15 = (char **)bfd_openr_next_archived_file(param_10,filePointer);\n    bfd_close(filePointer);\n    while ((DAT_00127a20 == 0 && (unaff_R15 != (char **)0x0))) {\n      errorMessage = *unaff_R15;\n      currentChar = errorMessage;\n      if (*errorMessage == '/') {\nLAB_0010527d:\n        translatedString = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(translatedString,errorMessage);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        pathPointer = currentChar;\n        if ((*currentChar == '.') && (pathPointer = currentChar + 1, currentChar[1] == '.')) {\n          pathPointer = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathPointer != '\\0' && (*pathPointer != '/')); pathPointer = pathPointer + 1) {\n        }\n        currentChar = pathPointer;\n        if (*pathPointer == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      statStruct = (stat *)&stack0x00000050;\n      unaff_R12 = (char *)concat(param_9,&DAT_0011b47d);\n      archValue = stat(unaff_R12,statStruct);\n      allocPointer = unaff_R13;\n      if (-1 < archValue) {\n        fileSize = FUN_0011a0e0(unaff_R12);\n        free(unaff_R12);\n        if (fileSize == 0) {\n          errorNumber = __errno_location();\n          errorMessage = strerror(*errorNumber);\n          translatedString = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(translatedString,errorMessage);\n          goto LAB_00104e93;\n        }\n        allocPointer = (undefined8 *)xmalloc(0x18);\n        errorMessage = *unaff_R15;\n        *allocPointer = unaff_R13;\n        allocPointer[2] = 0;\n        allocPointer[1] = fileSize;\n        unaff_R12 = (char *)concat(fileSize,&DAT_0011b47d,errorMessage);\n      }\n      archError = 0;\n      if (DAT_001279cb != '\\0') {\n        pointerToArray = statStruct;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&pointerToArray->st_dev = 0;\n          pointerToArray = (stat *)((long)pointerToArray + (ulong)bVar17 * -8 + 4);\n        }\n        filePointer = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          filePointer = unaff_R15;\n        }\n        archError = (**(code **)(filePointer[1] + 0x1e8))(unaff_R15,statStruct);\n        if (archError != 0) {\n          errorMessage = *unaff_R15;\n          translatedString = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(translatedString,errorMessage);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = unaff_R12;\n      *unaff_R13 = allocPointer;\n      unaff_R13[2] = 0;\n      result = bfd_check_format(unaff_R15,1);\n      if (result != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        filePointer = (char **)bfd_openw(unaff_R12,*(undefined8 *)unaff_R15[1]);\n        if (filePointer == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      translatedString = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,unaff_R15,0,translatedString);\n      filePointer = (char **)bfd_openw(unaff_R12,param_11);\n      if (filePointer == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      filePointerList = (char **)unaff_R15[0x1d];\n      if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n        filePointerList = unaff_R15;\n      }\n      archValue = (**(code **)(filePointerList[1] + 0x1e8))(unaff_R15);\n      fileSize = param_19;\n      if (archValue == 0) {\n        if (param_19 < 0) {\n          FUN_001125fa(unaff_R15);\n          translatedString = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(translatedString);\n        }\n        else {\n          archValue = bfd_seek(unaff_R15,0,0);\n          if (archValue == 0) {\n            if (DAT_001279c9 != '\\0') {\n              errorMessage = *filePointer;\n              translatedString = FUN_001125fa(unaff_R15);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,translatedString,errorMessage);\n            }\n            tempBuffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*filePointer,param_18 | 0x100);\n                free(tempBuffer);\n                result = bfd_close_all_done(filePointer);\n                filePointer = unaff_R15;\n                if (result == '\\0') {\n                  FUN_001126c0(unaff_R12,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytesWritten = 0x2000;\n              if (fileSize < 0x2001) {\n                bytesWritten = fileSize;\n              }\n              bytesRead = bfd_bread(tempBuffer,bytesWritten,unaff_R15);\n              filePointerList = unaff_R15;\n              if ((bytesWritten != bytesRead) ||\n                 (bytesRead = bfd_bwrite(tempBuffer,bytesWritten,filePointer), filePointerList = filePointer, bytesWritten != bytesRead))\n              break;\n              fileSize = fileSize - bytesWritten;\n            }\n            FUN_001126c0(0,filePointerList,0,0);\n            free(tempBuffer);\n          }\n          else {\n            translatedString = FUN_001125fa(unaff_R15);\n            FUN_0011a110(translatedString);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,unaff_R15,0,0);\n      }\n      result = bfd_close_all_done(filePointer);\n      if (result == '\\0') {\n        FUN_001126c0(unaff_R12,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(unaff_R12);\n      DAT_00127a20 = 1;\n    }\n    *param_8 = 0;\n    tempBuffer = (void *)xstrdup(*param_7);\n    if (DAT_00127a20 == 0) {\n      closeFunction = bfd_close;\n    }\n    else {\n      closeFunction = bfd_close_all_done;\n    }\n    result = (*closeFunction)(param_7);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(tempBuffer,0,0,0);\n    }\n    free(tempBuffer);\n    tempBuffer = (void *)xstrdup(*param_10);\n    result = bfd_close(param_10);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(tempBuffer,0,0,0);\n    }\n    free(tempBuffer);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    allocPointer = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = allocPointer;\n  }\n  rmdir(param_9);\n  free(param_9);\n  return;\n}\n\n",
            "called": [
                "bfd_bread",
                "dcgettext",
                "bfd_seek",
                "bfd_bwrite",
                "FUN_001126c0",
                "FUN_0011a350",
                "xmalloc",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "bfd_close",
                "FUN_00114e50",
                "rmdir",
                "bfd_check_format",
                "free",
                "printf",
                "bfd_close",
                "bfd_close_all_done",
                "FUN_00114b84",
                "bfd_close_all_done",
                "FUN_00104ea2",
                "concat",
                "chmod",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_openr",
                "unlink",
                "bfd_openw",
                "xstrdup",
                "__errno_location",
                "FUN_0011a110",
                "strerror",
                "stat",
                "FUN_001125fa",
                "FUN_0011a0e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_from_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_00113ce0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_00113ce0(long input_param_1,long input_param_2,undefined input_param_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_param_1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "filePointer",
                "unaff_RBP": "bufferPointer",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "iVar1": "errorFlag",
                "uVar2": "errorMessage",
                "uVar3": "translatedMessage",
                "sVar4": "readSize"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 translatedMessage;\n  size_t readSize;\n  FILE *filePointer;\n  long bufferPointer;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    readSize = fread((void *)(*(long *)(bufferPointer + 0x20) + startOffset),1,endOffset - startOffset,\n                  filePointer);\n    errorFlag = ferror(filePointer);\n    if (errorFlag != 0) {\n      translatedMessage = *(undefined8 *)(bufferPointer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,translatedMessage);\n    }\n    startOffset = startOffset + readSize;\n    errorFlag = feof(filePointer);\n    if (errorFlag != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      translatedMessage = xrealloc(*(undefined8 *)(bufferPointer + 0x20),endOffset);\n      *(undefined8 *)(bufferPointer + 0x20) = translatedMessage;\n    }\n  }\n  *(long *)(bufferPointer + 0x18) = startOffset;\n  fclose(filePointer);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00119dd0",
                "ferror",
                "FUN_00114dc7",
                "xrealloc",
                "feof",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "status",
                "cVar2": "flag",
                "iVar3": "count",
                "uVar4": "headerString",
                "uVar5": "dataString",
                "__format": "formatString",
                "lVar6": "size",
                "uVar7": "headerValue",
                "lVar8": "newDataSize"
            },
            "code": "\nundefined4 processBinary_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 status;\n  char flag;\n  int count;\n  undefined8 headerString;\n  undefined8 dataString;\n  char *formatString;\n  long size;\n  undefined8 headerValue;\n  long newDataSize;\n  \n  count = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = count;\n  if ((ulong)data[2] < (ulong)((long)count * 0x60)) {\n    size = 0x3000;\n    if (0x3f < count) {\n      size = (long)count * 0xc0;\n    }\n    newDataSize = xrealloc(data[3]);\n    data[3] = newDataSize;\n    memset((void *)(newDataSize + data[2]),0,size - data[2]);\n    data[2] = size;\n  }\n  status = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  headerString = FUN_00114e00(status);\n  dataString = FUN_00114e00(*(undefined4 *)(header + 2));\n  headerValue = *header;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,dataString,headerString);\n  size = bfd_openw(*data,*header);\n  if (size == 0) {\n    FUN_0011a110(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    count = 2;\n    flag = bfd_set_format(size,1);\n    if (flag == '\\0') {\n      count = bfd_get_error();\n      if (count != 5) {\n        FUN_0011a110(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(size + 8) + 0x2a0))(size,count,0);\n        if (flag != '\\0') {\n          headerValue = bfd_printable_arch_mach(count,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(count - 2)) =\n               1;\n        }\n        count = count + 1;\n      } while (count != 0x57);\n    }\n    bfd_close_all_done(size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "bfd_printable_arch_mach",
                "FUN_00114e00",
                "bfd_set_format",
                "printf",
                "xrealloc",
                "FUN_001053d5",
                "memset",
                "bfd_close_all_done",
                "bfd_openw",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "file_copy_00115a90",
                "param_1": "source_fd",
                "param_2": "destination_path",
                "param_3": "permissions_ptr",
                "iVar1": "errno_value",
                "_Var3": "seek_result",
                "uVar4": "read_result",
                "sVar5": "write_result",
                "piVar6": "errno_location",
                "__fd": "destination_fd",
                "iVar2": "read_length",
                "local_2038": "buffer"
            },
            "code": "\nulong file_copy_00115a90(int source_fd,char *destination_path,long permissions_ptr)\n\n{\n  int errno_value;\n  int destination_fd;\n  int read_length;\n  __off_t seek_result;\n  ulong read_result;\n  size_t write_result;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_fd) && (seek_result = lseek(source_fd,0,0), seek_result == 0)) {\n    destination_fd = open(destination_path,0x201);\n    if (destination_fd < 0) {\n      read_result = FUN_00108237();\n      return read_result;\n    }\n    do {\n      read_result = read(source_fd,buffer,0x2000);\n      read_length = (int)read_result;\n      if (read_length < 1) {\n        errno_location = __errno_location();\n        errno_value = *errno_location;\n        fchmod(destination_fd,*(__mode_t *)(permissions_ptr + 0x18));\n        close(source_fd);\n        close(destination_fd);\n        if (read_length != 0) {\n          *errno_location = errno_value;\n          return 0xffffffff;\n        }\n        return read_result & 0xffffffff;\n      }\n      write_result = write(destination_fd,buffer,(long)read_length);\n    } while (write_result == (long)read_length);\n    errno_location = __errno_location();\n    read_length = *errno_location;\n    close(source_fd);\n    close(destination_fd);\n    *errno_location = read_length;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108237",
                "close",
                "fchmod",
                "write",
                "read",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "file_copy_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_unlink_file_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldRemoveFile",
                "unaff_R13": "fileSize",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "auVar3": "result",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getErrorMessage",
                "unlink": "removeFile"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 uVar2;\n  char *filePath;\n  char shouldRemoveFile;\n  ulong fileSize;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(uVar2);\n  unlink(filePath);\n  if (shouldRemoveFile != '\\0') {\n    FUN_0011a350();\n  }\n  result._0_8_ = fileSize & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_0011a350",
                "FUN_00119ed0",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 298594,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}