{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102ee0",
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_0010274b",
                "FUN_00102ee0",
                "FUN_0010278c"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001072c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001071a8);\n  FUNC_00103070();\n  DAT_001072c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00103070",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030e0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00103d20": {
            "renaming": {
                "FUN_00103d20": "print_error_message_00103d20",
                "param_1": "errorCode",
                "iVar1": "errorCheck",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00103d20(long errorCode)\n\n{\n  int errorCheck;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorCheck = bfd_get_error();\n  if (errorCheck == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCheck);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00107350,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00107350,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010274b",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103d20",
            "calling": [
                "FUN_001023b6",
                "FUN_00102a90",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "print_error_message_00103d20"
        },
        "FUN_001024d2": {
            "renaming": {
                "FUN_001024d2": "handle_bfd_error_001024d2",
                "unaff_RBX": "param_list",
                "param_7": "error_message",
                "iVar2": "error_code",
                "cVar1": "format_matches",
                "lVar3": "failing_command"
            },
            "code": "\n\n\nvoid handle_bfd_error_001024d2(void)\n\n{\n  char format_matches;\n  int error_code;\n  long failing_command;\n  undefined8 *param_list;\n  undefined8 error_message;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0xd) {\n    FUN_00103d20(*param_list);\n    FUN_0010278c(error_message);\n    DAT_00107314 = 3;\n  }\n  else {\n    format_matches = bfd_check_format_matches();\n    if (format_matches == '\\0') {\n      FUN_00103d20(*param_list);\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        FUN_0010278c(error_message);\n      }\n      DAT_00107314 = 3;\n    }\n    else {\n      FUN_00102a90();\n      fwrite(\" (core file\",1,0xb,_stdout);\n      failing_command = bfd_core_file_failing_command();\n      if (failing_command != 0) {\n        printf(\" invoked as %s\",failing_command);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00103d20",
                "printf",
                "bfd_core_file_failing_command",
                "FUN_0010278c",
                "bfd_check_format_matches",
                "fwrite",
                "FUN_00102a90",
                "bfd_get_error",
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d2",
            "calling": [
                "FUN_00102a40"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001024d2"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001030a0": {
            "renaming": {
                "FUN_001030a0": "FUNC_001030a0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid FUNC_001030a0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001030a0",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_001030a0"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00102e50",
                "FUN_00102e90",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_001030a0();\n  return;\n}\n\n",
            "called": [
                "FUN_001030a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103120",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00102e50",
                "FUN_00103130",
                "FUN_00103c50"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_001023b6": {
            "renaming": {
                "FUN_001023b6": "process_archived_files_001023b6",
                "unaff_RBX": "archiveFilesArray",
                "lVar3": "archiveFilePointer",
                "lVar4": "previousArchiveFilePointer",
                "cVar1": "closeStatus",
                "iVar2": "errorStatus"
            },
            "code": "\nvoid processArchivedFiles_001023b6(void)\n\n{\n  char closeStatus;\n  int errorStatus;\n  long archiveFilePointer;\n  undefined8 *archiveFilesArray;\n  long previousArchiveFilePointer;\n  \n  archiveFilePointer = 0;\n  do {\n    previousArchiveFilePointer = archiveFilePointer;\n    bfd_set_error(0);\n    archiveFilePointer = bfd_openr_next_archived_file();\n    if (archiveFilePointer == 0) {\n      errorStatus = bfd_get_error();\n      if (errorStatus != 9) {\n        FUN_00103d20(*archiveFilesArray);\n        DAT_00107314 = 2;\n      }\n      if (previousArchiveFilePointer != 0) {\n        bfd_close(previousArchiveFilePointer);\n      }\n      break;\n    }\n    FUN_00102a40();\n  } while ((previousArchiveFilePointer == 0) || (bfd_close(), previousArchiveFilePointer != archiveFilePointer));\n  closeStatus = bfd_close();\n  if (closeStatus == '\\0') {\n    FUN_00103d20();\n    DAT_00107314 = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00103d20",
                "bfd_openr_next_archived_file",
                "bfd_set_error",
                "FUN_00102a40",
                "bfd_get_error",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b6",
            "calling": [
                "FUN_00102980"
            ],
            "imported": false,
            "current_name": "process_archived_files_001023b6"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010281b": {
            "renaming": {
                "FUN_0010281b": "display_section_sizes_0010281b",
                "param_1": "outputFile",
                "param_2": "errorCode",
                "lVar1": "sectionSize",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid displaySectionSizes_0010281b(FILE *outputFile,int errorCode)\n\n{\n  long sectionSize;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  sectionSize = DAT_00107350;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,message,sectionSize);\n  message = (char *)dcgettext(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target=<bfdname>        Set the binary file format\\n            @<file>                   Read options from <file>\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(outputFile,message,\"berkeley\");\n  sectionSize = DAT_00107350;\n  if (DAT_00107350 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,sectionSize);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    sectionSize = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (sectionSize == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "exit",
                "bfd_target_list",
                "fputc",
                "free",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010281b",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "display_section_sizes_0010281b"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00102ee0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00102fe0",
                "FUN_00102a40"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "FUN_00102ee0": {
            "renaming": {
                "FUN_00102ee0": "print_error_message_00102ee0",
                "param_1": "format_string",
                "param_2": "variable_arguments"
            },
            "code": "\n\n\nvoid print_error_message_00102ee0(char *format_string,__gnuc_va_list variable_arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_00107350);\n  vfprintf(_stderr,format_string,variable_arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "vfprintf",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ee0",
            "calling": [
                "FUN_00102db0",
                "FUN_00102f40"
            ],
            "imported": false,
            "current_name": "print_error_message_00102ee0"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102360"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103d20",
                "FUN_001023b6",
                "FUN_00103130",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103d80",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "print_formatted_number_00102710",
                "in_EAX": "inputNumber",
                "unaff_EBX": "paddingWidth",
                "__format": "formatString"
            },
            "code": "\nvoid printFormattedNumber_00102710(void)\n\n{\n  int inputNumber;\n  uint paddingWidth;\n  char *formatString;\n  \n  formatString = \"0x%lx\";\n  if (inputNumber == 1) {\n    formatString = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,formatString);\n  printf(\"%*s\",(ulong)paddingWidth);\n  return;\n}\n\n",
            "called": [
                "printf",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00102e90"
            ],
            "imported": false,
            "current_name": "print_formatted_number_00102710"
        },
        "FUN_0010278c": {
            "renaming": {
                "FUN_0010278c": "print_matching_formats_0010278c",
                "param_1": "formatList",
                "uVar1": "formatString",
                "__format": "messageFormat",
                "plVar2": "currentFormat",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0010278c(long *formatList)\n\n{\n  undefined8 formatString;\n  char *messageFormat;\n  long *currentFormat;\n  \n  fflush(stdout);\n  formatString = DAT_00107350;\n  messageFormat = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderr,messageFormat,formatString);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "free",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010278c",
            "calling": [
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0010278c"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "FUN_00103c50": {
            "renaming": {
                "FUN_00103c50": "update_variables_00103c50",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar1": "pointerTo8",
                "sVar2": "stringLength",
                "in_RAX": "returnValue"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8 updateVariables_00103c50(undefined8 param1,char **param2,undefined8 param3,undefined8 param4)\n\n{\n  char *pointerTo8;\n  undefined8 returnValue;\n  size_t stringLength;\n  \n  if (*(uint *)((long)param2 + 0x24) != 0) {\n    if (((param2 != (char **)0x108370) && ((*(uint *)((long)param2 + 0x24) & 0x1000) == 0)) &&\n       (param2 != (char **)0x108258)) {\n      pointerTo8 = param2[8];\n      stringLength = strlen(*param2);\n      if (DAT_001072d0 < (int)stringLength) {\n        DAT_001072d0 = (int)stringLength;\n      }\n      DAT_001072e0 = DAT_001072e0 + (long)pointerTo8;\n      if (DAT_001072d8 < param2[6]) {\n        DAT_001072d8 = param2[6];\n      }\n    }\n    return param4;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001026ea",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c50",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "update_variables_00103c50"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00102a40": {
            "renaming": {
                "FUN_00102a40": "check_file_format_00102a40",
                "param_1": "file_ptr",
                "cVar1": "is_valid_format",
                "iVar2": "error_code",
                "lVar3": "failing_command",
                "local_20": "format_options"
            },
            "code": "\n\n\nvoid check_file_format_00102a40(undefined8 *file_ptr)\n\n{\n  char is_valid_format;\n  int error_code;\n  long failing_command;\n  undefined8 format_options [2];\n  \n  is_valid_format = bfd_check_format(file_ptr,2);\n  if (is_valid_format == '\\0') {\n    is_valid_format = bfd_check_format_matches(file_ptr,1,format_options);\n    if (is_valid_format == '\\0') {\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        FUN_00103d20(*file_ptr);\n        FUN_0010278c(format_options[0]);\n        DAT_00107314 = 3;\n      }\n      else {\n        is_valid_format = bfd_check_format_matches(file_ptr,3,format_options);\n        if (is_valid_format == '\\0') {\n          FUN_00103d20(*file_ptr);\n          error_code = bfd_get_error();\n          if (error_code == 0xd) {\n            FUN_0010278c(format_options[0]);\n          }\n          DAT_00107314 = 3;\n        }\n        else {\n          FUN_00102a90(file_ptr);\n          fwrite(\" (core file\",1,0xb,_stdout);\n          failing_command = bfd_core_file_failing_command(file_ptr);\n          if (failing_command != 0) {\n            printf(\" invoked as %s\",failing_command);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      FUN_00102a90(file_ptr);\n      putchar(10);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "putchar",
                "bfd_check_format_matches",
                "FUN_00102a90",
                "FUN_001024d2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102a40",
            "calling": [
                "FUN_00102980",
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "check_file_format_00102a40"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00102360"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_00103130",
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103130,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00103130"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103040",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00102980",
                "FUN_00102a40"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_0010274a": {
            "renaming": {
                "FUN_0010274a": "FUNC_0010274a"
            },
            "code": "\nvoid FUNC_0010274a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010274a",
            "calling": [
                "FUN_00103cc0"
            ],
            "imported": false,
            "current_name": "FUNC_0010274a"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010274b": {
            "renaming": {
                "FUN_0010274b": "print_error_detail_0010274b",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorDetail_0010274b(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00107350);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00107350,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010274b",
            "calling": [
                "FUN_00103d20"
            ],
            "imported": false,
            "current_name": "print_error_detail_0010274b"
        },
        "FUN_00103cc0": {
            "renaming": {
                "FUN_00103cc0": "update_data_and_execute_function_00103cc0",
                "param_1": "inputParam",
                "param_2": "dataArray"
            },
            "code": "\nvoid updateDataAndExecuteFunction_00103cc0(undefined8 inputParam,undefined8 *dataArray)\n\n{\n  if ((((*(uint *)((long)dataArray + 0x24) != 0) && (dataArray != (undefined8 *)0x108370)) &&\n      ((*(uint *)((long)dataArray + 0x24) & 0x1000) == 0)) && (dataArray != (undefined8 *)0x108258)) {\n    DAT_001072e0 = DAT_001072e0 + dataArray[8];\n    FUN_00102fe0(*dataArray,dataArray[8],dataArray[6]);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fe0",
                "FUN_0010274a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103cc0",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "update_data_and_execute_function_00103cc0"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00102360": {
            "renaming": {
                "FUN_00102360": "handle_file_error_00102360",
                "piVar1": "errorPointer",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nvoid handleFileError_00102360(void)\n\n{\n  int *errorPointer;\n  undefined8 translatedErrorMessage;\n  \n  errorPointer = __errno_location();\n  if (*errorPointer == 2) {\n    translatedErrorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00102f40(translatedErrorMessage);\n  }\n  else {\n    strerror(*errorPointer);\n    translatedErrorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00102f40(translatedErrorMessage);\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "FUN_00102f40",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00102980"
            ],
            "imported": false,
            "current_name": "handle_file_error_00102360"
        },
        "FUN_00103130": {
            "renaming": {
                "FUN_00103130": "parse_command_line_00103130",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "pointerToByte",
                "bVar2": "booleanVar1",
                "bVar3": "booleanVar2",
                "bVar4": "booleanVar3",
                "pcVar5": "pointerToChar",
                "bVar6": "byteVar1",
                "cVar7": "charVar1",
                "iVar8": "index",
                "uVar9": "returnVal",
                "__stream": "fileStream",
                "__s": "byteArray",
                "pcVar10": "pointerToChar2",
                "sVar11": "size",
                "__ptr": "pointerToByte2",
                "__src": "pointerToLongArray",
                "lVar12": "longVar1",
                "plVar13": "pointerToLongArray2",
                "plVar14": "pointerToLongArray3",
                "uVar15": "ulongVar1",
                "uVar16": "ulongVar2",
                "pcVar17": "pointerToChar3",
                "pbVar18": "pointerToByte3",
                "unaff_RBP": "pointerToUndef",
                "lVar19": "longVar2",
                "pbVar20": "pointerToByte4",
                "iVar21": "index2",
                "iVar22": "index3",
                "bVar23": "booleanVar4",
                "local_110": "localVariable1",
                "local_10c": "localVariable2",
                "local_108": "localSize",
                "local_c8": "localStat"
            },
            "code": "\n\n\nundefined4 parseCommandLine_00103130(int argc,long *argv)\n\n{\n  byte *pointerToByte;\n  byte booleanVar1;\n  bool booleanVar2;\n  bool booleanVar3;\n  char *pointerToChar;\n  byte byteVar1;\n  char charVar1;\n  int index;\n  undefined4 returnVal;\n  FILE *fileStream;\n  byte *byteArray;\n  char *pointerToChar2;\n  size_t size;\n  byte *pointerToByte2;\n  long *pointerToLongArray;\n  long longVar1;\n  long *pointerToLongArray2;\n  long *pointerToLongArray3;\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  char *pointerToChar3;\n  byte *pointerToByte3;\n  undefined **pointerToUndef;\n  long longVar2;\n  byte *pointerToByte4;\n  int index2;\n  int index3;\n  bool booleanVar4;\n  int localVariable1;\n  int localVariable2;\n  size_t localSize;\n  stat localStat;\n  \n  setlocale(5,\"\");\n  pointerToChar3 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00107350 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00107350);\n  pointerToLongArray2 = argv;\n  if (1 < argc) {\n    localVariable2 = 2000;\n    localVariable1 = 0;\n    index = 1;\n    do {\n      while( true ) {\n        index3 = index;\n        pointerToUndef = (undefined **)(long)index3;\n        if (*(char *)pointerToLongArray2[(long)pointerToUndef] == '@') break;\nLAB_001035a0:\n        if (argc <= index3 + 1) goto LAB_00103612;\nLAB_001035aa:\n        index = index3 + 1;\n        localVariable1 = index3;\n      }\n      localVariable2 = localVariable2 + -1;\n      if (localVariable2 == 0) goto LAB_001039c5;\n      pointerToChar3 = (char *)pointerToLongArray2[(long)pointerToUndef] + 1;\n      index = stat(pointerToChar3,&localStat);\n      if (index < 0) goto LAB_001035a0;\n      if ((localStat.st_mode & 0xf000) == 0x4000) {\n        longVar2 = *pointerToLongArray2;\n        pointerToChar3 = \"%s: error: @-file refers to a directory\\n\";\n        do {\n          fprintf(_stderr,pointerToChar3,longVar2);\n          xexit(1);\nLAB_001039c5:\n          longVar2 = *pointerToLongArray2;\n          pointerToChar3 = \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      fileStream = fopen(pointerToChar3,\"r\");\n      if (fileStream == (FILE *)0x0) goto LAB_001035a0;\n      index = fseek(fileStream,0,2);\n      if (((index == -1) ||\n          (pointerToChar3 = (char *)ftell(fileStream), pointerToChar3 == (char *)0xffffffffffffffff)) ||\n         (index = fseek(fileStream,0,0), index == -1)) {\nLAB_00103600:\n        fclose(fileStream);\n        if (index3 + 1 < argc) goto LAB_001035aa;\n        break;\n      }\n      byteArray = (byte *)xmalloc(pointerToChar3 + 1);\n      pointerToChar2 = (char *)fread(byteArray,1,(size_t)pointerToChar3,fileStream);\n      if ((pointerToChar3 != pointerToChar2) && (index = ferror(fileStream), index != 0)) {\n        free(byteArray);\n        goto LAB_00103600;\n      }\n      byteArray[(long)pointerToChar2] = 0;\n      byteVar1 = *byteArray;\n      pointerToByte3 = byteArray;\n      if (byteVar1 != 0) {\nLAB_00103300:\n        if (((&_sch_istable)[(ulong)byteVar1 * 2] & 0x40) != 0) goto LAB_001032f0;\n        size = strlen((char *)byteArray);\n        pointerToByte2 = (byte *)xmalloc(size + 1);\n        index = 0;\n        booleanVar4 = false;\n        booleanVar3 = false;\n        longVar2 = 0;\n        pointerToLongArray = (long *)0x0;\n        booleanVar2 = false;\n        pointerToByte3 = byteArray;\n        do {\n          while (((&_sch_istable)[(ulong)*pointerToByte3 * 2] & 0x40) != 0) {\n            pointerToByte3 = pointerToByte3 + 1;\n          }\n          if ((index == 0) || (pointerToLongArray3 = pointerToLongArray + longVar2, index + -1 <= (int)longVar2)) {\n            if (pointerToLongArray == (long *)0x0) {\n              index = 8;\n              pointerToLongArray = (long *)xmalloc(0x40);\n              pointerToLongArray3 = pointerToLongArray + longVar2;\n              *pointerToLongArray3 = 0;\n            }\n            else {\n              index = index * 2;\n              pointerToLongArray = (long *)xrealloc(pointerToLongArray,(long)index << 3);\n              pointerToLongArray3 = pointerToLongArray + longVar2;\n              *pointerToLongArray3 = 0;\n            }\n          }\n          byteVar1 = *pointerToByte3;\n          pointerToByte4 = pointerToByte2;\n          while (byteVar1 != 0) {\n            while( true ) {\n              if ((((&_sch_istable)[(ulong)byteVar1 * 2] & 0x40) != 0) &&\n                 (!(bool)(booleanVar3 | booleanVar2 | booleanVar4))) {\n                booleanVar2 = false;\n                booleanVar4 = false;\n                booleanVar3 = false;\n                goto LAB_00103410;\n              }\n              if (!booleanVar2) break;\n              pointerToByte3 = pointerToByte3 + 1;\n              *pointerToByte4 = byteVar1;\n              pointerToByte4 = pointerToByte4 + 1;\n              booleanVar2 = false;\n              byteVar1 = *pointerToByte3;\n              if (byteVar1 == 0) goto LAB_00103410;\n            }\n            if (byteVar1 == 0x5c) {\n              booleanVar2 = true;\n            }\n            else if (booleanVar3) {\n              if (byteVar1 == 0x27) {\n                booleanVar3 = false;\n              }\n              else {\nLAB_00103585:\n                *pointerToByte4 = byteVar1;\n                pointerToByte4 = pointerToByte4 + 1;\n              }\n            }\n            else if (booleanVar4) {\n              if (byteVar1 != 0x22) goto LAB_00103585;\n              booleanVar4 = false;\n            }\n            else if (byteVar1 == 0x27) {\n              booleanVar3 = true;\n            }\n            else {\n              if (byteVar1 != 0x22) goto LAB_00103585;\n              booleanVar4 = true;\n            }\n            pointerToByte = pointerToByte3 + 1;\n            pointerToByte3 = pointerToByte3 + 1;\n            byteVar1 = *pointerToByte;\n          }\nLAB_00103410:\n          *pointerToByte4 = 0;\n          longVar1 = xstrdup(pointerToByte2);\n          *pointerToLongArray3 = longVar1;\n          pointerToLongArray[longVar2 + 1] = 0;\n          byteVar1 = *pointerToByte3;\n          booleanVar1 = (&_sch_istable)[(ulong)byteVar1 * 2];\n          while ((booleanVar1 & 0x40) != 0) {\n            byteVar1 = pointerToByte3[1];\n            pointerToByte3 = pointerToByte3 + 1;\n            booleanVar1 = (&_sch_istable)[(ulong)byteVar1 * 2];\n          }\n          longVar2 = longVar2 + 1;\n        } while (byteVar1 != 0);\n        free(pointerToByte2);\n        pointerToLongArray3 = pointerToLongArray2;\n        if (argv == pointerToLongArray2) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      pointerToLongArray = (long *)xmalloc();\n      *pointerToLongArray = 0;\n      if (argv == pointerToLongArray2) {\nLAB_0010372c:\n        if (*pointerToLongArray2 == 0) {\n          index = 0;\n        }\n        else {\n          longVar2 = 1;\n          do {\n            index = (int)longVar2;\n            pointerToLongArray3 = pointerToLongArray2 + longVar2;\n            longVar2 = longVar2 + 1;\n          } while (*pointerToLongArray3 != 0);\n        }\n        longVar1 = 0;\n        pointerToLongArray3 = (long *)xmalloc((long)(index + 1) << 3);\n        longVar2 = *pointerToLongArray2;\n        while (longVar2 != 0) {\n          ulongVar2 = xstrdup();\n          *(undefined8 *)((long)pointerToLongArray3 + longVar1) = ulongVar2;\n          longVar1 = longVar1 + 8;\n          longVar2 = *(long *)((long)pointerToLongArray2 + longVar1);\n        }\n        *(undefined8 *)((long)pointerToLongArray3 + longVar1) = 0;\nLAB_001034ad:\n        pointerToLongArray2 = pointerToLongArray3;\n        if (*pointerToLongArray == 0) goto LAB_001038cc;\n        pointerToChar3 = (char *)0x0;\n        do {\n          pointerToChar3 = pointerToChar3 + 1;\n        } while (pointerToLongArray[(long)pointerToChar3] != 0);\n        localSize = (long)pointerToChar3 * 8;\n      }\n      else {\nLAB_001038cc:\n        pointerToChar3 = (char *)0x0;\n        localSize = 0;\n      }\n      free((void *)pointerToLongArray2[(long)pointerToUndef]);\n      pointerToLongArray2 = (long *)xrealloc(pointerToLongArray2,(long)(pointerToChar3 + (long)argc + 1) * 8);\n      index2 = argc + -1 + (int)pointerToChar3;\n      memmove(pointerToLongArray2 + (long)(undefined **)((long)pointerToUndef + (long)pointerToChar3),\n              pointerToLongArray2 + (long)((long)pointerToUndef + 1),(long)(argc - index3) << 3);\n      memcpy(pointerToLongArray2 + (long)pointerToUndef,pointerToLongArray,localSize);\n      free(pointerToLongArray);\n      free(byteArray);\n      fclose(fileStream);\n      pointerToUndef = (undefined **)((long)pointerToUndef + (long)pointerToChar3);\n      index = localVariable1 + 1;\n      argc = index2;\n    } while (localVariable1 + 1 < index2);\n  }\nLAB_00103612:\n  index = bfd_init();\n  if (index != 0x118) goto LAB_001039f8;\n  pointerToChar2 = \"x86_64-pc-linux-gnu\";\n  pointerToUndef = &PTR_s_common_001071c0;\n  pointerToChar3 = \"ABGHhVvdfotx\";\n  charVar1 = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (charVar1 == '\\0') {\n    returnVal = bfd_get_error();\n    pointerToChar3 = (char *)bfd_errmsg(returnVal);\n    ulongVar2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    ulongVar1 = FUN_00102db0(ulongVar2,\"x86_64-pc-linux-gnu\",pointerToChar3);\n    goto LAB_00103b74;\n  }\n  do {\n    while (index = getopt_long(argc,pointerToLongArray2,pointerToChar3,pointerToUndef,0), index != -1) {\n      pointerToChar = pointerToChar2;\n      if (index < 0x79) {\n        if (index < 0x3f) {\nswitchD_001037fd_caseD_40:\n          index = getopt_long(argc,pointerToLongArray2,pointerToChar3,pointerToUndef,0);\n          if (index == -1) break;\n          if (0x78 < index) goto LAB_00103937;\n          if (0x3e < index) {\n            switch(index) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                index = getopt_long(argc,pointerToLongArray2,pointerToChar3,pointerToUndef,0);\n                if (index == -1) goto LAB_00103664;\n                if (0x78 < index) break;\n                if (0x3e < index) {\n                  switch(index) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (index == 0xca) goto LAB_001039d1;\n            } while (0xca < index);\n            if (index == 200) goto LAB_00103869;\n          } while (index != 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(index) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          DAT_00107348 = 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          DAT_00107348 = 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          _DAT_00107338 = 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          _DAT_00107334 = 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (index == 0xca) {\nLAB_001039d1:\n        DAT_00107340 = _optarg;\n      }\n      else {\n        if (0xca < index) goto switchD_001037fd_caseD_40;\n        if (index != 200) {\n          if (index != 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        pointerToChar2 = _optarg;\n        if (0x31 < (byte)(*_optarg + 0xbeU)) goto LAB_00103bc8;\n        ulongVar1 = 1L << (*_optarg + 0xbeU & 0x3f);\n        if ((ulongVar1 & 0x2000000020) != 0) goto switchD_001037fd_caseD_47;\n        if ((ulongVar1 & 0x2000000020000) == 0) {\nLAB_00103b74:\n          if ((ulongVar1 & 0x100000001) == 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        DAT_00107348 = 1;\n      }\n    }\nLAB_00103664:\n    if (_DAT_00107338 != 0) {\n      printf(\"GNU %s %s\\n\",&DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      pointerToChar3 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pointerToChar3);\n      pointerToChar3 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pointerToChar3);\n                    \n      exit(0);\n    }\n    if (_DAT_00107330 == 0) {\n      index = _optind - argc;\n      if (_optind == argc) {\n        FUN_00102980(\"a.out\");\n      }\n      else {\n        while (longVar2 = (long)_optind, SBORROW4(_optind,argc) != index < 0) {\n          _optind = _optind + 1;\n          FUN_00102980(pointerToLongArray2[longVar2]);\n          index = _optind - argc;\n        }\n      }\n      if ((_DAT_00107334 != 0) && ((DAT_00107348 & 0xfffffffd) == 0)) {\n        longVar2 = DAT_00107320 + DAT_00107328 + DAT_00107318;\n        index = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n        booleanVar4 = DAT_00107348 == 0;\n        FUN_00102e90(index);\n        index3 = (int)(char)((-booleanVar4 & 0xe9U) + 0x20);\n        putc(index3,_stdout);\n        FUN_00102e90(index,DAT_00107320);\n        putc(index3,_stdout);\n        FUN_00102e90(index,DAT_00107318);\n        putc(index3,_stdout);\n        if (DAT_00107348 == 0) {\n          pointerToChar3 = \"%7lu\\t%7lx\";\n          if (DAT_0010733c == 1) {\n            pointerToChar3 = \"%7lo\\t%7lx\";\n          }\n          printf(pointerToChar3,longVar2,longVar2);\n        }\n        else {\n          FUN_00102e90(index,longVar2);\n        }\n        putc(index3,_stdout);\n        fwrite(\"(TOTALS)\\n\",1,9,_stdout);\n      }\n      return DAT_00107314;\n    }\n    FUN_0010281b(_stdout,0);\nLAB_001039f8:\n    ulongVar2 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    FUN_00102db0(ulongVar2);\nLAB_00103a15:\n    longVar2 = strtol(_optarg,(char **)0x0,10);\n    pointerToChar2 = _optarg;\n    index = (int)longVar2;\n    pointerToChar = &optarg;\n    if (index == 10) {\nswitchD_001037fd_caseD_64:\n      pointerToChar2 = pointerToChar;\n      DAT_0010733c = 0;\n    }\n    else if (index == 0x10) {\nswitchD_001037fd_caseD_78:\n      pointerToChar2 = pointerToChar;\n      DAT_0010733c = 2;\n    }\n    else {\n      if (index != 8) {\n        ulongVar2 = dcgettext(0,\"Invalid radix: %s\\n\",5);\n        pointerToChar3 = &optarg;\n        do {\n          FUN_00102f40(ulongVar2,pointerToChar2);\n          pointerToChar2 = pointerToChar3;\nswitchD_001037fd_caseD_3f:\n          FUN_0010281b(_stderr,1);\nLAB_00103bc8:\n          ulongVar2 = dcgettext(0,\"invalid argument to --format: %s\",5);\n          pointerToChar3 = pointerToChar2;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      pointerToChar2 = pointerToChar;\n      DAT_0010733c = 1;\n    }\n  } while( true );\nLAB_001032f0:\n  byteVar1 = pointerToByte3[1];\n  pointerToByte3 = pointerToByte3 + 1;\n  if (byteVar1 == 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n",
            "called": [
                "ftell",
                "FUN_00102980",
                "textdomain",
                "bfd_init",
                "memmove",
                "memcpy",
                "bfd_set_error_program_name",
                "xexit",
                "strtol",
                "FUN_0010281b",
                "fread",
                "fseek",
                "fclose",
                "bfd_set_default_target",
                "fwrite",
                "setlocale",
                "fopen",
                "bfd_get_error",
                "printf",
                "bfd_errmsg",
                "ferror",
                "stat",
                "strlen",
                "xmalloc",
                "fprintf",
                "bindtextdomain",
                "xmalloc_set_program_name",
                "exit",
                "FUN_00102db0",
                "free",
                "xrealloc",
                "dcgettext",
                "xstrdup",
                "FUN_00102f40",
                "getopt_long",
                "FUN_00102e90",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103130",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_command_line_00103130"
        },
        "FUN_00102a90": {
            "renaming": {
                "FUN_00102a90": "analyze_binary_00102a90",
                "param_1": "binary_file_path",
                "lVar1": "section_start",
                "extraout_RDX": "section_end",
                "lVar2": "total_size",
                "extraout_RDX_00": "lVar2_copy",
                "extraout_RDX_01": "hex_value",
                "uVar3": "ex_filename",
                "__ptr": "section_sizes",
                "iVar4": "section_count",
                "cVar5": "found_section",
                "pvVar6": "ptr",
                "pcVar7": "string",
                "iVar8": "indentation_level",
                "lVar9": "counter",
                "bVar10": "is_zero",
                "bVar11": "is_first",
                "puVar12": "format_string"
            },
            "code": "\n\n\nvoid analyze_binary_00102a90(char **binary_file_path)\n\n{\n  long section_start;\n  undefined8 section_end;\n  long total_size;\n  long lVar2_copy;\n  undefined8 hex_value;\n  undefined8 ex_filename;\n  void *section_sizes;\n  int section_count;\n  char found_section;\n  void *ptr;\n  char *string;\n  int indentation_level;\n  long counter;\n  bool is_zero;\n  bool is_first;\n  undefined *format_string;\n  \n  if ((_DAT_00107310 == 0) || (DAT_001072f0 = 0, (*(uint *)((long)binary_file_path + 0x44) & 0x52) != 0x10))\n  goto LAB_00102aa8;\n  counter = (**(code **)(binary_file_path[1] + 0x1f8))();\n  if (counter < 0) {\n    FUN_00103d20(*binary_file_path);\n    xexit(1);\nLAB_001026b4:\n    section_sizes = (void *)xmalloc();\n  }\n  else {\n    section_sizes = (void *)0x0;\n    if (counter != 0) goto LAB_001026b4;\n  }\n  ptr = section_sizes;\n  counter = (**(code **)(binary_file_path[1] + 0x200))(binary_file_path);\n  found_section = (char)ptr;\n  if (counter < 0) {\n    FUN_00103d20(*binary_file_path);\n    xexit(1);\n    total_size = lVar2_copy;\n  }\n  else {\n    found_section = '\\0';\n    total_size = DAT_001072f0;\n    while (is_zero = counter != 0, counter = counter + -1, is_zero) {\n      section_start = *(long *)((long)section_sizes + counter * 8);\n      if (((*(byte *)(*(long *)(section_start + 0x20) + 0x25) & 0x10) != 0) &&\n         ((*(byte *)(section_start + 0x19) & 1) == 0)) {\n        total_size = total_size + *(long *)(section_start + 0x10);\n        found_section = '\\x01';\n      }\n    }\n  }\n  if (found_section != '\\0') {\n    DAT_001072f0 = total_size;\n  }\n  free(section_sizes);\nLAB_00102aa8:\n  if (DAT_00107348 == 1) {\n    DAT_001072e0 = 0;\n    DAT_001072d8 = 0;\n    DAT_001072d0 = 0;\n    bfd_map_over_sections(binary_file_path,FUN_00103c50,0);\n    if (_DAT_00107310 != 0) {\n      if ((int)DAT_001072d0 < 5) {\n        DAT_001072d0 = 5;\n      }\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n    }\n    DAT_001072cc = FUN_00102e50(DAT_001072d8);\n    if (DAT_001072cc < 4) {\n      DAT_001072cc = 4;\n    }\n    DAT_001072c8 = FUN_00102e50();\n    if (DAT_001072c8 < 4) {\n      DAT_001072c8 = 4;\n    }\n    DAT_001072e0 = 0;\n    printf(\"%s  \",*binary_file_path);\n    ex_filename = hex_value;\n    if ((undefined8 *)binary_file_path[0x1d] != (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)binary_file_path[0x1d]);\n      ex_filename = section_end;\n    }\n    format_string = &DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)DAT_001072d0,\"section\",(ulong)DAT_001072c8,&DAT_00104067,\n           (ulong)DAT_001072cc,&DAT_001040fc,ex_filename);\n    bfd_map_over_sections(binary_file_path,FUN_00103cc0,0);\n    if (_DAT_00107310 != 0) {\n      DAT_001072e0 = DAT_001072e0 + DAT_001072f0;\n      FUN_00102fe0(\"*COM*\",DAT_001072f0,0,format_string);\n    }\n    printf(\"%-*s   \",(ulong)DAT_001072d0,\"Total\");\n    FUN_00102e90(DAT_001072c8,DAT_001072e0);\n    puts(\"\\n\");\n    return;\n  }\n  indentation_level = (-(uint)(DAT_00107348 == 0) & 0xfffffffd) + 10;\n  is_zero = DAT_00107348 == 0;\n  DAT_00107308 = 0;\n  DAT_00107300 = 0;\n  DAT_001072f8 = 0;\n  bfd_map_over_sections(binary_file_path,FUN_00102d70,0);\n  DAT_00107308 = DAT_00107308 + DAT_001072f0;\n  section_count = DAT_001072e8 + 1;\n  is_first = DAT_001072e8 == 0;\n  DAT_001072e8 = section_count;\n  if (is_first) {\n    if (DAT_00107348 == 0) {\n      string = \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (DAT_0010733c == 1) {\n        string = \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(string);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  counter = DAT_001072f8 + DAT_00107300 + DAT_00107308;\n  if (_DAT_00107334 != 0) {\n    DAT_00107328 = DAT_00107328 + DAT_001072f8;\n    DAT_00107320 = DAT_00107320 + DAT_00107300;\n    DAT_00107318 = DAT_00107318 + DAT_00107308;\n  }\n  section_count = (int)(char)((-is_zero & 0xe9U) + 0x20);\n  FUN_00102e90(indentation_level);\n  putc(section_count,_stdout);\n  FUN_00102e90(indentation_level,DAT_00107300);\n  putc(section_count,_stdout);\n  FUN_00102e90(indentation_level,DAT_00107308);\n  putc(section_count,_stdout);\n  if (DAT_00107348 == 0) {\n    string = \"%7lu\\t%7lx\";\n    if (DAT_0010733c == 1) {\n      string = \"%7lo\\t%7lx\";\n    }\n    printf(string,counter,counter);\n  }\n  else {\n    FUN_00102e90(indentation_level,counter);\n  }\n  putc(section_count,_stdout);\n  fputs(*binary_file_path,_stdout);\n  if ((undefined8 *)binary_file_path[0x1d] == (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)binary_file_path[0x1d]);\n  return;\n}\n\n",
            "called": [
                "printf",
                "fputs",
                "FUN_00102e50",
                "FUN_0010259c",
                "xexit",
                "FUN_00103cc0",
                "puts",
                "FUN_00103c50",
                "FUN_00102d70",
                "xmalloc",
                "FUN_00103d20",
                "FUN_00102fe0",
                "bfd_map_over_sections",
                "free",
                "FUN_00102e90",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102a90",
            "calling": [
                "FUN_00102a40",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "analyze_binary_00102a90"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102980",
                "FUN_00102360",
                "FUN_0010274b",
                "FUN_0010278c",
                "FUN_00103130",
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_0010278c",
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00102e50": {
            "renaming": {
                "FUN_00102e50": "print_formatted_value_00102e50",
                "param_1": "value",
                "__format": "formatString",
                "acStack_38": "outputBuffer"
            },
            "code": "\nvoid printFormattedValue_00102e50(undefined8 value)\n\n{\n  char *formatString;\n  char outputBuffer [48];\n  \n  if (DAT_0010733c == 0) {\n    formatString = \"%lu\";\n  }\n  else {\n    formatString = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      formatString = \"0%lo\";\n    }\n  }\n  sprintf(outputBuffer,formatString,value);\n  strlen(outputBuffer);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_001026f6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e50",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "print_formatted_value_00102e50"
        },
        "FUN_0010259c": {
            "renaming": {
                "FUN_0010259c": "print_extracted_string_0010259c",
                "in_RAX": "extractedString"
            },
            "code": "\nvoid printExtractedString_0010259c(void)\n\n{\n  undefined8 *extractedString;\n  \n  printf(\" (ex %s)\",*extractedString);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259c",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "print_extracted_string_0010259c"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "FUN_00102e90": {
            "renaming": {
                "FUN_00102e90": "print_formatted_number_00102e90",
                "param_1": "width",
                "param_2": "number",
                "__format": "formatString",
                "acStack_48": "buffer"
            },
            "code": "\nvoid printFormattedNumber_00102e90(ulong width,undefined8 number)\n\n{\n  char *formatString;\n  char buffer [56];\n  \n  if (DAT_0010733c == 0) {\n    sprintf(buffer,\"%lu\",number);\n    printf(\"%*s\",width & 0xffffffff,buffer);\n  }\n  else {\n    formatString = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      formatString = \"0%lo\";\n    }\n    sprintf(buffer,formatString,number);\n    printf(\"%*s\",width & 0xffffffff,buffer);\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "sprintf",
                "FUN_00102710"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e90",
            "calling": [
                "FUN_00102fe0",
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "print_formatted_number_00102e90"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00102fe0",
                "FUN_0010259c",
                "FUN_00102a90",
                "FUN_00103130",
                "FUN_001024d2",
                "FUN_00102710",
                "FUN_00102e90"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00102980"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_00102d70": {
            "renaming": {
                "FUN_00102d70": "update_data_00102d70",
                "param_2": "dataAddress",
                "uVar1": "flags",
                "lVar2": "value"
            },
            "code": "\nvoid updateData_00102d70(undefined8 param_1,long dataAddress)\n\n{\n  uint flags;\n  long value;\n  \n  flags = *(uint *)(dataAddress + 0x24);\n  if ((flags & 1) != 0) {\n    value = *(long *)(dataAddress + 0x40);\n    if (((flags & 0x10) != 0) || ((DAT_00107348 == 0 && ((flags & 8) != 0)))) {\n      DAT_001072f8 = DAT_001072f8 + value;\n      return;\n    }\n    if ((flags & 0x100) != 0) {\n      DAT_00107300 = DAT_00107300 + value;\n      return;\n    }\n    DAT_00107308 = DAT_00107308 + value;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d70",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "update_data_00102d70"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "FUN_001026f6": {
            "renaming": {
                "FUN_001026f6": "print_formatted_number_001026f6",
                "in_EAX": "numberBase",
                "__format": "formatString"
            },
            "code": "\nvoid printFormattedNumber_001026f6(void)\n\n{\n  int numberBase;\n  char *formatString;\n  \n  formatString = \"0x%lx\";\n  if (numberBase == 1) {\n    formatString = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,formatString);\n  strlen(&stack0x00000000);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026f6",
            "calling": [
                "FUN_00102e50"
            ],
            "imported": false,
            "current_name": "print_formatted_number_001026f6"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_001026ea": {
            "renaming": {
                "FUN_001026ea": "initialize_global_variables_001026ea",
                "in_RAX": "return_value",
                "unaff_retaddr": "previous_return_address"
            },
            "code": "\nundefined8 initialize_global_variables_001026ea(void)\n\n{\n  undefined8 return_value;\n  undefined8 previous_return_address;\n  \n  DAT_001072d8 = return_value;\n  return previous_return_address;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026ea",
            "calling": [
                "FUN_00103c50"
            ],
            "imported": false,
            "current_name": "initialize_global_variables_001026ea"
        },
        "FUN_00102fe0": {
            "renaming": {
                "FUN_00102fe0": "print_formatted_strings_00102fe0",
                "param_1": "str1",
                "param_2": "str2",
                "param_3": "str3"
            },
            "code": "\nvoid printFormattedStrings_00102fe0(undefined8 str1,undefined8 str2,undefined8 str3)\n\n{\n  printf(\"%-*s   \",(ulong)DAT_001072d0,str1);\n  FUN_00102e90(DAT_001072c8,str2);\n  printf(\"   \");\n  FUN_00102e90(DAT_001072cc,str3);\n  putchar(10);\n  return;\n}\n\n",
            "called": [
                "printf",
                "putchar",
                "FUN_00102e90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fe0",
            "calling": [
                "FUN_00102a90",
                "FUN_00103cc0"
            ],
            "imported": false,
            "current_name": "print_formatted_strings_00102fe0"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_0010278c",
                "FUN_00102a90",
                "FUN_00103130",
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00102db0",
                "FUN_00102a90",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00102980",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103d20",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00103130",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00102f40": {
            "renaming": {
                "FUN_00102f40": "extract_data_00102f40",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "isTrue",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "resultBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid extractData_00102f40(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char isTrue;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined resultBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (isTrue != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = resultBuffer;\n  bufferSize = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  FUN_00102ee0(data,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00102ee0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f40",
            "calling": [
                "FUN_00102980",
                "FUN_00102360",
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "extract_data_00102f40"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_0010274b",
                "FUN_00102ee0",
                "FUN_0010278c",
                "FUN_00103130",
                "FUN_0010281b"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "puts": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102a90",
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "puts"
        },
        "FUN_00103070": {
            "renaming": {
                "FUN_00103070": "FUNC_00103070"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid FUNC_00103070(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103070",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103070"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102a90"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_00102db0": {
            "renaming": {
                "FUN_00102db0": "format_and_print_00102db0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "param_5": "value5",
                "param_6": "value6",
                "param_7": "value7",
                "param_8": "value8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "__format": "formatString",
                "uVar1": "formattedValue",
                "acStack_110": "outputString",
                "local_d8": "length",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "param10Value",
                "local_a8": "param11Value",
                "local_a0": "param12Value",
                "local_98": "param13Value",
                "local_90": "param14Value",
                "local_88": "value1Copy",
                "local_78": "value2Copy",
                "local_68": "value3Copy",
                "local_58": "value4Copy",
                "local_48": "value5Copy",
                "local_38": "value6Copy",
                "local_28": "value7Copy",
                "local_18": "value8Copy"
            },
            "code": "\nvoid formatAndPrint_00102db0(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4,\n                 undefined4 value5,undefined4 value6,undefined4 value7,undefined4 value8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  char *formatString;\n  undefined8 formattedValue;\n  char outputString [48];\n  undefined4 length;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 param10Value;\n  undefined8 param11Value;\n  undefined8 param12Value;\n  undefined8 param13Value;\n  undefined8 param14Value;\n  undefined4 value1Copy;\n  undefined4 value2Copy;\n  undefined4 value3Copy;\n  undefined4 value4Copy;\n  undefined4 value5Copy;\n  undefined4 value6Copy;\n  undefined4 value7Copy;\n  undefined4 value8Copy;\n  \n  if (condition != '\\0') {\n    value1Copy = value1;\n    value2Copy = value2;\n    value3Copy = value3;\n    value4Copy = value4;\n    value5Copy = value5;\n    value6Copy = value6;\n    value7Copy = value7;\n    value8Copy = value8;\n  }\n  stackPointer = &stack0x00000008;\n  length = 8;\n  localBuffer = localArray;\n  bufferSize = 0x30;\n  param10Value = param10;\n  param11Value = param11;\n  param12Value = param12;\n  param13Value = param13;\n  param14Value = param14;\n  FUN_00102ee0(param9,&length);\n  formattedValue = 1;\n  xexit(1);\n  if (DAT_0010733c == 0) {\n    formatString = \"%lu\";\n  }\n  else {\n    formatString = \"0x%lx\";\n    if (DAT_0010733c == 1) {\n      formatString = \"0%lo\";\n    }\n  }\n  sprintf(outputString,formatString,formattedValue);\n  strlen(outputString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102ee0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102db0",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "format_and_print_00102db0"
        },
        "FUN_00102980": {
            "renaming": {
                "FUN_00102980": "check_file_00102980",
                "param_1": "filename",
                "cVar1": "check_result",
                "iVar2": "stat_result",
                "piVar3": "errno_ptr",
                "uVar4": "error_msg",
                "pcVar5": "str_errno",
                "lVar6": "file_descriptor",
                "sStack_b8": "file_stat"
            },
            "code": "\nvoid check_file_00102980(char *filename)\n\n{\n  char check_result;\n  int stat_result;\n  int *errno_ptr;\n  undefined8 error_msg;\n  char *str_errno;\n  long file_descriptor;\n  stat file_stat;\n  \n  if (filename != (char *)0x0) {\n    stat_result = stat(filename,&file_stat);\n    if (stat_result < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00102f40(error_msg,filename);\n      }\n      else {\n        str_errno = strerror(*errno_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00102f40(error_msg,filename,str_errno);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00102f40(error_msg,filename);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00102f40(error_msg,filename);\n      }\n      else if (file_stat.st_size != 0) {\n        file_descriptor = bfd_openr(filename,DAT_00107340);\n        if (file_descriptor != 0) {\n          check_result = bfd_check_format(file_descriptor,2);\n          if (check_result != '\\0') {\n            FUN_001023b6();\n            return;\n          }\n          FUN_00102a40(file_descriptor);\n          check_result = bfd_close(file_descriptor);\n          if (check_result != '\\0') {\n            return;\n          }\n        }\n        FUN_00103d20(filename);\n        DAT_00107314 = 1;\n        return;\n      }\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00102f40(error_msg,filename);\n    }\n  }\n  DAT_00107314 = 1;\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "FUN_00102360",
                "bfd_openr",
                "FUN_001023b6",
                "FUN_00102a40",
                "stat",
                "dcgettext",
                "FUN_00102f40"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102980",
            "calling": [
                "FUN_00103130"
            ],
            "imported": false,
            "current_name": "check_file_00102980"
        },
        "bfd_core_file_failing_command": {
            "renaming": {},
            "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n",
            "called": [
                "bfd_core_file_failing_command"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001024d2"
            ],
            "imported": false,
            "current_name": "bfd_core_file_failing_command"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020",
                "undefined": "indirectAddress"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(indirectAddress *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        }
    },
    "used_tokens": 18868,
    "layers": [
        [
            "FUN_00103d20",
            "FUN_001024d2",
            "FUN_001023b6",
            "FUN_0010281b",
            "FUN_00102ee0",
            "FUN_00102710",
            "FUN_0010278c",
            "FUN_00103c50",
            "FUN_00102a40",
            "FUN_0010274b",
            "FUN_00103cc0",
            "FUN_00102360",
            "FUN_00103130",
            "FUN_00102a90",
            "FUN_00102e50",
            "FUN_0010259c",
            "FUN_00102e90",
            "FUN_00102d70",
            "FUN_001026f6",
            "FUN_001026ea",
            "FUN_00102fe0",
            "FUN_00102f40",
            "FUN_00102db0",
            "FUN_00102980",
            "FUN_00102020"
        ]
    ],
    "locked_functions": []
}