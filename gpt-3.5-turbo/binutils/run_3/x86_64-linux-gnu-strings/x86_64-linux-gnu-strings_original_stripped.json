{
    "functions": {
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00102b11": {
            "renaming": {
                "FUN_00102b11": "process_string_00102b11",
                "param_1": "input",
                "param_2": "startAddress",
                "param_3": "srcBuffer",
                "param_4": "srcLength",
                "param_5": "string_min",
                "param_6": "output"
            },
            "code": "\n\n\nvoid processString_00102b11(undefined8 input,long startAddress,undefined8 srcBuffer,long srcLength,uint string_min,\n                 long output)\n\n{\n  undefined uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  ulong uVar6;\n  undefined uVar7;\n  undefined uVar8;\n  uint uVar9;\n  undefined uVar10;\n  ulong local_80;\n  uint local_4c [3];\n  uint local_40;\n  byte local_3c;\n  byte local_3b;\n  byte local_3a;\n  byte local_39;\n  \n  uVar9 = 0;\n  local_40 = 0;\n  local_80 = 0;\n  uVar6 = 0;\n  local_4c[0] = string_min;\n  uVar2 = 0;\n  while (uVar5 = (uint)uVar6, uVar9 < string_min) {\n    uVar2 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n    if (uVar2 == 0xffffffff) break;\n    if (uVar2 < 0x100) {\n      uVar10 = (undefined)uVar2;\n      if (uVar2 == 9) {\n        if (uVar9 == 0) {\n          local_80 = (ulong)(local_40 - 1);\n        }\nLAB_00102c09:\n        uVar9 = uVar9 + 1;\n        *(undefined *)(output + uVar6) = uVar10;\n        uVar6 = (ulong)(uVar5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)uVar2 * 2) & 0x10) == 0) {\n          if ((encoding != 'S') || ((int)uVar2 < 0x80)) {\n            if ((include_all_whitespace == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)uVar2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (uVar9 == 0) {\n            local_80 = (ulong)(local_40 - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (uVar9 == 0) {\n            local_80 = (ulong)(local_40 - 1);\n          }\n          if ((int)uVar2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)uVar2 < 0xc0) goto LAB_00102b96;\n        uVar3 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n        if (uVar3 == 0xffffffff) {\nLAB_00102dee:\n          uVar2 = 0xffffffff;\n          break;\n        }\n        uVar7 = (undefined)uVar3;\n        if ((uVar3 & 0xc0) == 0x80) {\n          if ((uVar2 & 0x20) == 0) {\n            if (unicode_display == 5) goto LAB_00102c67;\n            uVar9 = uVar9 + 1;\n            *(undefined *)(output + uVar6) = uVar10;\n            *(undefined *)(output + (ulong)(uVar5 + 1)) = uVar7;\n            uVar6 = (ulong)(uVar5 + 2);\n            uVar2 = uVar3;\n          }\n          else {\n            uVar3 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n            if (uVar3 == 0xffffffff) goto LAB_00102dee;\n            uVar8 = (undefined)uVar3;\n            if ((uVar3 & 0xc0) == 0x80) {\n              if ((uVar2 & 0x10) == 0) {\n                if (unicode_display == 5) goto LAB_00102ce5;\n                uVar9 = uVar9 + 1;\n                *(undefined *)(output + uVar6) = uVar10;\n                uVar6 = (ulong)(uVar5 + 3);\n                *(undefined *)(output + (ulong)(uVar5 + 1)) = uVar7;\n                *(undefined *)(output + (ulong)(uVar5 + 2)) = uVar8;\n                uVar2 = uVar3;\n              }\n              else {\n                uVar2 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n                if (uVar2 == 0xffffffff) goto LAB_00102dee;\n                uVar1 = (undefined)uVar2;\n                if ((uVar2 & 0xc0) == 0x80) {\n                  if (unicode_display == 5) {\n                    *(undefined *)(srcLength + (ulong)local_4c[0]) = uVar1;\n                    *(undefined *)(srcLength + (ulong)(local_4c[0] + 1)) = uVar7;\n                    *(undefined *)(srcLength + (ulong)(local_4c[0] + 2)) = uVar8;\n                    goto LAB_00102db9;\n                  }\n                  uVar9 = uVar9 + 1;\n                  *(undefined *)(output + uVar6) = uVar10;\n                  *(undefined *)(output + (ulong)(uVar5 + 1)) = uVar7;\n                  uVar6 = (ulong)(uVar5 + 4);\n                  *(undefined *)(output + (ulong)(uVar5 + 2)) = uVar8;\n                  *(undefined *)(output + (ulong)(uVar5 + 3)) = uVar1;\n                }\n                else {\n                  *(undefined *)(srcLength + (ulong)local_4c[0]) = uVar1;\n                  *(undefined *)(srcLength + (ulong)(local_4c[0] + 1)) = uVar8;\n                  *(undefined *)(srcLength + (ulong)(local_4c[0] + 2)) = uVar7;\nLAB_00102db9:\n                  local_4c[0] = local_4c[0] + 3;\n                  uVar6 = 0;\n                  uVar9 = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              uVar6 = 0;\n              uVar9 = 0;\n              *(undefined *)(srcLength + (ulong)local_4c[0]) = uVar8;\n              *(undefined *)(srcLength + (ulong)(local_4c[0] + 1)) = uVar7;\n              local_4c[0] = local_4c[0] + 2;\n              uVar2 = uVar3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          uVar9 = 0;\n          *(undefined *)(srcLength + (ulong)local_4c[0]) = uVar7;\n          uVar6 = 0;\n          local_4c[0] = local_4c[0] + 1;\n          uVar2 = uVar3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      uVar9 = 0;\n      uVar6 = 0;\n    }\n  }\n  if (uVar9 < string_min) {\n    if (uVar2 != 0xffffffff) {\nLAB_0010308d:\n      processString_00102b11(input,(ulong)local_40 + startAddress,srcBuffer,srcLength,local_4c[0],output);\n    }\n  }\n  else {\n    uVar2 = 0;\n    print_filename_and_address(input,local_80 + startAddress);\n    while (uVar2 < uVar5) {\n      uVar6 = (ulong)uVar2;\n      if (*(byte *)(uVar6 + output) < 0x7f) {\n        uVar2 = uVar2 + 1;\n        putc((uint)*(byte *)(uVar6 + output),_stdout);\n      }\n      else {\n        iVar4 = display_utf8_char();\n        uVar2 = uVar2 + iVar4;\n      }\n    }\n    while( true ) {\n      uVar2 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n      if (uVar2 == 0xffffffff) break;\n      if (0xff < uVar2) {\nLAB_00103049:\n        if (output_separator == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(output_separator,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (uVar2 == 9) {\nLAB_00102ed4:\n        putc(uVar2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)uVar2 * 2) & 0x10) == 0) {\n          if ((encoding != 'S') || ((int)uVar2 < 0x80)) {\n            if ((include_all_whitespace == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)uVar2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)uVar2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)uVar2 < 0xc0) goto LAB_00103049;\n        local_3c = (byte)uVar2;\n        iVar4 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n        if (iVar4 == -1) break;\n        local_3b = (byte)iVar4;\n        if ((local_3b & 0xc0) != 0x80) {\nLAB_00102f32:\n          uVar6 = (ulong)local_4c[0];\n          local_4c[0] = local_4c[0] + 1;\n          *(byte *)(srcLength + uVar6) = local_3b;\njoined_r0x00102f51:\n          if (output_separator == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(output_separator,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((local_3c & 0x20) == 0) {\n          if (unicode_display != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        iVar4 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n        if (iVar4 == -1) break;\n        local_3a = (byte)iVar4;\n        if ((local_3a & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(srcLength + (ulong)local_4c[0]) = local_3a;\n          uVar2 = local_4c[0] + 1;\n          local_4c[0] = local_4c[0] + 2;\nLAB_00102ff2:\n          *(byte *)(srcLength + (ulong)uVar2) = local_3b;\n          goto joined_r0x00102f51;\n        }\n        if ((local_3c & 0x10) != 0) {\n          iVar4 = get_unicode_byte(srcBuffer,srcLength,local_4c,&local_40);\n          if (iVar4 != -1) {\n            local_39 = (byte)iVar4;\n            if (((local_39 & 0xc0) == 0x80) && (unicode_display != 5)) goto LAB_0010300e;\n            *(byte *)(srcLength + (ulong)local_4c[0]) = local_39;\n            *(byte *)(srcLength + (ulong)(local_4c[0] + 1)) = local_3a;\n            uVar2 = local_4c[0] + 2;\n            local_4c[0] = local_4c[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (unicode_display == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_utf8_char(&local_3c);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "print_unicode_stream_body",
                "putc",
                "fputs",
                "get_unicode_byte",
                "display_utf8_char",
                "print_filename_and_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102b11",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "process_string_00102b11"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00109148": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109148",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00109148"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00109140": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109140",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00109140"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_00103a50": {
            "renaming": {
                "FUN_00103a50": "initialize_00103a50",
                "completed_0": "is_initialized",
                "__dso_handle": "destructor_handle"
            },
            "code": "\nvoid initialize_00103a50(void)\n\n{\n  if (is_initialize_00103a50d != '\\0') {\n    return;\n  }\n  __cxa_finalize(destructor_handle);\n  deregister_tm_clones();\n  is_initialize_00103a50d = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a50",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00103a50"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010286f": {
            "renaming": {
                "FUN_0010286f": "print_formatted_value_0010286f",
                "param_1": "value",
                "address_radix": "radix"
            },
            "code": "\nvoid printFormattedValue_0010286f(undefined8 value)\n\n{\n  if (radix == 10) {\n    printf(\"%7ld \",value);\n    return;\n  }\n  if (radix != 0x10) {\n    if (radix == 8) {\n      printf(\"%7lo \",value);\n      return;\n    }\n    return;\n  }\n  printf(\"%7lx \",value);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010286f",
            "calling": [
                "FUN_0010259a",
                "print_filename_and_address.cold"
            ],
            "imported": false,
            "current_name": "print_formatted_value_0010286f"
        },
        "FUN_00109158": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109158",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00109158"
        },
        "FUN_00109038": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109038",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_00109038"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_monitoring_00102000",
                "ctx": "context",
                "iVar1": "monitoringResult"
            },
            "code": "\nint initializeMonitoring_00102000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringResult;\n  \n  monitoringResult = __gmon_start__();\n  return monitoringResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitoring_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_0010259a",
                "print_filename_and_address.part.0",
                "main",
                "print_filename_and_address.cold",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00109030": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109030",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00109030"
        },
        "FUN_0010290e": {
            "renaming": {
                "FUN_0010290e": "read_next_byte_0010290e",
                "param_1": "file_stream",
                "param_2": "current_position",
                "param_3": "remaining_bytes",
                "param_4": "bytes_read",
                "pbVar1": "read_ptr",
                "uVar2": "result"
            },
            "code": "\nuint read_next_byte_0010290e(_IO_FILE *file_stream,long current_position,uint *remaining_bytes,int *bytes_read)\n\n{\n  byte *read_ptr;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(current_position + (ulong)result);\n  }\n  *bytes_read = *bytes_read + 1;\n  read_ptr = (byte *)file_stream->_IO_read_ptr;\n  if (file_stream->_IO_read_end <= read_ptr) {\n    result = __uflow(file_stream);\n    return result;\n  }\n  file_stream->_IO_read_ptr = (char *)(read_ptr + 1);\n  return (uint)*read_ptr;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010290e",
            "calling": [
                "print_unicode_stream_body"
            ],
            "imported": false,
            "current_name": "read_next_byte_0010290e"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_001090e8": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090e8",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_001090e8"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "print_strings",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "print_unicode_stream_body",
                "report",
                "FUN_0010259a",
                "print_strings",
                "display_utf8_char"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010259a": {
            "renaming": {
                "FUN_0010259a": "process_and_print_strings_0010259a",
                "in_R8": "inputIndex",
                "unaff_R14": "stringBuffer",
                "unaff_R15": "outputFormat",
                "bVar3": "isWhiteSpace",
                "param_7": "stringIndex",
                "param_8": "inputPrompt",
                "param_11": "separator",
                "print_addresses": "shouldPrintAddresses",
                "print_filename_and_address_part_0": "printFileAddress",
                "putc": "writeChar",
                "get_char": "readChar",
                "unget_part_char": "unreadChar",
                "fputs": "writeString",
                "_stdout": "standardOutput",
                "output_separator": "separatorString",
                "string_min": "minStringLength",
                "include_all_whitespace": "includeAllWhitespace",
                "encoding": "textEncoding",
                "_sch_istable": "characterTable",
                "free": "freeMemory",
                "process_input_001034fa": "processInput",
                "print_and_process_strings_00103510": "printAndProcessStrings",
                "process_input_001034d5": "processInput"
            },
            "code": "\n\n\nvoid processAndPrintStrings_0010259a(void)\n\n{\n  uint uVar1;\n  ulong uVar2;\n  ulong inputIndex;\n  char *stringBuffer;\n  undefined8 outputFormat;\n  bool isWhiteSpace;\n  uint stringIndex;\n  undefined8 inputPrompt;\n  undefined8 separator;\n  \n  do {\n    stringIndex = (uint)inputIndex;\n    printf(\"%s: \",inputPrompt);\n    inputIndex = (ulong)stringIndex;\n    do {\n      if (shouldPrintAddresses == '\\0') {\n        stringBuffer[inputIndex] = '\\0';\n        writeString(stringBuffer,standardOutput);\n      }\n      else {\n        stringIndex = (uint)inputIndex;\n        printFileAddress(outputFormat);\n        stringBuffer[stringIndex] = '\\0';\n        writeString(stringBuffer,standardOutput);\n      }\n      while (uVar2 = readChar(), uVar2 != 0xffffffffffffffff) {\n        if (0xff < uVar2) {\nLAB_0010348e:\n          unreadChar();\n          break;\n        }\n        if (uVar2 == 9) {\nLAB_00102438:\n          writeChar((int)uVar2,standardOutput);\n        }\n        else {\n          if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n            if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n               ((includeAllWhitespace == '\\0' ||\n                ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          writeChar((int)uVar2,standardOutput);\n        }\n      }\n      if (separatorString == (char *)0x0) {\n        writeChar(10,standardOutput);\n      }\n      else {\n        writeString(separatorString,standardOutput);\n      }\n      while (inputIndex = (ulong)minStringLength, minStringLength != 0) {\n        uVar2 = readChar();\n        uVar1 = minStringLength;\n        if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (uVar2 < 0x100) {\n          if (uVar2 == 9) {\nLAB_001023f5:\n            *stringBuffer = (char)uVar2;\n            if (uVar1 < 2) {\n              processInput();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *stringBuffer = (char)uVar2;\n            if (uVar1 < 2) {\n              inputIndex = 1;\n              break;\n            }\n          }\n          uVar2 = readChar();\n          uVar1 = minStringLength;\n          if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_001023bb:\n            stringBuffer[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              printAndProcessStrings();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            stringBuffer[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              inputIndex = 2;\n              break;\n            }\n          }\n          uVar2 = readChar();\n          uVar1 = minStringLength;\n          if (uVar2 == 0xffffffffffffffff) {\nLAB_001034be:\n            freeMemory(stringBuffer);\n            return;\n          }\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_00102381:\n            stringBuffer[2] = (char)uVar2;\n          }\n          else {\n            if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0) {\n              if (((textEncoding != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((includeAllWhitespace == '\\0' ||\n                  ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            stringBuffer[2] = (char)uVar2;\n          }\n          if (3 < uVar1) {\n            inputIndex = 3;\n            do {\n              stringIndex = (uint)inputIndex;\n              uVar2 = readChar();\n              if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < uVar2) goto code_r0x001034d5;\n              if (((uVar2 != 9) && ((*(ushort *)(&characterTable + uVar2 * 2) & 0x10) == 0)) &&\n                 ((textEncoding != 'S' || ((long)uVar2 < 0x80)))) {\n                if (includeAllWhitespace == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&characterTable + uVar2 * 2) & 0x40) == 0) {\n                  processInput();\n                  return;\n                }\n              }\n              inputIndex = (ulong)(stringIndex + 1);\n              isWhiteSpace = minStringLength <= stringIndex + 1;\n              stringBuffer[stringIndex] = (char)uVar2;\n              if (isWhiteSpace) goto joined_r0x0010341b;\n            } while( true );\n          }\n          inputIndex = 3;\n          break;\n        }\ncode_r0x001034d5:\n        unreadChar();\n      }\njoined_r0x0010341b:\n      outputFormat = separator;\n    } while (print_filenames == '\\0');\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034fa",
                "FUN_001034d5",
                "FUN_00103510",
                "get_char",
                "print_strings.cold",
                "printf",
                "unget_part_char",
                "putc",
                "fputs",
                "free",
                "FUN_0010259a",
                "print_filename_and_address.part.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259a",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_and_print_strings_0010259a"
        },
        "FUN_001028b2": {
            "renaming": {
                "FUN_001028b2": "decode_byte_sequence_001028b2",
                "param_1": "byteSequence",
                "param_2": "byteSequenceLength",
                "bVar1": "firstByte",
                "lVar2": "result"
            },
            "code": "\nlong decodeByteSequence_001028b2(byte *byteSequence,long byteSequenceLength)\n\n{\n  byte firstByte;\n  long result;\n  \n  firstByte = *byteSequence;\n  if ((0xbf < firstByte) && (byteSequenceLength != 1)) {\n    result = 0;\n    if ((byteSequence[1] & 0xc0) == 0x80) {\n      if ((firstByte & 0x20) == 0) {\n        return 2;\n      }\n      if ((byteSequenceLength != 2) && ((byteSequence[2] & 0xc0) == 0x80)) {\n        if ((firstByte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (byteSequenceLength != 3) {\n            return (ulong)((byteSequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028b2",
            "calling": [
                "print_strings"
            ],
            "imported": false,
            "current_name": "decode_byte_sequence_001028b2"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_00109048": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109048",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00109048"
        },
        "FUN_00109160": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109160",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00109160"
        },
        "FUN_00102771": {
            "renaming": {
                "FUN_00102771": "swap_endian_00102771",
                "unaff_RBX": "input"
            },
            "code": "\nulong swapEndian_00102771(void)\n\n{\n  ulong input;\n  \n  return input >> 0x18 & 0xff |\n         (input & 0xff) << 0x18 | (ulong)((uint)(input << 8) & 0xff0000) |\n         (ulong)((uint)(input >> 8) & 0xff00);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102771",
            "calling": [
                "get_char"
            ],
            "imported": false,
            "current_name": "swap_endian_00102771"
        },
        "FUN_001034fa": {
            "renaming": {
                "FUN_001034fa": "process_input_001034fa",
                "unaff_R14": "outputBuffer",
                "unaff_R15": "address",
                "in_stack_00000010": "inputFilename",
                "in_stack_00000038": "separator",
                "uVar1": "character",
                "uVar2": "minLength",
                "uVar3": "index",
                "uVar4": "counter",
                "bVar5": "isWhitespace"
            },
            "code": "\n\n\nvoid processInput_001034fa(void)\n\n{\n  ulong character;\n  uint minLength;\n  ulong index;\n  ulong counter;\n  char *outputBuffer;\n  undefined8 address;\n  bool isWhitespace;\n  undefined8 inputFilename;\n  undefined8 separator;\n  \ncode_r0x001034fa:\n  counter = 1;\njoined_r0x0010341b:\n  do {\n    if (print_filenames != '\\0') {\n      printf(\"%s: \",inputFilename);\n    }\n    if (print_addresses == '\\0') {\n      outputBuffer[counter] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      print_filename_and_address_part_0(address);\n      outputBuffer[counter] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (counter = get_char(), counter != 0xffffffffffffffff) {\n      if (0xff < counter) {\nLAB_0010348e:\n        unget_part_char();\n        break;\n      }\n      if (counter == 9) {\nLAB_00102438:\n        putc((int)counter,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + counter * 2) & 0x10) == 0) {\n          if (((encoding != 'S') || ((long)counter < 0x80)) &&\n             ((include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&_sch_istable + counter * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)counter,_stdout);\n      }\n    }\n    if (output_separator == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(output_separator,_stdout);\n    }\n    while (counter = (ulong)string_min, address = separator, string_min != 0) {\n      counter = get_char();\n      minLength = string_min;\n      if (counter == 0xffffffffffffffff) goto LAB_001034be;\n      if (counter < 0x100) {\n        if (counter == 9) {\nLAB_001023f5:\n          *outputBuffer = (char)counter;\n          if (minLength < 2) {\n            processInput_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)counter < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputBuffer = (char)counter;\n          if (minLength < 2) goto code_r0x001034fa;\n        }\n        counter = get_char();\n        minLength = string_min;\n        if (counter == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < counter) goto code_r0x001034d5;\n        if (counter == 9) {\nLAB_001023bb:\n          outputBuffer[1] = (char)counter;\n          if (minLength < 3) {\n            print_and_process_strings_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)counter < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputBuffer[1] = (char)counter;\n          if (minLength < 3) {\n            counter = 2;\n            break;\n          }\n        }\n        counter = get_char();\n        minLength = string_min;\n        if (counter == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputBuffer);\n          return;\n        }\n        if (0xff < counter) goto code_r0x001034d5;\n        if (counter == 9) {\nLAB_00102381:\n          outputBuffer[2] = (char)counter;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + counter * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)counter < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputBuffer[2] = (char)counter;\n        }\n        if (3 < minLength) {\n          index = 3;\n          do {\n            character = get_char();\n            if (character == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < character) goto code_r0x001034d5;\n            if (((character != 9) && ((*(ushort *)(&_sch_istable + character * 2) & 0x10) == 0)) &&\n               ((encoding != 'S' || ((long)character < 0x80)))) {\n              if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + character * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            minLength = (int)index + 1;\n            counter = (ulong)minLength;\n            isWhitespace = string_min <= minLength;\n            outputBuffer[index] = (char)character;\n            index = counter;\n            if (isWhitespace) goto joined_r0x0010341b;\n          } while( true );\n        }\n        counter = 3;\n        break;\n      }\ncode_r0x001034d5:\n      unget_part_char();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034fa",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_input_001034fa"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_001090f8": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090f8",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_001090f8"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "report",
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00109178": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109178",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_00109178"
        },
        "FUN_00109058": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109058",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00109058"
        },
        "FUN_001039b0": {
            "renaming": {
                "FUN_001039b0": "start_main_loop_001039b0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "auxStack",
                "__libc_start_main": "libcStartMain",
                "main": "entryPoint"
            },
            "code": "\nvoid processEntry startMainLoop_001039b0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined auxStack [8];\n  \n  libcStartMain(entryPoint,arg2,&stack0x00000008,0,0,arg1,auxStack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001039b0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_001039b0"
        },
        "FUN_00103aa0": {
            "renaming": {
                "FUN_00103aa0": "parse_and_print_strings_00103aa0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer1",
                "bVar2": "byteVar1",
                "bVar3": "byteVar2",
                "cVar4": "charVar",
                "iVar5": "index",
                "uVar6": "temp",
                "iVar7": "count",
                "uVar8": "temp2",
                "__stream": "fileStream",
                "sVar9": "sizeVar1",
                "sVar10": "sizeVar2",
                "__ptr": "buffer",
                "lVar11": "tempLong",
                "plVar12": "argvTemp",
                "uVar13": "ulongVar",
                "__src": "sourceArray",
                "uVar14": "temp3",
                "__stream_00": "fileStream2",
                "piVar15": "intPointer",
                "plVar16": "argvNew",
                "uVar17": "temp4",
                "plVar18": "sourceArrayElement",
                "pbVar19": "bytePointer2",
                "pcVar20": "str",
                "puVar21": "undefinedPointer1",
                "lVar22": "tempLong2",
                "pbVar23": "bytePointer3",
                "pcVar24": "str2",
                "bVar25": "boolVar1",
                "unaff_R12": "tempLongArray",
                "puVar26": "undefinedPointer2",
                "bVar27": "boolVar2",
                "bVar28": "boolVar3",
                "local_140": "argvIndexArray",
                "local_138": "longPointer1",
                "local_128": "bytePointer4",
                "local_120": "ulongVar2",
                "local_118": "sizeVar3",
                "local_110": "tempLong3",
                "local_d8": "charArray",
                "local_d0": "voidPointer",
                "local_c8": "statStruct",
                "setlocale": "setLocale",
                "bindtextdomain": "bindTextDomain",
                "textdomain": "textDomain",
                "program_name": "programName",
                "xmalloc_set_program_name": "setProgramName",
                "bfd_set_error_program_name": "setErrorProgramName",
                "fopen": "openFile",
                "fseek": "seek",
                "ftell": "tell",
                "fread": "read",
                "ferror": "error",
                "fprintf": "printFormatted",
                "fclose": "closeFile",
                "strcmp": "compareStrings",
                "xstrdup": "duplicateString",
                "dcgettext": "getLocaleText",
                "fatal": "errorMessage",
                "xexit": "exitProgram",
                "usage": "printUsage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "exit": "exitProgram"
            },
            "code": "\n\n\n\nFILE * parse_and_print_strings_00103aa0(int argc,long *argv)\n\n{\n  byte *bytePointer1;\n  byte byteVar1;\n  byte byteVar2;\n  char charVar;\n  int index;\n  uint temp;\n  int count;\n  undefined4 temp2;\n  FILE *fileStream;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *buffer;\n  long tempLong;\n  long *argvTemp;\n  ulong ulongVar;\n  long *sourceArray;\n  undefined8 temp3;\n  FILE *fileStream2;\n  int *intPointer;\n  long *argvNew;\n  undefined8 temp4;\n  long *sourceArrayElement;\n  byte *bytePointer2;\n  char *str;\n  undefined1 *undefinedPointer1;\n  long tempLong2;\n  byte *bytePointer3;\n  char *str2;\n  bool boolVar1;\n  long *tempLongArray;\n  undefined8 *undefinedPointer2;\n  bool boolVar2;\n  bool boolVar3;\n  long *argvIndexArray;\n  undefined8 longPointer1;\n  undefined8 bytePointer4;\n  ulong ulongVar2;\n  size_t sizeVar3;\n  long tempLong3;\n  char *charArray;\n  void *voidPointer;\n  stat statStruct;\n  \n  setLocale(6,\"\");\n  bindTextDomain(\"binutils\",\"/usr/share/locale\");\n  textDomain(\"binutils\");\n  programName = *argv;\n  setProgramName();\n  setErrorProgramName(programName);\n  argvNew = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  ulongVar2 = 2000;\n  tempLongArray = (long *)0x1;\n  longPointer1 = (long *)0x0;\n  argvTemp = argv;\n  do {\n    count = (int)tempLongArray;\n    undefinedPointer1 = (undefined1 *)(long)count;\n    argvIndexArray = (long *)((long)undefinedPointer1 * 8);\n    argvNew = argvTemp;\n    if (*(char *)argvTemp[(long)undefinedPointer1] == '@') {\n      temp = (int)ulongVar2 - 1;\n      ulongVar2 = (ulong)temp;\n      if (temp == 0) {\n        tempLong = *argvTemp;\n        str = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      str = (char *)argvTemp[(long)undefinedPointer1] + 1;\n      index = stat(str,&statStruct);\n      if (-1 < index) {\n        if ((statStruct.st_mode & 0xf000) == 0x4000) {\n          do {\n            tempLong = *argvTemp;\n            str = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            printFormatted(standardError,str,tempLong);\n            exitProgram(1);\n          } while( true );\n        }\n        fileStream = openFile(str,\"r\");\n        if (fileStream != (FILE *)0x0) {\n          index = seek(fileStream,0,2);\n          if (((index != -1) && (sizeVar1 = tell(fileStream), sizeVar1 != 0xffffffffffffffff)) &&\n             (index = seek(fileStream,0,0), index != -1)) {\n            bytePointer4 = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = read(bytePointer4,1,sizeVar1,fileStream);\n            if ((sizeVar1 == sizeVar2) || (index = error(fileStream), index == 0)) {\n              bytePointer4[sizeVar2] = 0;\n              byteVar2 = *bytePointer4;\n              bytePointer2 = bytePointer4;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = bytePointer2[1];\n                bytePointer2 = bytePointer2 + 1;\n              }\n              sizeVar1 = strlen((char *)bytePointer4);\n              buffer = (byte *)xmalloc(sizeVar1 + 1);\n              sourceArray = (long *)0x0;\n              index = 0;\n              tempLong3 = 0;\n              boolVar1 = false;\n              boolVar3 = false;\n              boolVar2 = false;\n              bytePointer2 = bytePointer4;\n              do {\n                while (((&_sch_istable)[(ulong)*bytePointer2 * 2] & 0x40) != 0) {\n                  bytePointer2 = bytePointer2 + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)tempLong3)) {\n                  if (sourceArray == (long *)0x0) {\n                    index = 8;\n                    sourceArray = (long *)xmalloc(0x40);\n                    sourceArrayElement = sourceArray + tempLong3;\n                    *sourceArrayElement = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    sourceArray = (long *)xrealloc(sourceArray,(long)index << 3);\n                    sourceArrayElement = sourceArray + tempLong3;\n                    *sourceArrayElement = 0;\n                  }\n                }\n                else {\n                  sourceArrayElement = sourceArray + tempLong3;\n                }\n                byteVar2 = *bytePointer2;\n                bytePointer3 = buffer;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                      boolVar2 = false;\n                      boolVar1 = false;\n                      boolVar3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!boolVar2) break;\n                    bytePointer2 = bytePointer2 + 1;\n                    *bytePointer3 = byteVar2;\n                    bytePointer3 = bytePointer3 + 1;\n                    boolVar2 = false;\n                    byteVar2 = *bytePointer2;\n                    if (byteVar2 == 0) goto LAB_00103d4f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar2 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar2 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *bytePointer3 = byteVar2;\n                      bytePointer3 = bytePointer3 + 1;\n                    }\n                  }\n                  else if (boolVar1) {\n                    if (byteVar2 != 0x22) goto LAB_00103ec8;\n                    boolVar1 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_00103ec8;\n                    boolVar1 = true;\n                  }\n                  bytePointer1 = bytePointer2 + 1;\n                  bytePointer2 = bytePointer2 + 1;\n                  byteVar2 = *bytePointer1;\n                }\nLAB_00103d4f:\n                *bytePointer3 = 0;\n                tempLong = duplicateString(buffer);\n                *sourceArrayElement = tempLong;\n                sourceArray[tempLong3 + 1] = 0;\n                byteVar2 = *bytePointer2;\n                byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar1 & 0x40) != 0) {\n                  byteVar2 = bytePointer2[1];\n                  bytePointer2 = bytePointer2 + 1;\n                  byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                tempLong3 = tempLong3 + 1;\n                if (byteVar2 == 0) {\n                  free(buffer);\n                  if (argvTemp == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free(bytePointer4);\n          }\n          closeFile(fileStream);\n        }\n      }\n    }\n    if (argc <= count + 1) {\nLAB_00103fa6:\n      include_all_whitespace = 0;\n      fileStream = (FILE *)0x0;\n      print_addresses = 0;\n      undefinedPointer1 = long_options;\n      string_min = 4;\n      print_filenames = 0;\n      datasection_only = '\\0';\n      target = (long *)0x0;\n      encoding = 's';\n      output_separator = (long *)0x0;\n      str = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        count = (int)tempLongArray;\n        index = getopt_long(argc,argvNew,str);\n        if (index == -1) break;\n        argvTemp = (long *)str;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          printUsage(standardOutput,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          tempLongArray = (long *)&optarg;\n          target = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          tempLongArray = _optarg;\n          count = compareStrings((char *)_optarg,\"default\");\n          if ((count == 0) || (count = compareStrings((char *)tempLongArray,\"d\"), count == 0)) {\n            unicode_display = 0;\n          }\n          else {\n            count = compareStrings((char *)tempLongArray,\"locale\");\n            if ((count == 0) || (count = compareStrings((char *)tempLongArray,\"l\"), count == 0)) {\n              unicode_display = 1;\n            }\n            else {\n              count = compareStrings((char *)tempLongArray,\"escape\");\n              if ((count == 0) || (count = compareStrings((char *)tempLongArray,\"e\"), count == 0)) {\n                unicode_display = 2;\n              }\n              else {\n                count = compareStrings((char *)tempLongArray,\"invalid\");\n                if ((count == 0) || (count = compareStrings((char *)tempLongArray,\"i\"), count == 0)) {\n                  unicode_display = 5;\n                }\n                else {\n                  count = compareStrings((char *)tempLongArray,\"hex\");\n                  if ((count == 0) || (count = compareStrings((char *)tempLongArray,\"x\"), count == 0)) {\n                    unicode_display = 3;\n                  }\n                  else {\n                    count = compareStrings((char *)tempLongArray,\"highlight\");\n                    if ((count != 0) && (count = compareStrings((char *)tempLongArray,\"h\"), count != 0)) {\n                      temp3 = getLocaleText(0,\"invalid argument to -U/--unicode: %s\",5);\n                      errorMessage(temp3);\n                      report();\n                      exitProgram(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    unicode_display = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          str = (char *)getLocaleText(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(str);\n          str = (char *)getLocaleText(0,\n                                      \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(str);\n                    \n          exitProgram(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          datasection_only = '\\x01';\n          break;\n        case 0x65:\n          tempLongArray = (long *)&optarg;\n          count = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          encoding = *(char *)_optarg;\n          index = getopt_long(argc,argvNew,str);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            encoding = *(char *)_optarg;\n            index = getopt_long(argc,argvNew,str);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          fileStream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          print_filenames = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          tempLongArray = (long *)&optarg;\n          ulongVar = strtoul((char *)_optarg,&charArray,0);\n          string_min = (int)ulongVar;\n          if ((charArray != (char *)0x0) && (argvTemp = _optarg, *charArray != '\\0')) {\nLAB_001042e6:\n            temp3 = getLocaleText(0,\"invalid integer argument %s\",5);\n            errorMessage(temp3,argvTemp);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          print_addresses = 1;\n          address_radix = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          tempLongArray = (long *)&optarg;\n          output_separator = _optarg;\n          str = (char *)argvTemp;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          tempLongArray = (long *)&optarg;\n          count = 0x109108;\n          print_addresses = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          charVar = *(char *)_optarg;\n          if (charVar == 'o') {\n            address_radix = 8;\n          }\n          else if (charVar == 'x') {\n            address_radix = 0x10;\n          }\n          else {\n            if (charVar != 'd') goto switchD_00104029_caseD_3f;\n            address_radix = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (unicode_display != 0) {\n        encoding = 'S';\n      }\n      if ((int)fileStream != 0) {\nLAB_001044f5:\n        str = (char *)(argvNew + (long)(int)fileStream + -1);\n        ulongVar = strtoul((char *)(*(long *)str + 1),&charArray,0);\n        string_min = (int)ulongVar;\n        if ((charArray != (char *)0x0) && (*charArray != '\\0')) {\n          argvTemp = (long *)(*(long *)str + 1);\n          goto LAB_001042e6;\n        }\n      }\n      count = (int)tempLongArray;\n      if (string_min == 0) {\n        temp3 = getLocaleText(0,\"invalid minimum string length %d\",5);\n        errorMessage(temp3,0);\nswitchD_00104029_caseD_61:\n        datasection_only = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(encoding + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulongVar = 1L << (encoding + 0xbeU & 0x3f);\n      if ((ulongVar & 0x2000000020000) == 0) {\n        if ((ulongVar & 0x401) == 0) {\n          if ((ulongVar & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          encoding_bytes = 2;\n        }\n        else {\n          encoding_bytes = 4;\n        }\n      }\n      else {\n        encoding_bytes = 1;\n      }\n      count = bfd_init();\n      if (count == 0x118) {\n        str = \"x86_64-pc-linux-gnu\";\n        temp = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)temp != '\\0') {\n          undefinedPointer1 = &optind;\n          if (argc <= (int)_optind) {\n            datasection_only = 0;\n            print_strings(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulongVar = 0;\n          fileStream = (FILE *)0x0;\n          argvTemp = (long *)(ulong)temp;\n          temp = _optind;\n          argvIndexArray = argvNew;\n          goto LAB_001043b8;\n        }\n        temp2 = bfd_get_error();\n        undefinedPointer1 = (undefined1 *)bfd_errmsg(temp2);\n        temp3 = getLocaleText(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        errorMessage(temp3,\"x86_64-pc-linux-gnu\",undefinedPointer1);\n      }\n      temp3 = getLocaleText(0,\"errorMessage error: libbfd ABI mismatch\",5);\n      errorMessage(temp3);\n      argvTemp = argvNew;\nLAB_0010462b:\n      str2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      temp3 = getLocaleText(0,str2,5);\n      non_errorMessage(temp3,str);\n      temp = 0;\n      do {\n        while( true ) {\n          ulongVar = (ulong)argvTemp & 0xffffffff;\n          fileStream = (FILE *)(ulong)((uint)fileStream | (temp ^ 1) & 0xff);\n          while( true ) {\n            count = (int)ulongVar;\n            temp = *(uint *)undefinedPointer1 + 1;\n            *(uint *)undefinedPointer1 = temp;\n            if (argc <= (int)temp) {\n              argvNew = argvTemp;\n              if ((char)ulongVar != '\\0') {\n                return fileStream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            str = (char *)argvIndexArray[(int)temp];\n            count = compareStrings(str,\"-\");\n            if (count != 0) break;\n            datasection_only = '\\0';\n          }\n          count = stat(str,&statStruct);\n          if (count < 0) break;\n          if ((statStruct.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((datasection_only == '\\0') ||\n             (argvNew = (long *)bfd_openr(str,target), argvNew == (long *)0x0)) {\nLAB_00104416:\n            fileStream2 = openFile(str,\"r\");\n            if (fileStream2 != (FILE *)0x0) {\n              print_strings(str,fileStream2,0,0,0);\n              count = closeFile(fileStream2);\n              if (count != -1) goto LAB_00104454;\n            }\n            printFormatted(standardError,\"%s: \",programName);\n            perror(str);\n            temp = 0;\n          }\n          else {\n            charVar = bfd_check_format(argvNew,1);\n            if (charVar == '\\0') {\n              bfd_close();\n              longPointer1 = argvNew;\n              goto LAB_00104416;\n            }\n            undefinedPointer2 = (undefined8 *)argvNew[0x12];\n            longPointer1 = (long *)((ulong)argvNew & 0xffffffffffffff00);\n            bytePointer4 = (byte *)CONCAT44(bytePointer4._4_4_,argc);\n            for (; undefinedPointer2 != (undefined8 *)0x0; undefinedPointer2 = (undefined8 *)undefinedPointer2[1]) {\n              charVar = (char)longPointer1;\n              if (((*(uint *)((long)undefinedPointer2 + 0x24) & 0x103) == 0x103) &&\n                 (ulongVar2 = undefinedPointer2[8], ulongVar2 != 0)) {\n                charVar = bfd_malloc_and_get_section(argvNew,undefinedPointer2,&voidPointer);\n                if (charVar == '\\0') {\n                  temp2 = bfd_get_error();\n                  ulongVar2 = bfd_errmsg(temp2);\n                  temp3 = *undefinedPointer2;\n                  temp4 = getLocaleText(0,\"%s: Reading section %s failed: %s\",5);\n                  non_errorMessage(temp4,str,temp3);\n                  charVar = (char)longPointer1;\n                }\n                else {\n                  print_strings(str,0,undefinedPointer2[0x10],ulongVar2,voidPointer);\n                  free(voidPointer);\n                }\n              }\n              longPointer1 = (long *)CONCAT71(longPointer1._1_7_,charVar);\n            }\n            argvTemp = (long *)((ulong)argvTemp & 0xff);\n            charVar = bfd_close(argvNew);\n            if (charVar == '\\0') {\n              count = bfd_get_error();\n              if (count == 0) {\n                temp3 = getLocaleText(0,\"cause of error unknown\",5);\n                fflush(standardOutput);\n              }\n              else {\n                temp3 = bfd_errmsg();\n                fflush(standardOutput);\n              }\n              printFormatted(standardError,\"%s: %s: %s\\n\",programName,str,temp3);\n              goto LAB_00104416;\n            }\n            boolVar3 = (char)longPointer1 == '\\0';\n            if (boolVar3) goto LAB_00104416;\nLAB_00104454:\n            temp = (uint)argvTemp;\n          }\n        }\n        intPointer = __errno_location();\n        str2 = \"\\'%s\\': No such file\";\n        if (*intPointer == 2) goto LAB_00104637;\n        str2 = strerror(*intPointer);\n        temp3 = getLocaleText(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_errorMessage(temp3,str,str2);\n        temp = 0;\n      } while( true );\n    }\n    temp = count + 1;\n    longPointer1 = tempLongArray;\nLAB_00103eac:\n    tempLongArray = (long *)(ulong)temp;\n  } while( true );\nswitchD_00104029_caseD_77:\n  include_all_whitespace = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  printUsage(standardError);\nLAB_001040fd:\n  sourceArray = (long *)xmalloc(8);\n  *sourceArray = 0;\n  if (argvNew == argv) {\nLAB_0010411e:\n    if (*argvNew == 0) {\n      index = 0;\n    }\n    else {\n      tempLong = 1;\n      do {\n        index = (int)tempLong;\n        argvTemp = argvNew + tempLong;\n        tempLong = tempLong + 1;\n      } while (*argvTemp != 0);\n    }\n    tempLong2 = 0;\n    argvTemp = (long *)xmalloc((long)(index + 1) << 3);\n    tempLong = *argvNew;\n    while (tempLong != 0) {\n      temp3 = duplicateString();\n      *(undefined8 *)((long)argvTemp + tempLong2) = temp3;\n      tempLong2 = tempLong2 + 8;\n      tempLong = *(long *)((long)argvNew + tempLong2);\n    }\n    *(undefined8 *)((long)argvTemp + tempLong2) = 0;\nLAB_00103dea:\n    argvNew = argvTemp;\n    if (*sourceArray != 0) {\n      tempLong = 0;\n      do {\n        tempLong = tempLong + 1;\n      } while (sourceArray[tempLong] != 0);\n      sizeVar3 = tempLong * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  tempLong = 0;\n  sizeVar3 = 0;\n  index = argc;\nLAB_00103e18:\n  free((void *)argvNew[(long)undefinedPointer1]);\n  argvTemp = (long *)xrealloc(argvNew,(tempLong + 1 + (long)index) * 8);\n  argc = index + -1 + (int)tempLong;\n  memmove(argvTemp + (long)((long)undefinedPointer1 + tempLong),(void *)((long)(argvTemp + 1) + (long)argvIndexArray),\n          (long)(index - count) << 3);\n  memcpy((void *)((long)argvTemp + (long)argvIndexArray),sourceArray,sizeVar3);\n  free(sourceArray);\n  free(bytePointer4);\n  closeFile(fileStream);\n  temp = (int)longPointer1 + 1;\n  tempLongArray = argvIndexArray;\n  argvNew = argvTemp;\n  argvIndexArray = sourceArray;\n  if ((int)temp < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "called": [
                "ftell",
                "xstrdup",
                "fflush",
                "bfd_close",
                "memcpy",
                "bfd_set_default_target",
                "strerror",
                "ferror",
                "strcmp",
                "__errno_location",
                "printf",
                "fclose",
                "xexit",
                "bfd_check_format",
                "stat",
                "free",
                "getopt_long",
                "bfd_errmsg",
                "bindtextdomain",
                "bfd_init",
                "perror",
                "bfd_openr",
                "fopen",
                "fatal",
                "dcgettext",
                "textdomain",
                "fprintf",
                "setlocale",
                "xmalloc",
                "print_strings",
                "bfd_malloc_and_get_section",
                "bfd_set_error_program_name",
                "usage",
                "strtoul",
                "fseek",
                "xmalloc_set_program_name",
                "xrealloc",
                "non_fatal",
                "fread",
                "memmove",
                "exit",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103aa0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_and_print_strings_00103aa0"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00104af4": {
            "renaming": {
                "FUN_00104af4": "FUNC_00104af4"
            },
            "code": "\nvoid FUNC_00104af4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00104af4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00104af4"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "print_unicode_stream_body",
                "FUN_0010259a",
                "print_strings"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00103910": {
            "renaming": {
                "FUN_00103910": "analyze_and_report_00103910",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "analysis_data",
                "param_10": "data_1",
                "param_11": "data_2",
                "param_12": "data_3",
                "param_13": "data_4",
                "param_14": "data_5",
                "in_AL": "condition",
                "local_d8": "buffer_size",
                "local_d4": "constant_30",
                "local_d0": "buffer_ptr",
                "local_c8": "local_buffer",
                "local_b8": "unused_buffer",
                "local_b0": "data_1_copy",
                "local_a8": "data_2_copy",
                "local_a0": "data_3_copy",
                "local_98": "data_4_copy",
                "local_90": "data_5_copy",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\nvoid analyze_and_report_00103910(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 analysis_data,undefined8 data_1,undefined8 data_2,undefined8 data_3,\n                 undefined8 data_4,undefined8 data_5)\n\n{\n  char condition;\n  undefined4 buffer_size;\n  undefined4 constant_30;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined unused_buffer [8];\n  undefined8 data_1_copy;\n  undefined8 data_2_copy;\n  undefined8 data_3_copy;\n  undefined8 data_4_copy;\n  undefined8 data_5_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (condition != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = unused_buffer;\n  constant_30 = 0x30;\n  data_1_copy = data_1;\n  data_2_copy = data_2;\n  data_3_copy = data_3;\n  data_4_copy = data_4;\n  data_5_copy = data_5;\n  report(analysis_data,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103910",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "analyze_and_report_00103910"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103510": {
            "renaming": {
                "FUN_00103510": "print_and_process_strings_00103510",
                "uVar1": "char1",
                "uVar2": "index",
                "uVar3": "char2",
                "uVar4": "counter",
                "unaff_R14": "currentString",
                "unaff_R15": "filename",
                "bVar5": "isWhitespace",
                "in_stack_00000010": "inputFilename",
                "in_stack_00000038": "separator",
                "_sch_istable": "characterTable",
                "print_filenames": "shouldPrintFilenames",
                "print_addresses": "shouldPrintAddresses",
                "_stdout": "outputStream",
                "get_char": "getNextChar",
                "unget_part_char": "ungetPartialChar",
                "encoding": "charEncoding",
                "include_all_whitespace": "shouldIncludeAllWhitespace",
                "string_min": "minimumStringLength",
                "output_separator": "outputSeparator",
                "printf": "printText",
                "fputs": "writeTextToStream",
                "putc": "writeCharToStream",
                "free": "deallocateMemory"
            },
            "code": "\n\n\nvoid printAndProcessStrings_00103510(void)\n\n{\n  ulong char1;\n  uint index;\n  ulong char2;\n  ulong counter;\n  char *currentString;\n  undefined8 filename;\n  bool isWhitespace;\n  undefined8 inputFilename;\n  undefined8 separator;\n  \ncode_r0x00103510:\n  counter = 2;\njoined_r0x0010341b:\n  do {\n    if (shouldPrintFilenames != '\\0') {\n      printText(\"%s: \",inputFilename);\n    }\n    if (shouldPrintAddresses == '\\0') {\n      currentString[counter] = '\\0';\n      writeTextToStream(currentString,outputStream);\n    }\n    else {\n      print_filename_and_address_part_0(filename);\n      currentString[counter] = '\\0';\n      writeTextToStream(currentString,outputStream);\n    }\n    while (counter = getNextChar(), counter != 0xffffffffffffffff) {\n      if (0xff < counter) {\nLAB_0010348e:\n        ungetPartialChar();\n        break;\n      }\n      if (counter == 9) {\nLAB_00102438:\n        writeCharToStream((int)counter,outputStream);\n      }\n      else {\n        if ((*(ushort *)(&characterTable + counter * 2) & 0x10) == 0) {\n          if (((charEncoding != 'S') || ((long)counter < 0x80)) &&\n             ((shouldIncludeAllWhitespace == '\\0' ||\n              ((*(ushort *)(&characterTable + counter * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        writeCharToStream((int)counter,outputStream);\n      }\n    }\n    if (outputSeparator == (char *)0x0) {\n      writeCharToStream(10,outputStream);\n    }\n    else {\n      writeTextToStream(outputSeparator,outputStream);\n    }\n    while (counter = (ulong)minimumStringLength, filename = separator, minimumStringLength != 0) {\n      counter = getNextChar();\n      index = minimumStringLength;\n      if (counter == 0xffffffffffffffff) goto LAB_001034be;\n      if (counter < 0x100) {\n        if (counter == 9) {\nLAB_001023f5:\n          *currentString = (char)counter;\n          if (index < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&characterTable + counter * 2) & 0x10) == 0) {\n            if (((charEncoding != 'S') || ((long)counter < 0x80)) &&\n               ((shouldIncludeAllWhitespace == '\\0' ||\n                ((*(ushort *)(&characterTable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *currentString = (char)counter;\n          if (index < 2) {\n            counter = 1;\n            break;\n          }\n        }\n        counter = getNextChar();\n        index = minimumStringLength;\n        if (counter == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < counter) goto code_r0x001034d5;\n        if (counter == 9) {\nLAB_001023bb:\n          currentString[1] = (char)counter;\n          if (index < 3) {\n            printAndProcessStrings_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&characterTable + counter * 2) & 0x10) == 0) {\n            if (((charEncoding != 'S') || ((long)counter < 0x80)) &&\n               ((shouldIncludeAllWhitespace == '\\0' ||\n                ((*(ushort *)(&characterTable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          currentString[1] = (char)counter;\n          if (index < 3) goto code_r0x00103510;\n        }\n        counter = getNextChar();\n        index = minimumStringLength;\n        if (counter == 0xffffffffffffffff) {\nLAB_001034be:\n          deallocateMemory(currentString);\n          return;\n        }\n        if (0xff < counter) goto code_r0x001034d5;\n        if (counter == 9) {\nLAB_00102381:\n          currentString[2] = (char)counter;\n        }\n        else {\n          if ((*(ushort *)(&characterTable + counter * 2) & 0x10) == 0) {\n            if (((charEncoding != 'S') || ((long)counter < 0x80)) &&\n               ((shouldIncludeAllWhitespace == '\\0' ||\n                ((*(ushort *)(&characterTable + counter * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          currentString[2] = (char)counter;\n        }\n        if (3 < index) {\n          char2 = 3;\n          do {\n            char1 = getNextChar();\n            if (char1 == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < char1) goto code_r0x001034d5;\n            if (((char1 != 9) && ((*(ushort *)(&characterTable + char1 * 2) & 0x10) == 0)) &&\n               ((charEncoding != 'S' || ((long)char1 < 0x80)))) {\n              if (shouldIncludeAllWhitespace == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&characterTable + char1 * 2) & 0x40) == 0) {\n                process_input_001034d5();\n                return;\n              }\n            }\n            index = (int)char2 + 1;\n            counter = (ulong)index;\n            isWhitespace = minimumStringLength <= index;\n            currentString[char2] = (char)char1;\n            char2 = counter;\n            if (isWhitespace) goto joined_r0x0010341b;\n          } while( true );\n        }\n        counter = 3;\n        break;\n      }\ncode_r0x001034d5:\n      ungetPartialChar();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103510",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_and_process_strings_00103510"
        },
        "FUN_00109180": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109180",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00109180"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_001091a0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091a0",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_001091a0"
        },
        "FUN_0010293a": {
            "renaming": {
                "FUN_0010293a": "convert_unicode_display_0010293a",
                "param_1": "inputString",
                "bVar1": "firstChar",
                "uVar2": "secondChar",
                "iVar3": "isTerminal",
                "uVar4": "numChars",
                "uVar5": "firstCharCopy",
                "pbVar6": "ptrToChar",
                "unicode_display": "unicodeDisplay"
            },
            "code": "\n\n\nuint convertUnicodeDisplay_0010293a(byte *inputString)\n\n{\n  byte firstChar;\n  uint secondChar;\n  int isTerminal;\n  uint numChars;\n  uint firstCharCopy;\n  byte *ptrToChar;\n  \n  numChars = 2;\n  firstChar = *inputString & 0x30;\n  if ((firstChar != 0x10) && (numChars = 3, firstChar != 0x20)) {\n    numChars = (-(uint)(firstChar == 0) & 0xfffffffe) + 4;\n  }\n  if (unicodeDisplay == 3) {\n    ptrToChar = inputString + numChars;\n    putc(0x3c,_stdout);\n    printf(\"0x\");\n    do {\n      firstChar = *inputString;\n      inputString = inputString + 1;\n      printf(\"%02x\",(ulong)firstChar);\n    } while (ptrToChar != inputString);\n    putc(0x3e,_stdout);\n    return numChars;\n  }\n  if (unicodeDisplay < 4) {\n    if (unicodeDisplay == 1) {\n      printf(\"%.1s\",inputString);\n      return numChars;\n    }\n    if (unicodeDisplay == 2) {\nLAB_001029cd:\n      secondChar = (uint)inputString[1];\n      firstCharCopy = (uint)*inputString;\n      if (numChars == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((firstCharCopy & 0xf) << 4 | (int)secondChar >> 2 & 0xfU),\n               (ulong)((secondChar & 3) << 6 | inputString[2] & 0x3f));\n      }\n      else if (numChars == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((firstCharCopy & 7) << 6 | (int)secondChar >> 2 & 0xfU),\n               (ulong)((secondChar & 3) << 6 | (int)(uint)inputString[2] >> 2 & 0xfU),\n               (ulong)((inputString[2] & 3) << 6 | inputString[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*inputString >> 2 & 7),\n               (ulong)((firstCharCopy & 3) << 6 | inputString[1] & 0x3f));\n      }\n      if (unicodeDisplay != 4) {\n        return numChars;\n      }\n      isTerminal = isatty(1);\n      if (isTerminal == 0) {\n        return numChars;\n      }\n      printf(\"\\x1b[0m\");\n      return numChars;\n    }\n  }\n  else if (unicodeDisplay == 4) {\n    isTerminal = isatty(1);\n    if (isTerminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,_stderr);\n  return numChars;\n}\n\n",
            "called": [
                "isatty",
                "printf",
                "putc",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010293a",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "convert_unicode_display_0010293a"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00103520": {
            "renaming": {
                "FUN_00103520": "decode_data_00103520",
                "param_1": "file",
                "param_2": "decodedValue",
                "param_3": "remainingBytes",
                "param_4": "data",
                "bVar1": "byteValue",
                "pbVar2": "bytePointer",
                "uVar3": "result",
                "uVar4": "tempValue",
                "uVar5": "decodedData",
                "iVar6": "count",
                "iVar7": "encodingBytes"
            },
            "code": "\nulong decodeData_00103520(_IO_FILE *file,long *decodedValue,int *remainingBytes,byte **data)\n\n{\n  byte byteValue;\n  byte *bytePointer;\n  uint result;\n  ulong tempValue;\n  ulong decodedData;\n  int count;\n  int encodingBytes;\n  \n  encodingBytes = encoding_bytes;\n  if (encoding_bytes < 1) {\n    decodedData = 0;\n    if (encoding == 'L') {\n      decodedData = get_char_cold();\n      return decodedData;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (_IO_FILE *)0x0) {\n    decodedData = 0;\n    count = 0;\n    do {\n      if (*remainingBytes == 0) {\n        return 0xffffffffffffffff;\n      }\n      count = count + 1;\n      *remainingBytes = *remainingBytes + -1;\n      bytePointer = *data;\n      *data = bytePointer + 1;\n      byteValue = *bytePointer;\n      *decodedValue = *decodedValue + 1;\n      decodedData = decodedData << 8 | (ulong)byteValue;\n    } while (count != encodingBytes);\n  }\n  else if (*remainingBytes == 0) {\n    bytePointer = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= bytePointer) {\n      result = __uflow(file);\n      decodedData = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(bytePointer + 1);\n    decodedData = (ulong)*bytePointer;\n    *decodedValue = *decodedValue + 1;\n    count = 0;\n    if (encodingBytes == 1) goto LAB_00103610;\nLAB_00103574:\n    bytePointer = (byte *)file->_IO_read_ptr;\n    if (bytePointer < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(bytePointer + 1);\n      byteValue = *bytePointer;\n      *decodedValue = *decodedValue + 1;\n      decodedData = decodedData << 8 | (ulong)byteValue;\n      if (encoding_bytes < 3) goto LAB_00103610;\nLAB_001035a1:\n      bytePointer = (byte *)file->_IO_read_ptr;\n      if (bytePointer < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(bytePointer + 1);\n        byteValue = *bytePointer;\n        *decodedValue = *decodedValue + 1;\n        decodedData = decodedData << 8 | (ulong)byteValue;\n        if (encoding_bytes < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        tempValue = (ulong)(result & 0xff);\nLAB_00103717:\n        *decodedValue = *decodedValue + 1;\n        decodedData = decodedData << 8 | tempValue;\n        if (encoding_bytes < 4) goto LAB_00103610;\n        count = *remainingBytes;\n      }\n      encodingBytes = 3;\n      while( true ) {\n        if (count == 0) {\n          while (bytePointer = (byte *)file->_IO_read_ptr, bytePointer < file->_IO_read_end) {\n            encodingBytes = encodingBytes + 1;\n            file->_IO_read_ptr = (char *)(bytePointer + 1);\n            byteValue = *bytePointer;\n            *decodedValue = *decodedValue + 1;\n            decodedData = decodedData << 8 | (ulong)byteValue;\n            if (encoding_bytes <= encodingBytes) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          tempValue = (ulong)(result & 0xff);\n        }\n        else {\n          bytePointer = *data;\n          *remainingBytes = count + -1;\n          *data = bytePointer + 1;\n          tempValue = (ulong)*bytePointer;\n        }\n        *decodedValue = *decodedValue + 1;\n        encodingBytes = encodingBytes + 1;\n        decodedData = decodedData << 8 | tempValue;\n        if (encoding_bytes <= encodingBytes) break;\n        count = *remainingBytes;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      tempValue = (ulong)(result & 0xff);\nLAB_001036dd:\n      *decodedValue = *decodedValue + 1;\n      decodedData = decodedData << 8 | tempValue;\n      if (2 < encoding_bytes) {\n        count = *remainingBytes;\n        if (count == 0) goto LAB_001035a1;\n        bytePointer = *data;\n        *remainingBytes = count + -1;\n        *data = bytePointer + 1;\n        tempValue = (ulong)*bytePointer;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    bytePointer = *data;\n    *remainingBytes = *remainingBytes + -1;\n    *data = bytePointer + 1;\n    decodedData = (ulong)*bytePointer;\nLAB_001036aa:\n    *decodedValue = *decodedValue + 1;\n    if (1 < encoding_bytes) {\n      count = *remainingBytes;\n      if (count == 0) goto LAB_00103574;\n      bytePointer = *data;\n      *remainingBytes = count + -1;\n      *data = bytePointer + 1;\n      tempValue = (ulong)*bytePointer;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (encoding == 'L') {\n    decodedData = get_char_cold();\n    return decodedData;\n  }\nLAB_0010361f:\n  if (encoding == 'l') {\n    decodedData = decodedData >> 8 & 0xff | (decodedData & 0xff) << 8;\n  }\n  return decodedData;\n}\n\n",
            "called": [
                "get_char.cold",
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103520",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "decode_data_00103520"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "get_char",
                "get_unicode_byte"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103240": {
            "renaming": {
                "FUN_00103240": "print_strings_00103240",
                "param_1": "filename",
                "param_2": "stream",
                "param_3": "address",
                "param_4": "bufferSize",
                "param_5": "stringBuffer",
                "pbVar1": "currentChar",
                "bVar2": "currentByte",
                "cVar3": "includeWhitespace",
                "lVar4": "stringLength",
                "uVar5": "result",
                "iVar6": "displayOption",
                "__ptr": "tempPtr",
                "__s": "outputString",
                "uVar7": "currentIndex",
                "uVar8": "stringLimit",
                "uVar9": "strLen",
                "uVar11": "charCount",
                "bVar12": "isWhitespace",
                "local_80": "currentAddress",
                "local_60": "currentBuffer",
                "local_54": "currentSize",
                "local_50": "addressBuffer",
                "local_3d": "tempBuffer"
            },
            "code": "\n\n\nvoid printStrings_00103240(long filename,long stream,long address,int bufferSize,byte *stringBuffer)\n\n{\n  byte *currentChar;\n  byte currentByte;\n  char includeWhitespace;\n  long stringLength;\n  uint result;\n  int displayOption;\n  void *tempPtr;\n  char *outputString;\n  ulong currentIndex;\n  ulong stringLimit;\n  uint strLen;\n  ulong uVar10;\n  uint charCount;\n  bool isWhitespace;\n  long currentAddress;\n  byte *currentBuffer;\n  int currentSize;\n  long addressBuffer [2];\n  undefined tempBuffer [13];\n  \n  currentBuffer = stringBuffer;\n  currentSize = bufferSize;\n  addressBuffer[0] = address;\n  if (unicode_display == 0) {\n    outputString = (char *)xmalloc(string_min + 1);\n    do {\n      while (stringLength = addressBuffer[0], stringLimit = (ulong)string_min, string_min == 0) {\njoined_r0x001034ef:\n        if (print_filenames != '\\0') {\n          printf(\"%s: \",filename);\n        }\n        if (print_addresses == '\\0') {\n          outputString[stringLimit] = '\\0';\n          fputs(outputString,_stdout);\n        }\n        else {\n          print_filename_and_address_part_0(stringLength);\n          outputString[stringLimit] = '\\0';\n          fputs(outputString,_stdout);\n        }\n        while (stringLimit = get_char(stream,addressBuffer,&currentSize,&currentBuffer), stringLimit != 0xffffffffffffffff)\n        {\n          if (0xff < stringLimit) {\nLAB_0010348e:\n            unget_part_char(stringLimit,addressBuffer,&currentSize,&currentBuffer);\n            break;\n          }\n          if (stringLimit == 9) {\nLAB_00102438:\n            putc((int)stringLimit,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + stringLimit * 2) & 0x10) == 0) {\n              if (((encoding != 'S') || ((long)stringLimit < 0x80)) &&\n                 ((include_all_whitespace == '\\0' ||\n                  ((*(ushort *)(&_sch_istable + stringLimit * 2) & 0x40) == 0)))) goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)stringLimit,_stdout);\n          }\n        }\n        if (output_separator == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(output_separator,_stdout);\n        }\n      }\n      currentIndex = get_char(stream,addressBuffer,&currentSize,&currentBuffer);\n      strLen = string_min;\n      if (currentIndex == 0xffffffffffffffff) goto LAB_001034be;\n      if (currentIndex < 0x100) {\n        if (currentIndex == 9) {\nLAB_001023f5:\n          *outputString = (char)currentIndex;\n          if (strLen < 2) {\n            process_input_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n            if (((encoding != 'S') || ((long)currentIndex < 0x80)) &&\n               ((include_all_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputString = (char)currentIndex;\n          if (strLen < 2) {\n            stringLimit = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        currentIndex = get_char(stream,addressBuffer,&currentSize,&currentBuffer);\n        strLen = string_min;\n        if (currentIndex == 0xffffffffffffffff) goto LAB_001034be;\n        if (currentIndex < 0x100) {\n          if (currentIndex == 9) {\nLAB_001023bb:\n            outputString[1] = (char)currentIndex;\n            if (strLen < 3) {\n              print_and_process_strings_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n              if (((encoding != 'S') || ((long)currentIndex < 0x80)) &&\n                 ((include_all_whitespace == '\\0' ||\n                  ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            outputString[1] = (char)currentIndex;\n            if (strLen < 3) {\n              stringLimit = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          currentIndex = get_char(stream,addressBuffer,&currentSize,&currentBuffer);\n          strLen = string_min;\n          if (currentIndex == 0xffffffffffffffff) {\nLAB_001034be:\n            free(outputString);\n            return;\n          }\n          if (currentIndex < 0x100) {\n            if (currentIndex == 9) {\nLAB_00102381:\n              outputString[2] = (char)currentIndex;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n                if (((encoding != 'S') || ((long)currentIndex < 0x80)) &&\n                   ((include_all_whitespace == '\\0' ||\n                    ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              outputString[2] = (char)currentIndex;\n            }\n            if (strLen < 4) {\n              stringLimit = 3;\n            }\n            else {\n              uVar10 = 3;\n              do {\n                currentIndex = get_char(stream,addressBuffer,&currentSize,&currentBuffer);\n                if (currentIndex == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < currentIndex) goto code_r0x001034d5;\n                if (((currentIndex != 9) && ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0)) &&\n                   ((encoding != 'S' || ((long)currentIndex < 0x80)))) {\n                  if (include_all_whitespace == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0) {\n                    process_input_001034d5();\n                    return;\n                  }\n                }\n                strLen = (int)uVar10 + 1;\n                stringLimit = (ulong)strLen;\n                isWhitespace = strLen < string_min;\n                outputString[uVar10] = (char)currentIndex;\n                uVar10 = stringLimit;\n              } while (isWhitespace);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      unget_part_char(currentIndex,addressBuffer,&currentSize,&currentBuffer);\n    } while( true );\n  }\n  if (stringBuffer != (byte *)0x0) {\n    stringLimit = (ulong)bufferSize;\n    currentAddress = address;\n    if (filename != 0) {\nLAB_0010249c:\n      strLen = string_min;\n      includeWhitespace = include_all_whitespace;\n      displayOption = unicode_display;\n      if (((unicode_display != 0) && (encoding == 'S')) && (encoding_bytes == 1)) {\n        if (stringLimit != 0) {\n          currentIndex = 0;\n          charCount = 0;\n          uVar10 = 0;\n          do {\n            while( true ) {\n              currentByte = stringBuffer[uVar10];\n              if (currentByte != 9) break;\nLAB_0010252e:\n              result = 1;\nLAB_00102533:\n              if (charCount == 0) {\n                currentIndex = uVar10;\n              }\n              charCount = charCount + 1;\n              if (strLen <= charCount) goto LAB_001026a9;\n              uVar10 = uVar10 + result;\n              if (stringLimit <= uVar10) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x10) != 0) {\n              if (0x7e < currentByte) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < currentByte) {\nLAB_0010264e:\n              if ((currentByte < 0xc0) ||\n                 (result = is_valid_utf8(stringBuffer + uVar10,stringLimit - uVar10), result == 0))\n              goto LAB_0010269a;\n              if (displayOption == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((includeWhitespace != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x40) != 0)) &&\n               (currentByte != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            result = 1;\nLAB_00102688:\n            uVar10 = uVar10 + result;\n            if (stringLimit <= uVar10) goto LAB_001026a1;\n            charCount = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (stream != 0) {\n    if (filename != 0) {\nLAB_0010255f:\n      stringLength = addressBuffer[0];\n      if (((unicode_display != 0) && (encoding == 'S')) && (encoding_bytes == 1)) {\n        tempPtr = (void *)xmalloc(string_min * 4 + 1);\n        print_unicode_stream_body(filename,stringLength,stream,tempBuffer,0,tempPtr);\n        free(tempPtr);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (strLen != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_filename_and_address(filename,currentAddress + currentIndex);\n  for (; currentChar = stringBuffer + currentIndex, currentIndex < stringLimit; currentIndex = currentIndex + strLen) {\n    currentByte = *currentChar;\n    if (currentByte == 9) {\nLAB_00102708:\n      putc((uint)currentByte,_stdout);\n      strLen = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x10) == 0) {\n        if ((encoding != 'S') || (currentByte < 0x80)) {\n          if ((include_all_whitespace != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentByte * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (currentByte < 0x7f) goto LAB_00102708;\n      }\n      displayOption = is_valid_utf8(currentChar,stringLimit - currentIndex);\n      if ((displayOption == 0) || (unicode_display == 5)) break;\n      strLen = display_utf8_char(currentChar);\n    }\n  }\n  if (output_separator == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(output_separator,_stdout);\n  }\n  currentAddress = currentAddress + currentIndex;\n  stringLimit = stringLimit - currentIndex;\n  stringBuffer = currentChar;\n  goto LAB_0010249c;\n}\n\n",
            "called": [
                "print_unicode_stream_body",
                "putc",
                "free",
                "fputs",
                "fwrite",
                "xmalloc",
                "is_valid_utf8",
                "display_utf8_char",
                "print_filename_and_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_strings_00103240"
        },
        "FUN_00109100": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109100",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00109100"
        },
        "FUN_00109188": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109188",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00109188"
        },
        "FUN_00104a60": {
            "renaming": {
                "FUN_00104a60": "report_and_exit_00104a60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "ptr1",
                "local_c8": "ptr2",
                "local_b8": "buffer",
                "local_b0": "buffer2",
                "local_a8": "buffer3",
                "local_a0": "buffer4",
                "local_98": "buffer5",
                "local_90": "buffer6",
                "local_88": "variable1",
                "local_78": "variable2",
                "local_68": "variable3",
                "local_58": "variable4",
                "local_48": "variable5",
                "local_38": "variable6",
                "local_28": "variable7",
                "local_18": "variable8"
            },
            "code": "\n\n\nvoid reportAndExit_00104a60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined buffer [8];\n  undefined8 buffer2;\n  undefined8 buffer3;\n  undefined8 buffer4;\n  undefined8 buffer5;\n  undefined8 buffer6;\n  undefined4 variable1;\n  undefined4 variable2;\n  undefined4 variable3;\n  undefined4 variable4;\n  undefined4 variable5;\n  undefined4 variable6;\n  undefined4 variable7;\n  undefined4 variable8;\n  \n  if (flag != '\\0') {\n    variable1 = input1;\n    variable2 = input2;\n    variable3 = input3;\n    variable4 = input4;\n    variable5 = input5;\n    variable6 = input6;\n    variable7 = input7;\n    variable8 = input8;\n  }\n  ptr1 = &stack0x00000008;\n  size = 8;\n  ptr2 = buffer;\n  length = 0x30;\n  buffer2 = param10;\n  buffer3 = param11;\n  buffer4 = param12;\n  buffer5 = param13;\n  buffer6 = param14;\n  report(param9,&size);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_and_exit_00104a60"
        },
        "FUN_00103a90": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00103a90"
        },
        "FUN_001091b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091b8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001091b8"
        },
        "FUN_00109070": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109070",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00109070"
        },
        "FUN_00103a10": {
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103a10",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00103a10"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010282b": {
            "renaming": {
                "FUN_0010282b": "initialize_registers_0010282b",
                "in_RAX": "registerPointer",
                "in_RCX": "memoryPointer",
                "unaff_RBX": "registerValue",
                "tmp_0": "updatedValue"
            },
            "code": "\nvoid initializeRegisters_0010282b(void)\n\n{\n  undefined4 *registerPointer;\n  undefined8 *memoryPointer;\n  undefined8 registerValue;\n  \n  updatedValue._0_1_ = (undefined)((ulong)registerValue >> 8);\n  updatedValue._2_1_ = (undefined)((ulong)registerValue >> 0x18);\n  updatedValue._1_1_ = (undefined)((ulong)registerValue >> 0x10);\n  *registerPointer = 3;\n  *memoryPointer = &updatedValue;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010282b",
            "calling": [
                "unget_part_char"
            ],
            "imported": false,
            "current_name": "initialize_registers_0010282b"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00109118": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109118",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00109118"
        },
        "FUN_001038b0": {
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_001038b0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001038b0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001038b0"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_0010259a",
                "print_strings",
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_00103890": {
            "renaming": {
                "FUN_00103890": "print_file_info_00103890",
                "param_1": "filename",
                "param_2": "address",
                "print_filenames": "should_print_filenames",
                "print_addresses": "should_print_addresses",
                "print_filename_and_address_part_0": "print_file_info_part_0"
            },
            "code": "\nvoid print_file_info_00103890(undefined8 filename,undefined8 address)\n\n{\n  if (should_print_filenames != '\\0') {\n    printf(\"%s: \",filename);\n  }\n  if (should_print_addresses == '\\0') {\n    return;\n  }\n  print_file_info_00103890_part_0(address);\n  return;\n}\n\n",
            "called": [
                "print_filename_and_address.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103890",
            "calling": [
                "print_unicode_stream_body",
                "print_strings"
            ],
            "imported": false,
            "current_name": "print_file_info_00103890"
        },
        "FUN_00109110": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109110",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00109110"
        },
        "FUN_00109198": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109198",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00109198"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001091c8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001091c8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001091c8"
        },
        "FUN_00103810": {
            "renaming": {
                "FUN_00103810": "update_encoding_parameters_00103810",
                "param_1": "input",
                "param_2": "encodingOffset",
                "param_3": "outputSize",
                "param_4": "resultPtr",
                "iVar1": "currentOutputSize",
                "lVar2": "encodingBytes",
                "iVar3": "lastOutputSize",
                "tmp_0": "encodedData"
            },
            "code": "\nvoid updateEncodingParameters_00103810(undefined8 input,long *encodingOffset,int *outputSize,long *resultPtr)\n\n{\n  int currentOutputSize;\n  long encodingBytes;\n  int lastOutputSize;\n  \n  encodingBytes = (long)encoding_bytes;\n  if (encoding_bytes < 2) {\n    return;\n  }\n  lastOutputSize = encoding_bytes + -1;\n  *encodingOffset = *encodingOffset - (long)lastOutputSize;\n  currentOutputSize = *outputSize;\n  if (currentOutputSize == 0) {\n    if (encoding != 'l') {\n      if (encoding < 'm') {\n        if (encoding == 'b') {\n          encodedData._0_1_ = (undefined)input;\n          *outputSize = 1;\n        }\n        else if (encoding < 'c') {\n          if (encoding == 'B') {\n            encodedData._1_2_ = (ushort)input << 8 | (ushort)input >> 8;\n            encodedData._0_1_ = (undefined)((ulong)input >> 0x10);\n            *outputSize = 3;\n          }\n          else if (encoding == 'L') {\n            initialize_registers_0010282b();\n            return;\n          }\n        }\n      }\n      *resultPtr = (long)&encodedData;\n      return;\n    }\n    encodedData._0_1_ = (undefined)((ulong)input >> 8);\n    *outputSize = 1;\n    *resultPtr = (long)&encodedData;\n  }\n  else {\n    *resultPtr = *resultPtr + (1 - encodingBytes);\n    *outputSize = lastOutputSize + currentOutputSize;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010282b",
                "unget_part_char.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103810",
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "update_encoding_parameters_00103810"
        },
        "FUN_00109080": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109080",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00109080"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001030c0": {
            "renaming": {
                "FUN_001030c0": "print_usage_001030c0",
                "param_1": "file",
                "param_2": "returnCode",
                "lVar1": "programName",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printUsage_001030c0(FILE *file,int returnCode)\n\n{\n  long programName;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,message,programName);\n  message = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(file,message);\n  programName = program_name;\n  if (program_name == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    programName = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (programName == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (returnCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(returnCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "bfd_target_list",
                "free",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_001030c0"
        },
        "FUN_001090a0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090a0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_001090a0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "print_strings",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_001039e0": {
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001039e0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_001039e0"
        },
        "FUN_00109128": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109128",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00109128"
        },
        "FUN_00109008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00109008"
        },
        "FUN_00102330": {
            "renaming": {
                "FUN_00102330": "process_input_00102330",
                "param_1": "input",
                "uVar1": "counter",
                "in_AX": "flags",
                "uVar2": "index1",
                "uVar3": "index2",
                "in_R8D": "length",
                "unaff_R14": "buffer",
                "unaff_R15": "filename",
                "bVar4": "isLess",
                "in_stack_00000010": "filename1",
                "in_stack_00000038": "filename2",
                "encoding": "encoding_type",
                "include_all_whitespace": "include_whitespace",
                "_stdout": "standard_output",
                "print_filenames": "isPrintFilenames",
                "printf": "print",
                "print_addresses": "isPrintAddresses",
                "print_filename_and_address_part_0": "print_file_address",
                "get_char": "read_char",
                "unget_part_char": "unread_char",
                "output_separator": "separator",
                "fputs": "write_string",
                "string_min": "minimum_length",
                "print_and_process_strings_00103510": "print_process_strings"
            },
            "code": "\n\n\nvoid process_input_00102330(ulong input)\n\n{\n  uint counter;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint length;\n  char *buffer;\n  undefined8 filename;\n  bool isLess;\n  undefined8 filename1;\n  undefined8 filename2;\n  \ncode_r0x00102330:\n  if ((encoding_type != 'S') || ((long)input < 0x80)) {\n    if (include_whitespace == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      process_input_00102330_001034d5();\n      return;\n    }\n  }\nLAB_00103400:\n  index1 = (ulong)length;\n  length = length + 1;\n  index2 = (ulong)length;\n  isLess = length < minimum_length;\n  buffer[index1] = (char)input;\n  if (isLess) goto LAB_001033b3;\n  do {\n    if (isPrintFilenames != '\\0') {\n      print(\"%s: \",filename1);\n    }\n    if (isPrintAddresses == '\\0') {\n      buffer[index2] = '\\0';\n      write_string(buffer,standard_output);\n    }\n    else {\n      print_file_address(filename);\n      buffer[index2] = '\\0';\n      write_string(buffer,standard_output);\n    }\n    while (index2 = read_char(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nLAB_0010348e:\n        unread_char();\n        break;\n      }\n      if (index2 == 9) {\nLAB_00102438:\n        putc((int)index2,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n          if (((encoding_type != 'S') || ((long)index2 < 0x80)) &&\n             ((include_whitespace == '\\0' ||\n              ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index2,standard_output);\n      }\n    }\n    if (separator == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      write_string(separator,standard_output);\n    }\n    while (index2 = (ulong)minimum_length, filename = filename2, minimum_length != 0) {\n      index2 = read_char();\n      counter = minimum_length;\n      if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nLAB_001023f5:\n          *buffer = (char)index2;\n          if (counter < 2) {\n            process_input_00102330_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding_type != 'S') || ((long)index2 < 0x80)) &&\n               ((include_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *buffer = (char)index2;\n          if (counter < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = read_char();\n        counter = minimum_length;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_001023bb:\n          buffer[1] = (char)index2;\n          if (counter < 3) {\n            print_process_strings();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding_type != 'S') || ((long)index2 < 0x80)) &&\n               ((include_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          buffer[1] = (char)index2;\n          if (counter < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = read_char();\n        counter = minimum_length;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_00102381:\n          buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((encoding_type != 'S') || ((long)index2 < 0x80)) &&\n               ((include_whitespace == '\\0' ||\n                ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0)))) goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          buffer[2] = (char)index2;\n        }\n        if (counter < 4) {\n          index2 = 3;\n          break;\n        }\n        length = 3;\nLAB_001033b3:\n        input = read_char();\n        if (input == 0xffffffffffffffff) {\nLAB_001034be:\n          free(buffer);\n          return;\n        }\n        if (input < 0x100) {\n          if ((input == 9) ||\n             (flags = *(ushort *)(&_sch_istable + input * 2), (flags & 0x10) != 0))\n          goto LAB_00103400;\n          goto code_r0x00102330;\n        }\n      }\ncode_r0x001034d5:\n      unread_char();\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_input_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00109000": {
            "renaming": {},
            "code": "\n\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __uflow@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109000",
            "calling": [
                "__uflow"
            ],
            "imported": false,
            "current_name": "FUN_00109000"
        },
        "FUN_00109088": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109088",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00109088"
        },
        "FUN_00109090": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109090",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00109090"
        },
        "FUN_00102853": {
            "renaming": {
                "FUN_00102853": "print_filename_with_address_00102853",
                "param_1": "file_name",
                "print_addresses": "should_print_addresses"
            },
            "code": "\nvoid print_filename_with_address_00102853(undefined8 file_name)\n\n{\n  printf(\"%s: \",file_name);\n  if (should_print_addresses == '\\0') {\n    return;\n  }\n  print_filename_and_address_part_0();\n  return;\n}\n\n",
            "called": [
                "printf",
                "print_filename_and_address.part.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102853",
            "calling": [
                "print_filename_and_address"
            ],
            "imported": false,
            "current_name": "print_filename_with_address_00102853"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001090b0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001090b0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001090b0"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001027e2": {
            "renaming": {
                "FUN_001027e2": "update_and_add_001027e2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "modifier",
                "param_4": "output",
                "in_RAX": "pointer_to_input"
            },
            "code": "\nvoid update_and_add_001027e2(int input_1,int input_2,long modifier,long *output)\n\n{\n  int *pointer_to_input;\n  \n  *output = *output + (1 - modifier);\n  *pointer_to_input = input_1 + input_2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027e2",
            "calling": [
                "unget_part_char"
            ],
            "imported": false,
            "current_name": "update_and_add_001027e2"
        },
        "FUN_001034d5": {
            "renaming": {
                "FUN_001034d5": "process_input_001034d5",
                "uVar1": "char1",
                "uVar2": "char2",
                "uVar3": "string_length",
                "uVar4": "index",
                "unaff_R14": "string",
                "bVar5": "is_less_than_string_min",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "address",
                "code_r0x001034d5": "process_string_part",
                "LAB_001034be": "end_of_string",
                "LAB_001023f5": "handle_tab_char",
                "LAB_001023bb": "handle_tab_char2",
                "LAB_00102381": "handle_tab_char3",
                "joined_r0x001034ef": "handle_string_length",
                "string_min": "STRING_MIN",
                "print_filenames": "should_print_filenames",
                "print_addresses": "should_print_addresses",
                "print_and_process_strings_00103510": "print_and_process_strings",
                "include_all_whitespace": "should_include_all_whitespace",
                "encoding": "character_encoding",
                "print_filename_and_address_part_0": "print_filename_and_address_part",
                "_stdout": "output_stream",
                "get_char": "read_character",
                "unget_part_char": "unread_character",
                "_sch_istable": "character_table",
                "output_separator": "separator"
            },
            "code": "\n\n\nvoid process_input_001034d5(void)\n\n{\n  ulong char1;\n  ulong char2;\n  uint string_length;\n  ulong index;\n  char *string;\n  bool is_less_than_string_min;\n  undefined8 filename;\n  undefined8 address;\n  \nprocess_string_part:\n  unread_character();\n  do {\n    char1 = (ulong)STRING_MIN;\n    if (STRING_MIN != 0) {\n      char1 = read_character();\n      string_length = STRING_MIN;\n      if (char1 == 0xffffffffffffffff) goto end_of_string;\n      if (0xff < char1) goto process_string_part;\n      if (char1 == 9) {\nhandle_tab_char:\n        *string = (char)char1;\n        if (string_length < 2) {\n          process_input_001034d5_001034fa();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((character_encoding == 'S') && (0x7f < (long)char1)) ||\n             ((should_include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0)))) goto handle_tab_char;\n          goto process_string_part;\n        }\n        *string = (char)char1;\n        if (string_length < 2) {\n          char1 = 1;\n          goto handle_string_length;\n        }\n      }\n      char1 = read_character();\n      string_length = STRING_MIN;\n      if (char1 == 0xffffffffffffffff) goto end_of_string;\n      if (0xff < char1) goto process_string_part;\n      if (char1 == 9) {\nhandle_tab_char2:\n        string[1] = (char)char1;\n        if (string_length < 3) {\n          print_and_process_strings();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((character_encoding == 'S') && (0x7f < (long)char1)) ||\n             ((should_include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0)))) goto handle_tab_char2;\n          goto process_string_part;\n        }\n        string[1] = (char)char1;\n        if (string_length < 3) {\n          char1 = 2;\n          goto handle_string_length;\n        }\n      }\n      char1 = read_character();\n      string_length = STRING_MIN;\n      if (char1 == 0xffffffffffffffff) {\nend_of_string:\n        free(string);\n        return;\n      }\n      if (0xff < char1) goto process_string_part;\n      if (char1 == 9) {\nhandle_tab_char3:\n        string[2] = (char)char1;\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((character_encoding == 'S') && (0x7f < (long)char1)) ||\n             ((should_include_all_whitespace != '\\0' &&\n              ((*(ushort *)(&character_table + char1 * 2) & 0x40) != 0)))) goto handle_tab_char3;\n          goto process_string_part;\n        }\n        string[2] = (char)char1;\n      }\n      if (string_length < 4) {\n        char1 = 3;\n      }\n      else {\n        index = 3;\n        do {\n          char2 = read_character();\n          if (char2 == 0xffffffffffffffff) goto end_of_string;\n          if (0xff < char2) goto process_string_part;\n          if (((char2 != 9) && ((*(ushort *)(&character_table + char2 * 2) & 0x10) == 0)) &&\n             ((character_encoding != 'S' || ((long)char2 < 0x80)))) {\n            if (should_include_all_whitespace == '\\0') goto process_string_part;\n            if ((*(ushort *)(&character_table + char2 * 2) & 0x40) == 0) {\n              process_input_001034d5();\n              return;\n            }\n          }\n          string_length = (int)index + 1;\n          char1 = (ulong)string_length;\n          is_less_than_string_min = string_length < STRING_MIN;\n          string[index] = (char)char2;\n          index = char1;\n        } while (is_less_than_string_min);\n      }\n    }\nhandle_string_length:\n    if (should_print_filenames != '\\0') {\n      printf(\"%s: \",filename);\n    }\n    if (should_print_addresses == '\\0') {\n      string[char1] = '\\0';\n      fputs(string,output_stream);\n    }\n    else {\n      print_filename_and_address_part(address);\n      string[char1] = '\\0';\n      fputs(string,output_stream);\n    }\n    while (char1 = read_character(), char1 != 0xffffffffffffffff) {\n      if (0xff < char1) {\nLAB_0010348e:\n        unread_character();\n        break;\n      }\n      if (char1 == 9) {\nLAB_00102438:\n        putc((int)char1,output_stream);\n      }\n      else {\n        if ((*(ushort *)(&character_table + char1 * 2) & 0x10) == 0) {\n          if (((character_encoding != 'S') || ((long)char1 < 0x80)) &&\n             ((should_include_all_whitespace == '\\0' ||\n              ((*(ushort *)(&character_table + char1 * 2) & 0x40) == 0)))) goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)char1,output_stream);\n      }\n    }\n    if (separator == (char *)0x0) {\n      putc(10,output_stream);\n    }\n    else {\n      fputs(separator,output_stream);\n    }\n  } while( true );\n}\n\n",
            "called": [
                "unget_part_char"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034d5",
            "calling": [
                "print_strings.cold",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_input_001034d5"
        },
        "FUN_00109138": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109138",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00109138"
        },
        "FUN_00109018": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109018",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00109018"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "report",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00109130": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109130",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00109130"
        },
        "FUN_00109010": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109010",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00109010"
        },
        "FUN_00109098": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109098",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00109098"
        }
    },
    "used_tokens": 48856,
    "layers": [
        [
            "FUN_00103a50",
            "FUN_0010286f",
            "FUN_00102000",
            "FUN_0010290e",
            "FUN_001028b2",
            "FUN_00102771",
            "FUN_001034fa",
            "FUN_001039b0",
            "FUN_00103aa0",
            "FUN_00102020",
            "FUN_00103910",
            "FUN_00103510",
            "FUN_0010293a",
            "FUN_00103520",
            "FUN_00104a60",
            "FUN_0010282b",
            "FUN_001038b0",
            "FUN_00103890",
            "FUN_001030c0",
            "FUN_00102853",
            "FUN_001027e2"
        ],
        [
            "FUN_00103810"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_0010259a",
            "FUN_00103240",
            "FUN_00102330"
        ]
    ],
    "locked_functions": []
}