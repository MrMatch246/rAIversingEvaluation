{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_memory_00113dfe",
                "param_1": "data",
                "param_2": "value",
                "lVar1": "result"
            },
            "code": "\nvoid updateMemory_00113dfe(undefined4 data,undefined value)\n\n{\n  long result;\n  \n  result = FUN_00112904(3,data);\n  if (result != 0) {\n    *(undefined *)(result + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "update_memory_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "param_1": "data",
                "param_2": "newString",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "ptrData",
                "lVar2": "ptrDataCopy",
                "auVar3": "result",
                "sVar4": "newStringLength",
                "pcVar5": "oldString",
                "sVar6": "oldStringLength",
                "auVar7": "updatedResult"
            },
            "code": "\nundefined  [16] updateStringWithPrefix_0010ab4d(long data,char *newString,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  ulong ptrData;\n  long ptrDataCopy;\n  undefined result [16];\n  size_t newStringLength;\n  char *oldString;\n  size_t oldStringLength;\n  undefined updatedResult [16];\n  \n  ptrData = *(ulong *)(data + 0x60);\n  if ((ptrData != 0) && (*(long *)(ptrData + 0x20) != 0)) {\n    oldString = *(char **)(ptrData + 0x30);\n    newStringLength = strlen(newString);\n    if (oldString == (char *)0x0) {\n      oldString = (char *)xmalloc(newStringLength + 3);\n      *oldString = '\\0';\n    }\n    else {\n      oldStringLength = strlen(oldString);\n      oldString = (char *)xrealloc(oldString,newStringLength + 4 + oldStringLength);\n    }\n    newStringLength = strlen(oldString);\n    sprintf(oldString + newStringLength,\"%s::\",newString);\n    ptrDataCopy = *(long *)(data + 0x60);\n    *(char **)(ptrDataCopy + 0x30) = oldString;\n    updatedResult._1_7_ = (undefined7)((ulong)ptrDataCopy >> 8);\n    updatedResult[0] = 1;\n    updatedResult._8_8_ = unusedParam2;\n    return updatedResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = ptrData;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "sprintf",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_with_prefix_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_debug_name_type_0010c218",
                "param_1": "file",
                "param_2": "condition1",
                "param_3": "condition2",
                "uVar1": "error_msg",
                "lVar2": "allocation_result",
                "pauVar3": "allocated_pointer",
                "lVar4": "file_pointer",
                "_stderr": "error_stream"
            },
            "code": "\n\n\nlong process_debug_name_type_0010c218(long file,long condition1,long condition2)\n\n{\n  undefined8 error_msg;\n  long allocation_result;\n  undefined (*allocated_pointer) [16];\n  long file_pointer;\n  \n  if ((condition1 != 0) && (condition2 != 0)) {\n    if ((*(long *)(file + 8) == 0) || (*(long *)(file + 0x10) == 0)) {\n      error_msg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(error_stream,\"%s\\n\",error_msg);\n    }\n    else {\n      allocation_result = FUN_00112904(0x16,0);\n      if (allocation_result != 0) {\n        allocated_pointer = (undefined (*) [16])xmalloc(0x10);\n        file_pointer = *(long *)(file + 0x10);\n        *allocated_pointer = ZEXT816(0);\n        *(long *)(*allocated_pointer + 8) = condition2;\n        *(undefined (**) [16])(allocation_result + 0x10) = allocated_pointer;\n        file_pointer = FUN_00112925(file_pointer + 0x10,condition1,0,3);\n        if (file_pointer != 0) {\n          *(long *)(file_pointer + 0x20) = allocation_result;\n          *(long *)*allocated_pointer = file_pointer;\n          return allocation_result;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_001279e8 = FUN_00113f20();\n  DAT_001279e0 = FUN_00113f20();\n  DAT_001279d8 = FUN_00113f20();\n  DAT_001279d0 = FUN_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278c8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = FUN_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    FUN_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = FUN_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = FUN_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    FUN_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "textdomain",
                "dup",
                "bfd_set_error_program_name",
                "mkstemp",
                "bfd_scan_arch",
                "FUN_00108c86",
                "fclose",
                "bfd_set_default_target",
                "fread",
                "bfd_errmsg",
                "FUN_00114190",
                "fseek",
                "FUN_00108916",
                "free",
                "FUN_0011a390",
                "htab_create_alloc",
                "getopt_long",
                "bfd_get_error",
                "getc",
                "xmalloc_set_program_name",
                "FUN_00119dd0",
                "FUN_00114c80",
                "filename_cmp",
                "strtol",
                "strcasecmp",
                "htab_find_slot",
                "FUN_00114d60",
                "FUN_001054af",
                "setlocale",
                "xstrdup",
                "strncasecmp",
                "FUN_00113f50",
                "FUN_00108800",
                "FUN_00114c20",
                "strtoul",
                "memmove",
                "FUN_00113fb0",
                "free",
                "strcpy",
                "memcpy",
                "FUN_001126c0",
                "FUN_00119940",
                "xmalloc",
                "strncpy",
                "FUN_00108d9a",
                "fprintf",
                "FUN_00119ed0",
                "bindtextdomain",
                "unlink_if_ordinary",
                "FUN_00108a2a",
                "fopen",
                "FUN_00119970",
                "strchr",
                "FUN_0011a480",
                "FUN_00113fe0",
                "ftell",
                "FUN_00114460",
                "strcmp",
                "ferror",
                "FUN_00115970",
                "FUN_00114cf0",
                "bfd_init",
                "htab_elements",
                "strlen",
                "__errno_location",
                "malloc",
                "FUN_001199d0",
                "strerror",
                "xexit",
                "stat",
                "FUN_00114690",
                "FUN_00113f20",
                "xcalloc",
                "xrealloc",
                "FUN_00108898"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPtr",
                "param_2": "debugVal",
                "param_3": "unusedParam",
                "param_4": "returnStatus",
                "puVar1": "blockIterator",
                "uVar2": "debugMessage",
                "puVar3": "newBlock",
                "puVar4": "tempBlock",
                "lVar5": "blockAddress",
                "puVar6": "lastBlock",
                "puVar7": "tempPtr",
                "bVar8": "flag",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPtr,undefined8 debugVal,undefined8 unusedParam,undefined8 returnStatus)\n\n{\n  undefined8 *blockIterator;\n  undefined8 debugMessage;\n  undefined4 *newBlock;\n  undefined8 *tempBlock;\n  long blockAddress;\n  undefined8 *lastBlock;\n  undefined4 *tempPtr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  if ((*(long *)(blockPtr + 8) == 0) || (*(long *)(blockPtr + 0x20) == 0)) {\n    debugMessage = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",debugMessage);\n    debugMessage = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    tempPtr = newBlock;\n    for (blockAddress = 0xc; blockAddress != 0; blockAddress = blockAddress + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    blockAddress = *(long *)(blockPtr + 0x20);\n    *(undefined8 *)(newBlock + 6) = debugVal;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = blockAddress;\n    blockIterator = *(undefined8 **)(blockAddress + 0x10);\n    lastBlock = (undefined8 *)(blockAddress + 0x10);\n    while (tempBlock = blockIterator, tempBlock != (undefined8 *)0x0) {\n      lastBlock = tempBlock;\n      blockIterator = (undefined8 *)*tempBlock;\n    }\n    *lastBlock = newBlock;\n    debugMessage = 1;\n    *(undefined4 **)(blockPtr + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = returnStatus;\n  returnValue._0_8_ = debugMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "isWarningEnabled",
                "iVar2": "structSize",
                "lVar3": "localVar",
                "__s": "errorMessage",
                "sVar4": "length1",
                "sVar5": "length2",
                "sVar6": "length3",
                "__s_00": "formattedString",
                "uVar7": "warningMessage",
                "uVar8": "result",
                "pcVar9": "flag"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 param3,ulong fieldSize,int fieldType)\n\n{\n  char isWarningEnabled;\n  int structSize;\n  long localVar;\n  char *errorMessage;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  char *formattedString;\n  undefined8 warningMessage;\n  undefined8 result;\n  char *flag;\n  \n  isWarningEnabled = *(char *)(paramArray[0xc] + 0x1c);\n  structSize = *(int *)(paramArray[0xc] + 0x18);\n  errorMessage = (char *)FUN_00109b2f();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(*(char **)(paramArray[0xc] + 0x20));\n    length2 = strlen(fieldName);\n    length3 = strlen(errorMessage);\n    formattedString = (char *)xmalloc(length1 + 0x32 + length2 + length3);\n    if (fieldType == 1) {\n      flag = \"/1\";\n    }\n    else {\n      flag = \"/0\";\n      if ((fieldType != 2) && (flag = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(structSize * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*paramArray;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warningMessage,result,fieldName);\n    }\n    sprintf(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,flag,errorMessage,\n            param3,fieldSize);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    localVar = paramArray[0xc];\n    *(char **)(localVar + 0x20) = formattedString;\n    if (isWarningEnabled != '\\0') {\n      *(undefined *)(localVar + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)localVar >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00119ed0",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "update_data_0010aa53",
                "param_1": "dataStruct",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "cVar1": "dataType",
                "__s": "stringData",
                "sVar5": "length",
                "pcVar6": "formattedData",
                "cVar3": "digitChar",
                "lVar2": "structPtr",
                "uVar8": "success",
                "uVar9": "loopIndex",
                "uVar10": "maxIndex",
                "uVar4": "currentIndex",
                "lVar7": "reallocPtr"
            },
            "code": "\nundefined8 updateData_0010aa53(long dataStruct,undefined8 value,char flag,int mode)\n\n{\n  char dataType;\n  long structPtr;\n  char digitChar;\n  uint currentIndex;\n  char *stringData;\n  size_t length;\n  char *formattedData;\n  long reallocPtr;\n  undefined8 success;\n  ulong loopIndex;\n  ulong maxIndex;\n  \n  dataType = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  stringData = (char *)FUN_00109b2f();\n  length = strlen(stringData);\n  formattedData = (char *)xmalloc(length + 0x19);\n  *formattedData = flag + '0';\n  if (mode == 1) {\n    digitChar = '1';\n  }\n  else {\n    digitChar = '0';\n    if ((mode != 2) && (digitChar = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedData[1] = digitChar;\n  sprintf(formattedData + 2,\"%ld,%s;\",value);\n  free(stringData);\n  structPtr = *(long *)(dataStruct + 0x60);\n  success = 0;\n  if ((structPtr != 0) && (*(long *)(structPtr + 0x20) != 0)) {\n    structPtr = *(long *)(structPtr + 0x28);\n    maxIndex = 0;\n    if (structPtr != 0) {\n      currentIndex = 0;\n      do {\n        loopIndex = (ulong)currentIndex;\n        maxIndex = (ulong)currentIndex;\n        currentIndex = currentIndex + 1;\n      } while (*(long *)(structPtr + loopIndex * 8) != 0);\n    }\n    reallocPtr = xrealloc(structPtr,(ulong)((int)maxIndex + 2) << 3);\n    *(char **)(reallocPtr + maxIndex * 8) = formattedData;\n    *(undefined8 *)(reallocPtr + (ulong)((int)maxIndex + 1) * 8) = 0;\n    structPtr = *(long *)(dataStruct + 0x60);\n    *(long *)(structPtr + 0x28) = reallocPtr;\n    if (dataType != '\\0') {\n      *(undefined *)(structPtr + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "param_1": "context",
                "param_2": "debugInfo",
                "param_3": "opcode",
                "param_4": "count",
                "param_5": "offset",
                "param_6": "string",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "pointer",
                "cVar3": "charVar3",
                "uVar4": "undefinedVar4",
                "iVar5": "intVar5",
                "puVar6": "pointerVar6",
                "plVar7": "longVar7",
                "pcVar8": "pointerVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "lVar11": "longVar11",
                "lVar12": "longVar12",
                "pplVar13": "pointerPointerVar13",
                "uVar14": "ulongVar14",
                "uVar15": "ulongVar15",
                "pcVar16": "pointerVar16",
                "uVar17": "uintVar17",
                "dVar19": "doubleVar19",
                "local_48": "localPointer48",
                "local_40": "localPointerArray40"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined processDebugInfo_0011173a(undefined8 context,long *debugInfo,int opcode,int count,ulong offset,\n                      char *string)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *pointer;\n  char charVar3;\n  undefined undefinedVar4;\n  int intVar5;\n  undefined8 *pointerVar6;\n  long *longVar7;\n  char *pointerVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  long longVar11;\n  long longVar12;\n  long **pointerPointerVar13;\n  ulong ulongVar14;\n  ulong ulongVar15;\n  char *pointerVar16;\n  uint uintVar17;\n  long **pplVar18;\n  double doubleVar19;\n  char *localPointer48;\n  long **localPointerArray40 [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((opcode == 100) && (*string != '\\0')) && (debugInfo[5] == offset)) goto LAB_00111a06;\n    charVar3 = FUN_0010bbd3(context);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    pointerVar6 = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)pointerVar6;\n    *pointerVar6 = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(string);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefinedVar4 = FUN_00108f08(context,string);\n    return undefinedVar4;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      intVar5 = strcmp(string,\"gcc2_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      intVar5 = strcmp(string,\"gcc_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*string == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            offset = offset + debugInfo[7];\n          }\n          charVar3 = FUN_0010c1c6(context,debugInfo);\n          if (charVar3 != '\\0') {\n            charVar3 = FUN_0010be1a(context,offset);\n            if (charVar3 != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((offset < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = offset;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          ulongVar14 = offset;\n          if (((*string != '\\0') && (ulongVar15 = debugInfo[0xd], ulongVar15 != 0xffffffffffffffff)) &&\n             (ulongVar14 = ulongVar15, offset < ulongVar15)) {\n            ulongVar14 = offset;\n          }\n          charVar3 = FUN_0010c1c6(context,debugInfo);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          charVar3 = FUN_0010be1a(context,ulongVar14);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*string == '\\0') {\n          return 1;\n        }\n        pointer = (void *)debugInfo[4];\n        if (pointer == (void *)0x0) {\n          longVar12 = xstrdup(string);\n          debugInfo[4] = longVar12;\n        }\n        else {\n          if (*string == '/') {\n            longVar12 = xstrdup(string);\n          }\n          else {\n            longVar12 = concat(pointer,string,0);\n          }\n          debugInfo[4] = longVar12;\n          free(pointer);\n        }\n        debugInfo[5] = offset;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          longVar12 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            longVar12 = debugInfo[7];\n          }\n          undefinedVar4 = FUN_0010bf86(context,(long)count,longVar12 + offset);\n          return undefinedVar4;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        longVar7 = (long *)xmalloc();\n        intVar5 = *(int *)(debugInfo + 0x10);\n        longVar10 = debugInfo[10];\n        longVar11 = debugInfo[0xb];\n        longVar7[5] = 0;\n        longVar12 = debugInfo[0x11];\n        *(int *)(longVar7 + 4) = intVar5;\n        uintVar17 = intVar5 + 1;\n        *(uint *)(debugInfo + 0x10) = uintVar17;\n        *longVar7 = longVar11;\n        longVar7[1] = longVar10;\n        longVar7[2] = (long)string;\n        longVar7[3] = offset;\n        debugInfo[10] = (long)longVar7;\n        debugInfo[0xb] = (long)longVar7;\n        longVar12 = xrealloc(longVar12,(ulong)uintVar17 << 3);\n        uintVar17 = *(uint *)(longVar7 + 4);\n        debugInfo[0x11] = longVar12;\n        *(undefined8 *)(longVar12 + (ulong)uintVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pointerVar8 = strchr(string,0x3a);\n    if ((pointerVar8 != (char *)0x0) && ((pointerVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        ulongVar14 = debugInfo[0xd];\n        ulongVar15 = offset;\n        if ((ulongVar14 != 0xffffffffffffffff) && (ulongVar15 = ulongVar14, offset < ulongVar14)) {\n          ulongVar15 = offset;\n        }\n        charVar3 = FUN_0010c1c6(context,debugInfo);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        charVar3 = FUN_0010be1a(context,ulongVar15);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = offset;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    localPointer48 = strchr(string,0x3a);\n    if (localPointer48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localPointer48[1] == ':') goto code_r0x00111cc7;\n    if (*string == '$') {\n      charVar3 = string[1];\n      pointerVar16 = \"eh_throw\";\n      if (charVar3 != 'e') {\n        if (charVar3 < 'f') {\n          if ((charVar3 != 'X') && (charVar3 != '_')) {\nLAB_00111d1a:\n            undefinedVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(string,undefinedVar9);\n          }\n        }\n        else {\n          pointerVar16 = \"this\";\n          if (charVar3 == 't') goto LAB_00111d62;\n          if (charVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pointerVar16 = (char *)0x0;\n      if ((string != localPointer48) && ((*string != ' ' || (localPointer48 != string + 1)))) {\n        pointerVar16 = (char *)FUN_00109a0b(string,(int)localPointer48 - (int)string);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localPointer48[1];\n    pointerVar8 = localPointer48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    pointerVar8 = localPointer48 + 2;\n    charVar3 = localPointer48[1];\n    switch(charVar3) {\n    case 'C':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      pointerVar8 = \"debug_record_label: not implemented\";\n      if (longVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      charVar3 = FUN_0010bc80(context,pointerVar16,longVar12,charVar3 == 'F',offset);\n      if (charVar3 != '\\0') {\n        do {\n          if (*localPointer48 != ';') {\n            return 1;\n          }\n          localPointer48 = localPointer48 + 1;\n          longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (pointerVar16 == (char *)0x0) goto LAB_0011208f;\n      longVar10 = debugInfo[3];\n      longVar7 = (long *)debugInfo[2];\n      charVar3 = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localPointer48 = pointerVar8;\n        do {\n          if (*localPointer48 != ';') {\n            return 1;\n          }\n          localPointer48 = localPointer48 + 1;\n          longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      break;\n    case 'S':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar3 = localPointer48[2];\n      if (charVar3 == 't') {\n        pointerVar8 = localPointer48 + 3;\n      }\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,pointerVar16,&localPointer48,localPointerArray40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (pointerVar16 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(debugInfo + 0x35);\n      longVar7 = (long *)FUN_0010c6be(context,pointerVar16,longVar12);\n      if (longVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArray40[0] != (long **)0x0) {\n        *localPointerArray40[0] = longVar7;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      pointerPointerVar13 = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pointerVar8 = localPointer48 + 3;\n      if (((localPointer48[2] != '\\0') && (pointerVar8 = localPointer48 + 4, localPointer48[3] == 'n')) &&\n         (pointerVar8 = localPointer48 + 5, pointerVar16 = localPointer48 + 4, localPointer48 = pointerVar8, *pointerVar16 == '0')) {\n        for (; pointerVar8 = localPointer48, *localPointer48 != '\\0'; localPointer48 = localPointer48 + 1) {\n          if (*localPointer48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      break;\n    case 'c':\n      if (localPointer48[2] == '=') {\n        pointerVar8 = localPointer48 + 4;\n        charVar3 = localPointer48[3];\n        localPointer48 = pointerVar8;\n        if (charVar3 == 'i') {\n          longVar12 = strtol(pointerVar8,(char **)0x0,10);\n          if (pointerVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar10 = FUN_00112996(context,pointerVar16,4);\n          if (longVar10 != 0) {\n            *(long *)(longVar10 + 0x20) = (long)(int)longVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'r') {\n          doubleVar19 = strtod(pointerVar8,(char **)0x0);\n          if (pointerVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar12 = FUN_00112996(context,pointerVar16,5);\n          if (longVar12 != 0) {\n            *(double *)(longVar12 + 0x20) = doubleVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'e') {\n          longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n          if (longVar12 == 0) {\n            return 0;\n          }\n          pointerVar8 = localPointer48;\n          if (*localPointer48 == ',') {\n            longVar10 = strtol(localPointer48,(char **)0x0,10);\n            if (pointerVar16 == (char *)0x0) {\n              return 0;\n            }\n            longVar11 = FUN_00112996(context,pointerVar16,6);\n            if (longVar11 != 0) {\n              longVar7 = (long *)xmalloc(0x10);\n              *longVar7 = longVar12;\n              longVar7[1] = (long)(int)longVar10;\n              *(long **)(longVar11 + 0x20) = longVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localPointer48[2] == 'F') {\n        localPointer48 = localPointer48 + 3;\n        longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n        if (longVar12 == 0) {\n          return 0;\n        }\n        undefinedVar9 = FUN_00113ce0(longVar12,0,0);\n        longVar12 = FUN_00113d3a(undefinedVar9);\n      }\n      else {\n        localPointer48 = pointerVar8;\n        longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      }\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 1;\n      break;\n    case 'r':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 5;\nLAB_001123e8:\n      charVar3 = FUN_0010c139(context,debugInfo,pointerVar16,longVar12,undefinedVar9,offset);\n      goto joined_r0x001123f8;\n    case 't':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,pointerVar16,&localPointer48,localPointerArray40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (pointerVar16 == (char *)0x0) {\n        return 1;\n      }\n      longVar7 = (long *)FUN_0010c218(context,pointerVar16,longVar12);\n      if (longVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArray40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArray40[0] = longVar7;\n      return 1;\n    case 'v':\n      localPointer48 = pointerVar8;\n      longVar12 = FUNC_0010ee3f(context,debugInfo,0,&localPointer48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n    }\n    charVar3 = FUN_0010bd62(context,pointerVar16,longVar12,undefinedVar9,offset);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (count == 1)) {\n      return 1;\n    }\n    charVar3 = FUN_0010c1c6(context,debugInfo);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    charVar3 = FUN_0010bf20(context,debugInfo[7] + debugInfo[6] + offset);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    pointerVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        pointerVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pointerVar8 = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar9 = dcgettext(0,pointerVar8,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar9);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        intVar5 = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = intVar5 + 1U;\n        longVar12 = xrealloc(debugInfo[0x11],(ulong)(intVar5 + 1U) << 3);\n        pointerVar6 = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = longVar12;\n        while( true ) {\n          if (pointerVar6 == (undefined8 *)0x0) {\n            undefinedVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(string,undefinedVar9);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((offset == pointerVar6[3]) && (intVar5 = strcmp((char *)pointerVar6[2],string), intVar5 == 0))\n          break;\n          pointerVar6 = (undefined8 *)*pointerVar6;\n        }\n        *(undefined8 *)(longVar12 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = pointerVar6[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        longVar12 = debugInfo[10];\n        if (longVar12 != 0) {\n          longVar10 = *(long *)(longVar12 + 8);\n          uintVar17 = *(uint *)(longVar12 + 0x20);\n          debugInfo[10] = longVar10;\n          if ((uintVar17 < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(longVar12 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)uintVar17 * 8),\n             longVar10 != 0)) {\n            string = *(char **)(longVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        string = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (count == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      charVar3 = FUN_0010be88(context,debugInfo[7] + debugInfo[6] + offset);\n      if (charVar3 == '\\0') {\n        return 0;\n      }\n      charVar3 = FUN_0010c1c6(context,debugInfo);\n      if (charVar3 != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pointerVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pointerVar8 = (char *)dcgettext(0,pointerVar8,5);\n  fprintf(_stderr,pointerVar8);\n  return 0;\ncode_r0x00111cc7:\n  localPointer48 = localPointer48 + 2;\n  localPointer48 = strchr(localPointer48,0x3a);\n  if (localPointer48 == (char *)0x0) {\n    pointerVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localPointer48 = pointerVar8;\n    FUN_00108fb9(string);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar3 != 't') {\n      return 1;\n    }\n    longVar7 = (long *)FUN_0010c218(context,pointerVar16,longVar7);\n    if (longVar7 != (long *)0x0) {\n      if (localPointerArray40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArray40[0] = longVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pointerVar16) &&\n     (intVar5 = strcmp((char *)pplVar18[1],pointerVar16), intVar5 == 0)) {\n    pplVar18[3] = longVar7;\n    *pointerPointerVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pointerPointerVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar10 < 1) {\nLAB_0011208f:\n    undefinedVar9 = 1;\nLAB_001121c4:\n    charVar3 = FUN_0010c05d(context,pointerVar16,longVar12,undefinedVar9,offset);\njoined_r0x001123f8:\n    if (charVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pointerVar8 = *(char **)(*longVar7 + 8);\n  if ((charVar3 != '\\0') && (charVar3 == *pointerVar8)) {\n    pointerVar8 = pointerVar8 + 1;\n  }\n  if ((*pointerVar8 == *pointerVar16) && (intVar5 = strcmp(pointerVar8,pointerVar16), intVar5 == 0)) {\n    offset = *(long *)(*longVar7 + 0x10) + *(long *)(*(long *)(*longVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar10 = longVar10 + -1;\n  longVar7 = longVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "xmalloc",
                "fprintf",
                "FUN_00108fe8",
                "FUN_0010c139",
                "FUN_00108fb9",
                "strchr",
                "free",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "strtod",
                "strcmp",
                "FUN_0010bbd3",
                "strtol",
                "FUN_00112996",
                "concat",
                "FUN_0010be88",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_00109a0b",
                "strlen",
                "xstrdup",
                "FUN_0010c1c6",
                "FUN_0010c05d",
                "FUN_0010c218",
                "xrealloc",
                "FUN_0010bf20",
                "FUN_0010bd62",
                "FUN_00108f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "relocated_code_analysis_00115dc0",
                "param_1": "fileHandle",
                "param_2": "headerArray",
                "param_3": "headerSize",
                "cVar1": "errorFlag",
                "iVar2": "errorCode",
                "uVar3": "relocUpperBound",
                "lVar4": "relocSize",
                "puVar5": "relocArray",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "currentReloc",
                "puVar8": "newReloc",
                "uVar9": "index",
                "uStack_38": "stackVar"
            },
            "code": "\nvoid relocatedCodeAnalysis_00115dc0(undefined8 fileHandle,undefined8 *headerArray,long headerSize)\n\n{\n  char errorFlag;\n  int errorCode;\n  undefined8 relocUpperBound;\n  long relocSize;\n  undefined8 *relocArray;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *currentReloc;\n  undefined8 *newReloc;\n  ulong index;\n  undefined8 stackVar;\n  \n  errorFlag = FUN_00115f50(fileHandle,headerArray,0);\n  if (errorFlag != '\\0') {\n    return;\n  }\n  relocUpperBound = headerArray[0xc];\n  if ((((*(byte *)(headerSize + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (relocSize = FUN_00114190(*headerArray,0,0x100), relocSize == 0)) {\n    relocSize = bfd_get_reloc_upper_bound(fileHandle,headerArray);\n    if (relocSize < 0) {\n      if ((relocSize != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a20 = 1;\n        relocUpperBound = 0;\nLAB_00108315:\n        FUN_001126c0(0,fileHandle,headerArray,relocUpperBound,stackVar);\n        return;\n      }\n    }\n    else if (relocSize != 0) {\n      relocArray = (undefined8 *)headerArray[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(headerSize);\n        if (relocArray == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(fileHandle,headerArray,relocArray,DAT_001278b0);\n        if ((long)relocCount < 0) {\n          DAT_00127a20 = 1;\n          relocUpperBound = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(headerArray + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        currentReloc = relocArray;\n        for (index = 0; index != relocCount; index = index + 1) {\n          newReloc = currentReloc;\n          if (((*(long **)relocArray[index] != (long *)0x0) &&\n              (relocSize = **(long **)relocArray[index], relocSize != 0)) &&\n             (errorFlag = FUN_00115d70(*(undefined8 *)(relocSize + 8),DAT_00127a08), errorFlag != '\\0')) {\n            newReloc = currentReloc + 1;\n            *currentReloc = relocArray[index];\n          }\n          currentReloc = newReloc;\n        }\n        *currentReloc = 0;\n        relocCount = (long)currentReloc - (long)relocArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(headerSize + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(headerSize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(headerSize,relocUpperBound,relocArray,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "FUN_00114190",
                "xexit",
                "bfd_alloc",
                "FUN_001126c0",
                "FUN_001082df",
                "FUN_00115f50",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "relocated_code_analysis_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "process_data_0010d559",
                "param_1": "inputArray",
                "param_2": "inputString",
                "param_3": "outputCount",
                "bVar1": "currentChar",
                "pbVar2": "currentByte",
                "cVar3": "result",
                "uVar4": "length",
                "iVar5": "comparisonResult",
                "ppcVar6": "tempArray",
                "sVar7": "stringLength",
                "lVar8": "tempValue",
                "plVar9": "pointerArray",
                "pcVar10": "tempString",
                "__s1": "comparisonString",
                "__ptr": "tempPointer",
                "pbVar11": "newByte",
                "uVar12": "operationFlag",
                "__nptr": "newPointer",
                "local_64": "counter",
                "local_40": "stringArray"
            },
            "code": "\nundefined8 processData_0010d559(undefined8 *inputArray,byte **inputString,long *outputCount)\n\n{\n  byte currentChar;\n  byte *currentByte;\n  char result;\n  uint length;\n  int comparisonResult;\n  char **tempArray;\n  size_t stringLength;\n  long tempValue;\n  long *pointerArray;\n  char *tempString;\n  char *comparisonString;\n  void *tempPointer;\n  byte *newByte;\n  undefined8 operationFlag;\n  byte *newPointer;\n  int counter;\n  char *stringArray [2];\n  \n  currentByte = *inputString;\n  currentChar = currentByte[1];\n  if ((char)currentChar < ':') {\n    if ((char)currentChar < '1') goto LAB_0010d5d8;\n    counter = (char)currentChar + -0x30;\n    if (currentByte[2] == 0x5f) {\n      *inputString = currentByte + 1;\n    }\n    newByte = *inputString + 2;\n  }\n  else {\n    if (((currentChar != 0x5f) || (((&_sch_istable)[(ulong)currentByte[2] * 2] & 4) == 0)) ||\n       (currentByte[2] == 0x30)) goto LAB_0010d5d8;\n    newPointer = currentByte + 2;\n    tempValue = strtol((char *)newPointer,(char **)0x0,10);\n    counter = (int)tempValue;\n    while (((&_sch_istable)[(ulong)*newPointer * 2] & 4) != 0) {\n      newPointer = newPointer + 1;\n    }\n    newByte = newPointer + 1;\n    if (*newPointer != 0x5f) goto LAB_0010d5d8;\n  }\n  *inputString = newByte;\n  tempArray = (char **)0x0;\n  if (outputCount != (long *)0x0) {\n    tempArray = stringArray;\n  }\n  tempValue = 0;\n  while( true ) {\n    while( true ) {\n      counter = counter + -1;\n      if (counter == -1) {\n        if (outputCount != (long *)0x0) {\n          *outputCount = tempValue;\n        }\n        return 1;\n      }\n      if (**inputString == 0x5f) {\n        *inputString = *inputString + 1;\n      }\n      if (**inputString != 0x74) break;\n      result = FUN_0010d21c(inputArray,inputString,tempArray);\n      tempString = stringArray[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (outputCount != (long *)0x0) {\n        stringLength = strlen(stringArray[0]);\n        tempValue = FUN_0010afd5(*inputArray,inputArray[1],tempString,stringLength & 0xffffffff,9);\n        free(tempString);\n        if (tempValue == 0) {\n          return 0;\n        }\n      }\n    }\n    length = FUN_00108e76(inputString);\n    stringLength = strlen((char *)*inputString);\n    if (stringLength < length) break;\n    if (outputCount != (long *)0x0) {\n      if ((tempValue != 0) && (pointerArray = (long *)FUN_00113b1e(tempValue), pointerArray != (long *)0x0)) {\n        tempString = (char *)FUN_00109a0b(*inputString,length);\n        for (; tempValue = *pointerArray, tempValue != 0; pointerArray = pointerArray + 1) {\n          tempValue = *(long *)(tempValue + 8);\n          if (tempValue == 0) {\n            free(tempString);\n            return 0;\n          }\n          comparisonString = (char *)FUN_001129f4(tempValue);\n          if ((comparisonString != (char *)0x0) && (comparisonResult = strcmp(comparisonString,tempString), comparisonResult == 0)) break;\n        }\n        free(tempString);\n        if (tempValue != 0) goto LAB_0010d7ad;\n      }\n      operationFlag = 9;\n      if (counter == 0) {\n        tempPointer = (void *)FUN_00109a0b(*inputString,length);\n        tempValue = FUN_0010914e(*inputArray,tempPointer);\n        free(tempPointer);\n        if (tempValue != 0) goto LAB_0010d7ad;\n        operationFlag = 0;\n      }\n      tempValue = FUN_0010afd5(*inputArray,inputArray[1],*inputString,length,operationFlag);\n      if (tempValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *inputString = *inputString + length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(currentByte);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001129f4",
                "FUN_00113b1e",
                "FUN_0010914e",
                "strtol",
                "FUN_0010afd5",
                "free",
                "FUN_0010911f",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strlen",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "arguments",
                "fflush": "flushStandardOutput",
                "_stdout": "standardOutput",
                "fprintf": "printToStandardError",
                "_stderr": "standardError",
                "vfprintf": "printFormattedToStandardError",
                "putc": "writeCharacterToStandardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_001275e0);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "clean_up_and_free_memory_00108466",
                "param_7": "memoryAddress"
            },
            "code": "\nvoid cleanUpAndFreeMemory_00108466(void)\n\n{\n  void *memoryAddress;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0);\n  free(memoryAddress);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "clean_up_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_digits_00108e76",
                "param_1": "input",
                "bVar1": "current_byte",
                "iVar2": "result"
            },
            "code": "\nint parse_digits_00108e76(byte **input)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **input;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_digits_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2,0x30), input_value != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_value,param_2,param_3), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_and_call_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "value"
            },
            "code": "\nvoid set_param_and_call_thunk_0010e439(long base_address,undefined8 value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = value;\n  FUN_0010e2f0(base_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_call_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permissions_0011283f",
                "param_1": "file_path",
                "param_2": "default_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * check_directory_permissions_0011283f(char *file_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_directory == (char *)0x0) && (file_path != (char *)0x0)) {\n    access_result = access(file_path,7);\n    if (access_result == 0) {\n      access_result = stat(file_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_directory = file_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permissions_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "piVar2": "errorLocation",
                "iVar1": "previousError",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeFileAndReturnError_00108237(void)\n\n{\n  int previousError;\n  int *errorLocation;\n  int fileDescriptor;\n  \n  errorLocation = __errno_location();\n  previousError = *errorLocation;\n  close(fileDescriptor);\n  *errorLocation = previousError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "debugContext",
                "param_2": "filename",
                "param_3": "recordSize",
                "param_4": "recordType",
                "uVar1": "errorStr",
                "plVar2": "recordBuffer",
                "puVar3": "recordData",
                "lVar4": "loopCounter",
                "puVar5": "tempPtr",
                "pcVar6": "tempFilename",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long debugContext,char *filename,long recordSize,uint recordType,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 errorStr;\n  long *recordBuffer;\n  undefined4 *recordData;\n  long loopCounter;\n  undefined4 *tempPtr;\n  char *tempFilename;\n  byte bVar7;\n  undefined returnValue [16];\n  \n  bVar7 = 0;\n  tempFilename = \"\";\n  if (filename != (char *)0x0) {\n    tempFilename = filename;\n  }\n  if (recordSize != 0) {\n    if (*(long *)(debugContext + 8) == 0) {\n      errorStr = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorStr);\n    }\n    else {\n      recordBuffer = (long *)xmalloc(0x18);\n      *recordBuffer = recordSize;\n      *(undefined (*) [16])(recordBuffer + 1) = ZEXT816(0);\n      recordData = (undefined4 *)xmalloc(0x30);\n      *(long **)(debugContext + 0x18) = recordBuffer;\n      recordBuffer[2] = (long)recordData;\n      tempPtr = recordData;\n      for (loopCounter = 0xc; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)bVar7 * -2 + 1;\n      }\n      *(undefined4 **)(debugContext + 0x20) = recordData;\n      loopCounter = *(long *)(debugContext + 0x10);\n      *(undefined8 *)(recordData + 6) = param_5;\n      *(undefined8 *)(recordData + 8) = 0xffffffffffffffff;\n      loopCounter = FUN_00112925(loopCounter + 0x10,tempFilename,3,(recordType & 0xff) + 1);\n      if (loopCounter != 0) {\n        *(long **)(loopCounter + 0x20) = recordBuffer;\n        errorStr = CONCAT71((int7)((ulong)loopCounter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorStr = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param_6;\n  returnValue._0_8_ = errorStr;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107880",
                "FUN_001125fa",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "distance",
                "lVar3": "prefixLength",
                "lVar4": "suffixLength",
                "pcVar5": "newPath",
                "bVar6": "foundSlash"
            },
            "code": "\nvoid createFilePath_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long distance;\n  long prefixLength;\n  long suffixLength;\n  char *newPath;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    prefixLength = 0;\n  }\n  else {\n    suffixLength = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(suffixLength + 0xb);\n    prefixLength = suffixLength + 1;\n    newPath = lastSlash;\n    for (distance = suffixLength; distance != 0; distance = distance + -1) {\n      *newPath = *path;\n      path = path + (ulong)foundSlash * -2 + 1;\n      newPath = newPath + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlash[suffixLength] = '/';\n  }\n  *(undefined8 *)(lastSlash + prefixLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + prefixLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "data_ptr",
                "param_2": "start_val",
                "param_3": "end_val",
                "param_4": "flag",
                "cVar1": "flag_value",
                "__s": "str",
                "__s_00": "str_2",
                "sVar5": "len_str",
                "sVar6": "len_str_2",
                "__s_01": "result_str",
                "local_41": "local_flag",
                "iVar2": "int_val",
                "iVar3": "result",
                "uVar4": "status",
                "lVar7": "count"
            },
            "code": "\nundefined4 processData_0010a181(long data_ptr,long start_val,long end_val,byte flag)\n\n{\n  char flag_value;\n  int int_val;\n  int result;\n  undefined4 status;\n  char *str;\n  char *str_2;\n  size_t len_str;\n  size_t len_str_2;\n  char *result_str;\n  long count;\n  byte local_flag;\n  \n  flag_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  str = (char *)FUN_00109b2f();\n  local_flag = 1;\n  if (flag_value == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  int_val = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  str_2 = (char *)FUN_00109b2f(data_ptr);\n  len_str = strlen(str);\n  len_str_2 = strlen(str_2);\n  result_str = (char *)xmalloc(len_str + 100 + len_str_2);\n  if (flag == 0) {\n    *result_str = '\\0';\n    count = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    count = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = count + 1;\n    sprintf(result_str,\"%ld=@S;\",count);\n    local_flag = flag;\n  }\n  len_str = strlen(result_str);\n  sprintf(result_str + len_str,\"ar%s;%ld;%ld;%s\",str,start_val,end_val,str_2);\n  free(str);\n  free(str_2);\n  result = 0;\n  if (start_val <= end_val) {\n    result = int_val * (((int)end_val - (int)start_val) + 1);\n  }\n  status = FUN_00109b52(data_ptr,result_str,count,local_flag,result);\n  if ((char)status != '\\0') {\n    free(result_str);\n  }\n  return status;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_0011a480",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "archIndex",
                "iVar3": "archMatchIndex",
                "pcVar4": "headerMessage",
                "sVar5": "headerLen",
                "pcVar6": "tempFilePath",
                "uVar7": "result",
                "piVar8": "errorNumberPtr",
                "iVar9": "targetIndex",
                "lVar10": "archNameLen",
                "lVar11": "archMatchCount",
                "ppcVar12": "archAndMachNames",
                "uVar13": "maxArchNameLen",
                "uVar14": "nameLength"
            },
            "code": "\n\n\nvoid printBFDHeaderInfo_001199d0(void)\n\n{\n  int columnWidth;\n  int archIndex;\n  int archMatchIndex;\n  char *headerMessage;\n  size_t headerLen;\n  char *tempFilePath;\n  undefined8 result;\n  int *errorNumberPtr;\n  int targetIndex;\n  long archNameLen;\n  long archMatchCount;\n  char **archAndMachNames;\n  uint maxArchNameLen;\n  ulong nameLength;\n  int local_70;\n  \n  headerMessage = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerMessage,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    headerMessage = getenv(\"TMPDIR\");\n    result = FUN_0011283f(headerMessage,0);\n    headerMessage = getenv(\"TMP\");\n    result = FUN_0011283f(headerMessage,result);\n    headerMessage = getenv(\"TEMP\");\n    result = FUN_0011283f(headerMessage,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    headerMessage = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (headerMessage == (char *)0x0) {\n      headerMessage = \".\";\n    }\n    headerLen = strlen(headerMessage);\n    tempFilePath = (char *)xmalloc((int)headerLen + 2);\n    DAT_001278c0 = strcpy(tempFilePath,headerMessage);\n    DAT_001278c0[headerLen & 0xffffffff] = '/';\n    DAT_001278c0[(int)headerLen + 1] = '\\0';\n  }\n  headerMessage = DAT_001278c0;\n  headerLen = strlen(DAT_001278c0);\n  archNameLen = (long)(int)headerLen;\n  tempFilePath = (char *)xmalloc(archNameLen + 9);\n  strcpy(tempFilePath,headerMessage);\n  *(undefined2 *)(tempFilePath + archNameLen) = 0x6363;\n  *(undefined4 *)(tempFilePath + archNameLen + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + archNameLen + 2) + 3) = 0x585858;\n  tempFilePath[archNameLen + 8] = '\\0';\n  archIndex = mkstemps(tempFilePath,0);\n  if (archIndex == -1) {\n    errorNumberPtr = __errno_location();\n    tempFilePath = strerror(*errorNumberPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerMessage,tempFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchNameLen = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  local_70 = 0;\n  do {\n    headerMessage = (char *)bfd_printable_arch_mach(archIndex);\n    headerLen = strlen(headerMessage);\n    if ((int)maxArchNameLen < (int)(uint)headerLen) {\n      maxArchNameLen = (uint)headerLen;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerMessage = getenv(\"COLUMNS\");\n  archIndex = local_70;\n  if (headerMessage != (char *)0x0) {\n    archNameLen = strtol(headerMessage,(char **)0x0,10);\n    columnWidth = (int)archNameLen;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    local_70 = archIndex;\n    if (-1 < local_70) {\n      return;\n    }\n    archMatchCount = (long)local_70;\n    targetIndex = (columnWidth - maxArchNameLen) + -1;\n    archNameLen = archMatchCount;\n    do {\n      archIndex = (int)archNameLen;\n      if (-1 < archIndex) break;\n      headerLen = strlen(*(char **)(archNameLen * 0x60));\n      archNameLen = archNameLen + 1;\n      targetIndex = (targetIndex - (int)headerLen) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchNameLen + 1),&DAT_0011b4a1);\n    for (archAndMachNames = (char **)(archMatchCount * 0x60);\n        ((ulong)(uint)(archIndex - local_70) + archMatchCount) * 0x60 - (long)archAndMachNames != 0;\n        archAndMachNames = archAndMachNames + 0xc) {\n      printf(\"%s \",*archAndMachNames);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerMessage = (char *)bfd_printable_arch_mach(targetIndex,0);\n      archMatchIndex = strcmp(headerMessage,\"UNKNOWN!\");\n      if (archMatchIndex != 0) {\n        result = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchNameLen,result);\n        archAndMachNames = (char **)(archMatchCount * 0x60);\n        archMatchIndex = local_70;\n        while (archIndex != archMatchIndex) {\n          if (*(char *)((long)archAndMachNames + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            headerLen = strlen(*archAndMachNames);\n            for (nameLength = headerLen & 0xffffffff; (int)nameLength != 0; nameLength = (ulong)((int)nameLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archAndMachNames,_stdout);\n          }\n          archMatchIndex = archMatchIndex + 1;\n          if (archIndex != archMatchIndex) {\n            putc(0x20,_stdout);\n          }\n          archAndMachNames = archAndMachNames + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_00119f70",
                "xmalloc",
                "bfd_iterate_over_targets",
                "fprintf",
                "abort",
                "unlink",
                "FUN_00104943",
                "strlen",
                "__errno_location",
                "strerror",
                "bfd_printable_arch_mach",
                "free",
                "printf",
                "mkstemps",
                "strcpy",
                "FUN_0011283f",
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_header_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "decode_string_0010d21c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr1",
                "bVar3": "byteVar2",
                "cVar4": "charVar",
                "bVar5": "byteVar3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "size",
                "pbVar10": "bytePtr2",
                "__ptr": "ptrVar1",
                "__ptr_00": "ptrVar2",
                "__haystack": "haystack",
                "pcVar11": "ptrVar3",
                "uVar12": "outputVar",
                "pcVar13": "ptrVar4",
                "bVar14": "byteVar4",
                "pcVar15": "ptrVar5",
                "bVar16": "byteVar5",
                "bVar17": "byteVar6",
                "bVar18": "byteVar7",
                "bVar19": "byteVar8",
                "uVar20": "counter",
                "uVar21": "ulongVar",
                "local_3c": "array"
            },
            "code": "\nundefined4 decodeString_0010d21c(undefined8 input1,byte **input2,undefined8 *output)\n\n{\n  byte byteVar1;\n  byte *bytePtr1;\n  byte byteVar2;\n  char charVar;\n  byte byteVar3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t size;\n  byte *bytePtr2;\n  void *ptrVar1;\n  void *ptrVar2;\n  char *haystack;\n  char *ptrVar3;\n  undefined8 outputVar;\n  char *ptrVar4;\n  byte byteVar4;\n  char *ptrVar5;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  uint counter;\n  ulong ulongVar;\n  uint array [3];\n  \n  bytePtr1 = *input2;\n  *input2 = bytePtr1 + 1;\n  array[0] = FUN_00108e76(input2);\n  ulongVar = (ulong)array[0];\n  if (array[0] != 0) {\n    bytePtr2 = *input2;\n    size = strlen((char *)bytePtr2);\n    if (ulongVar <= size) {\n      *input2 = bytePtr2 + ulongVar;\n      counter = 0;\n      result = FUN_00108ea1(input2,array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (array[0] <= counter) {\n          if (output == (undefined8 *)0x0) {\n            return result;\n          }\n          ptrVar1 = (void *)FUN_00109a0b(bytePtr1,(int)*input2 - (int)bytePtr1);\n          ptrVar2 = (void *)concat(\"NoSuchStrinG__\",ptrVar1,0);\n          free(ptrVar1);\n          haystack = (char *)cplus_demangle(ptrVar2,2);\n          free(ptrVar2);\n          if ((haystack != (char *)0x0) &&\n             (ptrVar3 = strstr(haystack,\"::NoSuchStrinG\"), ptrVar4 = haystack,\n             ptrVar5 = haystack, ptrVar3 != (char *)0x0)) {\n            for (; ptrVar4 != ptrVar3; ptrVar4 = ptrVar4 + 1) {\n              if ((*ptrVar4 != ' ') ||\n                 (((ptrVar4[1] == '>' && (haystack < ptrVar4)) && (ptrVar4[-1] == '>')))) {\n                *ptrVar5 = *ptrVar4;\n                ptrVar5 = ptrVar5 + 1;\n              }\n            }\n            outputVar = FUN_00109a0b(haystack,(int)ptrVar5 - (int)haystack);\n            *output = outputVar;\n            free(haystack);\n            return result;\n          }\n          FUN_0010911f(bytePtr1);\n          free(haystack);\n          return 0;\n        }\n        bytePtr2 = *input2;\n        if (*bytePtr2 != 0x5a) {\n          byteVar3 = FUN_0010c95e(input1,input2,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar7 = 0;\n          byteVar6 = 0;\n          byteVar8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar5 = byteVar2;\n              byteVar1 = *bytePtr2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = byteVar5;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar5;\n              byteVar7 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar5;\n              byteVar8 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar5;\n              byteVar6 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *input2 = bytePtr2 + 1;\n        charVar = FUN_0010c95e(input1,input2,0);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(bytePtr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar5 == 0) {\n    if (byteVar8 == 0) {\n      if (byteVar7 == 0) {\n        if (byteVar6 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = FUN_00108e76(input2);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *input2 = *input2 + uintVar1;\n          }\n        }\n        else {\n          if (**input2 == 0x6d) {\n            *input2 = *input2 + 1;\n          }\n          while( true ) {\n            bytePtr2 = *input2;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *input2 = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *input2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *input2;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *input2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = FUN_00108e76(input2);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**input2 == 0x6d) {\n        *input2 = *input2 + 1;\n      }\n      intVar1 = FUN_00108e76(input2);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**input2 == 0x6d) {\n      *input2 = *input2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**input2 * 2] & 4) != 0) {\n      *input2 = *input2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "concat",
                "free",
                "cplus_demangle",
                "FUN_0010911f",
                "strstr",
                "abort",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strlen",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "decode_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "unusedVar"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 unusedVar;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unusedParam2,unusedVar);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_memory_if_needed_0010c139",
                "param_1": "address",
                "param_2": "structure",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6",
                "uVar1": "savedValue",
                "cVar2": "character",
                "uVar3": "result",
                "puVar4": "allocatedMemory",
                "in_R10": "register10",
                "unaff_R15": "unaffectedRegister15"
            },
            "code": "\nulong allocateMemoryIfNeeded_0010c139(undefined8 address,long structure,undefined8 parameter3,undefined8 parameter4,\n                  undefined4 parameter5,undefined8 parameter6)\n\n{\n  undefined8 savedValue;\n  char character;\n  ulong result;\n  undefined8 *allocatedMemory;\n  undefined8 register10;\n  undefined8 unaffectedRegister15;\n  \n  character = *(char *)(structure + 0x60);\n  if ((character != '\\0') && ((*(int *)(structure + 0x40) != 0 || (*(char *)(structure + 0x44) == '\\0')))) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    savedValue = *(undefined8 *)(structure + 0x78);\n    *(undefined8 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[2] = parameter4;\n    *(undefined4 *)(allocatedMemory + 3) = parameter5;\n    allocatedMemory[4] = parameter6;\n    *(undefined8 **)(structure + 0x78) = allocatedMemory;\n    *allocatedMemory = savedValue;\n    allocatedMemory[1] = parameter3;\n    return CONCAT71((int7)((ulong)unaffectedRegister15 >> 8),character) & 0xffffffff;\n  }\n  result = FUN_0010c05d(address,parameter3,parameter4,parameter5,parameter6,register10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_memory_if_needed_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_parameter_value_0010e439",
                "param_1": "objectAddress",
                "param_2": "newParameter"
            },
            "code": "\nvoid updateParameterValue_0010e439(long objectAddress,undefined8 newParameter)\n\n{\n  *(undefined8 *)(objectAddress + 0x210) = newParameter;\n  FUN_0010e2f0(objectAddress,0x84,0,0,newParameter);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "update_parameter_value_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010e842",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e918",
                "FUN_0010e5db",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_00109dfe",
                "FUN_0010ee3f",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010c95e",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00115530",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_001199d0",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_001125fa",
                "FUN_0010ba08",
                "FUN_00113fb0",
                "FUN_0010a377",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "update_data_with_param_00109d3e",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "updatedValue"
            },
            "code": "\nvoid updateDataWithParam_00109d3e(undefined8 data,int size)\n\n{\n  undefined8 updatedValue;\n  \n  updatedValue = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    updatedValue = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  FUN_00109cf4(data,updatedValue,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_with_param_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_conditions_00112502",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "uVar1": "counter",
                "puVar2": "ptr",
                "uVar3": "value",
                "cVar4": "result"
            },
            "code": "\nundefined check_conditions_00112502(long arg_1,undefined8 arg_2,ulong arg_3)\n\n{\n  uint counter;\n  undefined8 *ptr;\n  undefined8 value;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(arg_1 + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(arg_1 + 0x48), counter < 10 && (ptr[(ulong)counter + 2] != -1))) {\n      if (arg_3 <= (ulong)ptr[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(arg_2,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(arg_1 + 0x48) = *(int *)(arg_1 + 0x48) + 1;\n    }\n    value = *ptr;\n    *(undefined4 *)(arg_1 + 0x48) = 0;\n    *(undefined8 *)(arg_1 + 0x40) = value;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_conditions_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_lines_00104cc1",
                "uVar1": "message",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "currentByte",
                "unaff_RBX": "line",
                "pbVar5": "nextLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "buffer",
                "unaff_R13": "returnAddress",
                "unaff_R14": "currentLine",
                "unaff_R15": "prevLine",
                "param_7": "param1",
                "param_8": "resultPtr",
                "param_9": "param2"
            },
            "code": "\nvoid parseLines_00104cc1(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *currentChar;\n  byte currentByte;\n  byte *line;\n  byte *nextLine;\n  int lineNumber;\n  byte *buffer;\n  undefined8 returnAddress;\n  byte *currentLine;\n  byte *prevLine;\n  undefined8 param1;\n  undefined8 *resultPtr;\n  byte *param2;\n  \ncode_r0x00104cc1:\n  param2 = buffer;\n  message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(message,param1,lineNumber);\n  nextLine = line;\n  buffer = param2;\nLAB_00114599:\n  do {\n    *buffer = 0;\n    if (prevLine < buffer) {\n      slot = (byte **)htab_find_slot();\n      *slot = prevLine;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = nextLine;\n    if (currentLine[1] == 0) {\n      *resultPtr = returnAddress;\n      return;\n    }\n    for (; currentByte = *currentChar, currentLine = currentChar, currentByte != 10; currentChar = currentChar + 1) {\n      if ((char)currentByte < '\\v') {\n        if (currentByte == 0) {\n          line = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentByte == 0xd) {\n          *currentChar = 0;\n          line = currentChar + 1;\n          if (currentChar[1] == 10) {\n            line = currentChar + 2;\n            currentLine = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentByte == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      currentLine = currentChar + 1;\n      line = currentChar + 2;\n    }\n    else {\n      line = currentChar + 1;\n    }\nLAB_00114553:\n    currentByte = *nextLine;\n    prevLine = nextLine;\n    while ((currentByte == 0x20 || (buffer = prevLine, currentByte == 9))) {\n      nextLine = prevLine + 1;\n      prevLine = prevLine + 1;\n      currentByte = *nextLine;\n    }\n    do {\n      nextLine = line;\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = buffer[1];\n      buffer = buffer + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentByte = buffer[1];\n    if ((((((currentByte == 9) || (currentByte == 0x20)) && ((currentByte = buffer[2], currentByte == 9 || (currentByte == 0x20)))\n          ) && ((currentByte = buffer[3], currentByte == 9 || (currentByte == 0x20)))) &&\n        ((currentByte = buffer[4], currentByte == 9 || (currentByte == 0x20)))) &&\n       ((currentByte = buffer[5], currentByte == 9 || (currentByte == 0x20)))) {\n      currentByte = buffer[6];\n      currentChar = buffer + 6;\n      if ((currentByte == 9) || (currentByte == 0x20)) {\n        do {\n          do {\n            currentByte = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (currentByte == 0x20);\n        } while (currentByte == 9);\n      }\n    }\n    if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104d1c",
                "htab_find_slot",
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e2f0",
                "FUN_00119f70",
                "FUN_00109be3",
                "FUN_0010ab4d",
                "FUN_00116b90",
                "FUN_00109c2e",
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010b6ea",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_data_structure_00113bfa",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "lVar1": "result",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong createDataStructure_00113bfa(long inputValue1,long inputValue2)\n\n{\n  long result;\n  long *allocatedMemory;\n  \n  if (((inputValue1 != 0) && (inputValue2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocatedMemory = (long *)xmalloc(0x10);\n    *allocatedMemory = inputValue1;\n    allocatedMemory[1] = inputValue2;\n    *(long **)(result + 0x10) = allocatedMemory;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "process_output_format_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint processOutputFormat_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint ebx;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    ebx = ebx & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(var2,var1,param3);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "process_output_format_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "format_and_send_data_00109e76",
                "param_1": "dataPointer",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid formatAndSendData_00109e76(long dataPointer,uint value)\n\n{\n  long currentValue;\n  char formattedString [58];\n  \n  currentValue = *(long *)(dataPointer + 0x68);\n  *(long *)(dataPointer + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  FUN_00109b52(dataPointer,formattedString,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_send_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_structure_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "lVar2": "currentIndex",
                "lVar3": "offset",
                "uVar4": "duplicatedString",
                "iVar1": "newIndex"
            },
            "code": "\nulong updateDataStructure_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int newIndex;\n  long currentIndex;\n  long offset;\n  undefined8 duplicatedString;\n  \n  currentIndex = (long)DAT_001278a0;\n  offset = currentIndex * 0x18;\n  free((void *)(&DAT_00127730)[currentIndex * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = newValue1;\n  *(undefined4 *)(&DAT_00127724 + offset) = newValue2;\n  *(undefined8 *)(&DAT_00127728 + offset) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  (&DAT_00127730)[currentIndex * 3] = duplicatedString;\n  newIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_structure_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_string_0010afd5",
                "param_1": "ptr_list",
                "param_2": "data",
                "param_3": "str_ptr",
                "param_4": "int_val",
                "param_5": "new_val",
                "param_6": "result",
                "__s2": "search_string",
                "puVar2": "current_ptr",
                "uVar3": "temp",
                "lVar4": "value",
                "puVar5": "inner_ptr",
                "puVar6": "inner_val_ptr",
                "bVar7": "byte_val",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16]\nfind_matching_string_0010afd5(undefined8 *ptr_list,long data,undefined8 str_ptr,undefined4 int_val,\n            undefined4 new_val,undefined8 result)\n\n{\n  int iVar1;\n  char *search_string;\n  undefined8 *current_ptr;\n  undefined8 temp;\n  long value;\n  undefined8 *inner_ptr;\n  undefined4 *inner_val_ptr;\n  byte byte_val;\n  undefined return_value [16];\n  \n  byte_val = 0;\n  search_string = (char *)FUN_00109a0b(str_ptr,int_val);\n  for (ptr_list = (undefined8 *)*ptr_list; ptr_list != (undefined8 *)0x0;\n      ptr_list = (undefined8 *)*ptr_list) {\n    for (current_ptr = (undefined8 *)ptr_list[1]; current_ptr != (undefined8 *)0x0;\n        current_ptr = (undefined8 *)*current_ptr) {\n      if ((undefined8 *)current_ptr[2] != (undefined8 *)0x0) {\n        for (inner_ptr = *(undefined8 **)(undefined8 *)current_ptr[2]; inner_ptr != (undefined8 *)0x0;\n            inner_ptr = (undefined8 *)*inner_ptr) {\n          if ((*(int *)((long)inner_ptr + 0x14) == 1) && (*(char *)inner_ptr[1] == *search_string)) {\n            iVar1 = strcmp((char *)inner_ptr[1],search_string);\n            if (iVar1 == 0) {\n              value = inner_ptr[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_ptr = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (current_ptr == (undefined8 *)0x0) {\n      current_ptr = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(data + 0x1a0);\n      inner_val_ptr = (undefined4 *)((long)current_ptr + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *inner_val_ptr = 0;\n        inner_val_ptr = inner_val_ptr + (ulong)byte_val * -2 + 1;\n      }\n      *(undefined4 *)(current_ptr + 2) = new_val;\n      *current_ptr = temp;\n      current_ptr[1] = search_string;\n      temp = FUN_00113e23(current_ptr + 3,search_string);\n      *(undefined8 **)(data + 0x1a0) = current_ptr;\n      current_ptr[4] = temp;\nLAB_0010b0e7:\n      value = current_ptr[4];\nLAB_0010b0eb:\n      return_value._8_8_ = result;\n      return_value._0_8_ = value;\n      return return_value;\n    }\n    if (*(char *)current_ptr[1] == *search_string) {\n      iVar1 = strcmp((char *)current_ptr[1],search_string);\n      if (iVar1 == 0) {\n        if (*(int *)(current_ptr + 2) == 0) {\n          *(undefined4 *)(current_ptr + 2) = new_val;\n        }\n        free(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_ptr = (undefined8 *)*current_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "free",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_matching_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUNC_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUNC_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00108fe8",
                "sprintf",
                "FUN_0010d882",
                "FUN_00108fb9",
                "free",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_00112b6e",
                "FUN_0010d559",
                "strtol",
                "concat",
                "FUN_0010afd5",
                "FUN_00113d6e",
                "cplus_demangle_init_info",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00109a0b",
                "strncmp",
                "FUN_00113e5e",
                "FUN_00113bfa",
                "FUN_00113fb0",
                "strcpy",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "strcat",
                "xmalloc",
                "fprintf",
                "FUN_00109ab1",
                "strchr",
                "FUN_00113e17",
                "FUN_00109022",
                "cplus_demangle_mangled_name",
                "FUN_00109a32",
                "strcmp",
                "FUN_00113b4a",
                "strstr",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "strlen",
                "malloc",
                "strspn",
                "FUN_001129f4",
                "FUN_00112904",
                "FUN_00113da9",
                "xrealloc",
                "FUN_00113df2",
                "FUN_00108e76"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00107880",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "iterator",
                "lVar3": "entry_offset",
                "piVar4": "entry_ptr",
                "iVar5": "iterator_var",
                "_stderr": "stderr_ptr"
            },
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long iterator;\n  long entry_offset;\n  int *entry_ptr;\n  int iterator_var;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(stderr_ptr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,stderr_ptr);\n  iterator_var = DAT_001278a0;\n  do {\n    iterator = (long)iterator_var;\n    entry_offset = iterator * 0x18;\n    entry_ptr = (int *)(&DAT_00127720 + entry_offset);\n    if ((&DAT_00127730)[iterator * 3] != 0) {\n      stab_name = bfd_get_stab_name(*entry_ptr);\n      if (stab_name == 0) {\n        if (*entry_ptr == 0) {\n          fwrite(\"HdrSym\",1,6,stderr_ptr);\n        }\n        else {\n          fprintf(stderr_ptr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(stderr_ptr,\"%-6s\",stab_name);\n      }\n      fprintf(stderr_ptr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + entry_offset));\n      fprintf(stderr_ptr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + entry_offset));\n      if (*entry_ptr != 0) {\n        fprintf(stderr_ptr,\" %s\",(&DAT_00127730)[iterator * 3]);\n      }\n      fputc(10,stderr_ptr);\n    }\n    iterator_var = (iterator_var + 1) % 0x10;\n  } while (DAT_001278a0 != iterator_var);\n  return param_3;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_stab_name",
                "fputc",
                "fwrite",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "newSize",
                "param_4": "flag",
                "param_5": "ptrFlag",
                "param_6": "param6",
                "lVar1": "newIndex",
                "plVar2": "currentElement",
                "lVar3": "remainingElements",
                "puVar4": "elementPointer",
                "uVar5": "currentSize",
                "bVar6": "isFlagSet",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array,long value,ulong newSize,int flag,undefined4 *ptrFlag,\n            undefined8 param6)\n\n{\n  long newIndex;\n  long *currentElement;\n  long remainingElements;\n  undefined *elementPointer;\n  ulong currentSize;\n  byte isFlagSet;\n  undefined returnValue [16];\n  \n  isFlagSet = 0;\n  newSize = newSize & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= newSize) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= newSize; currentSize = currentSize * 2) {\n    }\n    newIndex = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newIndex;\n    elementPointer = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newIndex);\n    for (remainingElements = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingElements != 0; remainingElements = remainingElements + -1) {\n      *elementPointer = 0;\n      elementPointer = elementPointer + (ulong)isFlagSet * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  currentElement = (long *)(newSize * 0x18 + *(long *)(array + 0x1a8));\n  if (*currentElement == 0) {\n    newIndex = *(long *)(array + 0x68);\n    *currentElement = newIndex;\n    *(long *)(array + 0x68) = newIndex + 1;\n    currentElement[1] = value;\n    *(int *)(currentElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *ptrFlag;\n  }\n  else {\n    *ptrFlag = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = *currentElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid printErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "check_and_execute_function_00112996",
                "param_1": "baseAddress",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 checkAndExecuteFunction_00112996(long baseAddress,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(baseAddress + 8) != 0) && (*(long *)(baseAddress + 0x10) != 0)) {\n    offset = *(long *)(baseAddress + 0x10) + 0x10;\n    if (*(long *)(baseAddress + 0x20) != 0) {\n      offset = *(long *)(baseAddress + 0x20) + 0x28;\n    }\n    result = FUN_00112925(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "update_class_id_0010c7a0",
                "param_1": "data",
                "param_2": "name",
                "param_3": "type",
                "param_4": "param",
                "uVar1": "result",
                "uVar2": "varValue",
                "lVar3": "typePtr",
                "piVar4": "typeKind",
                "__s1": "typeName",
                "cVar5": "flag",
                "iVar6": "counter",
                "puVar7": "node",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] updateClassID_0010c7a0(long data,char *name,int *type,undefined8 param)\n\n{\n  undefined8 result;\n  uint varValue;\n  long typePtr;\n  int *typeKind;\n  char *typeName;\n  char flag;\n  int counter;\n  undefined8 *node;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typePtr = *(long *)(type + 4);\n  node = (undefined8 *)(ulong)*(uint *)(typePtr + 0xc);\n  if (*(uint *)(typePtr + 0xc) <= *(uint *)(data + 0x38)) {\n    for (node = *(undefined8 **)(data + 0x50); node != (undefined8 *)0x0;\n        node = (undefined8 *)*node) {\n      typeKind = (int *)node[1];\n      if (*typeKind == *type) {\n        typeName = (char *)node[2];\n        if (name == (char *)0x0) {\n          if (typeName == (char *)0x0) {\nLAB_0010c82c:\n            flag = FUN_0010922b(data,typeKind,type);\n            if (flag != '\\0') {\n              varValue = *(uint *)(*(long *)(node[1] + 0x10) + 0xc);\n              node = (undefined8 *)(ulong)varValue;\n              *(uint *)(typePtr + 0xc) = varValue;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((typeName != (char *)0x0) && (*typeName == *name)) &&\n                (counter = strcmp(typeName,name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(data + 0x34) + 1;\n    *(int *)(data + 0x34) = counter;\n    *(int *)(typePtr + 0xc) = counter;\n    node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(data + 0x50);\n    node[2] = name;\n    *(undefined8 **)(data + 0x50) = node;\n    *node = result;\n    node[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)node >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param;\n  return returnValue;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00113f20",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_arrays_0010922b",
                "param_1": "paramArray",
                "param_2": "array1",
                "param_3": "array2",
                "uVar1": "array1DataType",
                "uVar2": "array2DataType",
                "pplVar3": "array1NestedArray",
                "ppcVar4": "nestedArray1",
                "ppcVar5": "nestedArray2",
                "lVar6": "nestedArray1Value1",
                "lVar7": "nestedArray1Value2",
                "lVar8": "nestedArray2Value2",
                "pcVar9": "nestedArray1String1",
                "pcVar10": "nestedArray2String1",
                "cVar11": "comparisonResult",
                "bVar12": "result",
                "iVar13": "stringComparisonResult",
                "uVar14": "nestedArray1NestedArrayValue",
                "uVar15": "nestedArray2NestedArrayValue",
                "puVar16": "nestedArray1NestedArray",
                "puVar17": "nestedArray2NestedArray",
                "plVar18": "subArray1",
                "lVar19": "stringIndex",
                "plVar20": "subArray2",
                "plVar21": "subArray2",
                "lVar22": "stringIndex",
                "local_70": "nestedArray1NestedArray",
                "local_58": "arrayHashTable",
                "plStack_50": "subArray1",
                "local_48": "subArray2"
            },
            "code": "\nbyte compareArrays_0010922b(long paramArray,long *array1,long *array2)\n\n{\n  uint array1DataType;\n  uint array2DataType;\n  long **array1NestedArray;\n  char **nestedArray1;\n  char **nestedArray2;\n  long nestedArray1Value1;\n  long nestedArray1Value2;\n  long nestedArray2Value2;\n  char *nestedArray1String1;\n  char *nestedArray2String1;\n  char comparisonResult;\n  byte result;\n  int stringComparisonResult;\n  undefined8 nestedArray1NestedArrayValue;\n  undefined8 nestedArray2NestedArrayValue;\n  undefined8 *nestedArray1NestedArray;\n  undefined8 *nestedArray2NestedArray;\n  long *subArray1;\n  long stringIndex;\n  long *subArray2;\n  long *subArray2;\n  long stringIndex;\n  long *nestedArray1NestedArray;\n  undefined8 *arrayHashTable;\n  long *subArray1;\n  long *subArray2;\n  \n  subArray1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (subArray1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    array1DataType = *(uint *)array1;\n    if (array1DataType == 1) goto code_r0x00109263;\n    while (array2DataType = *(uint *)array2, array2DataType == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (array1DataType != 0x16) break;\n    if (array2DataType != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((array1DataType == 0x17) && (array2DataType == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    subArray1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (array1DataType == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (array1DataType < 4) {\n    if (array1DataType == 2) {\n      return true;\n    }\n  }\n  else if (array1DataType - 4 < 3) {\n    return true;\n  }\n  arrayHashTable = *(undefined8 **)(paramArray + 0x58);\n  for (nestedArray2NestedArray = arrayHashTable; nestedArray2NestedArray != (undefined8 *)0x0; nestedArray2NestedArray = (undefined8 *)*nestedArray2NestedArray) {\n    if (((long *)nestedArray2NestedArray[1] == array1) && ((long *)nestedArray2NestedArray[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(paramArray + 0x58) = &arrayHashTable;\n  subArray1 = array1;\n  subArray2 = array2;\n  switch(array1DataType) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    subArray1 = (long *)array1[2];\n    array1NestedArray = (long **)array2[2];\n    if (subArray1 == (long *)0x0) {\n      result = array1NestedArray == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (array1NestedArray == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(paramArray + 0x38) < *(uint *)((long)subArray1 + 0xc)) &&\n       (*(uint *)((long)subArray1 + 0xc) == *(uint *)((long)array1NestedArray + 0xc))) goto LAB_001097af;\n    nestedArray2NestedArray = (undefined8 *)*subArray1;\n    nestedArray1NestedArray = *array1NestedArray;\n    if (((nestedArray2NestedArray == (undefined8 *)0x0) == (nestedArray1NestedArray == (long *)0x0)) &&\n       ((((subArray1[2] == 0) == (array1NestedArray[2] == (long *)0x0) &&\n         ((subArray1[3] == 0) == (array1NestedArray[3] == (long *)0x0))) &&\n        ((subArray1[4] == 0) == (array1NestedArray[4] == (long *)0x0))))) {\n      if (nestedArray2NestedArray == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((subArray1[4] != 0) &&\n           (comparisonResult = compareArrays_0010922b(paramArray,subArray1[4],array1NestedArray[4]), comparisonResult == '\\0'))\n        goto LAB_00109382;\n        subArray2 = (long *)subArray1[2];\n        if (subArray2 == (long *)0x0) {\nLAB_00109540:\n          nestedArray2NestedArray = (undefined8 *)subArray1[3];\n          if (nestedArray2NestedArray == (undefined8 *)0x0) goto LAB_001097af;\n          subArray1 = array1NestedArray[3];\n          while( true ) {\n            nestedArray2 = (char **)*nestedArray2NestedArray;\n            if (nestedArray2 == (char **)0x0) {\n              result = *subArray1 == 0;\n              goto LAB_001099c4;\n            }\n            nestedArray1 = (char **)*subArray1;\n            if (nestedArray1 == (char **)0x0) break;\n            if ((**nestedArray2 != **nestedArray1) || (stringComparisonResult = strcmp(*nestedArray2,*nestedArray1), stringComparisonResult != 0))\n            break;\n            nestedArray1String1 = nestedArray2[1];\n            nestedArray2String1 = nestedArray1[1];\n            if ((nestedArray1String1 == (char *)0x0) != (nestedArray2String1 == (char *)0x0)) break;\n            if (nestedArray1String1 != (char *)0x0) {\n              stringIndex = 0;\n              while( true ) {\n                nestedArray2 = *(char ***)(nestedArray1String1 + stringIndex);\n                nestedArray1 = *(char ***)(nestedArray2String1 + stringIndex);\n                if (nestedArray2 == (char **)0x0) break;\n                if (nestedArray1 == (char **)0x0) goto LAB_00109382;\n                if ((((**nestedArray2 != **nestedArray1) ||\n                     ((((ulong)nestedArray2[2] ^ (ulong)nestedArray1[2]) & 0xffffffffffff) != 0)) ||\n                    ((nestedArray2[3] != nestedArray1[3] ||\n                     ((((nestedArray2[4] == (char *)0x0) != (nestedArray1[4] == (char *)0x0) ||\n                       (stringComparisonResult = strcmp(*nestedArray2,*nestedArray1), stringComparisonResult != 0)) ||\n                      (comparisonResult = compareArrays_0010922b(paramArray,nestedArray2[1],nestedArray1[1]), comparisonResult == '\\0')))))) ||\n                   ((nestedArray2[4] != (char *)0x0 &&\n                    (comparisonResult = compareArrays_0010922b(paramArray,nestedArray2[4],nestedArray1[4]), comparisonResult == '\\0'))))\n                goto LAB_00109382;\n                stringIndex = stringIndex + 8;\n              }\n              if (nestedArray1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            nestedArray2NestedArray = nestedArray2NestedArray + 1;\n            subArray1 = subArray1 + 1;\n          }\n        }\n        else {\n          subArray2 = array1NestedArray[2];\n          for (; nestedArray2NestedArray = (undefined8 *)*subArray2, nestedArray2NestedArray != (undefined8 *)0x0;\n              subArray2 = subArray2 + 1) {\n            nestedArray1NestedArray = (undefined8 *)*subArray2;\n            if ((((nestedArray1NestedArray == (undefined8 *)0x0) ||\n                 (((nestedArray2NestedArray[1] ^ nestedArray1NestedArray[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(nestedArray2NestedArray + 2) != *(int *)(nestedArray1NestedArray + 2))) ||\n               (comparisonResult = compareArrays_0010922b(paramArray,*nestedArray2NestedArray,*nestedArray1NestedArray), comparisonResult == '\\0'))\n            goto LAB_00109382;\n            subArray2 = subArray2 + 1;\n          }\n          if (*subArray2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; nestedArray2 = (char **)*nestedArray2NestedArray, nestedArray2 != (char **)0x0; nestedArray2NestedArray = nestedArray2NestedArray + 1) {\n          nestedArray1 = (char **)*nestedArray1NestedArray;\n          if (nestedArray1 == (char **)0x0) goto LAB_00109382;\n          nestedArray1String1 = *nestedArray1;\n          nestedArray2String1 = *nestedArray2;\n          if ((*nestedArray2String1 != *nestedArray1String1) ||\n             ((((ulong)nestedArray2[2] ^ (ulong)nestedArray1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)nestedArray2 + 0x14) == '\\0') {\n            if (nestedArray2[3] == nestedArray1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          stringComparisonResult = strcmp(nestedArray2[3],nestedArray1[3]);\n          if (stringComparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          stringComparisonResult = strcmp(nestedArray2String1,nestedArray1String1);\n          if (((stringComparisonResult != 0) || (nestedArray2[1] == (char *)0x0)) || (nestedArray1[1] == (char *)0x0))\n          goto LAB_00109382;\n          nestedArray1NestedArrayValue = FUN_00112b6e(nestedArray1[1],0);\n          nestedArray2NestedArrayValue = FUN_00112b6e(nestedArray2[1],0);\n          comparisonResult = compareArrays_0010922b(paramArray,nestedArray2NestedArrayValue,nestedArray1NestedArrayValue);\n          if (comparisonResult == '\\0') goto LAB_00109382;\n          nestedArray1NestedArray = nestedArray1NestedArray + 1;\n        }\n        if (*nestedArray1NestedArray == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    subArray1 = (long *)array1[2];\n    subArray2 = (long *)array2[2];\n    if (subArray1 == (long *)0x0) {\n      result = subArray2 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (subArray2 == (long *)0x0) goto LAB_00109382;\n    stringIndex = *subArray1;\n    nestedArray1Value1 = *subArray2;\n    stringIndex = 0;\n    nestedArray1Value2 = subArray1[1];\n    nestedArray2Value2 = subArray2[1];\n    do {\n      nestedArray1String1 = *(char **)(stringIndex + stringIndex);\n      if (nestedArray1String1 == (char *)0x0) {\n        result = *(long *)(nestedArray1Value1 + stringIndex) == 0;\n        goto LAB_001099c1;\n      }\n      nestedArray2String1 = *(char **)(nestedArray1Value1 + stringIndex);\n      if (((nestedArray2String1 == (char *)0x0) || (*nestedArray1String1 != *nestedArray2String1)) ||\n         (*(long *)(nestedArray1Value2 + stringIndex) != *(long *)(nestedArray2Value2 + stringIndex))) break;\n      stringComparisonResult = strcmp(nestedArray1String1,nestedArray2String1);\n      stringIndex = stringIndex + 8;\n    } while (stringComparisonResult == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compareArrays_0010922b(paramArray,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (comparisonResult = compareArrays_0010922b(paramArray,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       comparisonResult != '\\0')) {\n      subArray1 = *(long **)(array1[2] + 8);\n      subArray2 = *(long **)(array2[2] + 8);\n      if ((subArray1 == (long *)0x0) == (subArray2 == (long *)0x0)) {\n        if (subArray1 == (long *)0x0) goto LAB_001097af;\n        while (((*subArray1 != 0 && (*subArray2 != 0)) &&\n               (comparisonResult = compareArrays_0010922b(paramArray), comparisonResult != '\\0'))) {\n          subArray1 = subArray1 + 1;\n          subArray2 = subArray2 + 1;\n        }\nLAB_0010995d:\n        if (*subArray1 != 0) goto LAB_00109964;\n        result = *subArray2 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    nestedArray2NestedArray = (undefined8 *)array2[2];\n    nestedArray1NestedArray = (undefined8 *)array1[2];\n    result = 0;\n    if ((nestedArray1NestedArray[1] == nestedArray2NestedArray[1]) && (nestedArray1NestedArray[2] == nestedArray2NestedArray[2])) {\nLAB_00109862:\n      result = compareArrays_0010922b(paramArray,*nestedArray1NestedArray,*nestedArray2NestedArray);\n    }\n    break;\n  case 0x10:\n    nestedArray2NestedArray = (undefined8 *)array2[2];\n    nestedArray1NestedArray = (undefined8 *)array1[2];\n    result = 0;\n    if (((nestedArray1NestedArray[2] == nestedArray2NestedArray[2]) && (nestedArray1NestedArray[3] == nestedArray2NestedArray[3])) &&\n       (*(char *)(nestedArray1NestedArray + 4) == *(char *)(nestedArray2NestedArray + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    nestedArray2NestedArray = (undefined8 *)array2[2];\n    nestedArray1NestedArray = (undefined8 *)array1[2];\n    result = 0;\n    if (*(char *)(nestedArray1NestedArray + 1) == *(char *)(nestedArray2NestedArray + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparisonResult = compareArrays_0010922b(paramArray,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    result = 0;\n    if (comparisonResult != '\\0') {\n      result = compareArrays_0010922b(paramArray,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (comparisonResult = compareArrays_0010922b(paramArray,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        comparisonResult != '\\0')) &&\n       (comparisonResult = compareArrays_0010922b(paramArray,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), comparisonResult != '\\0')) {\n      subArray1 = *(long **)(array1[2] + 0x10);\n      subArray2 = *(long **)(array2[2] + 0x10);\n      if ((subArray1 == (long *)0x0) == (subArray2 == (long *)0x0)) {\n        if (subArray1 != (long *)0x0) {\n          while (((*subArray1 != 0 && (*subArray2 != 0)) &&\n                 (comparisonResult = compareArrays_0010922b(paramArray), comparisonResult != '\\0'))) {\n            subArray1 = subArray1 + 1;\n            subArray2 = subArray2 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    subArray1 = (long *)array2[2];\n    subArray2 = (long *)array1[2];\n    stringComparisonResult = strcmp(*(char **)(*subArray2 + 8),*(char **)(*subArray1 + 8));\n    result = 0;\n    if (stringComparisonResult == 0) {\n      result = compareArrays_0010922b(paramArray,subArray2[1],subArray1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(paramArray + 0x58) = arrayHashTable;\n  return result;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  subArray1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "FUN_0010922b",
                "strcmp",
                "FUN_00112b6e",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010922b",
                "FUN_0010c7a0"
            ],
            "imported": false,
            "current_name": "compare_arrays_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_3": "archiveFilePath",
                "cVar1": "formatCheck",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "statArgs",
                "lVar5": "breadResult",
                "uVar6": "gettextStr",
                "__format": "formatStr",
                "puVar7": "tempdirPtr",
                "piVar8": "errorCodePtr",
                "uVar9": "errorStr",
                "in_RAX": "filePtr",
                "pcVar10": "ptr",
                "ppcVar11": "archFilePtr",
                "lVar12": "statSize",
                "pvVar13": "bufPtr",
                "pcVar14": "closeFuncPtr",
                "lVar15": "copySize",
                "pcVar16": "checkPtr",
                "psVar17": "statStructPtr",
                "unaff_R14": "tempdirNode",
                "unaff_R15": "archiveNode",
                "bVar18": "checkByte",
                "unaff_retaddr": "retAddr",
                "in_stack_00000008": "outputFilePtr",
                "in_stack_00000010": "filePtrPtr",
                "in_stack_00000018": "tempdir",
                "in_stack_00000020": "tmpArchivePath",
                "in_stack_00000028": "tmpArchiveFormat",
                "in_stack_00000030": "isFormatSet",
                "in_stack_000000f8": "filePermission",
                "in_stack_00000110": "fileSize"
            },
            "code": "\nvoid extractAndCopyArchive_001052a2(undefined8 param_1,undefined8 param_2,char *archiveFilePath)\n\n{\n  char formatCheck;\n  int archType;\n  int statResult;\n  char **statArgs;\n  long breadResult;\n  undefined8 gettextStr;\n  char *formatStr;\n  undefined8 *tempdirPtr;\n  int *errorCodePtr;\n  undefined8 errorStr;\n  long filePtr;\n  char *ptr;\n  char **archFilePtr;\n  long statSize;\n  void *bufPtr;\n  code *closeFuncPtr;\n  long copySize;\n  char *checkPtr;\n  stat *statStructPtr;\n  undefined8 *tempdirNode;\n  char **archiveNode;\n  byte checkByte;\n  undefined8 retAddr;\n  undefined8 *outputFilePtr;\n  long *filePtrPtr;\n  char *tempdir;\n  undefined8 *tmpArchivePath;\n  undefined8 tmpArchiveFormat;\n  undefined8 isFormatSet;\n  uint filePermission;\n  long fileSize;\n  \n  checkByte = 0;\n  ptr = (char *)(filePtr + 1);\n  do {\n    if (*ptr == '/') {\n      extractAndCopyArchive_001052a2();\n      return;\n    }\n    while (*ptr == '\\0') {\n      ptr = (char *)concat(tempdir,&DAT_0011b47d);\n      statResult = stat(ptr,(stat *)&stack0x00000050);\n      tempdirPtr = tempdirNode;\n      if (-1 < statResult) {\n        statSize = FUN_0011a0e0(ptr);\n        free(ptr);\n        if (statSize == 0) {\n          errorCodePtr = __errno_location();\n          ptr = strerror(*errorCodePtr);\n          errorStr = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorStr,ptr);\n          goto LAB_00104e93;\n        }\n        tempdirPtr = (undefined8 *)xmalloc(0x18);\n        ptr = *archiveNode;\n        *tempdirPtr = tempdirNode;\n        tempdirPtr[2] = 0;\n        tempdirPtr[1] = statSize;\n        ptr = (char *)concat(statSize,&DAT_0011b47d,ptr);\n      }\n      statResult = 0;\n      if (DAT_001279cb != '\\0') {\n        statStructPtr = (stat *)&stack0x00000050;\n        for (statSize = 0x24; statSize != 0; statSize = statSize + -1) {\n          *(undefined4 *)&statStructPtr->st_dev = 0;\n          statStructPtr = (stat *)((long)statStructPtr + (ulong)checkByte * -8 + 4);\n        }\n        archFilePtr = (char **)archiveNode[0x1d];\n        if ((char **)archiveNode[0x1d] == (char **)0x0) {\n          archFilePtr = archiveNode;\n        }\n        statResult = (**(code **)(archFilePtr[1] + 0x1e8))(archiveNode,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          checkPtr = *archiveNode;\n          errorStr = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorStr,checkPtr);\n        }\n      }\n      tempdirNode = (undefined8 *)xmalloc(0x18);\n      tempdirNode[1] = ptr;\n      *tempdirNode = tempdirPtr;\n      tempdirNode[2] = 0;\n      formatCheck = bfd_check_format(archiveNode,1);\n      if (formatCheck == '\\0') {\n        errorStr = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,archiveNode,0,errorStr);\n        archFilePtr = (char **)bfd_openw(ptr,tmpArchiveFormat);\n        if (archFilePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        statArgs = (char **)archiveNode[0x1d];\n        if ((char **)archiveNode[0x1d] == (char **)0x0) {\n          statArgs = archiveNode;\n        }\n        archType = (**(code **)(statArgs[1] + 0x1e8))(archiveNode,&stack0x000000e0);\n        statSize = fileSize;\n        if (archType == 0) {\n          if (fileSize < 0) {\n            errorStr = FUN_001125fa(archiveNode);\n            gettextStr = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(gettextStr,errorStr);\n          }\n          else {\n            archType = bfd_seek(archiveNode,0,0);\n            if (archType == 0) {\n              if (DAT_001279c9 != '\\0') {\n                checkPtr = *archFilePtr;\n                errorStr = FUN_001125fa(archiveNode);\n                formatStr = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatStr,errorStr,checkPtr);\n              }\n              bufPtr = (void *)xmalloc(0x2000);\n              for (; statSize != 0; statSize = statSize - copySize) {\n                copySize = 0x2000;\n                if (statSize < 0x2001) {\n                  copySize = statSize;\n                }\n                breadResult = bfd_bread(bufPtr,copySize,archiveNode);\n                statArgs = archiveNode;\n                if ((copySize != breadResult) ||\n                   (breadResult = bfd_bwrite(bufPtr,copySize,archFilePtr), statArgs = archFilePtr, copySize != breadResult\n                   )) {\n                  FUN_001126c0(0,statArgs,0,0);\n                  free(bufPtr);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archFilePtr,filePermission | 0x100);\n              free(bufPtr);\n              formatCheck = bfd_close_all_done(archFilePtr);\n              if (formatCheck == '\\0') {\n                FUN_001126c0(ptr,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorStr = FUN_001125fa(archiveNode);\n            FUN_0011a110(errorStr);\n          }\n        }\n        else {\n          FUN_001126c0(0,archiveNode,0,0);\n        }\nLAB_00104f00:\n        formatCheck = bfd_close_all_done(archFilePtr);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(ptr,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(ptr);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (isFormatSet._7_1_ == '\\0') {\n          archFilePtr = (char **)bfd_openw(ptr,*(undefined8 *)archiveNode[1]);\n        }\n        else {\n          archFilePtr = (char **)bfd_openw(ptr,tmpArchiveFormat);\n        }\n        if (archFilePtr == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(ptr,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatCheck = FUNC_00114e50(archiveNode,archFilePtr,retAddr);\n        if (formatCheck == '\\0') {\n          archType = bfd_get_arch(archiveNode);\n          if (archType == 0) goto LAB_00104d75;\n          formatCheck = bfd_close_all_done(archFilePtr);\n          if (formatCheck == '\\0') {\n            FUN_001126c0(ptr,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatCheck = bfd_close(archFilePtr);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(ptr,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (statResult == 0)) {\n          FUN_0011a350(ptr,(stat *)&stack0x00000050);\n        }\n        statSize = bfd_openr(ptr,tmpArchiveFormat);\n        tempdirNode[2] = statSize;\n        *filePtrPtr = statSize;\n        filePtrPtr = (long *)(statSize + 0xf0);\n        archFilePtr = (char **)bfd_openr_next_archived_file(tmpArchivePath,archiveNode);\n        bfd_close(archiveNode);\n        archiveNode = archFilePtr;\n      }\n      if ((DAT_00127a20 != 0) || (archiveNode == (char **)0x0)) {\n        *filePtrPtr = 0;\n        bufPtr = (void *)xstrdup(*outputFilePtr);\n        if (DAT_00127a20 == 0) {\n          closeFuncPtr = bfd_close;\n        }\n        else {\n          closeFuncPtr = bfd_close_all_done;\n        }\n        formatCheck = (*closeFuncPtr)(outputFilePtr);\n        if (formatCheck == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(bufPtr,0,0,0);\n        }\n        free(bufPtr);\n        bufPtr = (void *)xstrdup(*tmpArchivePath);\n        formatCheck = bfd_close(tmpArchivePath);\n        if (formatCheck == '\\0') {\n          DAT_00127a20 = 1;\n          FUN_001126c0(bufPtr,0,0,0);\n        }\n        free(bufPtr);\n        goto LAB_00114b4b;\n      }\n      ptr = *archiveNode;\n      archiveFilePath = ptr;\n      if (*ptr == '/') goto LAB_0010527d;\n    }\n    checkPtr = ptr;\n    if ((*ptr == '.') && (checkPtr = ptr + 1, ptr[1] == '.')) {\n      checkPtr = ptr + 2;\n      if ((ptr[2] == '\\0') || (ptr[2] == '/')) {\nLAB_0010527d:\n        errorStr = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorStr,archiveFilePath);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (tempdirNode != (undefined8 *)0x0) {\n          if (tempdirNode[2] == 0) {\n            rmdir((char *)tempdirNode[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempdirNode[1]);\n          }\n          free((void *)tempdirNode[1]);\n          tempdirPtr = (undefined8 *)*tempdirNode;\n          free(tempdirNode);\n          tempdirNode = tempdirPtr;\n        }\n        rmdir(tempdir);\n        free(tempdir);\n        return;\n      }\n    }\n    for (; (ptr = checkPtr, *checkPtr != '\\0' && (*checkPtr != '/')); checkPtr = checkPtr + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "extract_and_send_data_0010e453",
                "param_1": "dataSize",
                "param_2": "dataString",
                "param_3": "dataList",
                "lVar1": "currentData",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "totalLength",
                "ppcVar6": "currentElement",
                "lVar7": "offset"
            },
            "code": "\nundefined8 extractAndSendData_0010e453(long dataSize,char *dataString,char **dataList)\n\n{\n  long currentData;\n  char result;\n  size_t stringLength;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long totalLength;\n  char **currentElement;\n  long offset;\n  \n  if (dataList == (char **)0x0) {\n    if (dataString != (char *)0x0) {\n      stringLength = strlen(dataString);\n      formattedString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)formattedString,\"xe%s:\",dataString);\nLAB_0010e578:\n      result = FUN_00109b52(dataSize,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    totalLength = 10;\n    currentElement = dataList;\n    if (dataString != (char *)0x0) {\n      stringLength = strlen(dataString);\n      totalLength = stringLength + 10;\n    }\n    for (; *currentElement != (char *)0x0; currentElement = currentElement + 1) {\n      stringLength = strlen(*currentElement);\n      totalLength = totalLength + 0x14 + stringLength;\n    }\n    formattedString = (undefined2 *)xmalloc(totalLength);\n    if (dataString == (char *)0x0) {\n      *formattedString = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(dataSize + 0x68);\n      *(long *)(dataSize + 0x68) = totalLength + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",dataString,totalLength);\n    }\n    offset = 0;\n    while( true ) {\n      currentData = *(long *)((long)dataList + offset);\n      stringLength = strlen((char *)formattedString);\n      if (currentData == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + stringLength) = 0x3b;\n    if (dataString == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(dataSize,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = FUN_00109cf4(dataSize,totalLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_send_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_process_00109d5c",
                "param_1": "input_param",
                "lVar1": "result",
                "uVar2": "output"
            },
            "code": "\nundefined8 check_and_process_00109d5c(undefined8 input_param)\n\n{\n  long result;\n  undefined8 output;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    output = FUN_00109cf4(input_param,result,0);\n    return output;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_process_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_max_0010ed2c",
                "param_1": "obj_ptr",
                "param_2": "new_value",
                "param_3": "extra_param",
                "extraout_RDX": "extraout_value",
                "in_R10": "another_param",
                "cVar1": "char_result",
                "iVar2": "int_result",
                "uVar3": "updated_value",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] update_max_0010ed2c(long obj_ptr,ulong new_value,undefined8 extra_param)\n\n{\n  char char_result;\n  int int_result;\n  undefined8 extraout_value;\n  ulong updated_value;\n  undefined8 another_param;\n  undefined return_value [16];\n  \n  if (*(ulong *)(obj_ptr + 0x1f0) < new_value) {\n    *(ulong *)(obj_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(obj_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(obj_ptr + 0x1f8) != 0) {\n      int_result = *(int *)(obj_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(obj_ptr + 0x1f8) = int_result;\n      if (int_result != 0) {\n        return_value = FUN_0010e2f0(obj_ptr,0xe0,0,new_value - *(long *)(obj_ptr + 0x200),0,another_param);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    char_result = FUN_0010e2f0(obj_ptr,0xc0,0,*(long *)(obj_ptr + 0x208),0);\n    if (char_result != '\\0') {\n      *(undefined8 *)(obj_ptr + 0x208) = 0xffffffffffffffff;\n      extra_param = extraout_value;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  return_value._0_8_ = updated_value & 0xffffffff;\n  return_value._8_8_ = another_param;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_max_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_return_result_0011a1b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "extra_param_1",
                "param_4": "extra_param_2",
                "uVar1": "input_1_8",
                "uVar2": "input_2_8",
                "iVar3": "comparison_result",
                "extraout_var": "result",
                "uVar4": "final_result",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareAndReturnResult_0011a1b0(ulong *input_1,ulong *input_2,undefined8 extra_param_1,undefined8 extra_param_2)\n\n{\n  ulong input_1_8;\n  ulong input_2_8;\n  int comparison_result;\n  undefined4 result;\n  ulong final_result;\n  undefined output [16];\n  \n  final_result = *input_1;\n  if (*input_2 <= *input_1) {\n    final_result = *input_2;\n  }\n  comparison_result = memcmp((void *)(input_1[3] + 3),(void *)(input_2[3] + 3),final_result - 3);\n  final_result = CONCAT44(result,comparison_result);\n  if (comparison_result == 0) {\n    input_1_8 = input_1[8];\n    if (input_1_8 < input_2[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      input_2_8 = input_2[8];\n      if (input_2_8 < input_1[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (input_2[7] <= input_1[7]) {\n          if (input_2_8 < input_1_8) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (input_2_8 <= input_1_8) {\n              if (input_1[2] == 0x100) {\n                final_result = (ulong)-(uint)(input_2[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(input_2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = extra_param_2;\n  output._0_8_ = final_result;\n  return output;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_return_result_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "parse_build_attribute_notes_001163d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "section1",
                "uVar3": "section2",
                "bVar4": "flag",
                "puVar5": "ptr5",
                "iVar6": "var6",
                "uVar7": "var7",
                "lVar8": "var8",
                "__ptr": "ptr",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "puVar17": "varPtr17",
                "puVar18": "varPtr18",
                "cVar19": "charVar19",
                "puVar20": "varPtr20",
                "iVar21": "var21",
                "puVar22": "varPtr22",
                "puVar23": "varPtr23",
                "uVar24": "var24",
                "__nmemb": "count",
                "puVar25": "varPtr25",
                "bVar26": "byteVar26",
                "local_88": "localVar_88",
                "uStack_80": "uStackVar_80",
                "local_70": "localVar_70",
                "local_68": "localVar_68",
                "local_60": "localPtr_60"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong parseBuildAttributeNotes_001163d0(undefined8 *param1,undefined8 *param2,ulong param3,undefined *param4)\n\n{\n  ulong result;\n  undefined8 section1;\n  undefined8 section2;\n  bool flag;\n  ulong *ptr5;\n  int var6;\n  undefined8 var7;\n  long var8;\n  void *ptr;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr_00;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *varPtr17;\n  undefined *varPtr18;\n  char charVar19;\n  undefined *varPtr20;\n  int var21;\n  undefined *varPtr22;\n  ulong *varPtr23;\n  ulong var24;\n  size_t count;\n  ulong *varPtr25;\n  byte byteVar26;\n  ulong localVar_88;\n  ulong uStackVar_80;\n  ulong localVar_70;\n  ulong localVar_68;\n  ulong *localPtr_60;\n  \n  byteVar26 = 0;\n  var8 = bfd_get_reloc_upper_bound();\n  localVar_68 = param3;\n  if (0 < var8) {\n    ptr = (void *)xmalloc(var8);\n    var8 = bfd_canonicalize_reloc(param1,param2,ptr,DAT_001278b0);\n    free(ptr);\n    if (var8 != 0) {\n      if (_DAT_00127a24 == 0) {\n        section1 = *param1;\n        section2 = *param2;\n        var7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(var7,section1,section2);\n      }\n      localPtr_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  localPtr_60 = (ulong *)xcalloc(param3 / 0xc,0x48,param3 % 0xc);\n  localVar_88 = 0;\n  localVar_70 = 0;\n  var16 = param3;\n  var15 = 0;\n  varPtr23 = localPtr_60;\n  var14 = 0;\n  varPtr22 = param4;\n  while (0xb < var16) {\n    var10 = (**(code **)(param1[1] + 0x40))(varPtr22);\n    *varPtr23 = var10;\n    var10 = (**(code **)(param1[1] + 0x40))(varPtr22 + 4);\n    varPtr23[1] = var10;\n    var11 = (**(code **)(param1[1] + 0x40))(varPtr22 + 8);\n    var10 = *varPtr23;\n    varPtr23[2] = var11;\n    var12 = varPtr23[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    varPtr23[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    varPtr23[3] = (ulong)(varPtr22 + 0xc);\n    varPtr23[4] = (ulong)(varPtr22 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (varPtr22[0xc] == '$') {\n        if ((varPtr22[0xd] == '\\x01') && (varPtr22[0xe] == '1')) {\n          var16 = FUN_00116490();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (varPtr22[0xc] == 'G')) && (varPtr22[0xd] == 'A')) &&\n              ((varPtr22[0xe] == '$' && (varPtr22[0xf] == '\\x01')))) {\n        if (varPtr22[0x10] == '2') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        if (varPtr22[0x10] == '3') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        varPtr23[7] = localVar_88;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        varPtr23[7] = localVar_70;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(param1[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = FUN_001086af();\n            return var16;\n          }\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(param1[1] + 0x28))(varPtr22 + var13 + 0xc);\n      var12 = (**(code **)(param1[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (varPtr23[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = localVar_88;\n        }\n        var10 = *varPtr23;\n        varPtr23[7] = var11;\n        var24 = var12;\n        localVar_88 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = localVar_70;\n        }\n        var10 = *varPtr23;\n        varPtr23[7] = var11;\n        var9 = var12;\n        localVar_70 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    varPtr23[8] = var12;\n    if (*(char *)((varPtr23[3] - 1) + var10) != '\\0') {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    varPtr23 = varPtr23 + 9;\n    var15 = var9;\n    var14 = var24;\n    varPtr22 = varPtr22 + result;\n  }\n  if (var16 == 0) {\n    section1 = *param1;\n    section2 = *param2;\n    var7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(var7,section1,section2);\n    count = ((long)varPtr23 - (long)localPtr_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(localPtr_60,count,0x48,FUN_0011a1b0);\n    for (varPtr17 = localPtr_60; varPtr17 < varPtr23; varPtr17 = varPtr17 + 9) {\n      var16 = varPtr17[2];\n      if (var16 != 0) {\n        var15 = varPtr17[7];\n        var14 = varPtr17[8];\n        varPtr25 = varPtr17;\n        var21 = 0;\n        if (var15 == var14) {\n          varPtr17[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr5 = varPtr25;\n              varPtr25 = ptr5 + -9;\n              if (varPtr25 < localPtr_60) goto LAB_001167f5;\n              var10 = ptr5[-7];\n            } while (var10 == 0);\n            if ((*varPtr25 != *varPtr17) ||\n               (var6 = memcmp((void *)ptr5[-6],(void *)varPtr17[3],*varPtr17), var6 != 0)) break;\n            var12 = ptr5[-2];\n            var11 = ptr5[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                varPtr17[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                varPtr17[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                ptr5[-1] = var11;\n                ptr5[-2] = var15;\n                varPtr17[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nFUN_00116852:\n            flag = var21 < 0x11;\n            var21 = var21 + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(localPtr_60,count,0x48,FUN_0011a250);\n    ptr_00 = (undefined *)xmalloc(param3 * 2);\n    uStackVar_80 = 0;\n    localVar_70 = 0;\n    varPtr22 = ptr_00;\n    for (varPtr17 = localPtr_60; varPtr17 < varPtr23; varPtr17 = varPtr17 + 9) {\n      if (varPtr17[2] != 0) {\n        varPtr18 = varPtr22 + 0xc;\n        if ((varPtr17[7] == localVar_70) && (varPtr17[8] == uStackVar_80)) {\n          (**(code **)(param1[1] + 0x50))(*varPtr17,varPtr22);\n          (**(code **)(param1[1] + 0x50))(0,varPtr22 + 4);\n          (**(code **)(param1[1] + 0x50))(varPtr17[2],varPtr22 + 8);\n          var15 = varPtr17[6];\n          var16 = *varPtr17;\n          varPtr22 = (undefined *)varPtr17[3];\n          varPtr20 = varPtr18;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *varPtr20 = *varPtr22;\n            varPtr22 = varPtr22 + (ulong)byteVar26 * -2 + 1;\n            varPtr20 = varPtr20 + (ulong)byteVar26 * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *varPtr20 = 0;\n              varPtr20 = varPtr20 + (ulong)byteVar26 * -2 + 1;\n            }\n          }\n          varPtr22 = varPtr18 + var15;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            charVar19 = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar19 = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(charVar19,varPtr22 + 4);\n          (**(code **)(param1[1] + 0x50))(varPtr17[2],varPtr22 + 8);\n          var16 = *varPtr17;\n          varPtr22 = (undefined *)varPtr17[3];\n          varPtr20 = varPtr18;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *varPtr20 = *varPtr22;\n            varPtr22 = varPtr22 + (ulong)byteVar26 * -2 + 1;\n            varPtr20 = varPtr20 + (ulong)byteVar26 * -2 + 1;\n          }\n          var15 = varPtr17[6];\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *varPtr20 = 0;\n              varPtr20 = varPtr20 + (ulong)byteVar26 * -2 + 1;\n            }\n          }\n          var8 = param1[1];\n          varPtr18 = varPtr18 + var15;\n          varPtr22 = varPtr18 + 8;\n          if ((*(int *)(var8 + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(var8 + 0x38))(varPtr17[7],varPtr18);\n            (**(code **)(param1[1] + 0x38))(varPtr17[8],varPtr22);\n            varPtr22 = varPtr18 + 0x10;\n          }\n          else {\n            (**(code **)(var8 + 0x50))(varPtr17[7],varPtr18);\n            (**(code **)(param1[1] + 0x50))(varPtr17[8],varPtr18 + 4);\n          }\n          localVar_70 = varPtr17[7];\n          uStackVar_80 = varPtr17[8];\n        }\n      }\n    }\n    var15 = (long)varPtr22 - (long)ptr_00;\n    var16 = var15;\n    varPtr22 = ptr_00;\n    localVar_68 = param3;\n    if (var15 < param3) {\n      for (; localVar_68 = var15, var16 != 0; var16 = var16 - 1) {\n        *param4 = *varPtr22;\n        varPtr22 = varPtr22 + (ulong)byteVar26 * -2 + 1;\n        param4 = param4 + (ulong)byteVar26 * -2 + 1;\n      }\n    }\n    free(ptr_00);\n  }\n  else {\n    var8 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (var8 != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,param1,param2,var8);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(localPtr_60);\n  return localVar_68;\n}\n\n",
            "called": [
                "xcalloc",
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *message;\n  \n  usageString = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,usageString);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_binary_info_00108c86",
                "param_1": "binary_location",
                "cVar1": "first_check_result",
                "iVar2": "compare_result",
                "sVar3": "string_length",
                "puVar4": "extracted_info",
                "lVar5": "offset",
                "__s": "substring",
                "__s1": "architecture",
                "puVar6": "extracted_info_ptr",
                "uVar7": "return_value",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_binary_info_00108c86(long *binary_location)\n\n{\n  char first_check_result;\n  int compare_result;\n  size_t string_length;\n  undefined2 *extracted_info;\n  long offset;\n  char *substring;\n  char *architecture;\n  undefined2 *extracted_info_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *binary_location;\n  substring = (char *)(offset + 4);\n  first_check_result = FUN_00113fb0(substring,&DAT_0011b73b);\n  if (first_check_result == '\\0') {\n    first_check_result = FUN_00113fb0(substring,\"bsdrv-\");\n    if (first_check_result == '\\0') {\n      first_check_result = FUN_00113fb0(substring,\"rtdrv-\");\n      if (first_check_result == '\\0') {\n        return 0xffffffff;\n      }\n      substring = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      substring = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(substring);\n  extracted_info = (undefined2 *)xmalloc(string_length + 8);\n  architecture = substring + 4;\n  extracted_info_ptr = extracted_info;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)extracted_info_ptr = *substring;\n    substring = substring + (ulong)flag * -2 + 1;\n    extracted_info_ptr = (undefined2 *)((long)extracted_info_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(extracted_info + 1) = 0x69;\n  *extracted_info = 0x6570;\n  compare_result = strcmp(architecture,\"ia32\");\n  if (compare_result == 0) {\n    *(undefined *)((long)extracted_info + 7) = 0x36;\n    *(undefined2 *)((long)extracted_info + 5) = 0x3833;\n  }\n  else {\n    compare_result = strcmp(architecture,\"x86_64\");\n    if (compare_result == 0) {\n      *(undefined *)((long)extracted_info + 7) = 0x2d;\n    }\n    else {\n      compare_result = strcmp(architecture,\"aarch64\");\n      if (compare_result == 0) {\n        *(undefined8 *)((long)extracted_info + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *binary_location = (long)extracted_info;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "xmalloc",
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_binary_info_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "execute_and_close_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "functionPointer"
            },
            "code": "\nundefined4 executeAndClose_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *functionPointer;\n  \n  FUN_0011a110(*functionPointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "execute_and_close_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_set_flags_00104bba",
                "in_EAX": "eax_value",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "code": "\nvoid validate_and_set_flags_00104bba(void)\n\n{\n  uint eax_value;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((eax_value & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(error_message);\n  }\n  if ((((eax_value & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((eax_value & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = eax_value | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(error_message);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "count",
                "puVar3": "destPointer",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long count;\n  undefined *destPointer;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPointer = destination;\n  for (count = (long)length; count != 0; count = count + -1) {\n    *destPointer = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destPointer = destPointer + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_list_ptr",
                "param_2": "slot_index",
                "uVar1": "error_message",
                "plVar2": "slot_ptr",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "zero_byte",
                "auVar7": "result_buffer"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *slot_ptr;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte zero_byte;\n  undefined result_buffer [16];\n  \n  zero_byte = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list_ptr == (long *)0x0) {\n        slot_ptr = (long *)xmalloc(0x88);\n        *slot_list_ptr = slot_ptr;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)slot_ptr = 0;\n          slot_ptr = (long *)((long)slot_ptr + (ulong)zero_byte * -8 + 4);\n        }\n      }\n      slot_list_ptr = (long **)*slot_list_ptr;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_list_ptr == (long *)0x0) {\n      slot_ptr = (long *)xmalloc(0x88);\n      *slot_list_ptr = slot_ptr;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)slot_ptr = 0;\n        slot_ptr = (long *)((long)slot_ptr + (ulong)zero_byte * -8 + 4);\n      }\n    }\n    result_buffer._8_8_ = param_4;\n    result_buffer._0_8_ = *slot_list_ptr + slot_index + slot_offset + 1;\n    return result_buffer;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(error_message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "create_data_structure_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "dataStructure",
                "puVar2": "allocation",
                "lVar3": "loopCount",
                "bVar4": "byteVar"
            },
            "code": "\nundefined8 *\ncreateDataStructure_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *dataStructure;\n  undefined8 *allocation;\n  long loopCount;\n  byte byteVar;\n  \n  byteVar = 0;\n  dataStructure = (undefined8 *)xmalloc(0x1b0);\n  allocation = dataStructure;\n  for (loopCount = 0x6c; loopCount != 0; loopCount = loopCount + -1) {\n    *(undefined4 *)allocation = 0;\n    allocation = (undefined8 *)((long)allocation + (ulong)byteVar * -8 + 4);\n  }\n  *dataStructure = input1;\n  *(undefined *)(dataStructure + 1) = input2;\n  dataStructure[2] = input3;\n  dataStructure[3] = input4;\n  *(undefined4 *)(dataStructure + 0x10) = 1;\n  allocation = (undefined8 *)xmalloc(8);\n  dataStructure[0xd] = 0xffffffffffffffff;\n  dataStructure[0x11] = allocation;\n  *allocation = 0;\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "create_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "get_next_pointer_00109b2f",
                "param_1": "ptr",
                "__ptr": "current_ptr",
                "puVar1": "next_ptr"
            },
            "code": "\nundefined8 * get_next_pointer_00109b2f(long ptr)\n\n{\n  undefined8 *current_ptr;\n  undefined8 *next_ptr;\n  \n  current_ptr = *(undefined8 **)(ptr + 0x60);\n  if (current_ptr != (undefined8 *)0x0) {\n    next_ptr = (undefined8 *)current_ptr[1];\n    *(undefined8 *)(ptr + 0x60) = *current_ptr;\n    free(current_ptr);\n    return next_ptr;\n  }\n  return current_ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010e918",
                "FUN_0010a0e9",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010a424",
                "FUN_0010a2b9",
                "FUN_0010e7c2",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010a83e"
            ],
            "imported": false,
            "current_name": "get_next_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "validate_symbol_redefinition_00108d9a",
                "param_1": "output_stream",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "ppcVar1": "symbol_and_target",
                "pcVar2": "duplicate_symbol",
                "lVar3": "symbol_lookup_result",
                "uVar4": "error_message",
                "plVar5": "symbol_slot"
            },
            "code": "\nundefined8 validate_symbol_redefinition_00108d9a(undefined8 output_stream,char *symbol_name,char *target_symbol,undefined8 param_4)\n\n{\n  char **symbol_and_target;\n  char *duplicate_symbol;\n  long symbol_lookup_result;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_and_target = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *symbol_and_target = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  error_message = DAT_001278d0;\n  symbol_and_target[1] = duplicate_symbol;\n  symbol_lookup_result = htab_find(error_message,symbol_and_target);\n  if (symbol_lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(error_message,output_stream,symbol_name);\n  }\n  symbol_lookup_result = htab_find(DAT_001278c8,target_symbol);\n  if (symbol_lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(error_message,output_stream,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(DAT_001278d0,symbol_and_target,1);\n  error_message = DAT_001278c8;\n  *symbol_slot = (long)symbol_and_target;\n  duplicate_symbol = symbol_and_target[1];\n  symbol_and_target = (char **)htab_find_slot(error_message,duplicate_symbol,1);\n  *symbol_and_target = duplicate_symbol;\n  return param_4;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "generate_formatted_output_0010e9a0",
                "param_1": "inputValue",
                "param_2": "inputString",
                "param_3": "outputType",
                "param_4": "outputFormat",
                "lVar1": "counter",
                "__s": "randomString",
                "__s_00": "formattedString",
                "sVar3": "inputStringLen",
                "sVar4": "randomStringLen",
                "__s_01": "finalOutput",
                "pcVar5": "outputSymbol",
                "uVar6": "outputValue",
                "uVar2": "result"
            },
            "code": "\nundefined4 generateFormattedOutput_0010e9a0(long inputValue,char *inputString,undefined4 outputType,undefined8 outputFormat)\n\n{\n  long counter;\n  undefined4 result;\n  byte *randomString;\n  byte *formattedString;\n  size_t inputStringLen;\n  size_t randomStringLen;\n  char *finalOutput;\n  char *outputSymbol;\n  undefined8 outputValue;\n  \n  randomString = (byte *)FUN_00109b2f();\n  switch(outputType) {\n  case 1:\n    outputSymbol = \"G\";\n    outputValue = 0x20;\n    break;\n  case 2:\n    outputSymbol = \"S\";\n    outputValue = 0x26;\n    break;\n  case 3:\n    outputSymbol = \"V\";\n    outputValue = 0x26;\n    break;\n  case 4:\n    outputSymbol = \"\";\n    outputValue = 0x80;\n    if (((&_sch_istable)[(ulong)*randomString * 2] & 4) == 0) {\n      counter = *(long *)(inputValue + 0x68);\n      *(long *)(inputValue + 0x68) = counter + 1;\n      inputStringLen = strlen((char *)randomString);\n      formattedString = (byte *)xmalloc(inputStringLen + 0x14);\n      sprintf((char *)formattedString,\"%ld=%s\",counter,randomString);\n      free(randomString);\n      randomString = formattedString;\n    }\n    break;\n  case 5:\n    outputSymbol = \"r\";\n    outputValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputStringLen = strlen(inputString);\n  randomStringLen = strlen((char *)randomString);\n  finalOutput = (char *)xmalloc(inputStringLen + 3 + randomStringLen);\n  sprintf(finalOutput,\"%s:%s%s\",inputString,outputSymbol,randomString);\n  free(randomString);\n  result = FUN_0010e2f0(inputValue,outputValue,0,outputFormat,finalOutput);\n  if ((char)result != '\\0') {\n    free(finalOutput);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_output_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "check_and_print_error_message_00104920",
                "uVar1": "errorFormatString",
                "dcgettext": "getTranslatedString"
            },
            "code": "\nvoid checkAndPrintErrorMessage_00104920(void)\n\n{\n  undefined8 errorFormatString;\n  \n  errorFormatString = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorFormatString);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "check_and_print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_and_initialize_hashtable_00113f20"
            },
            "code": "\nvoid createAndInitializeHashtable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,htab_eq_string,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "xcalloc",
                "htab_eq_string",
                "free",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_and_initialize_hashtable_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00108d9a",
                "FUN_00104cc1",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_001126c0",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_handle_failure_00108179",
                "unaff_RBX": "resultPtr",
                "unaff_RBP": "savedRBP",
                "unaff_R12": "contextPtr",
                "unaff_R14B": "flag",
                "unaff_R15": "newAlignment",
                "lVar1": "oldAlignment",
                "lVar2": "secondVar",
                "cVar3": "flagChar",
                "lVar4": "errorMessage",
                "lVar5": "result",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid setAlignmentAndHandleFailure_00108179(void)\n\n{\n  long oldAlignment;\n  long secondVar;\n  char flagChar;\n  long errorMessage;\n  long result;\n  long resultPtr;\n  long savedRBP;\n  long contextPtr;\n  char flag;\n  long newAlignment;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(newAlignment + 0xb4) = *(undefined4 *)(resultPtr + 0xb4);\n  *(byte *)(newAlignment + 0x28) =\n       *(byte *)(newAlignment + 0x28) & 0xcf | *(byte *)(resultPtr + 0x28) & 0x30;\n  *(long *)(resultPtr + 0x60) = newAlignment;\n  *(undefined8 *)(resultPtr + 0x58) = 0;\n  if ((*(byte *)(resultPtr + 0x27) & 2) != 0) {\n    oldAlignment = *(long *)(resultPtr + 0xd0);\n    result = FUN_00115d00(oldAlignment,*(undefined8 *)(resultPtr + 0xe0));\n    if ((result != 0) &&\n       (secondVar = *(long *)(contextPtr + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(secondVar + 8) == 5)) {\n      *(long *)(oldAlignment + 0xb0) = result;\n      flagChar = (**(code **)(*(long *)(savedRBP + 8) + 0x158))();\n      if (flagChar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  flagChar = (**(code **)(*(long *)(savedRBP + 8) + 0x158))();\n  if (flagChar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(newAlignment + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_and_handle_failure_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "load_data_from_binary_00109022",
                "param_1": "binary_data",
                "param_2": "file_numbers",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "uVar1": "file_number",
                "pcVar2": "error_msg",
                "plVar3": "loaded_data",
                "lVar4": "loop_counter",
                "uVar5": "index_number",
                "pplVar6": "data_pointers",
                "bVar7": "exceeded_range",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] load_data_from_binary_00109022(long binary_data,uint *file_numbers,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  uint file_number;\n  char *error_msg;\n  long *loaded_data;\n  long loop_counter;\n  uint index_number;\n  long **data_pointers;\n  byte exceeded_range;\n  undefined result [16];\n  \n  exceeded_range = 0;\n  index_number = *file_numbers;\n  file_number = file_numbers[1];\n  if (((int)index_number < 0) || (*(uint *)(binary_data + 0x80) <= index_number)) {\n    error_msg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_msg,(ulong)index_number);\n  }\n  else {\n    if (-1 < (int)file_number) {\n      data_pointers = (long **)(*(long *)(binary_data + 0x88) + (long)(int)index_number * 8);\n      for (index_number = file_number; 0xf < (int)index_number; index_number = index_number - 0x10) {\n        if (*data_pointers == (long *)0x0) {\n          loaded_data = (long *)xmalloc(0x88);\n          *data_pointers = loaded_data;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)loaded_data = 0;\n            loaded_data = (long *)((long)loaded_data + (ulong)exceeded_range * -8 + 4);\n          }\n        }\n        data_pointers = (long **)*data_pointers;\n      }\n      if (*data_pointers == (long *)0x0) {\n        loaded_data = (long *)xmalloc(0x88);\n        *data_pointers = loaded_data;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)loaded_data = 0;\n          loaded_data = (long *)((long)loaded_data + (ulong)exceeded_range * -8 + 4);\n        }\n      }\n      loaded_data = *data_pointers + (long)(int)((file_number >> 4) * -0x10 + file_number) + 1;\n      goto LAB_00109117;\n    }\n    error_msg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_msg,(ulong)file_number);\n  }\n  loaded_data = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = unused_param2;\n  result._0_8_ = loaded_data;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "load_data_from_binary_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_info_0010c05d",
                "param_1": "binaryPointer",
                "param_2": "recordNumber",
                "param_3": "fileAddress",
                "param_4": "variableType",
                "param_5": "param5",
                "param_6": "param6",
                "auVar1": "tempVar1",
                "uVar2": "result",
                "piVar3": "mallocedPointer",
                "cVar4": "isConditionMet",
                "lVar5": "loopCounter",
                "lVar6": "filePointer",
                "piVar7": "loopPointer",
                "bVar8": "zeroByte",
                "auVar9": "returnVariable"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariableDebugInfo_0010c05d(long binaryPointer,long recordNumber,ulong fileAddress,int variableType,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined tempVar1 [16];\n  undefined8 result;\n  int *mallocedPointer;\n  char isConditionMet;\n  long loopCounter;\n  long filePointer;\n  int *loopPointer;\n  byte zeroByte;\n  undefined returnVariable [16];\n  \n  zeroByte = 0;\n  if (recordNumber == 0) {\n    tempVar1._8_8_ = 0;\n    tempVar1._0_8_ = fileAddress;\n    return tempVar1 << 0x40;\n  }\n  if (fileAddress != 0) {\n    if ((*(long *)(binaryPointer + 8) == 0) || (filePointer = *(long *)(binaryPointer + 0x10), filePointer == 0)) {\n      result = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (variableType - 1U < 2) {\n        filePointer = filePointer + 0x10;\n        isConditionMet = (variableType == 1) + '\\x01';\n      }\n      else if (*(long *)(binaryPointer + 0x20) == 0) {\n        filePointer = filePointer + 0x10;\n        isConditionMet = '\\0';\n      }\n      else {\n        filePointer = *(long *)(binaryPointer + 0x20) + 0x28;\n        isConditionMet = '\\0';\n      }\n      filePointer = FUN_00112925(filePointer,recordNumber,2,isConditionMet);\n      if (filePointer != 0) {\n        mallocedPointer = (int *)xmalloc(0x18);\n        loopPointer = mallocedPointer + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *loopPointer = 0;\n          loopPointer = loopPointer + (ulong)zeroByte * -2 + 1;\n        }\n        *mallocedPointer = variableType;\n        result = 1;\n        *(ulong *)(mallocedPointer + 2) = fileAddress;\n        *(undefined8 *)(mallocedPointer + 4) = param5;\n        *(int **)(filePointer + 0x20) = mallocedPointer;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  returnVariable._8_8_ = param6;\n  returnVariable._0_8_ = result;\n  return returnVariable;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_debug_info_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_data_00109d97",
                "param_1": "inputData",
                "lVar1": "counter",
                "local_40": "messageBuffer"
            },
            "code": "\nvoid processData_00109d97(long inputData)\n\n{\n  long counter;\n  char messageBuffer [40];\n  \n  if (*(long *)(inputData + 0x70) != 0) {\n    FUN_00109cf4(inputData,*(long *)(inputData + 0x70),0);\n    return;\n  }\n  counter = *(long *)(inputData + 0x68);\n  *(long *)(inputData + 0x68) = counter + 1;\n  sprintf(messageBuffer,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(inputData,messageBuffer,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "process_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "reversed_function_001086af",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "temp3",
                "uVar9": "minValue",
                "uVar10": "value",
                "uVar11": "param",
                "__ptr": "buffer",
                "in_RCX": "input",
                "uVar12": "nextValue",
                "uVar13": "prevValue",
                "uVar14": "address",
                "unaff_RBX": "size",
                "unaff_RBP": "prevAddress",
                "puVar15": "array",
                "puVar16": "ptr2",
                "puVar18": "ptr3",
                "puVar19": "ptr4",
                "cVar17": "character",
                "unaff_R12": "struct",
                "unaff_R13": "tempAddress",
                "uVar20": "tempAddress2",
                "__nmemb": "count",
                "unaff_R14": "functionArray",
                "puVar21": "arrayPtr",
                "bVar22": "boolValue",
                "iVar23": "counter",
                "unaff_retaddr": "returnValue",
                "param_7": "parameter1",
                "param_8": "parameter2",
                "param_9": "parameter3",
                "param_10": "parameterResult",
                "param_11": "parameterArray",
                "in_stack_00000030": "stackParameter1",
                "in_stack_00000038": "stackParameter2",
                "param_13": "stackParameter3",
                "param_14": "stackArrayPtr"
            },
            "code": "\nulong reversedFunction_001086af(void)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool flag;\n  ulong *ptr1;\n  int index;\n  long length;\n  undefined8 temp3;\n  ulong minValue;\n  ulong value;\n  ulong param;\n  undefined *buffer;\n  ulong input;\n  ulong nextValue;\n  ulong prevValue;\n  ulong address;\n  ulong size;\n  ulong prevAddress;\n  ulong *array;\n  undefined *ptr2;\n  char character;\n  undefined *ptr3;\n  undefined *ptr4;\n  ulong *struct;\n  ulong tempAddress;\n  ulong tempAddress2;\n  size_t count;\n  undefined8 *functionArray;\n  ulong *arrayPtr;\n  byte boolValue;\n  int counter;\n  ulong returnValue;\n  ulong parameter1;\n  uint parameter2;\n  ulong parameter3;\n  ulong parameterResult;\n  ulong *parameterArray;\n  undefined *stackParameter1;\n  uint stackParameter2;\n  uint stackParameter3;\n  undefined8 *stackArrayPtr;\n  \n  boolValue = 0;\n  parameter1 = input;\n  minValue = (**(code **)(functionArray[1] + 0x40))();\n  value = (**(code **)(functionArray[1] + 0x40))(struct[4] + 4);\nLAB_0011662a:\n  prevValue = prevAddress;\n  tempAddress2 = tempAddress;\n  if (value < minValue) {\n    minValue = value;\n  }\n  do {\n    param = parameter1;\n    nextValue = parameter1;\n    array = struct;\n    if (struct[2] == 0x100) {\n      if (minValue == 0) {\n        minValue = returnValue;\n      }\n      address = *struct;\n      struct[7] = minValue;\n      prevAddress = prevValue;\n      tempAddress = value;\n      returnValue = minValue;\n      if (value == 0) goto LAB_001164af;\n    }\n    else {\n      if (minValue == 0) {\n        minValue = parameter3;\n      }\n      address = *struct;\n      struct[7] = minValue;\n      prevAddress = value;\n      tempAddress = tempAddress2;\n      parameter3 = minValue;\n      if (value == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    array[8] = value;\n    if (*(char *)((array[3] - 1) + address) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    struct = array + 9;\n    if (size < 0xc) {\n      if (size != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stackParameter2 | stackParameter3 | parameter2) != 0) {\n        if (((stackParameter3 | parameter2) == 0) || (stackParameter2 == 0)) {\n          if (stackParameter3 == 0) {\n            if (parameter2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (parameter2 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp1 = *functionArray;\n      temp2 = *stackArrayPtr;\n      temp3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(temp3,temp1,temp2);\nLAB_0011671b:\n      count = ((long)struct - (long)parameterArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(parameterArray,count,0x48,FUN_0011a1b0);\n      array = parameterArray;\n      goto LAB_001167f9;\n    }\n    value = (**(code **)(functionArray[1] + 0x40))(nextValue);\n    *struct = value;\n    value = (**(code **)(functionArray[1] + 0x40))(nextValue + 4);\n    array[10] = value;\n    minValue = (**(code **)(functionArray[1] + 0x40))(nextValue + 8);\n    address = *struct;\n    array[0xb] = minValue;\n    value = array[10];\n    prevValue = address + 3 & 0xfffffffffffffffc;\n    array[0xf] = prevValue;\n    if (value != (value + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < minValue - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    param = prevValue + value + 0xc;\n    if (size < param) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (address < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    array[0xc] = nextValue + 0xc;\n    result = nextValue + 0xc + prevValue;\n    array[0xd] = result;\n    size = size + (-0xc - (prevValue + value));\n    param = nextValue + param;\n    if (address != 2) {\n      if (*(char *)(nextValue + 0xc) == '$') {\n        if ((*(char *)(nextValue + 0xd) == '\\x01') && (*(char *)(nextValue + 0xe) == '1')) {\n          value = FUN_00116490();\n          return value;\n        }\n      }\n      else if ((((4 < address) && (*(char *)(nextValue + 0xc) == 'G')) &&\n               (*(char *)(nextValue + 0xd) == 'A')) &&\n              ((*(char *)(nextValue + 0xe) == '$' && (*(char *)(nextValue + 0xf) == '\\x01')))) {\n        if (*(char *)(nextValue + 0x10) == '2') {\n          value = FUN_00116490();\n          return value;\n        }\n        if (*(char *)(nextValue + 0x10) == '3') {\n          value = FUN_00116490();\n          return value;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    prevValue = prevAddress;\n    tempAddress2 = tempAddress;\n    if (value == 0) {\n      if (minValue == 0x100) {\n        array[0x10] = returnValue;\nLAB_001164af:\n        nextValue = param;\n        value = tempAddress2;\n        array = struct;\n        tempAddress = tempAddress2;\n      }\n      else {\n        array[0x10] = parameter3;\nLAB_0011669e:\n        prevAddress = prevValue;\n        nextValue = param;\n        value = prevValue;\n        array = struct;\n        tempAddress = tempAddress2;\n      }\n      goto LAB_001164bb;\n    }\n    if (value == 0x10) break;\n    if (0x10 < value) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,functionArray,stackArrayPtr,length);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (value != 4) {\n      if (value == 8) {\n        value = reversedFunction_001086af();\n        return value;\n      }\n      goto LAB_00116679;\n    }\n    parameter1 = param;\n    minValue = (**(code **)(functionArray[1] + 0x40))();\n    value = 0xffffffffffffffff;\n  } while( true );\n  parameter1 = param;\n  minValue = (**(code **)(functionArray[1] + 0x28))(result);\n  value = (**(code **)(functionArray[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (struct <= array) {\n    qsort(parameterArray,count,0x48,FUN_0011a250);\n    buffer = (undefined *)xmalloc(parameterResult * 2);\n    parameter1 = 0;\n    parameter3 = 0;\n    ptr4 = buffer;\n    for (array = parameterArray; array < struct; array = array + 9) {\n      if (array[2] != 0) {\n        ptr3 = ptr4 + 4;\n        ptr2 = ptr4 + 0xc;\n        if ((array[7] == parameter3) && (array[8] == parameter1)) {\n          (**(code **)(functionArray[1] + 0x50))(*array,ptr4);\n          (**(code **)(functionArray[1] + 0x50))(0,ptr3);\n          (**(code **)(functionArray[1] + 0x50))(array[2],ptr4 + 8);\n          minValue = array[6];\n          value = *array;\n          ptr4 = (undefined *)array[3];\n          ptr3 = ptr2;\n          for (prevValue = value; prevValue != 0; prevValue = prevValue - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)boolValue * -2 + 1;\n            ptr3 = ptr3 + (ulong)boolValue * -2 + 1;\n          }\n          if (value < minValue) {\n            for (length = minValue - value; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)boolValue * -2 + 1;\n            }\n          }\n          ptr4 = ptr2 + minValue;\n        }\n        else {\n          (**(code **)(functionArray[1] + 0x50))();\n          if (*(int *)(functionArray[1] + 8) == 5) {\n            character = (*(char *)(functionArray[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character = '\\b';\n          }\n          (**(code **)(functionArray[1] + 0x50))(character,ptr3);\n          (**(code **)(functionArray[1] + 0x50))(array[2],ptr4 + 8);\n          value = *array;\n          ptr4 = (undefined *)array[3];\n          ptr3 = ptr2;\n          for (minValue = value; minValue != 0; minValue = minValue - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)boolValue * -2 + 1;\n            ptr3 = ptr3 + (ulong)boolValue * -2 + 1;\n          }\n          minValue = array[6];\n          if (value < minValue) {\n            for (length = minValue - value; length != 0; length = length + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)boolValue * -2 + 1;\n            }\n          }\n          length = functionArray[1];\n          ptr2 = ptr2 + minValue;\n          ptr4 = ptr2 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(functionArray[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(array[7],ptr2);\n            (**(code **)(functionArray[1] + 0x38))(array[8],ptr4);\n            ptr4 = ptr2 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(array[7],ptr2);\n            (**(code **)(functionArray[1] + 0x50))(array[8],ptr2 + 4);\n          }\n          parameter3 = array[7];\n          parameter1 = array[8];\n        }\n      }\n    }\n    minValue = (long)ptr4 - (long)buffer;\n    value = minValue;\n    ptr4 = buffer;\n    if (minValue < parameterResult) {\n      for (; parameterResult = minValue, value != 0; value = value - 1) {\n        *stackParameter1 = *ptr4;\n        ptr4 = ptr4 + (ulong)boolValue * -2 + 1;\n        stackParameter1 = stackParameter1 + (ulong)boolValue * -2 + 1;\n      }\n    }\n    free(buffer);\nLAB_001166f8:\n    free(parameterArray);\n    return parameterResult;\n  }\n  if (array[2] != 0) {\n    value = array[7];\n    minValue = array[8];\n    prevValue = array[2];\n    arrayPtr = array;\n    counter = 0;\n    if (value == minValue) {\n      array[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr1 = arrayPtr;\n          arrayPtr = ptr1 + -9;\n          if (arrayPtr < parameterArray) goto LAB_001167f5;\n          tempAddress2 = ptr1[-7];\n        } while (tempAddress2 == 0);\n        parameter1 = prevValue;\n        if ((*arrayPtr != *array) ||\n           (index = memcmp((void *)ptr1[-6],(void *)array[3],*array), index != 0)) break;\n        prevValue = ptr1[-2];\n        param = ptr1[-1];\n        if (value == prevValue) {\n          if (minValue == param) {\n            array[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (minValue <= param) {\n            array[2] = 0;\n            break;\n          }\n          if (param < value) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < param) || (value <= (param + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((parameter1 == 0x101) == (tempAddress2 == 0x101)) {\n            if (param <= minValue) {\n              param = minValue;\n            }\n            if (prevValue < value) {\n              value = prevValue;\n            }\n            ptr1[-1] = param;\n            ptr1[-2] = value;\n            array[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (prevValue <= value) goto LAB_001167a6;\n          if (param < value) goto LAB_0010852c;\n          if (minValue < value) {\n            if ((0xfffffffffffffff0 < minValue) || (prevValue <= (minValue + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (minValue != param) goto LAB_001167b8;\n        }\nFUN_00116852:\n        flag = counter < 0x11;\n        prevValue = parameter1;\n        counter = counter + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  array = array + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "FUN_00116490",
                "qsort",
                "FUN_00119ed0",
                "FUN_0010847a",
                "bfd_set_error",
                "FUN_0011a1b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "reversed_function_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "execute_initialization_0010add5"
            },
            "code": "\nvoid executeInitialization_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_system_00113e17"
            },
            "code": "\nvoid initializeSystem_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_system_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructure",
                "param_2": "sourceString",
                "param_3": "additionalData",
                "param_4": "flag",
                "param_5": "status",
                "uVar1": "tempVar1",
                "puVar2": "allocatedMemory",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructure,undefined8 sourceString,undefined8 additionalData,undefined flag,\n                      undefined4 status)\n\n{\n  undefined8 tempVar1;\n  undefined8 *allocatedMemory;\n  undefined8 duplicatedString;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  allocatedMemory[2] = additionalData;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(dataStructure + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = flag;\n  *(undefined4 *)(allocatedMemory + 3) = status;\n  *(undefined8 **)(dataStructure + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVar1;\n  allocatedMemory[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_00109e76",
                "FUN_0010b948",
                "FUN_0010a181",
                "FUN_00109dfe",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010a2b9",
                "FUN_00109d97",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010a377",
                "FUN_0010a77a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_and_check_numeric_str_00109a32",
                "param_1": "input_string",
                "param_2": "overflow_flag",
                "param_3": "end_of_input",
                "param_4": "placeholder1",
                "param_5": "placeholder2",
                "__nptr": "current_ptr",
                "piVar1": "error_flag_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_and_check_numeric_str_00109a32(char **input_string,undefined *overflow_flag,char *end_of_input,undefined8 placeholder1,undefined8 placeholder2)\n\n{\n  char *current_ptr;\n  int *error_flag_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (overflow_flag != (undefined *)0x0) {\n    *overflow_flag = 0;\n  }\n  current_ptr = *input_string;\n  if ((current_ptr < end_of_input) && (*current_ptr != '\\0')) {\n    error_flag_ptr = __errno_location();\n    *error_flag_ptr = 0;\n    parsed_value = strtoul(current_ptr,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*error_flag_ptr == 0)) goto LAB_00109aa9;\n    if (overflow_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(current_ptr,error_message);\n    }\n    else {\n      *overflow_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = placeholder2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strtoul",
                "FUN_00108fe8"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_check_numeric_str_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_type_0010c6be",
                "param_1": "fileContext",
                "param_2": "tagName",
                "param_3": "debugTag",
                "iVar1": "comparisonResult",
                "uVar2": "translatedErrorMessage",
                "piVar3": "allocatedMemoryPointer",
                "pauVar4": "dynamicArray",
                "lVar5": "offset",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * processDebugTagType_0010c6be(long fileContext,char *tagName,int *debugTag)\n\n{\n  int comparisonResult;\n  undefined8 translatedErrorMessage;\n  int *allocatedMemoryPointer;\n  undefined (*dynamicArray) [16];\n  long offset;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (debugTag != (int *)0x0)) {\n    if (*(long *)(fileContext + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*debugTag != 0x17) {\n        allocatedMemoryPointer = (int *)FUN_00112904(0x17,0);\n        if (allocatedMemoryPointer == (int *)0x0) {\n          return (int *)0x0;\n        }\n        dynamicArray = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(fileContext + 0x10);\n        *dynamicArray = ZEXT816(0);\n        *(int **)(*dynamicArray + 8) = debugTag;\n        *(undefined (**) [16])(allocatedMemoryPointer + 4) = dynamicArray;\n        offset = FUN_00112925(offset + 0x10,tagName,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = allocatedMemoryPointer;\n        *(long *)*dynamicArray = offset;\n        return allocatedMemoryPointer;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(debugTag + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return debugTag;\n      }\n    }\n    translatedErrorMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedErrorMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "FUN_00112904",
                "FUN_00112925",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00119970"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "is_error",
                "__ptr": "result",
                "__format": "error_msg",
                "lVar1": "demangled_value",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "new_index",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangle_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *is_error)\n\n{\n  void *result;\n  char *error_msg;\n  long demangled_value;\n  ulong index;\n  ulong capacity;\n  uint new_index;\n  char buffer [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *is_error = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_msg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_msg);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_value = FUN_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangled_value == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *is_error = 1;\n    }\n    else {\n      new_index = (int)index + 1;\n      if ((uint)capacity <= new_index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = demangled_value;\n      index = (ulong)new_index;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "fprintf",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "section_info",
                "param_2": "binary",
                "uVar1": "section_address",
                "uVar2": "section_error_string",
                "lVar3": "section_info_copy",
                "lVar4": "section",
                "bfd_get_section_by_name": "get_section_by_name",
                "dcgettext": "get_error_message"
            },
            "code": "\nlong extract_section_info_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_address;\n  undefined8 section_error_string;\n  long section_info_copy;\n  long section;\n  \n  section_info_copy = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info_copy + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info_copy + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info_copy + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section == 0) {\n    section = 0x128598;\n  }\n  else {\n    section = bfd_get_section_by_name(binary);\n    if (section == 0) {\n      section_address = *(undefined8 *)(section_info + 0x20);\n      section_error_string = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(section_error_string,section_address);\n    }\n  }\n  *(long *)(section_info_copy + 0x20) = section;\n  return section_info_copy;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_data_0010e8a9",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "inputString",
                "uVar1": "result",
                "sVar2": "stringLength",
                "__s": "extendedString"
            },
            "code": "\nundefined4 processData_0010e8a9(undefined8 paramA,undefined8 paramB,char *inputString)\n\n{\n  undefined4 result;\n  size_t stringLength;\n  char *extendedString;\n  \n  stringLength = strlen(inputString);\n  extendedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(extendedString,\"%s:c=f%g\",paramA,inputString);\n  result = FUN_0010e2f0(paramB,0x80,0,0,extendedString);\n  if ((char)result != '\\0') {\n    free(extendedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "decode_binary_flags_00104ad6",
                "unaff_RBP": "currentPointer",
                "__s": "sectionString",
                "sVar4": "stringLength",
                "iVar1": "comparisonResult",
                "unaff_R14D": "flags",
                "unaff_R15": "sectionType",
                "unaff_retaddr": "returnAddress",
                "pcVar3": "commaPosition",
                "iVar5": "substringLength",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] decodeBinaryFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentPointer;\n  char *sectionString;\n  size_t stringLength;\n  int substringLength;\n  uint flags;\n  char *sectionType;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    flags = flags | 0x2000;\n    sectionString = currentPointer;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = flags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                stringLength = strlen(sectionString);\n                substringLength = (int)stringLength;\n                currentPointer = (char *)0x0;\n              }\n              else {\n                currentPointer = commaPosition + 1;\n                substringLength = (int)commaPosition - (int)sectionString;\n              }\n              stringLength = (size_t)substringLength;\n              comparisonResult = strncasecmp(sectionType,sectionString,stringLength);\n              if (comparisonResult != 0) break;\n              flags = flags | 1;\n              sectionString = currentPointer;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionString,stringLength);\n            if (comparisonResult != 0) break;\n            flags = flags | 2;\n            sectionString = currentPointer;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionString,stringLength);\n          if (comparisonResult != 0) break;\n          flags = flags | 0x200;\n          sectionString = currentPointer;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionString,stringLength);\n        if (comparisonResult != 0) break;\n        flags = flags | 8;\n        sectionString = currentPointer;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionString,stringLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionString,stringLength);\n      if (comparisonResult == 0) {\n        flags = flags | 0x10;\n        sectionString = currentPointer;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionString,stringLength);\n        if (comparisonResult == 0) {\n          flags = flags | 0x20;\n          sectionString = currentPointer;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionString,stringLength);\n          if (comparisonResult == 0) {\n            flags = flags | 0x40;\n            sectionString = currentPointer;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionString,stringLength);\n            if (comparisonResult == 0) {\n              flags = flags | 0x8000;\n              sectionString = currentPointer;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionString,stringLength);\n              if (comparisonResult == 0) {\n                flags = flags | 0x8000000;\n                sectionString = currentPointer;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionString,stringLength);\n                if (comparisonResult == 0) {\n                  flags = flags | 0x100;\n                  sectionString = currentPointer;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionString,stringLength);\n                  if (comparisonResult == 0) {\n                    flags = flags | 0x800000;\n                    sectionString = currentPointer;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionString,stringLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(substringLength + 1));\n                      strncpy(commaPosition,sectionString,stringLength);\n                      commaPosition[stringLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    flags = flags | 0x1000000;\n                    sectionString = currentPointer;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "strncasecmp",
                "FUN_00119dd0",
                "strchr",
                "xmalloc",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "decode_binary_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010bbd3",
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "currentUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "currentPtr",
                "lVar5": "currentType",
                "puVar6": "unitPtr",
                "auVar7": "resultArray"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 arg3,undefined8 arg4)\n\n{\n  long currentUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *currentPtr;\n  long currentType;\n  undefined8 *unitPtr;\n  undefined resultArray [16];\n  \n  currentUnit = *(long *)(compilationUnit + 8);\n  if (currentUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (currentType = *(long *)(compilationUnit + 0x20); currentType != 0; currentType = *(long *)(currentType + 8)) {\n      if (*(undefined8 **)(currentType + 0x28) != (undefined8 *)0x0) {\n        for (currentPtr = (undefined8 *)**(undefined8 **)(currentType + 0x28); currentPtr != (undefined8 *)0x0;\n            currentPtr = (undefined8 *)*currentPtr) {\n          if (*(int *)((long)currentPtr + 0x14) == 0) {\n            if (*(char *)currentPtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentPtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (unitPtr = *(undefined8 **)(currentUnit + 8); unitPtr != (undefined8 *)0x0;\n        unitPtr = (undefined8 *)*unitPtr) {\n      if ((undefined8 *)unitPtr[2] != (undefined8 *)0x0) {\n        for (currentPtr = *(undefined8 **)(undefined8 *)unitPtr[2]; currentPtr != (undefined8 *)0x0;\n            currentPtr = (undefined8 *)*currentPtr) {\n          if (*(int *)((long)currentPtr + 0x14) == 0) {\n            if (*(char *)currentPtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentPtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  resultArray._8_8_ = arg4;\n  resultArray._0_8_ = errorMessage;\n  return resultArray;\nLAB_00109216:\n  errorMessage = currentPtr[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_condition_0010829e",
                "unaff_EBP": "condition",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkCondition_0010829e(void)\n\n{\n  undefined8 result;\n  int condition;\n  \n  if (condition == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((condition != 4) && (condition == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_condition_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_architecture_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "intValue",
                "iVar1": "defaultSize",
                "iVar2": "comparisonResult",
                "pcVar5": "architectureString",
                "uVar6": "printableArchitecture",
                "iVar7": "architectureNumber",
                "lVar8": "iteration",
                "iVar9": "currentPosition",
                "unaff_R15D": "originalSize",
                "uVar10": "stringLength",
                "uVar11": "modifiedIndex",
                "param_7": "maxIterations",
                "uStack000000000000000c": "outputWidth",
                "param_11": "architectureInfo",
                "param_13": "dataPtr"
            },
            "code": "\n\n\nvoid printArchitectureInfo_00104943(void)\n\n{\n  int defaultSize;\n  int comparisonResult;\n  char *inputString;\n  long intValue;\n  size_t sVar4;\n  char *architectureString;\n  undefined8 printableArchitecture;\n  int architectureNumber;\n  long iteration;\n  int currentPosition;\n  uint originalSize;\n  ulong stringLength;\n  uint modifiedIndex;\n  int maxIterations;\n  uint outputWidth;\n  undefined8 architectureInfo;\n  long dataPtr;\n  \n  intValue = strtol(inputString,(char **)0x0,10);\n  defaultSize = (int)intValue;\n  currentPosition = maxIterations;\n  outputWidth = originalSize;\n  if (defaultSize == 0) {\n    defaultSize = 0x50;\n  }\n  do {\n    maxIterations = currentPosition;\n    if (architectureInfo._4_4_ <= maxIterations) {\n      return;\n    }\n    iteration = (long)maxIterations;\n    architectureNumber = (defaultSize - outputWidth) + -1;\n    intValue = iteration;\n    do {\n      currentPosition = (int)intValue;\n      if (architectureInfo._4_4_ <= currentPosition) break;\n      sVar4 = strlen(*(char **)(dataPtr + intValue * 0x60));\n      intValue = intValue + 1;\n      architectureNumber = (architectureNumber - (int)sVar4) + -1;\n    } while (-1 < architectureNumber);\n    printf(\"\\n%*s\",(ulong)(outputWidth + 1),&DAT_0011b4a1);\n    for (intValue = iteration * 0x60; ((ulong)(uint)(currentPosition - maxIterations) + iteration) * 0x60 - intValue != 0;\n        intValue = intValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataPtr + intValue));\n    }\n    architectureNumber = 2;\n    putc(10,_stdout);\n    do {\n      architectureString = (char *)bfd_printable_arch_mach(architectureNumber,0);\n      comparisonResult = strcmp(architectureString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        printableArchitecture = bfd_printable_arch_mach(architectureNumber,0);\n        printf(\"%*s \",(ulong)outputWidth,printableArchitecture);\n        modifiedIndex = architectureNumber - 2;\n        intValue = iteration * 0x60;\n        comparisonResult = maxIterations;\n        while (currentPosition != comparisonResult) {\n          architectureString = *(char **)(dataPtr + intValue);\n          if (*(char *)((long)(char **)(dataPtr + intValue) + (ulong)modifiedIndex + 8) == '\\0') {\n            sVar4 = strlen(architectureString);\n            for (stringLength = sVar4 & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(architectureString,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (currentPosition != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          intValue = intValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      architectureNumber = architectureNumber + 1;\n    } while (architectureNumber != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_architecture_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_data_entry_00113e23",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "puVar2": "dataEntryPtr"
            },
            "code": "\nlong createDataEntry_00113e23(undefined8 input1,undefined8 input2)\n\n{\n  long result;\n  undefined8 *dataEntryPtr;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    dataEntryPtr = (undefined8 *)xmalloc(0x10);\n    *dataEntryPtr = input1;\n    dataEntryPtr[1] = input2;\n    *(undefined8 **)(result + 0x10) = dataEntryPtr;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "imported": false,
            "current_name": "create_data_entry_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_message_00108fb9",
                "param_1": "stabMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabMessage_00108fb9(undefined8 stabMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "byte_array",
                "param_2": "parsed_number",
                "iVar1": "accumulator",
                "pbVar2": "byte_ptr",
                "pbVar3": "next_byte_ptr",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **byte_array,int *parsed_number)\n\n{\n  int accumulator;\n  byte *byte_ptr;\n  byte *next_byte_ptr;\n  ulong result;\n  \n  byte_ptr = *byte_array;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*byte_ptr * 2] & 4) != 0) {\n    next_byte_ptr = byte_ptr + 1;\n    accumulator = (char)*byte_ptr + -0x30;\n    *parsed_number = accumulator;\n    *byte_array = next_byte_ptr;\n    if (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0) {\n      do {\n        byte_ptr = next_byte_ptr;\n        accumulator = accumulator * 10 + -0x30 + (int)(char)*byte_ptr;\n        next_byte_ptr = byte_ptr + 1;\n      } while (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) != 0);\n      if (byte_ptr[1] == 0x5f) {\n        next_byte_ptr = byte_ptr + 2;\n        *byte_array = next_byte_ptr;\n        *parsed_number = accumulator;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte_ptr >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d882",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_memory_00108072",
                "bVar1": "flag",
                "uVar2": "pointer",
                "cVar3": "character",
                "uVar4": "value",
                "lVar5": "errorMessage",
                "lVar6": "allocationResult",
                "lVar7": "offset",
                "lVar8": "functionResult",
                "unaff_RBX": "arguments",
                "unaff_RBP": "register1",
                "unaff_R12": "register2",
                "unaff_R14B": "booleanFlag",
                "unaff_R15": "register3",
                "dcgettext": "getErrorMessage",
                "LAB_00115695": "label1",
                "LAB_00115860": "label2",
                "LAB_00115889": "label3",
                "code": "functionCode"
            },
            "code": "\n\n\nvoid initializeMemory_00108072(void)\n\n{\n  byte flag;\n  undefined8 pointer;\n  char character;\n  uint value;\n  long errorMessage;\n  long allocationResult;\n  long offset;\n  undefined8 *arguments;\n  long register1;\n  long register2;\n  long functionResult;\n  char booleanFlag;\n  long register3;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  functionResult = arguments[6];\n  allocationResult = FUN_00114190(*arguments,0,0x18);\n  if (allocationResult == 0) {\n    *(byte *)(register3 + 0x28) = *(byte *)(register3 + 0x28) | 1;\n    pointer = *arguments;\n    functionResult = functionResult + _DAT_00127990;\n    *(long *)(register3 + 0x30) = functionResult;\n    *(long *)(register3 + 0x38) = functionResult;\n    functionResult = arguments[7];\n    allocationResult = FUN_00114190(pointer,0,0x60);\n    if (allocationResult == 0) goto label1;\nlabel2:\n    offset = *(long *)(allocationResult + 0x20);\n    if ((*(byte *)(allocationResult + 0x14) & 0x40) != 0) {\n      offset = offset + functionResult;\n    }\n    *(long *)(register3 + 0x38) = offset;\n    functionResult = FUN_00114190(*arguments,0,0x200);\n    if (functionResult != 0) goto label3;\nLAB_001156b8:\n    value = *(uint *)((long)arguments + 0x7c);\n    if (value < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register3 + 0xb4) = *(undefined4 *)((long)arguments + 0xb4);\n    *(byte *)(register3 + 0x28) =\n         *(byte *)(register3 + 0x28) & 0xcf | *(byte *)(arguments + 5) & 0x30;\n    arguments[0xc] = register3;\n    arguments[0xb] = 0;\n    flag = *(byte *)((long)arguments + 0x27);\n  }\n  else {\n    offset = *(long *)(allocationResult + 0x18);\n    if ((*(byte *)(allocationResult + 0x14) & 8) == 0) {\n      offset = offset + functionResult;\n    }\n    *(byte *)(register3 + 0x28) = *(byte *)(register3 + 0x28) | 1;\n    pointer = *arguments;\n    *(long *)(register3 + 0x30) = offset;\n    *(long *)(register3 + 0x38) = offset;\n    functionResult = arguments[7];\n    allocationResult = FUN_00114190(pointer,0,0x60);\n    if (allocationResult != 0) goto label2;\nlabel1:\n    pointer = *arguments;\n    *(long *)(register3 + 0x38) = functionResult + _DAT_00127990;\n    functionResult = FUN_00114190(pointer,0,0x200);\n    if (functionResult == 0) goto LAB_001156b8;\nlabel3:\n    value = *(uint *)(functionResult + 0x2c);\n    if (0x3e < value) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register3 + 0x7c) = value;\n    *(undefined4 *)(register3 + 0xb4) = *(undefined4 *)((long)arguments + 0xb4);\n    *(byte *)(register3 + 0x28) =\n         *(byte *)(register3 + 0x28) & 0xcf | *(byte *)(arguments + 5) & 0x30;\n    arguments[0xc] = register3;\n    arguments[0xb] = 0;\n    flag = *(byte *)((long)arguments + 0x27);\n  }\n  if ((flag & 2) != 0) {\n    functionResult = arguments[0x1a];\n    allocationResult = FUN_00115d00(functionResult,arguments[0x1c]);\n    if ((allocationResult != 0) &&\n       (offset = *(long *)(register2 + 8), *(uint *)(allocationResult + 0x18) = *(uint *)(allocationResult + 0x18) | 0x20,\n       *(int *)(offset + 8) == 5)) {\n      *(long *)(functionResult + 0xb0) = allocationResult;\n      character = (**(functionCode **)(*(long *)(register1 + 8) + 0x158))();\n      if (character == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  character = (**(functionCode **)(*(long *)(register1 + 8) + 0x158))();\n  if (character == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (booleanFlag != '\\0') {\n    *(undefined4 *)(*(long *)(register3 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "initialize_memory_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "data_ptr",
                "param_2": "flag",
                "cVar1": "char_1",
                "__s": "string_1",
                "sVar2": "length",
                "__s_00": "new_string",
                "lVar3": "counter",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long data_ptr,char flag,undefined8 param_3,undefined8 param_4)\n\n{\n  char char_1;\n  char *string_1;\n  size_t length;\n  char *new_string;\n  long counter;\n  undefined return_value [16];\n  \n  char_1 = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string_1 = (char *)FUN_00109b2f();\n  length = strlen(string_1);\n  new_string = (char *)xmalloc(length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char_1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n  }\n  length = strlen(new_string);\n  sprintf(new_string + length,\"S%s\",string_1);\n  free(string_1);\n  return_value._0_4_ = FUN_00109b52(data_ptr,new_string,counter,flag,0);\n  return_value._4_4_ = 0;\n  if ((char)return_value._0_4_ != '\\0') {\n    free(new_string);\n  }\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "param_a",
                "param_4": "param_b",
                "param_5": "param_c",
                "param_6": "param_d",
                "iVar1": "count",
                "cVar2": "flag"
            },
            "code": "\nundefined processData_0010ec73(long *data_ptr,long value,undefined8 param_a,undefined8 param_b,\n                      undefined8 param_c,undefined8 param_d)\n\n{\n  int count;\n  char flag;\n  \n  if (data_ptr[0x3c] != -1) {\n    (**(code **)(*(long *)(*data_ptr + 8) + 0x50))(value,data_ptr[1] + 8 + data_ptr[0x3c]);\n    data_ptr[0x3c] = -1;\n  }\n  if (data_ptr[0x3d] != -1) {\n    (**(code **)(*(long *)(*data_ptr + 8) + 0x50))(value,data_ptr[1] + 8 + data_ptr[0x3d]);\n    data_ptr[0x3d] = -1;\n  }\n  count = *(int *)(data_ptr + 0x3f);\n  *(int *)(data_ptr + 0x3f) = count + 1;\n  if (count == 0) {\n    data_ptr[0x40] = value;\n  }\n  else {\n    if ((data_ptr[0x41] != -1) &&\n       (flag = FUN_0010e2f0(data_ptr,0xc0,0,data_ptr[0x41],0,param_d,param_b), flag == '\\0')) {\n      return 0;\n    }\n    data_ptr[0x41] = value - data_ptr[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessValue"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_file_and_unlink_00115970",
                "param_1": "srcFilePath",
                "param_2": "destFilePath",
                "param_3": "flags",
                "param_4": "mode",
                "param_5": "deleteSource",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "localizedMessage",
                "uVar5": "errorCode",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyFileAndUnlink_00115970(char *srcFilePath,char *destFilePath,undefined4 flags,undefined8 mode,char deleteSource,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 localizedMessage;\n  ulong errorCode;\n  undefined returnValue [16];\n  \n  if (destFilePath == srcFilePath) {\n    errorCode = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(flags,destFilePath,mode);\n    errorCode = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorLocation = __errno_location();\n      errorMessage = strerror(*errorLocation);\n      localizedMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(localizedMessage,destFilePath,errorMessage);\n    }\n    unlink(srcFilePath);\n  }\n  if (deleteSource != '\\0') {\n    FUN_0011a350(destFilePath,mode);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorCode;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_file_and_unlink_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_application_0010adf2"
            },
            "code": "\nvoid initialize_application_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_application_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "extract_data_0010d7d4",
                "param_2": "ptr_data",
                "param_3": "ptr_output",
                "param_4": "ptr_output_length",
                "param_5": "ptr_output_max_length",
                "uVar1": "data",
                "cVar2": "result",
                "uVar3": "status",
                "lVar4": "output",
                "plVar5": "ptr_temp",
                "local_40": "temp_data"
            },
            "code": "\nundefined4\nextract_data_0010d7d4(undefined8 param_1,undefined8 *ptr_data,long *ptr_output,uint *ptr_output_length,uint *ptr_output_max_length)\n\n{\n  undefined8 data;\n  char result;\n  undefined4 status;\n  long output;\n  long *ptr_temp;\n  uint uVar6;\n  long temp_data [2];\n  \n  data = *ptr_data;\n  ptr_temp = temp_data;\n  if (ptr_output == (long *)0x0) {\n    ptr_temp = (long *)0x0;\n  }\n  result = FUN_0010c95e(param_1,ptr_data,ptr_temp);\n  if ((result != '\\0') &&\n     (status = FUN_00109be3(param_1,data,(int)*ptr_data - (int)data), (char)status != '\\0')) {\n    if (ptr_output == (long *)0x0) {\n      return status;\n    }\n    if (temp_data[0] != 0) {\n      if (*ptr_output_max_length <= *ptr_output_length + 1) {\n        uVar6 = *ptr_output_max_length + 10;\n        output = *ptr_output;\n        *ptr_output_max_length = uVar6;\n        output = xrealloc(output,(ulong)uVar6 << 3);\n        *ptr_output = output;\n      }\n      uVar6 = *ptr_output_length;\n      *(long *)(*ptr_output + (ulong)uVar6 * 8) = temp_data[0];\n      *ptr_output_length = uVar6 + 1;\n      return status;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "xrealloc",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "extract_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "stdout",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(stdout);\n  data = DAT_001275e0;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderr,formatString,data);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fflush",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_001126c0",
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "decompiled_function_0011378f",
                "param_1": "input_array_1",
                "param_2": "input_array_2",
                "param_3": "output_array_1",
                "param_4": "output_array_2",
                "param_5": "output_array_3",
                "param_6": "output_array_4",
                "auVar1": "temporary_array_1",
                "cVar2": "char_variable",
                "uVar3": "return_value",
                "uVar4": "error_message",
                "puVar5": "pointer_variable_1",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "pointer_variable_2",
                "puVar9": "pointer_variable_3",
                "__dest": "destination_string",
                "puVar10": "pointer_variable_4",
                "plVar11": "pointer_variable_5",
                "bVar12": "boolean_variable",
                "local_258": "local_pointer_1",
                "local_250": "local_variable_1",
                "local_248": "local_variable_2",
                "uStack_244": "stack_variable_1",
                "uStack_240": "stack_variable_2",
                "uStack_23c": "stack_variable_3",
                "local_238": "local_array_1",
                "local_228": "local_variable_3",
                "local_220": "local_array_2",
                "local_1f8": "local_variable_4",
                "local_1f0": "local_variable_5",
                "local_1e8": "local_array_3",
                "local_a0": "local_array_4",
                "local_78": "local_array_5",
                "uStack_70": "stack_variable_4",
                "local_68": "local_variable_6",
                "local_60": "local_variable_7",
                "local_58": "local_variable_8",
                "uStack_54": "stack_variable_5",
                "uStack_50": "stack_variable_6",
                "uStack_4c": "stack_variable_7"
            },
            "code": "\nundefined4\ndecompiled_function_0011378f(undefined8 *input_array_1,undefined8 *input_array_2,long *output_array_1,undefined8 *output_array_2,\n            undefined8 *output_array_3,undefined8 *output_array_4)\n\n{\n  undefined temporary_array_1 [16];\n  char char_variable;\n  undefined4 return_value;\n  undefined8 error_message;\n  undefined *pointer_variable_1;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *pointer_variable_2;\n  undefined4 *pointer_variable_3;\n  char *destination_string;\n  undefined8 *pointer_variable_4;\n  long *pointer_variable_5;\n  byte boolean_variable;\n  undefined8 *local_pointer_1;\n  long local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 stack_variable_1;\n  undefined4 stack_variable_2;\n  undefined4 stack_variable_3;\n  undefined local_array_1 [16];\n  undefined8 local_variable_3;\n  undefined local_array_2 [40];\n  undefined8 local_variable_4;\n  undefined8 local_variable_5;\n  undefined4 local_array_3 [82];\n  undefined local_array_4 [40];\n  undefined local_array_5 [8];\n  undefined8 stack_variable_4;\n  undefined8 local_variable_6;\n  undefined4 local_variable_7;\n  undefined4 local_variable_8;\n  undefined4 stack_variable_5;\n  undefined4 stack_variable_6;\n  undefined4 stack_variable_7;\n  \n  boolean_variable = 0;\n  local_variable_2 = 0;\n  stack_variable_1 = 0;\n  stack_variable_2 = 500;\n  stack_variable_3 = 0;\n  local_pointer_1 = input_array_1;\n  local_variable_1 = xmalloc(500);\n  local_variable_3 = 1;\n  local_array_1 = ZEXT816(0);\n  char_variable = bfd_hash_table_init(local_array_2,FUN_0010bb52,0x30);\n  if ((char_variable == '\\0') || (char_variable = bfd_hash_table_init(local_array_4,FUN_0010bb52,0x30), char_variable == '\\0')) {\n    return_value = bfd_get_error();\n    error_message = bfd_errmsg(return_value);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    local_variable_4 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_array_5 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    pointer_variable_3 = local_array_3;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *pointer_variable_3 = 0;\n      pointer_variable_3 = pointer_variable_3 + (ulong)boolean_variable * -2 + 1;\n    }\n    local_variable_6 = 0;\n    local_variable_7 = 0;\n    local_variable_5 = 1;\n    local_variable_8 = 0;\n    stack_variable_5 = 0;\n    stack_variable_6 = 0xffffffff;\n    stack_variable_7 = 0xffffffff;\n    char_variable = FUN_0010e2f0(&local_pointer_1,0,0,0,0);\n    temporary_array_1 = _local_array_5;\n    if (char_variable != '\\0') {\n      local_array_5._4_4_ = stack_variable_1;\n      local_array_5._0_4_ = local_variable_2;\n      stack_variable_4 = temporary_array_1._8_8_;\n      char_variable = FUN_0010e2f0(&local_pointer_1,100,0,0,*input_array_1);\n      if (char_variable != '\\0') {\n        *(int *)(input_array_2 + 6) = *(int *)(input_array_2 + 6) + 1;\n        input_array_2[10] = 0;\n        pointer_variable_4 = (undefined8 *)*input_array_2;\n        *(undefined4 *)(input_array_2 + 7) = *(undefined4 *)((long)input_array_2 + 0x34);\n        for (; pointer_variable_4 != (undefined8 *)0x0; pointer_variable_4 = (undefined8 *)*pointer_variable_4) {\n          input_array_2[8] = pointer_variable_4[2];\n          *(undefined4 *)(input_array_2 + 9) = 0;\n          char_variable = thunk_FUN_0010e439(&local_pointer_1,*(undefined8 *)(pointer_variable_4[1] + 8));\n          if (char_variable == '\\0') {\n            return 0;\n          }\n          pointer_variable_5 = (long *)pointer_variable_4[1];\n          if (pointer_variable_5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)pointer_variable_5[2] != (undefined8 *)0x0) {\n                for (pointer_variable_2 = *(undefined8 **)(undefined8 *)pointer_variable_5[2]; pointer_variable_2 != (undefined8 *)0x0;\n                    pointer_variable_2 = (undefined8 *)*pointer_variable_2) {\n                  char_variable = FUN_001135a5(input_array_2,&local_pointer_1);\n                  if (char_variable == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              pointer_variable_5 = (long *)*pointer_variable_5;\n              if (pointer_variable_5 == (long *)0x0) break;\n              char_variable = FUN_0010e439(&local_pointer_1,pointer_variable_5[1]);\n              if (char_variable == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_variable = FUN_00112502(input_array_2,&local_pointer_1,0xffffffffffffffff);\n          if (char_variable == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(stack_variable_7,stack_variable_6) == -1) &&\n           (return_value = FUN_0010e2f0(&local_pointer_1,100,0,local_variable_6,0), (char)return_value != '\\0')) {\n          (**(code **)(input_array_1[1] + 0x50))(local_variable_3,local_variable_1 + 8);\n          *output_array_1 = local_variable_1;\n          *output_array_2 = CONCAT44(stack_variable_1,local_variable_2);\n          *output_array_4 = local_variable_3;\n          pointer_variable_1 = (undefined *)xmalloc();\n          *pointer_variable_1 = 0;\n          destination_string = pointer_variable_1 + 1;\n          *output_array_3 = pointer_variable_1;\n          for (loop_counter = local_array_1._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination_string,*(char **)(loop_counter + 8));\n            string_length = strlen(destination_string);\n            destination_string = destination_string + string_length + 1;\n          }\n          return return_value;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010bb52",
                "FUN_00112502",
                "FUN_0010e2f0",
                "FUN_0010e439",
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "bfd_errmsg",
                "strcpy",
                "thunk_FUN_0010e439",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompiled_function_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMsg",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "translateMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMsg;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMsg = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMsg);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMsg);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_variables_0010a0a0",
                "param_1": "inputParam"
            },
            "code": "\nvoid initializeVariables_0010a0a0(long inputParam)\n\n{\n  FUN_00109ed3(inputParam,0x26,4,inputParam + 0x198,inputParam + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_variables_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "extract_data_00119ed0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "data_1",
                "param_10": "data_2",
                "param_11": "data_3",
                "param_12": "data_4",
                "param_13": "data_5",
                "param_14": "data_6",
                "in_AL": "flag",
                "local_d8": "length",
                "local_d4": "buffer_length",
                "local_d0": "buffer_address",
                "local_c8": "local_buffer",
                "local_b8": "temporary_buffer",
                "local_b0": "data_2_copy",
                "local_a8": "data_3_copy",
                "local_a0": "data_4_copy",
                "local_98": "data_5_copy",
                "local_90": "data_6_copy",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\nvoid extractData_00119ed0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 data_1,undefined8 data_2,undefined8 data_3,undefined8 data_4,\n                 undefined8 data_5,undefined8 data_6)\n\n{\n  char flag;\n  undefined4 length;\n  undefined4 buffer_length;\n  undefined *buffer_address;\n  undefined *local_buffer;\n  undefined temporary_buffer [8];\n  undefined8 data_2_copy;\n  undefined8 data_3_copy;\n  undefined8 data_4_copy;\n  undefined8 data_5_copy;\n  undefined8 data_6_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (flag != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  buffer_address = &stack0x00000008;\n  length = 8;\n  local_buffer = temporary_buffer;\n  buffer_length = 0x30;\n  data_2_copy = data_2;\n  data_3_copy = data_3;\n  data_4_copy = data_4;\n  data_5_copy = data_5;\n  data_6_copy = data_6;\n  FUN_00119e70(data_1,&length);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00107880",
                "FUN_0010e2f0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00104cc1",
                "FUN_0010e6a8",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_0010b800",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_00113f50",
                "FUN_00114e50",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_00108375",
                "FUN_00114690",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00105828",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "extract_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "write_debug_type_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "typeSpec",
                "param_4": "typeInfo",
                "plVar1": "ptr1",
                "lVar2": "var1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "cVar5": "flag",
                "piVar6": "ptr4",
                "uVar7": "result",
                "uVar8": "arg1",
                "iVar9": "var2",
                "uVar10": "arg2",
                "uVar11": "arg3",
                "uVar12": "count",
                "uVar13": "index",
                "bVar14": "flag2",
                "local_3c": "temp"
            },
            "code": "\n\n\nundefined8 writeDebugType_00112c1f(ulong info,undefined8 name,int *typeSpec,long typeInfo)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char flag;\n  int *ptr4;\n  undefined8 result;\n  undefined8 arg1;\n  int var2;\n  undefined4 arg2;\n  undefined8 arg3;\n  ulong count;\n  uint index;\n  bool flag2;\n  uint temp;\n  \n  count = info;\nLAB_00112c39:\n  if (typeSpec != (int *)0x0) {\n    var2 = *typeSpec;\n    if (var2 - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(typeSpec + 4);\n        index = *(uint *)(info + 0x30);\n        count = (ulong)index;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == index) {\n          if (var2 == 0x16) {\n            result = FUN_0010bba1(name,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr4 = (int *)FUN_00112b6e(typeSpec,0);\n          if (ptr4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr4 - 7U < 4) && (*(long *)(ptr4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr4 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(typeSpec + 4) + 8),ptr4),\n               flag == '\\0')) {\n              return 0;\n            }\n            index = *(uint *)(*(long *)(ptr4 + 4) + 0xc);\n          }\n          else {\n            index = 0;\n          }\n          var2 = *ptr4;\n          result = *(undefined8 *)(**(long **)(typeSpec + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var2 == 0x17) {\n          if (var1 != typeInfo) goto LAB_00112c94;\n          *(uint *)(typeInfo + 0x10) = index;\n          typeInfo = *ptr1;\n          typeSpec = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (typeInfo != 0) {\n          *(uint *)(typeInfo + 0x10) = index;\n        }\n        typeSpec = (int *)ptr1[1];\n        if (typeSpec == (int *)0x0) goto LAB_00112dd6;\n        var2 = *typeSpec;\n        typeInfo = 0;\n      } while (var2 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (typeInfo == 0) goto LAB_00112d74;\n      *(undefined4 *)(typeInfo + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(typeInfo + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(typeInfo + 8);\n    }\n    switch(var2) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(name);\n      return result;\n    case 3:\n      result = FUN_0010b800(name,typeSpec[1],*(undefined *)(typeSpec + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(name,typeSpec[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(name,typeSpec[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(name,typeSpec[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(typeSpec + 4) != 0) {\n        if ((*(uint *)(*(long *)(typeSpec + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = FUN_0010c7a0(info,result,typeSpec), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(typeSpec + 4);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          index = *(uint *)(var1 + 0xc);\n          if (index <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var2 = *typeSpec;\nLAB_00112ed2:\n          result = FUN_00109d5c(name,result,index,var2);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n      }\n      arg2 = 0;\n      if (*(long *)(typeSpec + 4) != 0) {\n        arg2 = *(undefined4 *)(*(long *)(typeSpec + 4) + 0xc);\n      }\n      flag = FUN_0010a69a(name,result,arg2,*typeSpec == 7,typeSpec[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(typeSpec + 4) != (long *)0x0) && (count = 0, **(long **)(typeSpec + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(typeSpec + 4) + count * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          flag = writeDebugType_00112c1f(info,name,ptr3[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = FUN_0010ba08(name,*ptr3,*(undefined4 *)(ptr3 + 3),\n                               *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          count = (ulong)((int)count + 1);\n        }\n      }\n      result = FUN_0010a77a(name);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(typeSpec + 4) == 0) {\n        index = 0;\n        ptr4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(typeSpec + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (count = info, flag = FUN_0010c7a0(info,result,typeSpec), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(typeSpec + 4);\n        index = *(uint *)(var1 + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          if (index <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var2 = *typeSpec;\n          goto LAB_00112ed2;\n        }\n        ptr4 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n        if (((ptr4 != (int *)0x0) && (typeSpec != ptr4)) &&\n           (count = info, flag = writeDebugType_00112c1f(info,name,ptr4,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = FUN_0010a83e(name,result,index,*typeSpec == 9,typeSpec[1],ptr4 != (int *)0x0,\n                           typeSpec == ptr4,count);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(typeSpec + 4) != (long *)0x0) {\n        index = 0;\n        if (**(long **)(typeSpec + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(typeSpec + 4) + (ulong)index * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = writeDebugType_00112c1f(info,name,ptr3[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              flag = FUN_0010ba08(name,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              flag = FUN_0010a94e(name,*ptr3,ptr3[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            index = index + 1;\n          }\n        }\n        index = 0;\n        if (*(long *)(*(long *)(typeSpec + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeSpec + 4) + 0x10) + (ulong)index * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = writeDebugType_00112c1f(info,name,*ptr3,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = FUN_0010aa53(name,*(undefined4 *)(ptr3 + 1),\n                                 *(undefined *)((long)ptr3 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            index = index + 1;\n          }\n        }\n        temp = 0;\n        if (*(long *)(*(long *)(typeSpec + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeSpec + 4) + 0x18) + (ulong)temp * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = FUN_0010ab4d(name,*ptr3);\n            if (flag == '\\0') {\n              return 0;\n            }\n            index = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)index * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (flag = writeDebugType_00112c1f(info,name,ptr2[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = writeDebugType_00112c1f(info,name,ptr2[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                flag = FUN_0010adf2(name,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                     *(undefined *)((long)ptr2 + 0x14),\n                                     *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                flag = FUN_0010add5(name);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              index = index + 1;\n            }\n            flag = FUN_00109bbb(name);\n            if (flag == '\\0') {\n              return 0;\n            }\n            temp = temp + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(name);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(typeSpec + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        arg1 = 0;\n        arg3 = 0;\n      }\n      else {\n        arg1 = ptr3[1];\n        arg3 = *ptr3;\n      }\n      result = FUN_0010e453(name,result,arg3,arg1);\n      return result;\n    case 0xc:\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(name);\n      return result;\n    case 0xd:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(typeSpec + 4) + 8) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(typeSpec + 4) + 8) + count * 8), var1 != 0) {\n          count = count + 1;\n          flag = writeDebugType_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        count = count & 0xffffffff;\n      }\n      result = FUN_0010e5db(name,count,*(undefined *)(*(long *)(typeSpec + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(name);\n      return result;\n    case 0xf:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(typeSpec + 4) + 8),\n                           *(undefined8 *)(*(long *)(typeSpec + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(*(long *)(typeSpec + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(typeSpec + 4);\n      result = FUN_0010a181(name,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(name,*(undefined *)(*(long *)(typeSpec + 4) + 8));\n      return result;\n    case 0x12:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(*(long *)(typeSpec + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(name);\n      return result;\n    case 0x13:\n      flag = writeDebugType_00112c1f(info,name,**(undefined8 **)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(typeSpec + 4) + 0x10) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(typeSpec + 4) + 0x10) + count * 8), var1 != 0)\n        {\n          count = count + 1;\n          flag = writeDebugType_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(typeSpec + 4) + 8) != 0) &&\n         (flag = writeDebugType_00112c1f(info,name,*(long *)(*(long *)(typeSpec + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(name,*(long *)(*(long *)(typeSpec + 4) + 8) != 0,count & 0xffffffff,\n                           *(undefined *)(*(long *)(typeSpec + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(name);\n      return result;\n    case 0x15:\n      flag = writeDebugType_00112c1f(info,name,*(undefined8 *)(typeSpec + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(name);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag2 = *(int **)**(undefined8 **)(typeSpec + 4) == typeSpec;\n  typeSpec = *(int **)**(undefined8 **)(typeSpec + 4);\n  if (flag2) {\nLAB_00112dd6:\n    result = FUN_00109d97(name);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "dcgettext",
                "FUN_0010bba1",
                "FUN_0010a0e9",
                "FUN_0010adf2",
                "FUN_0010a0d3",
                "fprintf",
                "FUN_00109d5c",
                "FUN_0010a083",
                "FUN_00109bbb",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010a0bd",
                "FUN_0010e453",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010b948",
                "FUN_00109e76",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "FUN_0010a0a0",
                "abort",
                "FUN_0010a181",
                "__assert_fail",
                "FUN_00109dfe",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_0010add5",
                "FUN_0010c7a0",
                "FUN_00112c1f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "write_debug_type_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isPrivateDataCopied",
                "unaff_R15": "privateDataAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isPrivateDataCopied;\n  long privateDataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isPrivateDataCopied != '\\0') {\n    *(undefined4 *)(*(long *)(privateDataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "severity",
                "in_RAX": "placeholder",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 severity)\n\n{\n  undefined8 placeholder;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,severity,message,placeholder);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_00109a32",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "fileArchitecture",
                "uVar3": "inputFile",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 fileArchitecture;\n  undefined8 inputFile;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    inputFile = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFile);\n  }\n  else {\n    inputFile = bfd_get_mach();\n    fileArchitecture = bfd_get_arch();\n    inputFile = bfd_printable_arch_mach(fileArchitecture,inputFile);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFile);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "FUN_001125fa",
                "FUN_00119ed0",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * createTemporaryDirectory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "FUN_00114cf0",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_execute_0010bba1",
                "param_1": "hash_table",
                "param_2": "key",
                "lVar1": "entry",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_execute_0010bba1(long hash_table,undefined8 key)\n\n{\n  long entry;\n  undefined8 result;\n  \n  entry = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((entry != 0) && (0 < *(long *)(entry + 0x20))) {\n    result = FUN_00109cf4(hash_table,*(long *)(entry + 0x20),*(undefined4 *)(entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_execute_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "reverse_decode_string_0010e6a8",
                "param_1": "string_offset",
                "param_2": "input_string",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "decoded_string",
                "sVar3": "input_string_length",
                "sVar4": "decoded_string_length",
                "__s_00": "output_string",
                "lVar8": "counter",
                "uVar1": "result",
                "uVar2": "unknownVar",
                "lVar5": "lookup_result",
                "uVar6": "error_msg",
                "uVar7": "func_msg",
                "uVar9": "return_value",
                "auVar10": "return_variable"
            },
            "code": "\nundefined  [16] reverse_decode_string_0010e6a8(long string_offset,char *input_string,undefined8 param3,undefined8 param4)\n\n{\n  uint result;\n  undefined4 unknownVar;\n  char *decoded_string;\n  size_t input_string_length;\n  size_t decoded_string_length;\n  char *output_string;\n  long lookup_result;\n  undefined8 error_msg;\n  undefined8 func_msg;\n  long counter;\n  ulong return_value;\n  undefined return_variable [16];\n  \n  counter = *(long *)(*(long *)(string_offset + 0x60) + 0x10);\n  unknownVar = *(undefined4 *)(*(long *)(string_offset + 0x60) + 0x18);\n  decoded_string = (char *)FUN_00109b2f();\n  input_string_length = strlen(input_string);\n  decoded_string_length = strlen(decoded_string);\n  output_string = (char *)xmalloc(input_string_length + 0x14 + decoded_string_length);\n  if (counter < 1) {\n    counter = *(long *)(string_offset + 0x68);\n    *(long *)(string_offset + 0x68) = counter + 1;\n    sprintf(output_string,\"%s:t%ld=%s\",input_string,counter,decoded_string);\n  }\n  else {\n    sprintf(output_string,\"%s:t%s\",input_string,decoded_string);\n  }\n  free(decoded_string);\n  result = FUN_0010e2f0(string_offset,0x80,0,0,output_string);\n  return_value = (ulong)result;\n  if ((char)result != '\\0') {\n    free(output_string);\n    lookup_result = bfd_hash_lookup(string_offset + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = unknownVar;\n      goto LAB_0010e7b3;\n    }\n    unknownVar = bfd_get_error();\n    error_msg = bfd_errmsg(unknownVar);\n    func_msg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(func_msg,error_msg);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  return_variable._8_8_ = param4;\n  return_variable._0_8_ = return_value;\n  return return_variable;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00119ed0",
                "sprintf",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "reverse_decode_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_send_data_0010e7c2",
                "param_1": "data",
                "param_2": "message",
                "param_3": "length1",
                "param_4": "length2",
                "__s": "prefix",
                "sVar1": "messageLength",
                "sVar2": "prefixLength",
                "__s_00": "formattedData",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e7c2(undefined8 data,char *message,undefined8 length1,undefined8 length2)\n\n{\n  char *prefix;\n  size_t messageLength;\n  size_t prefixLength;\n  char *formattedData;\n  undefined result [16];\n  \n  prefix = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  prefixLength = strlen(prefix);\n  formattedData = (char *)xmalloc(messageLength + 3 + prefixLength);\n  sprintf(formattedData,\"%s:T%s\",message,prefix);\n  free(prefix);\n  result._0_4_ = FUN_0010e2f0(data,0x80,0,0,formattedData);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedData);\n  }\n  result._8_8_ = length2;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_data_and_exit_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "sizeRead",
                "local_d4": "bufferSize",
                "local_d0": "localBuffer",
                "local_c8": "localBuffer2",
                "local_b8": "localArray",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localInput1",
                "local_78": "localInput2",
                "local_68": "localInput3",
                "local_58": "localInput4",
                "local_48": "localInput5",
                "local_38": "localInput6",
                "local_28": "localInput7",
                "local_18": "localInput8"
            },
            "code": "\nvoid initializeDataAndExit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 sizeRead;\n  undefined4 bufferSize;\n  undefined *localBuffer;\n  undefined *localBuffer2;\n  undefined localArray [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput3;\n  undefined4 localInput4;\n  undefined4 localInput5;\n  undefined4 localInput6;\n  undefined4 localInput7;\n  undefined4 localInput8;\n  \n  if (condition != '\\0') {\n    localInput1 = input1;\n    localInput2 = input2;\n    localInput3 = input3;\n    localInput4 = input4;\n    localInput5 = input5;\n    localInput6 = input6;\n    localInput7 = input7;\n    localInput8 = input8;\n  }\n  localBuffer = &stack0x00000008;\n  sizeRead = 8;\n  localBuffer2 = localArray;\n  bufferSize = 0x30;\n  localParam10 = param10;\n  localParam11 = param11;\n  localParam12 = param12;\n  localParam13 = param13;\n  localParam14 = param14;\n  FUN_00119e70(param9,&sizeRead);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00104920",
                "FUN_0010da0b",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00115b70",
                "FUN_001083de",
                "FUN_00114190",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "initialize_data_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "ptrToRetValue",
                "unaff_retaddr": "returnValue"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *ptrToRetValue;\n  undefined8 returnValue;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return returnValue;\n    }\n  }\n  FUN_0011a110(*ptrToRetValue);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "extract_and_process_data_00116852",
                "in_RCX": "dataPointer",
                "in_R10": "counter",
                "unaff_RBP": "currentData",
                "unaff_R14": "dataArray",
                "unaff_RBX": "minValue",
                "unaff_R13": "dataArrayEnd",
                "unaff_R15": "maxValue",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "param4",
                "param_12": "outputBuffer",
                "param_13": "param5",
                "param_14": "param6",
                "bVar14": "byteVar",
                "sVar1": "sizeVar",
                "uVar4": "index",
                "pcVar2": "funcPtr",
                "iVar3": "result",
                "__ptr": "dynamicMemory",
                "puVar9": "ptr1",
                "cVar10": "charVar",
                "puVar11": "ptr2",
                "uVar5": "var1",
                "uVar6": "var2",
                "lVar7": "loopVar",
                "uVar8": "var3"
            },
            "code": "\nulong extractAndProcessData_00116852(void)\n\n{\n  size_t sizeVar;\n  code *funcPtr;\n  int result;\n  uint index;\n  undefined *dynamicMemory;\n  size_t *dataPointer;\n  ulong var1;\n  ulong var2;\n  long loopVar;\n  ulong var3;\n  size_t minValue;\n  size_t *currentData;\n  undefined *ptr1;\n  char charVar;\n  undefined *ptr2;\n  ulong counter;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *dataArrayEnd;\n  size_t *dataArray;\n  size_t maxValue;\n  size_t *psizeVar3;\n  byte byteVar;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *param4;\n  undefined *outputBuffer;\n  long param5;\n  size_t param6;\n  \n  byteVar = 0;\ncode_r0x00116852:\n  index = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  dataArray = dataArray + -9;\n  do {\n    if (dataArrayEnd <= dataArray) {\n      sizeVar = dataArray[2];\n      if (sizeVar == 0) goto LAB_00116863;\n      var3 = (ulong)index;\n      if ((*dataArray == *currentData) &&\n         (result = memcmp((void *)dataArray[3],(void *)currentData[3],*currentData), result == 0)) {\n        var2 = dataArray[7];\n        var1 = dataArray[8];\n        counter = var3 & 0xffffffff;\n        if (maxValue == var2) {\n          if (minValue != var1) goto LAB_001167a6;\n          currentData[2] = 0;\n        }\n        else {\n          if (maxValue < var2) {\n            if (var1 < maxValue) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < var1) || (maxValue <= (var1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minValue < maxValue) {\n              if ((0xfffffffffffffff0 < minValue) ||\n                 (var2 <= (minValue + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minValue == var1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minValue <= var1) {\n              currentData[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (var1 < maxValue) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sizeVar == 0x101)) goto code_r0x00116852;\n          if (var1 <= minValue) {\n            var1 = minValue;\n          }\n          if (var2 < maxValue) {\n            maxValue = var2;\n          }\n          dataArray[8] = var1;\n          dataArray[7] = maxValue;\n          currentData[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        dataArray = currentData;\n        currentData = dataArray + 9;\n        if (dataPointer <= currentData) {\n          qsort(param4,param6,0x48,FUN_0011a250);\n          dynamicMemory = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          puVar12 = dynamicMemory;\n          for (psizeVar3 = param4; psizeVar3 < dataPointer; psizeVar3 = psizeVar3 + 9) {\n            if (psizeVar3[2] != 0) {\n              ptr2 = puVar12 + 4;\n              ptr1 = puVar12 + 0xc;\n              funcPtr = *(code **)(*(long *)(param5 + 8) + 0x50);\n              if ((psizeVar3[7] == param2) && (psizeVar3[8] == param1)) {\n                (*funcPtr)(*psizeVar3,puVar12);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(0,ptr2);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(psizeVar3[2],puVar12 + 8);\n                var2 = psizeVar3[6];\n                var3 = *psizeVar3;\n                puVar12 = (undefined *)psizeVar3[3];\n                ptr2 = ptr1;\n                for (var1 = var3; var1 != 0; var1 = var1 - 1) {\n                  *ptr2 = *puVar12;\n                  puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n                }\n                if (var3 < var2) {\n                  for (loopVar = var2 - var3; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                puVar12 = ptr1 + var2;\n              }\n              else {\n                (*funcPtr)();\n                if (*(int *)(*(long *)(param5 + 8) + 8) == 5) {\n                  charVar = (*(char *)(*(long *)(param5 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charVar = '\\b';\n                }\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(charVar,ptr2);\n                (**(code **)(*(long *)(param5 + 8) + 0x50))(psizeVar3[2],puVar12 + 8);\n                var3 = *psizeVar3;\n                puVar12 = (undefined *)psizeVar3[3];\n                ptr2 = ptr1;\n                for (var2 = var3; var2 != 0; var2 = var2 - 1) {\n                  *ptr2 = *puVar12;\n                  puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n                }\n                var2 = psizeVar3[6];\n                if (var3 < var2) {\n                  for (loopVar = var2 - var3; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                loopVar = *(long *)(param5 + 8);\n                ptr1 = ptr1 + var2;\n                puVar12 = ptr1 + 8;\n                if ((*(int *)(loopVar + 8) == 5) &&\n                   (*(char *)(*(long *)(param5 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(psizeVar3[7],ptr1);\n                  (**(code **)(*(long *)(param5 + 8) + 0x38))(psizeVar3[8],puVar12);\n                  puVar12 = ptr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(psizeVar3[7],ptr1);\n                  (**(code **)(*(long *)(param5 + 8) + 0x50))(psizeVar3[8],ptr1 + 4);\n                }\n                param2 = psizeVar3[7];\n                param1 = psizeVar3[8];\n              }\n            }\n          }\n          var2 = (long)puVar12 - (long)dynamicMemory;\n          var3 = var2;\n          puVar12 = dynamicMemory;\n          if (var2 < param3) {\n            for (; param3 = var2, var3 != 0; var3 = var3 - 1) {\n              *outputBuffer = *puVar12;\n              puVar12 = puVar12 + (ulong)byteVar * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)byteVar * -2 + 1;\n            }\n          }\n          free(dynamicMemory);\n          free(param4);\n          return param3;\n        }\n        in_R11 = dataArray[0xb];\n      } while (in_R11 == 0);\n      maxValue = dataArray[0x10];\n      minValue = dataArray[0x11];\n      index = 0;\n      if (maxValue != minValue) break;\n      dataArray[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "memcmp",
                "xmalloc",
                "qsort",
                "free",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "extract_and_process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "process_parameter_00113d3a",
                "param_1": "input",
                "lVar1": "result"
            },
            "code": "\nlong processParameter_00113d3a(long input)\n\n{\n  long result;\n  \n  if (input != 0) {\n    result = *(long *)(input + 8);\n    if (result == 0) {\n      result = FUN_00112904(0xc,0);\n      if (result == 0) {\n        result = 0;\n      }\n      else {\n        *(long *)(result + 0x10) = input;\n        *(long *)(input + 8) = result;\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "process_parameter_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_function_0010a0d3",
                "param_1": "inputParam"
            },
            "code": "\nvoid executeFunction_0010a0d3(long inputParam)\n\n{\n  FUN_00109ed3(inputParam,0x42,*(undefined4 *)(*(long *)(inputParam + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "convert_and_create_output_section_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "lengthVar1",
                "pcVar2": "ptrVar2",
                "ppcVar3": "ptrPtrVar3",
                "cVar4": "conditionVar",
                "iVar5": "intVar5",
                "uVar6": "uintVar6",
                "sVar7": "sizeVar7",
                "sVar8": "sizeVar8",
                "lVar9": "lengthVar9",
                "pcVar10": "ptrVar10",
                "pcVar11": "ptrVar11",
                "pcVar12": "ptrVar12",
                "uVar13": "uintVar13",
                "bVar14": "boolVar14",
                "local_50": "localVar50",
                "local_48": "localVar48",
                "local_40": "localVar40"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid convertAndCreateOutputSection_00115530(long param1,char **param2,long param3)\n\n{\n  long lengthVar1;\n  char *ptrVar2;\n  char **ptrPtrVar3;\n  char conditionVar;\n  int intVar5;\n  uint uintVar6;\n  size_t sizeVar7;\n  size_t sizeVar8;\n  long lengthVar9;\n  char *ptrVar10;\n  char *ptrVar11;\n  char *ptrVar12;\n  uint uintVar13;\n  bool boolVar14;\n  long localVar50;\n  char *localVar48;\n  long localVar40 [2];\n  \n  conditionVar = FUN_001159d0(param2);\n  if (conditionVar != '\\0') {\n    return;\n  }\n  ptrVar10 = *param2;\n  uintVar13 = *(uint *)((long)param2 + 0x24);\n  localVar48 = ptrVar10;\n  ptrPtrVar3 = DAT_001278d8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    uintVar13 = uintVar13 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; ptrPtrVar3 != (char **)0x0; ptrPtrVar3 = (char **)ptrPtrVar3[3]) {\n    intVar5 = strcmp(*ptrPtrVar3,ptrVar10);\n    if (intVar5 == 0) {\n      if (*(uint *)(ptrPtrVar3 + 2) != 0xffffffff) {\n        uintVar13 = *(uint *)(ptrPtrVar3 + 2);\n      }\n      if (ptrVar10 != ptrPtrVar3[1]) {\n        localVar48 = ptrPtrVar3[1];\n        uintVar13 = FUN_00115f30(uintVar13,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (ptrVar10 = DAT_001278f8, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (ptrVar10 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    sizeVar7 = strlen(ptrVar10);\n    sizeVar8 = strlen(localVar48);\n    ptrVar12 = (char *)xmalloc(sizeVar7 + 1 + sizeVar8);\n    ptrVar10 = strcpy(ptrVar12,ptrVar10);\n    localVar48 = strcat(ptrVar10,localVar48);\n  }\n  lengthVar9 = FUN_00114190(*param2,0,0x80);\n  boolVar14 = false;\n  if (lengthVar9 == 0) {\n    if ((DAT_00127a2c == 4) && ((uintVar13 & 0x2000001) != 0)) {\n      intVar5 = *(int *)(*(long *)(param1 + 8) + 8);\n      if (intVar5 == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            boolVar14 = (uintVar13 & 0x2000000) == 0;\n            uintVar6 = ~((-(uint)((uintVar13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & uintVar6;\n          }\n          else {\n            uintVar6 = 0xfdfffefd;\n          }\n          uintVar13 = uintVar13 & uintVar6;\n        }\n      }\n      else if ((intVar5 != 2) || (intVar5 = strcmp(*param2,\".buildid\"), intVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uintVar13 = FUN_00115f30(uintVar13 & 0x104 | *(uint *)(lengthVar9 + 0x28),param3,*param2);\n  }\n  conditionVar = bfd_convert_section_setup(param1,param2,param3,&localVar48,localVar40);\n  if (conditionVar == '\\0') {\n    ptrVar10 = (char *)0x0;\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  ptrVar10 = (char *)bfd_make_section_anyway_with_flags(param3,localVar48,uintVar13);\n  if (ptrVar10 == (char *)0x0) {\n    localVar50 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      localVar40[0] = 0;\n      goto LAB_001158e7;\n    }\n    conditionVar = bfd_set_section_size(ptrVar10,localVar40[0]);\n    if (conditionVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    localVar40[0] = ((((long)DAT_00127a1c - 1U) + localVar40[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    conditionVar = bfd_set_section_size(ptrVar10);\n    if (conditionVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  localVar50 = 0;\n  ptrVar12 = param2[6];\n  lengthVar9 = FUN_00114190(*param2,0,0x18);\n  if (lengthVar9 == 0) {\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar11 = *param2;\n    ptrVar12 = ptrVar12 + _DAT_00127990;\n    *(char **)(ptrVar10 + 0x30) = ptrVar12;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12;\n    ptrVar12 = param2[7];\n    lengthVar9 = FUN_00114190(ptrVar11,0,0x60);\n    if (lengthVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    ptrVar11 = *(char **)(lengthVar9 + 0x20);\n    if ((*(byte *)(lengthVar9 + 0x14) & 0x40) != 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    lengthVar9 = FUN_00114190(*param2,0,0x200);\n    if (lengthVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar13 = *(uint *)((long)param2 + 0x7c);\n    if (uintVar13 < 0x3f) goto LAB_001156c4;\n    localVar50 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptrVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    conditionVar = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptrVar10);\n    if (conditionVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    ptrVar11 = *(char **)(lengthVar9 + 0x18);\n    if ((*(byte *)(lengthVar9 + 0x14) & 8) == 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar2 = *param2;\n    *(char **)(ptrVar10 + 0x30) = ptrVar11;\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    ptrVar12 = param2[7];\n    lengthVar9 = FUN_00114190(ptrVar2,0,0x60);\n    if (lengthVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    ptrVar11 = *param2;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12 + _DAT_00127990;\n    lengthVar9 = FUN_00114190(ptrVar11,0,0x200);\n    if (lengthVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar13 = *(uint *)(lengthVar9 + 0x2c);\n    if (0x3e < uintVar13) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptrVar10 + 0x7c) = uintVar13;\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptrVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    ptrVar12 = param2[0x1a];\n    lengthVar9 = FUN_00115d00(ptrVar12,param2[0x1c]);\n    if ((lengthVar9 == 0) ||\n       (lengthVar1 = *(long *)(param1 + 8), *(uint *)(lengthVar9 + 0x18) = *(uint *)(lengthVar9 + 0x18) | 0x20,\n       *(int *)(lengthVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(ptrVar12 + 0xb0) = lengthVar9;\n    conditionVar = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptrVar10);\n    if (conditionVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (boolVar14) {\n    *(undefined4 *)(*(long *)(ptrVar10 + 0xd0) + 4) = 8;\n  }\n  if (localVar50 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  FUN_001126c0(0,param3,ptrVar10,localVar50);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00115f30",
                "bfd_set_section_size",
                "xmalloc",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "strlen",
                "FUN_001159d0",
                "FUN_00114190",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "convert_and_create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "execute_function_0010a0bd",
                "param_1": "input_parameter"
            },
            "code": "\nvoid execute_function_0010a0bd(long input_parameter)\n\n{\n  FUN_00109ed3(input_parameter,0x6b,*(undefined4 *)(*(long *)(input_parameter + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_function_name_00113e5e",
                "param_1": "input",
                "param_2": "output",
                "param_3": "length",
                "cVar1": "result",
                "local_20": "temp"
            },
            "code": "\nundefined8 validate_function_name_00113e5e(undefined8 input,char **output,long length)\n\n{\n  char result;\n  char *temp [2];\n  \n  temp[0] = *output;\n  *output = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)temp[0] < 5) ||\n      (result = FUN_00113fb0(temp[0],\"type\"), result == '\\0')) ||\n     ((temp[0][4] != '$' && (temp[0][4] != '.')))) {\n    if (*temp[0] != '_') {\n      return 1;\n    }\n    if (temp[0][1] != '_') {\n      return 1;\n    }\n    if (temp[0][2] != 'o') {\n      return 1;\n    }\n    if (temp[0][3] != 'p') {\n      return 1;\n    }\n    temp[0] = temp[0] + 4;\n  }\n  else {\n    temp[0] = temp[0] + 5;\n  }\n  result = FUN_0010c95e(input,temp,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_function_name_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "context",
                "param_2": "inputString",
                "param_3": "inputSize",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "param7Value",
                "param_8": "flag4",
                "lVar1": "contextVar",
                "pcVar2": "string1",
                "bVar3": "byteValue",
                "pcVar4": "string2",
                "__s": "string3",
                "sVar5": "string1Length",
                "sVar6": "string2Length",
                "sVar7": "inputStringLength",
                "sVar8": "string3Length",
                "uVar9": "result",
                "cVar10": "character1",
                "cVar11": "character2",
                "local_52": "byteVar"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long context,char *inputString,uint inputSize,char flag1,char flag2,char flag3,\n            undefined8 param7Value,char flag4)\n\n{\n  long contextVar;\n  char *string1;\n  byte byteValue;\n  char *string2;\n  char *string3;\n  size_t string1Length;\n  size_t string2Length;\n  size_t inputStringLength;\n  size_t string3Length;\n  undefined8 result;\n  char character1;\n  char character2;\n  byte byteVar;\n  \n  string3 = (char *)0x0;\n  byteVar = *(byte *)(*(long *)(context + 0x60) + 0x1c);\n  string2 = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byteValue = 1;\n    if (byteVar == 0) {\n      byteValue = *(byte *)(*(long *)(context + 0x60) + 0x1c);\n    }\n    byteVar = byteValue & 1;\n    string3 = (char *)FUN_00109b2f(context);\n  }\n  contextVar = *(long *)(context + 0x60);\n  if ((contextVar == 0) || (string1 = *(char **)(contextVar + 0x30), string1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < inputSize) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      character2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      character2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    character1 = '?';\n    if (flag1 == '\\0') {\n      character1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    string1Length = strlen(string1);\n    string2Length = strlen(string2);\n    inputStringLength = strlen(inputString);\n    string3Length = 0;\n    if (flag4 != '\\0') {\n      string3Length = strlen(string3);\n    }\n    result = xrealloc(string1,inputStringLength + string1Length + 0x28 + string2Length + string3Length);\n    *(undefined8 *)(contextVar + 0x30) = result;\n    string1 = *(char **)(*(long *)(context + 0x60) + 0x30);\n    string1Length = strlen(string1);\n    sprintf(string1 + string1Length,\"%s:%s;%c%c%c\",string2,inputString,(ulong)(byte)(0x32 - (char)inputSize),\n            (ulong)(uint)(int)character2,(ulong)(uint)(int)character1,string1Length);\n    free(string2);\n    if (flag4 != '\\0') {\n      string2 = *(char **)(*(long *)(context + 0x60) + 0x30);\n      string1Length = strlen(string2);\n      sprintf(string2 + string1Length,\"%ld;%s;\",param7Value,string3);\n      free(string3);\n    }\n    if (byteVar != 0) {\n      *(undefined *)(*(long *)(context + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "xrealloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010adf2",
                "FUN_0010add5"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_needed_00115f30",
                "param_1": "flags",
                "param_2": "pointers",
                "param_3": "value",
                "uVar1": "firstValue",
                "uVar2": "translation",
                "dcgettext": "getTranslation"
            },
            "code": "\nuint dropShareFlagIfNeeded_00115f30(uint flags,undefined8 *pointers,undefined8 value)\n\n{\n  undefined8 firstValue;\n  undefined8 translation;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(pointers[1] + 8) != 2)) {\n    firstValue = *pointers;\n    flags = flags & 0xf7ffffff;\n    translation = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(translation,firstValue,value);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_needed_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "arrayPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *arrayPointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    arrayPointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*arrayPointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*arrayPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_return_bit_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint invert_and_return_bit_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_return_bit_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "extract_archives_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "fileStat",
                "param_5": "targetTriple",
                "param_6": "tempDirPath",
                "param_7": "debugLink",
                "bVar1": "byteVar1",
                "cVar2": "checkFormatResult",
                "cVar3": "checkFormatMatchesResult",
                "iVar4": "formatError1",
                "iVar5": "formatError2",
                "ppcVar6": "archivedFile",
                "pvVar7": "buffer",
                "lVar8": "breadResult",
                "puVar9": "archivedFileInfo",
                "piVar10": "errnoLocation",
                "uVar11": "dcgettextWarning",
                "uVar12": "dcgettextError",
                "lVar13": "fileHandle",
                "puVar14": "bfdHandle",
                "lVar21": "bfdBreadSize",
                "ppcVar16": "currentArchiveFile",
                "pcVar17": "currentFilePath",
                "pcVar18": "tempFilePath",
                "__ptr": "tempDataDir",
                "ppcVar19": "bfdErrorHandle",
                "pcVar20": "bfdCloseFunc",
                "uVar22": "bfdArchInfo",
                "local_1a0": "outputHandle",
                "local_198": "nextFileHandle",
                "local_158": "fileStatus",
                "uStack_b0": "filePermissions",
                "lStack_98": "fileSize"
            },
            "code": "\n\n\nvoid extractArchives_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 fileStat,\n                 undefined8 targetTriple,long tempDirPath,undefined8 debugLink)\n\n{\n  byte byteVar1;\n  char checkFormatResult;\n  char checkFormatMatchesResult;\n  int formatError1;\n  int formatError2;\n  char **archivedFile;\n  void *buffer;\n  long breadResult;\n  undefined8 *archivedFileInfo;\n  int *errnoLocation;\n  undefined8 dcgettextWarning;\n  undefined8 dcgettextError;\n  long fileHandle;\n  undefined8 *bfdHandle;\n  char *pcVar15;\n  char **currentArchiveFile;\n  char *currentFilePath;\n  char *tempFilePath;\n  undefined8 *tempDataDir;\n  char **bfdErrorHandle;\n  code *bfdCloseFunc;\n  long bfdBreadSize;\n  uint bfdArchInfo;\n  char *pcheckFormatResult3;\n  stat *psVar24;\n  bool bVar25;\n  byte bVar26;\n  undefined8 *outputHandle;\n  long *nextFileHandle;\n  stat fileStatus;\n  void *local_c8 [3];\n  uint filePermissions;\n  long fileSize;\n  \n  bVar26 = 0;\n  fileHandle = FUN_00113f50();\n  if (fileHandle < 1) {\n    if (fileHandle == 0) {\n      dcgettextError = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(dcgettextError,inputFilePath);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfdHandle = (undefined8 *)bfd_openr(inputFilePath,targetTriple);\n  if ((bfdHandle == (undefined8 *)0x0) || (formatError2 = bfd_stat(bfdHandle,fileStat), formatError2 != 0)) {\n    FUN_001126c0(inputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x40000;\n  }\n  checkFormatResult = bfd_check_format(bfdHandle,2);\n  if (checkFormatResult != '\\0') {\n    if (tempDirPath == 0) {\n      checkFormatResult = '\\0';\n      tempDirPath = *(long *)bfdHandle[1];\n    }\n    if (fileDescriptor < 0) {\n      outputHandle = (undefined8 *)bfd_openw(outputFilePath,tempDirPath);\n    }\n    else {\n      outputHandle = (undefined8 *)bfd_fdopenw(outputFilePath,tempDirPath,fileDescriptor);\n    }\n    if (outputHandle != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        dcgettextError = *bfdHandle;\n        dcgettextWarning = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(dcgettextWarning,dcgettextError);\n        DAT_00127a10 = 0;\n      }\n      FUN_00114d50(outputHandle,bfdHandle,DAT_001264b4);\n      nextFileHandle = outputHandle + 0x1f;\n      if ((*(byte *)((long)bfdHandle + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        dcgettextError = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,bfdHandle,0,dcgettextError);\n        return;\n      }\n      pcVar15 = (char *)FUN_0011a0e0(*outputHandle);\n      if (pcVar15 == (char *)0x0) {\n        errnoLocation = __errno_location();\n        pcVar15 = strerror(*errnoLocation);\n        dcgettextError = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(dcgettextError,pcVar15);\n      }\n      if (DAT_00127a2c == 7) {\n        byteVar1 = *(byte *)((long)bfdHandle + 0x49);\n        bfdArchInfo = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdHandle + 0x49);\n        bfdArchInfo = byteVar1 >> 3 & 1;\n      }\n      bVar25 = _DAT_001264b0 != 0;\n      *(byte *)((long)outputHandle + 0x49) =\n           byteVar1 & 0x10 | (byte)(bfdArchInfo << 3) | *(byte *)((long)outputHandle + 0x49) & 0xe7;\n      if (bVar25) {\n        *(uint *)((long)outputHandle + 0x44) = *(uint *)((long)outputHandle + 0x44) | 0x2000;\n      }\n      tempDataDir = (undefined8 *)0x0;\n      currentArchiveFile = (char **)bfd_openr_next_archived_file(bfdHandle,0);\n      checkFormatMatchesResult = bfd_set_format(outputHandle,*(byte *)(bfdHandle + 9) & 7);\n      if (checkFormatMatchesResult == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(0,outputHandle,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (currentArchiveFile != (char **)0x0))) {\n        tempFilePath = *currentArchiveFile;\n        currentFilePath = tempFilePath;\n        if (*tempFilePath == '/') {\nLAB_0010527d:\n          dcgettextError = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(dcgettextError,tempFilePath);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*currentFilePath != '\\0') {\n          pcheckFormatResult3 = currentFilePath;\n          if ((*currentFilePath == '.') && (pcheckFormatResult3 = currentFilePath + 1, currentFilePath[1] == '.')) {\n            pcheckFormatResult3 = currentFilePath + 2;\n            if ((currentFilePath[2] == '\\0') || (currentFilePath[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pcheckFormatResult3 != '\\0' && (*pcheckFormatResult3 != '/')); pcheckFormatResult3 = pcheckFormatResult3 + 1) {\n          }\n          currentFilePath = pcheckFormatResult3;\n          if (*pcheckFormatResult3 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        tempFilePath = (char *)concat(pcVar15,&DAT_0011b47d);\n        formatError2 = stat(tempFilePath,&fileStatus);\n        archivedFileInfo = tempDataDir;\n        if (-1 < formatError2) {\n          fileHandle = FUN_0011a0e0(tempFilePath);\n          free(tempFilePath);\n          if (fileHandle == 0) {\n            errnoLocation = __errno_location();\n            tempFilePath = strerror(*errnoLocation);\n            dcgettextError = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(dcgettextError,tempFilePath);\n            goto LAB_00104e93;\n          }\n          archivedFileInfo = (undefined8 *)xmalloc(0x18);\n          tempFilePath = *currentArchiveFile;\n          *archivedFileInfo = tempDataDir;\n          archivedFileInfo[2] = 0;\n          archivedFileInfo[1] = fileHandle;\n          tempFilePath = (char *)concat(fileHandle,&DAT_0011b47d,tempFilePath);\n        }\n        formatError2 = 0;\n        if (DAT_001279cb != '\\0') {\n          psVar24 = &fileStatus;\n          for (fileHandle = 0x24; fileHandle != 0; fileHandle = fileHandle + -1) {\n            *(undefined4 *)&psVar24->st_dev = 0;\n            psVar24 = (stat *)((long)psVar24 + (ulong)bVar26 * -8 + 4);\n          }\n          bfdErrorHandle = (char **)currentArchiveFile[0x1d];\n          if ((char **)currentArchiveFile[0x1d] == (char **)0x0) {\n            bfdErrorHandle = currentArchiveFile;\n          }\n          formatError2 = (**(code **)(bfdErrorHandle[1] + 0x1e8))(currentArchiveFile,&fileStatus);\n          if (formatError2 != 0) {\n            currentFilePath = *currentArchiveFile;\n            dcgettextError = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(dcgettextError,currentFilePath);\n          }\n        }\n        tempDataDir = (undefined8 *)xmalloc(0x18);\n        tempDataDir[1] = tempFilePath;\n        *tempDataDir = archivedFileInfo;\n        tempDataDir[2] = 0;\n        checkFormatMatchesResult = bfd_check_format(currentArchiveFile,1);\n        if (checkFormatMatchesResult == '\\0') {\n          dcgettextError = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,currentArchiveFile,0,dcgettextError);\n          bfdErrorHandle = (char **)bfd_openw(tempFilePath,tempDirPath);\n          if (bfdErrorHandle == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(tempFilePath,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          archivedFile = (char **)currentArchiveFile[0x1d];\n          if ((char **)currentArchiveFile[0x1d] == (char **)0x0) {\n            archivedFile = currentArchiveFile;\n          }\n          formatError1 = (**(code **)(archivedFile[1] + 0x1e8))(currentArchiveFile);\n          fileHandle = fileSize;\n          if (formatError1 == 0) {\n            if (fileSize < 0) {\n              FUN_001125fa(currentArchiveFile);\n              dcgettextError = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(dcgettextError);\n            }\n            else {\n              formatError1 = bfd_seek(currentArchiveFile,0,0);\n              if (formatError1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  currentFilePath = *bfdErrorHandle;\n                  dcgettextError = FUN_001125fa(currentArchiveFile);\n                  pcheckFormatResult3 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pcheckFormatResult3,dcgettextError,currentFilePath);\n                }\n                buffer = (void *)xmalloc(0x2000);\n                for (; fileHandle != 0; fileHandle = fileHandle - bfdBreadSize) {\n                  bfdBreadSize = 0x2000;\n                  if (fileHandle < 0x2001) {\n                    bfdBreadSize = fileHandle;\n                  }\n                  breadResult = bfd_bread(buffer,bfdBreadSize,currentArchiveFile);\n                  archivedFile = currentArchiveFile;\n                  if ((bfdBreadSize != breadResult) ||\n                     (breadResult = bfd_bwrite(buffer,bfdBreadSize,bfdErrorHandle), archivedFile = bfdErrorHandle,\n                     bfdBreadSize != breadResult)) {\n                    FUN_001126c0(0,archivedFile,0,0);\n                    free(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*bfdErrorHandle,filePermissions | 0x100);\n                free(buffer);\n                checkFormatMatchesResult = bfd_close_all_done(bfdErrorHandle);\n                if (checkFormatMatchesResult == '\\0') {\n                  FUN_001126c0(tempFilePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              dcgettextError = FUN_001125fa(currentArchiveFile);\n              FUN_0011a110(dcgettextError);\n            }\n          }\n          else {\n            FUN_001126c0(0,currentArchiveFile,0,0);\n          }\nLAB_00104f00:\n          checkFormatMatchesResult = bfd_close_all_done(bfdErrorHandle);\n          if (checkFormatMatchesResult == '\\0') {\n            FUN_001126c0(tempFilePath,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(tempFilePath);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (checkFormatResult == '\\0') {\n            bfdErrorHandle = (char **)bfd_openw(tempFilePath,*(undefined8 *)currentArchiveFile[1]);\n          }\n          else {\n            bfdErrorHandle = (char **)bfd_openw(tempFilePath,tempDirPath);\n          }\n          if (bfdErrorHandle == (char **)0x0) goto LAB_00104e80;\n          checkFormatMatchesResult = FUNC_00114e50(currentArchiveFile,bfdErrorHandle,debugLink);\n          if (checkFormatMatchesResult == '\\0') {\n            formatError1 = bfd_get_arch(currentArchiveFile);\n            if (formatError1 == 0) goto LAB_00104d75;\n            checkFormatMatchesResult = bfd_close_all_done(bfdErrorHandle);\n            if (checkFormatMatchesResult == '\\0') {\n              FUN_001126c0(tempFilePath,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          checkFormatMatchesResult = bfd_close(bfdErrorHandle);\n          if (checkFormatMatchesResult == '\\0') {\n            FUN_001126c0(tempFilePath,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (formatError2 == 0)) {\n            FUN_0011a350(tempFilePath,&fileStatus);\n          }\n          fileHandle = bfd_openr(tempFilePath,tempDirPath);\n          tempDataDir[2] = fileHandle;\n          *nextFileHandle = fileHandle;\n          nextFileHandle = (long *)(fileHandle + 0xf0);\n          bfdErrorHandle = (char **)bfd_openr_next_archived_file(bfdHandle);\n          bfd_close(currentArchiveFile);\n          currentArchiveFile = bfdErrorHandle;\n        }\n      }\n      *nextFileHandle = 0;\n      buffer = (void *)xstrdup(*outputHandle);\n      if (DAT_00127a20 == 0) {\n        bfdCloseFunc = bfd_close;\n      }\n      else {\n        bfdCloseFunc = bfd_close_all_done;\n      }\n      checkFormatResult = (*bfdCloseFunc)(outputHandle);\n      if (checkFormatResult == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\n      buffer = (void *)xstrdup(*bfdHandle);\n      checkFormatResult = bfd_close(bfdHandle);\n      if (checkFormatResult == '\\0') {\n        DAT_00127a20 = 1;\n        FUN_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\nLAB_00114b4b:\n      while (tempDataDir != (undefined8 *)0x0) {\n        if (tempDataDir[2] == 0) {\n          rmdir((char *)tempDataDir[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)tempDataDir[1]);\n        }\n        free((void *)tempDataDir[1]);\n        bfdHandle = (undefined8 *)*tempDataDir;\n        free(tempDataDir);\n        tempDataDir = bfdHandle;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    FUN_001126c0(outputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  checkFormatResult = bfd_check_format_matches(bfdHandle,1,local_c8);\n  if (checkFormatResult == '\\0') {\n    formatError2 = bfd_get_error();\n    checkFormatResult = bfd_check_format_matches(bfdHandle,3,&fileStatus);\n    if (checkFormatResult == '\\0') {\n      formatError1 = bfd_get_error();\n      if (formatError2 != formatError1) {\n        bfd_set_error(formatError2);\n      }\n      FUN_001126c0(inputFilePath,0,0,0);\n      if (formatError2 == 0xd) {\n        FUN_0011256b(local_c8[0]);\n      }\n      if (formatError1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      FUN_0011256b(fileStatus.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (formatError2 == 0xd) {\n      free(local_c8[0]);\n    }\n  }\n  if (tempDirPath == 0) {\n    tempDirPath = *(long *)bfdHandle[1];\n  }\n  if (fileDescriptor < 0) {\n    fileHandle = bfd_openw(outputFilePath,tempDirPath);\n  }\n  else {\n    fileHandle = bfd_fdopenw(outputFilePath,tempDirPath,fileDescriptor);\n  }\n  if (fileHandle == 0) goto LAB_00105231;\n  FUN_00114d50(fileHandle,bfdHandle,DAT_001264b4);\n  checkFormatResult = FUNC_00114e50(bfdHandle,fileHandle,debugLink);\n  if (checkFormatResult == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    checkFormatResult = bfd_close(fileHandle);\n    goto LAB_001147d5;\n  }\n  checkFormatResult = bfd_close_all_done(fileHandle);\nLAB_001147d5:\n  if (checkFormatResult != '\\x01') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  checkFormatResult = bfd_close(bfdHandle);\n  if (checkFormatResult == '\\0') {\n    DAT_00127a20 = 1;\n    FUN_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "close",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "FUN_00114e50",
                "bfd_check_format_matches",
                "bfd_check_format",
                "bfd_set_format",
                "free",
                "FUN_00114d50",
                "bfd_close",
                "bfd_close_all_done",
                "bfd_get_error",
                "bfd_fdopenw",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_set_error",
                "bfd_openr",
                "bfd_openw",
                "__errno_location",
                "FUN_00113f50",
                "strerror",
                "bfd_stat",
                "FUN_0011a0e0",
                "FUN_0011256b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_archives_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_input_0010b800",
                "param_1": "inputPointer",
                "param_2": "size",
                "param_3": "isConditionMet",
                "plVar1": "pointerArray",
                "uVar2": "returnValue",
                "sVar3": "length",
                "lVar4": "tempValue",
                "lVar5": "bitwiseValue",
                "local_8c": "formattedString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processInput_0010b800(long inputPointer,int size,char isConditionMet)\n\n{\n  long *pointerArray;\n  undefined8 returnValue;\n  size_t length;\n  long tempValue;\n  long bitwiseValue;\n  undefined2 formattedString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    tempValue = inputPointer + 0xb8;\n    if (isConditionMet != '\\0') {\n      tempValue = inputPointer + 0x78;\n    }\n    pointerArray = (long *)(tempValue + (ulong)(size - 1U) * 8);\n    tempValue = *pointerArray;\n    if (tempValue != 0) {\n      returnValue = FUN_00109cf4(inputPointer,tempValue,size);\n      return returnValue;\n    }\n    tempValue = *(long *)(inputPointer + 0x68);\n    *(long *)(inputPointer + 0x68) = tempValue + 1;\n    *pointerArray = tempValue;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",tempValue,tempValue);\n    if (isConditionMet == '\\0') {\n      bitwiseValue = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + length),\"%ld;%ld;\",-bitwiseValue,bitwiseValue + -1);\n    }\n    else {\n      length = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + length) = 0x3b30;\n      *(undefined *)((long)&formattedString + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = FUN_00109b52(inputPointer,&formattedString,tempValue,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_input_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "inputPtr",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "outputPtr",
                "param_5": "outputSizePtr",
                "uVar1": "size",
                "uVar2": "tempSize",
                "cVar3": "status",
                "pcVar4": "tempStr",
                "sVar5": "tempStrSize",
                "__s": "newStr",
                "lVar6": "value",
                "__ptr": "tempPtr",
                "uVar7": "returnValue",
                "uVar8": "success",
                "lVar9": "tempNum",
                "uVar10": "tempOutputSize",
                "puVar11": "tempPtr2",
                "bVar12": "tempBool"
            },
            "code": "\nundefined8 processData_00109ed3(long inputPtr,uint flag,undefined4 param,long *outputPtr,ulong *outputSizePtr)\n\n{\n  ulong size;\n  ulong tempSize;\n  char status;\n  char *tempStr;\n  size_t tempStrSize;\n  char *newStr;\n  long value;\n  void *tempPtr;\n  undefined8 returnValue;\n  undefined success;\n  long tempNum;\n  ulong tempOutputSize;\n  undefined *tempPtr2;\n  byte tempBool;\n  \n  tempBool = 0;\n  value = *(long *)(inputPtr + 0x60);\n  if (value != 0) {\n    size = *(ulong *)(value + 0x10);\n    if (((long)size < 1) || (outputPtr == (long *)0x0)) {\n      success = *(undefined *)(value + 0x1c);\n      tempStr = (char *)FUN_00109b2f(inputPtr);\n      tempStrSize = strlen(tempStr);\n      newStr = (char *)xmalloc(tempStrSize + 2);\n      sprintf(newStr,\"%c%s\",(ulong)flag,tempStr);\n      free(tempStr);\n      value = 0;\n    }\n    else {\n      tempOutputSize = *outputSizePtr;\n      if (tempOutputSize <= size) {\n        if (tempOutputSize == 0) {\n          tempOutputSize = 10;\n        }\n        for (; tempOutputSize <= size; tempOutputSize = tempOutputSize * 2) {\n        }\n        value = xrealloc(*outputPtr,tempOutputSize * 8);\n        tempSize = *outputSizePtr;\n        *outputPtr = value;\n        tempPtr2 = (undefined *)(value + tempSize * 8);\n        for (tempNum = (tempOutputSize - tempSize) * 8; tempNum != 0; tempNum = tempNum + -1) {\n          *tempPtr2 = 0;\n          tempPtr2 = tempPtr2 + (ulong)tempBool * -2 + 1;\n        }\n        *outputSizePtr = tempOutputSize;\n      }\n      value = *(long *)(*outputPtr + size * 8);\n      if ((value != 0) && (*(char *)(*(long *)(inputPtr + 0x60) + 0x1c) == '\\0')) {\n        tempPtr = (void *)FUN_00109b2f(inputPtr);\n        free(tempPtr);\n        returnValue = FUN_00109cf4(inputPtr,value,param);\n        return returnValue;\n      }\n      value = *(long *)(inputPtr + 0x68);\n      *(long *)(inputPtr + 0x68) = value + 1;\n      tempStr = (char *)FUN_00109b2f(inputPtr);\n      tempStrSize = strlen(tempStr);\n      newStr = (char *)xmalloc(tempStrSize + 0x14);\n      sprintf(newStr,\"%ld=%c%s\",value,(ulong)flag,tempStr);\n      free(tempStr);\n      success = 1;\n      *(long *)(*outputPtr + size * 8) = value;\n    }\n    status = FUN_00109b52(inputPtr,newStr,value,success,param);\n    if (status != '\\0') {\n      free(newStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "xrealloc",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0bd",
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00113c43",
                "FUN_0010d882",
                "FUN_00108c86",
                "FUN_0010e842",
                "FUN_00114190",
                "FUN_0010aa53",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104ad6",
                "FUN_0010bbd3",
                "FUN_0010e918",
                "FUN_00114c80",
                "FUN_00116852",
                "FUN_0010da0b",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00113d6e",
                "FUN_00115530",
                "FUN_00113ce0",
                "FUN_0010ab4d",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_00109a0b",
                "FUN_00112894",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_00113bfa",
                "FUN_00109b52",
                "FUN_0010c218",
                "FUN_0010c7a0",
                "FUN_0010bd62",
                "FUN_00113b98",
                "FUN_0011173a",
                "FUN_00113e23",
                "FUN_00107880",
                "FUN_0010a69a",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_00112925",
                "FUN_0010ae0e",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010bc80",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00116030",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_00114cf0",
                "FUN_0010ebb0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00112904",
                "FUN_0010eafe",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00113da9",
                "FUN_00108f08",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer1",
                "puVar2": "pointer2",
                "puVar3": "pointer3",
                "lVar4": "loopCounter",
                "puVar5": "pointer4",
                "pcVar6": "stringPtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *pointer1;\n  undefined4 *pointer2;\n  undefined4 *pointer3;\n  long loopCounter;\n  undefined4 *pointer4;\n  char *stringPtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  stringPtr = \"\";\n  if (inputString != (char *)0x0) {\n    stringPtr = inputString;\n  }\n  pointer2 = (undefined4 *)xmalloc(0x18);\n  pointer4 = pointer2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *pointer4 = 0;\n    pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(pointer2 + 2) = stringPtr;\n  pointer3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)pointer2;\n  pointer4 = pointer3;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *pointer4 = 0;\n    pointer4 = pointer4 + (ulong)byteVar * -2 + 1;\n  }\n  pointer1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(pointer3 + 2) = pointer2;\n  if (pointer1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)pointer3;\n  }\n  else {\n    *pointer1 = pointer3;\n  }\n  debugInfo[1] = (long)pointer3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_001125fa",
                "FUN_00119ed0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "get_relevant_data_00115d00",
                "param_1": "input_value",
                "param_2": "binary_data",
                "uVar1": "data_check",
                "lVar2": "result"
            },
            "code": "\nlong get_relevant_data_00115d00(long input_value,long binary_data)\n\n{\n  uint data_check;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(binary_data + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(binary_data + 0x110) + 0xd40)) {\n        data_check = *(uint *)(input_value + 0x2c);\n        if (data_check == 0) {\n          result = 0;\n        }\n        else if ((ulong)data_check <\n                 *(ulong *)(*(long *)(binary_data + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binary_data + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(data_check - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "get_relevant_data_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_data_00113c43",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "param_6": "input_param6",
                "lVar1": "data_pointer",
                "plVar2": "allocated_data",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_data_00113c43(long input_param1,long input_param2,long input_param3,long input_param4,undefined input_param5,\n            undefined8 input_param6)\n\n{\n  long data_pointer;\n  long *allocated_data;\n  undefined return_value [16];\n  \n  if ((input_param1 != 0) && (input_param2 != 0)) {\n    data_pointer = FUN_00112904(0x10,0);\n    if (data_pointer != 0) {\n      allocated_data = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_data + 0x21) = 0;\n      *allocated_data = input_param1;\n      *(undefined4 *)((long)allocated_data + 0x24) = 0;\n      allocated_data[1] = input_param2;\n      allocated_data[2] = input_param3;\n      allocated_data[3] = input_param4;\n      *(undefined *)(allocated_data + 4) = input_param5;\n      *(long **)(data_pointer + 0x10) = allocated_data;\n      goto LAB_00113caa;\n    }\n  }\n  data_pointer = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_param6;\n  return_value._0_8_ = data_pointer;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_param_00112a33",
                "param_1": "p1",
                "param_2": "p2",
                "param_3": "p3",
                "param_4": "p4",
                "param_5": "p5",
                "param_6": "p6",
                "param_7": "p7",
                "uVar1": "result",
                "lVar2": "value",
                "plVar3": "ptrValue"
            },
            "code": "\nbool processParam_00112a33(undefined8 p1,long p2,undefined8 p3,byte p4,undefined8 p5\n                 ,undefined8 p6,uint p7)\n\n{\n  undefined result;\n  long value;\n  long *ptrValue;\n  \n  if (p4 < 0x12) {\n    if (p4 != 0) {\n      switch(p4) {\n      case 1:\n        result = FUN_0010c05d(p5,*(undefined8 *)(p2 + 8),p6,4,\n                             *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(p5,*(undefined8 *)(p2 + 8),p6,(p7 & 0xff) + 2,\n                             *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(p5,*(undefined8 *)(p2 + 8),p6,5,\n                             *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(p5,*(undefined8 *)(p2 + 8),p6,1,\n                             *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        value = FUN_0010c6be(p5,*(undefined8 *)(p2 + 8));\n        if (value == 0) {\n          return false;\n        }\n        ptrValue = (long *)FUN_0010da0b(p1,p3);\n        *ptrValue = value;\n        break;\n      case 0xd:\n        value = FUN_0010c218(p5,*(undefined8 *)(p2 + 8));\n        return value != 0;\n      case 0x11:\n        result = FUN_0010bd62(p5,*(undefined8 *)(p2 + 8),p6,2,\n                             *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (p4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(p5,*(undefined8 *)(p2 + 8),p6,1,\n                         *(long *)(p2 + 0x10) + *(long *)(*(long *)(p2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010da0b",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bd62",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_param_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "param_1": "result",
                "param_2": "data",
                "param_3": "typeInfo",
                "uVar1": "dataType",
                "pcVar2": "typeString",
                "uVar3": "dataTypeValue",
                "lVar4": "resultValue",
                "plVar5": "resultPointer",
                "uVar6": "typeInfoValue"
            },
            "code": "\n\n\nlong getDataType_0010c2d2(undefined8 result,long data,int *typeInfo)\n\n{\n  uint dataType;\n  char *typeString;\n  undefined8 dataTypeValue;\n  long resultValue;\n  long *resultPointer;\n  uint typeInfoValue;\n  \n  if ((*typeInfo == 0) && (dataType = typeInfo[1], (int)dataType < 0)) {\n    typeInfoValue = ~dataType;\n    if (typeInfoValue < 0x22) {\n      resultValue = *(long *)(data + 0x90 + (ulong)typeInfoValue * 8);\n      if (resultValue == 0) {\n        switch(typeInfoValue) {\n        case 1:\n          dataTypeValue = FUN_00113dfe(1,0);\n          typeString = \"char\";\n          break;\n        case 2:\n          dataTypeValue = FUN_00113dfe(2,0);\n          typeString = \"short\";\n          break;\n        case 3:\n          dataTypeValue = FUN_00113dfe(4,0);\n          typeString = \"long\";\n          break;\n        case 4:\n          dataTypeValue = FUN_00113dfe(1,1);\n          typeString = \"unsigned char\";\n          break;\n        case 5:\n          dataTypeValue = FUN_00113dfe(1,0);\n          typeString = \"signed char\";\n          break;\n        case 6:\n          dataTypeValue = FUN_00113dfe(2,1);\n          typeString = \"unsigned short\";\n          break;\n        case 7:\n          dataTypeValue = FUN_00113dfe(4,1);\n          typeString = \"unsigned int\";\n          break;\n        case 8:\n          dataTypeValue = FUN_00113dfe(4,1);\n          typeString = \"unsigned\";\n          break;\n        case 9:\n          dataTypeValue = FUN_00113dfe(4,1);\n          typeString = \"unsigned long\";\n          break;\n        case 10:\n          dataTypeValue = FUN_00113e17();\n          typeString = \"void\";\n          break;\n        case 0xb:\n          dataTypeValue = FUNC_00113df2(4);\n          typeString = \"float\";\n          break;\n        case 0xc:\n          dataTypeValue = FUNC_00113df2(8);\n          typeString = \"double\";\n          break;\n        case 0xd:\n          dataTypeValue = FUNC_00113df2(8);\n          typeString = \"long double\";\n          break;\n        case 0xe:\n          dataTypeValue = FUN_00113dfe(4,0);\n          typeString = \"integer\";\n          break;\n        case 0xf:\n          dataTypeValue = FUN_00112904(6,4);\n          typeString = \"boolean\";\n          break;\n        case 0x10:\n          dataTypeValue = FUNC_00113df2(4);\n          typeString = \"short real\";\n          break;\n        case 0x11:\n          dataTypeValue = FUNC_00113df2(8);\n          typeString = \"real\";\n          break;\n        case 0x12:\n          typeString = \"stringptr\";\n          dataTypeValue = 0;\n          break;\n        case 0x13:\n          dataTypeValue = FUN_00113dfe(1,1);\n          typeString = \"character\";\n          break;\n        case 0x14:\n          dataTypeValue = FUN_00112904(6,1);\n          typeString = \"logical*1\";\n          break;\n        case 0x15:\n          dataTypeValue = FUN_00112904(6,2);\n          typeString = \"logical*2\";\n          break;\n        case 0x16:\n          dataTypeValue = FUN_00112904(6,4);\n          typeString = \"logical*4\";\n          break;\n        case 0x17:\n          dataTypeValue = FUN_00112904(6,4);\n          typeString = \"logical\";\n          break;\n        case 0x18:\n          dataTypeValue = FUN_00112904(5,8);\n          typeString = \"complex\";\n          break;\n        case 0x19:\n          dataTypeValue = FUN_00112904(5,0x10);\n          typeString = \"double complex\";\n          break;\n        case 0x1a:\n          dataTypeValue = FUN_00113dfe(1,0);\n          typeString = \"integer*1\";\n          break;\n        case 0x1b:\n          dataTypeValue = FUN_00113dfe(2,0);\n          typeString = \"integer*2\";\n          break;\n        case 0x1c:\n          dataTypeValue = FUN_00113dfe(4,0);\n          typeString = \"integer*4\";\n          break;\n        case 0x1d:\n          dataTypeValue = FUN_00113dfe(2,0);\n          typeString = \"wchar\";\n          break;\n        case 0x1e:\n          dataTypeValue = FUN_00113dfe(8,0);\n          typeString = \"long long\";\n          break;\n        case 0x1f:\n          dataTypeValue = FUN_00113dfe(8,1);\n          typeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          dataTypeValue = FUN_00112904(6,8);\n          typeString = \"logical*8\";\n          break;\n        case 0x21:\n          dataTypeValue = FUN_00113dfe(8,0);\n          typeString = \"integer*8\";\n          break;\n        default:\n          dataTypeValue = FUN_00113dfe(4,0);\n          typeString = \"int\";\n        }\n        resultValue = FUN_0010c218(result,typeString,dataTypeValue);\n        *(long *)(data + 0x90 + (ulong)typeInfoValue * 8) = resultValue;\n        return resultValue;\n      }\n      return resultValue;\n    }\n    typeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeString,(ulong)dataType);\n  }\n  else {\n    resultPointer = (long *)FUN_00109022(data);\n    if (resultPointer != (long *)0x0) {\n      if (*resultPointer == 0) {\n        resultValue = FUN_00113e23(resultPointer,0);\n        return resultValue;\n      }\n      return *resultPointer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00112904",
                "fprintf",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00109022",
                "FUN_00113df2",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_data_0010e07c",
                "param_1": "param1",
                "param_2": "entryPoint",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "totalSections",
                "lVar2": "sectionOffset",
                "lVar3": "currentSection",
                "cVar4": "symbolResult",
                "uVar5": "bfdError",
                "__ptr": "dynamicMemory",
                "uVar6": "returnValue",
                "uVar7": "bfdErrorMessage",
                "puVar8": "allocatedMemory",
                "pcVar9": "errorMessageFormat",
                "puVar10": "auxiliaryData",
                "uVar11": "auxiliaryValue",
                "lVar12": "currentEntry",
                "iVar13": "entrySize",
                "iVar14": "initialCount",
                "local_a8": "tempValue1",
                "uStack_a4": "tempValue2",
                "uStack_a0": "tempValue3",
                "uStack_9c": "tempValue4",
                "local_88": "symbolName",
                "local_6a": "tempValue5",
                "local_68": "symbolType",
                "local_67": "auxiliaryType",
                "local_60": "auxiliaryDataBuffer",
                "local_56": "symbolSize"
            },
            "code": "\nundefined8\nprocessBinaryData_0010e07c(undefined8 param1,long *entryPoint,undefined8 param3,int param4,long param5,\n            undefined8 param6)\n\n{\n  long totalSections;\n  long sectionOffset;\n  long currentSection;\n  char symbolResult;\n  undefined4 bfdError;\n  void *dynamicMemory;\n  undefined8 returnValue;\n  undefined8 bfdErrorMessage;\n  undefined4 *allocatedMemory;\n  char *errorMessageFormat;\n  undefined *auxiliaryData;\n  uint auxiliaryValue;\n  long currentEntry;\n  int entrySize;\n  int initialCount;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 tempValue3;\n  undefined4 tempValue4;\n  undefined symbolName [30];\n  undefined2 tempValue5;\n  byte symbolType;\n  byte auxiliaryType;\n  undefined auxiliaryDataBuffer [10];\n  ushort symbolSize;\n  \n  initialCount = 10;\n  currentEntry = 0;\n  totalSections = *(long *)(param5 + 0x18);\n  dynamicMemory = (void *)xmalloc(0x50);\n  while ((entryPoint[3] < totalSections && (entryPoint[2] < entryPoint[1]))) {\n    sectionOffset = *(long *)(*entryPoint + entryPoint[2] * 8);\n    symbolResult = bfd_coff_get_syment(param1,sectionOffset,symbolName);\n    if (symbolResult == '\\0') {\n      bfdError = bfd_get_error();\n      returnValue = bfd_errmsg(bfdError);\n      errorMessageFormat = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      bfdErrorMessage = dcgettext(0,errorMessageFormat,5);\n      FUN_00119ed0(bfdErrorMessage,returnValue);\n      free(dynamicMemory);\n      return 0;\n    }\n    currentSection = entryPoint[3];\n    auxiliaryData = (undefined *)0x0;\n    entryPoint[2] = entryPoint[2] + 1;\n    entryPoint[3] = currentSection + 1 + (ulong)auxiliaryType;\n    if (auxiliaryType != 0) {\n      auxiliaryData = auxiliaryDataBuffer;\n      symbolResult = bfd_coff_get_auxent(param1,sectionOffset,0,auxiliaryData);\n      if (symbolResult == '\\0') {\n        bfdError = bfd_get_error();\n        returnValue = bfd_errmsg(bfdError);\n        errorMessageFormat = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolType == 0x12) {\n      auxiliaryValue = (uint)symbolSize;\n      entrySize = (int)*(undefined8 *)(sectionOffset + 0x10) +\n               (int)*(undefined8 *)(*(long *)(sectionOffset + 0x20) + 0x30);\n    }\n    else {\n      if (symbolType < 0x13) {\n        if ((symbolType == 8) || (symbolType == 0xb)) {\n          auxiliaryValue = 0;\n          entrySize = ((int)*(undefined8 *)(sectionOffset + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(sectionOffset + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolType == 0x66) break;\n      auxiliaryValue = 0;\n      entrySize = 0;\n    }\nLAB_0010e214:\n    bfdErrorMessage = FUN_0010dac0(param1,entryPoint,param3,currentSection,tempValue5,auxiliaryData,1);\n    returnValue = *(undefined8 *)(sectionOffset + 8);\n    allocatedMemory = (undefined4 *)xmalloc(0x20);\n    tempValue1 = (undefined4)returnValue;\n    tempValue2 = (undefined4)((ulong)returnValue >> 0x20);\n    tempValue3 = (undefined4)bfdErrorMessage;\n    tempValue4 = (undefined4)((ulong)bfdErrorMessage >> 0x20);\n    *(undefined8 *)(allocatedMemory + 5) = 0;\n    allocatedMemory[6] = entrySize;\n    allocatedMemory[7] = auxiliaryValue;\n    allocatedMemory[4] = 0;\n    *allocatedMemory = tempValue1;\n    allocatedMemory[1] = tempValue2;\n    allocatedMemory[2] = tempValue3;\n    allocatedMemory[3] = tempValue4;\n    if (initialCount <= (int)currentEntry + 1) {\n      initialCount = initialCount + 10;\n      dynamicMemory = (void *)xrealloc(dynamicMemory,(long)initialCount << 3,allocatedMemory,0,param6);\n    }\n    *(undefined4 **)((long)dynamicMemory + currentEntry * 8) = allocatedMemory;\n    currentEntry = currentEntry + 1;\n  }\n  *(undefined8 *)((long)dynamicMemory + (long)(int)currentEntry * 8) = 0;\n  returnValue = FUN_00113da9(param4 == 8,*(undefined2 *)(param5 + 10),dynamicMemory);\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "FUN_00113da9",
                "xrealloc",
                "bfd_coff_get_auxent",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3"
            },
            "code": "\nundefined8 initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "fileName",
                "param_2": "map",
                "param_3": "fileData",
                "iVar1": "lineNumber",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "slotPtr",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "currentPtr",
                "pbVar11": "nextPtr",
                "pbVar12": "lineStartPtr"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *fileName,undefined8 map,byte **fileData)\n\n{\n  int lineNumber;\n  int *errorNumberPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **slotPtr;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *currentPtr;\n  byte *nextPtr;\n  byte *lineStartPtr;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(fileName,\"r\");\n    if (file == (FILE *)0x0) {\n      errorNumberPtr = __errno_location();\n      errorString = strerror(*errorNumberPtr);\n      errorMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(errorMessage,fileName,errorString);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineNumber = ferror(file), lineNumber != 0)) {\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,fileName);\n    }\n    lineNumber = 1;\n    fclose(file);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    lineStartPtr = fileBuffer;\n    while (currentPtr = lineStartPtr, currentByte != 0) {\n      for (; currentByte = *currentPtr, nextPtr = currentPtr, currentByte != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPtr = 0;\n            nextChar = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextChar = currentPtr + 2;\n              nextPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        nextPtr = currentPtr + 1;\n        nextChar = currentPtr + 2;\n      }\n      else {\n        nextChar = currentPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartPtr;\n      while ((currentByte == 0x20 || (currentPtr = lineStartPtr, currentByte == 9))) {\n        currentPtr = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        currentByte = *currentPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPtr[6];\n          currentChar = currentPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(errorMessage,fileName,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (lineStartPtr < currentPtr) {\n        slotPtr = (byte **)htab_find_slot(map,lineStartPtr,1);\n        *slotPtr = lineStartPtr;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPtr = nextChar;\n      currentByte = nextPtr[1];\n    }\n    *fileData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "fread",
                "FUN_00113f50",
                "strerror",
                "FUN_00119dd0",
                "fopen",
                "xmalloc",
                "ferror",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_url_0010a94e",
                "param_1": "argument1",
                "param_2": "username",
                "param_3": "password",
                "param_4": "status",
                "cVar1": "flag",
                "lVar2": "ptr",
                "__s": "randomString",
                "sVar3": "lenURL",
                "sVar4": "lenUsername",
                "sVar5": "lenRandomString",
                "sVar6": "lenPassword",
                "pcVar7": "newURL",
                "uVar8": "result",
                "pcVar9": "statusFlag"
            },
            "code": "\nundefined8 generateURL_0010a94e(long argument1,char *username,char *password,int status)\n\n{\n  char flag;\n  long ptr;\n  char *randomString;\n  size_t lenURL;\n  size_t lenUsername;\n  size_t lenRandomString;\n  size_t lenPassword;\n  char *newURL;\n  undefined8 result;\n  char *statusFlag;\n  \n  flag = *(char *)(*(long *)(argument1 + 0x60) + 0x1c);\n  randomString = (char *)FUN_00109b2f();\n  newURL = *(char **)(*(long *)(argument1 + 0x60) + 0x20);\n  if (newURL == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    lenURL = strlen(newURL);\n    lenUsername = strlen(username);\n    lenRandomString = strlen(randomString);\n    lenPassword = strlen(password);\n    newURL = (char *)xmalloc(lenURL + 10 + lenUsername + lenRandomString + lenPassword);\n    if (status == 1) {\n      statusFlag = \"/1\";\n    }\n    else {\n      statusFlag = \"/0\";\n      if ((status != 2) && (statusFlag = \"\", status != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(newURL,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(argument1 + 0x60) + 0x20),username,statusFlag,\n            randomString,password,*(long *)(argument1 + 0x60));\n    free(*(void **)(*(long *)(argument1 + 0x60) + 0x20));\n    ptr = *(long *)(argument1 + 0x60);\n    *(char **)(ptr + 0x20) = newURL;\n    if (flag != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_url_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_data_from_binary_00113b1e",
                "param_1": "binary_address",
                "param_2": "unused_param",
                "param_3": "output_data",
                "param_4": "data_constant",
                "piVar2": "binary_data",
                "uVar3": "extracted_data",
                "auVar1": "result_without_data",
                "auVar4": "result_with_data"
            },
            "code": "\nundefined  [16] extract_data_from_binary_00113b1e(long binary_address,undefined8 unused_param,ulong output_data,undefined8 data_constant)\n\n{\n  undefined result_without_data [16];\n  int *binary_data;\n  undefined8 extracted_data;\n  undefined result_with_data [16];\n  \n  if (binary_address != 0) {\n    binary_data = (int *)FUN_00112b6e(binary_address,0);\n    if ((binary_data == (int *)0x0) || (3 < *binary_data - 7U)) {\n      extracted_data = 0;\n    }\n    else {\n      extracted_data = **(undefined8 **)(binary_data + 4);\n    }\n    result_with_data._8_8_ = data_constant;\n    result_with_data._0_8_ = extracted_data;\n    return result_with_data;\n  }\n  result_without_data._8_8_ = 0;\n  result_without_data._0_8_ = output_data;\n  return result_without_data << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "generate_request_0010a0e9",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "value2",
                "__s": "string1",
                "sVar3": "stringLength",
                "__s_00": "string2"
            },
            "code": "\nundefined4 generateRequest_0010a0e9(long dataPtr,undefined8 param2,undefined8 param3)\n\n{\n  undefined value1;\n  undefined4 value2;\n  char *string1;\n  size_t stringLength;\n  char *string2;\n  \n  value1 = *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  value2 = *(undefined4 *)(*(long *)(dataPtr + 0x60) + 0x18);\n  string1 = (char *)FUN_00109b2f();\n  stringLength = strlen(string1);\n  string2 = (char *)xmalloc(stringLength + 100);\n  sprintf(string2,\"r%s;%ld;%ld;\",string1,param2,param3);\n  free(string1);\n  value2 = FUN_00109b52(dataPtr,string2,0,value1,value2);\n  if ((char)value2 != '\\0') {\n    free(string2);\n  }\n  return value2;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_and_process_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeAndProcessData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_and_process_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_if_string_exists_00115f50",
                "param_1": "inputParam",
                "param_2": "stringArray",
                "param_3": "flag",
                "__s1": "string",
                "uVar1": "comparisonResult",
                "uVar2": "result",
                "extraout_EDX": "extraOutputEDX",
                "plVar3": "listPointer",
                "auVar4": "tempVariable"
            },
            "code": "\nuint checkIfStringExists_00115f50(long inputParam,char **stringArray,char flag)\n\n{\n  char *string;\n  uint comparisonResult;\n  undefined4 result;\n  undefined4 extraOutputEDX;\n  long *listPointer;\n  undefined tempVariable [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  tempVariable = FUN_001159d0(stringArray);\n  if (tempVariable[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      string = *stringArray;\n      listPointer = DAT_001279b8;\n      do {\n        comparisonResult = strcmp(string,(char *)listPointer[1]);\n        tempVariable._4_4_ = 0;\n        tempVariable._0_4_ = comparisonResult;\n        tempVariable._8_4_ = extraOutputEDX;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        listPointer = (long *)*listPointer;\n      } while (listPointer != (long *)0x0);\n    }\n    result = tempVariable._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (tempVariable._8_4_ = result, tempVariable._0_8_ = *(long *)(inputParam + 8),\n         *(int *)(*(long *)(inputParam + 8) + 8) != 5)) ||\n        ((tempVariable._0_8_ = (ulong)stringArray[0x1a], *(int *)(stringArray[0x1a] + 4) != 7 ||\n         (tempVariable = FUN_00113fb0(*stringArray,\".gnu.build.attributes\"), tempVariable[0] == '\\0')))) &&\n       ((*(byte *)((long)stringArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(tempVariable._1_7_,stringArray[8] == (char *)0x0) |\n             CONCAT31(tempVariable._9_3_,stringArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001159d0",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_if_string_exists_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_in_section_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytesInSection_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_in_section_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "lVar1": "tempVar1",
                "cVar2": "flag",
                "__ptr": "stringPointer",
                "uVar3": "dataSizeUInt",
                "uVar4": "dataSizeMinusOne",
                "local_5a": "outputString"
            },
            "code": "\nvoid processData_0010b948(long dataPointer,uint dataSize)\n\n{\n  long tempVar1;\n  char flag;\n  void *stringPointer;\n  ulong dataSizeUInt;\n  uint dataSizeMinusOne;\n  char outputString [50];\n  \n  dataSizeMinusOne = dataSize - 1;\n  dataSizeUInt = (ulong)dataSize;\n  if ((dataSizeMinusOne < 0x10) && (tempVar1 = *(long *)(dataPointer + 0xf8 + (ulong)dataSizeMinusOne * 8), tempVar1 != 0)) {\n    FUN_00109cf4(dataPointer,tempVar1,dataSizeUInt);\n    return;\n  }\n  flag = FUN_0010b800(dataPointer,4,0);\n  if (flag != '\\0') {\n    stringPointer = (void *)FUN_00109b2f(dataPointer);\n    tempVar1 = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = tempVar1 + 1;\n    if (dataSizeMinusOne < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)dataSizeMinusOne * 8) = tempVar1;\n    }\n    sprintf(outputString,\"%ld=r%s;%u;0;\",tempVar1,stringPointer,dataSizeUInt);\n    free(stringPointer);\n    FUN_00109b52(dataPointer,outputString,tempVar1,1,dataSizeUInt);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b2f",
                "free",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010914e",
                "FUN_00108072",
                "FUN_00119f70",
                "FUN_00108fe8",
                "FUN_0010882c",
                "FUN_00115b70",
                "FUN_00114e50",
                "FUN_00114190",
                "FUN_00108fb9",
                "FUN_00108916",
                "FUN_0010543c",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010911f",
                "FUN_001053b5",
                "FUN_00114dc7",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_00104ad6",
                "FUN_00108808",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010da0b",
                "FUN_00112996",
                "FUN_00115530",
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_001083de",
                "FUN_0010b800",
                "FUN_00113f50",
                "FUN_001152b6",
                "FUN_00108179",
                "FUN_0010c218",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_0010808f",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_00104920",
                "FUN_0010e2f0",
                "FUN_00115dc0",
                "FUN_001126c0",
                "FUN_00114e00",
                "FUN_0010554f",
                "FUN_00108d9a",
                "FUN_00107976",
                "FUN_00108a2a",
                "FUN_0010e07c",
                "FUN_00116490",
                "FUN_00119970",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_00108375",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00109a32",
                "FUN_0010c892",
                "FUN_00104ea2",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_0010e6a8",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_0010827b",
                "FUN_001086af",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010ba08",
                "FUN_00114690",
                "FUN_0010bf20",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114e50",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "type_array",
                "param_2": "debug_info",
                "iVar1": "type_count",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "debug_info_stack",
                "local_10": "type_array_ptr"
            },
            "code": "\n\n\nint * find_real_type_00112b6e(int *type_array,long *debug_info)\n\n{\n  int type_count;\n  undefined8 uVar2;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *debug_info_stack;\n  int *type_array_ptr;\n  \n  type_count = *type_array;\n  if ((type_count != 1) && (1 < type_count - 0x16U)) {\n    return type_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((type_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      uVar2 = FUN_001129f4(type_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  debug_info_stack = debug_info;\n  type_array_ptr = type_array;\n  if (type_count - 0x16U < 2) {\n    result = (int *)find_real_type_00112b6e((*(undefined8 **)(type_array + 4))[1],&debug_info_stack);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(type_array + 4);\n  if (type_array == result) {\n    return type_array;\n  }\n  if (result == (int *)0x0) {\n    return type_array;\n  }\n  result = (int *)find_real_type_00112b6e(result,&debug_info_stack);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001129f4",
                "FUN_00112b6e",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "length1",
                "param_4": "param4",
                "param_5": "length2",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "str1",
                "__s_00": "str2",
                "sVar2": "strLength",
                "cVar3": "char1"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data,undefined8 param2,ulong length1,undefined param4,ulong length2,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *str1;\n  char *str2;\n  size_t strLength;\n  char char1;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    str1 = (char *)0x0;\n    char1 = '\\0';\n  }\n  else {\n    char1 = *(char *)(*(long *)(data + 0x60) + 0x1c);\n    str1 = (char *)FUN_00109b2f();\n    length2 = length2 & 0xffffffff;\n    length1 = length1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data,param2,length1,param4,length2);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (str1 == (char *)0x0) {\n        return 0;\n      }\n      strLength = strlen(str1);\n      str2 = (char *)xmalloc(strLength + 3);\n      sprintf(str2,\"~%%%s\",str1);\n      free(str1);\n      if (char1 != '\\0') {\n        *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str2 = (char *)xmalloc(0x14);\n      sprintf(str2,\"~%%%ld\",*(undefined8 *)(*(long *)(data + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data + 0x60) + 0x38) = str2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010a69a",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_value_00113d6e",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "allocatedAddress",
                "puVar2": "allocatedPointer"
            },
            "code": "\nlong allocateAndStoreValue_00113d6e(undefined8 value1,undefined8 value2)\n\n{\n  long allocatedAddress;\n  undefined8 *allocatedPointer;\n  \n  allocatedAddress = FUN_00112904(0xb,0);\n  if (allocatedAddress != 0) {\n    allocatedPointer = (undefined8 *)xmalloc(0x10);\n    *allocatedPointer = value1;\n    allocatedPointer[1] = value2;\n    *(undefined8 **)(allocatedAddress + 0x10) = allocatedPointer;\n  }\n  return allocatedAddress;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_store_value_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010e842",
                "FUN_0010aa53",
                "FUN_0010551d",
                "FUN_0010b6ea",
                "FUN_0010e453",
                "FUN_00108863",
                "FUN_001163d0",
                "FUN_0010a83e",
                "FUN_00104a35",
                "FUN_0010e918",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010afd5",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0010e7c2",
                "FUN_001125fa",
                "FUN_0011256b",
                "FUN_0011173a",
                "FUN_0010b0fa",
                "FUN_00107880",
                "FUN_0010abdd",
                "FUN_0010a0e9",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_0010e07c",
                "FUN_0010a2b9",
                "FUN_001081e9",
                "FUN_0010ae0e",
                "FUN_00109ed3",
                "FUN_0010e9a0",
                "FUN_0010a77a",
                "FUN_00116030",
                "FUN_0010c95e",
                "FUN_00114b84",
                "FUN_00104ea2",
                "FUN_0010b948",
                "FUN_00116110",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010a181",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_0010ee3f",
                "FUN_0010dac0",
                "FUN_001199d0",
                "FUN_00109b2f",
                "FUN_0010eafe",
                "FUN_0010ba08",
                "FUN_0010a377",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "function1",
                "param_2": "function2",
                "param_3": "value"
            },
            "code": "\nvoid executeFunction_00114d50(long function1,long function2,uint value)\n\n{\n  if (*(int *)(*(long *)(function1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((value == 2) && (*(int *)(*(long *)(function2 + 8) + 8) == 2)) {\n    value = (uint)*(byte *)(*(long *)(*(long *)(function2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(function1 + 8) + 0x380) + 0x78))(function1,value != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00107880",
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_binary_file_options_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printBinaryFileOptions_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *localizedString;\n  \n  usageString = DAT_001275e0;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,localizedString,usageString);\n  localizedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,localizedString);\n  FUN_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "exit",
                "FUN_00104a35"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_file_options_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "param_1": "bfdErrorCode1",
                "param_2": "bfdErrorCode2",
                "param_3": "bfdErrorCode3",
                "param_4": "bfdErrorCode4",
                "param_5": "bfdErrorCode5",
                "param_6": "bfdErrorCode6",
                "param_7": "bfdErrorCode7",
                "param_8": "bfdErrorCode8",
                "param_9": "errorMessage",
                "param_10": "errorFlag",
                "param_11": "errorInfo",
                "param_12": "errorDetails",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "inputChar",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "local_100": "bufferSize",
                "local_fc": "printLength",
                "local_f8": "stackPointer",
                "local_f0": "localBuffer",
                "local_e8": "errorBuffer",
                "local_c8": "param13",
                "local_c0": "param14",
                "local_b8": "bfdErrorCode1",
                "local_a8": "bfdErrorCode2",
                "local_98": "bfdErrorCode3",
                "local_88": "bfdErrorCode4",
                "local_78": "bfdErrorCode5",
                "local_68": "bfdErrorCode6",
                "local_58": "bfdErrorCode7",
                "local_48": "bfdErrorCode8"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_001126c0(undefined4 bfdErrorCode1,undefined4 bfdErrorCode2,undefined4 bfdErrorCode3,undefined4 bfdErrorCode4,\n                 undefined4 bfdErrorCode5,undefined4 bfdErrorCode6,undefined4 bfdErrorCode7,undefined4 bfdErrorCode8,\n                 long errorMessage,long errorFlag,long *errorInfo,char *errorDetails,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char inputChar;\n  int bfdError;\n  undefined8 errorMessage;\n  undefined4 bufferSize;\n  undefined4 printLength;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined errorBuffer [32];\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 bfdErrorCode1;\n  undefined4 bfdErrorCode2;\n  undefined4 bfdErrorCode3;\n  undefined4 bfdErrorCode4;\n  undefined4 bfdErrorCode5;\n  undefined4 bfdErrorCode6;\n  undefined4 bfdErrorCode7;\n  undefined4 bfdErrorCode8;\n  \n  if (inputChar != '\\0') {\n    bfdErrorCode1 = bfdErrorCode1;\n    bfdErrorCode2 = bfdErrorCode2;\n    bfdErrorCode3 = bfdErrorCode3;\n    bfdErrorCode4 = bfdErrorCode4;\n    bfdErrorCode5 = bfdErrorCode5;\n    bfdErrorCode6 = bfdErrorCode6;\n    bfdErrorCode7 = bfdErrorCode7;\n    bfdErrorCode8 = bfdErrorCode8;\n  }\n  param13 = param13;\n  param14 = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (errorFlag != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(errorFlag);\n    }\n    if ((errorInfo != (long *)0x0) && (*errorInfo != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (errorDetails != (char *)0x0) {\n    stackPointer = &stack0x00000008;\n    localBuffer = errorBuffer;\n    bufferSize = 0x20;\n    printLength = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorDetails,&bufferSize);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "fputs",
                "fwrite",
                "fflush",
                "FUN_001125fa",
                "vfprintf",
                "fprintf",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_0010551d",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00108466"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_value_pointer_00113b4a",
                "param_1": "value",
                "lVar1": "pointer"
            },
            "code": "\nlong initializeValuePointer_00113b4a(long value)\n\n{\n  long pointer;\n  \n  if (value != 0) {\n    pointer = FUN_00112904(0x15,0);\n    if (pointer == 0) {\n      pointer = 0;\n    }\n    else {\n      *(long *)(pointer + 0x10) = value;\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_value_pointer_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_information_0010edb4",
                "param_1": "fileInfo",
                "param_2": "newFilename",
                "param_3": "fileFlags",
                "param_4": "fileSize",
                "cVar1": "result",
                "iVar2": "filenameComparison",
                "uVar3": "updateResult",
                "in_R10": "extraInfo"
            },
            "code": "\nundefined8 updateFileInformation_0010edb4(long fileInfo,undefined8 newFilename,undefined4 fileFlags,ulong fileSize)\n\n{\n  char result;\n  int filenameComparison;\n  undefined8 updateResult;\n  undefined8 extraInfo;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < fileSize) {\n    *(ulong *)(fileInfo + 0x1f0) = fileSize;\n  }\n  filenameComparison = filename_cmp(newFilename);\n  if (filenameComparison != 0) {\n    result = FUN_0010e2f0(fileInfo,0x84,0,fileSize,newFilename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = newFilename;\n  }\n  updateResult = FUN_0010e2f0(fileInfo,0x44,fileFlags,fileSize - *(long *)(fileInfo + 0x200),0,extraInfo);\n  return updateResult;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_information_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010914e",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_00108fe8",
                "FUN_00119e70",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_0010bc80",
                "FUN_0010871c",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00109022",
                "FUN_00104a35",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00112996",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bf20",
                "FUN_0010c2d2",
                "FUN_0010bd62",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPtr",
                "param_2": "count",
                "cVar1": "resultChar",
                "__ptr": "ptr",
                "__s": "str",
                "sVar2": "strLength",
                "__s_00": "modifiedStr",
                "in_R10": "additionalData",
                "iVar3": "iterationCount",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPtr,int count)\n\n{\n  char resultChar;\n  void *ptr;\n  char *str;\n  size_t strLength;\n  char *modifiedStr;\n  ulong additionalData;\n  int iterationCount;\n  undefined returnValue [16];\n  \n  iterationCount = 0;\n  do {\n    if (count <= iterationCount) {\n      returnValue = FUN_00109ed3(dataPtr,0x66,0,dataPtr + 0x188,dataPtr + 400,additionalData);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(dataPtr + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)FUN_00109b2f(dataPtr);\n      free(ptr);\n    }\n    else {\n      str = (char *)FUN_00109b2f(dataPtr);\n      strLength = strlen(str);\n      modifiedStr = (char *)xmalloc(strLength + 3);\n      sprintf(modifiedStr,\":t%s\",str);\n      free(str);\n      resultChar = FUN_0010e2f0(dataPtr,0x80,0,0,modifiedStr);\n      if (resultChar == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = additionalData;\n        return returnValue << 0x40;\n      }\n      free(modifiedStr);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_data_00104d25",
                "param_7": "inputParameter"
            },
            "code": "\nvoid initializeData_00104d25(void)\n\n{\n  undefined8 inputParameter;\n  \n  DAT_00127a20 = 1;\n  FUN_001126c0(0,inputParameter,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_data_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_debug_info_from_binary_0010551d",
                "puVar1": "pointerUVar1",
                "bVar2": "byteVar2",
                "puVar3": "pointerUVar3",
                "pcVar4": "pointerCVar4",
                "puVar5": "pointerUVar5",
                "uVar6": "ulongVar6",
                "uVar7": "ulongVar7",
                "__s": "sourceString",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "uVar10": "uintVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "uintVar13",
                "iVar14": "intVar14",
                "plVar15": "pointerLVar15",
                "uVar16": "ulongVar16",
                "uVar17": "ulongVar17",
                "sVar18": "sizeVar18",
                "pcVar19": "pointerCVar19",
                "sVar26": "sizeVar26",
                "pcVar28": "pointerCVar28",
                "pcVar33": "pointerCVar33",
                "lVar21": "longVar21",
                "plVar32": "pointerLVar32",
                "puVar29": "pointerUVar29",
                "uVar30": "ulongVar30",
                "iVar31": "intVar31",
                "lVar25": "longVar25",
                "lVar27": "longVar27",
                "__ptr": "pointerVar",
                "__ptr_00": "pointerVar00",
                "uVar20": "ulongVar20",
                "uVar22": "ulongVar22",
                "uVar24": "ulongVar24",
                "unaff_R13": "unaffectedReg13",
                "unaff_R14": "unaffectedReg14",
                "bVar38": "boolVar38"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractDebugInfoFromBinary_0010551d(void)\n\n{\n  uint *pointerUVar1;\n  byte byteVar2;\n  undefined *pointerUVar3;\n  code *pointerCVar4;\n  undefined8 *pointerUVar5;\n  ulong ulongVar6;\n  ulong ulongVar7;\n  char *sourceString;\n  char charVar8;\n  char charVar9;\n  uint uintVar10;\n  int intVar11;\n  uint uintVar12;\n  undefined4 uintVar13;\n  int intVar14;\n  long *pointerLVar15;\n  undefined8 ulongVar16;\n  undefined8 ulongVar17;\n  size_t sizeVar18;\n  char *pointerCVar19;\n  void *pointerVar;\n  void *pointerVar00;\n  ulong ulongVar20;\n  long longVar21;\n  ulong ulongVar22;\n  int *piVar23;\n  ulong ulongVar24;\n  long longVar25;\n  FILE *sourceString_00;\n  size_t sizeVar26;\n  long longVar27;\n  long *unaff_RBX;\n  char *pointerCVar28;\n  undefined8 *pointerUVar29;\n  ulong ulongVar30;\n  int intVar31;\n  long unaff_RBP;\n  long *pointerLVar32;\n  char *pointerCVar33;\n  undefined4 *pointerUVar34;\n  char **ppcVar35;\n  long *unaffectedReg13;\n  void *pvVar36;\n  undefined8 *unaffectedReg14;\n  undefined **ppointerUVar37;\n  bool boolVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointerUVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaffectedReg14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar9 = FUN_00113fb0(), charVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longVar25 = *(long *)(unaff_RBP + 0x40), longVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar9 = bfd_get_full_section_contents();\n    if (charVar9 != '\\0') {\n      longVar27 = FUN_001163d0();\n      unaff_RBX[2] = longVar27;\n      if ((longVar27 == longVar25) || (charVar9 = bfd_set_section_size(), charVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaffectedReg13;\n        *unaff_RBX = unaff_RBP;\n        unaffectedReg13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar25 = *(long *)(unaff_RBP + 8); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerUVar29 != (undefined8 *)0x0; pointerUVar29 = (undefined8 *)*pointerUVar29) {\n    longVar25 = bfd_get_section_by_name();\n    if (longVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(longVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeVar18 = *(size_t *)(longVar25 + 0x40);\n      sourceString_00 = fopen((char *)pointerUVar29[2],\"w\");\n      if (sourceString_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(pointerUVar29[2],0,0);\n      }\n      else {\n        charVar9 = bfd_malloc_and_get_section();\n        if (charVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeVar18 != 0) &&\n                (sizeVar26 = fwrite(in_stack_00000140,1,sizeVar18,sourceString_00), sizeVar26 != sizeVar18)) {\n          piVar23 = __errno_location();\n          pointerCVar33 = strerror(*piVar23);\n          ulongVar17 = pointerUVar29[2];\n          ulongVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulongVar16,ulongVar17,pointerCVar33);\n          free(in_stack_00000140);\n          fclose(sourceString_00);\n          return 0;\n        }\n        fclose(sourceString_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (longVar25 != 0) {\n      ulongVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(ulongVar17);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    longVar25 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulongVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar17,longVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      ulongVar20 = 0;\n      for (ulongVar24 = *(ulong *)(in_stack_00000008 + 0x90); ulongVar24 != 0;\n          ulongVar24 = *(ulong *)(ulongVar24 + 8)) {\n        ulongVar22 = *(ulong *)(ulongVar24 + 0x30);\n        ulongVar30 = ulongVar20;\n        ulongVar6 = ulongVar24;\n        ulongVar7 = ulongVar20;\n        if (ulongVar22 != 0) {\n          while ((ulongVar30 = ulongVar6, ulongVar7 != 0 &&\n                 (ulongVar30 = ulongVar24, ulongVar22 <= *(ulong *)(ulongVar20 + 0x30)))) {\n            ulongVar24 = *(ulong *)(ulongVar24 + 8);\n            if (ulongVar24 == 0) goto LAB_00107db8;\n            ulongVar22 = *(ulong *)(ulongVar24 + 0x30);\n            ulongVar6 = ulongVar20;\n            ulongVar7 = ulongVar22;\n          }\n        }\n        ulongVar20 = ulongVar30;\n      }\nLAB_00107db8:\n      if (ulongVar20 == 0) {\n        ulongVar24 = 0x1000;\n      }\n      else {\n        ulongVar20 = *(long *)(ulongVar20 + 0x40) + *(long *)(ulongVar20 + 0x30);\n        ulongVar24 = 0xffffffffffffffff;\n        if (ulongVar20 < 0xfffffffffffff001) {\n          ulongVar24 = ulongVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = ulongVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = ulongVar24;\n    }\n  }\n  pointerLVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    ulongVar24 = FUN_0010554f();\n    return ulongVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointerUVar37 = &PTR_ssourceStringtab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerUVar34 = puStack0000000000000020;\n    for (longVar25 = 0x18; longVar25 != 0; longVar25 = longVar25 + -1) {\n      *pointerUVar34 = 0;\n      pointerUVar34 = pointerUVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerUVar3 = *ppointerUVar37;\n      longVar25 = bfd_get_section_by_name();\n      longVar27 = bfd_get_section_by_name();\n      if ((longVar25 != 0) && (longVar27 != 0)) {\n        longVar25 = *(long *)(longVar25 + 0x40);\n        pointerVar = (void *)xmalloc(longVar25);\n        charVar9 = bfd_get_section_contents();\n        if (charVar9 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedReg14);\n          free(pcStack0000000000000038);\n          free(pointerVar);\n        }\n        else {\n          ulongVar24 = *(ulong *)(longVar27 + 0x40);\n          pointerVar00 = (void *)xmalloc(ulongVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar13 = bfd_get_error();\n            bfd_errmsg(uintVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedReg14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)pointerVar00 + ulongVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = pointerVar; pvVar36 <= (void *)((long)pointerVar + longVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                ulongVar20 = (**(code **)(unaffectedReg14[1] + 0x40))(pvVar36);\n                byteVar2 = *(byte *)((long)pvVar36 + 4);\n                uintVar13 = (**(code **)(unaffectedReg14[1] + 0x58))((long)pvVar36 + 6);\n                longVar27 = (**(code **)(unaffectedReg14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longVar27;\n                }\n                else {\n                  ulongVar22 = (ulongVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (ulongVar22 < ulongVar24) {\n                    pointerCVar33 = (char *)((long)pointerVar00 + ulongVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar18 = strlen(pointerCVar33);\n                      if (((sizeVar18 == 0) || (pointerCVar28 = pointerCVar33 + (sizeVar18 - 1), *pointerCVar28 != '\\')) ||\n                         ((ulong)((long)pointerVar + longVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pointerCVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar11 = (**(code **)(unaffectedReg14[1] + 0x40))(pvVar36);\n                      ulongVar20 = (ulong)(uint)(intVar11 + (int)lStack0000000000000088);\n                      if (ulongVar24 <= ulongVar20) break;\n                      pointerCVar33 = (char *)concat(pointerCVar33,(long)pointerVar00 + ulongVar20,0);\n                      *pointerCVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pointerCVar33;\n                    }\n                    ulongVar17 = *unaffectedReg14;\n                    pointerCVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointerCVar28,ulongVar17,pointerUVar3,((long)pvVar36 - (long)pointerVar) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVar2,uintVar13,longVar27,pointerCVar33);\n                    charVar9 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar2);\n                    if (charVar9 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(pointerVar);\n                      free(pointerVar00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar17 = *unaffectedReg14;\n                    pointerCVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointerCVar33,ulongVar17,pointerUVar3,((long)pvVar36 - (long)pointerVar) / 0xc,\n                            ulongVar20 & 0xffffffff,(ulong)byteVar2,((long)pvVar36 - (long)pointerVar) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(pointerVar);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointerVar00);\n          free(pointerVar);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointerUVar37 = ppointerUVar37 + 2;\n    } while (ppointerUVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar9 = FUN_0010c892(), charVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaffectedReg14[1] + 8) == 1) {\n      longVar25 = 0;\n      for (pointerLVar15 = pointerLVar32; pointerLVar15 < pointerLVar32 + in_stack_00000010; pointerLVar15 = pointerLVar15 + 1) {\n        (**(code **)(unaffectedReg14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar25 != 0) || (longVar25 = FUN_00112894(), longVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pointerCVar33 = (char *)0x0;\n            pointerCVar28 = in_stack_00000150;\n            while (((*pointerCVar28 != '\\0' && (sizeVar18 = strlen(pointerCVar28), pointerCVar28[sizeVar18 - 1] == '\\')) &&\n                   (pointerLVar15 + 1 < pointerLVar32 + in_stack_00000010))) {\n              pointerCVar19 = (char *)xstrdup(pointerCVar28);\n              sizeVar18 = strlen(pointerCVar19);\n              pointerCVar19[sizeVar18 - 1] = '\\0';\n              pointerCVar28 = (char *)concat(pointerCVar19,*(undefined8 *)(pointerLVar15[1] + 8),0);\n              free(pointerCVar19);\n              free(pointerCVar33);\n              pointerLVar15 = pointerLVar15 + 1;\n              pointerCVar33 = pointerCVar28;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pointerCVar28);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,longVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((longVar25 != 0) && (charVar9 = FUN_0010c892(), charVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaffectedReg14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pointerCVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = pointerLVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointerUVar29 = (undefined8 *)&stack0x00000148;\n      for (longVar25 = 0x22; longVar25 != 0; longVar25 = longVar25 + -1) {\n        *(undefined4 *)pointerUVar29 = 0;\n        pointerUVar29 = (undefined8 *)((long)pointerUVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        longVar25 = pointerLVar32[in_stack_000000d0];\n        charVar8 = bfd_coff_get_syment();\n        longVar27 = in_stack_000000d8;\n        if (charVar8 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pointerCVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar17 = dcgettext(0,pointerCVar33,5);\n          FUN_00119ed0(ulongVar17);\n          goto LAB_00105981;\n        }\n        pointerCVar33 = *(char **)(longVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar8 = bfd_coff_get_auxent(), charVar8 == '\\0')) {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pointerCVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar8 = FUN_0010bbd3(puStack0000000000000020);\n            if (charVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar8 = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaffectedReg14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaffectedReg14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaffectedReg14[1] + 0x238))();\n                pcStack0000000000000038 = pointerCVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar11 = strcmp(pointerCVar33,\".bb\");\n              if (intVar11 == 0) {\n                charVar8 = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar11 = strcmp(pointerCVar33,\".eb\");\n              if (intVar11 == 0) {\n                charVar8 = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar11 = strcmp(pointerCVar33,\".bf\");\n              if (intVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longVar27 = FUN_0010dac0();\n                  if ((longVar27 == 0) ||\n                     (charVar9 = FUN_0010bc80(puStack0000000000000020), charVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar11 = in_stack_00000118 - 1;\n                    }\n                    longVar25 = *(long *)(*(long *)(longVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar31 = _uStack0000000000000048[4];\n                      if (intVar31 == 0) break;\n                      charVar8 = FUN_0010bf86(puStack0000000000000020,intVar11 + intVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + longVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointerCVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar11 = strcmp(pointerCVar33,\".ef\");\n                if (intVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar9 != '\\0') {\n                  charVar9 = FUN_0010be1a(puStack0000000000000020);\n                  if (charVar9 == '\\0') goto LAB_00105981;\n                  charVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointerCVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar17 = dcgettext(0,pointerCVar33,5);\n              FUN_00119ed0(ulongVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar21 = FUN_0010dac0();\n          if (longVar21 == 0) goto LAB_00105981;\n          charVar8 = FUN_00112a33(&stack0x00000140,longVar25,longVar27);\n        }\njoined_r0x00107247:\n        if (charVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        pointerLVar32 = DAT_001278b0 + in_stack_00000010;\n        pointerLVar15 = DAT_001278b0;\n        do {\n          uintVar10 = *(uint *)(*pointerLVar15 + 0x18);\n          if ((uintVar10 & 0x1000000) != 0) {\n            *(uint *)(*pointerLVar15 + 0x18) = uintVar10 & 0xfeffffff;\n          }\n          pointerLVar15 = pointerLVar15 + 1;\n        } while (pointerLVar32 != pointerLVar15);\n      }\n    }\n    else {\n      for (longVar25 = *(long *)(in_stack_00000008 + 0x90); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)\n          ) {\n        if (*(long *)(longVar25 + 0xe8) != 0) {\n          pointerUVar1 = (uint *)(*(long *)(longVar25 + 0xe8) + 0x18);\n          *pointerUVar1 = *pointerUVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar11 = bfd_get_error();\n      if (intVar11 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    longVar25 = xmalloc();\n    pointerLVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaffectedReg14 + 0x44) & 0x42;\n    DAT_001278a8 = longVar25;\n    if (in_stack_00000010 == 0) {\n      ulongVar24 = 0;\n    }\n    else {\n      ulongVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar11 = DAT_001279a0;\n        pointerLVar15 = (long *)pointerLVar32[_in_stack_00000018];\n        pointerCVar4 = (code *)pointerLVar15[4];\n        uintVar10 = *(uint *)(pointerLVar15 + 3);\n        pointerCVar33 = (char *)pointerLVar15[1];\n        pointerCVar28 = pointerCVar33;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          intVar31 = 0;\n          pointerUVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar11 <= intVar31) || (pointerCVar19 = (char *)pointerUVar29[5], pointerCVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointerCVar19 != \"\") break;\nLAB_0010750b:\n            intVar31 = intVar31 + 1;\n          }\n          intVar14 = strcmp(pointerCVar19,pointerCVar33);\n          if (intVar14 != 0) {\n            pointerUVar29 = (undefined8 *)*pointerUVar29;\n            goto LAB_0010750b;\n          }\n          free(pointerCVar19);\n          ulongVar20 = ulongVar24 + 1;\n          pointerUVar29[5] = \"\";\n          ulongVar16 = FUN_0011a2e0(pointerUVar29);\n          ulongVar17 = DAT_001278d0;\n          *(undefined8 *)(longVar25 + ulongVar24 * 8) = ulongVar16;\n          longVar27 = htab_elements(ulongVar17);\n          if ((longVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar9 = *pointerCVar33;\n          if (charVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointerCVar33 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            longVar27 = unaffectedReg14[1];\n            charVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longVar27 = htab_elements(DAT_001278d0);\n        ulongVar20 = ulongVar24;\n        if ((longVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointerCVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointerCVar33 == '_') && (pointerCVar33[1] == '_')) &&\n             (intVar11 = strcmp(pointerCVar33 + (pointerCVar33[2] == '_'),\"__gnu_lto_slim\"), intVar11 == 0)) {\n            ulongVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(ulongVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pointerCVar33;\n        longVar27 = htab_find(DAT_001278d0);\n        if (((longVar27 == 0) || (pointerCVar28 = *(char **)(longVar27 + 8), pointerCVar33 == pointerCVar28)) &&\n           (pointerCVar28 = pointerCVar33, ppcVar35 = DAT_001278d8, (uintVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar11 = strcmp(*ppcVar35,pointerCVar33);\n            if (intVar11 == 0) {\n              pointerCVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        pointerLVar15[1] = (long)pointerCVar28;\n        charVar9 = *pointerCVar28;\n        if (charVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointerCVar33 = DAT_00127908;\n        longVar27 = unaffectedReg14[1];\n        if (*(char *)(longVar27 + 0x1c) == charVar9) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintVar10 & 0x82) == 0 && (pointerCVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerLVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointerCVar28 = pointerCVar28 + 1;\n            pointerLVar15[1] = (long)pointerCVar28;\n            goto joined_r0x00106565;\n          }\n          charVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar9 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pointerCVar28 = pointerCVar28 + 1;\n            pointerLVar15[1] = (long)pointerCVar28;\n            sizeVar18 = strlen(pointerCVar28);\n            longVar27 = sizeVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pointerCVar28 = charVar9;\n          pointerLVar15[1] = (long)pointerCVar28;\n          ulongVar24 = ulongVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulongVar24 = ulongVar20;\n            if (pointerCVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeVar18 = strlen(pointerCVar28);\n            sizeVar26 = strlen(pointerCVar33);\n            pointerCVar33 = (char *)xmalloc(sizeVar26 + sizeVar18 + 1);\n            pointerCVar19 = pointerCVar33;\n          }\n          else {\nLAB_0010668d:\n            pointerCVar33 = DAT_00127908;\n            if ((*(char *)(longVar27 + 0x1c) != '\\0') && (charVar9 != *(char *)(longVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar18 = strlen(pointerCVar28);\n            longVar27 = sizeVar18 + 2;\n            if (pointerCVar33 == (char *)0x0) {\n              pointerCVar19 = (char *)xmalloc(longVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar18 = strlen(pointerCVar33);\n              pointerCVar19 = (char *)xmalloc(sizeVar18 + longVar27);\n            }\n            pointerCVar33 = pointerCVar19 + 1;\n            *pointerCVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          sourceString = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pointerCVar33,DAT_00127908);\n            sizeVar18 = strlen(sourceString);\n            pointerCVar33 = pointerCVar33 + sizeVar18;\n          }\n          strcpy(pointerCVar33,pointerCVar28);\n          pointerLVar15[1] = (long)pointerCVar19;\n          pointerCVar28 = pointerCVar19;\n          ulongVar24 = ulongVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintVar10 & 0x20) == 0) &&\n           (((uintVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerLVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar10 & 0x82) != 0 || ((*(byte *)(pointerLVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar11 = bfd_decode_symclass(pointerLVar15), intVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              longVar27 = htab_find();\n              if (longVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pointerCVar28;\n              htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar10 & 0x82) == 0) && (pointerCVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerLVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar10 & 4) == 0) {\n              if (((*(int *)(unaffectedReg14[1] + 8) != 2) ||\n                  (longVar27 = *(long *)(pointerLVar15[4] + 0xd0), longVar27 == 0)) ||\n                 (*(long *)(longVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charVar9 = bfd_is_local_label(unaffectedReg14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar9 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          longVar27 = htab_find();\n          if (longVar27 != 0) {\nLAB_0010687f:\n            ulongVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(ulongVar17);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pointerCVar28;\n          htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerCVar28;\n            htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longVar27 = htab_find();\n          if (longVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            longVar27 = htab_find();\n            if (longVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerCVar28;\n            htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar9 = FUN_001159d0(pointerLVar15[4]);\n          if (charVar9 == '\\0') {\n            if (((uintVar10 & 0x800002) == 0) && (pointerCVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar10 & 0x82) != 0) {\n                charVar9 = FUN_00115d70(pointerCVar28);\n                if ((charVar9 == '\\0') &&\n                   ((longVar27 = htab_elements(DAT_001279d8), longVar27 == 0 ||\n                    (charVar9 = FUN_00115d70(pointerCVar28), charVar9 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintVar12 = *(uint *)(pointerLVar15 + 3), (uintVar12 & 0x200000) != 0)) ||\n                       (longVar27 = *pointerLVar15, longVar27 == 0)) ||\n                      ((*(int *)(*(long *)(longVar27 + 8) + 8) != 5 || (*(long *)(longVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerLVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar12 = *(uint *)(pointerLVar15 + 3);\n                }\n                *(uint *)(pointerLVar15 + 3) = uintVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar10 & 1) != 0) && (charVar9 = FUN_00115d70(pointerCVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerLVar15 + 3) = *(uint *)(pointerLVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charVar9 = FUN_00115d70(pointerCVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerLVar15 + 3) = *(uint *)(pointerLVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pointerCVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar25 + ulongVar24 * 8) = pointerLVar15;\n            ulongVar24 = ulongVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointerUVar29 = DAT_001279a8;\n      intVar11 = DAT_001279a0;\n      for (longVar27 = 0; longVar27 < intVar11; longVar27 = longVar27 + 1) {\n        pointerCVar33 = (char *)pointerUVar29[5];\n        if (pointerCVar33 == (char *)0x0) {\n          longVar21 = ulongVar24 * 8;\n          ulongVar24 = ulongVar24 + 1;\n          ulongVar17 = FUN_0011a2e0(pointerUVar29,in_stack_00000008);\n          *(undefined8 *)(longVar25 + longVar21) = ulongVar17;\n          intVar11 = DAT_001279a0;\n        }\n        else if (pointerCVar33 != \"\") {\n          ulongVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(ulongVar17,pointerCVar33);\n        }\n        pointerUVar29 = (undefined8 *)*pointerUVar29;\n      }\n    }\n    boolVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(longVar25 + ulongVar24 * 8) = 0;\n    if ((boolVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar11 != 5) && (intVar11 != 2)) {\n        ulongVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,ulongVar16,ulongVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar9 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar9 == '\\0') goto LAB_00105d8c;\n      longVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      longVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((longVar25 == 0) || (longVar27 == 0)) ||\n          (charVar9 = bfd_set_section_size(longVar25,in_stack_00000110), charVar9 == '\\0')) ||\n         (charVar9 = bfd_set_section_size(longVar27,in_stack_00000140), charVar9 == '\\0')) {\n        pointerCVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar17 = dcgettext(0,pointerCVar33,5);\n        FUN_001126c0(0,in_stack_00000008,0,ulongVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar25 + 0x7c) = 2;\n      *(undefined4 *)(longVar27 + 0x7c) = 0;\n      charVar9 = bfd_set_section_contents\n                        (in_stack_00000008,longVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar9 == '\\0') ||\n         (charVar9 = bfd_set_section_contents\n                            (in_stack_00000008,longVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar9 == '\\0')) {\n        pointerCVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = ulongVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longVar25 = htab_elements(DAT_001279f8);\n    if (((longVar25 != 0) ||\n        (((((((longVar25 = htab_elements(DAT_00127a08), longVar25 != 0 ||\n              (longVar25 = htab_elements(DAT_001279e8), longVar25 != 0)) ||\n             (longVar25 = htab_elements(DAT_001279e0), longVar25 != 0)) ||\n            ((longVar25 = htab_elements(DAT_001279d8), longVar25 != 0 ||\n             (longVar25 = htab_elements(DAT_001279d0), longVar25 != 0)))) ||\n           (longVar25 = htab_elements(DAT_001278d0), longVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaffectedReg14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaffectedReg14,FUN_00116110,in_stack_00000008);\n  for (pointerUVar29 = DAT_001279c0; pointerUVar5 = DAT_001279b8, pointerUVar29 != (undefined8 *)0x0;\n      pointerUVar29 = (undefined8 *)*pointerUVar29) {\n    charVar9 = bfd_set_section_contents(in_stack_00000008,pointerUVar29[5],pointerUVar29[4],0,pointerUVar29[3]);\n    if (charVar9 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,pointerUVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointerUVar5 != (undefined8 *)0x0; pointerUVar5 = (undefined8 *)*pointerUVar5) {\n    ulongVar17 = *(undefined8 *)(pointerUVar5[5] + 0x60);\n    charVar9 = bfd_set_section_contents(in_stack_00000008,ulongVar17,pointerUVar5[4],0,pointerUVar5[3]);\n    if (charVar9 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,ulongVar17,0);\n      return 0;\n    }\n  }\n  if (unaffectedReg13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulongVar17 = *unaffectedReg14;\n      ulongVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulongVar16,ulongVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       longVar25 = DAT_00127a10, charVar9 != '\\0')) {\n      uintVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaffectedReg14);\n      ulongVar24 = (ulong)uintVar10;\n      if ((char)uintVar10 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return ulongVar24;\n        }\n        charVar9 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        ulongVar20 = DAT_00127910;\n        if (charVar9 != '\\0') {\n          return ulongVar24;\n        }\n        ulongVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(ulongVar17,ulongVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(ulongVar17);\n          return ulongVar24;\n        }\n        ulongVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(ulongVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return ulongVar24;\n      }\n      ulongVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar17);\n    }\n    else {\n      ulongVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,ulongVar17,longVar25);\n    }\n    return 0;\n  }\n  pointerLVar32 = (long *)0x0;\n  pointerUVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointerUVar29 == (undefined8 *)0x0) {\n      do {\n        pointerLVar32 = (long *)unaffectedReg13[3];\n        free((void *)unaffectedReg13[1]);\n        free(unaffectedReg13);\n        unaffectedReg13 = pointerLVar32;\n      } while (pointerLVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointerUVar29[0x1a] + 4) == 7)) &&\n       (charVar9 = FUN_00113fb0(*pointerUVar29,\".gnu.build.attributes\"), charVar9 != '\\0')) {\n      if (pointerLVar32 == (long *)0x0) {\n        pointerLVar32 = unaffectedReg13;\n      }\n      pointerLVar15 = unaffectedReg13;\n      if (*(undefined8 **)(*pointerLVar32 + 0x60) == pointerUVar29) {\nLAB_0010625f:\n        pointerCVar33 = \"error: failed to merge notes\";\n        if (pointerLVar32[1] != 0) {\n          charVar9 = bfd_set_section_contents(in_stack_00000008,pointerUVar29,pointerLVar32[1],0,pointerLVar32[2]);\n          if (charVar9 == '\\0') {\n            ulongVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,pointerUVar29,ulongVar17);\n            return 0;\n          }\n          pointerLVar32 = (long *)pointerLVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          pointerLVar32 = pointerLVar15;\n          if (*(undefined8 **)(*pointerLVar15 + 0x60) == pointerUVar29) goto LAB_0010625f;\n          pointerLVar32 = (long *)pointerLVar15[3];\n          pointerLVar15 = pointerLVar32;\n        } while (pointerLVar32 != (long *)0x0);\n        pointerCVar33 = \"error: failed to locate merged notes\";\n      }\n      ulongVar17 = dcgettext(0,pointerCVar33,5);\n      FUN_001126c0(0,in_stack_00000008,pointerUVar29,ulongVar17);\n    }\nLAB_001061be:\n    pointerUVar29 = (undefined8 *)pointerUVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_debug_info_from_binary_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00105828",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_table_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid calculateHashTableHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "calculate_hash_table_hash_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_linked_list_0010c1c6",
                "param_1": "param",
                "param_2": "linkedList",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextNodePtr",
                "cVar2": "returnValue",
                "__ptr": "currentNodePtr"
            },
            "code": "\nundefined processLinkedList_0010c1c6(undefined8 param,long linkedList,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextNodePtr;\n  char returnValue;\n  undefined8 *currentNodePtr;\n  \n  currentNodePtr = *(undefined8 **)(linkedList + 0x78);\n  while( true ) {\n    if (currentNodePtr == (undefined8 *)0x0) {\n      *(undefined8 *)(linkedList + 0x78) = 0;\n      return 1;\n    }\n    returnValue = FUN_0010c05d(param,currentNodePtr[1],currentNodePtr[2],*(undefined4 *)(currentNodePtr + 3),currentNodePtr[4],param6,\n                         param5);\n    if (returnValue == '\\0') break;\n    nextNodePtr = (undefined8 *)*currentNodePtr;\n    free(currentNodePtr);\n    currentNodePtr = nextNodePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_linked_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "uVar1": "numElements",
                "lVar2": "tempValue",
                "cVar3": "isValid",
                "unaff_RBX": "parametersPtr",
                "puVar4": "outputPtr",
                "puVar5": "newOutputPtr",
                "unaff_RBP": "basePtr",
                "uVar6": "index",
                "unaff_R13": "dataPtr"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint numElements;\n  long tempValue;\n  char isValid;\n  long parametersPtr;\n  undefined8 *outputPtr;\n  undefined8 *newOutputPtr;\n  long basePtr;\n  ulong index;\n  undefined8 *dataPtr;\n  \n  numElements = *(uint *)(parametersPtr + 0x78);\n  if (DAT_00127a2c == 7) {\n    outputPtr = dataPtr;\n    for (index = 0; index != numElements; index = index + 1) {\n      newOutputPtr = outputPtr;\n      if (((*(long **)dataPtr[index] != (long *)0x0) &&\n          (tempValue = **(long **)dataPtr[index], tempValue != 0)) &&\n         (isValid = FUN_00115d70(*(undefined8 *)(tempValue + 8),DAT_00127a08), isValid != '\\0')) {\n        newOutputPtr = outputPtr + 1;\n        *outputPtr = dataPtr[index];\n      }\n      outputPtr = newOutputPtr;\n    }\n    *outputPtr = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(basePtr + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_data_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofError",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "__stream": "filePtr",
                "uVar4": "localizedErrMsg",
                "uVar5": "allocatedMem",
                "sVar6": "numBytesRead",
                "lVar7": "bytesRead",
                "lVar8": "totalBytes",
                "fclose": "closeFile",
                "fread": "readFromFile",
                "feof": "endOfFileCheck",
                "ferror": "fileErrorCheck",
                "dcgettext": "getLocalizedText",
                "strerror": "getErrorMsg",
                "xmalloc": "allocateMemory",
                "xrealloc": "reallocateMemory"
            },
            "code": "\nvoid readFileAndStoreData_00114d60(long fileInfo)\n\n{\n  int eofError;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 localizedErrMsg;\n  FILE *filePtr;\n  undefined8 allocatedMem;\n  size_t numBytesRead;\n  long bytesRead;\n  long totalBytes;\n  \n  filePtr = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePtr == (FILE *)0x0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    allocatedMem = *(undefined8 *)(fileInfo + 0x10);\n    localizedErrMsg = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(localizedErrMsg,allocatedMem,errMsg);\n  }\n  totalBytes = 0x1000;\n  bytesRead = 0;\n  allocatedMem = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocatedMem;\n  while( true ) {\n    eofError = feof(filePtr);\n    if (eofError != 0) {\n      *(long *)(fileInfo + 0x18) = bytesRead;\n      fclose(filePtr);\n      return;\n    }\n    if (bytesRead == totalBytes) {\n      totalBytes = bytesRead * 2;\n      allocatedMem = xrealloc(*(undefined8 *)(fileInfo + 0x20),totalBytes);\n      *(undefined8 *)(fileInfo + 0x20) = allocatedMem;\n    }\n    numBytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + bytesRead),1,totalBytes - bytesRead,filePtr);\n    eofError = ferror(filePtr);\n    if (eofError != 0) break;\n    bytesRead = bytesRead + numBytesRead;\n  }\n  allocatedMem = *(undefined8 *)(fileInfo + 0x10);\n  localizedErrMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(localizedErrMsg,allocatedMem);\n}\n\n",
            "called": [
                "fopen",
                "FUN_0010543c",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_store_data_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage",
                "unaff_RBP": "stackBaseAddress"
            },
            "code": "\nvoid findAndPrintSection_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long stackBaseAddress;\n  \n  sectionAddress = *(undefined8 *)(stackBaseAddress + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_and_print_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_lines_00104d1c",
                "unaff_EBP": "lineCount",
                "unaff_R13": "errorString",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "returnAddress",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "ppbVar2": "htabSlot",
                "pbVar3": "tempChar",
                "bVar4": "currentCharByte",
                "pbVar5": "nextLine",
                "pbVar6": "nextChar",
                "pbVar7": "nextCharByte",
                "uVar1": "translatedString"
            },
            "code": "\nvoid parseLines_00104d1c(void)\n\n{\n  undefined8 translatedString;\n  byte **htabSlot;\n  byte *tempChar;\n  byte currentCharByte;\n  byte *nextLine;\n  int lineCount;\n  byte *nextChar;\n  undefined8 errorString;\n  byte *nextCharByte;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 formatString;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentCharByte = *currentLine;\n    nextCharByte = currentLine;\n    if (currentCharByte == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        nextCharByte = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentCharByte < '\\v') {\n      if (currentCharByte != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentCharByte != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        nextCharByte = currentLine + 1;\n      }\n    }\n    currentCharByte = *currentChar;\n    while ((currentCharByte == 0x20 || (nextChar = currentChar, currentCharByte == 9))) {\n      nextChar = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentCharByte = *nextChar;\n    }\n    do {\n      if ((currentCharByte == 10) || (currentCharByte == 0xd)) goto LAB_00114676;\n      if (currentCharByte == 0) goto LAB_00114599;\n      currentCharByte = nextChar[1];\n      nextChar = nextChar + 1;\n    } while ((currentCharByte != 0x20) && (currentCharByte != 9));\n    if ((char)currentCharByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentCharByte = nextChar[1];\n      if ((((((currentCharByte == 9) || (currentCharByte == 0x20)) &&\n            ((currentCharByte = nextChar[2], currentCharByte == 9 || (currentCharByte == 0x20)))) &&\n           ((currentCharByte = nextChar[3], currentCharByte == 9 || (currentCharByte == 0x20)))) &&\n          ((currentCharByte = nextChar[4], currentCharByte == 9 || (currentCharByte == 0x20)))) &&\n         ((currentCharByte = nextChar[5], currentCharByte == 9 || (currentCharByte == 0x20)))) {\n        currentCharByte = nextChar[6];\n        tempChar = nextChar + 6;\n        if ((currentCharByte == 9) || (currentCharByte == 0x20)) {\n          do {\n            do {\n              currentCharByte = tempChar[1];\n              tempChar = tempChar + 1;\n            } while (currentCharByte == 0x20);\n          } while (currentCharByte == 9);\n        }\n      }\n      if ((0xd < currentCharByte) || ((-0x2402L >> (currentCharByte & 0x3f) & 1U) != 0)) {\n        translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(translatedString,formatString,lineCount);\n      }\n    }\nLAB_00114599:\n    *nextChar = 0;\n    if (currentChar < nextChar) {\n      htabSlot = (byte **)htab_find_slot();\n      *htabSlot = currentChar;\n    }\n    lineCount = lineCount + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (nextCharByte[1] == 0) {\n      *returnAddress = errorString;\n      return;\n    }\n  } while( true );\n  if (currentCharByte == 0x23) {\n    parseLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "uVar1": "errorMessage",
                "local_20": "messageBuffer"
            },
            "code": "\nvoid checkAndPrintError_00119940(undefined8 inputParam1,undefined8 inputParam2)\n\n{\n  undefined8 errorMessage;\n  char *messageBuffer [2];\n  \n  bfd_scan_vma(inputParam1,messageBuffer,0);\n  if (*messageBuffer[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage,inputParam2,inputParam1);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "paramPointer",
                "param_2": "memoryOffset",
                "param_3": "condition",
                "in_RAX": "functionAddress"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 paramPointer,long memoryOffset,uint condition)\n\n{\n  long functionAddress;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(memoryOffset + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(memoryOffset + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionAddress + 0x380) + 0x78))(paramPointer,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_data_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "input4",
                "param_5": "input5",
                "cVar1": "result",
                "uVar2": "output",
                "puVar3": "ptr",
                "auVar4": "tempArray"
            },
            "code": "\nundefined8\nprocessData_00113a4d(undefined8 input1,undefined8 input2,long data,undefined8 input4,\n            undefined8 input5)\n\n{\n  char result;\n  undefined8 output;\n  undefined8 *ptr;\n  undefined tempArray [16];\n  \n  result = FUN_00112502(input1,input2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = FUN_0010ec73(input2,*(undefined8 *)(data + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processData_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    tempArray = FUN_00112502(input1,input2,*(undefined8 *)(data + 0x20));\n    if (tempArray[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return tempArray._0_8_;\n      }\n      output = FUN_0010ed2c(input2,*(undefined8 *)(data + 0x20),tempArray._8_8_,input5);\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010ec73",
                "FUN_001135a5",
                "FUN_0010ed2c",
                "FUN_00113a4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_and_return_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToFree",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 freeAndReturn_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToFree;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryToFree);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_and_return_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010922b",
                "FUN_0010abdd",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_001135a5",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010a94e",
                "FUN_0010d21c",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_pointer_00113b71",
                "param_1": "inputValue",
                "lVar1": "pointer"
            },
            "code": "\nlong initializePointer_00113b71(long inputValue)\n\n{\n  long pointer;\n  \n  if (inputValue != 0) {\n    pointer = FUN_00112904(0x14,0);\n    if (pointer == 0) {\n      pointer = 0;\n    }\n    else {\n      *(long *)(pointer + 0x10) = inputValue;\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_param_00109dfe",
                "param_1": "param",
                "lVar1": "counter",
                "local_40": "outputString"
            },
            "code": "\nvoid processParam_00109dfe(long param)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    FUN_00109cf4(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  counter = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = counter + 1;\n  *(long *)(param + 0x70) = counter;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(param,outputString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_param_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "param_1": "stringPtr",
                "__s": "string",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonToString_00109bbb(long stringPtr)\n\n{\n  char *string;\n  size_t stringLength;\n  \n  if (*(long *)(stringPtr + 0x60) != 0) {\n    string = *(char **)(*(long *)(stringPtr + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      stringLength = strlen(string);\n      *(undefined2 *)(string + stringLength) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "extract_string_0010ae0e",
                "param_1": "input",
                "lVar1": "structPtr",
                "lVar2": "stringArrayPtr",
                "__ptr": "voidPtr",
                "pcVar3": "stringPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "result",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "index",
                "uVar10": "count"
            },
            "code": "\nundefined8 extractString_0010ae0e(long input)\n\n{\n  long structPtr;\n  long stringArrayPtr;\n  void *voidPtr;\n  char *stringPtr;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 returnValue;\n  long totalLen;\n  uint index;\n  ulong count;\n  \n  returnValue = 0;\n  structPtr = *(long *)(input + 0x60);\n  if (((structPtr != 0) && (*(char **)(structPtr + 8) != (char *)0x0)) &&\n     (result = *(char **)(structPtr + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(structPtr + 8));\n    len2 = strlen(result);\n    stringArrayPtr = *(long *)(structPtr + 0x28);\n    if (stringArrayPtr == 0) {\n      totalLen = len1 + len2 + 10;\n      count = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      count = 0;\n      while( true ) {\n        result = *(char **)(stringArrayPtr + count * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        count = (ulong)((int)count + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(structPtr + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(structPtr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(structPtr + 0x38));\n      totalLen = totalLen + len1;\n    }\n    result = (char *)xmalloc(totalLen);\n    structPtr = *(long *)(input + 0x60);\n    strcpy(result,*(char **)(structPtr + 8));\n    if (*(long *)(structPtr + 0x28) != 0) {\n      index = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",count);\n      while( true ) {\n        structPtr = *(long *)(input + 0x60);\n        count = (ulong)index;\n        voidPtr = *(void **)(structPtr + 0x28);\n        stringPtr = *(char **)((long)voidPtr + count * 8);\n        if (stringPtr == (char *)0x0) break;\n        index = index + 1;\n        strcat(result,stringPtr);\n        free(*(void **)(*(long *)(structPtr + 0x28) + count * 8));\n      }\n      free(voidPtr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    structPtr = *(long *)(input + 0x60);\n    strcat(result,*(char **)(structPtr + 0x20));\n    free(*(void **)(structPtr + 0x20));\n    structPtr = *(long *)(input + 0x60);\n    *(undefined8 *)(structPtr + 0x20) = 0;\n    if (*(char **)(structPtr + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(structPtr + 0x30));\n      free(*(void **)(structPtr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    structPtr = *(long *)(input + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    stringPtr = *(char **)(structPtr + 0x38);\n    if (stringPtr != (char *)0x0) {\n      strcpy(result + len1 + 1,stringPtr);\n      free(*(void **)(structPtr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    structPtr = *(long *)(input + 0x60);\n    *(char **)(structPtr + 8) = result;\n    returnValue = CONCAT71((int7)((ulong)structPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "xmalloc",
                "free",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "execute_operation_001135a5",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "opData",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 executeOperation_001135a5(undefined8 arg1,undefined8 arg2,long opData)\n\n{\n  int index;\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(opData + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(opData + 0x14)) {\n  case 0:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(opData + 0x20),opData);\n    if (result != '\\0') {\n      returnValue = FUN_0010e6a8(arg2,*(undefined8 *)(opData + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(opData + 0x20),opData);\n    if (result != '\\0') {\n      returnValue = FUN_0010e7c2(arg2,*(undefined8 *)(opData + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = FUN_00112c1f(arg1,arg2,*(undefined8 *)(*(long *)(opData + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = FUN_0010e9a0(arg2,*(undefined8 *)(opData + 8),**(undefined4 **)(opData + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(opData + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(opData + 0x20);\n    index = *(int *)(opData + 0x18);\n    returnValue = *(undefined8 *)(opData + 8);\n    result = FUN_00112502(arg1,arg2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = FUN_00112c1f(arg1,arg2,*ptr2,0), result != '\\0')) &&\n       (result = FUN_0010eafe(arg2,returnValue,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = FUN_00112c1f(arg1,arg2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = FUN_0010ebb0(arg2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          returnValue = FUN_00108f05(arg2);\n          return returnValue;\n        }\n        result = FUN_00113a4d(arg1,arg2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    returnValue = FUN_0010e842(arg2,*(undefined8 *)(opData + 8),*(undefined8 *)(opData + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = FUN_0010e8a9(*(undefined8 *)(opData + 0x20),arg2,*(undefined8 *)(opData + 8));\n    return returnValue;\n  case 6:\n    result = FUN_00112c1f(arg1,arg2,**(undefined8 **)(opData + 0x20),0);\n    if (result != '\\0') {\n      returnValue = FUN_0010e918(arg2,*(undefined8 *)(opData + 8),\n                           *(undefined8 *)(*(long *)(opData + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "abort",
                "FUN_0010ebb0",
                "FUN_0010e842",
                "FUN_0010e7c2",
                "FUN_0010eafe",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112c1f",
                "FUN_00113a4d",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "execute_operation_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001152b6",
                "bfd_get_mach",
                "bfd_set_file_flags",
                "FUN_001125fa",
                "printf",
                "bfd_get_arch",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00119970",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ae0e",
                "FUN_00115530",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "parse_demangled_type_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "type",
                "iVar2": "result",
                "pcVar3": "demangledType",
                "plVar4": "ptrList",
                "pcVar5": "errorMessage",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "size",
                "local_40": "buffer"
            },
            "code": "\n\n\nchar * parseDemangledType_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint type;\n  int result;\n  char *demangledType;\n  long *ptrList;\n  char *errorMessage;\n  size_t length;\n  void *ptr;\n  long size;\n  undefined buffer [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    type = *param3;\n    if (0x29 < type) break;\n    if (0x17 < type) {\n      switch(type) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        demangledType = (char *)parseDemangledType_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (demangledType != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            demangledType = (char *)FUN_00113b4a(demangledType);\n            return demangledType;\n          case 0x1b:\n            demangledType = (char *)FUN_00113b71(demangledType);\n            return demangledType;\n          default:\n                    \n            abort();\n          case 0x22:\n            demangledType = (char *)FUN_00113d3a(demangledType);\n            return demangledType;\n          case 0x23:\n            demangledType = (char *)FUN_00113cb9(demangledType);\n            return demangledType;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        demangledType = (char *)cplus_demangle_print(3,param3,0x14,buffer);\n        if (demangledType == (char *)0x0) {\n          errorMessage = \"Couldn\\'t get demangled builtin type\\n\";\n          demangledType = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        result = strcmp(demangledType,\"signed char\");\n        if (result == 0) {\nLAB_0010b406:\n          errorMessage = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"bool\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"char\");\n        if (result == 0) goto LAB_0010b406;\n        result = strcmp(demangledType,\"double\");\n        if ((result == 0) || (result = strcmp(demangledType,\"long double\"), result == 0)) {\n          errorMessage = (char *)FUNC_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"float\");\n        if (result == 0) {\n          errorMessage = (char *)FUNC_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"__float128\");\n        if (result == 0) {\n          errorMessage = (char *)FUNC_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned char\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"int\");\n        if (result == 0) {\nLAB_0010b504:\n          errorMessage = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned int\");\n        if (result == 0) {\nLAB_0010b528:\n          errorMessage = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"long\");\n        if (result == 0) goto LAB_0010b504;\n        result = strcmp(demangledType,\"unsigned long\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(demangledType,\"__int128\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned __int128\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"short\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned short\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"void\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"wchar_t\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(demangledType,\"long long\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned long long\");\n        if (result == 0) {\n          errorMessage = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"...\");\n        if (result == 0) {\n          errorMessage = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          errorMessage = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          errorMessage = (char *)dcgettext(0,errorMessage,5);\n          fprintf(_stderr,errorMessage);\n        }\n        errorMessage = (char *)0x0;\nLAB_0010b6c6:\n        free(demangledType);\n        return errorMessage;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)parseDemangledType_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          size = FUN_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),buffer);\n          if (size != 0) {\n            demangledType = (char *)FUN_00113ce0(ptr,size,buffer[0]);\n            return demangledType;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (type != 1) {\n      if (type == 4) {\n        demangledType = (char *)cplus_demangle_print(3,param3,0x14,buffer);\n        errorMessage = \"Failed to print demangled template\\n\";\n        if (demangledType != (char *)0x0) {\n          length = strlen(demangledType);\n          errorMessage = (char *)FUN_0010afd5(param1,param2,demangledType,length & 0xffffffff,9);\n          free(demangledType);\n          return errorMessage;\n        }\nLAB_0010b3d3:\n        errorMessage = (char *)dcgettext(0,errorMessage,5);\n        fprintf(_stderr,errorMessage);\n        return demangledType;\n      }\n      if (type == 0) {\n        if ((param4 == 0) || (ptrList = (long *)FUN_00113b1e(param4), ptrList == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = parseDemangledType_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  demangledType = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,demangledType,(ulong)type);\nLAB_0010b38c:\n  demangledType = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return demangledType;\nLAB_0010b1a5:\n  if (*ptrList == 0) {\nswitchD_0010b158_caseD_18:\n    demangledType = (char *)FUN_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return demangledType;\n  }\n  demangledType = *(char **)(*ptrList + 8);\n  if (demangledType == (char *)0x0) goto LAB_0010b38c;\n  errorMessage = (char *)FUN_001129f4(demangledType);\n  if (errorMessage != (char *)0x0) {\n    length = strlen(errorMessage);\n    if ((param3[6] == (uint)length) &&\n       (result = strncmp(errorMessage,*(char **)(param3 + 4),(long)(int)param3[6]), result == 0)) {\n      return demangledType;\n    }\n  }\n  ptrList = ptrList + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "fprintf",
                "FUN_00113ce0",
                "abort",
                "strlen",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "FUN_001129f4",
                "strncmp",
                "FUN_00112904",
                "FUN_0010b6ea",
                "free",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "parse_demangled_type_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineCounter",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "result",
                "unaff_R13": "translation",
                "unaff_R14": "prevLine",
                "unaff_R15": "lineStart",
                "uVar1": "msg",
                "ppbVar2": "slot",
                "pbVar3": "linePtr",
                "pbVar5": "prevLine",
                "bVar4": "charValue"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 msg;\n  byte **slot;\n  byte *linePtr;\n  byte currentChar;\n  byte charValue;\n  byte *currentLine;\n  int lineCounter;\n  byte *prevLine;\n  undefined8 translation;\n  byte *prevLine;\n  byte *lineStart;\n  undefined8 filename;\n  undefined8 *result;\n  \n  do {\n    prevLine = lineStart;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = prevLine[1];\n      prevLine = prevLine + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      charValue = prevLine[1];\n      if ((((((charValue == 9) || (charValue == 0x20)) &&\n            ((charValue = prevLine[2], charValue == 9 || (charValue == 0x20)))) &&\n           ((charValue = prevLine[3], charValue == 9 || (charValue == 0x20)))) &&\n          ((charValue = prevLine[4], charValue == 9 || (charValue == 0x20)))) &&\n         ((charValue = prevLine[5], charValue == 9 || (charValue == 0x20)))) {\n        charValue = prevLine[6];\n        linePtr = prevLine + 6;\n        if ((charValue == 9) || (charValue == 0x20)) {\n          do {\n            do {\n              charValue = linePtr[1];\n              linePtr = linePtr + 1;\n            } while (charValue == 0x20);\n          } while (charValue == 9);\n        }\n      }\n      if ((0xd < charValue) || ((-0x2402L >> (charValue & 0x3f) & 1U) != 0)) {\n        msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(msg,filename,lineCounter);\n      }\n    }\nLAB_00114599:\n    *prevLine = 0;\n    if (lineStart < prevLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = lineStart;\n    }\n    lineCounter = lineCounter + 1;\n    prevLine = currentLine;\n    if (prevLine[1] == 0) {\n      *result = translation;\n      return;\n    }\n    for (; charValue = *prevLine, prevLine = prevLine, charValue != 10; prevLine = prevLine + 1) {\n      if ((char)charValue < '\\v') {\n        if (charValue == 0) {\n          linePtr = prevLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (charValue == 0xd) {\n          *prevLine = 0;\n          linePtr = prevLine + 1;\n          if (prevLine[1] == 10) {\n            linePtr = prevLine + 2;\n            prevLine = prevLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (charValue == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *prevLine = 0;\n    if (prevLine[1] == 0xd) {\n      prevLine = prevLine + 1;\n      linePtr = prevLine + 2;\n    }\n    else {\n      linePtr = prevLine + 1;\n    }\nLAB_00114553:\n    currentChar = *currentLine;\n    lineStart = currentLine;\n    while (currentLine = linePtr, currentChar == 0x20) {\nLAB_00104c3f:\n      prevLine = lineStart + 1;\n      lineStart = lineStart + 1;\n      linePtr = currentLine;\n      currentChar = *prevLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_debugging_information_0010554f",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "flag",
                "param_12": "size",
                "param_14": "content",
                "param_17": "sections",
                "param_24": "section_name",
                "param_26": "symbol",
                "param_30": "notes",
                "param_31": "num_notes",
                "lVar14": "section_size",
                "plVar28": "sections_array",
                "uVar29": "size_variable",
                "puVar33": "content_pointer",
                "puVar4": "code_pointer",
                "iVar10": "error_flag",
                "uVar9": "return_value",
                "uVar13": "flags_variable",
                "iVar11": "comparison_result"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improve_debugging_information_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *code_pointer;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 return_value;\n  int error_flag;\n  int comparison_result;\n  uint uVar12;\n  uint flags_variable;\n  long section_size;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *sections_array;\n  ulong size_variable;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *content_pointer;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binary;\n  ulong num_sections;\n  char flag;\n  undefined4 *__ptr_02;\n  ulong size;\n  char *param_13;\n  undefined *content;\n  uint param_15;\n  long *sections;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *section_name;\n  long symbol;\n  long *notes;\n  ulong num_notes;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    size = 0;\n    content = (undefined *)0x0;\n    sections = (long *)0x0;\n    size_variable = size;\n  }\n  else {\n    section_size = (ulong)in_stack_00000068._4_4_ * 8;\n    sections = (long *)xmalloc(section_size);\n    param_40 = sections;\n    bfd_map_over_sections(binary,FUN_0010870e,&stack0x00000140);\n    qsort(sections,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    content = (undefined *)xmalloc(section_size);\n    bVar38 = DAT_00127978 != '\\0';\n    content_pointer = content;\n    for (; section_size != 0; section_size = section_size + -1) {\n      *content_pointer = 0;\n      content_pointer = content_pointer + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      size_variable = 0;\n      size = 0;\n      do {\n        puVar30 = (ulong *)(content + size_variable * 8);\n        sections_array = sections + size_variable;\n        uVar21 = size;\n        do {\n          size = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)size_variable) goto LAB_00107cd1;\n          size_variable = (ulong)((uint)size_variable + 1);\n          uVar12 = bfd_octets_per_byte(binary,*sections_array);\n          flags_variable = bfd_octets_per_byte(binary);\n          section_size = *sections_array;\n          if ((*(uint *)(section_size + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)flags_variable * *(long *)(sections_array[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(section_size + 0x38) + *(long *)(section_size + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,binary,*sections_array);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          sections_array = sections_array + 1;\n          puVar30 = puVar30 + 1;\n        } while (size < uVar21);\n      } while( true );\n    }\n    size = 0;\nLAB_00107cd1:\n    size_variable = size;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(binary);\n      section_size = sections[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(section_size + 0x40) + (ulong)uVar12 * *(long *)(section_size + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,binary,sections[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          size_variable = uVar21 - uVar24;\n          *(ulong *)(content + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = size_variable;\n          if (size_variable <= size) {\n            size_variable = size;\n          }\n        }\n      }\n    }\n  }\n  size = size_variable;\n  sections_array = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (section_size = 0x18; section_size != 0; section_size = section_size + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      content_pointer = *ppuVar36;\n      section_size = bfd_get_section_by_name(unaff_R14,content_pointer);\n      lVar37 = bfd_get_section_by_name();\n      if ((section_size != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(section_size + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,section_size,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          return_value = bfd_get_error();\n          bfd_errmsg(return_value);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          size_variable = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(size_variable + 1);\n          flag = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (flag == '\\0') {\n            return_value = bfd_get_error();\n            bfd_errmsg(return_value);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + size_variable) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,sections_array), param_13 != (char *)0x0)) {\n              symbol = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                return_value = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                section_size = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = symbol;\n                  symbol = symbol + section_size;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < size_variable) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    section_name = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      error_flag = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(error_flag + (int)param_23);\n                      if (size_variable <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(section_name);\n                      section_name = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,content_pointer,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,return_value,section_size,pcVar31);\n                    cVar7 = FUN_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(section_name);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,content_pointer,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      section_size = 0;\n      for (plVar15 = sections_array; plVar15 < sections_array + num_sections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((section_size == 0) && (section_size = FUN_00112894(unaff_R14,0,sections_array), section_size == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < sections_array + num_sections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          flag = FUN_0011173a(__ptr_02,section_size,param_43);\n          if (flag == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((section_size != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (flag == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (num_sections != 0)) {\n        param_40 = (long *)0x0;\n        notes = sections_array;\n        param_32 = 0;\n        num_notes = num_sections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (section_size = 0x22; section_size != 0; section_size = section_size + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        section_name = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= param_32) goto LAB_00105590;\n            section_size = sections_array[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,section_size,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              return_value = bfd_get_error();\n              bfd_errmsg(return_value);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(section_size + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,section_size,0);\n              if (cVar8 == '\\0') {\n                return_value = bfd_get_error();\n                bfd_errmsg(return_value);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (section_name != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            section_name = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,section_size,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              error_flag = strcmp(pcVar31,\".bb\");\n              if (error_flag == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                error_flag = strcmp(pcVar31,\".eb\");\n                if (error_flag != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              error_flag = strcmp(pcVar31,\".bf\");\n              if (error_flag == 0) {\n                if (param_13 != (char *)0x0) {\n                  flags_variable = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        flags_variable ^ (uVar12 ^ flags_variable) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    error_flag = 0;\n                    if (param_37 != 0) {\n                      error_flag = param_39 - 1;\n                    }\n                    section_size = *(long *)(*(long *)(section_size + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,error_flag + iVar27,\n                                           *(long *)(_param_15 + 6) + section_size);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                error_flag = strcmp(pcVar31,\".ef\");\n                if (error_flag != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (num_sections != 0) {\n        sections_array = DAT_001278b0 + num_sections;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (sections_array != plVar15);\n      }\n    }\n    else {\n      for (section_size = *(long *)(binary + 0x90); section_size != 0; section_size = *(long *)(section_size + 8)) {\n        if (*(long *)(section_size + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(section_size + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      section_size = xmalloc();\n      sections_array = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = section_size;\n      if (num_sections == 0) {\n        size_variable = 0;\n      }\n      else {\n        size_variable = 0;\n        _flag = 0;\n        do {\n          error_flag = DAT_001279a0;\n          plVar15 = (long *)sections_array[_flag];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < error_flag && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                comparison_result = strcmp(pcVar31,(char *)plVar20);\n                if (comparison_result == 0) {\n                  free(pcVar31);\n                  uVar21 = size_variable + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(section_size + size_variable * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = size_variable;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (error_flag = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), error_flag == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                error_flag = strcmp(*ppcVar34,(char *)plVar20);\n                if (error_flag == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            size_variable = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              size_variable = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            size_variable = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (error_flag = bfd_decode_symclass(plVar15), error_flag == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (flags_variable = *(uint *)(plVar15 + 3), (flags_variable & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    flags_variable = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = flags_variable & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_size + size_variable * 8) = plVar15;\n              size_variable = size_variable + 1;\n            }\n          }\n          _flag = _flag + 1;\n        } while (num_sections != _flag);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        error_flag = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < error_flag; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = size_variable * 8;\n            size_variable = size_variable + 1;\n            uVar17 = FUN_0011a2e0(puVar26,binary);\n            *(undefined8 *)(section_size + lVar23) = uVar17;\n            error_flag = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(section_size + size_variable * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = size_variable & 0xffffffff;\n        goto LAB_00105710;\n      }\n      error_flag = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((error_flag == 5) || (error_flag == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(binary,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          section_size = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_size == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(section_size,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_size + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binary,section_size,notes,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binary,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,binary,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,binary,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278b0);\n      error_flag = bfd_get_error();\n      if (error_flag == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    section_size = htab_elements(DAT_001279f8);\n    if (((section_size != 0) ||\n        ((((section_size = htab_elements(DAT_00127a08), section_size != 0 ||\n           (section_size = htab_elements(DAT_001279e8), section_size != 0)) ||\n          (section_size = htab_elements(DAT_001279e0), section_size != 0)) ||\n         ((section_size = htab_elements(DAT_001279d8), section_size != 0 ||\n          (section_size = htab_elements(DAT_001279d0), section_size != 0)))))) ||\n       ((((section_size = htab_elements(DAT_001278d0), section_size != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278a8,num_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,binary);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,binary);\n    for (puVar26 = DAT_001279c0; code_pointer = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(binary,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,binary,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; code_pointer != (undefined8 *)0x0; code_pointer = (undefined8 *)*code_pointer) {\n      uVar17 = *(undefined8 *)(code_pointer[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binary,uVar17,code_pointer[4],0,code_pointer[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,binary,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      sections_array = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binary + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (sections_array == (long *)0x0) {\n            sections_array = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*sections_array + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (sections_array[1] != 0) {\n              cVar7 = bfd_set_section_contents(binary,puVar26,sections_array[1],0,sections_array[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,binary,puVar26,uVar17);\n                return 0;\n              }\n              sections_array = (long *)sections_array[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sections_array = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              sections_array = (long *)plVar15[3];\n              plVar15 = sections_array;\n            } while (sections_array != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,binary,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        sections_array = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = sections_array;\n      } while (sections_array != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binary,param_21), section_size = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (content != (undefined *)0x0) {\n        if (0x2000 < size) {\n          size = 0x2000;\n        }\n        section_size = 0;\n        __ptr = (undefined *)xmalloc(size);\n        uVar5 = DAT_00127979;\n        content_pointer = __ptr;\n        for (size = size & 0xffffffff; size != 0; size = size - 1) {\n          *content_pointer = uVar5;\n          content_pointer = content_pointer + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)section_size < in_stack_00000068._4_4_; section_size = section_size + 1) {\n          size_variable = *(ulong *)(content + section_size * 8);\n          if (size_variable != 0) {\n            lVar37 = *(long *)(*sections + 0x40) - size_variable;\n            do {\n              uVar21 = 0x2000;\n              if (size_variable < 0x2001) {\n                uVar21 = size_variable;\n              }\n              cVar7 = bfd_set_section_contents(binary,*sections,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,binary,*sections,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              size_variable = size_variable - uVar21;\n            } while (size_variable != 0);\n          }\n          sections = sections + 1;\n        }\n        free(__ptr);\n        free(content);\n      }\n      return_value = (**(code **)(*(long *)(binary + 8) + 0x140))(unaff_R14);\n      if ((char)return_value != '\\0') {\n        if (DAT_00127910 == 0) {\n          return return_value;\n        }\n        cVar7 = bfd_alt_mach_code(binary,DAT_00127910 & 0xffffffff);\n        size_variable = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,size_variable);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127910;\n            return return_value;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return return_value;\n        }\n        return return_value;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,binary,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,binary,0,uVar17,section_size);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "bfd_is_local_label",
                "bfd_errmsg",
                "free",
                "FUN_0011a170",
                "bfd_get_section_by_name",
                "FUN_0010875d",
                "FUN_00108863",
                "bfd_get_error",
                "FUN_00112a33",
                "FUN_0010bbd3",
                "FUN_00119dd0",
                "bfd_set_section_size",
                "concat",
                "bfd_set_error",
                "bfd_make_section_with_flags",
                "FUN_001159d0",
                "xstrdup",
                "bfd_decode_symclass",
                "bfd_octets_per_byte",
                "FUN_00112894",
                "FUN_00113fb0",
                "strcpy",
                "bfd_set_section_contents",
                "FUN_0011173a",
                "htab_traverse",
                "FUN_00115d70",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_001126c0",
                "xmalloc",
                "qsort",
                "fprintf",
                "FUN_00119ed0",
                "FUN_001088ae",
                "bfd_coff_get_auxent",
                "FUN_0011378f",
                "FUN_0011a2e0",
                "FUN_0010bc80",
                "FUN_0010be1a",
                "FUN_0010bf86",
                "FUN_00116030",
                "strcmp",
                "FUN_0010c892",
                "bfd_map_over_sections",
                "FUN_0010be88",
                "FUN_00108b3e",
                "FUN_00116110",
                "htab_find",
                "bfd_fill_in_gnu_debuglink_section",
                "bfd_alt_mach_code",
                "htab_elements",
                "strlen",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_0010870e",
                "FUN_0010bf20",
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_debugging_information_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_param_to_string_00109cf4",
                "param_1": "dest",
                "param_2": "input",
                "param_3": "length",
                "local_3c": "stringifiedParam"
            },
            "code": "\nvoid convertParamToString_00109cf4(undefined8 dest,undefined8 input,undefined4 length)\n\n{\n  char stringifiedParam [28];\n  \n  sprintf(stringifiedParam,\"%ld\",input);\n  FUN_00109b52(dest,stringifiedParam,input,0,length);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010b800",
                "FUN_0010bba1",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "convert_param_to_string_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "uVar1": "result",
                "pcVar2": "current_char",
                "uVar3": "combined_result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 result;\n  char *current_char;\n  undefined8 combined_result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    result = FUN_00109a32(input_string,0);\n    *output_values = result;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      result = FUN_00109a32(input_string,0,param_3);\n      output_values[1] = result;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    combined_result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    combined_result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = combined_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_condition_and_process_001159d0",
                "param_1": "input",
                "uVar1": "result",
                "cVar2": "check",
                "uVar3": "status",
                "lVar4": "temp1",
                "lVar5": "temp2"
            },
            "code": "\nundefined4 checkConditionAndProcess_001159d0(long input)\n\n{\n  undefined8 result;\n  char check;\n  undefined4 status;\n  long temp1;\n  long temp2;\n  \n  status = FUN_00115b70();\n  if ((char)status == '\\0') {\n    if ((*(byte *)(input + 0x27) & 2) == 0) {\n      return status;\n    }\n    temp1 = FUN_00115d00(*(undefined8 *)(input + 0xd0),*(undefined8 *)(input + 0xe0));\n    if ((temp1 != 0) &&\n       (((result = *(undefined8 *)(temp1 + 8), DAT_00127a2c != 7 ||\n         (check = FUN_00115d70(result,DAT_00127a08), check != '\\0')) &&\n        (check = FUN_00115d70(result,DAT_001279f8), check == '\\0')))) {\n      temp1 = *(long *)(*(long *)(input + 0xd0) + 0xc0);\n      temp2 = temp1;\n      do {\n        if (temp2 == 0) {\n          return 1;\n        }\n        check = FUN_00115b70(temp2);\n        if (check == '\\0') {\n          return status;\n        }\n        temp2 = *(long *)(*(long *)(temp2 + 0xd0) + 0xc0);\n      } while (temp1 != temp2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d70",
                "FUN_00115d00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_condition_and_process_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "dataPointer",
                "__s": "sourceString",
                "uVar1": "flag",
                "lVar2": "ptr",
                "__s_00": "prefixString",
                "sVar5": "prefixLength",
                "__s_01": "resultString",
                "sVar6": "sourceLength",
                "uVar3": "value1",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a77a(long dataPointer)\n\n{\n  undefined flag;\n  long ptr;\n  char *sourceString;\n  undefined8 value1;\n  undefined4 returnValue;\n  char *prefixString;\n  size_t prefixLength;\n  size_t sourceLength;\n  char *resultString;\n  \n  ptr = *(long *)(dataPointer + 0x60);\n  if ((ptr != 0) && (sourceString = *(char **)(ptr + 0x20), sourceString != (char *)0x0)) {\n    returnValue = *(undefined4 *)(ptr + 0x18);\n    flag = *(undefined *)(ptr + 0x1c);\n    value1 = *(undefined8 *)(ptr + 0x10);\n    prefixString = (char *)FUN_00109b2f();\n    prefixLength = strlen(prefixString);\n    sourceLength = strlen(sourceString);\n    resultString = (char *)xmalloc(prefixLength + 2 + sourceLength);\n    sprintf(resultString,\"%s%s;\",prefixString,sourceString);\n    free(prefixString);\n    free(sourceString);\n    returnValue = FUN_00109b52(dataPointer,resultString,value1,flag,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(resultString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_0010543c",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar1": "fileHandle",
                "uVar4": "localizedErrorMessage",
                "unaff_RBP": "stackBase"
            },
            "code": "\nvoid openFile_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 localizedErrorMessage;\n  long stackBase;\n  \n  errnoPtr = __errno_location();\n  errorString = strerror(*errnoPtr);\n  fileHandle = *(undefined8 *)(stackBase + 0x10);\n  localizedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(localizedErrorMessage,fileHandle,errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "param_1": "inputBuffer",
                "param_2": "flag1",
                "param_3": "numStrings",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteValue",
                "iVar3": "length",
                "uVar4": "returnValue",
                "pcVar5": "sourceString",
                "__ptr": "outputStrings",
                "uVar6": "tempValue",
                "__s": "postfixString",
                "sVar7": "sourceStringLength",
                "sVar8": "postfixStringLength",
                "__s_00": "formattedString",
                "lVar9": "index",
                "bVar10": "bVarValue",
                "lVar11": "loopIndex",
                "uVar12": "useByteValue"
            },
            "code": "\nundefined4 generateFormattedString_0010a424(long inputBuffer,char flag1,int numStrings,char flag2)\n\n{\n  char result;\n  byte byteValue;\n  int length;\n  undefined4 returnValue;\n  char *sourceString;\n  undefined8 *outputStrings;\n  undefined8 tempValue;\n  char *postfixString;\n  size_t sourceStringLength;\n  size_t postfixStringLength;\n  char *formattedString;\n  long index;\n  byte bVarValue;\n  long loopIndex;\n  undefined useByteValue;\n  \n  if ((flag1 == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  bVarValue = *(byte *)(*(long *)(inputBuffer + 0x60) + 0x1c);\n  sourceString = (char *)FUN_00109b2f(inputBuffer);\n  if (numStrings < 0) {\n    outputStrings = (undefined8 *)0x0;\n    numStrings = 0;\nLAB_0010a582:\n    useByteValue = 1;\n    if (bVarValue != 0) goto LAB_0010a596;\n  }\n  else {\n    if (numStrings != 0) {\n      length = numStrings + 1;\n      outputStrings = (undefined8 *)xmalloc((long)length * 8);\n      index = (long)(numStrings + -1);\n      do {\n        byteValue = 1;\n        if (bVarValue == 0) {\n          byteValue = *(byte *)(*(long *)(inputBuffer + 0x60) + 0x1c);\n        }\n        tempValue = FUN_00109b2f(inputBuffer);\n        bVarValue = byteValue & 1;\n        outputStrings[index] = tempValue;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = FUN_00109d97(inputBuffer);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteValue = 1;\n        if (bVarValue == 0) {\n          byteValue = *(byte *)(*(long *)(inputBuffer + 0x60) + 0x1c);\n        }\n        bVarValue = byteValue & 1;\n        tempValue = FUN_00109b2f(inputBuffer);\n        outputStrings[(long)length + -1] = tempValue;\n        numStrings = length;\n      }\n      goto LAB_0010a582;\n    }\n    outputStrings = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    outputStrings = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(inputBuffer);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((bVarValue != 0) || (*(char *)(*(long *)(inputBuffer + 0x60) + 0x1c) != '\\0')) {\n      tempValue = FUN_00109b2f(inputBuffer);\n      numStrings = 1;\n      useByteValue = 1;\n      *outputStrings = tempValue;\n      goto LAB_0010a596;\n    }\n    tempValue = FUN_00109b2f(inputBuffer);\n    numStrings = 1;\n    *outputStrings = tempValue;\n  }\n  useByteValue = *(undefined *)(*(long *)(inputBuffer + 0x60) + 0x1c);\nLAB_0010a596:\n  postfixString = (char *)FUN_00109b2f(inputBuffer);\n  sourceStringLength = strlen(sourceString);\n  postfixStringLength = strlen(postfixString);\n  index = sourceStringLength + 10 + postfixStringLength;\n  for (loopIndex = 0; (int)loopIndex < numStrings; loopIndex = loopIndex + 1) {\n    sourceStringLength = strlen((char *)outputStrings[loopIndex]);\n    index = index + sourceStringLength;\n  }\n  formattedString = (char *)xmalloc(index);\n  sprintf(formattedString,\"#%s,%s\",sourceString,postfixString);\n  index = 0;\n  free(sourceString);\n  free(postfixString);\n  while( true ) {\n    sourceStringLength = strlen(formattedString);\n    if (numStrings <= (int)index) break;\n    *(undefined2 *)(formattedString + sourceStringLength) = 0x2c;\n    sourceString = (char *)outputStrings[index];\n    index = index + 1;\n    strcpy(formattedString + sourceStringLength + 1,sourceString);\n    free(sourceString);\n  }\n  *(undefined2 *)(formattedString + sourceStringLength) = 0x3b;\n  free(outputStrings);\n  returnValue = FUN_00109b52(inputBuffer,formattedString,0,useByteValue,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(formattedString);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00109d97",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strcpy",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_program_info_00119970",
                "param_1": "version",
                "pcVar1": "licenseString"
            },
            "code": "\nvoid printProgramInfo_00119970(undefined8 version)\n\n{\n  char *licenseString;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  licenseString = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(licenseString);\n  licenseString = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(licenseString);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_program_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_input_00114c80",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "format_string",
                "param_4": "value_2",
                "pcVar1": "equal_sign_pos",
                "uVar2": "error_message",
                "auVar3": "parsed_result"
            },
            "code": "\nundefined  [16] parse_input_00114c80(char *input_string,undefined8 value_1,undefined8 format_string,undefined8 value_2)\n\n{\n  char *equal_sign_pos;\n  undefined8 error_message;\n  undefined parsed_result [16];\n  \n  equal_sign_pos = strchr(input_string,0x3d);\n  if (equal_sign_pos != (char *)0x0) {\n    parsed_result._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message = FUN_0011a480(input_string,(long)equal_sign_pos - (long)input_string);\n    parsed_result._0_8_[2] = equal_sign_pos + 1;\n    parsed_result._0_8_[1] = error_message;\n    parsed_result._0_8_[4] = 0;\n    parsed_result._0_8_[3] = 0;\n    *parsed_result._0_8_ = value_1;\n    parsed_result._8_8_ = value_2;\n    return parsed_result;\n  }\n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_message,format_string);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_0011a480",
                "FUN_001053b5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_input_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_value_and_increment_pointer_0010870e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "storedValueAddress"
            },
            "code": "\nvoid storeValueAndIncrementPointer_0010870e(undefined8 param1,undefined8 param2,long *param3)\n\n{\n  undefined8 *storedValueAddress;\n  \n  storedValueAddress = (undefined8 *)*param3;\n  *storedValueAddress = param2;\n  *param3 = (long)(storedValueAddress + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_value_and_increment_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_ptr",
                "param_2": "symbol_table",
                "param_3": "header",
                "param_4": "current_section",
                "param_5": "type_code",
                "param_6": "aux_symbols",
                "param_7": "flag",
                "param_8": "error_message",
                "lVar1": "result",
                "cVar2": "success",
                "uVar3": "bfd_error_code",
                "uVar4": "return_value",
                "lVar5": "ret_val",
                "uVar6": "string_message",
                "plVar7": "pointer",
                "__ptr": "buffer_1",
                "__ptr_00": "buffer_2",
                "bVar8": "bit_shift",
                "iVar9": "loop_index",
                "pcVar10": "type_string",
                "uVar11": "bit_mask",
                "lVar12": "index_counter",
                "uVar13": "shifted_type_code",
                "uVar14": "additional_value",
                "uVar15": "floating_point_size",
                "local_68": "local_buffer",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_ptr,long *symbol_table,long header,undefined8 current_section,uint type_code,\n                 long *aux_symbols,char flag,undefined8 error_message)\n\n{\n  long result;\n  char success;\n  undefined4 bfd_error_code;\n  undefined8 return_value;\n  long ret_val;\n  undefined8 string_message;\n  long *pointer;\n  void *buffer_1;\n  void *buffer_2;\n  byte bit_shift;\n  int loop_index;\n  char *type_string;\n  ulong bit_mask;\n  long index_counter;\n  uint shifted_type_code;\n  uint additional_value;\n  undefined8 floating_point_size;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  ret_val = *(long *)(coff_ptr + 0x110);\n  if ((~*(uint *)(ret_val + 0x38) & type_code) != 0) {\n    shifted_type_code = (int)type_code >> ((byte)*(undefined4 *)(ret_val + 0x44) & 0x1f);\n    bit_mask = (ulong)(type_code & *(uint *)(ret_val + 0x40));\n    bit_shift = (byte)*(undefined4 *)(ret_val + 0x3c);\n    shifted_type_code = (shifted_type_code ^ type_code) & *(uint *)(ret_val + 0x38) ^ shifted_type_code;\n    if (bit_mask == 1L << (bit_shift & 0x3f)) {\n      return_value = parse_coff_type_0010dac0(coff_ptr,symbol_table,header,current_section,shifted_type_code,aux_symbols,flag,error_message);\n      ret_val = FUN_00113d3a(return_value);\n      return ret_val;\n    }\n    if (bit_mask != 2L << (bit_shift & 0x3f)) {\n      if (bit_mask != 3L << (bit_shift & 0x3f)) {\n        return_value = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(ret_val + 0x3c),\n                          shifted_type_code);\n        FUN_00119ed0(return_value,type_code);\n        return 0;\n      }\n      additional_value = 0;\n      if (aux_symbols != (long *)0x0) {\n        additional_value = (uint)*(ushort *)(aux_symbols + 2);\n        pointer = aux_symbols + 2;\n        for (loop_index = 0; (*(short *)pointer != 0 && (loop_index != 3)); loop_index = loop_index + 1) {\n          *(short *)pointer = *(short *)((long)pointer + 2);\n          pointer = (long *)((long)pointer + 2);\n        }\n        *(short *)pointer = 0;\n      }\n      floating_point_size = 0;\n      return_value = error_message;\n      string_message = parse_coff_type_0010dac0(coff_ptr,symbol_table,header,current_section,shifted_type_code,aux_symbols,0);\n      ret_val = *(long *)(header + 0x28);\n      if (ret_val == 0) {\n        return_value = FUN_00113dfe(4,0,floating_point_size,return_value);\n        ret_val = FUN_0010c218(error_message,\"int\",return_value);\n        *(long *)(header + 0x28) = ret_val;\n      }\n      ret_val = FUN_00113c43(string_message,ret_val,0,(long)(int)(additional_value - 1),0);\n      return ret_val;\n    }\n    return_value = parse_coff_type_0010dac0(coff_ptr,symbol_table,header,current_section,shifted_type_code,aux_symbols,flag,error_message);\n    ret_val = FUN_00113ce0(return_value,0,0);\n    return ret_val;\n  }\n  if ((aux_symbols != (long *)0x0) && (0 < *aux_symbols)) {\n    pointer = (long *)FUN_0010da0b(header);\n    if (*pointer != 0) {\n      return *pointer;\n    }\n    ret_val = FUN_00113e23(pointer,0);\n    return ret_val;\n  }\n  if (flag == '\\0') {\n    aux_symbols = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    ret_val = FUN_00113e17();\n    return ret_val;\n  }\n  ret_val = *(long *)(header + 8 + (long)(int)type_code * 8);\n  if (ret_val != 0) {\n    return ret_val;\n  }\n  switch(type_code) {\n  default:\n    return_value = FUN_00113e17();\n    type_string = \"void\";\n    break;\n  case 2:\n    return_value = FUN_00113dfe(1,0);\n    type_string = \"char\";\n    break;\n  case 3:\n    return_value = FUN_00113dfe(2,0);\n    type_string = \"short\";\n    break;\n  case 4:\n    return_value = FUN_00113dfe(4,0);\n    type_string = \"int\";\n    break;\n  case 5:\n    return_value = FUN_00113dfe(4,0);\n    type_string = \"long\";\n    break;\n  case 6:\n    return_value = FUN_00113df2(4);\n    type_string = \"float\";\n    break;\n  case 7:\n    return_value = FUN_00113df2(8);\n    type_string = \"double\";\n    break;\n  case 8:\n    if (aux_symbols == (long *)0x0) {\n      ret_val = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    return_value = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (aux_symbols == (long *)0x0) {\n      ret_val = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    return_value = 9;\nLAB_0010de7a:\n    ret_val = FUN_0010e07c(coff_ptr,symbol_table,header,return_value,aux_symbols,error_message);\nLAB_0010e046:\n    pointer = (long *)FUN_0010da0b(header,current_section);\n    *pointer = ret_val;\n    return ret_val;\n  case 10:\n    if (aux_symbols == (long *)0x0) {\n      ret_val = FUN_00113d6e(0,0);\n    }\n    else {\n      ret_val = aux_symbols[3];\n      buffer_1 = (void *)xmalloc(0x50);\n      buffer_2 = (void *)xmalloc(0x50);\n      index_counter = 0;\n      do {\n        while( true ) {\n          if ((ret_val <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          loop_index = (int)index_counter;\n          result = *(long *)(*symbol_table + symbol_table[2] * 8);\n          success = bfd_coff_get_syment(coff_ptr,result,local_buffer);\n          index_counter = (long)loop_index;\n          if (success == '\\0') {\n            bfd_error_code = bfd_get_error();\n            return_value = bfd_errmsg(bfd_error_code);\n            string_message = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(string_message,return_value);\n            free(buffer_1);\n            free(buffer_2);\n            ret_val = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= loop_index + 1) {\n            type_code = type_code + 10;\n            buffer_1 = (void *)xrealloc(buffer_1);\n            buffer_2 = (void *)xrealloc(buffer_2,(long)(int)type_code << 3);\n          }\n          index_counter = *(long *)(result + 0x20);\n          *(undefined8 *)((long)buffer_1 + (long)loop_index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)buffer_2 + (long)loop_index * 8) =\n               *(long *)(result + 0x10) + *(long *)(index_counter + 0x30);\n          index_counter = (long)(loop_index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)buffer_1 + index_counter * 8) = 0;\n      ret_val = FUN_00113d6e(buffer_1,buffer_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    ret_val = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    return_value = FUN_00113dfe(1,1);\n    type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    return_value = FUN_00113dfe(2,1);\n    type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    return_value = FUN_00113dfe(4,1);\n    type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    return_value = FUN_00113dfe(4,1);\n    type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    return_value = FUN_00113df2(0xc);\n    type_string = \"long double\";\n  }\n  ret_val = FUN_0010c218(error_message,type_string,return_value);\nLAB_0010e065:\n  *(long *)(header + 8 + (long)(int)type_code * 8) = ret_val;\n  return ret_val;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010da0b",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00119ed0",
                "FUN_00113ce0",
                "FUN_0010dac0",
                "bfd_errmsg",
                "FUN_0010e07c",
                "bfd_coff_get_syment",
                "free",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "xrealloc",
                "FUN_00113df2",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "inputString",
                "param_2": "comparisonString",
                "__n": "length",
                "extraout_var": "additionalVariable",
                "auVar2": "result",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *inputString,char *comparisonString)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 additionalVariable;\n  undefined result [16];\n  \n  length = strlen(comparisonString);\n  comparisonResult = strncmp(inputString,comparisonString,length);\n  result._1_7_ = (undefined7)(CONCAT44(additionalVariable,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_time_error_0010882c",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage",
                "__errno_location": "getErrorCodeLocation",
                "strerror": "getErrorString",
                "dcgettext": "getFormattedMessage"
            },
            "code": "\nvoid printTimeError_0010882c(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "strerror",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "param_1": "arg1",
                "param_2": "data",
                "param_3": "dataLength",
                "param_4": "arg2",
                "__s": "string1",
                "uVar2": "len",
                "uVar3": "result",
                "__s_00": "formattedString",
                "cVar1": "character",
                "sVar4": "dataLength",
                "sVar5": "string1Length"
            },
            "code": "\nundefined4 formatAndSendData_0010ebb0(undefined8 arg1,char *data,int dataLength,undefined8 arg2)\n\n{\n  char character;\n  uint len;\n  undefined4 result;\n  char *string1;\n  size_t dataLength;\n  size_t string1Length;\n  char *formattedString;\n  \n  string1 = (char *)FUN_00109b2f();\n  len = dataLength - 1;\n  if (len < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)len * 4);\n    character = (&DAT_00121334)[len];\n    dataLength = strlen(data);\n    string1Length = strlen(string1);\n    formattedString = (char *)xmalloc(dataLength + 3 + string1Length);\n    sprintf(formattedString,\"%s:%c%s\",data,(ulong)(uint)(int)character,string1);\n    free(string1);\n    result = FUN_0010e2f0(arg1,result,0,arg2,formattedString);\n    if ((char)result != '\\0') {\n      free(formattedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "abort",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_and_initialize_object_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "result",
                "plVar2": "object",
                "xmalloc": "allocateMemory"
            },
            "code": "\nlong createAndInitializeObject_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long result;\n  long *object;\n  \n  if ((input1 != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    object = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)object + 0x19) = 0;\n    *object = input1;\n    *(undefined4 *)((long)object + 0x1c) = 0;\n    object[1] = input2;\n    object[2] = input3;\n    *(undefined *)(object + 3) = input4;\n    *(long **)(result + 0x10) = object;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_and_initialize_object_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_value_00115d70",
                "param_1": "input_param",
                "param_2": "hash_table",
                "lVar1": "result",
                "local_18": "temp_param",
                "local_10": "is_found"
            },
            "code": "\nundefined check_value_00115d70(undefined8 input_param,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 temp_param;\n  undefined is_found;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hash_table,input_param);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    temp_param = input_param;\n    htab_traverse(hash_table,FUN_0011a170,&temp_param);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "FUN_0011a170",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001159d0",
                "FUN_0010554f",
                "FUN_001082df"
            ],
            "imported": false,
            "current_name": "check_value_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "uVar1": "newDataPointer",
                "puVar2": "dataPointer",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long data,undefined8 value,undefined4 size)\n\n{\n  undefined8 newDataPointer;\n  undefined8 *dataPointer;\n  uint currentSize;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    currentSize = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = currentSize;\n    newDataPointer = xrealloc(*(undefined8 *)(data + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(data + 0x20) = newDataPointer;\n  }\n  currentSize = *(uint *)(data + 0x28);\n  dataPointer = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(data + 0x20));\n  *dataPointer = value;\n  *(undefined4 *)(dataPointer + 1) = size;\n  *(uint *)(data + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)dataPointer >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxSize",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxSize)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(inputString,maxSize);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strnlen",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "format_and_send_data_0010e918",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "result",
                "__s": "randomString",
                "sVar2": "dataLength",
                "sVar3": "randomStringLength",
                "__s_00": "formattedData"
            },
            "code": "\nundefined4 formatAndSendData_0010e918(undefined8 socket,char *data,undefined8 length)\n\n{\n  undefined4 result;\n  char *randomString;\n  size_t dataLength;\n  size_t randomStringLength;\n  char *formattedData;\n  \n  randomString = (char *)FUN_00109b2f();\n  dataLength = strlen(data);\n  randomStringLength = strlen(randomString);\n  formattedData = (char *)xmalloc(dataLength + 0x14 + randomStringLength);\n  sprintf(formattedData,\"%s:c=e%s,%ld\",data,randomString,length);\n  free(randomString);\n  result = FUN_0010e2f0(socket,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ae0e",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_content_00116110",
                "param_1": "inputBinary",
                "param_2": "section",
                "param_3": "outputBinary",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "temp3",
                "iVar4": "temp4",
                "iVar5": "temp5",
                "cVar6": "status",
                "uVar7": "temp6",
                "__ptr": "buffer",
                "lVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "temp9",
                "uVar11": "temp10",
                "puVar12": "temp11",
                "lVar13": "temp12",
                "puVar14": "temp13",
                "puVar15": "temp14",
                "pvVar16": "temp15",
                "uVar17": "temp16",
                "uVar18": "temp17",
                "uVar19": "temp18",
                "bVar20": "flag",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid processSectionContent_00116110(undefined8 inputBinary,undefined8 *section,undefined8 outputBinary)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long temp3;\n  int temp4;\n  int temp5;\n  char status;\n  undefined8 temp6;\n  undefined8 *buffer;\n  long temp7;\n  ulong temp8;\n  int temp9;\n  ulong temp10;\n  undefined *temp11;\n  long temp12;\n  undefined8 *temp13;\n  undefined8 *temp14;\n  void *temp15;\n  ulong temp16;\n  ulong temp17;\n  ulong temp18;\n  byte flag;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  flag = 0;\n  status = FUN_00115f50(inputBinary,section,1);\n  if (status != '\\0') {\n    return;\n  }\n  sectionSize = section[8];\n  temp3 = section[0xc];\n  if (((*(byte *)((long)section + 0x25) & 1) == 0) || ((*(byte *)(temp3 + 0x25) & 1) == 0)) {\n    temp12 = FUN_00114190(*section,0,0x80);\n    if (temp12 == 0) {\n      return;\n    }\n    if ((*(byte *)(temp12 + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    temp14 = buffer;\n    if (7 < sectionSize) {\n      for (temp17 = sectionSize >> 3; temp17 != 0; temp17 = temp17 - 1) {\n        *temp14 = 0;\n        temp14 = temp14 + (ulong)flag * -2 + 1;\n      }\n    }\n    temp13 = temp14;\n    if ((sectionSize & 4) != 0) {\n      temp13 = (undefined8 *)((long)temp14 + (ulong)flag * -8 + 4);\n      *(undefined4 *)temp14 = 0;\n    }\n    temp14 = temp13;\n    if ((sectionSize & 2) != 0) {\n      temp14 = (undefined8 *)((long)temp13 + (ulong)flag * -4 + 2);\n      *(undefined2 *)temp13 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)temp14 = 0;\n    }\n    status = bfd_set_section_contents(outputBinary,temp3,buffer,0);\n    if (status != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,outputBinary,temp3,0);\n    free(buffer);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  status = bfd_get_full_section_contents(inputBinary,section,&sectionContent);\n  if ((status == '\\0') ||\n     (status = bfd_convert_section_contents(inputBinary,section,outputBinary,&sectionContent,&sectionSize),\n     temp9 = DAT_001278e8, status == '\\0')) {\n    bfd_set_section_size(temp3,0);\n    DAT_00127a20 = 1;\n    FUN_001126c0(0,inputBinary,section,0);\n    free(sectionContent);\n    return;\n  }\n  temp4 = DAT_001264b8;\n  temp5 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    temp17 = (ulong)DAT_001278e8;\n    if (sectionSize % temp17 != 0) {\n      temp2 = *section;\n      temp6 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(temp6,temp2,temp9);\n    }\n    temp9 = DAT_001278e8 / 2;\n    temp10 = 0;\n    while (temp18 = temp10, temp4 = DAT_001264b8, temp5 = DAT_001264bc, temp18 < sectionSize) {\n      temp10 = temp17 + temp18;\n      temp16 = temp10;\n      for (temp8 = 0; temp8 < (ulong)(long)temp9; temp8 = temp8 + 1) {\n        temp16 = temp16 - 1;\n        temp11 = (undefined *)(temp18 + temp8 + (long)sectionContent);\n        temp1 = *temp11;\n        *temp11 = *(undefined *)((long)sectionContent + temp16);\n        *(undefined *)((long)sectionContent + temp16) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = temp4;\n  DAT_001264bc = temp5;\n  if (-1 < temp5) {\n    temp17 = (ulong)DAT_00127a1c;\n    temp9 = (int)((ulong)section[7] % temp17);\n    temp10 = ((long)temp5 - (long)temp9) + (long)sectionContent;\n    if (temp5 < temp9) {\n      temp10 = temp10 + temp17;\n    }\n    temp12 = (sectionSize + (long)sectionContent) - temp10;\n    temp15 = sectionContent;\n    for (; temp10 < sectionSize + (long)sectionContent; temp10 = temp10 + temp17) {\n      for (temp7 = 0; ((int)temp7 < temp4 && (temp7 != temp12)); temp7 = temp7 + 1) {\n        *(undefined *)((long)temp15 + temp7) = *(undefined *)(temp10 + temp7);\n      }\n      temp15 = (void *)((long)temp15 + temp7);\n      temp12 = temp12 - temp17;\n    }\n    sectionSize = ((((temp17 - 1) + sectionSize) - (long)temp5) / temp17) * (long)temp4;\n    temp17 = *(ulong *)(temp3 + 0x38) / temp17;\n    *(ulong *)(temp3 + 0x38) = temp17;\n    if (temp5 < temp9) {\n      *(ulong *)(temp3 + 0x38) = temp17 + 1;\n      status = bfd_set_section_contents(outputBinary,temp3,sectionContent,0,sectionSize);\n      if (status == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  status = bfd_set_section_contents(outputBinary,temp3,sectionContent,0,sectionSize);\n  if (status == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "FUN_00114190",
                "FUN_001126c0",
                "bfd_get_full_section_contents",
                "xmalloc",
                "bfd_set_section_size",
                "free",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00115f50",
                "FUN_00108466"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_content_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "display_error_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid displayError_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "display_error_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "lVar1": "current_block_ptr",
                "uVar2": "result",
                "pcVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_param,undefined8 unused_param,undefined8 output_param)\n\n{\n  long current_block_ptr;\n  undefined8 result;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block_ptr = *(long *)(block_ptr + 0x20), current_block_ptr == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) != 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = new_param;\n      result = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block_ptr + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  result = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010bf84:\n  return_value._8_8_ = output_param;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_parameter_0010c95e",
                "param_1": "inputData",
                "param_2": "inputString",
                "param_3": "outputData",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "currentPtr",
                "bVar4": "isSigned",
                "bVar5": "isUnsigned",
                "bVar6": "isHex",
                "cVar7": "returnValue",
                "uVar8": "length",
                "pbVar9": "nextPtr",
                "lVar10": "tempValue",
                "uVar11": "funcReturnValue",
                "pcVar12": "typeString",
                "sVar13": "strLength",
                "uVar14": "index",
                "__ptr": "ptrData",
                "lVar15": "result",
                "pcVar19": "typeString",
                "ppcVar18": "outputString",
                "local_49": "unsignedCharValue",
                "local_48": "intValue",
                "local_40": "outputStrings"
            },
            "code": "\nundefined8 parseParameter_0010c95e(undefined8 *inputData,byte **inputString,long *outputData)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *currentPtr;\n  bool isSigned;\n  bool isUnsigned;\n  bool isHex;\n  char returnValue;\n  uint length;\n  byte *nextPtr;\n  long tempValue;\n  undefined8 funcReturnValue;\n  char *typeString;\n  size_t strLength;\n  ulong index;\n  void *ptrData;\n  long result;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **outputString;\n  char *typeString;\n  byte *pnextByte0;\n  undefined unsignedCharValue;\n  ulong intValue;\n  char *outputStrings [2];\n  \n  while( true ) {\n    pnextByte0 = *inputString;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      result = 0;\n      currentPtr = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *inputString = pnextByte0 + 1;\n      returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (outputData == (long *)0x0) {\n        return 1;\n      }\n      result = FUN_00113b71(*outputData);\n      *outputData = result;\n      return 1;\n    case 0x46:\n      *inputString = pnextByte0 + 1;\n      if (outputData == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        outputString = (char **)0x0;\n      }\n      else {\n        puVar16 = &intValue;\n        outputString = outputStrings;\n      }\n      returnValue = FUN_0010d882(inputData,inputString,outputString,puVar16);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (**inputString == 0x5f) {\n        *inputString = *inputString + 1;\n        returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputData == (long *)0x0) {\n          return 1;\n        }\n        result = FUN_00113ce0(*outputData,outputStrings[0],intValue & 0xff);\n        *outputData = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *inputString = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      unsignedCharValue = 0;\n      outputStrings[0] = (char *)0x0;\n      intValue = 0;\n      *inputString = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        outputString = outputStrings;\n        if (outputData == (long *)0x0) {\n          outputString = (char **)0x0;\n        }\n        returnValue = FUN_0010d559(inputData,inputString,outputString);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        length = FUN_00108e76(inputString);\n        currentPtr = *inputString;\n        strLength = strlen((char *)currentPtr);\n        if (strLength < length) goto switchD_0010cdf9_caseD_60;\n        *inputString = currentPtr + length;\n        if ((outputData != (long *)0x0) &&\n           (outputStrings[0] = (char *)FUN_0010afd5(*inputData,inputData[1],currentPtr,length,9),\n           outputStrings[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **inputString;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *inputString = *inputString + 1;\n        }\n        if (**inputString != 0x46) goto switchD_0010cdf9_caseD_60;\n        *inputString = *inputString + 1;\n        if (outputData == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &unsignedCharValue;\n          puVar16 = &intValue;\n        }\n        returnValue = FUN_0010d882(inputData,inputString,puVar16,puVar17);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      if (**inputString == 0x5f) {\n        *inputString = *inputString + 1;\n        returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputData == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          result = FUN_00113bfa(outputStrings[0],*outputData);\n          *outputData = result;\n          return 1;\n        }\n        result = FUN_00113b98(*outputData,outputStrings[0],intValue,unsignedCharValue);\n        *outputData = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      funcReturnValue = FUN_0010d559(inputData,inputString,outputData);\n      return funcReturnValue;\n    case 0x52:\n      *inputString = pnextByte0 + 1;\n      returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (outputData == (long *)0x0) {\n        return 1;\n      }\n      result = FUN_00113cb9(*outputData);\n      *outputData = result;\n      return 1;\n    case 0x54:\n      *inputString = pnextByte0 + 1;\n      returnValue = FUN_00108ea1(inputString,&intValue);\n      if (returnValue != '\\0') {\n        if ((uint)intValue < *(uint *)(inputData + 5)) {\n          outputStrings[0] = *(char **)((intValue & 0xffffffff) * 0x10 + inputData[4]);\n          returnValue = parseParameter_0010c95e(inputData,outputStrings,outputData);\n          if (returnValue == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *inputString = pnextByte0 + 1;\n    returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (outputData == (long *)0x0) {\n      return 1;\n    }\n    result = FUN_00113d3a(*outputData);\n    *outputData = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isHex = false;\n  isSigned = false;\n  returnValue = '\\0';\n  isUnsigned = false;\n  do {\n    currentPtr = *inputString;\n    currentByte = *currentPtr;\n    if (currentByte == 0x55) {\n      returnValue = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        isHex = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (outputData == (long *)0x0) {\nLAB_0010d0aa:\n          *inputString = currentPtr + 1;\n          return 1;\n        }\n        result = FUN_0010914e(*inputData,&DAT_00120436);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00112904(6,4);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"unsigned char\";\n        if ((returnValue == '\\0') && (typeString = \"char\", isSigned)) {\n          typeString = \"signed char\";\n        }\n        result = FUN_0010914e(*inputData,typeString);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113dfe(1,returnValue);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*inputData,\"float\");\n        *outputData = result;\n        if (result == 0) {\n          result = FUNC_00113df2(4);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"unsigned int\";\n        typeString = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"long unsigned int\";\n        typeString = \"long int\";\nLAB_0010ced2:\n        if (returnValue == '\\0') {\n          typeString = typeString;\n        }\n        result = FUN_0010914e(*inputData,typeString);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113dfe(4,returnValue);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        typeString = \"long double\";\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = FUN_0010914e(*inputData,typeString);\n        *outputData = result;\n        if (result == 0) {\n          result = FUNC_00113df2(8);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"short unsigned int\";\n        if (returnValue == '\\0') {\n          typeString = \"short int\";\n        }\n        result = FUN_0010914e(*inputData,typeString);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113dfe(2,returnValue);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        outputString = outputStrings;\n        if (outputData == (long *)0x0) {\n          outputString = (char **)0x0;\n        }\n        returnValue = FUN_0010d21c(inputData,inputString,outputString);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (outputData == (long *)0x0) {\n          return 1;\n        }\n        strLength = strlen(outputStrings[0]);\n        result = FUN_0010afd5(*inputData,inputData[1],outputStrings[0],strLength & 0xffffffff,9);\n        *outputData = result;\n        free(outputStrings[0]);\n        result = *outputData;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*inputData,&DAT_00120495);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113e17();\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*inputData,\"__wchar_t\");\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113dfe(2,1);\n          *outputData = result;\n          *inputString = *inputString + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (outputData == (long *)0x0) goto LAB_0010d0aa;\n        typeString = \"long long unsigned int\";\n        if (returnValue == '\\0') {\n          typeString = \"long long int\";\n        }\n        result = FUN_0010914e(*inputData,typeString);\n        *outputData = result;\n        if (result == 0) {\n          result = FUN_00113dfe(8,returnValue);\n          *outputData = result;\n        }\n      }\n      *inputString = *inputString + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      isUnsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *inputString = currentPtr + 1;\n  } while( true );\nLAB_0010ca26:\n  nextPtr = currentPtr + 1;\n  *inputString = nextPtr;\n  currentByte = *nextPtr;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *inputString = currentPtr + 2;\n    returnValue = parseParameter_0010c95e(inputData,inputString,outputData);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (outputData == (long *)0x0) {\n      return 1;\n    }\n    tempValue = FUN_0010914e(*inputData,\"int\");\n    if (tempValue == 0) {\n      tempValue = FUN_00113dfe(4,0);\n    }\n    result = FUN_00113c43(*outputData,tempValue,0,result,0);\n    *outputData = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)currentByte + -0x30);\n  currentPtr = nextPtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pnextByte0);\n      if (outputData == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*inputString = currentPtr + 1, ((&_sch_istable)[(ulong)currentPtr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *inputString;\n  length = FUN_00108e76(inputString);\n  currentPtr = *inputString;\n  strLength = strlen((char *)currentPtr);\n  index = (ulong)length;\n  if (index <= strLength) {\n    *inputString = currentPtr + index;\n    if (outputData == (long *)0x0) {\n      return 1;\n    }\n    ptrData = (void *)FUN_00109a0b(currentPtr,index);\n    result = FUN_0010914e(*inputData,ptrData);\n    *outputData = result;\n    free(ptrData);\n    if (*outputData == 0) {\n      result = FUN_0010afd5(*inputData,inputData[1],currentPtr,(int)*inputString - (int)currentPtr,0);\n      *outputData = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isUnsigned) {\n      result = FUN_00113b71(*outputData);\n      *outputData = result;\n    }\n    if (isHex) {\n      result = FUN_00113b4a(*outputData);\n      *outputData = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_00113c43",
                "FUN_0010afd5",
                "FUN_00113b4a",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010d21c",
                "strlen",
                "FUN_00109a0b",
                "FUN_00112904",
                "free",
                "FUN_00113bfa",
                "FUN_0010911f",
                "FUN_00113e17",
                "FUN_00113dfe",
                "FUN_00113b98",
                "FUN_00108ea1",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_0010c95e",
                "FUN_00108e76"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_00113e5e",
                "FUN_0010d7d4",
                "FUN_0010d21c",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_parameter_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_map_over_sections",
                "FUN_001126c0",
                "xmalloc",
                "FUN_00115f30",
                "FUN_0010554f",
                "FUN_00119ed0",
                "fclose",
                "fopen",
                "FUN_00114190",
                "fwrite",
                "bfd_get_full_section_contents",
                "FUN_0010551d",
                "free",
                "bfd_set_format",
                "bfd_get_section_by_name",
                "FUN_001163d0",
                "FUN_00105828",
                "bfd_set_section_size",
                "FUN_00115530",
                "bfd_get_arch",
                "bfd_make_section_with_flags",
                "__errno_location",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "bfd_malloc_and_get_section"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorPtr",
                "pcVar3": "errorMsg",
                "uVar4": "localizedErrorMsg",
                "local_38": "creationTime",
                "uStack_34": "accessTime",
                "uStack_30": "modificationTime",
                "uStack_2c": "changeTime",
                "local_28": "backupTime"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorPtr;\n  char *errorMsg;\n  undefined8 localizedErrorMsg;\n  undefined4 creationTime;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 backupTime;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  backupTime = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  creationTime = *(undefined4 *)(fileInfo + 0x48);\n  accessTime = *(undefined4 *)(fileInfo + 0x4c);\n  modificationTime = *(undefined4 *)(fileInfo + 0x50);\n  changeTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&creationTime,0);\n  if (result != 0) {\n    errorPtr = __errno_location();\n    errorMsg = strerror(*errorPtr);\n    localizedErrorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(localizedErrorMsg,filePath,errorMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorType",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorType)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorType,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_hash_lookup_0010e2f0",
                "param_1": "hashTable",
                "param_2": "flag",
                "param_3": "someParam",
                "param_4": "someData",
                "param_5": "inputString",
                "lVar1": "temp1",
                "uVar2": "error",
                "lVar3": "temp2",
                "uVar4": "errorMsg",
                "uVar5": "localizedMsg",
                "sVar6": "inputLength",
                "lVar7": "hashValue",
                "local_44": "result",
                "uStack_40": "localFlag",
                "uStack_3f": "undefVar1",
                "uStack_3e": "undefVar2",
                "local_3c": "localArray"
            },
            "code": "\nundefined8\nprocessHashLookup_0010e2f0(long *hashTable,undefined flag,int someParam,undefined8 someData,char *inputString)\n\n{\n  long temp1;\n  undefined4 error;\n  long temp2;\n  undefined8 errorMsg;\n  undefined8 localizedMsg;\n  size_t inputLength;\n  long hashValue;\n  undefined4 result;\n  undefined localFlag;\n  undefined undefVar1;\n  undefined2 undefVar2;\n  undefined4 localArray [3];\n  \n  if (inputString == (char *)0x0) {\n    hashValue = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(hashTable + 7,inputString,1,1);\n    if (temp2 == 0) {\n      error = bfd_get_error();\n      errorMsg = bfd_errmsg(error);\n      localizedMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(localizedMsg,errorMsg);\n      return 0;\n    }\n    hashValue = *(long *)(temp2 + 0x20);\n    if (hashValue == -1) {\n      hashValue = hashTable[6];\n      temp1 = hashTable[5];\n      *(long *)(temp2 + 0x20) = hashValue;\n      if (temp1 == 0) {\n        hashTable[4] = temp2;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = temp2;\n      }\n      hashTable[5] = temp2;\n      inputLength = strlen(inputString);\n      hashTable[6] = hashValue + 1 + inputLength;\n    }\n  }\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(hashValue,&result);\n  undefVar1 = 0;\n  localFlag = flag;\n  (**(code **)(*(long *)(*hashTable + 8) + 0x68))((long)someParam,&undefVar2);\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(someData,localArray);\n  if ((ulong)hashTable[3] < hashTable[2] + 0xcU) {\n    hashTable[3] = hashTable[3] * 2;\n    hashValue = xrealloc(hashTable[1]);\n    hashTable[1] = hashValue;\n  }\n  hashValue = hashTable[2];\n  temp2 = hashTable[1];\n  *(ulong *)(temp2 + hashValue) = CONCAT26(undefVar2,CONCAT15(undefVar1,CONCAT14(localFlag,result)));\n  *(undefined4 *)(temp2 + 8 + hashValue) = localArray[0];\n  hashTable[2] = hashTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)hashValue >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "FUN_00119ed0",
                "xrealloc",
                "strlen",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e918",
                "FUN_0010e439",
                "FUN_0010e5db",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010ed2c",
                "FUN_0010e842",
                "FUN_0011378f",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e453",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_hash_lookup_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "iVar1": "comparisonResult",
                "uVar2": "errorMessage",
                "pcVar3": "delimiterPtr",
                "pcVar4": "nextFlagPtr",
                "sVar5": "flagLength",
                "iVar6": "flagIndex",
                "uVar7": "parsedFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 unused1,undefined8 unused2,undefined8 unused3)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *delimiterPtr;\n  char *nextFlagPtr;\n  size_t flagLength;\n  int flagIndex;\n  uint parsedFlags;\n  undefined result [16];\n  \n  parsedFlags = 0;\n  do {\n    delimiterPtr = strchr(sectionFlags,0x2c);\n    if (delimiterPtr == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      flagIndex = (int)flagLength;\n      nextFlagPtr = (char *)0x0;\n    }\n    else {\n      nextFlagPtr = delimiterPtr + 1;\n      flagIndex = (int)delimiterPtr - (int)sectionFlags;\n    }\n    flagLength = (size_t)flagIndex;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (comparisonResult == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (comparisonResult == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (comparisonResult == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (comparisonResult == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (comparisonResult == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (comparisonResult != 0) {\n                              delimiterPtr = (char *)xmalloc((long)(flagIndex + 1));\n                              strncpy(delimiterPtr,sectionFlags,flagLength);\n                              delimiterPtr[flagLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorMessage,delimiterPtr);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlagPtr;\n  } while (nextFlagPtr != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = parsedFlags;\n  result._8_8_ = unused3;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_modified_string_001125fa",
                "param_1": "inputParams",
                "uVar1": "totalLength",
                "ppcVar2": "argPtr",
                "sVar3": "arg1Length",
                "sVar4": "arg2Length",
                "__s": "outputString"
            },
            "code": "\nchar * generateModifiedString_001125fa(char **inputParams)\n\n{\n  ulong totalLength;\n  char **argPtr;\n  size_t arg1Length;\n  size_t arg2Length;\n  char *outputString;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  argPtr = (char **)inputParams[0x1d];\n  outputString = *inputParams;\n  if ((argPtr != (char **)0x0) && ((*(byte *)((long)argPtr + 0x49) & 0x10) == 0)) {\n    arg1Length = strlen(*argPtr);\n    arg2Length = strlen(outputString);\n    totalLength = arg1Length + 3 + arg2Length;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    outputString = DAT_00127a30;\n  }\n  return outputString;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "generate_modified_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid freeMemoryBlocks_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127720;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_blocks_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "run_indirect_jump_00104020"
            },
            "code": "\nvoid runIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "run_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_source_file_00108f08",
                "param_1": "sourceManager",
                "param_2": "filename",
                "iVar1": "comparisonResult",
                "uVar2": "result",
                "puVar3": "fileNode",
                "puVar4": "currentNode",
                "lVar5": "loopCounter",
                "puVar6": "sourceList",
                "pcVar7": "currentFilename",
                "puVar8": "prevNode",
                "bVar9": "loopFlag"
            },
            "code": "\n\n\nundefined8 addSourceFile_00108f08(long sourceManager,char *filename)\n\n{\n  int comparisonResult;\n  undefined8 result;\n  undefined8 *fileNode;\n  undefined8 *currentNode;\n  long loopCounter;\n  undefined8 *sourceList;\n  char *currentFilename;\n  undefined8 *prevNode;\n  byte loopFlag;\n  \n  loopFlag = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(sourceManager + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (fileNode = *(undefined8 **)(*(long *)(sourceManager + 8) + 8); fileNode != (undefined8 *)0x0;\n        fileNode = (undefined8 *)*fileNode) {\n      comparisonResult = filename_cmp(fileNode[1],currentFilename);\n      if (comparisonResult == 0) goto LAB_00108fad;\n    }\n    fileNode = (undefined8 *)xmalloc(0x18);\n    sourceList = *(undefined8 **)(sourceManager + 0x10);\n    prevNode = fileNode;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)prevNode = 0;\n      prevNode = (undefined8 *)((long)prevNode + (ulong)loopFlag * -8 + 4);\n    }\n    fileNode[1] = currentFilename;\n    prevNode = (undefined8 *)*sourceList;\n    while (currentNode = prevNode, currentNode != (undefined8 *)0x0) {\n      sourceList = currentNode;\n      prevNode = (undefined8 *)*currentNode;\n    }\n    *sourceList = fileNode;\nLAB_00108fad:\n    *(undefined8 **)(sourceManager + 0x10) = fileNode;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_source_file_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_list_00114190",
                "param_1": "input_string",
                "param_2": "is_copied",
                "param_3": "flags",
                "uVar1": "flag",
                "plVar2": "current_pattern",
                "pplVar3": "next_entry",
                "iVar4": "compare_result",
                "uVar5": "error_message",
                "pplVar6": "current_entry",
                "pplVar7": "previous_entry",
                "pplVar8": "next_entry"
            },
            "code": "\nlong ** process_list_00114190(long *input_string,char is_copied,uint flags)\n\n{\n  uint flag;\n  long *current_pattern;\n  long **next_entry;\n  int compare_result;\n  undefined8 error_message;\n  long **current_entry;\n  long **previous_entry;\n  long **next_entry;\n  \n  previous_entry = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (is_copied == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_copied == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      current_entry = (long **)*previous_entry;\n      if (current_entry == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_entry = (long **)0x0;\n    }\n    else {\n      current_pattern = DAT_001278e0[1];\n      if (*(char *)current_pattern == '!') {\n        compare_result = fnmatch((char *)((long)current_pattern + 1),(char *)input_string,0);\n        current_entry = previous_entry;\n        if (compare_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      compare_result = fnmatch((char *)current_pattern,(char *)input_string,0);\n      if (compare_result != 0) goto LAB_001141e5;\n      current_entry = (long **)*previous_entry;\n      if (current_entry == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_entry + 0x14)) != 0) {\n      current_pattern = current_entry[1];\n      if (*(char *)current_pattern == '!') {\n        compare_result = fnmatch((char *)((long)current_pattern + 1),(char *)input_string,0);\n        if (compare_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_entry + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        compare_result = fnmatch((char *)current_pattern,(char *)input_string,0);\n        if ((previous_entry == (long **)0x0) && (compare_result == 0)) {\n          next_entry = (long **)*current_entry;\n          previous_entry = current_entry;\n          if (next_entry == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_entry = (long **)*current_entry;\n    current_entry = previous_entry;\n    if (next_entry != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    compare_result = strcmp((char *)DAT_001278e0[1],(char *)input_string);\n    if (compare_result == 0) {\nLAB_001143cd:\n      flag = *(uint *)((long)previous_entry + 0x14);\n      if ((((flag & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flag & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(error_message,input_string);\n      }\n      if ((((flag & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(error_message,input_string);\n      }\n      if ((((flag & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_entry + 0x14) = flag | flags;\n        return previous_entry;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(error_message,input_string);\n    }\n    previous_entry = (long **)*previous_entry;\n    if (previous_entry == (long **)0x0) goto LAB_001142a9;\n    compare_result = strcmp((char *)previous_entry[1],(char *)input_string);\n    if (compare_result == 0) goto LAB_001143cd;\n    next_entry = (long **)*previous_entry;\n    current_entry = (long **)0x0;\n    if (next_entry == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_entry = current_entry;\n      if (is_copied == '\\0') {\n        while (current_entry = next_entry, next_entry = previous_entry, next_entry = current_entry,\n              (flags & *(uint *)((long)current_entry + 0x14)) != 0) {\n          current_pattern = current_entry[1];\n          if (*(char *)current_pattern == '!') {\n            compare_result = fnmatch((char *)((long)current_pattern + 1),(char *)input_string,0);\n            if (compare_result == 0) goto LAB_0011438e;\n            next_entry = (long **)*current_entry;\n            if ((long **)*current_entry == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            compare_result = fnmatch((char *)current_pattern,(char *)input_string,0);\n            if ((previous_entry == (long **)0x0) && (compare_result == 0)) {\n              previous_entry = current_entry;\n              next_entry = (long **)*current_entry;\n              if ((long **)*current_entry == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_entry = (long **)*current_entry;\n              if ((long **)*current_entry == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        compare_result = strcmp((char *)next_entry[1],(char *)input_string);\n        next_entry = current_entry;\n        previous_entry = next_entry;\n        if (compare_result == 0) goto LAB_001143cd;\n      }\n      current_entry = next_entry;\n      next_entry = (long **)*next_entry;\n      previous_entry = current_entry;\n    } while (next_entry != (long **)0x0);\nLAB_001142a1:\n    if (is_copied != '\\0') {\nLAB_001142a9:\n      current_entry = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_entry + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_entry + 2) = 0;\n      *(uint *)((long)current_entry + 0x14) = flags;\n      current_entry[5] = (long *)0x0;\n      previous_entry = current_entry;\n      *current_entry = (long *)DAT_001278e0;\n      DAT_001278e0 = previous_entry;\n      current_entry[1] = input_string;\n      return current_entry;\n    }\n  }\nLAB_00114212:\n  if (previous_entry == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_entry + 2) = 1;\n  return previous_entry;\n}\n\n",
            "called": [
                "fnmatch",
                "dcgettext",
                "strcmp",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00115dc0",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_list_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "parse_build_attribute_notes_00116490",
                "param_2": "noteSize",
                "param_3": "noteName",
                "param_4": "noteData",
                "uVar1": "tmp1",
                "uVar2": "tmp2",
                "uVar3": "tmp3",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "var1",
                "lVar7": "var2",
                "uVar8": "tmp4",
                "in_RAX": "noteType",
                "uVar9": "tmp5",
                "uVar10": "tmp6",
                "uVar11": "tmp7",
                "uVar12": "tmp8",
                "__ptr": "buffer1",
                "uVar13": "tmp9",
                "unaff_RBX": "count",
                "unaff_RBP": "returnVal",
                "puVar14": "ptr2",
                "puVar15": "buffer2",
                "cVar16": "charVar",
                "puVar17": "buffer3",
                "puVar18": "buffer4",
                "in_R11": "noteDescSize",
                "unaff_R12": "noteDesc",
                "puVar19": "ptr3",
                "unaff_R13": "noteDescAligned",
                "__nmemb": "numElements",
                "unaff_R14": "array",
                "puVar20": "ptr4",
                "bVar21": "byteVar",
                "iVar22": "var3",
                "unaff_retaddr": "returnAddr",
                "param_7": "descSize",
                "param_8": "flag1",
                "param_9": "param9",
                "in_stack_00000020": "bufferSize",
                "in_stack_00000028": "noteArray",
                "in_stack_00000030": "bufferPtr",
                "in_stack_00000038": "flag2",
                "in_stack_00000040": "flag3",
                "in_stack_00000048": "errorMessage"
            },
            "code": "\nulong parseBuildAttributeNotes_00116490(undefined8 param_1,ulong noteSize,ulong noteName,long noteData)\n\n{\n  undefined8 tmp1;\n  undefined8 tmp2;\n  ulong tmp3;\n  bool flag;\n  ulong *ptr1;\n  int var1;\n  long var2;\n  undefined8 tmp4;\n  ulong noteType;\n  ulong tmp5;\n  ulong tmp6;\n  ulong tmp7;\n  ulong tmp8;\n  undefined *buffer1;\n  ulong tmp9;\n  ulong count;\n  ulong returnVal;\n  ulong *ptr2;\n  undefined *buffer2;\n  char charVar;\n  undefined *buffer3;\n  undefined *buffer4;\n  ulong noteDescSize;\n  ulong *noteDesc;\n  ulong *ptr3;\n  ulong noteDescAligned;\n  size_t numElements;\n  undefined8 *array;\n  ulong *ptr4;\n  byte byteVar;\n  int var3;\n  ulong returnAddr;\n  ulong descSize;\n  uint flag1;\n  ulong param9;\n  ulong bufferSize;\n  ulong *noteArray;\n  undefined *bufferPtr;\n  uint flag2;\n  uint flag3;\n  undefined8 *errorMessage;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  var2 = noteData;\n  tmp6 = returnVal;\n  tmp9 = noteDescAligned;\n  if (noteType == 0) {\n    if (noteSize == 0x100) {\n      noteDesc[7] = returnAddr;\n      tmp7 = returnAddr;\nLAB_001164af:\n      tmp5 = noteDescAligned;\n      tmp9 = noteDescAligned;\n      returnAddr = tmp7;\n    }\n    else {\n      noteDesc[7] = param9;\nLAB_0011669e:\n      tmp6 = returnVal;\n      tmp5 = returnVal;\n    }\nLAB_001164bb:\n    noteDesc[8] = tmp5;\n    if (*(char *)((noteDesc[3] - 1) + noteName) != '\\0') {\n      var2 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr3 = noteDesc + 9;\n    if (0xb < count) {\n      tmp5 = (**(code **)(array[1] + 0x40))(var2);\n      *ptr3 = tmp5;\n      tmp5 = (**(code **)(array[1] + 0x40))(var2 + 4);\n      noteDesc[10] = tmp5;\n      noteSize = (**(code **)(array[1] + 0x40))(var2 + 8);\n      noteName = *ptr3;\n      noteDesc[0xb] = noteSize;\n      noteType = noteDesc[10];\n      tmp5 = noteName + 3 & 0xfffffffffffffffc;\n      noteDesc[0xf] = tmp5;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        var2 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteSize - 0x100) {\n        var2 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      tmp7 = tmp5 + noteType + 0xc;\n      if (count < tmp7) {\n        var2 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteName < 2) {\n        var2 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      noteDesc[0xc] = var2 + 0xc;\n      noteDescSize = var2 + 0xc + tmp5;\n      noteDesc[0xd] = noteDescSize;\n      count = count + (-0xc - (tmp5 + noteType));\n      noteData = var2 + tmp7;\n      returnVal = tmp6;\n      noteDesc = ptr3;\n      noteDescAligned = tmp9;\n      if (noteName != 2) {\n        if (*(char *)(var2 + 0xc) == '$') {\n          if ((*(char *)(var2 + 0xd) == '\\x01') && (*(char *)(var2 + 0xe) == '1')) {\n            tmp6 = parseBuildAttributeNotes_00116490();\n            return tmp6;\n          }\n        }\n        else if ((((4 < noteName) && (*(char *)(var2 + 0xc) == 'G')) &&\n                 (*(char *)(var2 + 0xd) == 'A')) &&\n                ((*(char *)(var2 + 0xe) == '$' && (*(char *)(var2 + 0xf) == '\\x01')))) {\n          if (*(char *)(var2 + 0x10) == '2') {\n            tmp6 = parseBuildAttributeNotes_00116490();\n            return tmp6;\n          }\n          if (*(char *)(var2 + 0x10) == '3') {\n            tmp6 = parseBuildAttributeNotes_00116490();\n            return tmp6;\n          }\n          var2 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (count != 0) {\n      var2 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag2 | flag3 | flag1) == 0) {\n      tmp1 = *array;\n      tmp2 = *errorMessage;\n      tmp4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(tmp4,tmp1,tmp2);\nLAB_0011671b:\n      numElements = ((long)ptr3 - (long)noteArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteArray,numElements,0x48,FUN_0011a1b0);\n      for (ptr2 = noteArray; ptr2 < ptr3; ptr2 = ptr2 + 9) {\n        tmp6 = ptr2[2];\n        if (tmp6 != 0) {\n          tmp9 = ptr2[7];\n          tmp5 = ptr2[8];\n          ptr4 = ptr2;\n          var3 = 0;\n          if (tmp9 == tmp5) {\n            ptr2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr1 = ptr4;\n                ptr4 = ptr1 + -9;\n                if (ptr4 < noteArray) goto LAB_001167f5;\n                tmp7 = ptr1[-7];\n              } while (tmp7 == 0);\n              if ((*ptr4 != *ptr2) ||\n                 (var1 = memcmp((void *)ptr1[-6],(void *)ptr2[3],*ptr2), var1 != 0))\n              break;\n              tmp3 = ptr1[-2];\n              tmp8 = ptr1[-1];\n              if (tmp9 == tmp3) {\n                if (tmp5 == tmp8) {\n                  ptr2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (tmp5 <= tmp8) {\n                  ptr2[2] = 0;\n                  break;\n                }\n                if (tmp8 < tmp9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < tmp8) ||\n                     (tmp9 <= (tmp8 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((tmp6 == 0x101) == (tmp7 == 0x101)) {\n                  if (tmp8 <= tmp5) {\n                    tmp8 = tmp5;\n                  }\n                  if (tmp3 < tmp9) {\n                    tmp9 = tmp3;\n                  }\n                  ptr1[-1] = tmp8;\n                  ptr1[-2] = tmp9;\n                  ptr2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (tmp3 <= tmp9) goto LAB_001167a6;\n                if (tmp8 < tmp9) goto LAB_0010852c;\n                if (tmp5 < tmp9) {\n                  if ((0xfffffffffffffff0 < tmp5) || (tmp3 <= (tmp5 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (tmp5 != tmp8) goto LAB_001167b8;\n              }\nFUN_00116852:\n              flag = var3 < 0x11;\n              var3 = var3 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteArray,numElements,0x48,FUN_0011a250);\n      buffer1 = (undefined *)xmalloc(bufferSize * 2);\n      descSize = 0;\n      param9 = 0;\n      buffer4 = buffer1;\n      for (ptr2 = noteArray; ptr2 < ptr3; ptr2 = ptr2 + 9) {\n        if (ptr2[2] != 0) {\n          buffer3 = buffer4 + 4;\n          buffer2 = buffer4 + 0xc;\n          if ((ptr2[7] == param9) && (ptr2[8] == descSize)) {\n            (**(code **)(array[1] + 0x50))(*ptr2,buffer4);\n            (**(code **)(array[1] + 0x50))(0,buffer3);\n            (**(code **)(array[1] + 0x50))(ptr2[2],buffer4 + 8);\n            tmp9 = ptr2[6];\n            tmp6 = *ptr2;\n            buffer4 = (undefined *)ptr2[3];\n            buffer3 = buffer2;\n            for (tmp5 = tmp6; tmp5 != 0; tmp5 = tmp5 - 1) {\n              *buffer3 = *buffer4;\n              buffer4 = buffer4 + (ulong)byteVar * -2 + 1;\n              buffer3 = buffer3 + (ulong)byteVar * -2 + 1;\n            }\n            if (tmp6 < tmp9) {\n              for (var2 = tmp9 - tmp6; var2 != 0; var2 = var2 + -1) {\n                *buffer3 = 0;\n                buffer3 = buffer3 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            buffer4 = buffer2 + tmp9;\n          }\n          else {\n            (**(code **)(array[1] + 0x50))();\n            if (*(int *)(array[1] + 8) == 5) {\n              charVar = (*(char *)(array[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(array[1] + 0x50))(charVar,buffer3);\n            (**(code **)(array[1] + 0x50))(ptr2[2],buffer4 + 8);\n            tmp6 = *ptr2;\n            buffer4 = (undefined *)ptr2[3];\n            buffer3 = buffer2;\n            for (tmp9 = tmp6; tmp9 != 0; tmp9 = tmp9 - 1) {\n              *buffer3 = *buffer4;\n              buffer4 = buffer4 + (ulong)byteVar * -2 + 1;\n              buffer3 = buffer3 + (ulong)byteVar * -2 + 1;\n            }\n            tmp9 = ptr2[6];\n            if (tmp6 < tmp9) {\n              for (var2 = tmp9 - tmp6; var2 != 0; var2 = var2 + -1) {\n                *buffer3 = 0;\n                buffer3 = buffer3 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            var2 = array[1];\n            buffer2 = buffer2 + tmp9;\n            buffer4 = buffer2 + 8;\n            if ((*(int *)(var2 + 8) == 5) && (*(char *)(array[0x22] + 4) == '\\x02')) {\n              (**(code **)(var2 + 0x38))(ptr2[7],buffer2);\n              (**(code **)(array[1] + 0x38))(ptr2[8],buffer4);\n              buffer4 = buffer2 + 0x10;\n            }\n            else {\n              (**(code **)(var2 + 0x50))(ptr2[7],buffer2);\n              (**(code **)(array[1] + 0x50))(ptr2[8],buffer2 + 4);\n            }\n            param9 = ptr2[7];\n            descSize = ptr2[8];\n          }\n        }\n      }\n      tmp9 = (long)buffer4 - (long)buffer1;\n      tmp6 = tmp9;\n      buffer4 = buffer1;\n      if (tmp9 < bufferSize) {\n        for (; bufferSize = tmp9, tmp6 != 0; tmp6 = tmp6 - 1) {\n          *bufferPtr = *buffer4;\n          buffer4 = buffer4 + (ulong)byteVar * -2 + 1;\n          bufferPtr = bufferPtr + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(buffer1);\nLAB_001166f8:\n      free(noteArray);\n      return bufferSize;\n    }\n    if (((flag3 | flag1) == 0) || (flag2 == 0)) {\n      if (flag3 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    var2 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      tmp7 = (**(code **)(array[1] + 0x28))(noteDescSize);\n      tmp5 = (**(code **)(array[1] + 0x28))(noteDesc[4] + 8);\n      if (tmp5 < tmp7) {\n        tmp7 = tmp5;\n      }\nLAB_00116631:\n      if (noteDesc[2] == 0x100) {\n        if (tmp7 == 0) {\n          tmp7 = returnAddr;\n        }\n        noteName = *noteDesc;\n        noteDesc[7] = tmp7;\n        tmp9 = tmp5;\n        returnAddr = tmp7;\n        if (tmp5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (tmp7 == 0) {\n          tmp7 = param9;\n        }\n        noteName = *noteDesc;\n        noteDesc[7] = tmp7;\n        tmp6 = tmp5;\n        param9 = tmp7;\n        if (tmp5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        tmp7 = (**(code **)(array[1] + 0x40))(noteDescSize);\n        tmp5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        tmp6 = FUN_001086af();\n        return tmp6;\n      }\n    }\n    var2 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (var2 != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,array,errorMessage,var2);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetValue",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetValue;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    targetValue = *ptr;\n    ptr = ptr + 1;\n    if (targetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "free",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionData",
                "param_2": "endDebugFlag",
                "param_3": "unusedParam",
                "param_4": "returnCode",
                "lVar1": "currentBlock",
                "uVar2": "errorMsg",
                "pcVar3": "errMsgPtr",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionData,undefined8 endDebugFlag,undefined8 unusedParam,undefined8 returnCode)\n\n{\n  long currentBlock;\n  undefined8 errorMsg;\n  char *errMsgPtr;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (currentBlock = *(long *)(functionData + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errMsgPtr = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = endDebugFlag;\n      errorMsg = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errMsgPtr = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMsg = dcgettext(0,errMsgPtr,5);\n  fprintf(_stderr,\"%s\\n\",errorMsg);\n  errorMsg = 0;\nLAB_0010be86:\n  returnValue._8_8_ = returnCode;\n  returnValue._0_8_ = errorMsg;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "byteShift",
                "param_2": "unusedParameter",
                "param_3": "valueToStore",
                "param_4": "metadata",
                "puVar1": "allocatedMemory",
                "lVar2": "loopCounter",
                "puVar3": "dataPointer",
                "bVar4": "index",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDataStructure_00113da9(byte byteShift,undefined8 unusedParameter,undefined8 valueToStore,undefined8 metadata)\n\n{\n  undefined8 *allocatedMemory;\n  long loopCounter;\n  undefined8 *dataPointer;\n  byte index;\n  undefined result [16];\n  \n  index = 0;\n  result._0_8_ = FUN_00112904(8 - (uint)byteShift);\n  if (result._0_8_ != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    dataPointer = allocatedMemory + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)dataPointer = 0;\n      dataPointer = (undefined8 *)((long)dataPointer + (ulong)index * -8 + 4);\n    }\n    *allocatedMemory = valueToStore;\n    *(undefined8 **)(result._0_8_ + 0x10) = allocatedMemory;\n  }\n  result._8_8_ = metadata;\n  return result;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_1",
                "param_2": "record_2",
                "uVar1": "record_1_value"
            },
            "code": "\nint compare_records_0011a250(ulong *record_1,ulong *record_2)\n\n{\n  ulong record_1_value;\n  \n  record_1_value = record_1[2];\n  if (record_1_value == record_2[2]) {\n    if (record_2[7] <= record_1[7]) {\n      if (record_1[7] <= record_2[7]) {\n        if (record_2[8] < record_1[8]) {\n          return -1;\n        }\n        if (record_2[8] <= record_1[8]) {\n          if ((4 < *record_1) && (4 < *record_2)) {\n            if (*(char *)(record_1[3] + 3) != *(char *)(record_2[3] + 3)) {\n              return (int)*(char *)(record_1[3] + 3) - (int)*(char *)(record_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record_1_value == 0) || ((record_1_value != 0x100 && (record_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "flag",
                "param_4": "charVal",
                "param_5": "uintVal",
                "uVar1": "result",
                "lVar2": "value",
                "sVar3": "strLength",
                "uVar4": "memAlloc",
                "uVar5": "isNegative",
                "local_60": "buffer"
            },
            "code": "\nundefined4 processData_0010a69a(long data,undefined8 ptr,int flag,char charVal,uint uintVal)\n\n{\n  undefined4 result;\n  long value;\n  size_t strLength;\n  undefined8 memAlloc;\n  undefined isNegative;\n  char buffer [48];\n  \n  if (flag == 0) {\n    buffer[0] = '\\0';\n    isNegative = 0;\n    value = 0;\n  }\n  else {\n    value = FUN_00109c2e();\n    if (value < 0) {\n      return 0;\n    }\n    isNegative = 1;\n    sprintf(buffer,\"%ld=\",value);\n  }\n  strLength = strlen(buffer);\n  sprintf(buffer + strLength,\"%c%u\",(ulong)((-(uint)(charVal == '\\0') & 2) + 0x73),(ulong)uintVal);\n  result = FUN_00109b52(data,buffer,value,isNegative,uintVal);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  value = *(long *)(data + 0x60);\n  memAlloc = xmalloc(1);\n  *(undefined8 *)(value + 0x20) = memAlloc;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "FUN_00109c2e",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "section_index1",
                "lVar5": "section_index2",
                "uVar6": "result",
                "plVar7": "list_ptr"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long section_index1;\n  long section_index2;\n  undefined8 result;\n  long *list_ptr;\n  \n  section_index1 = FUN_00114190(*section_name,0,4);\n  if (section_index1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      section_index1 = FUN_00114190(*section_name,0,1);\n      section_index2 = FUN_00114190(*section_name,0,2);\n      if (section_index1 != 0) {\n        if (section_index2 != 0) {\n          current_section = *section_name;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(result,current_section);\n        }\n        if (section_index1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          list_ptr = DAT_001279b8;\n          do {\n            section_type = strcmp(current_section,(char *)list_ptr[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(result,current_section);\n            }\n            list_ptr = (long *)*list_ptr;\n          } while (list_ptr != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (section_index2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = FUN_0010829e();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = FUN_00113ede(section_name);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = FUN_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "dcgettext",
                "FUN_00114190",
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_00115dc0",
                "FUN_001163d0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_binary_data_00116030",
                "param_1": "binaryData",
                "param_2": "binarySize",
                "plVar1": "currentPointer",
                "lVar2": "currentValue",
                "lVar3": "value1",
                "lVar4": "value2",
                "iVar5": "errorCode",
                "in_RAX": "returnValue",
                "lVar6": "upperBound",
                "__ptr": "relocPointerArray",
                "lVar7": "relocPointerCount",
                "extraout_RAX": "outputValue",
                "lVar8": "loopIndex",
                "uStack_28": "stackValue"
            },
            "code": "\n\n\nundefined8 processBinaryData_00116030(undefined8 *binaryData,long binarySize)\n\n{\n  long *currentPointer;\n  long currentValue;\n  long value1;\n  long value2;\n  int errorCode;\n  undefined8 returnValue;\n  long upperBound;\n  void *relocPointerArray;\n  long relocPointerCount;\n  undefined8 outputValue;\n  long loopIndex;\n  undefined8 stackValue;\n  \n  if (*(long *)(binarySize + 0x60) == 0) {\n    return returnValue;\n  }\n  upperBound = bfd_get_reloc_upper_bound();\n  if (upperBound < 0) {\n    if ((upperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n      FUN_0011a110(*binaryData);\n                    \n      xexit(1);\n    }\n  }\n  else if (upperBound != 0) {\n    relocPointerArray = (void *)xmalloc();\n    relocPointerCount = bfd_canonicalize_reloc(binaryData,binarySize,relocPointerArray);\n    value2 = _DAT_00128680;\n    value1 = _DAT_00128568;\n    upperBound = _fwrite;\n    if (relocPointerCount < 0) {\n      FUN_0011a110(*binaryData);\n                    \n      xexit(1);\n    }\n    if (relocPointerCount != 0) {\n      loopIndex = 0;\n      do {\n        currentPointer = **(long ***)((long)relocPointerArray + loopIndex * 8);\n        if ((((currentPointer != (long *)0x0) && (currentValue = *currentPointer, currentValue != 0)) && (currentValue != upperBound)) &&\n           ((currentValue != value2 && (currentValue != value1)))) {\n          *(uint *)(currentValue + 0x18) = *(uint *)(currentValue + 0x18) | 0x20;\n        }\n        loopIndex = loopIndex + 1;\n      } while (relocPointerCount != loopIndex);\n    }\n    free(relocPointerArray);\n    return outputValue;\n  }\n  return stackValue;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "xexit",
                "xmalloc",
                "free",
                "FUN_001083b7",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_data_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "extract_and_process_string_00113ede",
                "param_1": "string_ptr",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 extract_and_process_string_00113ede(char **string_ptr)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_ptr == (char **)0x0) {\n    return 0;\n  }\n  string = *string_ptr;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "extract_and_process_string_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_undefined_type_0010c892",
                "param_1": "arg1",
                "param_2": "arg2",
                "cVar1": "result",
                "lVar2": "temp1",
                "lVar3": "temp2",
                "uVar4": "returnValue",
                "puVar5": "pointer",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processUndefinedType_0010c892(undefined8 arg1,long arg2)\n\n{\n  char result;\n  long temp1;\n  long temp2;\n  undefined8 returnValue;\n  undefined8 *pointer;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pointer = *(undefined8 **)(arg2 + 0x1a0); pointer != (undefined8 *)0x0;\n        pointer = (undefined8 *)*pointer) {\n      kind = *(int *)(pointer + 2);\n      temp2 = pointer[1];\n      if (kind != 0) {\n        if (temp2 != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        pointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (temp2 == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      temp1 = FUN_00112904(kind,0);\n      if (temp1 == 0) goto LAB_0010c910;\n      temp2 = FUN_0010c6be(arg1,temp2,temp1);\n      pointer[3] = temp2;\n      if (temp2 == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = FUN_0010c1c6();\n    if (result != '\\0') {\n      result = FUN_0010be1a(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904",
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_undefined_type_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid initializeData_00112904(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = inputValue1;\n  allocatedMemory[1] = inputValue2;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_00113d3a",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113c43",
                "FUN_00113b4a",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_0010c6be",
                "FUN_0010ee3f",
                "FUN_00113bfa",
                "FUN_00113da9",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_00113b71",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00107880",
                "FUN_00109a32",
                "FUN_00104ea2",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_00104966",
                "FUN_00108200",
                "FUN_00114460"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010914e",
                "FUN_0010d559",
                "FUN_0010afd5",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010c6be",
                "FUN_00115f50",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00115b70",
                "FUN_0010922b",
                "FUN_00114190",
                "FUN_0010c7a0",
                "FUN_00108898",
                "FUN_0011173a",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionArray",
                "uVar5": "numFunctions"
            },
            "code": "\nvoid execute_function_chain_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionArray;\n  uint numFunctions;\n  \n  functionArray = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(functionArray + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        index = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)functionArray[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)functionArray[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionArray[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionArray[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionArray[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionArray[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionArray[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionArray[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionArray[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionArray[tempIndex + 1])();\n            (*(code *)functionArray[tempIndex])();\n            (*(code *)functionArray[index])();\n            (*(code *)functionArray[tempIndex + -2])();\n            (*(code *)functionArray[tempIndex + -3])();\n            (*(code *)functionArray[tempIndex + -4])();\n            (*(code *)functionArray[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionArray = (long *)*functionArray;\n    } while (functionArray != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "create_formatted_string_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "number",
                "param_4": "data",
                "sVar1": "stringLength",
                "__s": "formattedString",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] createFormattedString_0010e842(undefined8 input,char *string,undefined8 number,undefined8 data)\n\n{\n  size_t stringLength;\n  char *formattedString;\n  undefined result [16];\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",string,number);\n  result._0_4_ = FUN_0010e2f0(input,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_pointer_00113cb9",
                "param_1": "inputValue",
                "lVar1": "pointer"
            },
            "code": "\nlong initializePointer_00113cb9(long inputValue)\n\n{\n  long pointer;\n  \n  if (inputValue != 0) {\n    pointer = FUN_00112904(0xe,0);\n    if (pointer == 0) {\n      pointer = 0;\n    }\n    else {\n      *(long *)(pointer + 0x10) = inputValue;\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "dataStruct",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "resultString1",
                "sVar2": "inputLength",
                "sVar3": "resultLength",
                "__s_00": "finalString"
            },
            "code": "\nundefined4 processData_0010eafe(long dataStruct,char *inputString,char flag)\n\n{\n  undefined4 uVar1;\n  char *resultString1;\n  size_t inputLength;\n  size_t resultLength;\n  char *finalString;\n  \n  if ((*(int *)(dataStruct + 0x1f8) == 0) && (*(long *)(dataStruct + 0x1e8) == -1)) {\n    resultString1 = (char *)FUN_00109b2f();\n    inputLength = strlen(inputString);\n    resultLength = strlen(resultString1);\n    finalString = (char *)xmalloc(inputLength + 3 + resultLength);\n    sprintf(finalString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),resultString1);\n    *(undefined8 *)(dataStruct + 0x1e8) = *(undefined8 *)(dataStruct + 0x10);\n    uVar1 = FUN_0010e2f0(dataStruct,0x24,0,0,finalString);\n    if ((char)uVar1 != '\\0') {\n      free(finalString);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e2f0",
                "xmalloc",
                "FUN_00109b2f",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "FUNC_00113df2"
            },
            "code": "\nvoid FUNC_00113df2(undefined4 param_1)\n\n{\n  FUN_00112904(4,param_1);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "FUNC_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "transform_data_0010a377",
                "param_1": "data_ptr",
                "cVar1": "flag",
                "__s": "source_string",
                "__s_00": "destination_string",
                "sVar3": "source_length",
                "sVar4": "destination_length",
                "__s_01": "combined_string",
                "uVar2": "result",
                "uVar5": "copy_flag"
            },
            "code": "\nundefined4 transformData_0010a377(long data_ptr)\n\n{\n  char flag;\n  undefined4 result;\n  char *source_string;\n  char *destination_string;\n  size_t source_length;\n  size_t destination_length;\n  char *combined_string;\n  undefined copy_flag;\n  \n  copy_flag = 1;\n  flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  source_string = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    copy_flag = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  destination_string = (char *)FUN_00109b2f(data_ptr);\n  source_length = strlen(source_string);\n  destination_length = strlen(destination_string);\n  combined_string = (char *)xmalloc(source_length + 3 + destination_length);\n  sprintf(combined_string,\"@%s,%s\",destination_string,source_string);\n  free(destination_string);\n  free(source_string);\n  result = FUN_00109b52(data_ptr,combined_string,0,copy_flag,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109b2f",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "transform_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "param_1": "data_addr",
                "param_2": "data_ptr",
                "param_3": "output_ptr",
                "param_4": "flag_ptr",
                "iVar1": "index",
                "pcVar2": "current_char",
                "cVar3": "current_char_value",
                "lVar4": "allocated_addr",
                "pcVar5": "current_ptr",
                "uVar6": "local_value",
                "bVar7": "is_looping",
                "local_50": "offset",
                "local_4c": "errorCode",
                "local_48": "size",
                "local_44": "iterations",
                "local_40": "temp_array"
            },
            "code": "\nundefined8 process_data_0010d882(long data_addr,char **data_ptr,long *output_ptr,undefined *flag_ptr)\n\n{\n  int index;\n  char *current_char;\n  char current_char_value;\n  long allocated_addr;\n  char *current_ptr;\n  ulong local_value;\n  bool is_looping;\n  uint offset;\n  undefined4 errorCode;\n  uint size;\n  int iterations;\n  undefined8 temp_array [2];\n  \n  current_char = *data_ptr;\n  errorCode = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_addr = xmalloc();\n    *output_ptr = allocated_addr;\n    *flag_ptr = 0;\n  }\n  offset = 0;\n  while( true ) {\n    current_ptr = *data_ptr;\n    current_char_value = *current_ptr;\n    if ((current_char_value == '_' || current_char_value == '\\0') || (current_char_value == 'e')) break;\n    if ((current_char_value == 'N') || (current_char_value == 'T')) {\n      *data_ptr = current_ptr + 1;\n      if (current_char_value == 'T') {\n        iterations = 1;\n      }\n      else {\n        current_char_value = FUN_00108ea1(data_ptr,&iterations);\n        if (current_char_value == '\\0') goto LAB_0010d958;\n      }\n      current_char_value = FUN_00108ea1(data_ptr,&size);\n      if ((current_char_value == '\\0') || (*(uint *)(data_addr + 0x28) <= size)) {\nLAB_0010d958:\n        FUN_0010911f(current_char);\n        return 0;\n      }\n      local_value = (ulong)size;\n      while (index = iterations + -1, is_looping = iterations != 0, iterations = index, is_looping) {\n        temp_array[0] = *(undefined8 *)(*(long *)(data_addr + 0x20) + local_value * 0x10);\n        current_char_value = FUN_0010d7d4(data_addr,temp_array,output_ptr,&offset,&errorCode);\n        if (current_char_value == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char_value = FUN_0010d7d4(data_addr,data_ptr,output_ptr,&offset,&errorCode);\n      if (current_char_value == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char_value != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)offset * 8) = 0;\n    if (*current_ptr != 'e') goto LAB_0010d9fa;\n    *flag_ptr = 1;\n  }\n  current_ptr = current_ptr + 1;\n  *data_ptr = current_ptr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_ptr >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_0010d7d4",
                "FUN_00108ea1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00109a32",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataStructurePtr",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "puVar1": "newDataBlockPtr",
                "pauVar2": "existingDataBlockPtr",
                "lVar3": "loopCounter",
                "puVar4": "tempPtr",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataStructurePtr) [16],undefined8 param2Value,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined4 *newDataBlockPtr;\n  undefined (*existingDataBlockPtr) [16];\n  long loopCounter;\n  undefined4 *tempPtr;\n  byte byteValue;\n  \n  byteValue = 0;\n  newDataBlockPtr = (undefined4 *)xmalloc(0x28);\n  tempPtr = newDataBlockPtr;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *tempPtr = 0;\n    tempPtr = tempPtr + (ulong)byteValue * -2 + 1;\n  }\n  existingDataBlockPtr = *dataStructurePtr;\n  *(undefined8 *)(newDataBlockPtr + 2) = param2Value;\n  newDataBlockPtr[5] = param3Value;\n  newDataBlockPtr[6] = param4Value;\n  if (existingDataBlockPtr == (undefined (*) [16])0x0) {\n    existingDataBlockPtr = (undefined (*) [16])xmalloc(0x10);\n    *existingDataBlockPtr = ZEXT816(0);\n    *dataStructurePtr = existingDataBlockPtr;\n    *(undefined (**) [16])(*existingDataBlockPtr + 8) = existingDataBlockPtr;\n  }\n  **(undefined8 **)(*existingDataBlockPtr + 8) = newDataBlockPtr;\n  *(undefined4 **)(*existingDataBlockPtr + 8) = newDataBlockPtr;\n  return newDataBlockPtr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_00112996",
                "FUN_0010bc80",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010c6be"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "recordInfoPtr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "returnValue",
                "puVar2": "unitPtr",
                "uVar3": "loopCounter",
                "puVar4": "newRecordPtr",
                "lVar5": "loopIndex",
                "puVar6": "tempPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long recordInfoPtr,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 returnValue;\n  undefined8 *unitPtr;\n  ulong loopCounter;\n  undefined4 *newRecordPtr;\n  long loopIndex;\n  undefined4 *tempPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(recordInfoPtr + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    loopIndex = *(long *)(recordInfoPtr + 0x28);\n    if ((loopIndex != 0) && (*(long *)(loopIndex + 8) == *(long *)(recordInfoPtr + 0x10))) {\n      loopCounter = 0;\n      do {\n        if (*(long *)(loopIndex + 0x10 + loopCounter * 8) == -1) {\n          unitPtr = (undefined8 *)(loopCounter & 0xffffffff);\n          *(undefined8 *)(loopIndex + 0x10 + (long)unitPtr * 8) = param2;\n          *(undefined8 *)(loopIndex + 0x60 + (long)unitPtr * 8) = param3;\n          goto LAB_0010c056;\n        }\n        loopCounter = loopCounter + 1;\n      } while (loopCounter != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    tempPtr = newRecordPtr;\n    for (loopIndex = 0x2c; loopIndex != 0; loopIndex = loopIndex + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    returnValue = *(undefined8 *)(recordInfoPtr + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = param2;\n    *(undefined8 *)(newRecordPtr + 2) = returnValue;\n    *(undefined8 *)(newRecordPtr + 0x18) = param3;\n    tempPtr = newRecordPtr + 6;\n    for (loopIndex = 0x48; loopIndex != 0; loopIndex = loopIndex + -1) {\n      *(undefined *)tempPtr = 0xff;\n      tempPtr = (undefined4 *)((long)tempPtr + (ulong)flag * -2 + 1);\n    }\n    unitPtr = *(undefined8 **)(recordInfoPtr + 0x28);\n    if (unitPtr == (undefined8 *)0x0) {\n      unitPtr = *(undefined8 **)(recordInfoPtr + 8);\n      unitPtr[2] = newRecordPtr;\n    }\n    else {\n      *unitPtr = newRecordPtr;\n    }\n    *(undefined4 **)(recordInfoPtr + 0x28) = newRecordPtr;\nLAB_0010c056:\n    returnValue = CONCAT71((int7)((ulong)unitPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **string)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*string,0);\n    if (matchResult == 0) {\n      *(undefined *)(string + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*string,0);\n    if (matchResult == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_00115d70",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_debug_parameter_0010bd62",
                "param_1": "function_data",
                "param_2": "param_ptr",
                "param_3": "arg_count",
                "param_4": "arg_type",
                "param_5": "next_entry",
                "puVar1": "prev_entry",
                "uVar2": "error_msg",
                "puVar3": "new_entry",
                "puVar4": "current_entry",
                "puVar6": "last_entry",
                "puVar7": "temp_ptr",
                "bVar8": "counter",
                "lVar5": "loop_counter"
            },
            "code": "\n\n\nundefined8\nrecord_debug_parameter_0010bd62(long function_data,long param_ptr,long arg_count,undefined4 arg_type,undefined8 next_entry)\n\n{\n  undefined8 *prev_entry;\n  undefined8 error_msg;\n  undefined4 *new_entry;\n  undefined8 *current_entry;\n  long loop_counter;\n  undefined8 *last_entry;\n  undefined4 *temp_ptr;\n  byte counter;\n  \n  counter = 0;\n  if (param_ptr == 0) {\n    return 0;\n  }\n  if (arg_count != 0) {\n    if ((*(long *)(function_data + 8) != 0) && (*(long *)(function_data + 0x18) != 0)) {\n      new_entry = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_entry;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      loop_counter = *(long *)(function_data + 0x18);\n      *(long *)(new_entry + 2) = param_ptr;\n      *(long *)(new_entry + 4) = arg_count;\n      new_entry[6] = arg_type;\n      prev_entry = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_entry + 8) = next_entry;\n      last_entry = (undefined8 *)(loop_counter + 8);\n      while (current_entry = prev_entry, current_entry != (undefined8 *)0x0) {\n        last_entry = current_entry;\n        prev_entry = (undefined8 *)*current_entry;\n      }\n      *last_entry = new_entry;\n      return 1;\n    }\n    error_msg = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_msg);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_00104ea2",
                "unaff_EBX": "status",
                "unaff_RBP": "statBuffer",
                "unaff_R12": "archivePath",
                "unaff_R13": "tempBuffer",
                "unaff_R15": "fileList",
                "unaff_retaddr": "returnAddress",
                "param_7": "archiveFormat",
                "param_8": "fileSize",
                "param_9": "tempDir",
                "param_10": "tempPath",
                "param_11": "openMode",
                "in_stack_00000030": "copyFlag",
                "param_18": "permission",
                "param_19": "archiveSize"
            },
            "code": "\nvoid copyArchive_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **ppcVar6;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int status;\n  stat *statBuffer;\n  char *pcVar15;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *tempBuffer;\n  char **fileList;\n  byte bVar17;\n  undefined8 returnAddress;\n  undefined8 *archiveFormat;\n  long *fileSize;\n  char *tempDir;\n  undefined8 *tempPath;\n  undefined8 openMode;\n  undefined8 copyFlag;\n  uint permission;\n  long archiveSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  ppcVar6 = (char **)bfd_openw(archivePath,openMode);\n  if (ppcVar6 == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(fileList,ppcVar6,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(fileList);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(ppcVar6);\n    ppcVar6 = fileList;\n    if (cVar1 == '\\0') {\n      FUN_001126c0(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (status == 0)) {\n      FUN_0011a350(archivePath,statBuffer);\n    }\n    lVar12 = bfd_openr(archivePath,openMode);\n    tempBuffer[2] = lVar12;\n    *fileSize = lVar12;\n    fileSize = (long *)(lVar12 + 0xf0);\n    fileList = (char **)bfd_openr_next_archived_file(tempPath,ppcVar6);\n    bfd_close(ppcVar6);\n    while ((DAT_00127a20 == 0 && (fileList != (char **)0x0))) {\n      pcVar10 = *fileList;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      statBuffer = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDir,&DAT_0011b47d);\n      iVar2 = stat(archivePath,statBuffer);\n      puVar8 = tempBuffer;\n      if (-1 < iVar2) {\n        lVar12 = FUN_0011a0e0(archivePath);\n        free(archivePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *fileList;\n        *puVar8 = tempBuffer;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archivePath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      status = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = statBuffer;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        ppcVar6 = (char **)fileList[0x1d];\n        if ((char **)fileList[0x1d] == (char **)0x0) {\n          ppcVar6 = fileList;\n        }\n        status = (**(code **)(ppcVar6[1] + 0x1e8))(fileList,statBuffer);\n        if (status != 0) {\n          pcVar10 = *fileList;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(uVar11,pcVar10);\n        }\n      }\n      tempBuffer = (undefined8 *)xmalloc(0x18);\n      tempBuffer[1] = archivePath;\n      *tempBuffer = puVar8;\n      tempBuffer[2] = 0;\n      cVar1 = bfd_check_format(fileList,1);\n      if (cVar1 != '\\0') {\n        if (copyFlag._7_1_ != '\\0') goto code_r0x00104ea2;\n        ppcVar6 = (char **)bfd_openw(archivePath,*(undefined8 *)fileList[1]);\n        if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,fileList,0,uVar11);\n      ppcVar6 = (char **)bfd_openw(archivePath,openMode);\n      if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)fileList[0x1d];\n      if ((char **)fileList[0x1d] == (char **)0x0) {\n        ppcVar3 = fileList;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(fileList);\n      lVar12 = archiveSize;\n      if (iVar2 == 0) {\n        if (archiveSize < 0) {\n          FUN_001125fa(fileList);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(fileList,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279c9 != '\\0') {\n              pcVar10 = *ppcVar6;\n              uVar11 = FUN_001125fa(fileList);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*ppcVar6,permission | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(ppcVar6);\n                ppcVar6 = fileList;\n                if (cVar1 == '\\0') {\n                  FUN_001126c0(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,fileList);\n              ppcVar3 = fileList;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,ppcVar6), ppcVar3 = ppcVar6, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            FUN_001126c0(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = FUN_001125fa(fileList);\n            FUN_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,fileList,0,0);\n      }\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 == '\\0') {\n        FUN_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *fileSize = 0;\n    pvVar4 = (void *)xstrdup(*archiveFormat);\n    if (DAT_00127a20 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(archiveFormat);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*tempPath);\n    cVar1 = bfd_close(tempPath);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      FUN_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempBuffer != (undefined8 *)0x0) {\n    if (tempBuffer[2] == 0) {\n      rmdir((char *)tempBuffer[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempBuffer[1]);\n    }\n    free((void *)tempBuffer[1]);\n    puVar8 = (undefined8 *)*tempBuffer;\n    free(tempBuffer);\n    tempBuffer = puVar8;\n  }\n  rmdir(tempDir);\n  free(tempDir);\n  return;\n}\n\n",
            "called": [
                "bfd_bread",
                "dcgettext",
                "bfd_seek",
                "bfd_bwrite",
                "FUN_001126c0",
                "FUN_0011a350",
                "xmalloc",
                "bfd_openr_next_archived_file",
                "FUN_00119ed0",
                "bfd_close",
                "FUN_00114e50",
                "rmdir",
                "bfd_check_format",
                "free",
                "printf",
                "bfd_close",
                "bfd_close_all_done",
                "FUN_00114b84",
                "bfd_close_all_done",
                "FUN_00104ea2",
                "concat",
                "chmod",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_openr",
                "unlink",
                "bfd_openw",
                "xstrdup",
                "__errno_location",
                "FUN_0011a110",
                "strerror",
                "stat",
                "FUN_001125fa",
                "FUN_0011a0e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0011378f",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010e2f0",
                "FUN_001126c0",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_object_00113ce0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "lVar1": "result",
                "plVar2": "allocatedObject",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\nallocateAndInitializeObject_00113ce0(long inputParam1,long inputParam2,undefined inputParam3,undefined8 inputParam4,undefined8 inputParam5)\n\n{\n  long result;\n  long *allocatedObject;\n  undefined returnValue [16];\n  \n  if (inputParam1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocatedObject = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocatedObject + 0x11) = 0;\n      *allocatedObject = inputParam1;\n      *(undefined4 *)((long)allocatedObject + 0x14) = 0;\n      allocatedObject[1] = inputParam2;\n      *(undefined *)(allocatedObject + 2) = inputParam3;\n      *(long **)(result + 0x10) = allocatedObject;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  returnValue._8_8_ = inputParam5;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00112904",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_object_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "start",
                "unaff_R14": "end",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "errorContext"
            },
            "code": "\nvoid readAndResize_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 errorContext;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long start;\n  long end;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + start),1,end - start,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      errorContext = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,errorContext);\n    }\n    start = start + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (start == end) {\n      end = start * 2;\n      errorContext = xrealloc(*(undefined8 *)(buffer + 0x20),end);\n      *(undefined8 *)(buffer + 0x20) = errorContext;\n    }\n  }\n  *(long *)(buffer + 0x18) = start;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00119dd0",
                "ferror",
                "FUN_00114dc7",
                "xrealloc",
                "feof",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_data_00119f70",
                "param_1": "header_data",
                "param_2": "output_file",
                "uVar1": "header_size",
                "cVar2": "success",
                "iVar3": "arch_index",
                "uVar4": "header_arch",
                "uVar5": "data_arch",
                "__format": "format_string",
                "lVar6": "buffer_size",
                "uVar7": "header",
                "lVar8": "buffer"
            },
            "code": "\nundefined4 process_data_00119f70(undefined8 *header_data,undefined8 *output_file)\n\n{\n  undefined4 header_size;\n  char success;\n  int arch_index;\n  undefined8 header_arch;\n  undefined8 data_arch;\n  char *format_string;\n  long buffer_size;\n  undefined8 header;\n  long buffer;\n  \n  arch_index = *(int *)((long)output_file + 0xc) + 1;\n  *(int *)((long)output_file + 0xc) = arch_index;\n  if ((ulong)output_file[2] < (ulong)((long)arch_index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < arch_index) {\n      buffer_size = (long)arch_index * 0xc0;\n    }\n    buffer = xrealloc(output_file[3]);\n    output_file[3] = buffer;\n    memset((void *)(buffer + output_file[2]),0,buffer_size - output_file[2]);\n    output_file[2] = buffer_size;\n  }\n  header_size = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output_file + 0xc) * 0x60 + output_file[3] + -0x60) = *header_data;\n  header_arch = FUN_00114e00(header_size);\n  data_arch = FUN_00114e00(*(undefined4 *)(header_data + 2));\n  header = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header,data_arch,header_arch);\n  buffer_size = bfd_openw(*output_file,*header_data);\n  if (buffer_size == 0) {\n    FUN_0011a110(*output_file);\n    *(undefined4 *)(output_file + 1) = 1;\n  }\n  else {\n    arch_index = 2;\n    success = bfd_set_format(buffer_size,1);\n    if (success == '\\0') {\n      arch_index = bfd_get_error();\n      if (arch_index != 5) {\n        FUN_0011a110(*header_data);\n        *(undefined4 *)(output_file + 1) = 1;\n      }\n    }\n    else {\n      do {\n        success = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,arch_index,0);\n        if (success != '\\0') {\n          header = bfd_printable_arch_mach(arch_index,0);\n          printf(\"  %s\\n\",header);\n          *(undefined *)\n           ((long)*(int *)((long)output_file + 0xc) * 0x60 + output_file[3] + -0x58 + (ulong)(arch_index - 2)) =\n               1;\n        }\n        arch_index = arch_index + 1;\n      } while (arch_index != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(output_file + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a110",
                "bfd_printable_arch_mach",
                "FUN_00114e00",
                "bfd_set_format",
                "printf",
                "xrealloc",
                "FUN_001053d5",
                "memset",
                "bfd_close_all_done",
                "bfd_openw",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "extract_and_save_data_00115a90",
                "param_1": "file_descriptor_in",
                "param_2": "file_path",
                "param_3": "permission_info",
                "iVar1": "original_errno_value",
                "iVar2": "result_value",
                "__fd": "file_descriptor_out",
                "_Var3": "current_file_position",
                "uVar4": "bytes_read_or_error",
                "sVar5": "bytes_written",
                "piVar6": "errno_pointer",
                "local_2038": "buffer"
            },
            "code": "\nulong extract_and_save_data_00115a90(int file_descriptor_in,char *file_path,long permission_info)\n\n{\n  int original_errno_value;\n  int file_descriptor_out;\n  int result_value;\n  __off_t current_file_position;\n  ulong bytes_read_or_error;\n  size_t bytes_written;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor_in) && (current_file_position = lseek(file_descriptor_in,0,0), current_file_position == 0)) {\n    file_descriptor_out = open(file_path,0x201);\n    if (file_descriptor_out < 0) {\n      bytes_read_or_error = FUN_00108237();\n      return bytes_read_or_error;\n    }\n    do {\n      bytes_read_or_error = read(file_descriptor_in,buffer,0x2000);\n      result_value = (int)bytes_read_or_error;\n      if (result_value < 1) {\n        errno_pointer = __errno_location();\n        original_errno_value = *errno_pointer;\n        fchmod(file_descriptor_out,*(__mode_t *)(permission_info + 0x18));\n        close(file_descriptor_in);\n        close(file_descriptor_out);\n        if (result_value != 0) {\n          *errno_pointer = original_errno_value;\n          return 0xffffffff;\n        }\n        return bytes_read_or_error & 0xffffffff;\n      }\n      bytes_written = write(file_descriptor_out,buffer,(long)result_value);\n    } while (bytes_written == (long)result_value);\n    errno_pointer = __errno_location();\n    result_value = *errno_pointer;\n    close(file_descriptor_in);\n    close(file_descriptor_out);\n    *errno_pointer = result_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108237",
                "close",
                "fchmod",
                "write",
                "read",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "extract_and_save_data_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_handle_errors_00108200",
                "unaff_RBP": "sourceFilePath",
                "unaff_R12B": "deleteSourceFile",
                "unaff_R13": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "auVar3": "returnValue",
                "uVar2": "errorString"
            },
            "code": "\nundefined  [16] copyFileAndHandleErrors_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorString;\n  char *sourceFilePath;\n  char deleteSourceFile;\n  ulong errorFlag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(errorString);\n  unlink(sourceFilePath);\n  if (deleteSourceFile != '\\0') {\n    FUN_0011a350();\n  }\n  returnValue._0_8_ = errorFlag & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_0011a350",
                "FUN_00119ed0",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_handle_errors_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 287909,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}