{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_relocation_00103c00",
                "param_1": "paramPtr",
                "param_2": "paramValue",
                "param_3": "paramArray",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "ptrVar1",
                "auVar2": "auxVar2",
                "lVar3": "lenVar",
                "uVar4": "updateVar4",
                "uVar5": "updateVar5"
            },
            "code": "\nundefined8\nupdateRelocation_00103c00(undefined8 *paramPtr,long paramValue,undefined (*paramArray) [16],undefined8 param4,\n            undefined8 param5)\n\n{\n  undefined8 *ptrVar1;\n  undefined auxVar2 [16];\n  long lenVar;\n  undefined8 updateVar4;\n  undefined8 updateVar5;\n  \n  **(long **)*paramArray = paramValue;\n  if ((*(byte *)(paramValue + 0x24) & 4) == 0) {\n    **(undefined8 **)(*paramArray + 8) = 0;\n    **(undefined8 **)paramArray[1] = 0;\n  }\n  else {\n    lenVar = bfd_get_reloc_upper_bound();\n    if (-1 < lenVar) {\n      ptrVar1 = *(undefined8 **)(*paramArray + 8);\n      updateVar4 = xmalloc(lenVar);\n      updateVar5 = *(undefined8 *)(paramArray[1] + 8);\n      *ptrVar1 = updateVar4;\n      ptrVar1 = *(undefined8 **)paramArray[1];\n      updateVar5 = bfd_canonicalize_reloc(paramPtr,paramValue,**(undefined8 **)(*paramArray + 8),updateVar5);\n      *ptrVar1 = updateVar5;\n      if (-1 < **(long **)paramArray[1]) goto LAB_00103c7c;\n    }\n    print_error_and_exit_00106530(*paramPtr);\n  }\nLAB_00103c7c:\n  lenVar = *(long *)(*paramArray + 8) + 8;\n  *(long *)paramArray[1] = *(long *)paramArray[1] + 8;\n  auxVar2._8_4_ = (int)lenVar;\n  auxVar2._0_8_ = *(long *)*paramArray + 8;\n  auxVar2._12_4_ = (int)((ulong)lenVar >> 0x20);\n  *paramArray = auxVar2;\n  return param5;\n}\n\n",
            "called": [
                "FUN_00106530",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_relocation_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "printWidth",
                "uVar9": "maskedRBX",
                "cVar1": "isUndefined",
                "pcVar10": "typeString",
                "uVar2": "typeCode",
                "lVar7": "decodedPointer",
                "bVar8": "typeIndex",
                "iVar3": "errorVal",
                "piVar5": "errnoPtr",
                "uVar6": "errorMessage",
                "unaff_RBX": "RBX"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefined;\n  ushort typeCode;\n  int errorVal;\n  long *printWidth;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  long decodedPointer;\n  ulong RBX;\n  byte typeIndex;\n  ulong maskedRBX;\n  char *typeString;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  maskedRBX = RBX & 0xffffffff;\n  print_error_message_00106300(printWidth,maskedRBX);\n  print_formatted_string_00104740(\"%-20s|\",printWidth,0,maskedRBX);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*printWidth);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      decodedPointer = *(long *)(printWidth[3] + 0x30);\n      isUndefined = *(char *)(decodedPointer + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        typeString = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        typeString = \"Block\";\n      }\n      else if (*(ushort *)(decodedPointer + 0x26) == 0) {\n        typeString = \"None\";\n      }\n      else {\n        typeCode = *(ushort *)(decodedPointer + 0x26) >> 4 & 3;\n        if (typeCode == 2) {\n          typeString = \"Function\";\n        }\n        else if (typeCode == 3) {\n          typeString = \"Array\";\n        }\n        else {\n          if (typeCode != 1) {\n            free(DAT_0010b730);\n            typeCode = *(ushort *)(decodedPointer + 0x26);\n            typeIndex = *(byte *)(decodedPointer + 0x28);\n            typeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            errorVal = asprintf(&DAT_0010b730,typeString,(ulong)typeIndex,(ulong)typeCode);\n            typeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeIndex = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(typeIndex) {\n    case 0:\n      typeString = \"NOTYPE\";\n      break;\n    case 1:\n      typeString = \"OBJECT\";\n      break;\n    case 2:\n      typeString = \"FUNC\";\n      break;\n    case 3:\n      typeString = \"SECTION\";\n      break;\n    case 4:\n      typeString = \"FILE\";\n      break;\n    case 5:\n      typeString = \"COMMON\";\n      break;\n    case 6:\n      typeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeString = \"<processor specific>: %d\";\n      if ((2 < typeIndex - 0xd) && (typeString = \"<OS specific>: %d\", 2 < typeIndex - 10)) {\n        typeString = \"<unknown>: %d\";\n      }\n      typeString = (char *)dcgettext(0,typeString,5);\n      errorVal = asprintf(&DAT_0010b728,typeString,(ulong)typeIndex);\n      typeString = DAT_0010b728;\njoined_r0x00103964:\n      if (errorVal < 0) {\n        errnoPtr = __errno_location();\n        errorMessage = xstrerror(*errnoPtr);\n        print_error_message_00106300(&DAT_0010712d,errorMessage);\nLAB_00103983:\n        typeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeString);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  decodedPointer = printWidth[2];\n  if ((decodedPointer != 0) || (decodedPointer = printWidth[3], decodedPointer != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(decodedPointer + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "initialize_output_format_00104370",
                "param_1": "format_type",
                "param_2": "param_value",
                "uVar1": "error_message",
                "ppuVar2": "initialized_param"
            },
            "code": "\nundefined ** initialize_output_format_00104370(undefined *format_type,undefined8 param_value)\n\n{\n  undefined8 error_message;\n  undefined **initialized_param;\n  \n  switch(*format_type) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    error_message = dcgettext(0,\"%s: invalid output format\",5);\n    print_error_message_00106300(error_message,format_type);\n    error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_formatted_error_message_00106400(error_message);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    initialized_param = (undefined **)initialize_param_00104397(format_type,param_value,3);\n    return initialized_param;\n  case 0x50:\n  case 0x70:\n    initialized_param = (undefined **)initialize_param_00104397(format_type,param_value,2);\n    return initialized_param;\n  case 0x53:\n  case 0x73:\n    initialized_param = (undefined **)initialize_param_00104397(format_type,param_value,1);\n    return initialized_param;\n  }\n}\n\n",
            "called": [
                "FUN_00106300",
                "FUN_00104397",
                "caseD_4a",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "initialize_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103c00",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formats",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formats)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "fputc",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_two_values_001036a7",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "printf": "printFormatted"
            },
            "code": "\nvoid printTwoValues_001036a7(undefined8 *value1,undefined8 *value2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (value1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*value1);\n    }\n    printf(\"%s:\",*value2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_two_values_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "fileName",
                "pcVar1": "message"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 fileName)\n\n{\n  char *message;\n  \n  message = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    message = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message,fileName);\n  message = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    message = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "validate_binary_00102fc3",
                "param_1": "param1",
                "param_2": "param2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "result1",
                "uVar3": "flag",
                "lVar4": "ptr1",
                "lVar5": "ptr2",
                "sVar6": "string1_length",
                "sVar7": "string2_length",
                "pcVar8": "found1",
                "pcVar9": "found2",
                "uVar10": "string_comparison_result1",
                "uVar11": "string_comparison_result2",
                "uVar12": "offset1",
                "uVar13": "global_variable",
                "unaff_R13": "offset2",
                "bVar14": "comparison_result"
            },
            "code": "\nulong validateBinary_00102fc3(undefined8 param1,undefined8 param2)\n\n{\n  char cVar1;\n  ulong result1;\n  char *string1;\n  char *string2;\n  uint flag;\n  long ptr1;\n  long ptr2;\n  size_t string1_length;\n  size_t string2_length;\n  char *found1;\n  char *found2;\n  ulong string_comparison_result1;\n  ulong string_comparison_result2;\n  ulong offset1;\n  undefined8 global_variable;\n  long offset2;\n  bool comparison_result;\n  \n  global_variable = *DAT_0010b780;\n  print_error_and_exit_00106530();\n  ptr1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,global_variable,DAT_0010b770);\n  ptr2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param2,DAT_0010b768);\n  if ((ptr1 == 0) || (offset2 = ptr2, ptr2 == 0)) {\n    ptr2 = print_error_and_exit_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(ptr1 + 0x20) == 0x10c2a8) || (*(long *)(ptr2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  string_comparison_result1 = *(ulong *)(*(long *)(ptr1 + 0x20) + 0x30);\n  result1 = *(ulong *)(*(long *)(ptr2 + 0x20) + 0x30);\n  offset1 = *(long *)(ptr1 + 0x10) + string_comparison_result1;\n  string_comparison_result2 = *(long *)(offset2 + 0x10) + result1;\n  comparison_result = offset1 < string_comparison_result2;\n  if ((offset1 != string_comparison_result2) || (comparison_result = string_comparison_result1 < result1, string_comparison_result1 != result1)) {\n    return (ulong)(-(uint)comparison_result | 1);\n  }\n  string1 = *(char **)(ptr1 + 8);\n  string2 = *(char **)(offset2 + 8);\n  string1_length = strlen(string1);\n  string2_length = strlen(string2);\n  found1 = strstr(string1,\"gnu_compiled\");\n  if (found1 == (char *)0x0) {\n    found2 = strstr(string1,\"gcc2_compiled\");\n    found1 = strstr(string2,\"gnu_compiled\");\n    if ((found1 == (char *)0x0) && (found1 = strstr(string2,\"gcc2_compiled\"), found1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (found2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    found1 = strstr(string2,\"gnu_compiled\");\n    if (found1 == (char *)0x0) {\n      found2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (found2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(offset2 + 0x18) & 0x4000;\n  if ((*(byte *)(ptr1 + 0x19) & 0x40) == 0) {\n    if ((string1_length < 3) || (string1[string1_length - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((string2_length < 3) || (string2[string2_length - 2] != '.')) goto LAB_00103202;\n      comparison_result = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[string1_length - 1];\n    comparison_result = cVar1 == 'o' || cVar1 == 'a';\n    if (flag == 0) {\n      if ((string2_length < 3) || (string2[string2_length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (string2_length < 3) {\n      return 0xffffffff;\n    }\n    if (string2[string2_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    comparison_result = true;\nLAB_001031e7:\n    if ((string2[string2_length - 1] != 'o') && (string2[string2_length - 1] != 'a')) {\n      if (comparison_result) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!comparison_result) {\n    return 1;\n  }\nLAB_00103202:\n  string_comparison_result1 = compare_strings_00104fa0(global_variable,param2);\n  return string_comparison_result1;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "validate_binary_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol",
                "param_2": "info",
                "cVar1": "isUndefinedSymclass",
                "uVar2": "symclass",
                "iVar3": "result",
                "piVar4": "errnoPtr",
                "uVar5": "errorStr",
                "lVar6": "dataAddr",
                "bVar7": "typeByte",
                "pcVar8": "typeName"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbol,undefined8 info)\n\n{\n  char isUndefinedSymclass;\n  ushort symclass;\n  int result;\n  int *errnoPtr;\n  undefined8 errorStr;\n  long dataAddr;\n  byte typeByte;\n  char *typeName;\n  \n  print_formatted_string_00104740(\"%-20s|\",symbol,0,info);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (isUndefinedSymclass == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*symbol);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol[2] == 0) {\n    if (symbol[3] != 0) {\n      dataAddr = *(long *)(symbol[3] + 0x30);\n      isUndefinedSymclass = *(char *)(dataAddr + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        typeName = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        typeName = \"Block\";\n      }\n      else if (*(ushort *)(dataAddr + 0x26) == 0) {\n        typeName = \"None\";\n      }\n      else {\n        symclass = *(ushort *)(dataAddr + 0x26) >> 4 & 3;\n        if (symclass == 2) {\n          typeName = \"Function\";\n        }\n        else if (symclass == 3) {\n          typeName = \"Array\";\n        }\n        else {\n          if (symclass != 1) {\n            free(DAT_0010b730);\n            symclass = *(ushort *)(dataAddr + 0x26);\n            typeByte = *(byte *)(dataAddr + 0x28);\n            typeName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&DAT_0010b730,typeName,(ulong)typeByte,(ulong)symclass);\n            typeName = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeByte = *(byte *)(symbol[2] + 0x48) & 0xf;\n    switch(typeByte) {\n    case 0:\n      typeName = \"NOTYPE\";\n      break;\n    case 1:\n      typeName = \"OBJECT\";\n      break;\n    case 2:\n      typeName = \"FUNC\";\n      break;\n    case 3:\n      typeName = \"SECTION\";\n      break;\n    case 4:\n      typeName = \"FILE\";\n      break;\n    case 5:\n      typeName = \"COMMON\";\n      break;\n    case 6:\n      typeName = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeName = \"<processor specific>: %d\";\n      if ((2 < typeByte - 0xd) && (typeName = \"<OS specific>: %d\", 2 < typeByte - 10)) {\n        typeName = \"<unknown>: %d\";\n      }\n      typeName = (char *)dcgettext(0,typeName,5);\n      result = asprintf(&DAT_0010b728,typeName,(ulong)typeByte);\n      typeName = DAT_0010b728;\njoined_r0x00103964:\n      if (result < 0) {\n        errnoPtr = __errno_location();\n        errorStr = xstrerror(*errnoPtr);\n        print_error_message_00106300(&DAT_0010712d,errorStr);\nLAB_00103983:\n        typeName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeName);\n  }\n  if (symbol[2] == 0) {\n    if (symbol[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  dataAddr = symbol[2];\n  if ((dataAddr != 0) || (dataAddr = symbol[3], dataAddr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(dataAddr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext",
                "free",
                "xstrerror",
                "FUN_00104740",
                "__errno_location",
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "param_4": "string3"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 string3)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,string3);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_strings_00105110",
                "param_1": "string_array",
                "param_2": "section_info",
                "param_4": "program_name",
                "__ptr": "ptr",
                "__s1": "name",
                "pplVar1": "section_entry",
                "plVar2": "relocation_entry",
                "lVar3": "entry_address",
                "puVar4": "tmp_ptr",
                "cVar5": "tmp_char",
                "iVar6": "tmp_int",
                "pvVar7": "tmp_ptr2",
                "lVar8": "tmp_long",
                "uVar9": "tmp_uint",
                "lVar10": "tmp_long2",
                "local_b4": "tmp_uint2",
                "local_b0": "tmp_buffer",
                "local_a8": "buffer",
                "local_a0": "param_3_copy",
                "local_98": "section_ptr",
                "local_90": "relocation_ptr",
                "local_88": "relocation_array",
                "pvStack_80": "relocation_address_array",
                "pvStack_78": "relocation_buffer",
                "pvStack_70": "relocation_buffer2",
                "local_68": "char_array",
                "local_60": "char_value"
            },
            "code": "\n\n\nvoid print_strings_00105110(undefined8 *string_array,long *section_info,undefined8 param_3,undefined8 *program_name)\n\n{\n  void *ptr;\n  char *name;\n  long **section_entry;\n  long *relocation_entry;\n  long entry_address;\n  undefined8 *tmp_ptr;\n  char tmp_char;\n  int tmp_int;\n  void *tmp_ptr2;\n  long tmp_long;\n  uint tmp_uint;\n  long tmp_long2;\n  uint tmp_uint2;\n  undefined tmp_buffer [8];\n  undefined *buffer;\n  undefined8 param_3_copy;\n  long *section_ptr;\n  long *relocation_ptr;\n  void *relocation_array;\n  void *relocation_address_array;\n  void *relocation_buffer;\n  void *relocation_buffer2;\n  undefined char_array [8];\n  char char_value;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == print_strings_00105110_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (program_name != (undefined8 *)0x0) {\n        printf(\"%s:\",*program_name);\n      }\n      printf(\"%s:\",*string_array);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(program_name,string_array);\n  }\n  buffer = char_array;\n  (**(code **)(string_array[1] + 0x218))(string_array,section_info,buffer);\n  tmp_uint = *(uint *)(section_info + 3);\n  tmp_char = char_value;\n  if (((((char_value == 'i') && ((tmp_uint & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (tmp_char = *DAT_0010b7c8, (tmp_uint & 2) == 0)))) &&\n     (tmp_char = char_value, DAT_0010b7c8[1] != '\\0')) {\n    tmp_char = DAT_0010b7c8[1];\n  }\n  char_value = tmp_char;\n  param_3_copy = param_3;\n  if ((tmp_uint & 0x200100) != 0) goto LAB_00103330;\n  tmp_long = *section_info;\n  tmp_int = *(int *)(*(long *)(tmp_long + 8) + 8);\n  if (((tmp_uint & 0x200000) == 0) && (tmp_int == 5)) {\n    section_ptr = section_info;\n    if (*(long *)(tmp_long + 0x110) == 0) {\n      section_ptr = (long *)0x0;\n    }\n  }\n  else {\n    section_ptr = (long *)0x0;\n    if (((tmp_int - 2U & 0xfffffffd) == 0) && (relocation_ptr = section_info, *(long *)(tmp_long + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  relocation_ptr = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&buffer,string_array);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == string_array) {\n      tmp_ptr = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = tmp_ptr;\n      tmp_ptr2 = DAT_0010b750;\n      if (section_info[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == string_array) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          tmp_uint = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; tmp_uint < DAT_0010b748; tmp_uint = tmp_uint + 1) {\n              ptr = *(void **)((long)tmp_ptr2 + (ulong)tmp_uint * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(tmp_ptr2);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(string_array + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          relocation_buffer2 = DAT_0010b758;\n          relocation_array = DAT_0010b740;\n          relocation_address_array = DAT_0010b750;\n          relocation_buffer = DAT_0010b738;\n          bfd_map_over_sections(string_array,update_relocation_00103c00,&relocation_array);\n          _DAT_0010b7b0 = string_array;\n        }\n        name = (char *)section_info[1];\n        for (tmp_uint = 0; tmp_uint < DAT_0010b748; tmp_uint = tmp_uint + 1) {\n          tmp_long = (ulong)tmp_uint * 8;\n          tmp_ptr2 = DAT_0010b738;\n          for (tmp_long2 = 0;\n              *(long *)((long)tmp_ptr2 + tmp_long) != tmp_long2 && tmp_long2 <= *(long *)((long)tmp_ptr2 + tmp_long)\n              ; tmp_long2 = tmp_long2 + 1) {\n            section_entry = *(long ***)(*(long *)((long)DAT_0010b750 + tmp_long) + tmp_long2 * 8);\n            relocation_entry = *section_entry;\n            if ((((relocation_entry != (long *)0x0) &&\n                 (entry_address = *relocation_entry, *(long *)(entry_address + 0x20) == section_info[4])) &&\n                (*(long *)(entry_address + 0x10) == section_info[2])) &&\n               (((tmp_int = strcmp(name,*(char **)(entry_address + 8)), tmp_int == 0 &&\n                 (tmp_char = (**(code **)(string_array[1] + 0x240))\n                                    (string_array,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + tmp_long),section_entry[1],\n                                     &relocation_array,tmp_buffer,&tmp_uint2,0), tmp_ptr2 = DAT_0010b738,\n                 tmp_char != '\\0')) && (relocation_array != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",relocation_array,(ulong)tmp_uint2);\n              tmp_uint = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(section_info[4] + 0xe0) == string_array) {\n        tmp_char = (**(code **)(string_array[1] + 0x250))(string_array,DAT_0010b758,section_info,&relocation_array,&tmp_uint2);\n        if (((tmp_char != '\\0') ||\n            (tmp_char = (**(code **)(string_array[1] + 0x240))\n                               (string_array,DAT_0010b758,section_info[4],section_info[2],&relocation_array,tmp_buffer,\n                                &tmp_uint2,0), tmp_char != '\\0')) &&\n           ((relocation_array != (void *)0x0 && (tmp_uint2 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    tmp_long = (**(code **)(string_array[1] + 0x1f8))(string_array);\n    if (tmp_long < 0) {\n      find_matching_entries_00103463(tmp_long);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    tmp_long = (**(code **)(string_array[1] + 0x200))(string_array,DAT_0010b758);\n    tmp_ptr = string_array;\n    if (-1 < tmp_long) goto LAB_00105288;\n    print_error_and_exit_00106530(*string_array);\nLAB_00103330:\n    section_ptr = (long *)0x0;\n    relocation_ptr = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&buffer,string_array);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001053c0",
                "printf",
                "FUN_001053b0",
                "FUN_00103238",
                "FUN_00106530",
                "free",
                "FUN_00103463",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_strings_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_compilation_00102fd2",
                "param_1": "file1",
                "param_2": "file2",
                "__s": "str1",
                "__s_00": "str2",
                "uVar2": "file2_offset",
                "lVar4": "file1_length",
                "lVar5": "file2_length",
                "sVar6": "str1_length",
                "sVar7": "str2_length",
                "pcVar8": "str1_match",
                "pcVar9": "str2_match",
                "uVar10": "string_comparison_result",
                "uVar11": "file2_offset_plus_length",
                "uVar12": "file1_offset_plus_length",
                "bVar13": "is_less_than"
            },
            "code": "\nulong checkCompilation_00102fd2(undefined8 file1,undefined8 file2)\n\n{\n  char cVar1;\n  ulong file2_offset;\n  char *str1;\n  char *str2;\n  uint uVar3;\n  long file1_length;\n  long file2_length;\n  size_t str1_length;\n  size_t str2_length;\n  char *str1_match;\n  char *str2_match;\n  ulong string_comparison_result;\n  ulong file2_offset_plus_length;\n  ulong file1_offset_plus_length;\n  long unaff_R13;\n  bool is_less_than;\n  \n  file1_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file1,DAT_0010b770);\n  file2_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file2,DAT_0010b768);\n  if ((file1_length == 0) || (unaff_R13 = file2_length, file2_length == 0)) {\n    file2_length = print_error_and_exit_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file1_length + 0x20) == 0x10c2a8) || (*(long *)(file2_length + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  string_comparison_result = *(ulong *)(*(long *)(file1_length + 0x20) + 0x30);\n  file2_offset = *(ulong *)(*(long *)(file2_length + 0x20) + 0x30);\n  file1_offset_plus_length = *(long *)(file1_length + 0x10) + string_comparison_result;\n  file2_offset_plus_length = *(long *)(unaff_R13 + 0x10) + file2_offset;\n  is_less_than = file1_offset_plus_length < file2_offset_plus_length;\n  if ((file1_offset_plus_length != file2_offset_plus_length) || (is_less_than = string_comparison_result < file2_offset, string_comparison_result != file2_offset)) {\n    return (ulong)(-(uint)is_less_than | 1);\n  }\n  str1 = *(char **)(file1_length + 8);\n  str2 = *(char **)(unaff_R13 + 8);\n  str1_length = strlen(str1);\n  str2_length = strlen(str2);\n  str1_match = strstr(str1,\"gnu_compiled\");\n  if (str1_match == (char *)0x0) {\n    str2_match = strstr(str1,\"gcc2_compiled\");\n    str1_match = strstr(str2,\"gnu_compiled\");\n    if ((str1_match == (char *)0x0) && (str1_match = strstr(str2,\"gcc2_compiled\"), str1_match == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str2_match == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str1_match = strstr(str2,\"gnu_compiled\");\n    if (str1_match == (char *)0x0) {\n      str2_match = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str2_match != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar3 = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(file1_length + 0x19) & 0x40) == 0) {\n    if ((str1_length < 3) || (str1[str1_length - 2] != '.')) {\n      if (uVar3 != 0) {\n        return 1;\n      }\n      if ((str2_length < 3) || (str2[str2_length - 2] != '.')) goto LAB_00103202;\n      is_less_than = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = str1[str1_length - 1];\n    is_less_than = cVar1 == 'o' || cVar1 == 'a';\n    if (uVar3 == 0) {\n      if ((str2_length < 3) || (str2[str2_length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar3 != 0) goto LAB_00103202;\n    if (str2_length < 3) {\n      return 0xffffffff;\n    }\n    if (str2[str2_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less_than = true;\nLAB_001031e7:\n    if ((str2[str2_length - 1] != 'o') && (str2[str2_length - 1] != 'a')) {\n      if (is_less_than) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less_than) {\n    return 1;\n  }\nLAB_00103202:\n  string_comparison_result = compare_strings_00104fa0(file1,file2);\n  return string_comparison_result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "strlen",
                "FUN_00106530",
                "strstr",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_compilation_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "print_error_and_exit_00102f9f",
                "auVar1": "return_value",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] print_error_and_exit_00102f9f(void)\n\n{\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  print_error_and_exit_00102f9f_00106530(*DAT_0010b780);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103a78",
                "FUN_00103729",
                "FUN_00103abf",
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00102450",
                "FUN_001043d0",
                "FUN_001053c0",
                "FUN_00104370",
                "FUN_0010249f",
                "FUN_001048e0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_print_symbol_information_00103a66",
                "unaff_RBX": "ptrToAddress",
                "print_symbol_information_0010651a": "printSymbolInformation"
            },
            "code": "\nvoid checkAndPrintSymbolInformation_00103a66(void)\n\n{\n  long ptrToAddress;\n  \n  if (*(long *)(ptrToAddress + 8) != 0) {\n    printSymbolInformation();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_and_print_symbol_information_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_and_character_001035a2",
                "unaff_RBX": "symbol_data",
                "lVar1": "symbol_address",
                "putchar": "print_character",
                "print_symbol_info_001054d0": "print_symbol_info",
                "printf": "print_formatted_string"
            },
            "code": "\nvoid print_symbol_info_and_character_001035a2(void)\n\n{\n  long *symbol_data;\n  long symbol_address;\n  \n  if (symbol_data[2] == 0) {\n    symbol_address = symbol_data[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_data[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (symbol_data[2] == 0) {\n      symbol_address = symbol_data[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_data[2] + 0x38);\n    }\n    print_symbol_info(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_data + 8));\n  if (*(char *)(*symbol_data + 8) != '-') {\n    printf_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_data + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_data + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_data + 0x20));\n  printf_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "FUN_001054d0",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_and_character_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_entries_00103463",
                "unaff_R12": "entry",
                "unaff_R13": "output",
                "unaff_R15": "reference",
                "param_8": "counter",
                "param_10": "limit",
                "in_stack_00000050": "filename",
                "plVar1": "entryPtr",
                "lVar2": "entryValue",
                "cVar3": "comparisonResult",
                "iVar4": "strcmpResult",
                "lVar5": "baseAddress",
                "lVar6": "currentIndex"
            },
            "code": "\n\n\nvoid findMatchingEntries_00103463(void)\n\n{\n  long *entryPtr;\n  long entryValue;\n  char comparisonResult;\n  int strcmpResult;\n  long baseAddress;\n  char *entry;\n  undefined8 *output;\n  long currentIndex;\n  long reference;\n  undefined8 counter;\n  ulong limit;\n  long filename;\n  \n  print_error_and_exit_00106530(*output);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    baseAddress = DAT_0010b738;\n    for (currentIndex = 0; entryPtr = (long *)(baseAddress + (ulong)counter._4_4_ * 8),\n        *entryPtr != currentIndex && currentIndex <= *entryPtr; currentIndex = currentIndex + 1) {\n      entryPtr = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + currentIndex * 8);\n      if ((((entryPtr != (long *)0x0) &&\n           (entryValue = *entryPtr, *(long *)(entryValue + 0x20) == *(long *)(reference + 0x20))) &&\n          (*(long *)(entryValue + 0x10) == *(long *)(reference + 0x10))) &&\n         (((strcmpResult = strcmp(entry,*(char **)(entryValue + 8)), strcmpResult == 0 &&\n           (comparisonResult = (**(code **)(output[1] + 0x240))(), baseAddress = DAT_0010b738, comparisonResult != '\\0')) &&\n          (filename != 0)))) {\n        printf(\"\\t%s:%u\",filename,limit >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_entries_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_param_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "code": "\nvoid initializeParam_00104397(undefined8 param1,undefined8 param2,int param3)\n\n{\n  DAT_0010b7c0 = param3;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)param3 * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "FUN_00104370",
                "caseD_4a"
            ],
            "imported": false,
            "current_name": "initialize_param_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00103729",
                "FUN_00103ca0",
                "FUN_00103238",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_001047d0",
                "FUN_0010268b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "determine_arch_size_00104670",
                "param_1": "input",
                "pcVar2": "archPtr",
                "puVar3": "concatPtr",
                "pcVar4": "strPtr",
                "iVar1": "comparisonResult"
            },
            "code": "\nvoid determineArchSize_00104670(long input)\n\n{\n  int comparisonResult;\n  char *archPtr;\n  undefined *concatPtr;\n  char *strPtr;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    strPtr = **(char ***)(input + 8);\n    archPtr = strstr(strPtr,\"64\");\n    comparisonResult = 0x40;\n    if (archPtr == (char *)0x0) {\n      comparisonResult = strcmp(strPtr,\"mmo\");\n      comparisonResult = (-(uint)(comparisonResult == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = comparisonResult;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    strPtr = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    strPtr = \"08\";\n  }\n  else {\n    strPtr = \"016\";\n  }\n  concatPtr = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concatPtr = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,strPtr,0,0);\n          return;\n        }\n        concatPtr = &DAT_001071cd;\n      }\n    }\n    else {\n      concatPtr = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,strPtr,concatPtr,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001025f5",
                "bfd_get_arch_size",
                "free",
                "strstr",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "determine_arch_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "fflush": "flushOutputStream",
                "fprintf": "printErrorMessageToStream",
                "_stderr": "errorStream",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(outputStream);\n  if (errorCode != 0) {\n    fprintf(errorStream,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(errorStream,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_binary_001048e0",
                "param_1": "binary",
                "param_5": "data1",
                "param_6": "data2",
                "bVar1": "byteVar1",
                "pcVar2": "codePtr",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "lVar7": "longVar1",
                "ppuVar8": "pointerPtr1",
                "ppuVar9": "pointerPtr2",
                "lVar10": "longVar2",
                "puVar11": "pointerVar1",
                "bVar19": "boolVar1",
                "bVar20": "byteVar2",
                "ppuStack_78": "pointerStack",
                "local_4c": "localCounter",
                "local_48": "localPointer",
                "local_40": "localData"
            },
            "code": "\n\n\nvoid processBinary_001048e0(ulong **binary,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **data1,ulong **data2)\n\n{\n  byte byteVar1;\n  code *codePtr;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 uVar6;\n  long longVar1;\n  ulong **pointerPtr1;\n  ulong **pointerPtr2;\n  long longVar2;\n  ulong *pointerVar1;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool boolVar1;\n  byte byteVar2;\n  ulong **pointerStack;\n  uint localCounter;\n  ulong *localPointer;\n  ulong **localData [2];\n  \n  byteVar2 = 0;\n  localPointer = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)binary + 0x44) & 0x10) != 0)) {\n    pointerPtr2 = (ulong **)&localCounter;\n    pointerPtr1 = (ulong **)(*(code *)binary[1][0x4d])(binary,DAT_0010b80c != 0,localData);\n    if ((long)pointerPtr1 < 0) {\n      if ((DAT_0010b80c != 0) && (intVar = bfd_get_error(), intVar == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        pointerVar1 = *binary;\n        uVar6 = dcgettext(0,\"%s: no symbols\",5);\n        print_formatted_error_message_00106400(uVar6,pointerVar1);\n        return;\n      }\n      print_error_and_exit_00106530(*binary);\n      goto LAB_00102e9e;\n    }\n    if (pointerPtr1 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (localCounter == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)binary + 0x4a);\n      ppuVar13 = binary;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_formatted_error_message_00106400(uVar6);\n        }\n        ppuVar14 = localData[0];\n        unaff_R14 = (ulong **)(ulong)localCounter;\n        boolVar1 = DAT_0010b80c != 0;\n        pointerPtr2 = localData[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)boolVar1;\n        binary = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)pointerPtr1 * (long)unaff_R14);\n        pointerPtr1 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        binary = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (binary < pointerPtr1) {\n          do {\n            pointerPtr2 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar1,binary,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (pointerPtr2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar1 = pointerPtr2[1];\n            ppuVar17 = pointerPtr1;\n            if (((pointerVar1 == (ulong *)0x0) || (*(char *)pointerVar1 != '_')) ||\n               (*(char *)((long)pointerVar1 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar = (uint)(pointerPtr2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(pointerPtr2 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUNC_00104d5b;\nLAB_00104a53:\n                  data2 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,pointerPtr2);\n                    if (charVar != '\\0') {\n                      reengineer_function_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (pointerPtr2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUNC_00104d5b:\n                if ((pointerPtr2[4] == (ulong *)0x10c2a8) || (pointerPtr2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,pointerPtr2);\n                if (charVar != '\\0') {\n                  reengineer_function_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != binary) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *binary;\n                    process_binary_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)binary;\n                    binary = (ulong **)((long)binary + (ulong)byteVar2 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)byteVar2 * -2 + 1);\n                  }\n                  process_binary_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              intVar = strcmp((char *)((long)pointerVar1 + (ulong)(*(char *)((long)pointerVar1 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              pointerStack = pointerPtr2;\n              if (intVar == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  pointerStack = (ulong **)*ppuVar13;\n                  DAT_0010b230 = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(uVar6,pointerStack);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uintVar = (*(uint *)(pointerPtr2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(pointerPtr2 + 3) & 0x800082) != 0) || (pointerPtr2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)pointerPtr2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            binary = (ulong **)((long)binary + (long)unaff_R14);\n            if (pointerPtr1 <= binary) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          pointerVar1 = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          data1 = (ulong **)(ulong)DAT_0010b800;\n          codePtr = (code *)pointerVar1[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          pointerVar1 = ppuVar13[1];\n          codePtr = (code *)pointerVar1[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ppuVar13;\n        DAT_0010b770 = (ulong **)(*codePtr)(ppuVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = localData[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          pointerPtr1 = (ulong **)(ulong)localCounter;\n          if (DAT_0010b7f8 != 0) {\n            boolVar1 = DAT_0010b80c != 0;\n            qsort(localData[0],(size_t)ppuVar14,(size_t)pointerPtr1,check_compilation_00102fd2);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = DAT_0010b770;\n            binary = DAT_0010b768;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)pointerPtr1 + (long)ppuVar12);\n            pointerPtr2 = DAT_0010b770;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            data2 = DAT_0010b768;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar1,ppuVar12);\n            data1 = pointerPtr1;\n            pointerStack = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localData[0],(size_t)ppuVar14,(size_t)pointerPtr1,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          pointerVar1 = ppuVar13[1];\nLAB_00104be2:\n          binary = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        print_error_and_exit_00106530(*ppuVar13);\n        binary = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          pointerPtr1 = (ulong **)(*(code *)binary[1][0x6b])(binary,unaff_RBX);\n          pointerPtr2 = ppuVar17;\n          if (-1 < (long)pointerPtr1) break;\n          ppuVar13 = (ulong **)*binary;\n          ppuVar14 = (ulong **)print_error_and_exit_00106530(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          pointerVar1 = ppuVar14[2];\n          pointerPtr2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar1 = (ulong *)((long)pointerPtr1[8] - (long)pointerVar1);\n          ppuVar18 = binary;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = pointerPtr2;\n          ppuVar12 = unaff_RBX;\n          binary = data2;\n          if (pointerVar1 != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = pointerVar1;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          data2 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)pointerStack >> 4);\n          qsort(pointerStack,(size_t)ppuVar14,0x10,compare_and_call_00103533);\n          pointerVar1 = ppuVar13[1];\n          binary = ppuVar13;\n          ppuVar18 = pointerStack;\nLAB_00104be5:\n          unaff_RBX = localData[0];\n          pointerPtr1 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_R14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ppuVar17 = (ulong **)(*(code *)pointerVar1[0x41])(binary);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          pointerPtr1 = (ulong **)(ulong)localCounter;\n          unaff_R15 = (ulong **)(*(code *)pointerVar1[0x41])(binary);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)pointerPtr1 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          print_error_and_exit_00106530(*binary);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          pointerPtr2 = pointerPtr1;\n          if (DAT_0010b80c != 0) {\n            unaff_RBX = localData[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          longVar2 = (*(code *)binary[1][0x6a])(binary);\n          ppuVar14 = localData[0];\n          ppuVar17 = pointerPtr1;\n          ppuVar12 = unaff_R15;\n          if (longVar2 < 1) {\n            pointerPtr1 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        data2 = &localPointer;\n        data1 = unaff_RBX;\n        longVar2 = (*(code *)binary[1][0x6c])(binary,ppuVar17,ppuVar14,pointerPtr1);\n        pointerPtr1 = pointerPtr2;\n        if (0 < longVar2) {\n          pointerPtr1 = (ulong **)((long)pointerPtr2 + longVar2);\n          localData[0] = (ulong **)xrealloc(localData[0]);\n          longVar1 = 0;\n          do {\n            localData[0][(long)pointerPtr2 + longVar1] = localPointer + longVar1 * 6;\n            longVar1 = longVar1 + 1;\n          } while (longVar2 != longVar1);\n          localData[0][(long)pointerPtr2 + longVar2] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)binary + 0x4a);\n        ppuVar13 = binary;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    pointerVar1 = *binary;\n    uVar6 = dcgettext(0,\"%s: no symbols\",5);\n    print_formatted_error_message_00106400(uVar6,pointerVar1);\n  }\n  return;\ncode_r0x00104b01:\n  binary = (ulong **)((long)binary + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)data1);\n  if (unaff_R14 <= unaff_RBX) {\n    pointerPtr1 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    pointerPtr2 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = binary;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      pointerVar1 = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar1 = ppuVar14[2];\n    if ((*(byte *)((long)pointerPtr1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  pointerPtr1 = binary;\n  ppuVar15 = data1;\n  ppuVar16 = data2;\n  pointerPtr2 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (pointerPtr2 == (ulong **)0x0) goto LAB_00102edb;\n  pointerPtr1 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (localPointer == (ulong *)0x0) {\n      free(localData[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(localPointer);\n    free(localData[0]);\n    free(ppuVar18);\n    return;\n  }\n  pointerPtr1 = ppuVar17;\n  longVar2 = (*(code *)binary[1][0x4e])(binary,unaff_R14,*ppuVar14);\n  if (longVar2 == 0) goto LAB_00102ec9;\n  pointerPtr1 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  print_strings_00105110(binary,longVar2,*pointerPtr1,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  print_error_and_exit_00106530(*binary,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*binary;\n  print_error_and_exit_00106530();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = data1;\n  ppuVar16 = data2;\nLAB_00102edb:\n  data2 = ppuVar16;\n  data1 = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  pointerPtr2 = (ulong **)print_error_and_exit_00106530();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  pointerVar1 = ppuVar14[2];\nLAB_00102ee7:\n  if (pointerPtr1 != (ulong **)pointerPtr2[4]) goto LAB_00102dc4;\n  pointerVar1 = (ulong *)((long)pointerPtr2[2] - (long)pointerVar1);\n  ppuVar18 = binary;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (pointerPtr2 = unaff_R15, longVar2 = (*(code *)binary[1][0x4e])(binary,unaff_R14,unaff_RBX),\n        longVar2 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)pointerPtr1);\n    print_strings_00105110(binary,longVar2,0,param_2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  print_error_and_exit_00106530(*binary);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  print_error_and_exit_00106530(*binary);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  print_error_and_exit_00106530(*ppuVar13);\n  ppuVar13 = binary;\nLAB_00102eb9:\n  print_error_and_exit_00106530(*ppuVar13);\n  binary = data2;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  data1 = pointerPtr1;\n  ppuVar18 = pointerPtr2;\n  pointerStack = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106530",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "process_binary_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_flag_set_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_flag_set_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_flag_set_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  initialize_param_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "find_matching_section_00103238",
                "__ptr": "sectionPtr",
                "__s1": "inputSectionName",
                "plVar1": "currentSectionEntry",
                "lVar2": "currentSectionAddress",
                "cVar3": "result",
                "iVar4": "comparisonResult",
                "unaff_RBX": "sectionList",
                "pvVar5": "sectionDataList",
                "uVar6": "sectionIndex",
                "unaff_R13": "binaryData",
                "lVar7": "index",
                "param_10": "paramValue",
                "param_12": "paramName"
            },
            "code": "\n\n\nvoid findMatchingSection_00103238(void)\n\n{\n  long *currentSectionEntry;\n  void *sectionPtr;\n  char *inputSectionName;\n  long currentSectionAddress;\n  char result;\n  int comparisonResult;\n  long sectionList;\n  void *sectionDataList;\n  uint sectionIndex;\n  long binaryData;\n  long index;\n  ulong paramValue;\n  void *paramName;\n  \n  sectionDataList = DAT_0010b750;\n  if (_DAT_0010b7b0 == binaryData) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    sectionIndex = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; sectionIndex < DAT_0010b748; sectionIndex = sectionIndex + 1) {\n        sectionPtr = *(void **)((long)sectionDataList + (ulong)sectionIndex * 8);\n        if (sectionPtr != (void *)0x0) {\n          free(sectionPtr);\n        }\n      }\n      free(DAT_0010b740);\n      free(sectionDataList);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(binaryData + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  paramName = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = binaryData;\nLAB_00103296:\n  inputSectionName = *(char **)(sectionList + 8);\n  sectionIndex = 0;\n  do {\n    if (DAT_0010b748 <= sectionIndex) {\n      putc(10,_stdout);\n      return;\n    }\n    sectionDataList = DAT_0010b738;\n    for (index = 0; currentSectionEntry = (long *)((long)sectionDataList + (ulong)sectionIndex * 8),\n        *currentSectionEntry != index && index <= *currentSectionEntry; index = index + 1) {\n      currentSectionEntry = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)sectionIndex * 8) + index * 8);\n      if ((((currentSectionEntry != (long *)0x0) &&\n           (currentSectionAddress = *currentSectionEntry, *(long *)(currentSectionAddress + 0x20) == *(long *)(sectionList + 0x20))) &&\n          (*(long *)(currentSectionAddress + 0x10) == *(long *)(sectionList + 0x10))) &&\n         (((comparisonResult = strcmp(inputSectionName,*(char **)(currentSectionAddress + 8)), comparisonResult == 0 &&\n           (result = (**(code **)(*(long *)(binaryData + 8) + 0x240))(), sectionDataList = DAT_0010b738,\n           result != '\\0')) && (paramName != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",paramName,paramValue >> 0x20);\n        sectionIndex = DAT_0010b748;\n        break;\n      }\n    }\n    sectionIndex = sectionIndex + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103c00",
                "bfd_map_over_sections",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_section_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "message1",
                "param_2": "message2"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *message1,undefined8 *message2)\n\n{\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*message1);\n    return;\n  }\n  printf(\"%s: \",*message2);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_string_001047d0",
                "unaff_RBX": "reconcat_string",
                "unaff_R12": "status_flag",
                "unaff_R13": "reconcat_result",
                "unaff_R14": "format_string",
                "unaff_R15": "binary_offset",
                "pcVar1": "reconcat_result_check"
            },
            "code": "\nvoid print_formatted_string_001047d0(void)\n\n{\n  char *reconcat_result_check;\n  void *reconcat_string;\n  undefined *status_flag;\n  void *reconcat_result;\n  char *format_string;\n  long binary_offset;\n  \n  if (((DAT_0010b234 != 0) &&\n      (reconcat_result_check = (char *)(**(code **)(*(long *)(binary_offset + 8) + 0x220))(), reconcat_result_check != (char *)0x0))\n     && (*reconcat_result_check != '\\0')) {\n    reconcat_string = (void *)reconcat();\n    reconcat_result = reconcat_string;\n  }\n  printf(format_string,reconcat_result);\n  if (status_flag != (undefined *)0x0) {\n    *status_flag = 0x40;\n  }\n  free(reconcat_string);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_string_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_non_ordinary_file_warning_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 printNonOrdinaryFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  print_formatted_error_message_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_non_ordinary_file_warning_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filePath",
                "cVar1": "formatCheckResult",
                "iVar2": "statResult",
                "uVar3": "returnValue",
                "piVar4": "errnoPointer",
                "uVar5": "errorMessage",
                "puVar6": "fileDescriptor",
                "puVar9": "archivedFileDescriptor",
                "puVar10": "previousArchivedFileDescriptor",
                "local_c8": "fileStats",
                "lVar7": "mapEntry",
                "pcVar8": "errorString"
            },
            "code": "\n\n\nundefined4 checkFile_001043d0(char *filePath)\n\n{\n  char formatCheckResult;\n  int statResult;\n  undefined4 returnValue;\n  int *errnoPointer;\n  undefined8 errorMessage;\n  undefined8 *fileDescriptor;\n  long mapEntry;\n  char *errorString;\n  undefined8 *archivedFileDescriptor;\n  undefined8 *previousArchivedFileDescriptor;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    statResult = stat(filePath,&fileStats);\n    if (statResult < 0) {\nLAB_00102522:\n      errnoPointer = __errno_location();\n      if (*errnoPointer == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_formatted_error_message_00106400(errorMessage,filePath);\n      }\n      else {\n        errorString = strerror(*errnoPointer);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_formatted_error_message_00106400(errorMessage,filePath,errorString);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_formatted_error_message_00106400(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (fileStats.st_size < 0) {\n        errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_formatted_error_message_00106400(errorMessage,filePath);\n      }\n      else if (fileStats.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          fileDescriptor = (undefined8 *)bfd_openr(filePath,\"plugin\");\n        }\n        else {\n          fileDescriptor = (undefined8 *)bfd_openr(filePath);\n        }\n        if (fileDescriptor != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x8000;\n          }\n          formatCheckResult = bfd_check_format(fileDescriptor,2);\n          if (formatCheckResult == '\\0') {\n            returnValue = bfd_check_format_matches(fileDescriptor,1,&fileStats);\n            if ((char)returnValue == '\\0') goto LAB_001025ac;\n            determine_arch_size_00104670(fileDescriptor);\n            (**(code **)PTR_PTR_FUN_0010b260)(filePath);\n            process_binary_001048e0(fileDescriptor,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*fileDescriptor);\n            if ((_DAT_0010b7f0 != 0) &&\n               (mapEntry = bfd_get_next_mapent(fileDescriptor,0xffffffffffffffff,&fileStats), mapEntry != -1)) {\n              errorString = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(errorString);\n              do {\n                archivedFileDescriptor = (undefined8 *)(**(code **)(fileDescriptor[1] + 0x1e0))(fileDescriptor,mapEntry);\n                if (archivedFileDescriptor == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)fileStats.st_dev != 0) {\n                  print_formatted_string_00104740(&DAT_0010712d,0,*(long *)fileStats.st_dev,fileDescriptor);\n                  printf(\" in %s\\n\",*archivedFileDescriptor);\n                }\n                mapEntry = bfd_get_next_mapent(fileDescriptor,mapEntry,&fileStats);\n              } while (mapEntry != -1);\n            }\n            archivedFileDescriptor = (undefined8 *)0x0;\n            do {\n              do {\n                previousArchivedFileDescriptor = archivedFileDescriptor;\n                archivedFileDescriptor = (undefined8 *)bfd_openr_next_archived_file(fileDescriptor,previousArchivedFileDescriptor);\n                if (archivedFileDescriptor == (undefined8 *)0x0) {\n                  statResult = bfd_get_error();\n                  if (statResult != 9) {\n                    print_error_and_exit_00106530(*fileDescriptor);\nLAB_00102516:\n                    print_error_and_exit_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previousArchivedFileDescriptor != (undefined8 *)0x0) {\n                    bfd_close(previousArchivedFileDescriptor);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                formatCheckResult = bfd_check_format_matches(archivedFileDescriptor,1,&fileStats);\n                if (formatCheckResult == '\\0') {\n                  print_error_message_00106540(*archivedFileDescriptor);\n                  statResult = bfd_get_error();\n                  if (statResult == 0xd) {\n                    print_matching_formats_00103b5d(fileStats.st_dev);\n                  }\n                }\n                else {\n                  determine_arch_size_00104670(archivedFileDescriptor);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*fileDescriptor,*archivedFileDescriptor);\n                  process_binary_001048e0(archivedFileDescriptor,fileDescriptor);\n                }\n              } while (previousArchivedFileDescriptor == (undefined8 *)0x0);\n              bfd_close(previousArchivedFileDescriptor);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previousArchivedFileDescriptor != archivedFileDescriptor);\n          }\nLAB_001044b4:\n          returnValue = 1;\n          while (formatCheckResult = bfd_close(fileDescriptor), formatCheckResult == '\\0') {\n            print_error_and_exit_00106530(filePath);\nLAB_001025ac:\n            print_error_message_00106540(filePath);\n            statResult = bfd_get_error();\n            if (statResult == 0xd) {\n              print_matching_formats_00103b5d(fileStats.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return returnValue;\n        }\n        print_error_message_00106540(filePath);\n      }\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_formatted_error_message_00106400(errorMessage,filePath);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "printf",
                "FUN_00102670",
                "FUN_00103b5d",
                "FUN_00106530",
                "FUN_00106540",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "FUN_0010351b",
                "bfd_get_error",
                "strerror",
                "FUN_0010249f",
                "dcgettext",
                "FUN_001062d0",
                "FUN_001048e0",
                "__errno_location",
                "FUN_00106400",
                "FUN_00104740",
                "FUN_00104670",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "prefix",
                "param_2": "suffix"
            },
            "code": "\nvoid concatenateStrings_001025f5(undefined8 prefix,undefined8 suffix)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,suffix,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_initialized_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfInitialized_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_initialized_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "comparison_result",
                "lVar2": "string1_length",
                "lVar3": "string2_length"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint comparison_result;\n  long string1_length;\n  long string2_length;\n  \n  string1_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  string2_length = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((string1_length == 0) || (string2_length == 0)) {\n    print_error_and_exit_00106530(*DAT_0010b780);\n  }\n  else {\n    string2_ptr = *(char **)(string2_length + 8);\n    string1_ptr = *(char **)(string1_length + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1_ptr,string2_ptr);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_00102f9f",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "header",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *header,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (header != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*header);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefinedSym",
                "uVar2": "symType",
                "iVar3": "asprintfResult",
                "plVar4": "symbolInfo",
                "piVar5": "errnoLocation",
                "uVar6": "errorString",
                "lVar7": "symbolFlag",
                "uVar8": "printWidth",
                "bVar9": "dataType",
                "uVar10": "originalPrintWidth",
                "pcVar11": "dataTypeString"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefinedSym;\n  ushort symType;\n  int asprintfResult;\n  long *symbolInfo;\n  int *errnoLocation;\n  undefined8 errorString;\n  long symbolFlag;\n  ulong printWidth;\n  byte dataType;\n  ulong originalPrintWidth;\n  char *dataTypeString;\n  undefined8 in_R8;\n  undefined8 in_R9;\n  \n  printWidth = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  originalPrintWidth = printWidth;\n  print_error_message_00106300(symbolInfo,printWidth);\n  print_formatted_string_00104740(\"%-20s|\",symbolInfo,0,originalPrintWidth,in_R8,in_R9,printWidth);\n  isUndefinedSym = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefinedSym == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      symbolFlag = *(long *)(symbolInfo[3] + 0x30);\n      isUndefinedSym = *(char *)(symbolFlag + 0x28);\n      if (isUndefinedSym == 'g') goto LAB_00103983;\n      if (isUndefinedSym == 'h') {\n        dataTypeString = \"Line\";\n      }\n      else if (isUndefinedSym == 'd') {\n        dataTypeString = \"Block\";\n      }\n      else if (*(ushort *)(symbolFlag + 0x26) == 0) {\n        dataTypeString = \"None\";\n      }\n      else {\n        symType = *(ushort *)(symbolFlag + 0x26) >> 4 & 3;\n        if (symType == 2) {\n          dataTypeString = \"Function\";\n        }\n        else if (symType == 3) {\n          dataTypeString = \"Array\";\n        }\n        else {\n          if (symType != 1) {\n            free(DAT_0010b730);\n            symType = *(ushort *)(symbolFlag + 0x26);\n            dataType = *(byte *)(symbolFlag + 0x28);\n            dataTypeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,dataTypeString,(ulong)dataType,(ulong)symType);\n            dataTypeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          dataTypeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    dataType = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(dataType) {\n    case 0:\n      dataTypeString = \"NOTYPE\";\n      break;\n    case 1:\n      dataTypeString = \"OBJECT\";\n      break;\n    case 2:\n      dataTypeString = \"FUNC\";\n      break;\n    case 3:\n      dataTypeString = \"SECTION\";\n      break;\n    case 4:\n      dataTypeString = \"FILE\";\n      break;\n    case 5:\n      dataTypeString = \"COMMON\";\n      break;\n    case 6:\n      dataTypeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      dataTypeString = \"<processor specific>: %d\";\n      if ((2 < dataType - 0xd) && (dataTypeString = \"<OS specific>: %d\", 2 < dataType - 10)) {\n        dataTypeString = \"<unknown>: %d\";\n      }\n      dataTypeString = (char *)dcgettext(0,dataTypeString,5);\n      asprintfResult = asprintf(&DAT_0010b728,dataTypeString,(ulong)dataType);\n      dataTypeString = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorString = xstrerror(*errnoLocation);\n        print_error_message_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        dataTypeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",dataTypeString);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  symbolFlag = symbolInfo[2];\n  if ((symbolFlag != 0) || (symbolFlag = symbolInfo[3], symbolFlag != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolFlag + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_0010370a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused",
                "param_4": "string3"
            },
            "code": "\nvoid printStrings_001053b0(undefined8 *string1,undefined8 *string2,undefined8 unused,undefined8 string3)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,string3);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_strings_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "process_file_001055f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "bVar2": "var2",
                "bVar3": "flag1",
                "bVar4": "flag2",
                "bVar5": "flag3",
                "cVar6": "char1",
                "bVar7": "byte1",
                "cVar8": "char2",
                "cVar9": "char3",
                "iVar10": "int1",
                "uVar11": "uint1",
                "iVar12": "int2",
                "uVar13": "uint2",
                "uVar14": "uint3",
                "__stream": "filePtr",
                "__s": "fileBuffer",
                "piVar15": "ptr2",
                "sVar16": "size1",
                "__ptr": "bufferPtr",
                "__src": "srcBuffer",
                "lVar17": "long1",
                "plVar18": "ptr3",
                "plVar19": "ptr4",
                "uVar20": "uint4",
                "uVar21": "uint5",
                "pcVar22": "str1",
                "pbVar23": "ptr5",
                "unaff_RBP": "ptr6",
                "lVar24": "long2",
                "pbVar25": "ptr7",
                "pcVar26": "str2",
                "unaff_R12": "ptr8",
                "piVar27": "ptr9",
                "local_110": "localVar1",
                "local_10c": "localVar2",
                "local_108": "localVar3",
                "local_c8": "localStat"
            },
            "code": "\n\n\nundefined ** processFile_001055f0(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte var2;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  char char1;\n  byte byte1;\n  char char2;\n  char char3;\n  int int1;\n  uint uint1;\n  int int2;\n  undefined4 uint2;\n  undefined4 uint3;\n  FILE *filePtr;\n  byte *fileBuffer;\n  int *ptr2;\n  size_t size1;\n  byte *bufferPtr;\n  long *srcBuffer;\n  long long1;\n  long *ptr3;\n  long *ptr4;\n  undefined8 uint4;\n  undefined8 uint5;\n  char *str1;\n  byte *ptr5;\n  undefined **ptr6;\n  long long2;\n  byte *ptr7;\n  char *str2;\n  int *ptr8;\n  int *ptr9;\n  int localVar1;\n  int localVar2;\n  size_t localVar3;\n  stat localStat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  ptr3 = argv;\n  if (1 < argc) {\n    localVar2 = 2000;\n    ptr8 = (int *)0x1;\n    localVar1 = 0;\n    do {\n      int2 = (int)ptr8;\n      ptr6 = (undefined **)(long)int2;\n      ptr9 = (int *)((long)ptr6 * 8);\n      if (*(char *)ptr3[(long)ptr6] != '@') goto LAB_00105a70;\n      localVar2 = localVar2 + -1;\n      if (localVar2 == 0) {\n        long2 = *ptr3;\n        str2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str1 = (char *)ptr3[(long)ptr6] + 1;\n      int1 = stat(str1,&localStat);\n      if (int1 < 0) {\nLAB_00105a70:\n        if (argc <= int2 + 1) break;\nLAB_00105a7a:\n        uint1 = int2 + 1;\n        localVar1 = int2;\n      }\n      else {\n        if ((localStat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        filePtr = fopen(str1,\"r\");\n        if (filePtr == (FILE *)0x0) goto LAB_00105a70;\n        int1 = fseek(filePtr,0,2);\n        if (((int1 == -1) ||\n            (str1 = (char *)ftell(filePtr), (int *)str1 == (int *)0xffffffffffffffff)) ||\n           (int1 = fseek(filePtr,0,0), int1 == -1)) {\nLAB_00105ad0:\n          fclose(filePtr);\n          if (int2 + 1 < argc) goto LAB_00105a7a;\n          break;\n        }\n        fileBuffer = (byte *)xmalloc((char *)((long)str1 + 1));\n        ptr2 = (int *)fread(fileBuffer,1,(size_t)str1,filePtr);\n        if (((int *)str1 != ptr2) && (int1 = ferror(filePtr), int1 != 0)) {\n          free(fileBuffer);\n          goto LAB_00105ad0;\n        }\n        fileBuffer[(long)ptr2] = 0;\n        byte1 = *fileBuffer;\n        ptr5 = fileBuffer;\n        if (byte1 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte1 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size1 = strlen((char *)fileBuffer);\n          bufferPtr = (byte *)xmalloc(size1 + 1);\n          int1 = 0;\n          flag3 = false;\n          flag1 = false;\n          long2 = 0;\n          srcBuffer = (long *)0x0;\n          flag2 = false;\n          ptr5 = fileBuffer;\n          do {\n            while (((&_sch_istable)[(ulong)*ptr5 * 2] & 0x40) != 0) {\n              ptr5 = ptr5 + 1;\n            }\n            if ((int1 == 0) || (ptr4 = srcBuffer + long2, int1 + -1 <= (int)long2)) {\n              if (srcBuffer == (long *)0x0) {\n                int1 = 8;\n                srcBuffer = (long *)xmalloc(0x40);\n                ptr4 = srcBuffer + long2;\n                *ptr4 = 0;\n              }\n              else {\n                int1 = int1 * 2;\n                srcBuffer = (long *)xrealloc(srcBuffer,(long)int1 << 3);\n                ptr4 = srcBuffer + long2;\n                *ptr4 = 0;\n              }\n            }\n            byte1 = *ptr5;\n            ptr7 = bufferPtr;\n            while (byte1 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte1 * 2] & 0x40) != 0) &&\n                   (!(bool)(flag3 | flag2 | flag1))) {\n                  flag2 = false;\n                  flag3 = false;\n                  flag1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!flag2) break;\n                ptr5 = ptr5 + 1;\n                *ptr7 = byte1;\n                ptr7 = ptr7 + 1;\n                flag2 = false;\n                byte1 = *ptr5;\n                if (byte1 == 0) goto LAB_001058e0;\n              }\n              if (byte1 == 0x5c) {\n                flag2 = true;\n              }\n              else if (flag1) {\n                if (byte1 == 0x27) {\n                  flag1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *ptr7 = byte1;\n                  ptr7 = ptr7 + 1;\n                }\n              }\n              else if (flag3) {\n                if (byte1 != 0x22) goto LAB_00105a55;\n                flag3 = false;\n              }\n              else if (byte1 == 0x27) {\n                flag1 = true;\n              }\n              else {\n                if (byte1 != 0x22) goto LAB_00105a55;\n                flag3 = true;\n              }\n              ptr1 = ptr5 + 1;\n              ptr5 = ptr5 + 1;\n              byte1 = *ptr1;\n            }\nLAB_001058e0:\n            *ptr7 = 0;\n            long1 = xstrdup(bufferPtr);\n            *ptr4 = long1;\n            srcBuffer[long2 + 1] = 0;\n            byte1 = *ptr5;\n            var2 = (&_sch_istable)[(ulong)byte1 * 2];\n            while ((var2 & 0x40) != 0) {\n              byte1 = ptr5[1];\n              ptr5 = ptr5 + 1;\n              var2 = (&_sch_istable)[(ulong)byte1 * 2];\n            }\n            long2 = long2 + 1;\n          } while (byte1 != 0);\n          free(bufferPtr);\n          ptr4 = ptr3;\n          if (argv == ptr3) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        srcBuffer = (long *)xmalloc(8);\n        *srcBuffer = 0;\n        if (argv == ptr3) {\nLAB_00105c79:\n          if (*ptr3 == 0) {\n            int1 = 0;\n          }\n          else {\n            long2 = 1;\n            do {\n              int1 = (int)long2;\n              ptr4 = ptr3 + long2;\n              long2 = long2 + 1;\n            } while (*ptr4 != 0);\n          }\n          long1 = 0;\n          ptr4 = (long *)xmalloc((long)(int1 + 1) << 3);\n          long2 = *ptr3;\n          while (long2 != 0) {\n            uint4 = xstrdup();\n            *(undefined8 *)((long)ptr4 + long1) = uint4;\n            long1 = long1 + 8;\n            long2 = *(long *)((long)ptr3 + long1);\n          }\n          *(undefined8 *)((long)ptr4 + long1) = 0;\nLAB_0010597d:\n          ptr3 = ptr4;\n          if (*srcBuffer == 0) goto LAB_00105d50;\n          str1 = (char *)0x0;\n          do {\n            str1 = (char *)((long)str1 + 1);\n          } while (srcBuffer[(long)str1] != 0);\n          localVar3 = (long)str1 * 8;\n        }\n        else {\nLAB_00105d50:\n          str1 = (char *)0x0;\n          localVar3 = 0;\n        }\n        free((void *)ptr3[(long)ptr6]);\n        ptr3 = (long *)xrealloc(ptr3,(long)((long)str1 + (long)argc + 1) * 8);\n        int1 = argc + -1 + (int)str1;\n        memmove(ptr3 + (long)(undefined **)((long)ptr6 + (long)str1),\n                ptr3 + 1 + (long)ptr6,(long)(argc - int2) << 3);\n        memcpy(ptr3 + (long)ptr6,srcBuffer,localVar3);\n        free(srcBuffer);\n        free(fileBuffer);\n        fclose(filePtr);\n        uint1 = localVar1 + 1;\n        ptr6 = (undefined **)((long)ptr6 + (long)str1);\n        ptr8 = ptr9;\n        argc = int1;\n        if (int1 <= (int)uint1) break;\n      }\n      ptr8 = (int *)(ulong)uint1;\n    } while( true );\n  }\n  int2 = bfd_init();\n  str2 = \"fatal error: libbfd ABI mismatch\";\n  if (int2 != 0x118) goto LAB_00106085;\n  ptr6 = &PTR_s_debug_syms_0010b280;\n  char2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  ptr8 = (int *)\"x86_64-pc-linux-gnu\";\n  char3 = DAT_0010b23b;\n  char1 = DAT_0010b240;\n  uint3 = DAT_0010b244;\n  if (char2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uint3;\n    DAT_0010b240 = char1;\n    DAT_0010b23b = char3;\n    uint2 = getopt_long(argc,ptr3,str1);\n    ptr9 = _optarg;\n    ptr2 = (int *)str1;\n    char3 = DAT_0010b23b;\n    char1 = DAT_0010b240;\n    uint3 = DAT_0010b244;\n    switch(uint2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      display_usage_00103ca0(_stderr,1);\n      ptr9 = ptr8;\nLAB_001061d5:\n      int2 = strcmp((char *)ptr9,\"l\");\n      if (int2 == 0) goto LAB_001061a3;\n      int2 = strcmp((char *)ptr9,\"escape\");\n      ptr8 = ptr9;\n      if ((int2 == 0) || (int2 = strcmp((char *)ptr9,\"e\"), int2 == 0)) {\n        DAT_0010b7e0 = 2;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)ptr9,\"invalid\");\n      if ((int2 == 0) || (int2 = strcmp((char *)ptr9,\"i\"), int2 == 0)) {\n        DAT_0010b7e0 = 5;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)ptr9,\"hex\");\n      if ((int2 == 0) || (int2 = strcmp((char *)ptr9,\"x\"), int2 == 0)) {\n        DAT_0010b7e0 = 3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)ptr9,\"highlight\");\n      if ((int2 == 0) || (int2 = strcmp((char *)ptr9,\"h\"), int2 == 0)) {\n        DAT_0010b7e0 = 4;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      initialize_output_format_00104370(&DAT_00107033);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      display_usage_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      ptr8 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        int2 = cplus_demangle_name_to_style();\n        ptr2 = _optarg;\n        if (int2 == 0) {\n          uint4 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          print_error_message_00106300(uint4,ptr2);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          str1 = (char *)ptr2;\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uint3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uint3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      initialize_output_format_00104370(\"posix\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int2 = strcmp((char *)_optarg,\"32_64\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      if (int2 != 0) {\n        str2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uint4 = dcgettext(0,str2,5);\n        print_error_message_00106300(uint4);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      initialize_output_format_00104370(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      initialize_output_format_00104370(\"just-symbols\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char3 = *(char *)_optarg;\n      ptr8 = ptr9;\n      char1 = char3;\n      uint3 = 10;\n      if (char3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char3) {\n        if (char3 == 'o') {\n          uint3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char3 == 'x') {\n          uint3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int2 = strcmp((char *)_optarg,\"default\");\n      if ((int2 == 0) || (int2 = strcmp((char *)ptr9,\"d\"), int2 == 0)) {\n        DAT_0010b7e0 = 0;\n        ptr8 = ptr9;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      else {\n        int2 = strcmp((char *)ptr9,\"locale\");\n        if (int2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        ptr8 = ptr9;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uint4 = dcgettext(0,str2,5);\n    print_error_message_00106300(uint4,ptr9);\nLAB_00105f13:\n    long2 = *ptr3;\n    str2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,str2,long2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uint3 = bfd_get_error();\n  uint4 = bfd_errmsg(uint3);\n  uint5 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  print_error_message_00106300(uint5,\"x86_64-pc-linux-gnu\",uint4);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte1 = ptr5[1];\n  ptr5 = ptr5 + 1;\n  if (byte1 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  ptr6 = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str1);\n    str1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str1);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    uint4 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    print_formatted_error_message_00106400(uint4);\n    uint4 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    print_formatted_error_message_00106400(uint4);\n    return ptr6;\n  }\n  str1 = &optind;\n  if (_optind != argc) {\n    if (1 < argc - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int2 = *(int *)str1;\n      if (argc <= int2) break;\n      long2 = ptr3[int2];\n      *(int *)str1 = int2 + 1;\n      char3 = check_file_001043d0(long2);\n      if (char3 != '\\0') {\n        int2 = *(int *)str1;\n        if (argc <= int2) break;\n        long2 = ptr3[int2];\n        *(int *)str1 = int2 + 1;\n        char3 = check_file_001043d0(long2);\n        if (char3 != '\\0') {\n          int2 = *(int *)str1;\n          while( true ) {\n            if (argc <= int2) goto LAB_00105bdd;\n            long2 = ptr3[int2];\n            *(int *)str1 = int2 + 1;\n            char3 = check_file_001043d0(long2);\n            if (char3 == '\\0') break;\n            int2 = *(int *)str1;\n          }\n        }\n      }\n      ptr6 = (undefined **)(ulong)((int)ptr6 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)ptr6);\n  }\nLAB_0010613c:\n  uint1 = check_file_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "bfd_set_default_target",
                "xexit",
                "printf",
                "getopt_long",
                "exit",
                "memmove",
                "strlen",
                "cplus_demangle_set_style",
                "FUN_001043d0",
                "ferror",
                "bfd_set_error_program_name",
                "ftell",
                "FUN_00104370",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "setlocale",
                "dcgettext",
                "bindtextdomain",
                "textdomain",
                "bfd_plugin_set_plugin",
                "xrealloc",
                "FUN_00106400",
                "strcmp",
                "xmalloc_set_program_name",
                "FUN_00106300",
                "FUN_00103ca0",
                "bfd_plugin_set_program_name",
                "fseek",
                "stat",
                "memcpy",
                "xstrdup",
                "bfd_errmsg",
                "fprintf",
                "fread",
                "fclose",
                "free",
                "bfd_init",
                "fopen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_file_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_file_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00102fd2",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_if_data_not_zero_0010351b"
            },
            "code": "\nvoid printIfDataNotZero_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_data_not_zero_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_condition_is_met_00103b2b",
                "param_1": "message",
                "param_2": "data"
            },
            "code": "\nvoid printIfConditionIsMet_00103b2b(undefined8 message,undefined8 data)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,data);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_condition_is_met_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "formatString",
                "param_2": "paramList",
                "param_3": "moduleName",
                "param_4": "baseAddress",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "sizeVar",
                "pcVar6": "charPtr",
                "puVar7": "ptr2",
                "pcVar8": "charPtr2",
                "__ptr": "mergedString",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "__s": "charPtr3",
                "__s_00": "charPtr4",
                "lVar13": "longVar",
                "uVar9": "ulongVar",
                "uVar10": "ulongVar2",
                "uVar14": "uintVar",
                "bVar15": "byte3",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedString_00104740(char *formatString,long *paramList,undefined8 *moduleName,long baseAddress)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t sizeVar;\n  char *charPtr;\n  undefined8 *ptr2;\n  char *charPtr2;\n  undefined8 *mergedString;\n  ulong ulongVar;\n  undefined8 ulongVar2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *charPtr3;\n  undefined8 *charPtr4;\n  long longVar;\n  uint uintVar;\n  byte byte3;\n  char stackArray [9];\n  \n  byte3 = 0;\n  if (moduleName == (undefined8 *)0x0) {\n    moduleName = *(undefined8 **)(*paramList + 0x10);\n    if (DAT_0010b234 == 0) {\n      decode_and_print_string_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr4 = moduleName;\n    if (DAT_0010b814 == 0) {\n      charPtr = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptr4 = moduleName;\n        mergedString = (undefined8 *)0x0;\n      }\n      else {\n        mergedString = (undefined8 *)0x0;\n        if (moduleName != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtr = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (moduleName = (undefined8 *)bfd_demangle(baseAddress,ptr4,DAT_0010b248),\n         moduleName == (undefined8 *)0x0)) {\n        moduleName = ptr4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        mergedString = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = moduleName;\n        mergedString = moduleName;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = moduleName;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(baseAddress + 8) + 8) != 5) goto LAB_00104775;\n      charPtr = strchr((char *)moduleName,0x40);\n      if (charPtr == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (paramList == (long *)0x0) {\n              mergedString = (undefined8 *)0x0;\n              printf(formatString,moduleName);\n            }\n            else {\n              if (paramList[2] != 0) {\n                print_formatted_string_001047d0();\n                return;\n              }\n              mergedString = (undefined8 *)0x0;\n              printf(formatString,moduleName);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtr = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          mergedString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtr = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = moduleName;\n    mergedString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)moduleName;\n      moduleName = (undefined8 *)((long)moduleName + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    sizeVar = strlen((char *)ptr4);\n    charPtr4 = DAT_0010b790;\n    if (_DAT_0010b798 < sizeVar * 9) {\n      free(DAT_0010b790);\n      sizeVar = strlen((char *)ptr4);\n      _DAT_0010b798 = sizeVar * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      charPtr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)charPtr4 = byte1;\n          charPtr4 = (undefined8 *)((long)charPtr4 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = charPtr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(charPtr4 + 1) = 0;\n                  *charPtr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = charPtr4 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)charPtr4,\"%c\",ulongVar2);\n                  *(undefined *)((long)charPtr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar + (long)ptr4);\n                  *(undefined2 *)((long)charPtr4 + 1) = 0x7830;\n                  charPtr2 = (char *)((long)charPtr4 + 3);\n                  do {\n                    charPtr3 = charPtr2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(charPtr3,\"%02x\",(ulong)byte1);\n                    charPtr2 = charPtr3 + 2;\n                  } while (ptr4 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(charPtr3 + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(charPtr3 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(charPtr4 + 1) = 0;\n                    *charPtr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = charPtr4 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(charPtr4 + 1) = 0;\n                    *charPtr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = charPtr4 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)ptr2 - (int)charPtr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charPtr4 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          charPtr4 = (undefined8 *)((long)charPtr4 + ulongVar);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)charPtr4 = 0x5e;\n        *(byte *)((long)charPtr4 + 1) = byte1 + 0x40;\n        charPtr4 = (undefined8 *)((long)charPtr4 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)charPtr4 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((paramList != (long *)0x0) && (paramList[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((charPtr2 = (char *)(**(code **)(*(long *)(baseAddress + 8) + 0x220))\n                                  (baseAddress,paramList[2],0,stackArray), charPtr2 != (char *)0x0 &&\n      (*charPtr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(paramList[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    mergedString = (undefined8 *)reconcat(mergedString,ptr4,ptr3,charPtr2,0);\n    ptr4 = mergedString;\n  }\n  printf(formatString,ptr4);\n  if (charPtr != (char *)0x0) {\n    *charPtr = '@';\n  }\nLAB_001047ba:\n  free(mergedString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_00103b49",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "print_formatted_error_message_00106400",
                "param_1": "errorCode",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "shouldPrintError",
                "local_d8": "bufferSize",
                "local_d4": "localVar4",
                "local_d0": "buffer",
                "local_c8": "localVar2",
                "local_b8": "localArray",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "arg1Copy",
                "local_78": "arg2Copy",
                "local_68": "arg3Copy",
                "local_58": "arg4Copy",
                "local_48": "arg5Copy",
                "local_38": "arg6Copy",
                "local_28": "arg7Copy",
                "local_18": "arg8Copy"
            },
            "code": "\nvoid printFormattedErrorMessage_00106400(undefined4 errorCode,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char shouldPrintError;\n  undefined4 bufferSize;\n  undefined4 localVar4;\n  undefined *buffer;\n  undefined *localVar2;\n  undefined localArray [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  undefined4 arg4Copy;\n  undefined4 arg5Copy;\n  undefined4 arg6Copy;\n  undefined4 arg7Copy;\n  undefined4 arg8Copy;\n  \n  if (shouldPrintError != '\\0') {\n    arg1Copy = errorCode;\n    arg2Copy = arg2;\n    arg3Copy = arg3;\n    arg4Copy = arg4;\n    arg5Copy = arg5;\n    arg6Copy = arg6;\n    arg7Copy = arg7;\n    arg8Copy = arg8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localVar2 = localArray;\n  localVar4 = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_formatted_error_message_001063a0(errorMessage,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_0010249f",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_call_00103533",
                "param_1": "firstArray",
                "param_2": "secondArray",
                "uVar1": "result"
            },
            "code": "\nulong compareAndCall_00103533(undefined8 *firstArray,undefined8 *secondArray)\n\n{\n  ulong result;\n  \n  if ((ulong)firstArray[1] < (ulong)secondArray[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)secondArray[1] < (ulong)firstArray[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*firstArray,*secondArray);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_call_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_symbol_information_0010651a",
                "print_symbol_info_001054d0": "original_print_symbol_info"
            },
            "code": "\nvoid print_symbol_information_0010651a(void)\n\n{\n  original_print_symbol_info();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "imported": false,
            "current_name": "print_symbol_information_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolInfo",
                "param_2": "param",
                "iVar1": "printWidth",
                "cVar2": "isUndefined",
                "uVar3": "localizedErrorMsg",
                "lVar4": "symbolAddress"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolInfo,undefined8 param)\n\n{\n  int printWidth;\n  char isUndefined;\n  undefined8 localizedErrorMsg;\n  long symbolAddress;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  printWidth = DAT_0010b7a8;\n  if (isUndefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        localizedErrorMsg = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        print_error_message_00106300(localizedErrorMsg,printWidth);\n        goto LAB_00103623;\n      }\n      localizedErrorMsg = *(undefined8 *)*symbolInfo;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolInfo[2] == 0) {\n          symbolAddress = symbolInfo[1];\n        }\n        else {\n          symbolAddress = *(long *)(symbolInfo[2] + 0x38);\n        }\n        print_symbol_info_001054d0(symbolAddress);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_info_and_character_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      localizedErrorMsg = *(undefined8 *)*symbolInfo;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,localizedErrorMsg);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_info_and_character_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) != '-') {\n    print_formatted_string_00104740(&DAT_0010712c,symbolInfo,0,param);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolInfo + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolInfo + 0x20));\n  print_formatted_string_00104740(&DAT_0010712c,symbolInfo,0,param);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "FUN_001035a2",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_information_001064b0",
                "param_1": "symbolPointer",
                "param_2": "parameter2",
                "cVar1": "isUndefinedSymclass",
                "print_formatted_string_00104740": "printFormattedString",
                "print_symbol_info_001054d0": "printSymbolInfo",
                "putchar": "printChar",
                "print_symbol_information_0010651a": "printSymbolInformationHelper"
            },
            "code": "\nvoid printSymbolInformation_001064b0(long *symbolPointer,undefined8 parameter2)\n\n{\n  char isUndefinedSymclass;\n  \n  printFormattedString(&DAT_00107363,symbolPointer,0,parameter2);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolPointer + 8));\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbolPointer + 8));\n  if (isUndefinedSymclass != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  printSymbolInfo(*(undefined8 *)*symbolPointer);\n  putchar(0x20);\n  if (symbolPointer[2] == 0) {\n    if (symbolPointer[1] != 0) {\n      printSymbolInformation_001064b0Helper();\n      return;\n    }\n  }\n  else if (*(long *)(symbolPointer[2] + 0x38) != 0) {\n    printSymbolInfo();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103573",
                "FUN_00103729",
                "FUN_00102670",
                "FUN_001035a2",
                "FUN_00103abf",
                "FUN_00102f19",
                "FUN_001055f0",
                "FUN_001047d0",
                "FUN_00105110",
                "FUN_001043d0",
                "FUN_00103463",
                "FUN_00103b2b",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010351b",
                "FUN_001054d0",
                "FUN_00102f7b",
                "FUN_001062d0",
                "FUN_00102739",
                "FUN_001036e0",
                "FUN_001036a7"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_formatted_string_00103b49",
                "param_1": "data1",
                "param_2": "data2"
            },
            "code": "\nvoid printFormattedString_00103b49(undefined8 data1,undefined8 data2)\n\n{\n  print_formatted_string_00104740(&DAT_0010712d,data1,0,data2);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_formatted_string_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_undefined_symbols_00103abf",
                "param_1": "fileName",
                "param_2": "symbolName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printUndefinedSymbols_00103abf(undefined8 fileName,undefined8 symbolName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,fileName,symbolName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_undefined_symbols_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "compare_and_return_difference_00103bf6",
                "in_RAX": "return_value",
                "iVar1": "comparison_result",
                "auVar2": "result_array"
            },
            "code": "\nundefined  [16] compare_and_return_difference_00103bf6(void)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result_array [16];\n  \n  comparison_result = compare_strings_00104fa0();\n  result_array._0_4_ = -comparison_result;\n  result_array._4_4_ = 0;\n  result_array._8_8_ = return_value;\n  return result_array;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_difference_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "unaff_RBX": "outputFile",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "in_stack_00000008": "exitStatus",
                "lVar1": "currentTargetValue",
                "pcVar2": "errorMessage"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long currentTargetValue;\n  char *errorMessage;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitStatus;\n  \n  errorMessage = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,errorMessage);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitStatus == 0) {\n    errorMessage = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,errorMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitStatus);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "reengineer_function_00102c19",
                "pcVar1": "pointerVar1",
                "pcVar2": "pointerVar2",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "undefined8Var",
                "lVar7": "longVar7",
                "puVar8": "pointerVar8",
                "lVar9": "longVar9",
                "puVar10": "pointerVar10",
                "unaff_RBX": "pointerVar11",
                "__ptr": "pointerVar12",
                "unaff_RBP": "pointerVar13",
                "puVar11": "pointerVar14",
                "puVar12": "pointerVar15",
                "puVar13": "pointerVar16",
                "in_R9": "pointerVar17",
                "puVar14": "pointerVar18",
                "unaff_R12": "pointerVar19",
                "puVar15": "pointerVar20",
                "unaff_R13": "pointerVar21",
                "unaff_R14": "pointerVar22",
                "unaff_R15": "pointerVar23",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongVar",
                "uVar18": "ulongVar18",
                "in_stack_00000008": "undefined8Var1",
                "in_stack_00000010": "undefined8PtrVar",
                "in_stack_00000018": "undefined8PtrVar2",
                "in_stack_00000038": "undefined8Var2",
                "in_stack_00000040": "voidPtrVar",
                "in_stack_00000048": "undefined8PtrVar3"
            },
            "code": "\n\n\nvoid reengineer_function_00102c19(void)\n\n{\n  char *pointerVar1;\n  code *pointerVar2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 undefined8Var;\n  long longVar7;\n  undefined8 *pointerVar8;\n  long longVar9;\n  undefined8 *pointerVar10;\n  undefined8 *pointerVar11;\n  undefined8 *pointerVar12;\n  undefined8 *pointerVar13;\n  undefined8 *pointerVar14;\n  undefined8 *pointerVar15;\n  undefined8 *in_R8;\n  undefined8 *pointerVar16;\n  undefined8 *pointerVar17;\n  undefined8 *pointerVar18;\n  undefined8 *pointerVar19;\n  undefined8 *pointerVar20;\n  undefined8 *pointerVar21;\n  undefined8 *pointerVar22;\n  undefined8 *pointerVar23;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongVar;\n  ulong ulongVar18;\n  undefined8 undefined8Var1;\n  undefined8 *undefined8PtrVar;\n  undefined8 *undefined8PtrVar2;\n  undefined8 undefined8Var2;\n  void *voidPtrVar;\n  undefined8 *undefined8PtrVar3;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (pointerVar11 != pointerVar21) {\n      if (pointerVar22 == (undefined8 *)0x8) {\n        *pointerVar11 = *pointerVar21;\n        process_binary_001049c0();\n        return;\n      }\n      for (; pointerVar22 != (undefined8 *)0x0; pointerVar22 = (undefined8 *)((long)pointerVar22 + -1)) {\n        *(undefined *)pointerVar11 = *(undefined *)pointerVar21;\n        pointerVar21 = (undefined8 *)((long)pointerVar21 + (ulong)byteVar * -2 + 1);\n        pointerVar11 = (undefined8 *)((long)pointerVar11 + (ulong)byteVar * -2 + 1);\n      }\n      process_binary_001049c0();\n      return;\n    }\n    pointerVar11 = (undefined8 *)((long)pointerVar11 + (long)pointerVar22);\nLAB_001049c3:\n    do {\n      do {\n        pointerVar21 = (undefined8 *)((long)pointerVar21 + (long)pointerVar22);\n        pointerVar20 = pointerVar19;\n        pointerVar15 = pointerVar13;\n        if (pointerVar19 <= pointerVar21) goto LAB_00104b15;\nLAB_001049cf:\n        pointerVar8 = (undefined8 *)\n                 (**(code **)(pointerVar13[1] + 0x270))\n                           (pointerVar13,ulongVar & 0xffffffff,pointerVar21,pointerVar23);\n        pointerVar14 = pointerVar13;\n        pointerVar15 = pointerVar21;\n        pointerVar20 = pointerVar23;\n        if (pointerVar8 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pointerVar1 = (char *)pointerVar8[1];\n        if (((pointerVar1 == (char *)0x0) || (*pointerVar1 != '_')) || (pointerVar1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(pointerVar8[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          pointerVar21 = (undefined8 *)((long)pointerVar21 + (long)pointerVar22);\n          pointerVar20 = pointerVar19;\n          pointerVar15 = pointerVar13;\n          if (pointerVar19 <= pointerVar21) {\nLAB_00104b15:\n            pointerVar11 = (undefined8 *)((long)pointerVar11 - (long)undefined8PtrVar2);\n            if (pointerVar22 == (undefined8 *)0x8) {\n              longVar9 = pointerVar15[1];\n              pointerVar14 = (undefined8 *)((long)pointerVar11 + 7);\n              if (-1 < (long)pointerVar11) {\n                pointerVar14 = pointerVar11;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              pointerVar2 = *(code **)(longVar9 + 0x208);\n              pointerVar14 = (undefined8 *)((long)pointerVar14 >> 3);\n            }\n            else {\n              pointerVar14 = (undefined8 *)((long)pointerVar11 / (long)pointerVar22);\n              longVar9 = pointerVar15[1];\n              pointerVar2 = *(code **)(longVar9 + 0x208);\n            }\n            pointerVar13 = pointerVar15;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointerVar15;\n              DAT_0010b770 = (undefined8 *)(*pointerVar2)(pointerVar15);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointerVar15[1] + 0x208))(pointerVar15);\n              pointerVar11 = undefined8PtrVar3;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_and_exit_00106530(*pointerVar15);\n                pointerVar12 = pointerVar23;\n                goto LAB_00102d8e;\n              }\n              pointerVar19 = (undefined8 *)(ulong)undefined8Var2._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar18 = (ulong)(DAT_0010b80c != 0);\n                qsort(undefined8PtrVar3,(size_t)pointerVar14,(size_t)pointerVar19,check_compilation_00102fd2);\n                pointerVar20 = (undefined8 *)xmalloc((long)pointerVar14 << 4);\n                pointerVar16 = DAT_0010b770;\n                pointerVar13 = DAT_0010b768;\n                pointerVar22 = (undefined8 *)((long)pointerVar14 * (long)pointerVar19 + (long)pointerVar11);\n                pointerVar8 = DAT_0010b770;\n                pointerVar17 = DAT_0010b768;\n                if (pointerVar22 <= pointerVar11) goto LAB_00102ec2;\n                pointerVar14 = (undefined8 *)\n                          (**(code **)(pointerVar15[1] + 0x270))(pointerVar15,ulongVar18 & 0xffffffff,pointerVar11);\n                pointerVar12 = pointerVar11;\n                in_R8 = pointerVar19;\n                undefined8PtrVar = pointerVar20;\n                if (pointerVar14 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(undefined8PtrVar3,(size_t)pointerVar14,(size_t)pointerVar19,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar9 = pointerVar15[1];\n            }\n            pointerVar12 = (undefined8 *)0x0;\n            do {\n              pointerVar15 = undefined8PtrVar3;\n              pointerVar8 = (undefined8 *)(ulong)DAT_0010b7f8;\n              pointerVar22 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointerVar20 = (undefined8 *)(**(code **)(longVar9 + 0x208))(pointerVar13);\n                if (pointerVar20 == (undefined8 *)0x0) goto LAB_00102ed2;\n                pointerVar11 = pointerVar12 + (long)pointerVar14 * 2;\n                pointerVar14 = pointerVar12;\n                do {\n                  if (pointerVar11 <= pointerVar14) {\nLAB_00104c75:\n                    if (voidPtrVar == (void *)0x0) {\n                      free(undefined8PtrVar3);\n                      free(pointerVar12);\n                      return;\n                    }\n                    free(voidPtrVar);\n                    free(undefined8PtrVar3);\n                    free(pointerVar12);\n                    return;\n                  }\n                  pointerVar8 = pointerVar20;\n                  longVar9 = (**(code **)(pointerVar13[1] + 0x270))(pointerVar13,pointerVar22,*pointerVar14);\n                  if (longVar9 == 0) {\n                    print_error_and_exit_00106530(*pointerVar13,0);\nLAB_00102ed2:\n                    pointerVar15 = (undefined8 *)*pointerVar13;\n                    print_error_and_exit_00106530();\n                    pointerVar16 = in_R8;\n                    pointerVar18 = pointerVar17;\n                    goto LAB_00102edb;\n                  }\n                  pointerVar15 = pointerVar14 + 1;\n                  pointerVar14 = pointerVar14 + 2;\n                  print_strings_00105110(pointerVar13,longVar9,*pointerVar15,undefined8Var1);\n                } while( true );\n              }\n              pointerVar19 = (undefined8 *)(ulong)undefined8Var2._4_4_;\n              pointerVar23 = (undefined8 *)(**(code **)(longVar9 + 0x208))(pointerVar13);\n              if (pointerVar23 == (undefined8 *)0x0) {\n                print_error_and_exit_00106530(*pointerVar13);\n                pointerVar15 = pointerVar19;\n                if (DAT_0010b80c == 0) {\n                  longVar9 = (**(code **)(pointerVar13[1] + 0x350))(pointerVar13);\n                  pointerVar14 = undefined8PtrVar3;\n                  pointerVar20 = pointerVar19;\n                  if (longVar9 < 1) {\n                    pointerVar8 = (undefined8 *)0x0;\n                    pointerVar11 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    pointerVar11 = (undefined8 *)xmalloc();\n                    pointerVar8 = (undefined8 *)(**(code **)(pointerVar13[1] + 0x358))(pointerVar13,pointerVar11);\n                    pointerVar15 = pointerVar20;\n                    if ((long)pointerVar8 < 0) {\n                      pointerVar15 = (undefined8 *)*pointerVar13;\n                      pointerVar14 = (undefined8 *)print_error_and_exit_00106530(pointerVar15,pointerVar20);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointerVar8 = pointerVar19;\n                  pointerVar11 = undefined8PtrVar3;\n                  pointerVar14 = (undefined8 *)0x0;\n                  pointerVar20 = (undefined8 *)0x0;\n                }\n                pointerVar17 = &stack0x00000040;\n                in_R8 = pointerVar11;\n                longVar9 = (**(code **)(pointerVar13[1] + 0x360))(pointerVar13,pointerVar20,pointerVar14,pointerVar8);\n                pointerVar19 = pointerVar15;\n                if (0 < longVar9) {\n                  pointerVar19 = (undefined8 *)((long)pointerVar15 + longVar9);\n                  undefined8PtrVar3 = (undefined8 *)xrealloc(undefined8PtrVar3);\n                  longVar7 = 0;\n                  do {\n                    undefined8PtrVar3[(long)((long)pointerVar15 + longVar7)] =\n                         (void *)(longVar7 * 0x30 + (long)voidPtrVar);\n                    longVar7 = longVar7 + 1;\n                  } while (longVar9 != longVar7);\n                  undefined8PtrVar3[(long)((long)pointerVar15 + longVar9)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (pointerVar11 != (undefined8 *)0x0)) {\n                  free(pointerVar11);\n                }\n                if ((*(byte *)((long)pointerVar13 + 0x4a) & 0x10) != 0) {\n                  pointerVar11 = (undefined8 *)*pointerVar13;\n                  DAT_0010b230 = '\\0';\n                  undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(undefined8Var);\n                }\n                pointerVar22 = (undefined8 *)(ulong)undefined8Var2._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                pointerVar14 = (undefined8 *)(ulong)boolVar;\n                pointerVar8 = undefined8PtrVar3;\n                undefined8PtrVar2 = undefined8PtrVar3;\n                pointerVar23 = (undefined8 *)(**(code **)(pointerVar13[1] + 0x208))(pointerVar13);\n                if (pointerVar23 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointerVar14 = (undefined8 *)((long)pointerVar14 * (long)pointerVar19 + (long)pointerVar15);\n                pointerVar11 = pointerVar15;\n                while( true ) {\n                  if (pointerVar14 <= pointerVar11) goto LAB_00104c75;\n                  pointerVar8 = pointerVar23;\n                  longVar9 = (**(code **)(pointerVar13[1] + 0x270))(pointerVar13,pointerVar22,pointerVar11);\n                  if (longVar9 == 0) break;\n                  pointerVar11 = (undefined8 *)((long)pointerVar11 + (long)pointerVar19);\n                  print_strings_00105110(pointerVar13,longVar9,0,undefined8Var1);\n                }\n                print_error_and_exit_00106530(*pointerVar13,0);\n              }\n              print_error_and_exit_00106530(*pointerVar13);\n              pointerVar15 = pointerVar13;\n              pointerVar20 = pointerVar23;\nLAB_00102eb0:\n              print_error_and_exit_00106530(*pointerVar14);\nLAB_00102eb9:\n              print_error_and_exit_00106530(*pointerVar15);\nLAB_00102ec2:\n              pointerVar14 = (undefined8 *)0x0;\n              pointerVar12 = pointerVar11;\n              in_R8 = pointerVar19;\n              pointerVar16 = pointerVar8;\n              pointerVar13 = pointerVar17;\n              undefined8PtrVar = pointerVar20;\nLAB_00104e35:\n              while (pointerVar17 = pointerVar16, pointerVar12 < pointerVar22) {\n                pointerVar11 = (undefined8 *)((long)pointerVar12 + (long)in_R8);\n                if (pointerVar11 < pointerVar22) {\n                  pointerVar8 = pointerVar13;\n                  pointerVar16 = in_R8;\n                  pointerVar18 = pointerVar17;\n                  pointerVar10 = (undefined8 *)(**(code **)(pointerVar15[1] + 0x270))();\n                  if (pointerVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    pointerVar17 = pointerVar18;\n                    in_R8 = pointerVar16;\n                    pointerVar15 = (undefined8 *)*pointerVar15;\n                    pointerVar10 = (undefined8 *)print_error_and_exit_00106530();\n                  }\n                  else {\n                    pointerVar8 = (undefined8 *)pointerVar14[4];\n                    if ((*(uint *)(pointerVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar9 = pointerVar14[2];\nLAB_00102ee7:\n                  if (pointerVar8 == (undefined8 *)pointerVar10[4]) {\n                    longVar9 = pointerVar10[2] - longVar9;\n                    pointerVar16 = pointerVar13;\n                    pointerVar18 = pointerVar12;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar9 = pointerVar8[8] - longVar9;\n                  pointerVar16 = pointerVar13;\n                  pointerVar18 = pointerVar12;\n                }\n                else {\n                  pointerVar8 = (undefined8 *)pointerVar14[4];\n                  if ((*(uint *)(pointerVar14 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar9 = pointerVar14[2];\n                    pointerVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointerVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointerVar16 = pointerVar13;\n                  pointerVar18 = pointerVar12;\n                  if (*(int *)(pointerVar15[1] + 8) == 5) {\n                    longVar9 = pointerVar14[7];\n                  }\n                  else {\n                    longVar9 = pointerVar14[2];\n                    if ((*(byte *)((long)pointerVar8 + 0x25) & 0x10) == 0) {\n                      if (pointerVar11 < pointerVar22) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointerVar14 = pointerVar10;\n                pointerVar12 = pointerVar11;\n                pointerVar13 = pointerVar17;\n                if (longVar9 != 0) {\n                  *pointerVar20 = pointerVar18;\n                  pointerVar20[1] = longVar9;\n                  pointerVar20 = pointerVar20 + 2;\n                }\n              }\n              pointerVar14 = (undefined8 *)((long)pointerVar20 - (long)undefined8PtrVar >> 4);\n              qsort(undefined8PtrVar,(size_t)pointerVar14,0x10,FUN_00103533);\n              longVar9 = pointerVar15[1];\n              pointerVar11 = pointerVar12;\n              pointerVar13 = pointerVar15;\n              pointerVar12 = undefined8PtrVar;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(pointerVar1 + (pointerVar1[2] == '_'),\"__gnu_lto_slim\");\n        undefined8PtrVar = pointerVar8;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            undefined8PtrVar = (undefined8 *)*pointerVar13;\n            DAT_0010b230 = '\\0';\n            undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_formatted_error_message_00106400(undefined8Var,undefined8PtrVar);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(pointerVar8 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointerVar8 + 3) & 0x800082) == 0) && (pointerVar8[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointerVar8[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUNC_00104d5b:\n          if ((pointerVar8[4] != 0x10c2a8) && (pointerVar8[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointerVar8 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUNC_00104d5b;\nLAB_00104a53:\n      pointerVar17 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(pointerVar13[1] + 0x230))(pointerVar13);\n        if (charVar != '\\0') {\n          reengineer_function_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointerVar8[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(pointerVar13[1] + 0x230))(pointerVar13);\n    if (charVar != '\\0') {\n      reengineer_function_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointerVar20 = (undefined8 *)((long)pointerVar19 * (long)pointerVar22);\n  pointerVar19 = (undefined8 *)((long)undefined8PtrVar2 + (long)pointerVar20);\n  pointerVar11 = undefined8PtrVar2;\n  pointerVar15 = pointerVar13;\n  if (undefined8PtrVar2 < pointerVar19) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongVar = (ulong)boolVar;\n  pointerVar21 = undefined8PtrVar2;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "reengineer_function_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_and_exit_00106530",
                "iVar1": "errorType",
                "uVar2": "errorMessage",
                "lVar3": "printLineNumber",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorAndExit_00106530(void)\n\n{\n  int errorType;\n  undefined8 errorMessage;\n  long printLineNumber;\n  undefined8 additionalInfo;\n  \n  print_error_message_00106540();\n  printLineNumber = 1;\n  xexit();\n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (printLineNumber != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,printLineNumber,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_00106540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103c00",
                "FUN_00102f9f",
                "FUN_00102fd2",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "convert_and_print_0010268b",
                "puVar1": "ptrValue",
                "bVar2": "currentByte",
                "bVar3": "nextByte",
                "iVar4": "isTerminal",
                "sVar5": "inputLength",
                "puVar6": "outputPtr",
                "pcVar7": "tempCharPtr",
                "uVar8": "outputLength",
                "uVar9": "bracketChar",
                "puVar10": "concatStrPtr",
                "puVar11": "inputPtr",
                "unaff_RBP": "stackFramePtr",
                "puVar12": "outputStrPtr",
                "unaff_R12": "returnCharPtr",
                "unaff_R13": "inputStrPtr",
                "lVar13": "loopCount",
                "uVar14": "bytesProcessed",
                "unaff_R14": "formatStr",
                "unaff_R15": "functionPtr",
                "bVar15": "loopCondition",
                "__s": "tempStrPtr",
                "in_stack_00000038": "formatArg"
            },
            "code": "\n\n\nvoid convertAndPrint_0010268b(void)\n\n{\n  undefined8 *ptrValue;\n  byte currentByte;\n  byte nextByte;\n  int isTerminal;\n  size_t inputLength;\n  undefined8 *outputPtr;\n  char *tempCharPtr;\n  ulong outputLength;\n  undefined8 bracketChar;\n  undefined *concatStrPtr;\n  undefined8 *inputPtr;\n  long stackFramePtr;\n  undefined8 *outputStrPtr;\n  undefined *returnCharPtr;\n  undefined8 *inputStrPtr;\n  long loopCount;\n  uint bytesProcessed;\n  char *formatStr;\n  long functionPtr;\n  byte loopCondition;\n  char *tempStrPtr;\n  undefined8 formatArg;\n  \n  loopCondition = 0;\n  outputStrPtr = inputStrPtr;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      currentByte = *(byte *)outputStrPtr;\n      if (currentByte == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)currentByte * 2] & 2) == 0) &&\n            (outputStrPtr = (undefined8 *)((long)outputStrPtr + 1), currentByte < 0xc0));\n    inputLength = strlen((char *)inputStrPtr);\n    outputStrPtr = DAT_0010b790;\n    inputPtr = inputStrPtr;\n    if (_DAT_0010b798 < inputLength * 9) {\n      free(DAT_0010b790);\n      inputLength = strlen((char *)inputStrPtr);\n      _DAT_0010b798 = inputLength * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      outputStrPtr = DAT_0010b790;\n    }\n    while( true ) {\n      inputStrPtr = DAT_0010b790;\n      currentByte = *(byte *)inputPtr;\n      ptrValue = (undefined8 *)((long)inputPtr + 1);\n      if (currentByte == 0) break;\n      if (((&_sch_istable)[(ulong)currentByte * 2] & 2) == 0) {\n        if ((currentByte < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)outputStrPtr = currentByte;\n          outputStrPtr = (undefined8 *)((long)outputStrPtr + 1);\n          inputPtr = ptrValue;\n        }\n        else {\n          nextByte = *(byte *)((long)inputPtr + 1);\n          if ((nextByte & 0xc0) == 0x80) {\n            outputPtr = outputStrPtr;\n            if ((currentByte & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                bytesProcessed = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                loopCount = 2;\n                goto LAB_00102917;\n              case 4:\n                isTerminal = isatty(1);\n                if (isTerminal == 0) {\n                  nextByte = *(byte *)((long)inputPtr + 1);\n                }\n                else {\n                  *(undefined *)(outputStrPtr + 1) = 0;\n                  *outputStrPtr = 0x6d37343b31335b1b;\n                  nextByte = *(byte *)((long)inputPtr + 1);\n                  outputPtr = outputStrPtr + 1;\n                }\n              case 2:\n                bytesProcessed = 2;\n                sprintf((char *)outputPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)inputPtr >> 2 & 7),\n                        (ulong)((*(byte *)inputPtr & 3) << 6 | nextByte & 0x3f));\n                outputPtr = (undefined8 *)((long)outputPtr + 6);\n                goto LAB_00102a27;\n              default:\n                bytesProcessed = 2;\n              }\n            }\n            else {\n              nextByte = *(byte *)((long)inputPtr + 2);\n              if ((nextByte & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((currentByte & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  bytesProcessed = 3;\nLAB_00102a62:\n                  for (outputLength = (ulong)bytesProcessed; outputLength != 0; outputLength = outputLength - 1) {\n                    *(undefined *)outputPtr = *(undefined *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + (ulong)loopCondition * -2 + 1);\n                    outputPtr = (undefined8 *)((long)outputPtr + (ulong)loopCondition * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  loopCount = 3;\nLAB_00102917:\n                  bracketChar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    bracketChar = 0x3c;\n                  }\n                  sprintf((char *)outputStrPtr,\"%c\",bracketChar);\n                  *(undefined *)((long)outputStrPtr + 3) = 0;\n                  outputPtr = (undefined8 *)(loopCount + (long)inputPtr);\n                  *(undefined2 *)((long)outputStrPtr + 1) = 0x7830;\n                  tempCharPtr = (char *)((long)outputStrPtr + 3);\n                  do {\n                    tempStrPtr = tempCharPtr;\n                    currentByte = *(byte *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + 1);\n                    sprintf(tempStrPtr,\"%02x\",(ulong)currentByte);\n                    tempCharPtr = tempStrPtr + 2;\n                  } while (inputPtr != outputPtr);\n                  bracketChar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    bracketChar = 0x3e;\n                  }\n                  bytesProcessed = (uint)loopCount;\n                  sprintf(tempStrPtr + 2,\"%c\",bracketChar);\n                  outputPtr = (undefined8 *)(tempStrPtr + 3);\n                  break;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal == 0) {\n                    nextByte = *(byte *)((long)inputPtr + 2);\n                  }\n                  else {\n                    *(undefined *)(outputStrPtr + 1) = 0;\n                    *outputStrPtr = 0x6d37343b31335b1b;\n                    nextByte = *(byte *)((long)inputPtr + 2);\n                    outputPtr = outputStrPtr + 1;\n                  }\n                case 2:\n                  bytesProcessed = 3;\n                  sprintf((char *)outputPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)inputPtr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 | nextByte & 0x3f));\n                  outputPtr = (undefined8 *)((long)outputPtr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (isTerminal = isatty(1), isTerminal != 0)) {\n                    *(undefined4 *)outputPtr = 0x6d305b1b;\n                    outputPtr = (undefined8 *)((long)outputPtr + 4);\n                    *(undefined *)outputPtr = 0;\n                  }\n                  break;\n                default:\n                  bytesProcessed = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)inputPtr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  bytesProcessed = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  loopCount = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal != 0) {\n                    *(undefined *)(outputStrPtr + 1) = 0;\n                    *outputStrPtr = 0x6d37343b31335b1b;\n                    outputPtr = outputStrPtr + 1;\n                  }\n                case 2:\n                  bytesProcessed = 4;\n                  isTerminal = sprintf((char *)outputPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)inputPtr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 2) >> 2 & 0xfU));\n                  outputPtr = (undefined8 *)((long)outputPtr + (long)isTerminal);\n                  goto LAB_00102a27;\n                default:\n                  bytesProcessed = 4;\n                }\n              }\n            }\n            outputLength = (ulong)(uint)((int)outputPtr - (int)outputStrPtr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputStrPtr = currentByte;\n            bytesProcessed = 1;\n            outputLength = 1;\n          }\n          outputStrPtr = (undefined8 *)((long)outputStrPtr + outputLength);\n          inputPtr = (undefined8 *)((long)ptrValue + (ulong)(bytesProcessed - 1));\n        }\n      }\n      else {\n        *(undefined *)outputStrPtr = 0x5e;\n        *(byte *)((long)outputStrPtr + 1) = currentByte + 0x40;\n        outputStrPtr = (undefined8 *)((long)outputStrPtr + 2);\n        inputPtr = ptrValue;\n      }\n    }\n    *(undefined *)outputStrPtr = 0;\n  }\nLAB_0010485e:\n  outputStrPtr = (undefined8 *)0x0;\n  if ((((stackFramePtr != 0) && (*(long *)(stackFramePtr + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((tempCharPtr = (char *)(**(code **)(*(long *)(functionPtr + 8) + 0x220))\n                                  (functionPtr,*(long *)(stackFramePtr + 0x10),0,\n                                   (long)&stack0x00000038 + 7), tempCharPtr != (char *)0x0 &&\n      (*tempCharPtr != '\\0')))) {\n    concatStrPtr = &DAT_001071e0;\n    if ((formatArg._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(stackFramePtr + 0x10) + 0x20) != 0x10c2a8)) {\n      concatStrPtr = &DAT_001071df;\n    }\n    outputStrPtr = (undefined8 *)reconcat(0,inputStrPtr,concatStrPtr,tempCharPtr,0);\n    inputStrPtr = outputStrPtr;\n  }\n  printf(formatStr,inputStrPtr);\n  if (returnCharPtr != (undefined *)0x0) {\n    *returnCharPtr = 0x40;\n  }\n  free(outputStrPtr);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "isatty",
                "strlen",
                "free",
                "FUN_001047d0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "convert_and_print_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "check_and_compare_files_00103bec",
                "in_RAX": "result",
                "iVar1": "comparisonResult",
                "auVar2": "returnValue"
            },
            "code": "\nundefined  [16] checkAndCompareFiles_00103bec(void)\n\n{\n  int comparisonResult;\n  undefined8 result;\n  undefined returnValue [16];\n  \n  comparisonResult = compare_binary_files_00105050();\n  returnValue._0_4_ = -comparisonResult;\n  returnValue._4_4_ = 0;\n  returnValue._8_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "check_and_compare_files_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_formatted_error_message_001063a0",
                "param_1": "errorMessage",
                "param_2": "formatArgs",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printFormattedErrorMessage_001063a0(char *errorMessage,__gnuc_va_list formatArgs)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010b820);\n  vfprintf(standardError,errorMessage,formatArgs);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "decode_and_print_string_00102739",
                "puVar1": "output_str_ptr",
                "bVar2": "byte_val",
                "bVar3": "next_byte_val",
                "iVar4": "is_tty",
                "sVar5": "str_len",
                "pcVar6": "at_symbol_ptr",
                "pcVar8": "demangled_str_ptr",
                "__ptr": "concatenated_str_ptr",
                "puVar7": "output_str_end_ptr",
                "puVar12": "output_str_current_ptr",
                "unaff_RBP": "input_str_ptr",
                "unaff_R13": "input_str_current_ptr",
                "lVar13": "temp_long",
                "uVar14": "temp_uint",
                "unaff_R14": "format_str",
                "unaff_R15": "func_call_ctx_ptr",
                "bVar15": "temp_byte",
                "__s": "temp_str",
                "in_stack_00000038": "temp_stack_value"
            },
            "code": "\n\n\nvoid decode_and_print_string_00102739(void)\n\n{\n  undefined8 *output_str_ptr;\n  byte byte_val;\n  byte next_byte_val;\n  int is_tty;\n  size_t str_len;\n  char *at_symbol_ptr;\n  undefined8 *output_str_end_ptr;\n  char *demangled_str_ptr;\n  undefined8 *concatenated_str_ptr;\n  ulong uVar9;\n  undefined8 uVar10;\n  undefined *output_str_ptr1;\n  long input_str_ptr;\n  undefined8 *output_str_current_ptr;\n  undefined8 *input_str_current_ptr;\n  long temp_long;\n  uint temp_uint;\n  char *format_str;\n  long func_call_ctx_ptr;\n  byte temp_byte;\n  char *temp_str;\n  undefined8 temp_stack_value;\n  \n  temp_byte = 0;\n  output_str_current_ptr = input_str_current_ptr;\n  if (*(int *)(*(long *)(func_call_ctx_ptr + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      at_symbol_ptr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    at_symbol_ptr = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      concatenated_str_ptr = (undefined8 *)0x0;\n    }\n    else {\n      concatenated_str_ptr = (undefined8 *)0x0;\n      if (input_str_current_ptr != (undefined8 *)0x0) goto LAB_0010269d;\n      concatenated_str_ptr = (undefined8 *)0x0;\n      input_str_current_ptr = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  at_symbol_ptr = strchr((char *)input_str_current_ptr,0x40);\n  if (at_symbol_ptr == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (input_str_ptr == 0) {\n        concatenated_str_ptr = (undefined8 *)0x0;\n        printf(format_str);\n      }\n      else {\n        if (*(long *)(input_str_ptr + 0x10) != 0) {\n          print_formatted_string_001047d0();\n          return;\n        }\n        concatenated_str_ptr = (undefined8 *)0x0;\n        printf(format_str);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    output_str_current_ptr = input_str_current_ptr;\n    concatenated_str_ptr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte_val = *(byte *)output_str_current_ptr;\n      if (byte_val == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte_val * 2] & 2) == 0) &&\n            (output_str_current_ptr = (undefined8 *)((long)output_str_current_ptr + 1), byte_val < 0xc0));\n    str_len = strlen((char *)input_str_current_ptr);\n    output_str_current_ptr = DAT_0010b790;\n    if (_DAT_0010b798 < str_len * 9) {\n      free(DAT_0010b790);\n      str_len = strlen((char *)input_str_current_ptr);\n      _DAT_0010b798 = str_len * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      output_str_current_ptr = DAT_0010b790;\n    }\n    while( true ) {\n      output_str_end_ptr = DAT_0010b790;\n      byte_val = *(byte *)input_str_current_ptr;\n      output_str_ptr = (undefined8 *)((long)input_str_current_ptr + 1);\n      if (byte_val == 0) break;\n      if (((&_sch_istable)[(ulong)byte_val * 2] & 2) == 0) {\n        if ((byte_val < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)output_str_current_ptr = byte_val;\n          output_str_current_ptr = (undefined8 *)((long)output_str_current_ptr + 1);\n          input_str_current_ptr = output_str_ptr;\n        }\n        else {\n          next_byte_val = *(byte *)((long)input_str_current_ptr + 1);\n          if ((next_byte_val & 0xc0) == 0x80) {\n            output_str_end_ptr = output_str_current_ptr;\n            if ((byte_val & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                temp_uint = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                temp_long = 2;\n                goto LAB_00102917;\n              case 4:\n                is_tty = isatty(1);\n                if (is_tty == 0) {\n                  next_byte_val = *(byte *)((long)input_str_current_ptr + 1);\n                }\n                else {\n                  *(undefined *)(output_str_current_ptr + 1) = 0;\n                  *output_str_current_ptr = 0x6d37343b31335b1b;\n                  next_byte_val = *(byte *)((long)input_str_current_ptr + 1);\n                  output_str_end_ptr = output_str_current_ptr + 1;\n                }\n              case 2:\n                temp_uint = 2;\n                sprintf((char *)output_str_end_ptr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)input_str_current_ptr >> 2 & 7)\n                        ,(ulong)((*(byte *)input_str_current_ptr & 3) << 6 | next_byte_val & 0x3f));\n                output_str_end_ptr = (undefined8 *)((long)output_str_end_ptr + 6);\n                goto LAB_00102a27;\n              default:\n                temp_uint = 2;\n              }\n            }\n            else {\n              next_byte_val = *(byte *)((long)input_str_current_ptr + 2);\n              if ((next_byte_val & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte_val & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  temp_uint = 3;\nLAB_00102a62:\n                  for (uVar9 = (ulong)temp_uint; uVar9 != 0; uVar9 = uVar9 - 1) {\n                    *(undefined *)output_str_end_ptr = *(undefined *)input_str_current_ptr;\n                    input_str_current_ptr = (undefined8 *)((long)input_str_current_ptr + (ulong)temp_byte * -2 + 1);\n                    output_str_end_ptr = (undefined8 *)((long)output_str_end_ptr + (ulong)temp_byte * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  temp_long = 3;\nLAB_00102917:\n                  uVar10 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar10 = 0x3c;\n                  }\n                  sprintf((char *)output_str_current_ptr,\"%c\",uVar10);\n                  *(undefined *)((long)output_str_current_ptr + 3) = 0;\n                  output_str_end_ptr = (undefined8 *)(temp_long + (long)input_str_current_ptr);\n                  *(undefined2 *)((long)output_str_current_ptr + 1) = 0x7830;\n                  demangled_str_ptr = (char *)((long)output_str_current_ptr + 3);\n                  do {\n                    temp_str = demangled_str_ptr;\n                    byte_val = *(byte *)input_str_current_ptr;\n                    input_str_current_ptr = (undefined8 *)((long)input_str_current_ptr + 1);\n                    sprintf(temp_str,\"%02x\",(ulong)byte_val);\n                    demangled_str_ptr = temp_str + 2;\n                  } while (input_str_current_ptr != output_str_end_ptr);\n                  uVar10 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar10 = 0x3e;\n                  }\n                  temp_uint = (uint)temp_long;\n                  sprintf(temp_str + 2,\"%c\",uVar10);\n                  output_str_end_ptr = (undefined8 *)(temp_str + 3);\n                  break;\n                case 4:\n                  is_tty = isatty(1);\n                  if (is_tty == 0) {\n                    next_byte_val = *(byte *)((long)input_str_current_ptr + 2);\n                  }\n                  else {\n                    *(undefined *)(output_str_current_ptr + 1) = 0;\n                    *output_str_current_ptr = 0x6d37343b31335b1b;\n                    next_byte_val = *(byte *)((long)input_str_current_ptr + 2);\n                    output_str_end_ptr = output_str_current_ptr + 1;\n                  }\n                case 2:\n                  temp_uint = 3;\n                  sprintf((char *)output_str_end_ptr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)input_str_current_ptr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)input_str_current_ptr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)input_str_current_ptr + 1) & 3) << 6 | next_byte_val & 0x3f));\n                  output_str_end_ptr = (undefined8 *)((long)output_str_end_ptr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (is_tty = isatty(1), is_tty != 0)) {\n                    *(undefined4 *)output_str_end_ptr = 0x6d305b1b;\n                    output_str_end_ptr = (undefined8 *)((long)output_str_end_ptr + 4);\n                    *(undefined *)output_str_end_ptr = 0;\n                  }\n                  break;\n                default:\n                  temp_uint = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)input_str_current_ptr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  temp_uint = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  temp_long = 4;\n                  goto LAB_00102917;\n                case 4:\n                  is_tty = isatty(1);\n                  if (is_tty != 0) {\n                    *(undefined *)(output_str_current_ptr + 1) = 0;\n                    *output_str_current_ptr = 0x6d37343b31335b1b;\n                    output_str_end_ptr = output_str_current_ptr + 1;\n                  }\n                case 2:\n                  temp_uint = 4;\n                  is_tty = sprintf((char *)output_str_end_ptr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)input_str_current_ptr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)input_str_current_ptr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)input_str_current_ptr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)input_str_current_ptr + 2) >> 2 & 0xfU));\n                  output_str_end_ptr = (undefined8 *)((long)output_str_end_ptr + (long)is_tty);\n                  goto LAB_00102a27;\n                default:\n                  temp_uint = 4;\n                }\n              }\n            }\n            uVar9 = (ulong)(uint)((int)output_str_end_ptr - (int)output_str_current_ptr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)output_str_current_ptr = byte_val;\n            temp_uint = 1;\n            uVar9 = 1;\n          }\n          output_str_current_ptr = (undefined8 *)((long)output_str_current_ptr + uVar9);\n          input_str_current_ptr = (undefined8 *)((long)output_str_ptr + (ulong)(temp_uint - 1));\n        }\n      }\n      else {\n        *(undefined *)output_str_current_ptr = 0x5e;\n        *(byte *)((long)output_str_current_ptr + 1) = byte_val + 0x40;\n        output_str_current_ptr = (undefined8 *)((long)output_str_current_ptr + 2);\n        input_str_current_ptr = output_str_ptr;\n      }\n    }\n    *(undefined *)output_str_current_ptr = 0;\n    input_str_current_ptr = output_str_end_ptr;\n  }\n  else {\n    *at_symbol_ptr = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      concatenated_str_ptr = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)input_str_current_ptr == '\\0') ||\n       (output_str_current_ptr = (undefined8 *)bfd_demangle(), output_str_current_ptr == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      concatenated_str_ptr = (undefined8 *)0x0;\n    }\n    else {\n      input_str_current_ptr = output_str_current_ptr;\n      concatenated_str_ptr = output_str_current_ptr;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((input_str_ptr != 0) && (*(long *)(input_str_ptr + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((demangled_str_ptr = (char *)(**(code **)(*(long *)(func_call_ctx_ptr + 8) + 0x220))\n                                  (func_call_ctx_ptr,*(long *)(input_str_ptr + 0x10),0,\n                                   (long)&stack0x00000038 + 7), demangled_str_ptr != (char *)0x0 &&\n      (*demangled_str_ptr != '\\0')))) {\n    output_str_ptr1 = &DAT_001071e0;\n    if ((temp_stack_value._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(input_str_ptr + 0x10) + 0x20) != 0x10c2a8)) {\n      output_str_ptr1 = &DAT_001071df;\n    }\n    concatenated_str_ptr = (undefined8 *)reconcat(concatenated_str_ptr,input_str_current_ptr,output_str_ptr1,demangled_str_ptr,0);\n    input_str_current_ptr = concatenated_str_ptr;\n  }\n  printf(format_str,input_str_current_ptr);\n  if (at_symbol_ptr != (char *)0x0) {\n    *at_symbol_ptr = '@';\n  }\nLAB_001047ba:\n  free(concatenated_str_ptr);\n  return;\n}\n\n",
            "called": [
                "printf",
                "bfd_demangle",
                "strchr",
                "FUN_001047d0",
                "FUN_0010268b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_binary_files_00105050",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "cVar1": "last_char",
                "__s": "file_content_1",
                "__s_00": "file_content_2",
                "lVar3": "file_size_1",
                "uVar2": "file_size_2",
                "sVar5": "file_length_1",
                "sVar6": "file_length_2",
                "pcVar7": "str_1",
                "pcVar8": "str_2",
                "lVar9": "file_info_1",
                "lVar10": "file_info_2",
                "uVar11": "result",
                "uVar12": "address_2",
                "uVar13": "address_1",
                "uVar14": "end_address_1",
                "uVar15": "program_name",
                "unaff_R13": "file_info_2",
                "bVar16": "is_same_extension"
            },
            "code": "\nulong compareBinaryFiles_00105050(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char last_char;\n  ulong file_size_2;\n  char *file_content_1;\n  char *file_content_2;\n  long file_size_1;\n  uint uVar4;\n  size_t file_length_1;\n  size_t file_length_2;\n  char *str_1;\n  char *str_2;\n  long file_info_1;\n  long file_info_2;\n  ulong result;\n  ulong address_2;\n  ulong address_1;\n  ulong end_address_1;\n  undefined8 program_name;\n  long file_info_2;\n  bool is_same_extension;\n  \n  file_info_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path_1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  file_info_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,file_path_2,DAT_0010b768);\n  if ((file_info_1 != 0) && (file_info_2 != 0)) {\n    file_size_1 = *(long *)(file_info_2 + 0x20);\n    if (*(long *)(file_info_1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (file_size_1 == 0x10c2a8) {\nLAB_001050fa:\n        result = compare_strings_00104fa0(file_path_1,file_path_2);\n        return result;\n      }\n    }\n    else if (file_size_1 == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      address_1 = *(long *)(file_info_1 + 0x10) + *(long *)(*(long *)(file_info_1 + 0x20) + 0x30);\n      result = *(long *)(file_info_2 + 0x10) + *(long *)(file_size_1 + 0x30);\n      if (address_1 == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(address_1 < result) | 1);\n    }\n    return result;\n  }\n  program_name = *DAT_0010b780;\n  print_error_and_exit_00106530();\n  file_info_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,program_name,DAT_0010b770);\n  file_info_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((file_info_1 == 0) || (file_info_2 = file_info_2, file_info_2 == 0)) {\n    file_info_2 = print_error_and_exit_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file_info_1 + 0x20) == 0x10c2a8) || (*(long *)(file_info_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  address_1 = *(ulong *)(*(long *)(file_info_1 + 0x20) + 0x30);\n  file_size_2 = *(ulong *)(*(long *)(file_info_2 + 0x20) + 0x30);\n  end_address_1 = *(long *)(file_info_1 + 0x10) + address_1;\n  address_2 = *(long *)(file_info_2 + 0x10) + file_size_2;\n  is_same_extension = end_address_1 < address_2;\n  if ((end_address_1 != address_2) || (is_same_extension = address_1 < file_size_2, address_1 != file_size_2)) {\n    return (ulong)(-(uint)is_same_extension | 1);\n  }\n  file_content_1 = *(char **)(file_info_1 + 8);\n  file_content_2 = *(char **)(file_info_2 + 8);\n  file_length_1 = strlen(file_content_1);\n  file_length_2 = strlen(file_content_2);\n  str_1 = strstr(file_content_1,\"gnu_compiled\");\n  if (str_1 == (char *)0x0) {\n    str_2 = strstr(file_content_1,\"gcc2_compiled\");\n    str_1 = strstr(file_content_2,\"gnu_compiled\");\n    if ((str_1 == (char *)0x0) && (str_1 = strstr(file_content_2,\"gcc2_compiled\"), str_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str_1 = strstr(file_content_2,\"gnu_compiled\");\n    if (str_1 == (char *)0x0) {\n      str_2 = strstr(file_content_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(file_info_2 + 0x18) & 0x4000;\n  if ((*(byte *)(file_info_1 + 0x19) & 0x40) == 0) {\n    if ((file_length_1 < 3) || (file_content_1[file_length_1 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((file_length_2 < 3) || (file_content_2[file_length_2 - 2] != '.')) goto LAB_00103202;\n      is_same_extension = false;\n      goto LAB_001031e7;\n    }\n    last_char = file_content_1[file_length_1 - 1];\n    is_same_extension = last_char == 'o' || last_char == 'a';\n    if (uVar4 == 0) {\n      if ((file_length_2 < 3) || (file_content_2[file_length_2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (file_length_2 < 3) {\n      return 0xffffffff;\n    }\n    if (file_content_2[file_length_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_same_extension = true;\nLAB_001031e7:\n    if ((file_content_2[file_length_2 - 1] != 'o') && (file_content_2[file_length_2 - 1] != 'a')) {\n      if (is_same_extension) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_same_extension) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(program_name,result);\n  return result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "compare_binary_files_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_binary_001049c0",
                "pcVar1": "currentCharPtr",
                "pcVar2": "currentCodePtr",
                "cVar3": "currentChar",
                "iVar4": "currentInt",
                "uVar5": "currentUInt",
                "uVar6": "currentUInt64",
                "lVar7": "currentLong",
                "puVar8": "currentPointer",
                "lVar9": "currentLength",
                "puVar10": "unaff_RBPtr",
                "puVar11": "tempPointer1",
                "puVar12": "tempPointer2",
                "puVar13": "tempPointer3",
                "puVar14": "tempPointer4",
                "puVar15": "tempPointer5",
                "unaff_RBX": "tempRegisterBX",
                "unaff_RBP": "tempRegisterBP",
                "unaff_R12": "tempRegisterR12",
                "unaff_R13": "tempRegisterR13",
                "unaff_R14": "tempRegisterR14",
                "unaff_R15": "tempRegisterR15",
                "unaff_retaddr": "tempReturnAddress",
                "uVar18": "currentUInt64",
                "in_stack_00000008": "stackParameter8",
                "in_stack_00000010": "stackParameterPointer1",
                "in_stack_00000018": "stackParameterPointer2",
                "in_stack_00000038": "stackParameterUInt32",
                "in_stack_00000040": "stackParameterPointer3",
                "in_stack_00000048": "stackParameterPointer4"
            },
            "code": "\nvoid processBinary_001049c0(void)\n\n{\n  char *currentCharPtr;\n  code *currentCodePtr;\n  char currentChar;\n  int currentInt;\n  uint currentUInt;\n  undefined8 currentUInt64;\n  long currentLong;\n  undefined8 *currentPointer;\n  long currentLength;\n  undefined8 *unaff_RBPtr;\n  undefined8 *tempRegisterBX;\n  undefined8 *__ptr;\n  undefined8 *tempRegisterBP;\n  undefined8 *tempPointer1;\n  undefined8 *tempPointer2;\n  undefined8 *in_R8;\n  undefined8 *tempPointer3;\n  undefined8 *in_R9;\n  undefined8 *tempPointer4;\n  undefined8 *tempPointer5;\n  undefined8 *tempRegisterR12;\n  undefined8 *tempRegisterR13;\n  undefined8 *tempRegisterR14;\n  undefined8 *tempRegisterR15;\n  bool bVar16;\n  byte bVar17;\n  ulong tempReturnAddress;\n  ulong currentUInt64;\n  undefined8 stackParameter8;\n  undefined8 *stackParameterPointer1;\n  undefined8 *stackParameterPointer2;\n  undefined8 stackParameterUInt32;\n  void *stackParameterPointer3;\n  undefined8 *stackParameterPointer4;\n  \n  bVar17 = 0;\n  do {\n    tempRegisterBX = (undefined8 *)((long)tempRegisterBX + (long)tempRegisterR14);\nLAB_001049c3:\n    do {\n      do {\n        tempRegisterR13 = (undefined8 *)((long)tempRegisterR13 + (long)tempRegisterR14);\n        tempPointer5 = tempRegisterR12;\n        tempPointer2 = tempRegisterBP;\n        if (tempRegisterR12 <= tempRegisterR13) goto LAB_00104b15;\nLAB_001049cf:\n        currentPointer = (undefined8 *)\n                 (**(code **)(tempRegisterBP[1] + 0x270))\n                           (tempRegisterBP,tempReturnAddress & 0xffffffff,tempRegisterR13,tempRegisterR15);\n        tempPointer1 = tempRegisterBP;\n        tempPointer2 = tempRegisterR13;\n        tempPointer5 = tempRegisterR15;\n        if (currentPointer == (undefined8 *)0x0) goto LAB_00102eb0;\n        currentCharPtr = (char *)currentPointer[1];\n        if (((currentCharPtr == (char *)0x0) || (*currentCharPtr != '_')) || (currentCharPtr[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          currentUInt = (uint)(currentPointer[4] == 0x10c2a8);\nLAB_00104af9:\n          if (currentUInt != 0) goto LAB_00104a2d;\n          tempRegisterR13 = (undefined8 *)((long)tempRegisterR13 + (long)tempRegisterR14);\n          tempPointer5 = tempRegisterR12;\n          tempPointer2 = tempRegisterBP;\n          if (tempRegisterR12 <= tempRegisterR13) {\nLAB_00104b15:\n            tempRegisterBX = (undefined8 *)((long)tempRegisterBX - (long)stackParameterPointer2);\n            if (tempRegisterR14 == (undefined8 *)0x8) {\n              currentLength = tempPointer2[1];\n              tempPointer1 = (undefined8 *)((long)tempRegisterBX + 7);\n              if (-1 < (long)tempRegisterBX) {\n                tempPointer1 = tempRegisterBX;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              currentCodePtr = *(code **)(currentLength + 0x208);\n              tempPointer1 = (undefined8 *)((long)tempPointer1 >> 3);\n            }\n            else {\n              tempPointer1 = (undefined8 *)((long)tempRegisterBX / (long)tempRegisterR14);\n              currentLength = tempPointer2[1];\n              currentCodePtr = *(code **)(currentLength + 0x208);\n            }\n            tempRegisterBP = tempPointer2;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = tempPointer2;\n              DAT_0010b770 = (undefined8 *)(*currentCodePtr)(tempPointer2);\n              DAT_0010b768 = (undefined8 *)(**(code **)(tempPointer2[1] + 0x208))(tempPointer2);\n              tempRegisterBX = stackParameterPointer4;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_and_exit_00106530(*tempPointer2);\n                __ptr = tempRegisterR15;\n                goto LAB_00102d8e;\n              }\n              tempRegisterR12 = (undefined8 *)(ulong)stackParameterUInt32._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                currentUInt64 = (ulong)(DAT_0010b80c != 0);\n                qsort(stackParameterPointer4,(size_t)tempPointer1,(size_t)tempRegisterR12,check_compilation_00102fd2);\n                tempPointer5 = (undefined8 *)xmalloc((long)tempPointer1 << 4);\n                tempPointer3 = DAT_0010b770;\n                tempRegisterBP = DAT_0010b768;\n                tempRegisterR14 = (undefined8 *)((long)tempPointer1 * (long)tempRegisterR12 + (long)tempRegisterBX);\n                currentPointer = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (tempRegisterR14 <= tempRegisterBX) goto LAB_00102ec2;\n                tempPointer1 = (undefined8 *)\n                          (**(code **)(tempPointer2[1] + 0x270))(tempPointer2,currentUInt64 & 0xffffffff,tempRegisterBX);\n                __ptr = tempRegisterBX;\n                in_R8 = tempRegisterR12;\n                stackParameterPointer1 = tempPointer5;\n                if (tempPointer1 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackParameterPointer4,(size_t)tempPointer1,(size_t)tempRegisterR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              currentLength = tempPointer2[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              tempPointer2 = stackParameterPointer4;\n              currentPointer = (undefined8 *)(ulong)DAT_0010b7f8;\n              tempRegisterR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                tempPointer5 = (undefined8 *)(**(code **)(currentLength + 0x208))(tempRegisterBP);\n                if (tempPointer5 == (undefined8 *)0x0) goto LAB_00102ed2;\n                tempRegisterBX = __ptr + (long)tempPointer1 * 2;\n                tempPointer1 = __ptr;\n                do {\n                  if (tempRegisterBX <= tempPointer1) {\nLAB_00104c75:\n                    if (stackParameterPointer3 == (void *)0x0) {\n                      free(stackParameterPointer4);\n                      free(__ptr);\n                      return;\n                    }\n                    free(stackParameterPointer3);\n                    free(stackParameterPointer4);\n                    free(__ptr);\n                    return;\n                  }\n                  currentPointer = tempPointer5;\n                  currentLength = (**(code **)(tempRegisterBP[1] + 0x270))(tempRegisterBP,tempRegisterR14,*tempPointer1);\n                  if (currentLength == 0) {\n                    print_error_and_exit_00106530(*tempRegisterBP,0);\nLAB_00102ed2:\n                    tempPointer2 = (undefined8 *)*tempRegisterBP;\n                    print_error_and_exit_00106530();\n                    tempPointer3 = in_R8;\n                    tempPointer4 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  tempPointer2 = tempPointer1 + 1;\n                  tempPointer1 = tempPointer1 + 2;\n                  print_strings_00105110(tempRegisterBP,currentLength,*tempPointer2,stackParameter8);\n                } while( true );\n              }\n              tempRegisterR12 = (undefined8 *)(ulong)stackParameterUInt32._4_4_;\n              tempRegisterR15 = (undefined8 *)(**(code **)(currentLength + 0x208))(tempRegisterBP);\n              if (tempRegisterR15 == (undefined8 *)0x0) {\n                print_error_and_exit_00106530(*tempRegisterBP);\n                tempPointer2 = tempRegisterR12;\n                if (DAT_0010b80c == 0) {\n                  currentLength = (**(code **)(tempRegisterBP[1] + 0x350))(tempRegisterBP);\n                  tempPointer1 = stackParameterPointer4;\n                  tempPointer5 = tempRegisterR12;\n                  if (currentLength < 1) {\n                    currentPointer = (undefined8 *)0x0;\n                    tempRegisterBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    tempRegisterBX = (undefined8 *)xmalloc();\n                    currentPointer = (undefined8 *)(**(code **)(tempRegisterBP[1] + 0x358))(tempRegisterBP,tempRegisterBX);\n                    tempPointer2 = tempPointer5;\n                    if ((long)currentPointer < 0) {\n                      tempPointer2 = (undefined8 *)*tempRegisterBP;\n                      tempPointer1 = (undefined8 *)print_error_and_exit_00106530(tempPointer2,tempPointer5);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  currentPointer = tempRegisterR12;\n                  tempRegisterBX = stackParameterPointer4;\n                  tempPointer1 = (undefined8 *)0x0;\n                  tempPointer5 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = tempRegisterBX;\n                currentLength = (**(code **)(tempRegisterBP[1] + 0x360))(tempRegisterBP,tempPointer5,tempPointer1,currentPointer);\n                tempRegisterR12 = tempPointer2;\n                if (0 < currentLength) {\n                  tempRegisterR12 = (undefined8 *)((long)tempPointer2 + currentLength);\n                  stackParameterPointer4 = (undefined8 *)xrealloc(stackParameterPointer4);\n                  currentLong = 0;\n                  do {\n                    stackParameterPointer4[(long)((long)tempPointer2 + currentLong)] =\n                         (void *)(currentLong * 0x30 + (long)stackParameterPointer3);\n                    currentLong = currentLong + 1;\n                  } while (currentLength != currentLong);\n                  stackParameterPointer4[(long)((long)tempPointer2 + currentLength)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (tempRegisterBX != (undefined8 *)0x0)) {\n                  free(tempRegisterBX);\n                }\n                if ((*(byte *)((long)tempRegisterBP + 0x4a) & 0x10) != 0) {\n                  tempRegisterBX = (undefined8 *)*tempRegisterBP;\n                  DAT_0010b230 = '\\0';\n                  currentUInt64 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(currentUInt64);\n                }\n                tempRegisterR14 = (undefined8 *)(ulong)stackParameterUInt32._4_4_;\n                bVar16 = DAT_0010b80c != 0;\n                tempPointer1 = (undefined8 *)(ulong)bVar16;\n                currentPointer = stackParameterPointer4;\n                stackParameterPointer2 = stackParameterPointer4;\n                tempRegisterR15 = (undefined8 *)(**(code **)(tempRegisterBP[1] + 0x208))(tempRegisterBP);\n                if (tempRegisterR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                tempPointer1 = (undefined8 *)((long)tempPointer1 * (long)tempRegisterR12 + (long)tempPointer2);\n                tempRegisterBX = tempPointer2;\n                while( true ) {\n                  if (tempPointer1 <= tempRegisterBX) goto LAB_00104c75;\n                  currentPointer = tempRegisterR15;\n                  currentLength = (**(code **)(tempRegisterBP[1] + 0x270))(tempRegisterBP,tempRegisterR14,tempRegisterBX);\n                  if (currentLength == 0) break;\n                  tempRegisterBX = (undefined8 *)((long)tempRegisterBX + (long)tempRegisterR12);\n                  print_strings_00105110(tempRegisterBP,currentLength,0,stackParameter8);\n                }\n                print_error_and_exit_00106530(*tempRegisterBP,0);\n              }\n              print_error_and_exit_00106530(*tempRegisterBP);\n              tempPointer2 = tempRegisterBP;\n              tempPointer5 = tempRegisterR15;\nLAB_00102eb0:\n              print_error_and_exit_00106530(*tempPointer1);\nLAB_00102eb9:\n              print_error_and_exit_00106530(*tempPointer2);\nLAB_00102ec2:\n              tempPointer1 = (undefined8 *)0x0;\n              __ptr = tempRegisterBX;\n              in_R8 = tempRegisterR12;\n              tempPointer3 = currentPointer;\n              tempRegisterBP = in_R9;\n              stackParameterPointer1 = tempPointer5;\nLAB_00104e35:\n              while (in_R9 = tempPointer3, __ptr < tempRegisterR14) {\n                tempRegisterBX = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (tempRegisterBX < tempRegisterR14) {\n                  currentPointer = tempRegisterBP;\n                  tempPointer3 = in_R8;\n                  tempPointer4 = in_R9;\n                  unaff_RBPtr = (undefined8 *)(**(code **)(tempPointer2[1] + 0x270))();\n                  if (unaff_RBPtr == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = tempPointer4;\n                    in_R8 = tempPointer3;\n                    tempPointer2 = (undefined8 *)*tempPointer2;\n                    unaff_RBPtr = (undefined8 *)print_error_and_exit_00106530();\n                  }\n                  else {\n                    currentPointer = (undefined8 *)tempPointer1[4];\n                    if ((*(uint *)(tempPointer1 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  currentLength = tempPointer1[2];\nLAB_00102ee7:\n                  if (currentPointer == (undefined8 *)unaff_RBPtr[4]) {\n                    currentLength = unaff_RBPtr[2] - currentLength;\n                    tempPointer3 = tempRegisterBP;\n                    tempPointer4 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  currentLength = currentPointer[8] - currentLength;\n                  tempPointer3 = tempRegisterBP;\n                  tempPointer4 = __ptr;\n                }\n                else {\n                  currentPointer = (undefined8 *)tempPointer1[4];\n                  if ((*(uint *)(tempPointer1 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    currentLength = tempPointer1[2];\n                    unaff_RBPtr = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  unaff_RBPtr = (undefined8 *)0x0;\nLAB_00104e95:\n                  tempPointer3 = tempRegisterBP;\n                  tempPointer4 = __ptr;\n                  if (*(int *)(tempPointer2[1] + 8) == 5) {\n                    currentLength = tempPointer1[7];\n                  }\n                  else {\n                    currentLength = tempPointer1[2];\n                    if ((*(byte *)((long)currentPointer + 0x25) & 0x10) == 0) {\n                      if (tempRegisterBX < tempRegisterR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                tempPointer1 = unaff_RBPtr;\n                __ptr = tempRegisterBX;\n                tempRegisterBP = in_R9;\n                if (currentLength != 0) {\n                  *tempPointer5 = tempPointer4;\n                  tempPointer5[1] = currentLength;\n                  tempPointer5 = tempPointer5 + 2;\n                }\n              }\n              tempPointer1 = (undefined8 *)((long)tempPointer5 - (long)stackParameterPointer1 >> 4);\n              qsort(stackParameterPointer1,(size_t)tempPointer1,0x10,FUN_00103533);\n              currentLength = tempPointer2[1];\n              tempRegisterBX = __ptr;\n              tempRegisterBP = tempPointer2;\n              __ptr = stackParameterPointer1;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        currentInt = strcmp(currentCharPtr + (currentCharPtr[2] == '_'),\"__gnu_lto_slim\");\n        stackParameterPointer1 = currentPointer;\n        if (currentInt == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackParameterPointer1 = (undefined8 *)*tempRegisterBP;\n            DAT_0010b230 = '\\0';\n            currentUInt64 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_formatted_error_message_00106400(currentUInt64,stackParameterPointer1);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          currentUInt = (*(uint *)(currentPointer + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(currentPointer + 3) & 0x800082) == 0) && (currentPointer[4] != 0x10c2a8)) &&\n           ((*(byte *)(currentPointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUNC_00104d5b:\n          if ((currentPointer[4] != 0x10c2a8) && (currentPointer[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(currentPointer + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUNC_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        currentChar = (**(code **)(tempRegisterBP[1] + 0x230))(tempRegisterBP);\n        if (currentChar != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (currentPointer[4] == 0x10c2a8);\nLAB_00104cba:\n    currentChar = (**(code **)(tempRegisterBP[1] + 0x230))(tempRegisterBP);\n    if (currentChar != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (tempRegisterBX != tempRegisterR13) {\n      if (tempRegisterR14 == (undefined8 *)0x8) {\n        *tempRegisterBX = *tempRegisterR13;\n        processBinary_001049c0();\n        return;\n      }\n      for (; tempRegisterR14 != (undefined8 *)0x0; tempRegisterR14 = (undefined8 *)((long)tempRegisterR14 + -1)) {\n        *(undefined *)tempRegisterBX = *(undefined *)tempRegisterR13;\n        tempRegisterR13 = (undefined8 *)((long)tempRegisterR13 + (ulong)bVar17 * -2 + 1);\n        tempRegisterBX = (undefined8 *)((long)tempRegisterBX + (ulong)bVar17 * -2 + 1);\n      }\n      processBinary_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  tempPointer5 = (undefined8 *)((long)tempRegisterR12 * (long)tempRegisterR14);\n  tempRegisterR12 = (undefined8 *)((long)stackParameterPointer2 + (long)tempPointer5);\n  tempRegisterBX = stackParameterPointer2;\n  tempPointer2 = tempRegisterBP;\n  if (stackParameterPointer2 < tempRegisterR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  tempReturnAddress = (ulong)bVar16;\n  tempRegisterR13 = stackParameterPointer2;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_binary_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "display_usage_00103ca0",
                "param_1": "file",
                "param_2": "exitCode",
                "lVar1": "targetName",
                "iVar2": "totalChars",
                "iVar3": "charsWritten",
                "pcVar4": "message",
                "lVar5": "index",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "targetIterator",
                "ppcVar8": "demanglerIterator",
                "pcVar9": "separator",
                "local_3c": "localVariable"
            },
            "code": "\nvoid displayUsage_00103ca0(FILE *file,int exitCode)\n\n{\n  long targetName;\n  int totalChars;\n  int charsWritten;\n  char *message;\n  long index;\n  size_t stringLength;\n  long *targetList;\n  long *targetIterator;\n  char **demanglerIterator;\n  char *separator;\n  uint localVariable;\n  \n  targetName = DAT_0010b820;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,message,targetName);\n  message = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    targetName = 1;\n    do {\n      index = targetName;\n      targetName = index + 1;\n    } while (message[index] == ' ');\n    localVariable = (uint)index;\n  }\n  else {\n    localVariable = 0;\n  }\n  totalChars = fprintf(file,\"%s\",message);\n  separator = \"\";\n  for (demanglerIterator = (char **)&libiberty_demanglers; *demanglerIterator != (char *)0x0; demanglerIterator = demanglerIterator + 3) {\n    stringLength = strlen(*demanglerIterator);\n    if (0x4a < (long)totalChars + stringLength) {\n      fprintf(file,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalChars = fprintf(file,\"%.*s\",(ulong)localVariable,message);\n    }\n    charsWritten = fprintf(file,\"%s\\\"%s\\\"\",separator,*demanglerIterator);\n    totalChars = totalChars + charsWritten;\n    separator = \", \";\n  }\n  fputc(10,file);\n  message = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(file,message);\n  targetName = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  targetIterator = targetList;\n  while( true ) {\n    targetName = *targetIterator;\n    targetIterator = targetIterator + 1;\n    if (targetName == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fseek",
                "bfd_target_list",
                "exit",
                "fprintf",
                "strlen",
                "dcgettext",
                "fputc",
                "free",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "display_usage_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "FUNC_00104d5b"
            },
            "code": "\nvoid FUNC_00104d5b(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 *puVar7;\n  long lVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *in_RCX;\n  undefined8 *unaff_RBX;\n  undefined8 *__ptr;\n  undefined8 *puVar11;\n  undefined8 *unaff_RBP;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *unaff_R12;\n  undefined8 *unaff_R13;\n  undefined8 *unaff_R14;\n  undefined8 *unaff_R15;\n  bool bVar16;\n  byte bVar17;\n  ulong unaff_retaddr;\n  ulong uVar18;\n  undefined8 param_7;\n  undefined8 *param_8;\n  undefined8 *param_9;\n  undefined8 in_stack_00000038;\n  void *param_13;\n  undefined8 *param_14;\n  \n  bVar17 = 0;\n  do {\n    if ((in_RCX[4] != 0x10c2a8) && (in_RCX[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n      puVar15 = unaff_R12;\n      puVar12 = unaff_RBP;\n      if (unaff_R12 <= unaff_R13) goto LAB_00104b15;\nLAB_001049cf:\n      in_RCX = (undefined8 *)\n               (**(code **)(unaff_RBP[1] + 0x270))\n                         (unaff_RBP,unaff_retaddr & 0xffffffff,unaff_R13,unaff_R15);\n      puVar11 = unaff_RBP;\n      puVar12 = unaff_R13;\n      puVar15 = unaff_R15;\n      if (in_RCX == (undefined8 *)0x0) goto LAB_00102eb0;\n      pcVar1 = (char *)in_RCX[1];\n      if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        uVar5 = (uint)(in_RCX[4] == 0x10c2a8);\nLAB_00104af9:\n        if (uVar5 != 0) goto LAB_00104a2d;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n        puVar15 = unaff_R12;\n        puVar12 = unaff_RBP;\n        if (unaff_R12 <= unaff_R13) {\nLAB_00104b15:\n          unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)param_9);\n          if (unaff_R14 == (undefined8 *)0x8) {\n            lVar9 = puVar12[1];\n            puVar11 = (undefined8 *)((long)unaff_RBX + 7);\n            if (-1 < (long)unaff_RBX) {\n              puVar11 = unaff_RBX;\n            }\n            in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n            pcVar2 = *(code **)(lVar9 + 0x208);\n            puVar11 = (undefined8 *)((long)puVar11 >> 3);\n          }\n          else {\n            puVar11 = (undefined8 *)((long)unaff_RBX / (long)unaff_R14);\n            lVar9 = puVar12[1];\n            pcVar2 = *(code **)(lVar9 + 0x208);\n          }\n          unaff_RBP = puVar12;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = puVar12;\n            DAT_0010b770 = (undefined8 *)(*pcVar2)(puVar12);\n            DAT_0010b768 = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n            unaff_RBX = param_14;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              print_error_and_exit_00106530(*puVar12);\n              __ptr = unaff_R15;\n              goto LAB_00102d8e;\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              uVar18 = (ulong)(DAT_0010b80c != 0);\n              qsort(param_14,(size_t)puVar11,(size_t)unaff_R12,check_compilation_00102fd2);\n              puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n              puVar13 = DAT_0010b770;\n              unaff_RBP = DAT_0010b768;\n              unaff_R14 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)unaff_RBX);\n              in_RCX = DAT_0010b770;\n              in_R9 = DAT_0010b768;\n              if (unaff_R14 <= unaff_RBX) goto LAB_00102ec2;\n              puVar11 = (undefined8 *)\n                        (**(code **)(puVar12[1] + 0x270))(puVar12,uVar18 & 0xffffffff,unaff_RBX);\n              __ptr = unaff_RBX;\n              in_R8 = unaff_R12;\n              param_8 = puVar15;\n              if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(param_14,(size_t)puVar11,(size_t)unaff_R12,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            lVar9 = puVar12[1];\n          }\n          __ptr = (undefined8 *)0x0;\n          do {\n            puVar12 = param_14;\n            puVar7 = (undefined8 *)(ulong)DAT_0010b7f8;\n            unaff_R14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              puVar15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(unaff_RBP);\n              if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaff_RBX = __ptr + (long)puVar11 * 2;\n              puVar11 = __ptr;\n              do {\n                if (unaff_RBX <= puVar11) {\nLAB_00104c75:\n                  if (param_13 != (void *)0x0) {\n                    free(param_13);\n                    free(param_14);\n                    free(__ptr);\n                    return;\n                  }\n                  free(param_14);\n                  free(__ptr);\n                  return;\n                }\n                puVar7 = puVar15;\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,*puVar11);\n                if (lVar9 == 0) {\n                  print_error_and_exit_00106530(*unaff_RBP,0);\nLAB_00102ed2:\n                  puVar12 = (undefined8 *)*unaff_RBP;\n                  print_error_and_exit_00106530();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                puVar12 = puVar11 + 1;\n                puVar11 = puVar11 + 2;\n                print_strings_00105110(unaff_RBP,lVar9,*puVar12,param_7);\n              } while( true );\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            unaff_R15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(unaff_RBP);\n            if (unaff_R15 == (undefined8 *)0x0) {\n              print_error_and_exit_00106530(*unaff_RBP);\n              puVar12 = unaff_R12;\n              if (DAT_0010b80c == 0) {\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x350))(unaff_RBP);\n                puVar11 = param_14;\n                puVar15 = unaff_R12;\n                if (lVar9 < 1) {\n                  puVar7 = (undefined8 *)0x0;\n                  unaff_RBX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaff_RBX = (undefined8 *)xmalloc();\n                  puVar7 = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x358))(unaff_RBP,unaff_RBX);\n                  puVar12 = puVar15;\n                  if ((long)puVar7 < 0) {\n                    puVar12 = (undefined8 *)*unaff_RBP;\n                    puVar11 = (undefined8 *)print_error_and_exit_00106530(puVar12,puVar15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                puVar7 = unaff_R12;\n                unaff_RBX = param_14;\n                puVar11 = (undefined8 *)0x0;\n                puVar15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = unaff_RBX;\n              lVar9 = (**(code **)(unaff_RBP[1] + 0x360))(unaff_RBP,puVar15,puVar11,puVar7);\n              unaff_R12 = puVar12;\n              if (0 < lVar9) {\n                unaff_R12 = (undefined8 *)((long)puVar12 + lVar9);\n                param_14 = (undefined8 *)xrealloc(param_14);\n                lVar8 = 0;\n                do {\n                  param_14[(long)puVar12 + lVar8] = (void *)(lVar8 * 0x30 + (long)param_13);\n                  lVar8 = lVar8 + 1;\n                } while (lVar9 != lVar8);\n                param_14[(long)puVar12 + lVar9] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                free(unaff_RBX);\n              }\n              if ((*(byte *)((long)unaff_RBP + 0x4a) & 0x10) != 0) {\n                unaff_RBX = (undefined8 *)*unaff_RBP;\n                DAT_0010b230 = '\\0';\n                uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                print_formatted_error_message_00106400(uVar6);\n              }\n              unaff_R14 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              bVar16 = DAT_0010b80c != 0;\n              puVar11 = (undefined8 *)(ulong)bVar16;\n              in_RCX = param_14;\n              param_9 = param_14;\n              unaff_R15 = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x208))(unaff_RBP);\n              if (unaff_R15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              puVar11 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)puVar12);\n              unaff_RBX = puVar12;\n              while( true ) {\n                if (puVar11 <= unaff_RBX) goto LAB_00104c75;\n                in_RCX = unaff_R15;\n                lVar9 = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,unaff_R14,unaff_RBX);\n                if (lVar9 == 0) break;\n                unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R12);\n                print_strings_00105110(unaff_RBP,lVar9,0,param_7);\n              }\n              print_error_and_exit_00106530(*unaff_RBP,0);\n            }\n            print_error_and_exit_00106530(*unaff_RBP);\n            puVar12 = unaff_RBP;\n            puVar15 = unaff_R15;\nLAB_00102eb0:\n            print_error_and_exit_00106530(*puVar11);\nLAB_00102eb9:\n            print_error_and_exit_00106530(*puVar12);\nLAB_00102ec2:\n            puVar11 = (undefined8 *)0x0;\n            __ptr = unaff_RBX;\n            in_R8 = unaff_R12;\n            puVar13 = in_RCX;\n            unaff_RBP = in_R9;\n            param_8 = puVar15;\nLAB_00104e35:\n            while (in_R9 = puVar13, __ptr < unaff_R14) {\n              unaff_RBX = (undefined8 *)((long)__ptr + (long)in_R8);\n              if (unaff_RBX < unaff_R14) {\n                puVar7 = unaff_RBP;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                puVar10 = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  puVar12 = (undefined8 *)*puVar12;\n                  puVar10 = (undefined8 *)print_error_and_exit_00106530();\n                }\n                else {\n                  puVar7 = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                lVar9 = puVar11[2];\nLAB_00102ee7:\n                if (puVar7 == (undefined8 *)puVar10[4]) {\n                  lVar9 = puVar10[2] - lVar9;\n                  puVar13 = unaff_RBP;\n                  puVar14 = __ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                lVar9 = puVar7[8] - lVar9;\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n              }\n              else {\n                puVar7 = (undefined8 *)puVar11[4];\n                if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  lVar9 = puVar11[2];\n                  puVar10 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = unaff_RBP;\n                puVar14 = __ptr;\n                if (*(int *)(puVar12[1] + 8) == 5) {\n                  lVar9 = puVar11[7];\n                }\n                else {\n                  lVar9 = puVar11[2];\n                  if ((*(byte *)((long)puVar7 + 0x25) & 0x10) == 0) {\n                    if (unaff_RBX < unaff_R14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              puVar11 = puVar10;\n              __ptr = unaff_RBX;\n              unaff_RBP = in_R9;\n              if (lVar9 != 0) {\n                *puVar15 = puVar14;\n                puVar15[1] = lVar9;\n                puVar15 = puVar15 + 2;\n              }\n            }\n            puVar11 = (undefined8 *)((long)puVar15 - (long)param_8 >> 4);\n            qsort(param_8,(size_t)puVar11,0x10,compare_and_call_00103533);\n            lVar9 = puVar12[1];\n            unaff_RBX = __ptr;\n            unaff_RBP = puVar12;\n            __ptr = param_8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n      param_8 = in_RCX;\n      if (iVar4 == 0) {\n        if (DAT_0010b230 != '\\0') {\n          param_8 = (undefined8 *)*unaff_RBP;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_formatted_error_message_00106400(uVar6,param_8);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        uVar5 = (*(uint *)(in_RCX + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(in_RCX + 3) & 0x800082) == 0) && (in_RCX[4] != 0x10c2a8)) &&\n         ((*(byte *)(in_RCX[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(in_RCX + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    cVar3 = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (cVar3 != '\\0') {\n      reengineer_function_00102c19();\n      return;\n    }\n  }\n  else {\n    if (in_RCX[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    cVar3 = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (cVar3 != '\\0') {\n      reengineer_function_00102c19();\n      return;\n    }\n  }\n  if (unaff_RBX != unaff_R13) {\n    if (unaff_R14 != (undefined8 *)0x8) {\n      for (; unaff_R14 != (undefined8 *)0x0; unaff_R14 = (undefined8 *)((long)unaff_R14 + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)unaff_R13;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (ulong)bVar17 * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)bVar17 * -2 + 1);\n      }\n      process_binary_001049c0();\n      return;\n    }\n    *unaff_RBX = *unaff_R13;\n    process_binary_001049c0();\n    return;\n  }\n  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)unaff_R14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)unaff_R12 * (long)unaff_R14);\n  unaff_R12 = (undefined8 *)((long)param_9 + (long)puVar15);\n  unaff_RBX = param_9;\n  puVar12 = unaff_RBP;\n  if (param_9 < unaff_R12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_retaddr = (ulong)bVar16;\n  unaff_R13 = param_9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00102c19",
                "qsort",
                "FUN_001049c0",
                "FUN_00106530",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00103533",
                "FUN_00102fd2",
                "dcgettext",
                "free",
                "xrealloc",
                "FUN_00106400",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUNC_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "error_code",
                "in_AL": "bool_value",
                "__arg": "arg_ptr",
                "__format": "format_str",
                "local_d8": "local_var1",
                "local_d4": "local_var2",
                "local_d0": "local_ptr1",
                "local_c8": "local_ptr2",
                "local_b8": "local_array",
                "local_b0": "local_var3",
                "local_a8": "local_var4",
                "local_a0": "local_var5",
                "local_98": "local_var6",
                "local_90": "local_var7",
                "local_88": "local_var8",
                "local_78": "local_var9",
                "local_68": "local_var10",
                "local_58": "local_var11",
                "local_48": "local_var12",
                "local_38": "local_var13",
                "local_28": "local_var14",
                "local_18": "local_var15"
            },
            "code": "\n\n\nvoid print_error_message_00106300(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char bool_value;\n  undefined4 *arg_ptr;\n  char *format_str;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined *local_ptr1;\n  undefined *local_ptr2;\n  undefined local_array [8];\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  undefined8 local_var6;\n  undefined8 local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  undefined4 local_var11;\n  undefined4 local_var12;\n  undefined4 local_var13;\n  undefined4 local_var14;\n  undefined4 local_var15;\n  \n  arg_ptr = &local_var1;\n  if (bool_value != '\\0') {\n    local_var8 = error_code;\n    local_var9 = param_2;\n    local_var10 = param_3;\n    local_var11 = param_4;\n    local_var12 = param_5;\n    local_var13 = param_6;\n    local_var14 = param_7;\n    local_var15 = param_8;\n  }\n  local_ptr1 = &stack0x00000008;\n  local_var1 = 8;\n  local_ptr2 = local_array;\n  local_var2 = 0x30;\n  local_var3 = error_code0;\n  local_var4 = error_code1;\n  local_var5 = error_code2;\n  local_var6 = error_code3;\n  local_var7 = error_code4;\n  print_formatted_error_message_001063a0();\n  format_str = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,format_str,arg_ptr);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_001053c0",
                "FUN_00103729",
                "FUN_00104370",
                "FUN_001055f0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_conditions_met_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_conditions_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_conditions_met_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 95160,
    "layers": [
        [
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00103573",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00103533",
            "FUN_00103abf",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_0010268b",
            "FUN_001063a0",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00106400",
            "FUN_00106530",
            "FUN_00102739",
            "FUN_00106300"
        ],
        [
            "FUN_00103c00",
            "FUN_00104370",
            "FUN_00102f9f",
            "FUN_00103463",
            "FUN_0010249f",
            "FUN_00104fa0",
            "FUN_00104740"
        ],
        [
            "FUN_00102fc3",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00103b49",
            "FUN_00103bf6",
            "FUN_00105050"
        ],
        [
            "FUN_00103bec",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0"
        ],
        [
            "FUN_001043d0"
        ],
        [
            "FUN_001055f0"
        ],
        [
            "FUN_001054d0"
        ],
        [
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_001035a2",
            "FUN_0010651a"
        ],
        [
            "FUN_00103a66",
            "FUN_001053c0",
            "FUN_001064b0"
        ]
    ],
    "locked_functions": []
}