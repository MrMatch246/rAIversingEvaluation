{
    "functions": {
        "FUN_0010c1a0": {
            "renaming": {},
            "code": "\n\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* asprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a0",
            "calling": [
                "asprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a0"
        },
        "FUN_001055a0": {
            "renaming": {
                "FUN_001055a0": "finalize_and_deregister_001055a0",
                "completed_0": "is_completed",
                "__cxa_finalize": "finalize",
                "__dso_handle": "dso_handle",
                "deregister_tm_clones": "deregister_clones"
            },
            "code": "\nvoid finalize_and_deregister_001055a0(void)\n\n{\n  if (is_completed != '\\0') {\n    return;\n  }\n  finalize(dso_handle);\n  deregister_clones();\n  is_completed = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "finalize_and_deregister_001055a0"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "set_print_width.cold",
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "parse_relocation_00103c00",
                "param_1": "input",
                "param_2": "relocation_address",
                "param_3": "reloc_buffer",
                "param_4": "first_buffer",
                "param_5": "result",
                "puVar1": "buffer",
                "auVar2": "temp",
                "lVar3": "upper_bound",
                "uVar4": "allocated_buffer",
                "uVar5": "canonicalized_reloc"
            },
            "code": "\nundefined8\nparse_relocation_00103c00(undefined8 *input,long relocation_address,undefined (*reloc_buffer) [16],undefined8 first_buffer,\n            undefined8 result)\n\n{\n  undefined8 *buffer;\n  undefined temp [16];\n  long upper_bound;\n  undefined8 allocated_buffer;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*reloc_buffer = relocation_address;\n  if ((*(byte *)(relocation_address + 0x24) & 4) == 0) {\n    **(undefined8 **)(*reloc_buffer + 8) = 0;\n    **(undefined8 **)reloc_buffer[1] = 0;\n  }\n  else {\n    upper_bound = bfd_get_reloc_upper_bound();\n    if (-1 < upper_bound) {\n      buffer = *(undefined8 **)(*reloc_buffer + 8);\n      allocated_buffer = xmalloc(upper_bound);\n      canonicalized_reloc = *(undefined8 *)(reloc_buffer[1] + 8);\n      *buffer = allocated_buffer;\n      buffer = *(undefined8 **)reloc_buffer[1];\n      canonicalized_reloc = bfd_canonicalize_reloc(input,relocation_address,**(undefined8 **)(*reloc_buffer + 8),canonicalized_reloc);\n      *buffer = canonicalized_reloc;\n      if (-1 < **(long **)reloc_buffer[1]) goto LAB_00103c7c;\n    }\n    bfd_fatal(*input);\n  }\nLAB_00103c7c:\n  upper_bound = *(long *)(*reloc_buffer + 8) + 8;\n  *(long *)reloc_buffer[1] = *(long *)reloc_buffer[1] + 8;\n  temp._8_4_ = (int)upper_bound;\n  temp._0_8_ = *(long *)*reloc_buffer + 8;\n  temp._12_4_ = (int)((ulong)upper_bound >> 0x20);\n  *reloc_buffer = temp;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "bfd_get_reloc_upper_bound",
                "bfd_fatal",
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "parse_relocation_00103c00"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "print_archive_filename_bsd",
                "FUN_00103463",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "print_archive_member_bsd",
                "print_object_filename_sysv",
                "FUN_00102739",
                "main",
                "print_symbol_info_bsd.cold",
                "print_symbol",
                "print_symbol_filename_sysv",
                "print_object_filename_posix",
                "print_symbol_filename_posix.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix",
                "print_symbol_filename_bsd.cold",
                "print_object_filename_bsd",
                "print_value.constprop.0",
                "print_archive_member_posix",
                "display_file",
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "errorMessage",
                "uVar9": "maskedRBX",
                "pcVar10": "symbolType",
                "cVar1": "isUndefined",
                "bVar8": "typeByte",
                "uVar2": "typeShort",
                "iVar3": "asprintfResult",
                "piVar5": "errnoLocation",
                "lVar7": "symbolInfoPtr",
                "unaff_RBX": "RBXValue",
                "bufp_6": "bufferPtr1",
                "bufp_7": "bufferPtr2"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefined;\n  ushort typeShort;\n  int asprintfResult;\n  long *errorMessage;\n  int *errnoLocation;\n  undefined8 uVar6;\n  long symbolInfoPtr;\n  ulong RBXValue;\n  byte typeByte;\n  ulong maskedRBX;\n  char *symbolType;\n  \n  errorMessage = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  maskedRBX = RBXValue & 0xffffffff;\n  fatal(errorMessage,maskedRBX);\n  print_symname(\"%-20s|\",errorMessage,0,maskedRBX);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*errorMessage + 8));\n  if (isUndefined == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*errorMessage);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*errorMessage + 8));\n  if (*(char *)(*errorMessage + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*errorMessage + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*errorMessage + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[3] != 0) {\n      symbolInfoPtr = *(long *)(errorMessage[3] + 0x30);\n      isUndefined = *(char *)(symbolInfoPtr + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolType = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolType = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfoPtr + 0x26) == 0) {\n        symbolType = \"None\";\n      }\n      else {\n        typeShort = *(ushort *)(symbolInfoPtr + 0x26) >> 4 & 3;\n        if (typeShort == 2) {\n          symbolType = \"Function\";\n        }\n        else if (typeShort == 3) {\n          symbolType = \"Array\";\n        }\n        else {\n          if (typeShort != 1) {\n            free(bufferPtr1);\n            typeShort = *(ushort *)(symbolInfoPtr + 0x26);\n            typeByte = *(byte *)(symbolInfoPtr + 0x28);\n            symbolType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&bufferPtr1,symbolType,(ulong)typeByte,(ulong)typeShort);\n            symbolType = bufferPtr1;\n            goto joined_r0x00103964;\n          }\n          symbolType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeByte = *(byte *)(errorMessage[2] + 0x48) & 0xf;\n    switch(typeByte) {\n    case 0:\n      symbolType = \"NOTYPE\";\n      break;\n    case 1:\n      symbolType = \"OBJECT\";\n      break;\n    case 2:\n      symbolType = \"FUNC\";\n      break;\n    case 3:\n      symbolType = \"SECTION\";\n      break;\n    case 4:\n      symbolType = \"FILE\";\n      break;\n    case 5:\n      symbolType = \"COMMON\";\n      break;\n    case 6:\n      symbolType = \"TLS\";\n      break;\n    default:\n      free(bufferPtr2);\n      symbolType = \"<processor specific>: %d\";\n      if ((2 < typeByte - 0xd) && (symbolType = \"<OS specific>: %d\", 2 < typeByte - 10)) {\n        symbolType = \"<unknown>: %d\";\n      }\n      symbolType = (char *)dcgettext(0,symbolType,5);\n      asprintfResult = asprintf(&bufferPtr2,symbolType,(ulong)typeByte);\n      symbolType = bufferPtr2;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        uVar6 = xstrerror(*errnoLocation);\n        fatal(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolType);\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(errorMessage[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  symbolInfoPtr = errorMessage[2];\n  if ((symbolInfoPtr != 0) || (symbolInfoPtr = errorMessage[3], symbolInfoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "print_value.constprop.0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "get_output_format_00104370",
                "param_1": "formatSpecifier",
                "param_2": "data",
                "uVar1": "errorMessage",
                "ppuVar2": "result",
                "print_format": "printFormat",
                "format": "currentFormat"
            },
            "code": "\nundefined ** getOutputFormat_00104370(undefined *formatSpecifier,undefined8 data)\n\n{\n  undefined8 errorMessage;\n  undefined **result;\n  \n  switch(*formatSpecifier) {\n  case 0x42:\n  case 0x62:\n    printFormat = 0;\n    currentFormat = (undefined *)&currentFormats;\n    return &currentFormats;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output currentFormat\",5);\n    fatal(errorMessage,formatSpecifier);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    non_fatal(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    result = (undefined **)set_printFormat_00104397(formatSpecifier,data,3);\n    return result;\n  case 0x50:\n  case 0x70:\n    result = (undefined **)set_printFormat_00104397(formatSpecifier,data,2);\n    return result;\n  case 0x53:\n  case 0x73:\n    result = (undefined **)set_printFormat_00104397(formatSpecifier,data,1);\n    return result;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "fatal",
                "set_output_format.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "get_output_format_00104370"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010c058": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c058",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_0010c058"
        },
        "FUN_0010c178": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c178",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010c178"
        },
        "FUN_0010c210": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c210",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010c210"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00105500": {
            "renaming": {
                "FUN_00105500": "run_main_with_arguments_00105500",
                "param_1": "argv",
                "param_2": "argc",
                "auStack_8": "auxiliaryStack"
            },
            "code": "\nvoid processEntry runMainWithArguments_00105500(undefined8 argv,undefined8 argc)\n\n{\n  undefined auxiliaryStack [8];\n  \n  __libc_start_main(main,argc,&stack0x00000008,0,0,argv,auxiliaryStack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "run_main_with_arguments_00105500"
        },
        "FUN_00102475": {
            "renaming": {
                "FUN_00102475": "set_print_format_00102475",
                "param_1": "printer",
                "param_2": "format",
                "set_print_format_00104397": "setPrintFormatHelper"
            },
            "code": "\nvoid setPrintFormat_00102475(undefined8 printer,undefined8 format)\n\n{\n  setPrintFormat_00102475Helper(printer,format,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "set_output_format"
            ],
            "imported": false,
            "current_name": "set_print_format_00102475"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "format",
                "plVar2": "currentString"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *format;\n  long *currentString;\n  \n  fflush(_stdout);\n  programName = program_name;\n  format = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,format,programName);\n  for (currentString = formatStrings; *currentString != 0; currentString = currentString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_0010c050": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c050",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010c050"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_file_name_and_symbol_001036a7",
                "param_1": "fileNamePtr",
                "param_2": "symbolNamePtr",
                "param_3": "unusedParam",
                "param_4": "unusedParam2"
            },
            "code": "\nvoid printFileNameAndSymbol_001036a7(undefined8 *fileNamePtr,undefined8 *symbolNamePtr,undefined8 unusedParam,undefined8 unusedParam2)\n\n{\n  if (filename_per_symbol != 0) {\n    if (fileNamePtr != (undefined8 *)0x0) {\n      printf(\"%s:\",*fileNamePtr);\n    }\n    printf(\"%s:\",*symbolNamePtr,unusedParam2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_file_name_and_symbol_001036a7"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "fatal",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "filename",
                "pcVar1": "formatStr",
                "undefined_only": "isUndefinedOnly",
                "print_width": "width"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 filename)\n\n{\n  char *formatStr;\n  \n  formatStr = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (isUndefinedOnly == 0) {\n    formatStr = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatStr = (char *)dcgettext(0,formatStr,5);\n  printf(formatStr,filename);\n  formatStr = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (width != 0x20) {\n    formatStr = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatStr = (char *)dcgettext(0,formatStr,5);\n  printf(formatStr);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiled_types_00102fc3",
                "param_1": "sort_bfd",
                "param_2": "sort_dynamic",
                "cVar1": "last_char_s",
                "__s": "string_s",
                "__s_00": "string_s_00",
                "uVar3": "flag",
                "lVar4": "lVar_input_1",
                "lVar5": "lVar_input_2",
                "sVar6": "len_string_s",
                "sVar7": "len_string_s_00",
                "pcVar8": "str_ptr",
                "pcVar9": "str_ptr_00",
                "uVar10": "result_1",
                "uVar11": "result_2",
                "uVar12": "sum_uVar1",
                "uVar13": "pointer_value",
                "unaff_R13": "input_2",
                "bVar14": "is_equal"
            },
            "code": "\nulong check_compiled_types_00102fc3(undefined8 sort_bfd,undefined8 sort_dynamic)\n\n{\n  char last_char_s;\n  ulong uVar2;\n  char *string_s;\n  char *string_s_00;\n  uint flag;\n  long lVar_input_1;\n  long lVar_input_2;\n  size_t len_string_s;\n  size_t len_string_s_00;\n  char *str_ptr;\n  char *str_ptr_00;\n  ulong result_1;\n  ulong result_2;\n  ulong sum_uVar1;\n  undefined8 pointer_value;\n  long input_2;\n  bool is_equal;\n  \n  pointer_value = *sort_bfd;\n  bfd_fatal();\n  lVar_input_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,pointer_value,sort_x);\n  lVar_input_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_dynamic,sort_y);\n  if ((lVar_input_1 == 0) || (input_2 = lVar_input_2, lVar_input_2 == 0)) {\n    lVar_input_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(lVar_input_1 + 0x20) == 0x10c2a8) || (*(long *)(lVar_input_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result_1 = *(ulong *)(*(long *)(lVar_input_1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(lVar_input_2 + 0x20) + 0x30);\n  sum_uVar1 = *(long *)(lVar_input_1 + 0x10) + result_1;\n  result_2 = *(long *)(input_2 + 0x10) + uVar2;\n  is_equal = sum_uVar1 < result_2;\n  if ((sum_uVar1 != result_2) || (is_equal = result_1 < uVar2, result_1 != uVar2)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  string_s = *(char **)(lVar_input_1 + 8);\n  string_s_00 = *(char **)(input_2 + 8);\n  len_string_s = strlen(string_s);\n  len_string_s_00 = strlen(string_s_00);\n  str_ptr = strstr(string_s,\"gnu_compiled\");\n  if (str_ptr == (char *)0x0) {\n    str_ptr_00 = strstr(string_s,\"gcc2_compiled\");\n    str_ptr = strstr(string_s_00,\"gnu_compiled\");\n    if ((str_ptr == (char *)0x0) && (str_ptr = strstr(string_s_00,\"gcc2_compiled\"), str_ptr == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str_ptr_00 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str_ptr = strstr(string_s_00,\"gnu_compiled\");\n    if (str_ptr == (char *)0x0) {\n      str_ptr_00 = strstr(string_s_00,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str_ptr_00 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(input_2 + 0x18) & 0x4000;\n  if ((*(byte *)(lVar_input_1 + 0x19) & 0x40) == 0) {\n    if ((len_string_s < 3) || (string_s[len_string_s - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((len_string_s_00 < 3) || (string_s_00[len_string_s_00 - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char_s = string_s[len_string_s - 1];\n    is_equal = last_char_s == 'o' || last_char_s == 'a';\n    if (flag == 0) {\n      if ((len_string_s_00 < 3) || (string_s_00[len_string_s_00 - 2] != '.')) {\n        if (last_char_s == 'o' || last_char_s == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (len_string_s_00 < 3) {\n      return 0xffffffff;\n    }\n    if (string_s_00[len_string_s_00 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((string_s_00[len_string_s_00 - 1] != 'o') && (string_s_00[len_string_s_00 - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  result_1 = non_numeric_forward(pointer_value,sort_dynamic);\n  return result_1;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "numeric_forward"
            ],
            "imported": false,
            "current_name": "check_compiled_types_00102fc3"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol_info",
                "param_2": "format_option",
                "cVar1": "is_undefined_class",
                "uVar2": "type_flag",
                "iVar3": "error_code",
                "piVar4": "errno_location",
                "uVar5": "error_message",
                "lVar6": "section_offset",
                "bVar7": "symbol_class",
                "pcVar8": "symbol_type"
            },
            "code": "\nvoid print_symbol_info_00103729(long *symbol_info,undefined8 format_option)\n\n{\n  char is_undefined_class;\n  ushort type_flag;\n  int error_code;\n  int *errno_location;\n  undefined8 error_message;\n  long section_offset;\n  byte symbol_class;\n  char *symbol_type;\n  \n  print_symname(\"%-20s|\",symbol_info,0,format_option);\n  is_undefined_class = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined_class == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*symbol_info);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[3] != 0) {\n      section_offset = *(long *)(symbol_info[3] + 0x30);\n      is_undefined_class = *(char *)(section_offset + 0x28);\n      if (is_undefined_class == 'g') goto LAB_00103983;\n      if (is_undefined_class == 'h') {\n        symbol_type = \"Line\";\n      }\n      else if (is_undefined_class == 'd') {\n        symbol_type = \"Block\";\n      }\n      else if (*(ushort *)(section_offset + 0x26) == 0) {\n        symbol_type = \"None\";\n      }\n      else {\n        type_flag = *(ushort *)(section_offset + 0x26) >> 4 & 3;\n        if (type_flag == 2) {\n          symbol_type = \"Function\";\n        }\n        else if (type_flag == 3) {\n          symbol_type = \"Array\";\n        }\n        else {\n          if (type_flag != 1) {\n            free(bufp_6);\n            type_flag = *(ushort *)(section_offset + 0x26);\n            symbol_class = *(byte *)(section_offset + 0x28);\n            symbol_type = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            error_code = asprintf(&bufp_6,symbol_type,(ulong)symbol_class,(ulong)type_flag);\n            symbol_type = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symbol_type = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbol_class = *(byte *)(symbol_info[2] + 0x48) & 0xf;\n    switch(symbol_class) {\n    case 0:\n      symbol_type = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type = \"FUNC\";\n      break;\n    case 3:\n      symbol_type = \"SECTION\";\n      break;\n    case 4:\n      symbol_type = \"FILE\";\n      break;\n    case 5:\n      symbol_type = \"COMMON\";\n      break;\n    case 6:\n      symbol_type = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symbol_type = \"<processor specific>: %d\";\n      if ((2 < symbol_class - 0xd) && (symbol_type = \"<OS specific>: %d\", 2 < symbol_class - 10)) {\n        symbol_type = \"<unknown>: %d\";\n      }\n      symbol_type = (char *)dcgettext(0,symbol_type,5);\n      error_code = asprintf(&bufp_7,symbol_type,(ulong)symbol_class);\n      symbol_type = bufp_7;\njoined_r0x00103964:\n      if (error_code < 0) {\n        errno_location = __errno_location();\n        error_message = xstrerror(*errno_location);\n        fatal(&DAT_0010712d,error_message);\nLAB_00103983:\n        symbol_type = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbol_type);\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  section_offset = symbol_info[2];\n  if ((section_offset != 0) || (section_offset = symbol_info[3], section_offset != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(section_offset + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "fatal",
                "asprintf",
                "free",
                "xstrerror",
                "printf",
                "print_value.constprop.0",
                "__errno_location",
                "print_symname",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "display_file",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010c188": {
            "renaming": {},
            "code": "\n\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcoll@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c188",
            "calling": [
                "strcoll"
            ],
            "imported": false,
            "current_name": "FUN_0010c188"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiling_00102000",
                "ctx": "context",
                "iVar1": "result"
            },
            "code": "\nint initializeProfiling_00102000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiling_00102000"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *param_1,undefined8 *param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  if (param_1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*param_1);\n  }\n  printf(\"%s:\",*param_2,param_4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "print_symbol_filename_bsd"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_file_and_line_numbers_00105110",
                "param_1": "format",
                "param_2": "line_info",
                "param_3": "symbol_name",
                "param_4": "filename",
                "__ptr": "ptr",
                "__s1": "string1",
                "pplVar1": "pointer_to_pointer_line_info",
                "plVar2": "pointer_line_info",
                "lVar3": "long_var3",
                "puVar4": "pointer_var4",
                "cVar5": "char_var5",
                "iVar6": "int_var6",
                "pvVar7": "pointer_var7",
                "lVar8": "long_var8",
                "uVar9": "uint_var9",
                "lVar10": "long_var10",
                "local_b4": "local_uint_b4",
                "local_b0": "local_undefined_array_b0",
                "local_a8": "local_undefined_ptr_a8",
                "local_a0": "local_long_var_a0",
                "local_98": "local_line_info_98",
                "local_90": "local_line_info_90",
                "local_88": "local_ptr_88",
                "pvStack_80": "pointer_stack_80",
                "pvStack_78": "pointer_stack_78",
                "pvStack_70": "pointer_stack_70",
                "local_68": "local_undefined_array_68",
                "local_60": "local_char_60"
            },
            "code": "\n\n\nvoid print_file_and_line_numbers_00105110(undefined8 *format,long *line_info,undefined8 symbol_name,undefined8 *filename)\n\n{\n  void *ptr;\n  char *string1;\n  long **pointer_to_pointer_line_info;\n  long *pointer_line_info;\n  long long_var3;\n  undefined8 *pointer_var4;\n  char char_var5;\n  int int_var6;\n  void *pointer_var7;\n  long long_var8;\n  uint uint_var9;\n  long long_var10;\n  uint local_uint_b4;\n  undefined local_undefined_array_b0 [8];\n  undefined *local_undefined_ptr_a8;\n  undefined8 local_long_var_a0;\n  long *local_line_info_98;\n  long *local_line_info_90;\n  void *local_ptr_88;\n  void *pointer_stack_80;\n  void *pointer_stack_78;\n  void *pointer_stack_70;\n  undefined local_undefined_array_68 [8];\n  char local_char_60;\n  \n  if (*(code **)(format + 0x18) == print_symbol_filename_bsd) {\n    if (filename_per_symbol != 0) {\n      if (filename != (undefined8 *)0x0) {\n        printf(\"%s:\",*filename);\n      }\n      printf(\"%s:\",*format);\n    }\n  }\n  else {\n    (**(code **)(format + 0x18))(filename,format);\n  }\n  local_undefined_ptr_a8 = local_undefined_array_68;\n  (**(code **)(format[1] + 0x218))(format,line_info,local_undefined_ptr_a8);\n  uint_var9 = *(uint *)(line_info + 3);\n  char_var5 = local_char_60;\n  if (((((local_char_60 == 'i') && ((uint_var9 & 0x400000) != 0)) && (ifunc_type_chars != (char *)0x0)) &&\n      ((*ifunc_type_chars != '\\0' && (char_var5 = *ifunc_type_chars, (uint_var9 & 2) == 0)))) &&\n     (char_var5 = local_char_60, ifunc_type_chars[1] != '\\0')) {\n    char_var5 = ifunc_type_chars[1];\n  }\n  local_char_60 = char_var5;\n  local_long_var_a0 = symbol_name;\n  if ((uint_var9 & 0x200100) != 0) goto LAB_00103330;\n  long_var8 = *line_info;\n  int_var6 = *(int *)(*(long *)(long_var8 + 8) + 8);\n  if (((uint_var9 & 0x200000) == 0) && (int_var6 == 5)) {\n    local_line_info_98 = line_info;\n    if (*(long *)(long_var8 + 0x110) == 0) {\n      local_line_info_98 = (long *)0x0;\n    }\n  }\n  else {\n    local_line_info_98 = (long *)0x0;\n    if (((int_var6 - 2U & 0xfffffffd) == 0) && (local_line_info_90 = line_info, *(long *)(long_var8 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_line_info_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(format + 0x20))(&local_undefined_ptr_a8,format);\n  do {\n    if (line_numbers == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (lineno_cache_bfd == format) {\n      pointer_var4 = lineno_cache_bfd;\n      if (syms_5 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      lineno_cache_bfd = pointer_var4;\n      pointer_var7 = relocs_3;\n      if (line_info[4] == 0x10c2a8) {\n        if (lineno_cache_rel_bfd == format) {\n          if (relocs_3 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_var9 = 0;\n          if (relocs_3 != (void *)0x0) {\n            for (; uint_var9 < seccount_2; uint_var9 = uint_var9 + 1) {\n              ptr = *(void **)((long)pointer_var7 + (ulong)uint_var9 * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(secs_1);\n            free(pointer_var7);\n            free(relcount_0);\n            secs_1 = (void *)0x0;\n            relocs_3 = (void *)0x0;\n            relcount_0 = (void *)0x0;\n          }\nLAB_001033d1:\n          seccount_2 = *(uint *)(format + 0x14);\n          secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n          relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n          relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n          pointer_stack_70 = syms_5;\n          local_ptr_88 = secs_1;\n          pointer_stack_80 = relocs_3;\n          pointer_stack_78 = relcount_0;\n          bfd_map_over_sections(format,get_relocs,&local_ptr_88);\n          lineno_cache_rel_bfd = format;\n        }\n        string1 = (char *)line_info[1];\n        for (uint_var9 = 0; uint_var9 < seccount_2; uint_var9 = uint_var9 + 1) {\n          long_var8 = (ulong)uint_var9 * 8;\n          pointer_var7 = relcount_0;\n          for (long_var10 = 0;\n              *(long *)((long)pointer_var7 + long_var8) != long_var10 && long_var10 <= *(long *)((long)pointer_var7 + long_var8)\n              ; long_var10 = long_var10 + 1) {\n            pointer_to_pointer_line_info = *(long ***)(*(long *)((long)relocs_3 + long_var8) + long_var10 * 8);\n            pointer_line_info = *pointer_to_pointer_line_info;\n            if ((((pointer_line_info != (long *)0x0) &&\n                 (long_var3 = *pointer_line_info, *(long *)(long_var3 + 0x20) == line_info[4])) &&\n                (*(long *)(long_var3 + 0x10) == line_info[2])) &&\n               (((int_var6 = strcmp(string1,*(char **)(long_var3 + 8)), int_var6 == 0 &&\n                 (char_var5 = (**(code **)(format[1] + 0x240))\n                                    (format,syms_5,*(undefined8 *)((long)secs_1 + long_var8),pointer_to_pointer_line_info[1]\n                                     ,&local_ptr_88,local_undefined_array_b0,&local_uint_b4,0), pointer_var7 = relcount_0,\n                 char_var5 != '\\0')) && (local_ptr_88 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr_88,(ulong)local_uint_b4);\n              uint_var9 = seccount_2;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(line_info[4] + 0xe0) == format) {\n        char_var5 = (**(code **)(format[1] + 0x250))(format,syms_5,line_info,&local_ptr_88,&local_uint_b4);\n        if (((char_var5 != '\\0') ||\n            (char_var5 = (**(code **)(format[1] + 0x240))\n                               (format,syms_5,line_info[4],line_info[2],&local_ptr_88,local_undefined_array_b0,&local_uint_b4,0)\n            , char_var5 != '\\0')) && ((local_ptr_88 != (void *)0x0 && (local_uint_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (syms_5 != (void *)0x0) {\n      free(syms_5);\n      syms_5 = (void *)0x0;\n    }\nLAB_00105359:\n    long_var8 = (**(code **)(format[1] + 0x1f8))(format);\n    if (long_var8 < 0) {\n      process_relocations_00103463(long_var8);\n      return;\n    }\n    syms_5 = (void *)xmalloc();\n    long_var8 = (**(code **)(format[1] + 0x200))(format,syms_5);\n    pointer_var4 = format;\n    if (-1 < long_var8) goto LAB_00105288;\n    bfd_fatal(*format);\nLAB_00103330:\n    local_line_info_98 = (long *)0x0;\n    local_line_info_90 = (long *)0x0;\n    (**(code **)(format + 0x20))(&local_undefined_ptr_a8,format);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103463",
                "print_symbol_info_bsd",
                "free",
                "xmalloc",
                "printf",
                "bfd_fatal",
                "print_symbol_filename_bsd",
                "print_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_file_and_line_numbers_00105110"
        },
        "FUN_0010c060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010c060"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103463",
                "set_print_width",
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_0010c1a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a8",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a8"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "analyze_object_files_00102fd2",
                "param_1": "object_file_1",
                "param_2": "object_file_2",
                "cVar1": "last_character",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar3": "flags",
                "lVar4": "object_file_desc_1",
                "lVar5": "object_file_desc_2",
                "sVar6": "string_length_1",
                "sVar7": "string_length_2",
                "pcVar8": "substring_ptr",
                "pcVar9": "substring_ptr_2",
                "uVar10": "numeric_result",
                "uVar11": "second_numeric_result",
                "uVar12": "numeric_sum",
                "unaff_R13": "temp_variable",
                "bVar13": "is_true"
            },
            "code": "\nulong analyze_object_files_00102fd2(undefined8 object_file_1,undefined8 object_file_2)\n\n{\n  char last_character;\n  ulong uVar2;\n  char *string_1;\n  char *string_2;\n  uint flags;\n  long object_file_desc_1;\n  long object_file_desc_2;\n  size_t string_length_1;\n  size_t string_length_2;\n  char *substring_ptr;\n  char *substring_ptr_2;\n  ulong numeric_result;\n  ulong second_numeric_result;\n  ulong numeric_sum;\n  long temp_variable;\n  bool is_true;\n  \n  object_file_desc_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,object_file_1,sort_x);\n  object_file_desc_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,object_file_2,sort_y);\n  if ((object_file_desc_1 == 0) || (temp_variable = object_file_desc_2, object_file_desc_2 == 0)) {\n    object_file_desc_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(object_file_desc_1 + 0x20) == 0x10c2a8) || (*(long *)(object_file_desc_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  numeric_result = *(ulong *)(*(long *)(object_file_desc_1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(object_file_desc_2 + 0x20) + 0x30);\n  numeric_sum = *(long *)(object_file_desc_1 + 0x10) + numeric_result;\n  second_numeric_result = *(long *)(temp_variable + 0x10) + uVar2;\n  is_true = numeric_sum < second_numeric_result;\n  if ((numeric_sum != second_numeric_result) || (is_true = numeric_result < uVar2, numeric_result != uVar2)) {\n    return (ulong)(-(uint)is_true | 1);\n  }\n  string_1 = *(char **)(object_file_desc_1 + 8);\n  string_2 = *(char **)(temp_variable + 8);\n  string_length_1 = strlen(string_1);\n  string_length_2 = strlen(string_2);\n  substring_ptr = strstr(string_1,\"gnu_compiled\");\n  if (substring_ptr == (char *)0x0) {\n    substring_ptr_2 = strstr(string_1,\"gcc2_compiled\");\n    substring_ptr = strstr(string_2,\"gnu_compiled\");\n    if ((substring_ptr == (char *)0x0) && (substring_ptr = strstr(string_2,\"gcc2_compiled\"), substring_ptr == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring_ptr_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring_ptr = strstr(string_2,\"gnu_compiled\");\n    if (substring_ptr == (char *)0x0) {\n      substring_ptr_2 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring_ptr_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flags = *(uint *)(temp_variable + 0x18) & 0x4000;\n  if ((*(byte *)(object_file_desc_1 + 0x19) & 0x40) == 0) {\n    if ((string_length_1 < 3) || (string_1[string_length_1 - 2] != '.')) {\n      if (flags != 0) {\n        return 1;\n      }\n      if ((string_length_2 < 3) || (string_2[string_length_2 - 2] != '.')) goto LAB_00103202;\n      is_true = false;\n      goto LAB_001031e7;\n    }\n    last_character = string_1[string_length_1 - 1];\n    is_true = last_character == 'o' || last_character == 'a';\n    if (flags == 0) {\n      if ((string_length_2 < 3) || (string_2[string_length_2 - 2] != '.')) {\n        if (last_character == 'o' || last_character == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flags != 0) goto LAB_00103202;\n    if (string_length_2 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[string_length_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_true = true;\nLAB_001031e7:\n    if ((string_2[string_length_2 - 1] != 'o') && (string_2[string_length_2 - 1] != 'a')) {\n      if (is_true) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_true) {\n    return 1;\n  }\nLAB_00103202:\n  numeric_result = non_numeric_forward(object_file_1,object_file_2);\n  return numeric_result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "abort",
                "bfd_fatal",
                "strlen",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "analyze_object_files_00102fd2"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "handle_fatal_error_00102f9f",
                "auVar1": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] handleFatalError_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  bfd_fatal(*sort_bfd);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "handle_fatal_error_00102f9f"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_print_00103a66",
                "unaff_RBX": "baseAddress"
            },
            "code": "\nvoid checkAndPrint_00103a66(void)\n\n{\n  long baseAddress;\n  \n  if (*(long *)(baseAddress + 8) != 0) {\n    print_constprop_0_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "check_and_print_00103a66"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "display_rel_file",
                "main",
                "bfd_nonfatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010c118": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c118",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010c118"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "symbol_info",
                "lVar1": "symbol_address",
                "print_value_constprop_0": "print_symbol_value",
                "putchar": "print_char",
                "printf": "print_formatted",
                "print_symname": "print_symbol_name",
                "other_format": "other_format_string",
                "desc_format": "description_format_string"
            },
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *symbol_info;\n  long symbol_address;\n  \n  if (symbol_info[2] == 0) {\n    symbol_address = symbol_info[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_info[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    print_char(0x20);\n    if (symbol_info[2] == 0) {\n      symbol_address = symbol_info[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_info[2] + 0x38);\n    }\n    print_symbol_value(symbol_address);\n  }\n  print_formatted(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_symbol_name(&DAT_0010712c);\n    return;\n  }\n  print_char(0x20);\n  print_formatted((char *)&other_format_string,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  print_char(0x20);\n  print_formatted((char *)&description_format_string,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  print_formatted(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_symbol_name(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "print_symbol_info_bsd"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001035a2"
        },
        "FUN_0010c198": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c198",
            "calling": [
                "fseek",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_0010c198"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "process_relocations_00103463",
                "param_8": "currentRelocationIndex",
                "param_10": "totalRelocationCount",
                "unaff_R12": "fileName",
                "unaff_R13": "bfdHandle",
                "unaff_R15": "currentSection",
                "in_stack_00000050": "lineNumber",
                "seccount_2": "sectionCount",
                "relcount_0": "relocationCount",
                "relocs_3": "relocationTable",
                "lVar2": "currentRelocEntry",
                "lVar5": "currentRelocCount",
                "plVar1": "relocEntryPtr",
                "lVar6": "loopIndex",
                "iVar4": "stringComparisonResult",
                "cVar3": "codeExecutionResult"
            },
            "code": "\n\n\nvoid processRelocations_00103463(void)\n\n{\n  long *relocEntryPtr;\n  long currentRelocEntry;\n  char codeExecutionResult;\n  int stringComparisonResult;\n  long currentRelocCount;\n  char *fileName;\n  undefined8 *bfdHandle;\n  long loopIndex;\n  long currentSection;\n  undefined8 currentRelocationIndex;\n  ulong totalRelocationCount;\n  long lineNumber;\n  \n  bfd_fatal(*bfdHandle);\n  do {\n    currentRelocationIndex._4_4_ = currentRelocationIndex._4_4_ + 1;\n    if (sectionCount <= currentRelocationIndex._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    currentRelocCount = relocationCount;\n    for (loopIndex = 0; relocEntryPtr = (long *)(currentRelocCount + (ulong)currentRelocationIndex._4_4_ * 8),\n        *relocEntryPtr != loopIndex && loopIndex <= *relocEntryPtr; loopIndex = loopIndex + 1) {\n      relocEntryPtr = **(long ***)(*(long *)(relocationTable + (ulong)currentRelocationIndex._4_4_ * 8) + loopIndex * 8);\n      if ((((relocEntryPtr != (long *)0x0) &&\n           (currentRelocEntry = *relocEntryPtr, *(long *)(currentRelocEntry + 0x20) == *(long *)(currentSection + 0x20))) &&\n          (*(long *)(currentRelocEntry + 0x10) == *(long *)(currentSection + 0x10))) &&\n         (((stringComparisonResult = strcmp(fileName,*(char **)(currentRelocEntry + 8)), stringComparisonResult == 0 &&\n           (codeExecutionResult = (**(code **)(bfdHandle[1] + 0x240))(), currentRelocCount = relocationCount, codeExecutionResult != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,totalRelocationCount >> 0x20);\n        currentRelocationIndex._4_4_ = sectionCount;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_fatal",
                "strcmp",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_relocations_00103463"
        },
        "FUN_0010c1b8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1b8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010c1b8"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_print_format_00104397",
                "param_1": "printFormatParam1",
                "param_2": "printFormatParam2",
                "param_3": "printFormatParam3",
                "print_format": "printFormat",
                "format": "printFormatString"
            },
            "code": "\nvoid setPrintFormat_00104397(undefined8 printFormatParam1,undefined8 printFormatParam2,int printFormatParam3)\n\n{\n  printFormat = printFormatParam3;\n  printFormatString = (undefined *)(&printFormatStrings + (long)printFormatParam3 * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "set_output_format",
                "set_output_format.cold"
            ],
            "imported": false,
            "current_name": "set_print_format_00104397"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "determine_print_format_00104670",
                "param_1": "input_data",
                "iVar1": "result",
                "pcVar2": "substring",
                "puVar3": "format_modifier",
                "pcVar4": "arch_info",
                "print_width": "arch_size",
                "print_format_string": "final_format",
                "print_format": "format_style",
                "print_radix": "output_radix"
            },
            "code": "\nvoid determinePrintFormat_00104670(long input_data)\n\n{\n  int result;\n  char *substring;\n  undefined *format_modifier;\n  char *arch_info;\n  \n  arch_size = bfd_get_arch_size();\n  if (arch_size == -1) {\n    arch_info = **(char ***)(input_data + 8);\n    substring = strstr(arch_info,\"64\");\n    result = 0x40;\n    if (substring == (char *)0x0) {\n      result = strcmp(arch_info,\"mmo\");\n      result = (-(uint)(result == 0) & 0x20) + 0x20;\n    }\n    arch_size = result;\n    free(final_format);\n  }\n  else {\n    free(final_format);\n  }\n  if (format_style - 2U < 2) {\n    arch_info = \"\";\n  }\n  else if (arch_size == 0x20) {\n    arch_info = \"08\";\n  }\n  else {\n    arch_info = \"016\";\n  }\n  format_modifier = &DAT_001071d0;\n  if (output_radix != 0x10) {\n    if (output_radix < 0x11) {\n      if (output_radix == 8) {\n        format_modifier = &DAT_001071ca;\n      }\n      else {\n        if (output_radix != 10) {\n          final_format = (void *)concat(&DAT_001071d7,arch_info,0,0);\n          return;\n        }\n        format_modifier = &DAT_001071cd;\n      }\n    }\n    else {\n      format_modifier = (undefined *)0x0;\n    }\n  }\n  final_format = (void *)concat(&DAT_001071d7,arch_info,format_modifier,0);\n  return;\n}\n\n",
            "called": [
                "set_print_width.cold",
                "free",
                "bfd_get_arch_size",
                "strcmp",
                "concat",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "determine_print_format_00104670"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_0010c070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010c070"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103463",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_0010c0b0": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b0",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b0"
        },
        "FUN_0010c1d0": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1d0",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010c1d0"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorType",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "program_name": "progName"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorType;\n  undefined8 returnAddress;\n  \n  errorMessage = getErrorMessage(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorType != 0) {\n    printFormatted(standardError,\"%s: %s: %s\\n\",progName);\n    return;\n  }\n  printFormatted(standardError,\"%s: %s\\n\",progName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_symbols_001048e0",
                "param_1": "binary",
                "param_5": "symbolTable",
                "param_6": "dynamicSymbolTable",
                "bVar1": "flag",
                "pcVar2": "functionPointer",
                "cVar3": "charVar",
                "iVar4": "index",
                "uVar5": "uintVar",
                "uVar6": "returnVal",
                "lVar7": "longVar",
                "ppuVar8": "symbolTablePtr1",
                "ppuVar9": "symbolTablePtr2",
                "lVar10": "longVar2",
                "puVar11": "pointerVar",
                "unaff_RBX": "registerRBX",
                "ppuVar12": "symbolTablePtr3",
                "ppuVar13": "symbolTablePtr4",
                "unaff_RBP": "registerRBP",
                "ppuVar14": "symbolTablePtr5",
                "ppuVar15": "symbolTablePtr6",
                "ppuVar16": "symbolTablePtr7",
                "ppuVar17": "symbolTablePtr8",
                "ppuVar18": "symbolTablePtr9",
                "bVar19": "boolVar",
                "bVar20": "boolVar2",
                "ppuStack_78": "symbolTableStack",
                "local_4c": "localInt",
                "local_48": "localPtr",
                "local_40": "localArray"
            },
            "code": "\nvoid processSymbols_001048e0(ulong **binary,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **symbolTable,ulong **dynamicSymbolTable)\n\n{\n  byte flag;\n  code *functionPointer;\n  char charVar;\n  int index;\n  uint uintVar;\n  undefined8 returnVal;\n  long longVar;\n  ulong **symbolTablePtr1;\n  ulong **symbolTablePtr2;\n  long longVar2;\n  ulong *pointerVar;\n  ulong **registerRBX;\n  ulong **symbolTablePtr3;\n  ulong **symbolTablePtr4;\n  ulong **registerRBP;\n  ulong **symbolTablePtr5;\n  ulong **symbolTablePtr6;\n  ulong **symbolTablePtr7;\n  ulong **symbolTablePtr8;\n  ulong **symbolTablePtr9;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool boolVar;\n  byte boolVar2;\n  ulong **symbolTableStack;\n  uint localInt;\n  ulong *localPtr;\n  ulong **localArray [2];\n  \n  boolVar2 = 0;\n  localPtr = (ulong *)0x0;\n  if ((dynamic != 0) || ((*(byte *)((long)binary + 0x44) & 0x10) != 0)) {\n    symbolTablePtr2 = (ulong **)&localInt;\n    symbolTablePtr1 = (ulong **)(*(code *)binary[1][0x4d])(binary,dynamic != 0,localArray);\n    if ((long)symbolTablePtr1 < 0) {\n      if ((dynamic != 0) && (index = bfd_get_error(), index == 7)) {\n        if (quiet != 0) {\n          return;\n        }\n        pointerVar = *binary;\n        returnVal = dcgettext(0,\"%s: no symbols\",5);\n        non_fatal(returnVal,pointerVar);\n        return;\n      }\n      bfd_fatal(*binary);\n      goto LAB_00102e9e;\n    }\n    if (symbolTablePtr1 != (ulong **)0x0) {\n      if (show_synthetic != 0) {\n        if (localInt == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      flag = *(byte *)((long)binary + 0x4a);\n      symbolTablePtr4 = binary;\n      do {\n        if ((flag & 0x10) != 0) {\n          registerRBX = (ulong **)*symbolTablePtr4;\n          report_plugin_err = '\\0';\n          returnVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(returnVal);\n        }\n        symbolTablePtr5 = localArray[0];\n        unaff_R14 = (ulong **)(ulong)localInt;\n        boolVar = dynamic != 0;\n        symbolTablePtr2 = localArray[0];\n        unaff_R15 = (ulong **)(*(code *)symbolTablePtr4[1][0x41])(symbolTablePtr4);\n        symbolTablePtr3 = registerRBX;\n        registerRBP = (ulong **)(ulong)boolVar;\n        binary = symbolTablePtr4;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        symbolTablePtr8 = (ulong **)((long)symbolTablePtr1 * (long)unaff_R14);\n        symbolTablePtr1 = (ulong **)((long)symbolTablePtr5 + (long)symbolTablePtr8);\n        binary = symbolTablePtr5;\n        symbolTablePtr3 = symbolTablePtr5;\njoined_r0x001049a4:\n        if (binary < symbolTablePtr1) {\n          do {\n            symbolTablePtr2 = (ulong **)(*(code *)symbolTablePtr4[1][0x4e])(symbolTablePtr4,boolVar,binary,unaff_R15);\n            symbolTablePtr8 = unaff_R15;\n            if (symbolTablePtr2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar = symbolTablePtr2[1];\n            symbolTablePtr8 = symbolTablePtr1;\n            if (((pointerVar == (ulong *)0x0) || (*(char *)pointerVar != '_')) ||\n               (*(char *)((long)pointerVar + 1) != '_')) {\nLAB_00104a03:\n              if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar = (uint)(symbolTablePtr2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (print_debug_syms == 0) {\n                if ((*(byte *)(symbolTablePtr2 + 3) & 4) == 0) {\n                  if (sort_by_size != 0) goto print_debug_symbols_00104d5b;\nLAB_00104a53:\n                  dynamicSymbolTable = (ulong **)(ulong)defined_only;\n                  if (defined_only == 0) {\n                    charVar = (*(code *)symbolTablePtr4[1][0x46])(symbolTablePtr4,symbolTablePtr2);\n                    if (charVar != '\\0') {\n                      display_rel_file_cold();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (symbolTablePtr2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (sort_by_size == 0) goto LAB_00104a53;\nprint_debug_symbols_00104d5b:\n                if ((symbolTablePtr2[4] == (ulong *)0x10c2a8) || (symbolTablePtr2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar = (*(code *)symbolTablePtr4[1][0x46])(symbolTablePtr4,symbolTablePtr2);\n                if (charVar != '\\0') {\n                  display_rel_file_cold();\n                  return;\n                }\nLAB_00104a7b:\n                if (symbolTablePtr3 != binary) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *symbolTablePtr3 = *binary;\n                    reverse_and_display_symbols_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)symbolTablePtr3 = *(undefined *)binary;\n                    binary = (ulong **)((long)binary + (ulong)boolVar2 * -2 + 1);\n                    symbolTablePtr3 = (ulong **)((long)symbolTablePtr3 + (ulong)boolVar2 * -2 + 1);\n                  }\n                  reverse_and_display_symbols_001049c0();\n                  return;\n                }\n                symbolTablePtr3 = (ulong **)((long)symbolTablePtr3 + (long)unaff_R14);\n              }\n            }\n            else {\n              index = strcmp((char *)((long)pointerVar + (ulong)(*(char *)((long)pointerVar + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              symbolTableStack = symbolTablePtr2;\n              if (index == 0) {\n                if (report_plugin_err != '\\0') {\n                  symbolTableStack = (ulong **)*symbolTablePtr4;\n                  report_plugin_err = '\\0';\n                  returnVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(returnVal,symbolTableStack);\n                }\n                goto LAB_00104a03;\n              }\n              if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (external_only == 0) {\n                if (non_weak != 0) {\n                  uintVar = (*(uint *)(symbolTablePtr2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(symbolTablePtr2 + 3) & 0x800082) != 0) || (symbolTablePtr2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)symbolTablePtr2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            binary = (ulong **)((long)binary + (long)unaff_R14);\n            if (symbolTablePtr1 <= binary) break;\n          } while( true );\n        }\n        symbolTablePtr3 = (ulong **)((long)symbolTablePtr3 - (long)symbolTablePtr5);\n        if (unaff_R14 == (ulong **)0x8) {\n          pointerVar = symbolTablePtr4[1];\n          symbolTablePtr5 = (ulong **)((long)symbolTablePtr3 + 7);\n          if (-1 < (long)symbolTablePtr3) {\n            symbolTablePtr5 = symbolTablePtr3;\n          }\n          symbolTable = (ulong **)(ulong)no_sort;\n          functionPointer = (code *)pointerVar[0x41];\n          symbolTablePtr5 = (ulong **)((long)symbolTablePtr5 >> 3);\n        }\n        else {\n          symbolTablePtr5 = (ulong **)((long)symbolTablePtr3 / (long)unaff_R14);\n          pointerVar = symbolTablePtr4[1];\n          functionPointer = (code *)pointerVar[0x41];\n        }\n        if (no_sort != 0) goto LAB_00104be2;\n        sort_dynamic = dynamic != 0;\n        sort_bfd = symbolTablePtr4;\n        sort_x = (ulong **)(*functionPointer)(symbolTablePtr4);\n        sort_y = (ulong **)(*(code *)symbolTablePtr4[1][0x41])(symbolTablePtr4);\n        symbolTablePtr3 = localArray[0];\n        if ((sort_x != (ulong **)0x0) && (sort_y != (ulong **)0x0)) {\n          symbolTablePtr1 = (ulong **)(ulong)localInt;\n          if (sort_by_size != 0) {\n            boolVar = dynamic != 0;\n            qsort(localArray[0],(size_t)symbolTablePtr5,(size_t)symbolTablePtr1,size_forward1);\n            symbolTablePtr8 = (ulong **)xmalloc((long)symbolTablePtr5 << 4);\n            symbolTablePtr9 = sort_x;\n            binary = sort_y;\n            unaff_R14 = (ulong **)((long)symbolTablePtr5 * (long)symbolTablePtr1 + (long)symbolTablePtr3);\n            symbolTablePtr2 = sort_x;\n            if (unaff_R14 <= symbolTablePtr3) goto LAB_00102ec2;\n            dynamicSymbolTable = sort_y;\n            symbolTablePtr5 = (ulong **)(*(code *)symbolTablePtr4[1][0x4e])(symbolTablePtr4,boolVar,symbolTablePtr3);\n            symbolTable = symbolTablePtr1;\n            symbolTableStack = symbolTablePtr8;\n            if (symbolTablePtr5 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localArray[0],(size_t)symbolTablePtr5,(size_t)symbolTablePtr1,\n                *(__compar_fn_t *)(sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8))\n          ;\n          pointerVar = symbolTablePtr4[1];\nLAB_00104be2:\n          binary = symbolTablePtr4;\n          symbolTablePtr9 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_fatal(*symbolTablePtr4);\n        binary = symbolTablePtr4;\n        symbolTablePtr3 = unaff_R15;\n        while( true ) {\n          registerRBX = (ulong **)xmalloc();\n          symbolTablePtr1 = (ulong **)(*(code *)binary[1][0x6b])(binary,registerRBX);\n          symbolTablePtr2 = symbolTablePtr8;\n          if (-1 < (long)symbolTablePtr1) break;\n          symbolTablePtr4 = (ulong **)*binary;\n          symbolTablePtr5 = (ulong **)bfd_fatal(symbolTablePtr4,symbolTablePtr8);\nLAB_00102dbe:\n          pointerVar = symbolTablePtr5[2];\n          symbolTablePtr2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar = (ulong *)((long)symbolTablePtr1[8] - (long)pointerVar);\n          symbolTablePtr9 = binary;\n          symbolTablePtr6 = symbolTablePtr3;\nLAB_00104ea7:\n          symbolTablePtr5 = symbolTablePtr2;\n          symbolTablePtr3 = registerRBX;\n          binary = dynamicSymbolTable;\n          if (pointerVar != (ulong *)0x0) {\n            *symbolTablePtr8 = (ulong *)symbolTablePtr6;\n            symbolTablePtr8[1] = pointerVar;\n            symbolTablePtr8 = symbolTablePtr8 + 2;\n          }\nLAB_00104e35:\n          dynamicSymbolTable = symbolTablePtr9;\n          if (symbolTablePtr3 < unaff_R14) goto code_r0x00104e3e;\n          symbolTablePtr5 = (ulong **)((long)symbolTablePtr8 - (long)symbolTableStack >> 4);\n          qsort(symbolTableStack,(size_t)symbolTablePtr5,0x10,size_forward2);\n          pointerVar = symbolTablePtr4[1];\n          binary = symbolTablePtr4;\n          symbolTablePtr9 = symbolTableStack;\nLAB_00104be5:\n          registerRBX = localArray[0];\n          symbolTablePtr1 = (ulong **)(ulong)sort_by_size;\n          unaff_R14 = (ulong **)(ulong)(dynamic != 0);\n          if (sort_by_size != 0) {\n            symbolTablePtr8 = (ulong **)(*(code *)pointerVar[0x41])(binary);\n            if (symbolTablePtr8 == (ulong **)0x0) goto LAB_00102ed2;\n            symbolTablePtr3 = symbolTablePtr9 + (long)symbolTablePtr5 * 2;\n            symbolTablePtr5 = symbolTablePtr9;\n            goto LAB_00104ee9;\n          }\n          symbolTablePtr1 = (ulong **)(ulong)localInt;\n          unaff_R15 = (ulong **)(*(code *)pointerVar[0x41])(binary);\n          if (unaff_R15 != (ulong **)0x0) {\n            registerRBP = (ulong **)((long)symbolTablePtr5 * (long)symbolTablePtr1 + (long)registerRBX);\n            if (registerRBX < registerRBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_fatal(*binary);\n          unaff_R15 = symbolTablePtr9;\nLAB_00102d06:\n          symbolTablePtr2 = symbolTablePtr1;\n          if (dynamic != 0) {\n            registerRBX = localArray[0];\n            symbolTablePtr5 = (ulong **)0x0;\n            symbolTablePtr8 = (ulong **)0x0;\n            break;\n          }\n          longVar2 = (*(code *)binary[1][0x6a])(binary);\n          symbolTablePtr5 = localArray[0];\n          symbolTablePtr8 = symbolTablePtr1;\n          symbolTablePtr3 = unaff_R15;\n          if (longVar2 < 1) {\n            symbolTablePtr1 = (ulong **)0x0;\n            registerRBX = (ulong **)0x0;\n            break;\n          }\n        }\n        dynamicSymbolTable = &localPtr;\n        symbolTable = registerRBX;\n        longVar2 = (*(code *)binary[1][0x6c])(binary,symbolTablePtr8,symbolTablePtr5,symbolTablePtr1);\n        symbolTablePtr1 = symbolTablePtr2;\n        if (0 < longVar2) {\n          symbolTablePtr1 = (ulong **)((long)symbolTablePtr2 + longVar2);\n          localArray[0] = (ulong **)xrealloc(localArray[0]);\n          longVar = 0;\n          do {\n            localArray[0][(long)symbolTablePtr2 + longVar] = localPtr + longVar * 6;\n            longVar = longVar + 1;\n          } while (longVar2 != longVar);\n          localArray[0][(long)symbolTablePtr2 + longVar2] = (ulong *)0x0;\n        }\n        if ((dynamic == 0) && (registerRBX != (ulong **)0x0)) {\n          free(registerRBX);\n        }\nLAB_00102cc2:\n        flag = *(byte *)((long)binary + 0x4a);\n        symbolTablePtr4 = binary;\n      } while( true );\n    }\n  }\n  if (quiet == 0) {\n    pointerVar = *binary;\n    returnVal = dcgettext(0,\"%s: no symbols\",5);\n    non_fatal(returnVal,pointerVar);\n  }\n  return;\ncode_r0x00104b01:\n  binary = (ulong **)((long)binary + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  registerRBX = (ulong **)((long)symbolTablePtr3 + (long)symbolTable);\n  if (unaff_R14 <= registerRBX) {\n    symbolTablePtr1 = (ulong **)symbolTablePtr5[4];\n    if ((*(uint *)(symbolTablePtr5 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    symbolTablePtr2 = (ulong **)0x0;\nLAB_00104e95:\n    symbolTablePtr9 = binary;\n    symbolTablePtr6 = symbolTablePtr3;\n    if (*(int *)(symbolTablePtr4[1] + 1) == 5) {\n      pointerVar = symbolTablePtr5[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar = symbolTablePtr5[2];\n    if ((*(byte *)((long)symbolTablePtr1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= registerRBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  symbolTablePtr1 = binary;\n  symbolTablePtr6 = symbolTable;\n  symbolTablePtr7 = dynamicSymbolTable;\n  symbolTablePtr2 = (ulong **)(*(code *)symbolTablePtr4[1][0x4e])();\n  symbolTablePtr9 = symbolTablePtr3;\n  if (symbolTablePtr2 == (ulong **)0x0) goto LAB_00102edb;\n  symbolTablePtr1 = (ulong **)symbolTablePtr5[4];\n  if ((*(uint *)(symbolTablePtr5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (symbolTablePtr3 <= symbolTablePtr5) {\nLAB_00104c75:\n    if (localPtr == (ulong *)0x0) {\n      free(localArray[0]);\n      free(symbolTablePtr9);\n      return;\n    }\n    free(localPtr);\n    free(localArray[0]);\n    free(symbolTablePtr9);\n    return;\n  }\n  symbolTablePtr1 = symbolTablePtr8;\n  longVar2 = (*(code *)binary[1][0x4e])(binary,unaff_R14,*symbolTablePtr5);\n  if (longVar2 == 0) goto LAB_00102ec9;\n  symbolTablePtr1 = symbolTablePtr5 + 1;\n  symbolTablePtr5 = symbolTablePtr5 + 2;\n  print_symbol(binary,longVar2,*symbolTablePtr1,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_fatal(*binary,0);\nLAB_00102ed2:\n  symbolTablePtr4 = (ulong **)*binary;\n  bfd_fatal();\n  registerRBX = symbolTablePtr3;\n  symbolTablePtr6 = symbolTable;\n  symbolTablePtr7 = dynamicSymbolTable;\nLAB_00102edb:\n  dynamicSymbolTable = symbolTablePtr7;\n  symbolTable = symbolTablePtr6;\n  symbolTablePtr4 = (ulong **)*symbolTablePtr4;\n  symbolTablePtr2 = (ulong **)bfd_fatal();\n  symbolTablePtr3 = symbolTablePtr9;\nLAB_00102ee3:\n  pointerVar = symbolTablePtr5[2];\nLAB_00102ee7:\n  if (symbolTablePtr1 != (ulong **)symbolTablePtr2[4]) goto LAB_00102dc4;\n  pointerVar = (ulong *)((long)symbolTablePtr2[2] - (long)pointerVar);\n  symbolTablePtr9 = binary;\n  symbolTablePtr6 = symbolTablePtr3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (symbolTablePtr2 = unaff_R15, longVar2 = (*(code *)binary[1][0x4e])(binary,unaff_R14,registerRBX),\n        longVar2 != 0) {\n    registerRBX = (ulong **)((long)registerRBX + (long)symbolTablePtr1);\n    print_symbol(binary,longVar2,0,param_2);\n    if (registerRBP <= registerRBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_fatal(*binary);\n  symbolTablePtr3 = registerRBX;\nLAB_00102ea7:\n  symbolTablePtr4 = registerRBP;\n  bfd_fatal(*binary);\n  symbolTablePtr8 = unaff_R15;\nLAB_00102eb0:\n  bfd_fatal(*symbolTablePtr4);\n  symbolTablePtr4 = binary;\nLAB_00102eb9:\n  bfd_fatal(*symbolTablePtr4);\n  binary = dynamicSymbolTable;\nLAB_00102ec2:\n  symbolTablePtr5 = (ulong **)0x0;\n  symbolTable = symbolTablePtr1;\n  symbolTablePtr9 = symbolTablePtr2;\n  symbolTableStack = symbolTablePtr8;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_fatal",
                "bfd_get_error",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "process_symbols_001048e0"
        },
        "FUN_0010c248": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c248",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_0010c248"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_001065a0": {
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_001065a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "get_relocs",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_0010c008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010c008"
        },
        "FUN_0010c240": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c240",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010c240"
        },
        "FUN_0010c088": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c088",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c088"
        },
        "FUN_0010c0a8": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0a8",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c0a8"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "set_print_width",
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "list_matching_formats",
                "usage.cold",
                "main",
                "bfd_nonfatal",
                "usage",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_filename_001062d0",
                "param_1": "filename",
                "filename_per_file": "is_filename_per_file",
                "filename_per_symbol": "is_filename_per_symbol"
            },
            "code": "\nvoid print_filename_001062d0(undefined8 filename)\n\n{\n  if ((is_filename_per_file != 0) && (is_filename_per_symbol == 0)) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_filename_001062d0"
        },
        "FUN_0010c0c0": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c0",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "find_matching_sections_00103238",
                "__ptr": "ptr",
                "__s1": "str1",
                "plVar1": "ptrVar1",
                "lVar2": "var2",
                "cVar3": "charVar3",
                "iVar4": "var4",
                "unaff_RBX": "unaffRBX",
                "pvVar5": "var5",
                "uVar6": "var6",
                "unaff_R13": "unaffR13",
                "lVar7": "var7",
                "param_10": "param10",
                "param_12": "param12"
            },
            "code": "\n\n\nvoid findMatchingSections_00103238(void)\n\n{\n  long *ptrVar1;\n  void *ptr;\n  char *str1;\n  long var2;\n  char charVar3;\n  int var4;\n  long unaffRBX;\n  void *var5;\n  uint var6;\n  long unaffR13;\n  long var7;\n  ulong param10;\n  void *param12;\n  \n  var5 = relocs_3;\n  if (lineno_cache_rel_bfd == unaffR13) {\n    if (relocs_3 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    var6 = 0;\n    if (relocs_3 != (void *)0x0) {\n      for (; var6 < seccount_2; var6 = var6 + 1) {\n        ptr = *(void **)((long)var5 + (ulong)var6 * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(secs_1);\n      free(var5);\n      free(relcount_0);\n      secs_1 = (void *)0x0;\n      relocs_3 = (void *)0x0;\n      relcount_0 = (void *)0x0;\n    }\n  }\n  seccount_2 = *(uint *)(unaffR13 + 0xa0);\n  secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n  relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n  relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n  param12 = secs_1;\n  bfd_map_over_sections();\n  lineno_cache_rel_bfd = unaffR13;\nLAB_00103296:\n  str1 = *(char **)(unaffRBX + 8);\n  var6 = 0;\n  do {\n    if (seccount_2 <= var6) {\n      putc(10,_stdout);\n      return;\n    }\n    var5 = relcount_0;\n    for (var7 = 0; ptrVar1 = (long *)((long)var5 + (ulong)var6 * 8),\n        *ptrVar1 != var7 && var7 <= *ptrVar1; var7 = var7 + 1) {\n      ptrVar1 = **(long ***)(*(long *)((long)relocs_3 + (ulong)var6 * 8) + var7 * 8);\n      if ((((ptrVar1 != (long *)0x0) &&\n           (var2 = *ptrVar1, *(long *)(var2 + 0x20) == *(long *)(unaffRBX + 0x20))) &&\n          (*(long *)(var2 + 0x10) == *(long *)(unaffRBX + 0x10))) &&\n         (((var4 = strcmp(str1,*(char **)(var2 + 8)), var4 == 0 &&\n           (charVar3 = (**(code **)(*(long *)(unaffR13 + 8) + 0x240))(), var5 = relcount_0,\n           charVar3 != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        var6 = seccount_2;\n        break;\n      }\n    }\n    var6 = var6 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "get_relocs",
                "xmalloc",
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "find_matching_sections_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "header",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *header,undefined8 *message)\n\n{\n  if (header != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*header);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "print_symbol_filename_posix"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "unaff_RBX": "buffer",
                "unaff_R12": "flagPtr",
                "unaff_R13": "result",
                "unaff_R14": "formatString",
                "unaff_R15": "data",
                "pcVar1": "returnValue"
            },
            "code": "\nvoid printAndFree_001047d0(void)\n\n{\n  char *returnValue;\n  void *buffer;\n  undefined *flagPtr;\n  void *result;\n  char *formatString;\n  long data;\n  \n  if (((with_symbol_versions != 0) &&\n      (returnValue = (char *)(**(code **)(*(long *)(data + 8) + 0x220))(), returnValue != (char *)0x0))\n     && (*returnValue != '\\0')) {\n    buffer = (void *)reconcat();\n    result = buffer;\n  }\n  printf(formatString,result);\n  if (flagPtr != (undefined *)0x0) {\n    *flagPtr = 0x40;\n  }\n  free(buffer);\n  return;\n}\n\n",
            "called": [
                "free",
                "printf",
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00102739",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "print_and_free_001047d0"
        },
        "FUN_0010c138": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c138",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010c138"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_file_warning_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 printFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  non_fatal(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_warning_0010249f"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_and_print_file_info_001043d0",
                "param_1": "filename",
                "cVar1": "checkResult",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "errnoLocation",
                "uVar5": "errorMessage",
                "puVar6": "bfdFile",
                "puVar9": "archivedFile",
                "puVar10": "prevArchivedFile",
                "local_c8": "fileStat",
                "lVar7": "currentMapEntry",
                "pcVar8": "errorString"
            },
            "code": "\nundefined4 checkAndPrintFileInfo_001043d0(char *filename)\n\n{\n  char checkResult;\n  int status;\n  undefined4 result;\n  int *errnoLocation;\n  undefined8 errorMessage;\n  undefined8 *bfdFile;\n  long currentMapEntry;\n  char *errorString;\n  undefined8 *archivedFile;\n  undefined8 *prevArchivedFile;\n  stat fileStat;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&fileStat);\n    if (status < 0) {\nLAB_00102522:\n      errnoLocation = __errno_location();\n      if (*errnoLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,filename);\n      }\n      else {\n        errorString = strerror(*errnoLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,filename,errorString);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,filename);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (fileStat.st_size < 0) {\n        errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(errorMessage,filename);\n      }\n      else if (fileStat.st_size != 0) {\n        if (target == 0) {\n          bfdFile = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          bfdFile = (undefined8 *)bfd_openr(filename);\n        }\n        if (bfdFile != (undefined8 *)0x0) {\n          if (line_numbers != 0) {\n            *(uint *)((long)bfdFile + 0x44) = *(uint *)((long)bfdFile + 0x44) | 0x8000;\n          }\n          checkResult = bfd_check_format(bfdFile,2);\n          if (checkResult == '\\0') {\n            result = bfd_check_format_matches(bfdFile,1,&fileStat);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            set_print_width(bfdFile);\n            (**(code **)format)(filename);\n            display_rel_file(bfdFile,0);\n          }\n          else {\n            (**(code **)(format + 8))(*bfdFile);\n            if ((print_armap != 0) &&\n               (currentMapEntry = bfd_get_next_mapent(bfdFile,0xffffffffffffffff,&fileStat), currentMapEntry != -1)) {\n              errorString = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(errorString);\n              do {\n                archivedFile = (undefined8 *)(**(code **)(bfdFile[1] + 0x1e0))(bfdFile,currentMapEntry);\n                if (archivedFile == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)fileStat.st_dev != 0) {\n                  print_symname(&DAT_0010712d,0,*(long *)fileStat.st_dev,bfdFile);\n                  printf(\" in %s\\n\",*archivedFile);\n                }\n                currentMapEntry = bfd_get_next_mapent(bfdFile,currentMapEntry,&fileStat);\n              } while (currentMapEntry != -1);\n            }\n            archivedFile = (undefined8 *)0x0;\n            do {\n              do {\n                prevArchivedFile = archivedFile;\n                archivedFile = (undefined8 *)bfd_openr_next_archived_file(bfdFile,prevArchivedFile);\n                if (archivedFile == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    bfd_fatal(*bfdFile);\nLAB_00102516:\n                    bfd_fatal(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (prevArchivedFile != (undefined8 *)0x0) {\n                    bfd_close(prevArchivedFile);\n                    lineno_cache_bfd = 0;\n                    lineno_cache_rel_bfd = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                checkResult = bfd_check_format_matches(archivedFile,1,&fileStat);\n                if (checkResult == '\\0') {\n                  bfd_nonfatal(*archivedFile);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    list_matching_formats(fileStat.st_dev);\n                  }\n                }\n                else {\n                  set_print_width(archivedFile);\n                  (**(code **)(format + 0x10))(*bfdFile,*archivedFile);\n                  display_rel_file(archivedFile,bfdFile);\n                }\n              } while (prevArchivedFile == (undefined8 *)0x0);\n              bfd_close(prevArchivedFile);\n              lineno_cache_bfd = 0;\n              lineno_cache_rel_bfd = 0;\n            } while (prevArchivedFile != archivedFile);\n          }\nLAB_001044b4:\n          result = 1;\n          while (checkResult = bfd_close(bfdFile), checkResult == '\\0') {\n            bfd_fatal(filename);\nLAB_001025ac:\n            bfd_nonfatal(filename);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              list_matching_formats(fileStat.st_dev);\n            }\n          }\n          lineno_cache_rel_bfd = 0;\n          lineno_cache_bfd = 0;\n          return result;\n        }\n        bfd_nonfatal(filename);\n      }\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "print_archive_filename_bsd",
                "strerror",
                "non_fatal",
                "set_print_width",
                "print_archive_member_bsd",
                "display_file.cold",
                "list_matching_formats",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "print_symname",
                "bfd_openr",
                "print_object_filename_bsd",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "bfd_get_error",
                "bfd_fatal",
                "display_rel_file",
                "bfd_close",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_print_file_info_001043d0"
        },
        "FUN_001055e0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001055e0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_0010c010": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c010",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_0010c010"
        },
        "FUN_0010c098": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c098",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010c098"
        },
        "FUN_0010c130": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c130",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010c130"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "create_concatenated_string_001025f5",
                "param_1": "input1",
                "param_2": "input2",
                "print_format_string": "concatenated_string"
            },
            "code": "\nvoid create_concatenated_string_001025f5(undefined8 input1,undefined8 input2)\n\n{\n  concatenated_string = concat(&DAT_001071d7,input2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "create_concatenated_string_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_filename_per_file_not_zero_00102670",
                "param_1": "filename"
            },
            "code": "\nvoid print_if_filename_per_file_not_zero_00102670(undefined8 filename)\n\n{\n  if (filename_per_file != 0) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_if_filename_per_file_not_zero_00102670"
        },
        "FUN_0010c0b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b8",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b8"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_value.constprop.0.cold",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "display_file.cold",
                "list_matching_formats",
                "usage.cold",
                "FUN_00104d5b",
                "print_object_filename_sysv",
                "main",
                "set_output_format",
                "bfd_nonfatal.cold",
                "print_symbol_info_sysv",
                "display_rel_file",
                "display_file",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "FUN_0010c0d0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0d0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010c0d0"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "str2",
                "__s1": "str1",
                "uVar1": "comparison_result",
                "lVar2": "length1",
                "lVar3": "length2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *str2;\n  char *str1;\n  uint comparison_result;\n  long length1;\n  long length2;\n  \n  length1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string1,sort_x);\n  length2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string2,sort_y);\n  if ((length1 == 0) || (length2 == 0)) {\n    bfd_fatal(*sort_bfd);\n  }\n  else {\n    str2 = *(char **)(length2 + 8);\n    str1 = *(char **)(length1 + 8);\n    if (str2 == (char *)0x0) {\n      return (uint)(str1 != (char *)0x0);\n    }\n    if (str1 != (char *)0x0) {\n      if (*str2 == '\\0') {\n        return (uint)(*str1 != '\\0');\n      }\n      if (*str1 == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(str1,str2);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "non_numeric_forward.cold",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "numeric_forward",
                "size_forward1",
                "non_numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010c028": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c028",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_0010c028"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_context_001064a0",
                "param_1": "fileDescriptor",
                "param_2": "fileName",
                "filename_per_symbol": "isSymbolFilename"
            },
            "code": "\nvoid printContext_001064a0(undefined8 *fileDescriptor,undefined8 *fileName)\n\n{\n  if (isSymbolFilename == 0) {\n    return;\n  }\n  if (fileDescriptor != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*fileDescriptor);\n    return;\n  }\n  printf(\"%s: \",*fileName);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_posix.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_context_001064a0"
        },
        "FUN_0010c148": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c148",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c148"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "symType",
                "iVar3": "asprintfRet",
                "plVar4": "symbolInfo",
                "piVar5": "errorLoc",
                "uVar6": "errorString",
                "lVar7": "infoPtr",
                "uVar8": "printWidth",
                "bVar9": "symClass",
                "uVar10": "printWidthCopy",
                "pcVar11": "symClassDesc",
                "in_R8": "arg8",
                "in_R9": "arg9"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort symType;\n  int asprintfRet;\n  long *symbolInfo;\n  int *errorLoc;\n  undefined8 errorString;\n  long infoPtr;\n  ulong printWidth;\n  byte symClass;\n  ulong printWidthCopy;\n  char *symClassDesc;\n  undefined8 arg8;\n  undefined8 arg9;\n  \n  printWidth = (ulong)print_width;\n  if ((print_width - 0x20 & 0xffffffdf) == 0) {\n    printf(print_format_string,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  printWidthCopy = printWidth;\n  fatal(symbolInfo,printWidth);\n  print_symname(\"%-20s|\",symbolInfo,0,printWidthCopy,arg8,arg9,printWidth);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      infoPtr = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(infoPtr + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symClassDesc = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symClassDesc = \"Block\";\n      }\n      else if (*(ushort *)(infoPtr + 0x26) == 0) {\n        symClassDesc = \"None\";\n      }\n      else {\n        symType = *(ushort *)(infoPtr + 0x26) >> 4 & 3;\n        if (symType == 2) {\n          symClassDesc = \"Function\";\n        }\n        else if (symType == 3) {\n          symClassDesc = \"Array\";\n        }\n        else {\n          if (symType != 1) {\n            free(bufp_6);\n            symType = *(ushort *)(infoPtr + 0x26);\n            symClass = *(byte *)(infoPtr + 0x28);\n            symClassDesc = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfRet = asprintf(&bufp_6,symClassDesc,(ulong)symClass,(ulong)symType);\n            symClassDesc = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symClassDesc = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symClass = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(symClass) {\n    case 0:\n      symClassDesc = \"NOTYPE\";\n      break;\n    case 1:\n      symClassDesc = \"OBJECT\";\n      break;\n    case 2:\n      symClassDesc = \"FUNC\";\n      break;\n    case 3:\n      symClassDesc = \"SECTION\";\n      break;\n    case 4:\n      symClassDesc = \"FILE\";\n      break;\n    case 5:\n      symClassDesc = \"COMMON\";\n      break;\n    case 6:\n      symClassDesc = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symClassDesc = \"<processor specific>: %d\";\n      if ((2 < symClass - 0xd) && (symClassDesc = \"<OS specific>: %d\", 2 < symClass - 10)) {\n        symClassDesc = \"<unknown>: %d\";\n      }\n      symClassDesc = (char *)dcgettext(0,symClassDesc,5);\n      asprintfRet = asprintf(&bufp_7,symClassDesc,(ulong)symClass);\n      symClassDesc = bufp_7;\njoined_r0x00103964:\n      if (asprintfRet < 0) {\n        errorLoc = __errno_location();\n        errorString = xstrerror(*errorLoc);\n        fatal(&DAT_0010712d,errorString);\nLAB_00103983:\n        symClassDesc = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symClassDesc);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoPtr = symbolInfo[2];\n  if ((infoPtr != 0) || (infoPtr = symbolInfo[3], infoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_0010651a",
                "print_symbol_info_bsd",
                "print_symbol_info_bsd.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_file_information_001053b0",
                "param_1": "filePointer",
                "param_2": "symbolName",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printFileInformation_001053b0(undefined8 *filePointer,undefined8 *symbolName,undefined8 param3,undefined8 param4)\n\n{\n  if (filename_per_symbol == 0) {\n    return;\n  }\n  if (filePointer != (undefined8 *)0x0) {\n    printf(\"%s:\",*filePointer);\n  }\n  printf(\"%s:\",*symbolName,param4);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_bsd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_file_information_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "display_files_001055f0",
                "param_1": "file_count",
                "param_2": "file_names",
                "pbVar1": "ptr_byte",
                "bVar2": "byte_var",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar5": "bool_var3",
                "cVar6": "char_var1",
                "bVar7": "byte_var2",
                "cVar8": "char_var2",
                "cVar9": "char_var3",
                "iVar10": "int_var",
                "uVar11": "uint_var",
                "iVar12": "int_var2",
                "plVar18": "ptr_long1",
                "plVar19": "ptr_long2",
                "__stream": "file_stream",
                "__s": "ptr_byte1",
                "piVar15": "ptr_int1",
                "sVar16": "size_var",
                "__ptr": "ptr_byte2",
                "__src": "ptr_long3",
                "lVar17": "long_var",
                "uVar20": "var_u8_1",
                "uVar21": "var_u8_2",
                "pcVar22": "str_var1",
                "pbVar23": "ptr_byte3",
                "unaff_RBP": "ptr_undefined1",
                "lVar24": "long_var2",
                "pbVar25": "ptr_byte4",
                "pcVar26": "str_var2",
                "unaff_R12": "ptr_int2",
                "piVar27": "ptr_int3",
                "local_110": "local_int1",
                "local_10c": "local_int2",
                "local_108": "local_size",
                "local_c8": "local_stat"
            },
            "code": "\n\n\nundefined1 * display_files_001055f0(int file_count,long *file_names)\n\n{\n  byte *ptr_byte;\n  byte byte_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_var1;\n  byte byte_var2;\n  char char_var2;\n  char char_var3;\n  int int_var;\n  uint uint_var;\n  int int_var2;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *file_stream;\n  byte *ptr_byte1;\n  int *ptr_int1;\n  size_t size_var;\n  byte *ptr_byte2;\n  long *ptr_long3;\n  long long_var;\n  long *ptr_long1;\n  long *ptr_long2;\n  undefined8 var_u8_1;\n  undefined8 var_u8_2;\n  char *str_var1;\n  byte *ptr_byte3;\n  undefined1 *ptr_undefined1;\n  long long_var2;\n  byte *ptr_byte4;\n  char *str_var2;\n  int *ptr_int2;\n  int *ptr_int3;\n  int local_int1;\n  int local_int2;\n  size_t local_size;\n  stat local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str_var1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *file_names;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  ptr_long1 = file_names;\n  if (1 < file_count) {\n    local_int2 = 2000;\n    ptr_int2 = (int *)0x1;\n    local_int1 = 0;\n    do {\n      int_var2 = (int)ptr_int2;\n      ptr_undefined1 = (undefined1 *)(long)int_var2;\n      ptr_int3 = (int *)((long)ptr_undefined1 * 8);\n      if (*(char *)ptr_long1[(long)ptr_undefined1] != '@') goto LAB_00105a70;\n      local_int2 = local_int2 + -1;\n      if (local_int2 == 0) {\n        long_var2 = *ptr_long1;\n        str_var2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str_var1 = (char *)ptr_long1[(long)ptr_undefined1] + 1;\n      int_var = stat(str_var1,&local_stat);\n      if (int_var < 0) {\nLAB_00105a70:\n        if (file_count <= int_var2 + 1) break;\nLAB_00105a7a:\n        uint_var = int_var2 + 1;\n        local_int1 = int_var2;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(str_var1,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        int_var = fseek(file_stream,0,2);\n        if (((int_var == -1) ||\n            (str_var1 = (char *)ftell(file_stream), (int *)str_var1 == (int *)0xffffffffffffffff)) ||\n           (int_var = fseek(file_stream,0,0), int_var == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (int_var2 + 1 < file_count) goto LAB_00105a7a;\n          break;\n        }\n        ptr_byte1 = (byte *)xmalloc((char *)((long)str_var1 + 1));\n        ptr_int1 = (int *)fread(ptr_byte1,1,(size_t)str_var1,file_stream);\n        if (((int *)str_var1 != ptr_int1) && (int_var = ferror(file_stream), int_var != 0)) {\n          free(ptr_byte1);\n          goto LAB_00105ad0;\n        }\n        ptr_byte1[(long)ptr_int1] = 0;\n        byte_var2 = *ptr_byte1;\n        ptr_byte3 = ptr_byte1;\n        if (byte_var2 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_var = strlen((char *)ptr_byte1);\n          ptr_byte2 = (byte *)xmalloc(size_var + 1);\n          int_var = 0;\n          bool_var3 = false;\n          bool_var1 = false;\n          long_var2 = 0;\n          ptr_long3 = (long *)0x0;\n          bool_var2 = false;\n          ptr_byte3 = ptr_byte1;\n          do {\n            while (((&_sch_istable)[(ulong)*ptr_byte3 * 2] & 0x40) != 0) {\n              ptr_byte3 = ptr_byte3 + 1;\n            }\n            if ((int_var == 0) || (ptr_long2 = ptr_long3 + long_var2, int_var + -1 <= (int)long_var2)) {\n              if (ptr_long3 == (long *)0x0) {\n                int_var = 8;\n                ptr_long3 = (long *)xmalloc(0x40);\n                ptr_long2 = ptr_long3 + long_var2;\n                *ptr_long2 = 0;\n              }\n              else {\n                int_var = int_var * 2;\n                ptr_long3 = (long *)xrealloc(ptr_long3,(long)int_var << 3);\n                ptr_long2 = ptr_long3 + long_var2;\n                *ptr_long2 = 0;\n              }\n            }\n            byte_var2 = *ptr_byte3;\n            ptr_byte4 = ptr_byte2;\n            while (byte_var2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var2 = false;\n                  bool_var3 = false;\n                  bool_var1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool_var2) break;\n                ptr_byte3 = ptr_byte3 + 1;\n                *ptr_byte4 = byte_var2;\n                ptr_byte4 = ptr_byte4 + 1;\n                bool_var2 = false;\n                byte_var2 = *ptr_byte3;\n                if (byte_var2 == 0) goto LAB_001058e0;\n              }\n              if (byte_var2 == 0x5c) {\n                bool_var2 = true;\n              }\n              else if (bool_var1) {\n                if (byte_var2 == 0x27) {\n                  bool_var1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *ptr_byte4 = byte_var2;\n                  ptr_byte4 = ptr_byte4 + 1;\n                }\n              }\n              else if (bool_var3) {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = false;\n              }\n              else if (byte_var2 == 0x27) {\n                bool_var1 = true;\n              }\n              else {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = true;\n              }\n              ptr_byte = ptr_byte3 + 1;\n              ptr_byte3 = ptr_byte3 + 1;\n              byte_var2 = *ptr_byte;\n            }\nLAB_001058e0:\n            *ptr_byte4 = 0;\n            long_var = xstrdup(ptr_byte2);\n            *ptr_long2 = long_var;\n            ptr_long3[long_var2 + 1] = 0;\n            byte_var2 = *ptr_byte3;\n            byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            while ((byte_var & 0x40) != 0) {\n              byte_var2 = ptr_byte3[1];\n              ptr_byte3 = ptr_byte3 + 1;\n              byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            }\n            long_var2 = long_var2 + 1;\n          } while (byte_var2 != 0);\n          free(ptr_byte2);\n          ptr_long2 = ptr_long1;\n          if (file_names == ptr_long1) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        ptr_long3 = (long *)xmalloc(8);\n        *ptr_long3 = 0;\n        if (file_names == ptr_long1) {\nLAB_00105c79:\n          if (*ptr_long1 == 0) {\n            int_var = 0;\n          }\n          else {\n            long_var2 = 1;\n            do {\n              int_var = (int)long_var2;\n              ptr_long2 = ptr_long1 + long_var2;\n              long_var2 = long_var2 + 1;\n            } while (*ptr_long2 != 0);\n          }\n          long_var = 0;\n          ptr_long2 = (long *)xmalloc((long)(int_var + 1) << 3);\n          long_var2 = *ptr_long1;\n          while (long_var2 != 0) {\n            var_u8_1 = xstrdup();\n            *(undefined8 *)((long)ptr_long2 + long_var) = var_u8_1;\n            long_var = long_var + 8;\n            long_var2 = *(long *)((long)ptr_long1 + long_var);\n          }\n          *(undefined8 *)((long)ptr_long2 + long_var) = 0;\nLAB_0010597d:\n          ptr_long1 = ptr_long2;\n          if (*ptr_long3 == 0) goto LAB_00105d50;\n          str_var1 = (char *)0x0;\n          do {\n            str_var1 = (char *)((long)str_var1 + 1);\n          } while (ptr_long3[(long)str_var1] != 0);\n          local_size = (long)str_var1 * 8;\n        }\n        else {\nLAB_00105d50:\n          str_var1 = (char *)0x0;\n          local_size = 0;\n        }\n        free((void *)ptr_long1[(long)ptr_undefined1]);\n        ptr_long1 = (long *)xrealloc(ptr_long1,(long)((long)str_var1 + (long)file_count + 1) * 8);\n        int_var = file_count + -1 + (int)str_var1;\n        memmove(ptr_long1 + (long)(ptr_undefined1 + (long)str_var1),ptr_long1 + 1 + (long)ptr_undefined1,\n                (long)(file_count - int_var2) << 3);\n        memcpy(ptr_long1 + (long)ptr_undefined1,ptr_long3,local_size);\n        free(ptr_long3);\n        free(ptr_byte1);\n        fclose(file_stream);\n        uint_var = local_int1 + 1;\n        ptr_undefined1 = ptr_undefined1 + (long)str_var1;\n        ptr_int2 = ptr_int3;\n        file_count = int_var;\n        if (int_var <= (int)uint_var) break;\n      }\n      ptr_int2 = (int *)(ulong)uint_var;\n    } while( true );\n  }\n  int_var2 = bfd_init();\n  str_var2 = \"fatal error: libbfd ABI mismatch\";\n  if (int_var2 != 0x118) goto LAB_00106085;\n  ptr_undefined1 = long_options;\n  char_var2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str_var1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  ptr_int2 = (int *)\"x86_64-pc-linux-gnu\";\n  char_var3 = other_format._3_1_;\n  char_var1 = desc_format._3_1_;\n  uVar14 = print_radix;\n  if (char_var2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    print_radix = uVar14;\n    desc_format._3_1_ = char_var1;\n    other_format._3_1_ = char_var3;\n    uVar13 = getopt_long(file_count,ptr_long1,str_var1);\n    ptr_int3 = _optarg;\n    ptr_int1 = (int *)str_var1;\n    char_var3 = other_format._3_1_;\n    char_var1 = desc_format._3_1_;\n    uVar14 = print_radix;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      ptr_int3 = ptr_int2;\nLAB_001061d5:\n      int_var2 = strcmp((char *)ptr_int3,\"l\");\n      if (int_var2 == 0) goto LAB_001061a3;\n      int_var2 = strcmp((char *)ptr_int3,\"escape\");\n      ptr_int2 = ptr_int3;\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)ptr_int3,\"e\"), int_var2 == 0)) {\n        unicode_display = 2;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)ptr_int3,\"invalid\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)ptr_int3,\"i\"), int_var2 == 0)) {\n        unicode_display = 5;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)ptr_int3,\"hex\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)ptr_int3,\"x\"), int_var2 == 0)) {\n        unicode_display = 3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)ptr_int3,\"highlight\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)ptr_int3,\"h\"), int_var2 == 0)) {\n        unicode_display = 4;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str_var2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      filename_per_symbol = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      dynamic = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      ptr_int2 = (int *)&optarg;\n      do_demangle = 1;\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      if (_optarg != (int *)0x0) {\n        int_var2 = cplus_demangle_name_to_style();\n        ptr_int1 = _optarg;\n        if (int_var2 == 0) {\n          var_u8_1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(var_u8_1,ptr_int1);\nswitchD_00105c5a_caseD_cc:\n          demangle_flags = demangle_flags | 0x40000;\n          str_var1 = (char *)ptr_int1;\n          char_var3 = other_format._3_1_;\n          char_var1 = desc_format._3_1_;\n          uVar14 = print_radix;\n        }\n        else {\n          cplus_demangle_set_style();\n          char_var3 = other_format._3_1_;\n          char_var1 = desc_format._3_1_;\n          uVar14 = print_radix;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      print_size = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      defined_only = 1;\n      undefined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      non_weak = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int_var2 = strcmp((char *)_optarg,\"32_64\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      if (int_var2 != 0) {\n        str_var2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        var_u8_1 = dcgettext(0,str_var2,5);\n        fatal(var_u8_1);\nswitchD_00105c5a_caseD_56:\n        show_version = 1;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      print_debug_syms = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      external_only = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      line_numbers = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      sort_numerically = 1;\n      no_sort = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      no_sort = 1;\n      sort_numerically = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      reverse_sort = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      print_armap = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char_var3 = *(char *)_optarg;\n      ptr_int2 = ptr_int3;\n      char_var1 = char_var3;\n      uVar14 = 10;\n      if (char_var3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char_var3) {\n        if (char_var3 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char_var3 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str_var2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      undefined_only = 1;\n      defined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      target = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      sort_by_size = 1;\n      no_sort = 0;\n      sort_numerically = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      ifunc_type_chars = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int_var2 = strcmp((char *)_optarg,\"default\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)ptr_int3,\"d\"), int_var2 == 0)) {\n        unicode_display = 0;\n        ptr_int2 = ptr_int3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      else {\n        int_var2 = strcmp((char *)ptr_int3,\"locale\");\n        if (int_var2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        unicode_display = 1;\n        ptr_int2 = ptr_int3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    var_u8_1 = dcgettext(0,str_var2,5);\n    fatal(var_u8_1,ptr_int3);\nLAB_00105f13:\n    long_var2 = *ptr_long1;\n    str_var2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,str_var2,long_var2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  var_u8_1 = bfd_errmsg(uVar14);\n  var_u8_2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(var_u8_2,\"x86_64-pc-linux-gnu\",var_u8_1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte_var2 = ptr_byte3[1];\n  ptr_byte3 = ptr_byte3 + 1;\n  if (byte_var2 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  quiet = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  ptr_undefined1 = (undefined1 *)(ulong)show_version;\n  if (show_version != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str_var1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str_var1);\n    str_var1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str_var1);\n                    \n    exit(0);\n  }\n  if ((sort_by_size != 0) && (undefined_only != 0)) {\n    var_u8_1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(var_u8_1);\n    var_u8_1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(var_u8_1);\n    return ptr_undefined1;\n  }\n  str_var1 = &optind;\n  if (_optind != file_count) {\n    if (1 < file_count - _optind) {\nLAB_00105f38:\n      filename_per_file = 1;\n    }\n    while( true ) {\n      int_var2 = *(int *)str_var1;\n      if (file_count <= int_var2) break;\n      long_var2 = ptr_long1[int_var2];\n      *(int *)str_var1 = int_var2 + 1;\n      char_var3 = display_file(long_var2);\n      if (char_var3 != '\\0') {\n        int_var2 = *(int *)str_var1;\n        if (file_count <= int_var2) break;\n        long_var2 = ptr_long1[int_var2];\n        *(int *)str_var1 = int_var2 + 1;\n        char_var3 = display_file(long_var2);\n        if (char_var3 != '\\0') {\n          int_var2 = *(int *)str_var1;\n          while( true ) {\n            if (file_count <= int_var2) goto LAB_00105bdd;\n            long_var2 = ptr_long1[int_var2];\n            *(int *)str_var1 = int_var2 + 1;\n            char_var3 = display_file(long_var2);\n            if (char_var3 == '\\0') break;\n            int_var2 = *(int *)str_var1;\n          }\n        }\n      }\n      ptr_undefined1 = (undefined1 *)(ulong)((int)ptr_undefined1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)ptr_undefined1);\n  }\nLAB_0010613c:\n  uint_var = display_file(\"a.out\");\n  return (undefined1 *)(ulong)((uint_var ^ 1) & 0xff);\n}\n\n",
            "called": [
                "xexit",
                "textdomain",
                "fseek",
                "bfd_init",
                "getopt_long",
                "bfd_plugin_set_plugin",
                "xmalloc_set_program_name",
                "bfd_plugin_set_program_name",
                "set_output_format",
                "cplus_demangle_set_style",
                "ferror",
                "strlen",
                "stat",
                "fatal",
                "fclose",
                "xstrdup",
                "setlocale",
                "xrealloc",
                "exit",
                "bfd_errmsg",
                "bfd_get_error",
                "fopen",
                "ftell",
                "display_file",
                "usage",
                "dcgettext",
                "free",
                "non_fatal",
                "xmalloc",
                "printf",
                "bindtextdomain",
                "memcpy",
                "fprintf",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "strcmp",
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "display_files_001055f0"
        },
        "FUN_0010c020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010c020"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_0010c260": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c260",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010c260"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_filename_per_symbol_0010351b",
                "filename_per_symbol": "filename_check",
                "printf": "print_formatted"
            },
            "code": "\nvoid print_filename_per_symbol_0010351b(void)\n\n{\n  if (filename_check == 0) {\n    print_formatted(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_filename_per_symbol_0010351b"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_file_info_00103b2b",
                "param_1": "file_name",
                "param_2": "file_extension"
            },
            "code": "\nvoid print_file_info_00103b2b(undefined8 file_name,undefined8 file_extension)\n\n{\n  if (filename_per_symbol == 0) {\n    printf(\"%s[%s]:\\n\",file_name,file_extension);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_file_info_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_modified_string_00104740",
                "param_1": "formatString",
                "param_2": "stringInfo",
                "param_3": "stringPtr",
                "param_4": "paramSize",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "pcVar6": "charPtr1",
                "puVar7": "ptr2",
                "pcVar8": "charPtr2",
                "__ptr": "newStringPtr",
                "uVar9": "ulongVar",
                "uVar10": "ulongVar2",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "__s": "charArray",
                "__s_00": "charArray2",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "bVar15": "byteVar",
                "acStack_39": "charArray3",
                "with_symbol_versions": "symbolVersionFlag",
                "print_unicode_string_00102739": "printUnicodeString",
                "do_demangle": "demangleFlag",
                "unicode_display": "unicodeDisplayFlag",
                "demangle_flags": "demangleFlags",
                "strchr": "strChar",
                "print_and_free_001047d0": "printAndFreeFunction",
                "buffer_8": "buffer",
                "buffer_len_9": "bufferLength",
                "xmalloc": "allocateMemory",
                "_sch_istable": "istableArray",
                "strlen": "calculateStringLength",
                "free": "freeMemory",
                "sprintf": "formattedString",
                "isatty": "checkTerminalType",
                "printf": "printFormattedString",
                "reconcat": "concatenateStrings"
            },
            "code": "\nvoid printModifiedString_00104740(char *formatString,long *stringInfo,undefined8 *stringPtr,long paramSize)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  char *charPtr1;\n  undefined8 *ptr2;\n  char *charPtr2;\n  undefined8 *newStringPtr;\n  ulong ulongVar;\n  undefined8 ulongVar2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *charArray;\n  undefined8 *charArray2;\n  long longVar;\n  uint uintVar;\n  byte byteVar;\n  char charArray3 [9];\n  \n  byteVar = 0;\n  if (stringPtr == (undefined8 *)0x0) {\n    stringPtr = *(undefined8 **)(*stringInfo + 0x10);\n    if (symbolVersionFlag == 0) {\n      printUnicodeString();\n      return;\n    }\nLAB_00104775:\n    ptr4 = stringPtr;\n    if (demangleFlag == 0) {\n      charPtr1 = (char *)0x0;\n      if (unicodeDisplayFlag == 0) {\nLAB_00104794:\n        ptr4 = stringPtr;\n        newStringPtr = (undefined8 *)0x0;\n      }\n      else {\n        newStringPtr = (undefined8 *)0x0;\n        if (stringPtr != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtr1 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (stringPtr = (undefined8 *)bfd_demangle(paramSize,ptr4,demangleFlags),\n         stringPtr == (undefined8 *)0x0)) {\n        stringPtr = ptr4;\n        if (unicodeDisplayFlag != 0) goto LAB_00102698;\n        newStringPtr = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = stringPtr;\n        newStringPtr = stringPtr;\n        if (unicodeDisplayFlag != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = stringPtr;\n    if (symbolVersionFlag == 0) {\n      if (*(int *)(*(long *)(paramSize + 8) + 8) != 5) goto LAB_00104775;\n      charPtr1 = strChar((char *)stringPtr,0x40);\n      if (charPtr1 == (char *)0x0) {\n        if (demangleFlag == 0) {\n          if (unicodeDisplayFlag == 0) {\n            if (stringInfo == (long *)0x0) {\n              newStringPtr = (undefined8 *)0x0;\n              printFormattedString(formatString,stringPtr);\n            }\n            else {\n              if (stringInfo[2] != 0) {\n                printAndFreeFunction();\n                return;\n              }\n              newStringPtr = (undefined8 *)0x0;\n              printFormattedString(formatString,stringPtr);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtr1 = '\\0';\n        if (demangleFlag == 0) {\n          if (unicodeDisplayFlag == 0) goto LAB_00104794;\n          newStringPtr = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtr1 = (char *)0x0;\n    if (demangleFlag != 0) goto LAB_0010482b;\n    if (unicodeDisplayFlag == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = stringPtr;\n    newStringPtr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)stringPtr;\n      stringPtr = (undefined8 *)((long)stringPtr + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&istableArray)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = calculateStringLength((char *)ptr4);\n    charArray2 = buffer;\n    if (bufferLength < size * 9) {\n      freeMemory(buffer);\n      size = calculateStringLength((char *)ptr4);\n      bufferLength = size * 9;\n      buffer = (undefined8 *)allocateMemory(bufferLength + 1);\n      charArray2 = buffer;\n    }\n    while( true ) {\n      ptr2 = buffer;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&istableArray)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicodeDisplayFlag == 0)) {\n          *(byte *)charArray2 = byte1;\n          charArray2 = (undefined8 *)((long)charArray2 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = charArray2;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicodeDisplayFlag) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = checkTerminalType(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(charArray2 + 1) = 0;\n                  *charArray2 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = charArray2 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                formattedString((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicodeDisplayFlag) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byteVar * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (unicodeDisplayFlag == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  formattedString((char *)charArray2,\"%c\",ulongVar2);\n                  *(undefined *)((long)charArray2 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar + (long)ptr4);\n                  *(undefined2 *)((long)charArray2 + 1) = 0x7830;\n                  charPtr2 = (char *)((long)charArray2 + 3);\n                  do {\n                    charArray = charPtr2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    formattedString(charArray,\"%02x\",(ulong)byte1);\n                    charPtr2 = charArray + 2;\n                  } while (ptr4 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (unicodeDisplayFlag == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  formattedString(charArray + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(charArray + 3);\n                  break;\n                case 4:\n                  intVar = checkTerminalType(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(charArray2 + 1) = 0;\n                    *charArray2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = charArray2 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  formattedString((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicodeDisplayFlag == 4) && (intVar = checkTerminalType(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicodeDisplayFlag) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = checkTerminalType(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(charArray2 + 1) = 0;\n                    *charArray2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = charArray2 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = formattedString((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)ptr2 - (int)charArray2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charArray2 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          charArray2 = (undefined8 *)((long)charArray2 + ulongVar);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)charArray2 = 0x5e;\n        *(byte *)((long)charArray2 + 1) = byte1 + 0x40;\n        charArray2 = (undefined8 *)((long)charArray2 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)charArray2 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((stringInfo != (long *)0x0) && (stringInfo[2] != 0)) && (symbolVersionFlag != 0)) &&\n     ((charPtr2 = (char *)(**(code **)(*(long *)(paramSize + 8) + 0x220))\n                                  (paramSize,stringInfo[2],0,charArray3), charPtr2 != (char *)0x0 &&\n      (*charPtr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((charArray3[0] == '\\0') && (*(long *)(stringInfo[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    newStringPtr = (undefined8 *)concatenateStrings(newStringPtr,ptr4,ptr3,charPtr2,0);\n    ptr4 = newStringPtr;\n  }\n  printFormattedString(formatString,ptr4);\n  if (charPtr1 != (char *)0x0) {\n    *charPtr1 = '@';\n  }\nLAB_001047ba:\n  freeMemory(newStringPtr);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "just_print_symbol_name",
                "print_symbol_info_bsd.cold",
                "display_file",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_modified_string_00104740"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_0010c0c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c8",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c8"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "report_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "count",
                "local_d4": "size",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "tempBuffer",
                "local_b0": "temp10",
                "local_a8": "temp11",
                "local_a0": "temp12",
                "local_98": "temp13",
                "local_90": "temp14",
                "local_88": "copy1",
                "local_78": "copy2",
                "local_68": "copy3",
                "local_58": "copy4",
                "local_48": "copy5",
                "local_38": "copy6",
                "local_28": "copy7",
                "local_18": "copy8"
            },
            "code": "\nvoid reportData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 count;\n  undefined4 size;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined tempBuffer [8];\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  undefined8 temp14;\n  undefined4 copy1;\n  undefined4 copy2;\n  undefined4 copy3;\n  undefined4 copy4;\n  undefined4 copy5;\n  undefined4 copy6;\n  undefined4 copy7;\n  undefined4 copy8;\n  \n  if (flag != '\\0') {\n    copy1 = input1;\n    copy2 = input2;\n    copy3 = input3;\n    copy4 = input4;\n    copy5 = input5;\n    copy6 = input6;\n    copy7 = input7;\n    copy8 = input8;\n  }\n  buffer = &stack0x00000008;\n  count = 8;\n  localBuffer = tempBuffer;\n  size = 0x30;\n  temp10 = param10;\n  temp11 = param11;\n  temp12 = param12;\n  temp13 = param13;\n  temp14 = param14;\n  report(data,&count);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "display_file.cold",
                "display_rel_file",
                "FUN_00104d5b",
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_data_00106400"
        },
        "FUN_0010c1e8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1e8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1e8"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_print_width",
                "list_matching_formats",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "usage",
                "FUN_001047d0",
                "print_symname.cold",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "size_forward1",
                "main",
                "usage",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "print_symbol_info_bsd",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "array_1",
                "param_2": "array_2",
                "uVar1": "result"
            },
            "code": "\nulong compare_and_execute_00103533(undefined8 *array_1,undefined8 *array_2)\n\n{\n  ulong result;\n  \n  if ((ulong)array_1[1] < (ulong)array_2[1]) {\n    return (ulong)(-(uint)(reverse_sort == 0) | 1);\n  }\n  if ((ulong)array_2[1] < (ulong)array_1[1]) {\n    return (ulong)((-(uint)(reverse_sort == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (**(code **)(sorters + (long)reverse_sort * 8))(*array_1,*array_2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "list_matching_formats",
                "bfd_nonfatal",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_constprop_0_0010651a"
            },
            "code": "\nvoid print_constprop_0_0010651a(void)\n\n{\n  print_value_constprop_0();\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "print_symbol_info_posix.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_constprop_0_0010651a"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "param",
                "param_2": "param2",
                "iVar1": "printWidth",
                "cVar2": "isUndefined",
                "uVar3": "symbol",
                "lVar4": "value"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *param,undefined8 param2)\n\n{\n  int printWidth;\n  char isUndefined;\n  undefined8 symbol;\n  long value;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*param + 8));\n  printWidth = print_width;\n  if (isUndefined == '\\0') {\n    if (sort_by_size == 0) {\n      if ((print_width - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbol = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        fatal(symbol,printWidth);\n        goto LAB_00103623;\n      }\n      symbol = *(undefined8 *)*param;\n    }\n    else {\n      if (print_size == 0) {\n        if (param[2] == 0) {\n          value = param[1];\n        }\n        else {\n          value = *(long *)(param[2] + 0x38);\n        }\n        print_value_constprop_0(value);\n        if (print_size != 0) {\n          print_symbol_info_bsd_cold();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbol = *(undefined8 *)*param;\n      if ((print_width - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(print_format_string,symbol);\n    if (print_size != 0) {\n      print_symbol_info_bsd_cold();\n      return;\n    }\n  }\n  else if (print_width == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*param + 8));\n  if (*(char *)(*param + 8) != '-') {\n    print_symname(&DAT_0010712c,param,0,param2);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*param + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*param + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*param + 0x20));\n  print_symname(&DAT_0010712c,param,0,param2);\n  return;\n}\n\n",
            "called": [
                "fatal",
                "bfd_is_undefined_symclass",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_bsd.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_information_001064b0",
                "param_1": "symbol_ptr",
                "param_2": "additional_param",
                "cVar1": "is_undefined_symbol_class",
                "print_symname": "print_symbol_name",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class_in_bfd",
                "print_value_constprop_0": "print_constant_property_value",
                "putchar": "print_character",
                "print_constprop_0_0010651a": "print_constant_property_value_0",
                "param_1[2]": "symbol_ptr[2]",
                "long": "long_integer"
            },
            "code": "\nvoid print_symbol_information_001064b0(long_integer *symbol_ptr,undefined8 additional_param)\n\n{\n  char is_undefined_symbol_class;\n  \n  print_symbol_name(&DAT_00107363,symbol_ptr,0,additional_param);\n  printf(\"%c \",(ulong_integer)(uint)(int)*(char *)(*symbol_ptr + 8));\n  is_undefined_symbol_class = is_undefined_symbol_class_in_bfd((int)*(char *)(*symbol_ptr + 8));\n  if (is_undefined_symbol_class != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  print_constant_property_value(*(undefined8 *)*symbol_ptr);\n  print_character(0x20);\n  if (symbol_ptr[2] == 0) {\n    if (symbol_ptr[1] != 0) {\n      print_constant_property_value_0();\n      return;\n    }\n  }\n  else if (*(long_integer *)(symbol_ptr[2] + 0x38) != 0) {\n    print_constant_property_value();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_posix.cold",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_001064b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_0010c030": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c030",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010c030"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010c150": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c150",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010c150"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_symbol_name_00103b49",
                "param_1": "symbol",
                "param_2": "offset"
            },
            "code": "\nvoid print_symbol_name_00103b49(undefined8 symbol,undefined8 offset)\n\n{\n  print_symname(&DAT_0010712d,symbol,0,offset);\n  return;\n}\n\n",
            "called": [
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_name_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbol_information_00103abf",
                "param_1": "executableName",
                "param_2": "libraryName",
                "pcVar1": "formatString",
                "undefined_only": "undefinedOnlyFlag",
                "print_width": "printWidth"
            },
            "code": "\nvoid printSymbolInformation_00103abf(undefined8 executableName,undefined8 libraryName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (undefinedOnlyFlag == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,executableName,libraryName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (printWidth != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103abf"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_inverse_00103bf6",
                "iVar1": "forward_value",
                "in_RAX": "input_value",
                "auVar2": "inverse_result"
            },
            "code": "\nundefined  [16] calculate_inverse_00103bf6(void)\n\n{\n  int forward_value;\n  undefined8 input_value;\n  undefined inverse_result [16];\n  \n  forward_value = non_numeric_forward();\n  inverse_result._0_4_ = -forward_value;\n  inverse_result._4_4_ = 0;\n  inverse_result._8_8_ = input_value;\n  return inverse_result;\n}\n\n",
            "called": [
                "non_numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_inverse_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "unaff_RBX": "outputFile",
                "pcVar2": "text",
                "__ptr": "targetList",
                "plVar3": "target",
                "in_stack_00000008": "reportBugs"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long lVar1;\n  char *text;\n  long *targetList;\n  FILE *outputFile;\n  long *target;\n  int reportBugs;\n  \n  text = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,text);\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    lVar1 = *target;\n    target = target + 1;\n    if (lVar1 == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (reportBugs == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(reportBugs);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_matching_formats",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "print_symbol_info_bsd.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_symbols_00102c19",
                "pcVar1": "symbolName",
                "pcVar2": "sortFunction",
                "cVar3": "checkFlag",
                "iVar4": "comparisonResult",
                "uVar5": "isEqual",
                "uVar6": "translation",
                "lVar7": "size",
                "puVar8": "symbol",
                "lVar9": "offset",
                "puVar10": "result",
                "puVar11": "array1",
                "puVar12": "array2",
                "puVar13": "tempPtr",
                "puVar14": "tempPtr2",
                "puVar15": "tempPtr3",
                "unaff_RBX": "currentPtr",
                "unaff_RBP": "ptrArray",
                "unaff_R12": "sizeArray",
                "unaff_R13": "array1Ptr",
                "unaff_R14": "array2Ptr",
                "unaff_R15": "symbolPtr",
                "bVar16": "isDynamic",
                "bVar17": "flag",
                "unaff_retaddr": "returnAddress",
                "uVar18": "isSortable",
                "in_stack_00000008": "printArg",
                "in_stack_00000010": "tempArray",
                "in_stack_00000018": "currentArrayPtr",
                "in_stack_00000038": "sortingArg",
                "in_stack_00000040": "extraArgPtr",
                "in_stack_00000048": "extraArrayPtr"
            },
            "code": "\nvoid processSymbols_00102c19(void)\n\n{\n  char *symbolName;\n  code *sortFunction;\n  char checkFlag;\n  int comparisonResult;\n  uint isEqual;\n  undefined8 translation;\n  long size;\n  undefined8 *symbol;\n  long offset;\n  undefined8 *result;\n  undefined8 *currentPtr;\n  undefined8 *__ptr;\n  undefined8 *ptrArray;\n  undefined8 *array1;\n  undefined8 *array2;\n  undefined8 *in_R8;\n  undefined8 *tempPtr;\n  undefined8 *in_R9;\n  undefined8 *tempPtr2;\n  undefined8 *sizeArray;\n  undefined8 *tempPtr3;\n  undefined8 *array1Ptr;\n  undefined8 *array2Ptr;\n  undefined8 *symbolPtr;\n  bool isDynamic;\n  byte flag;\n  ulong returnAddress;\n  ulong isSortable;\n  undefined8 printArg;\n  undefined8 *tempArray;\n  undefined8 *currentArrayPtr;\n  undefined8 sortingArg;\n  void *extraArgPtr;\n  undefined8 *extraArrayPtr;\n  \n  flag = 0;\n  if (allow_special_symbols == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (currentPtr != array1Ptr) {\n      if (array2Ptr == (undefined8 *)0x8) {\n        *currentPtr = *array1Ptr;\n        FUN_001049c0();\n        return;\n      }\n      for (; array2Ptr != (undefined8 *)0x0; array2Ptr = (undefined8 *)((long)array2Ptr + -1)) {\n        *(undefined *)currentPtr = *(undefined *)array1Ptr;\n        array1Ptr = (undefined8 *)((long)array1Ptr + (ulong)flag * -2 + 1);\n        currentPtr = (undefined8 *)((long)currentPtr + (ulong)flag * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    currentPtr = (undefined8 *)((long)currentPtr + (long)array2Ptr);\nLAB_001049c3:\n    do {\n      do {\n        array1Ptr = (undefined8 *)((long)array1Ptr + (long)array2Ptr);\n        tempPtr3 = sizeArray;\n        array2 = ptrArray;\n        if (sizeArray <= array1Ptr) goto LAB_00104b15;\nLAB_001049cf:\n        symbol = (undefined8 *)\n                 (**(code **)(ptrArray[1] + 0x270))\n                           (ptrArray,returnAddress & 0xffffffff,array1Ptr,symbolPtr);\n        array1 = ptrArray;\n        array2 = array1Ptr;\n        tempPtr3 = symbolPtr;\n        if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)symbol[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isEqual = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isEqual != 0) goto LAB_00104a2d;\n          array1Ptr = (undefined8 *)((long)array1Ptr + (long)array2Ptr);\n          tempPtr3 = sizeArray;\n          array2 = ptrArray;\n          if (sizeArray <= array1Ptr) {\nLAB_00104b15:\n            currentPtr = (undefined8 *)((long)currentPtr - (long)currentArrayPtr);\n            if (array2Ptr == (undefined8 *)0x8) {\n              offset = array2[1];\n              array1 = (undefined8 *)((long)currentPtr + 7);\n              if (-1 < (long)currentPtr) {\n                array1 = currentPtr;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              sortFunction = *(code **)(offset + 0x208);\n              array1 = (undefined8 *)((long)array1 >> 3);\n            }\n            else {\n              array1 = (undefined8 *)((long)currentPtr / (long)array2Ptr);\n              offset = array2[1];\n              sortFunction = *(code **)(offset + 0x208);\n            }\n            ptrArray = array2;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = array2;\n              sort_x = (undefined8 *)(*sortFunction)(array2);\n              sort_y = (undefined8 *)(**(code **)(array2[1] + 0x208))(array2);\n              currentPtr = extraArrayPtr;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*array2);\n                __ptr = symbolPtr;\n                goto LAB_00102d8e;\n              }\n              sizeArray = (undefined8 *)(ulong)sortingArg._4_4_;\n              if (sort_by_size != 0) {\n                isSortable = (ulong)(dynamic != 0);\n                qsort(extraArrayPtr,(size_t)array1,(size_t)sizeArray,size_forward1);\n                tempPtr3 = (undefined8 *)xmalloc((long)array1 << 4);\n                tempPtr = sort_x;\n                ptrArray = sort_y;\n                array2Ptr = (undefined8 *)((long)array1 * (long)sizeArray + (long)currentPtr);\n                symbol = sort_x;\n                in_R9 = sort_y;\n                if (array2Ptr <= currentPtr) goto LAB_00102ec2;\n                array1 = (undefined8 *)\n                          (**(code **)(array2[1] + 0x270))(array2,isSortable & 0xffffffff,currentPtr);\n                __ptr = currentPtr;\n                in_R8 = sizeArray;\n                tempArray = tempPtr3;\n                if (array1 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(extraArrayPtr,(size_t)array1,(size_t)sizeArray,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              offset = array2[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              array2 = extraArrayPtr;\n              symbol = (undefined8 *)(ulong)sort_by_size;\n              array2Ptr = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                tempPtr3 = (undefined8 *)(**(code **)(offset + 0x208))(ptrArray);\n                if (tempPtr3 == (undefined8 *)0x0) goto LAB_00102ed2;\n                currentPtr = __ptr + (long)array1 * 2;\n                array1 = __ptr;\n                do {\n                  if (currentPtr <= array1) {\nLAB_00104c75:\n                    if (extraArgPtr == (void *)0x0) {\n                      free(extraArrayPtr);\n                      free(__ptr);\n                      return;\n                    }\n                    free(extraArgPtr);\n                    free(extraArrayPtr);\n                    free(__ptr);\n                    return;\n                  }\n                  symbol = tempPtr3;\n                  offset = (**(code **)(ptrArray[1] + 0x270))(ptrArray,array2Ptr,*array1);\n                  if (offset == 0) {\n                    bfd_fatal(*ptrArray,0);\nLAB_00102ed2:\n                    array2 = (undefined8 *)*ptrArray;\n                    bfd_fatal();\n                    tempPtr = in_R8;\n                    tempPtr2 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  array2 = array1 + 1;\n                  array1 = array1 + 2;\n                  print_symbol(ptrArray,offset,*array2,printArg);\n                } while( true );\n              }\n              sizeArray = (undefined8 *)(ulong)sortingArg._4_4_;\n              symbolPtr = (undefined8 *)(**(code **)(offset + 0x208))(ptrArray);\n              if (symbolPtr == (undefined8 *)0x0) {\n                bfd_fatal(*ptrArray);\n                array2 = sizeArray;\n                if (dynamic == 0) {\n                  offset = (**(code **)(ptrArray[1] + 0x350))(ptrArray);\n                  array1 = extraArrayPtr;\n                  tempPtr3 = sizeArray;\n                  if (offset < 1) {\n                    symbol = (undefined8 *)0x0;\n                    currentPtr = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    currentPtr = (undefined8 *)xmalloc();\n                    symbol = (undefined8 *)(**(code **)(ptrArray[1] + 0x358))(ptrArray,currentPtr);\n                    array2 = tempPtr3;\n                    if ((long)symbol < 0) {\n                      array2 = (undefined8 *)*ptrArray;\n                      array1 = (undefined8 *)bfd_fatal(array2,tempPtr3);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol = sizeArray;\n                  currentPtr = extraArrayPtr;\n                  array1 = (undefined8 *)0x0;\n                  tempPtr3 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = currentPtr;\n                offset = (**(code **)(ptrArray[1] + 0x360))(ptrArray,tempPtr3,array1,symbol);\n                sizeArray = array2;\n                if (0 < offset) {\n                  sizeArray = (undefined8 *)((long)array2 + offset);\n                  extraArrayPtr = (undefined8 *)xrealloc(extraArrayPtr);\n                  size = 0;\n                  do {\n                    extraArrayPtr[(long)((long)array2 + size)] =\n                         (void *)(size * 0x30 + (long)extraArgPtr);\n                    size = size + 1;\n                  } while (offset != size);\n                  extraArrayPtr[(long)((long)array2 + offset)] = 0;\n                }\n                if ((dynamic == 0) && (currentPtr != (undefined8 *)0x0)) {\n                  free(currentPtr);\n                }\n                if ((*(byte *)((long)ptrArray + 0x4a) & 0x10) != 0) {\n                  currentPtr = (undefined8 *)*ptrArray;\n                  report_plugin_err = '\\0';\n                  translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(translation);\n                }\n                array2Ptr = (undefined8 *)(ulong)sortingArg._4_4_;\n                isDynamic = dynamic != 0;\n                array1 = (undefined8 *)(ulong)isDynamic;\n                symbol = extraArrayPtr;\n                currentArrayPtr = extraArrayPtr;\n                symbolPtr = (undefined8 *)(**(code **)(ptrArray[1] + 0x208))(ptrArray);\n                if (symbolPtr != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                array1 = (undefined8 *)((long)array1 * (long)sizeArray + (long)array2);\n                currentPtr = array2;\n                while( true ) {\n                  if (array1 <= currentPtr) goto LAB_00104c75;\n                  symbol = symbolPtr;\n                  offset = (**(code **)(ptrArray[1] + 0x270))(ptrArray,array2Ptr,currentPtr);\n                  if (offset == 0) break;\n                  currentPtr = (undefined8 *)((long)currentPtr + (long)sizeArray);\n                  print_symbol(ptrArray,offset,0,printArg);\n                }\n                bfd_fatal(*ptrArray,0);\n              }\n              bfd_fatal(*ptrArray);\n              array2 = ptrArray;\n              tempPtr3 = symbolPtr;\nLAB_00102eb0:\n              bfd_fatal(*array1);\nLAB_00102eb9:\n              bfd_fatal(*array2);\nLAB_00102ec2:\n              array1 = (undefined8 *)0x0;\n              __ptr = currentPtr;\n              in_R8 = sizeArray;\n              tempPtr = symbol;\n              ptrArray = in_R9;\n              tempArray = tempPtr3;\nLAB_00104e35:\n              while (in_R9 = tempPtr, __ptr < array2Ptr) {\n                currentPtr = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (currentPtr < array2Ptr) {\n                  symbol = ptrArray;\n                  tempPtr = in_R8;\n                  tempPtr2 = in_R9;\n                  result = (undefined8 *)(**(code **)(array2[1] + 0x270))();\n                  if (result == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = tempPtr2;\n                    in_R8 = tempPtr;\n                    array2 = (undefined8 *)*array2;\n                    result = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol = (undefined8 *)array1[4];\n                    if ((*(uint *)(array1 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  offset = array1[2];\nLAB_00102ee7:\n                  if (symbol == (undefined8 *)result[4]) {\n                    offset = result[2] - offset;\n                    tempPtr = ptrArray;\n                    tempPtr2 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  offset = symbol[8] - offset;\n                  tempPtr = ptrArray;\n                  tempPtr2 = __ptr;\n                }\n                else {\n                  symbol = (undefined8 *)array1[4];\n                  if ((*(uint *)(array1 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    offset = array1[2];\n                    result = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  result = (undefined8 *)0x0;\nLAB_00104e95:\n                  tempPtr = ptrArray;\n                  tempPtr2 = __ptr;\n                  if (*(int *)(array2[1] + 8) == 5) {\n                    offset = array1[7];\n                  }\n                  else {\n                    offset = array1[2];\n                    if ((*(byte *)((long)symbol + 0x25) & 0x10) == 0) {\n                      if (currentPtr < array2Ptr) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                array1 = result;\n                __ptr = currentPtr;\n                ptrArray = in_R9;\n                if (offset != 0) {\n                  *tempPtr3 = tempPtr2;\n                  tempPtr3[1] = offset;\n                  tempPtr3 = tempPtr3 + 2;\n                }\n              }\n              array1 = (undefined8 *)((long)tempPtr3 - (long)tempArray >> 4);\n              qsort(tempArray,(size_t)array1,0x10,size_forward2);\n              offset = array2[1];\n              currentPtr = __ptr;\n              ptrArray = array2;\n              __ptr = tempArray;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        tempArray = symbol;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            tempArray = (undefined8 *)*ptrArray;\n            report_plugin_err = '\\0';\n            translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(translation,tempArray);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          isEqual = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprint_debug_symbols_00104d5b:\n          if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol + 3) & 4) != 0);\n      if (sort_by_size != 0) goto print_debug_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        checkFlag = (**(code **)(ptrArray[1] + 0x230))(ptrArray);\n        if (checkFlag != '\\0') {\n          processSymbols_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol[4] == 0x10c2a8);\nLAB_00104cba:\n    checkFlag = (**(code **)(ptrArray[1] + 0x230))(ptrArray);\n    if (checkFlag != '\\0') {\n      processSymbols_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  tempPtr3 = (undefined8 *)((long)sizeArray * (long)array2Ptr);\n  sizeArray = (undefined8 *)((long)currentArrayPtr + (long)tempPtr3);\n  currentPtr = currentArrayPtr;\n  array2 = ptrArray;\n  if (currentArrayPtr < sizeArray) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)isDynamic;\n  array1Ptr = currentArrayPtr;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "error",
                "uVar2": "errorMsg",
                "lVar3": "isFatal",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int error;\n  undefined8 errorMsg;\n  long isFatal;\n  undefined8 additionalInfo;\n  \n  bfd_nonfatal();\n  isFatal = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (isFatal != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,isFatal,errorMsg,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMsg,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "non_numeric_forward.cold",
                "get_relocs",
                "size_forward1",
                "display_rel_file",
                "FUN_00104d5b",
                "print_symbol",
                "display_file",
                "numeric_forward.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_unicode_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byteVal",
                "bVar3": "byteVal2",
                "iVar4": "isTTYResult",
                "sVar5": "strLen",
                "puVar6": "ptr2",
                "pcVar7": "formattedStr",
                "uVar8": "numBytes",
                "uVar9": "charVal",
                "puVar10": "symbolVersion",
                "puVar11": "inputPtr",
                "unaff_RBP": "rbp",
                "puVar12": "outputBuffer",
                "unaff_R12": "unaffR12",
                "unaff_R13": "unicodeString",
                "lVar13": "loopVar",
                "uVar14": "unicodeOption",
                "unaff_R14": "formatString",
                "unaff_R15": "unaffR15",
                "bVar15": "flag",
                "__s": "tmpString",
                "in_stack_00000038": "inputChar"
            },
            "code": "\nvoid printUnicodeString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byteVal;\n  byte byteVal2;\n  int isTTYResult;\n  size_t strLen;\n  undefined8 *ptr2;\n  char *formattedStr;\n  ulong numBytes;\n  undefined8 charVal;\n  undefined *symbolVersion;\n  undefined8 *inputPtr;\n  long rbp;\n  undefined8 *outputBuffer;\n  undefined *unaffR12;\n  undefined8 *unicodeString;\n  long loopVar;\n  uint unicodeOption;\n  char *formatString;\n  long unaffR15;\n  byte flag;\n  char *tmpString;\n  undefined8 inputChar;\n  \n  flag = 0;\n  outputBuffer = unicodeString;\n  if (unicode_display != 0) {\n    do {\n      byteVal = *(byte *)outputBuffer;\n      if (byteVal == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byteVal * 2] & 2) == 0) &&\n            (outputBuffer = (undefined8 *)((long)outputBuffer + 1), byteVal < 0xc0));\n    strLen = strlen((char *)unicodeString);\n    outputBuffer = buffer_8;\n    inputPtr = unicodeString;\n    if (buffer_len_9 < strLen * 9) {\n      free(buffer_8);\n      strLen = strlen((char *)unicodeString);\n      buffer_len_9 = strLen * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      outputBuffer = buffer_8;\n    }\n    while( true ) {\n      unicodeString = buffer_8;\n      byteVal = *(byte *)inputPtr;\n      ptr = (undefined8 *)((long)inputPtr + 1);\n      if (byteVal == 0) break;\n      if (((&_sch_istable)[(ulong)byteVal * 2] & 2) == 0) {\n        if ((byteVal < 0xc0) || (unicode_display == 0)) {\n          *(byte *)outputBuffer = byteVal;\n          outputBuffer = (undefined8 *)((long)outputBuffer + 1);\n          inputPtr = ptr;\n        }\n        else {\n          byteVal2 = *(byte *)((long)inputPtr + 1);\n          if ((byteVal2 & 0xc0) == 0x80) {\n            ptr2 = outputBuffer;\n            if ((byteVal & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                unicodeOption = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                loopVar = 2;\n                goto LAB_00102917;\n              case 4:\n                isTTYResult = isatty(1);\n                if (isTTYResult == 0) {\n                  byteVal2 = *(byte *)((long)inputPtr + 1);\n                }\n                else {\n                  *(undefined *)(outputBuffer + 1) = 0;\n                  *outputBuffer = 0x6d37343b31335b1b;\n                  byteVal2 = *(byte *)((long)inputPtr + 1);\n                  ptr2 = outputBuffer + 1;\n                }\n              case 2:\n                unicodeOption = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)inputPtr >> 2 & 7),\n                        (ulong)((*(byte *)inputPtr & 3) << 6 | byteVal2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                unicodeOption = 2;\n              }\n            }\n            else {\n              byteVal2 = *(byte *)((long)inputPtr + 2);\n              if ((byteVal2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVal & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  unicodeOption = 3;\nLAB_00102a62:\n                  for (numBytes = (ulong)unicodeOption; numBytes != 0; numBytes = numBytes - 1) {\n                    *(undefined *)ptr2 = *(undefined *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + (ulong)flag * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  loopVar = 3;\nLAB_00102917:\n                  charVal = 0x7b;\n                  if (unicode_display == 3) {\n                    charVal = 0x3c;\n                  }\n                  sprintf((char *)outputBuffer,\"%c\",charVal);\n                  *(undefined *)((long)outputBuffer + 3) = 0;\n                  ptr2 = (undefined8 *)(loopVar + (long)inputPtr);\n                  *(undefined2 *)((long)outputBuffer + 1) = 0x7830;\n                  formattedStr = (char *)((long)outputBuffer + 3);\n                  do {\n                    tmpString = formattedStr;\n                    byteVal = *(byte *)inputPtr;\n                    inputPtr = (undefined8 *)((long)inputPtr + 1);\n                    sprintf(tmpString,\"%02x\",(ulong)byteVal);\n                    formattedStr = tmpString + 2;\n                  } while (inputPtr != ptr2);\n                  charVal = 0x7d;\n                  if (unicode_display == 3) {\n                    charVal = 0x3e;\n                  }\n                  unicodeOption = (uint)loopVar;\n                  sprintf(tmpString + 2,\"%c\",charVal);\n                  ptr2 = (undefined8 *)(tmpString + 3);\n                  break;\n                case 4:\n                  isTTYResult = isatty(1);\n                  if (isTTYResult == 0) {\n                    byteVal2 = *(byte *)((long)inputPtr + 2);\n                  }\n                  else {\n                    *(undefined *)(outputBuffer + 1) = 0;\n                    *outputBuffer = 0x6d37343b31335b1b;\n                    byteVal2 = *(byte *)((long)inputPtr + 2);\n                    ptr2 = outputBuffer + 1;\n                  }\n                case 2:\n                  unicodeOption = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)inputPtr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 | byteVal2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (isTTYResult = isatty(1), isTTYResult != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  unicodeOption = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)inputPtr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  unicodeOption = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  loopVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTTYResult = isatty(1);\n                  if (isTTYResult != 0) {\n                    *(undefined *)(outputBuffer + 1) = 0;\n                    *outputBuffer = 0x6d37343b31335b1b;\n                    ptr2 = outputBuffer + 1;\n                  }\n                case 2:\n                  unicodeOption = 4;\n                  isTTYResult = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)inputPtr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)inputPtr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPtr + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)isTTYResult);\n                  goto LAB_00102a27;\n                default:\n                  unicodeOption = 4;\n                }\n              }\n            }\n            numBytes = (ulong)(uint)((int)ptr2 - (int)outputBuffer);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputBuffer = byteVal;\n            unicodeOption = 1;\n            numBytes = 1;\n          }\n          outputBuffer = (undefined8 *)((long)outputBuffer + numBytes);\n          inputPtr = (undefined8 *)((long)ptr + (ulong)(unicodeOption - 1));\n        }\n      }\n      else {\n        *(undefined *)outputBuffer = 0x5e;\n        *(byte *)((long)outputBuffer + 1) = byteVal + 0x40;\n        outputBuffer = (undefined8 *)((long)outputBuffer + 2);\n        inputPtr = ptr;\n      }\n    }\n    *(undefined *)outputBuffer = 0;\n  }\nLAB_0010485e:\n  outputBuffer = (undefined8 *)0x0;\n  if ((((rbp != 0) && (*(long *)(rbp + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((formattedStr = (char *)(**(code **)(*(long *)(unaffR15 + 8) + 0x220))\n                                  (unaffR15,*(long *)(rbp + 0x10),0,\n                                   (long)&stack0x00000038 + 7), formattedStr != (char *)0x0 &&\n      (*formattedStr != '\\0')))) {\n    symbolVersion = &DAT_001071e0;\n    if ((inputChar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(rbp + 0x10) + 0x20) != 0x10c2a8)) {\n      symbolVersion = &DAT_001071df;\n    }\n    outputBuffer = (undefined8 *)reconcat(0,unicodeString,symbolVersion,formattedStr,0);\n    unicodeString = outputBuffer;\n  }\n  printf(formatString,unicodeString);\n  if (unaffR12 != (undefined *)0x0) {\n    *unaffR12 = 0x40;\n  }\n  free(outputBuffer);\n  return;\n}\n\n",
            "called": [
                "free",
                "xmalloc",
                "isatty",
                "sprintf",
                "strlen",
                "FUN_001047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_unicode_string_0010268b"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_negative_result_00103bec",
                "in_RAX": "input_value",
                "iVar1": "numeric_result",
                "auVar2": "output_data"
            },
            "code": "\nundefined  [16] calculate_negative_result_00103bec(void)\n\n{\n  int numeric_result;\n  undefined8 input_value;\n  undefined output_data [16];\n  \n  numeric_result = numeric_forward();\n  output_data._0_4_ = -numeric_result;\n  output_data._4_4_ = 0;\n  output_data._8_8_ = input_value;\n  return output_data;\n}\n\n",
            "called": [
                "numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_negative_result_00103bec"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "error_message",
                "param_2": "variable_arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "executable_name"
            },
            "code": "\n\n\nvoid print_error_message_001063a0(char *error_message,__gnuc_va_list variable_arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",executable_name);\n  vfprintf(standard_error,error_message,variable_arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fflush",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_0010c208": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c208",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c208"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_unicode_string_00102739",
                "puVar1": "pointer",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "pcVar6": "symbol",
                "puVar7": "pointer2",
                "pcVar8": "str",
                "__ptr": "result",
                "uVar9": "ulongVar",
                "uVar10": "undefinedVar",
                "puVar11": "pointer3",
                "puVar12": "pointer4",
                "unaff_R13": "unicodeString",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "bVar15": "byteVar",
                "__s": "strTemp",
                "in_stack_00000038": "stackVar"
            },
            "code": "\nvoid printUnicodeString_00102739(void)\n\n{\n  undefined8 *pointer;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  char *symbol;\n  undefined8 *pointer2;\n  char *str;\n  undefined8 *result;\n  ulong ulongVar;\n  undefined8 undefinedVar;\n  undefined *pointer3;\n  long unaff_RBP;\n  undefined8 *pointer4;\n  undefined8 *unicodeString;\n  long longVar;\n  uint uintVar;\n  char *unaff_R14;\n  long unaff_R15;\n  byte byteVar;\n  char *strTemp;\n  undefined8 stackVar;\n  \n  byteVar = 0;\n  pointer4 = unicodeString;\n  if (*(int *)(*(long *)(unaff_R15 + 8) + 8) != 5) {\n    if (do_demangle != 0) {\n      symbol = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    symbol = (char *)0x0;\n    if (unicode_display == 0) {\nLAB_00104794:\n      result = (undefined8 *)0x0;\n    }\n    else {\n      result = (undefined8 *)0x0;\n      if (unicodeString != (undefined8 *)0x0) goto LAB_0010269d;\n      result = (undefined8 *)0x0;\n      unicodeString = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  symbol = strchr((char *)unicodeString,0x40);\n  if (symbol == (char *)0x0) {\n    if (do_demangle != 0) goto LAB_0010482b;\n    if (unicode_display == 0) {\n      if (unaff_RBP == 0) {\n        result = (undefined8 *)0x0;\n        printf(unaff_R14);\n      }\n      else {\n        if (*(long *)(unaff_RBP + 0x10) != 0) {\n          print_and_free_001047d0();\n          return;\n        }\n        result = (undefined8 *)0x0;\n        printf(unaff_R14);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    pointer4 = unicodeString;\n    result = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)pointer4;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (pointer4 = (undefined8 *)((long)pointer4 + 1), byte1 < 0xc0));\n    size = strlen((char *)unicodeString);\n    pointer4 = buffer_8;\n    if (buffer_len_9 < size * 9) {\n      free(buffer_8);\n      size = strlen((char *)unicodeString);\n      buffer_len_9 = size * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      pointer4 = buffer_8;\n    }\n    while( true ) {\n      pointer2 = buffer_8;\n      byte1 = *(byte *)unicodeString;\n      pointer = (undefined8 *)((long)unicodeString + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)pointer4 = byte1;\n          pointer4 = (undefined8 *)((long)pointer4 + 1);\n          unicodeString = pointer;\n        }\n        else {\n          byte2 = *(byte *)((long)unicodeString + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            pointer2 = pointer4;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)unicodeString + 1);\n                }\n                else {\n                  *(undefined *)(pointer4 + 1) = 0;\n                  *pointer4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)unicodeString + 1);\n                  pointer2 = pointer4 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)pointer2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unicodeString >> 2 & 7)\n                        ,(ulong)((*(byte *)unicodeString & 3) << 6 | byte2 & 0x3f));\n                pointer2 = (undefined8 *)((long)pointer2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)unicodeString + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)pointer2 = *(undefined *)unicodeString;\n                    unicodeString = (undefined8 *)((long)unicodeString + (ulong)byteVar * -2 + 1);\n                    pointer2 = (undefined8 *)((long)pointer2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  undefinedVar = 0x7b;\n                  if (unicode_display == 3) {\n                    undefinedVar = 0x3c;\n                  }\n                  sprintf((char *)pointer4,\"%c\",undefinedVar);\n                  *(undefined *)((long)pointer4 + 3) = 0;\n                  pointer2 = (undefined8 *)(longVar + (long)unicodeString);\n                  *(undefined2 *)((long)pointer4 + 1) = 0x7830;\n                  str = (char *)((long)pointer4 + 3);\n                  do {\n                    strTemp = str;\n                    byte1 = *(byte *)unicodeString;\n                    unicodeString = (undefined8 *)((long)unicodeString + 1);\n                    sprintf(strTemp,\"%02x\",(ulong)byte1);\n                    str = strTemp + 2;\n                  } while (unicodeString != pointer2);\n                  undefinedVar = 0x7d;\n                  if (unicode_display == 3) {\n                    undefinedVar = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(strTemp + 2,\"%c\",undefinedVar);\n                  pointer2 = (undefined8 *)(strTemp + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)unicodeString + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer4 + 1) = 0;\n                    *pointer4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)unicodeString + 2);\n                    pointer2 = pointer4 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)pointer2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unicodeString & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unicodeString + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unicodeString + 1) & 3) << 6 | byte2 & 0x3f));\n                  pointer2 = (undefined8 *)((long)pointer2 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)pointer2 = 0x6d305b1b;\n                    pointer2 = (undefined8 *)((long)pointer2 + 4);\n                    *(undefined *)pointer2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unicodeString + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(pointer4 + 1) = 0;\n                    *pointer4 = 0x6d37343b31335b1b;\n                    pointer2 = pointer4 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)pointer2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unicodeString & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unicodeString + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unicodeString + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unicodeString + 2) >> 2 & 0xfU));\n                  pointer2 = (undefined8 *)((long)pointer2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)pointer2 - (int)pointer4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer4 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          pointer4 = (undefined8 *)((long)pointer4 + ulongVar);\n          unicodeString = (undefined8 *)((long)pointer + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer4 = 0x5e;\n        *(byte *)((long)pointer4 + 1) = byte1 + 0x40;\n        pointer4 = (undefined8 *)((long)pointer4 + 2);\n        unicodeString = pointer;\n      }\n    }\n    *(undefined *)pointer4 = 0;\n    unicodeString = pointer2;\n  }\n  else {\n    *symbol = '\\0';\n    if (do_demangle == 0) {\n      if (unicode_display == 0) goto LAB_00104794;\n      result = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unicodeString == '\\0') ||\n       (pointer4 = (undefined8 *)bfd_demangle(), pointer4 == (undefined8 *)0x0)) {\n      if (unicode_display != 0) goto LAB_00102698;\n      result = (undefined8 *)0x0;\n    }\n    else {\n      unicodeString = pointer4;\n      result = pointer4;\n      if (unicode_display != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((unaff_RBP != 0) && (*(long *)(unaff_RBP + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((str = (char *)(**(code **)(*(long *)(unaff_R15 + 8) + 0x220))\n                                  (unaff_R15,*(long *)(unaff_RBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), str != (char *)0x0 &&\n      (*str != '\\0')))) {\n    pointer3 = &DAT_001071e0;\n    if ((stackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaff_RBP + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer3 = &DAT_001071df;\n    }\n    result = (undefined8 *)reconcat(result,unicodeString,pointer3,str,0);\n    unicodeString = result;\n  }\n  printf(unaff_R14,unicodeString);\n  if (symbol != (char *)0x0) {\n    *symbol = '@';\n  }\nLAB_001047ba:\n  free(result);\n  return;\n}\n\n",
            "called": [
                "bfd_demangle",
                "strchr",
                "printf",
                "FUN_001047d0",
                "print_symname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "print_symname"
            ],
            "imported": false,
            "current_name": "print_unicode_string_00102739"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_binary_files_00105050",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "__s": "string_1",
                "__s_00": "string_2",
                "lVar3": "file_size_1",
                "lVar9": "file_header_1",
                "lVar10": "file_header_2",
                "uVar2": "file_size_2",
                "uVar11": "result",
                "uVar12": "end_of_section_2",
                "uVar13": "end_of_section_1",
                "uVar14": "section2_offset",
                "uVar15": "bfd_handle",
                "unaff_R13": "sort_type",
                "bVar16": "compare_result",
                "cVar1": "last_char_string_1",
                "uVar4": "flag"
            },
            "code": "\nulong compareBinaryFiles_00105050(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char last_char_string_1;\n  ulong file_size_2;\n  char *string_1;\n  char *string_2;\n  long file_size_1;\n  uint flag;\n  size_t sVar5;\n  size_t sVar6;\n  char *pcVar7;\n  char *pcVar8;\n  long file_header_1;\n  long file_header_2;\n  ulong result;\n  ulong end_of_section_2;\n  ulong end_of_section_1;\n  ulong section2_offset;\n  undefined8 bfd_handle;\n  long sort_type;\n  bool compare_result;\n  \n  file_header_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,file_path_1,sort_x);\n  result = (ulong)sort_dynamic;\n  file_header_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,result,file_path_2,sort_y);\n  if ((file_header_1 != 0) && (file_header_2 != 0)) {\n    file_size_1 = *(long *)(file_header_2 + 0x20);\n    if (*(long *)(file_header_1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (file_size_1 == 0x10c2a8) {\nLAB_001050fa:\n        result = non_numeric_forward(file_path_1,file_path_2);\n        return result;\n      }\n    }\n    else if (file_size_1 == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      end_of_section_1 = *(long *)(file_header_1 + 0x10) + *(long *)(*(long *)(file_header_1 + 0x20) + 0x30);\n      result = *(long *)(file_header_2 + 0x10) + *(long *)(file_size_1 + 0x30);\n      if (end_of_section_1 == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(end_of_section_1 < result) | 1);\n    }\n    return result;\n  }\n  bfd_handle = *sort_bfd;\n  bfd_fatal();\n  file_header_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,bfd_handle,sort_x);\n  file_header_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,result,sort_y);\n  if ((file_header_1 == 0) || (sort_type = file_header_2, file_header_2 == 0)) {\n    file_header_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(file_header_1 + 0x20) == 0x10c2a8) || (*(long *)(file_header_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  end_of_section_1 = *(ulong *)(*(long *)(file_header_1 + 0x20) + 0x30);\n  file_size_2 = *(ulong *)(*(long *)(file_header_2 + 0x20) + 0x30);\n  section2_offset = *(long *)(file_header_1 + 0x10) + end_of_section_1;\n  end_of_section_2 = *(long *)(sort_type + 0x10) + file_size_2;\n  compare_result = section2_offset < end_of_section_2;\n  if ((section2_offset != end_of_section_2) || (compare_result = end_of_section_1 < file_size_2, end_of_section_1 != file_size_2)) {\n    return (ulong)(-(uint)compare_result | 1);\n  }\n  string_1 = *(char **)(file_header_1 + 8);\n  string_2 = *(char **)(sort_type + 8);\n  sVar5 = strlen(string_1);\n  sVar6 = strlen(string_2);\n  pcVar7 = strstr(string_1,\"gnu_compiled\");\n  if (pcVar7 == (char *)0x0) {\n    pcVar8 = strstr(string_1,\"gcc2_compiled\");\n    pcVar7 = strstr(string_2,\"gnu_compiled\");\n    if ((pcVar7 == (char *)0x0) && (pcVar7 = strstr(string_2,\"gcc2_compiled\"), pcVar7 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pcVar8 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pcVar7 = strstr(string_2,\"gnu_compiled\");\n    if (pcVar7 == (char *)0x0) {\n      pcVar8 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pcVar8 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(sort_type + 0x18) & 0x4000;\n  if ((*(byte *)(file_header_1 + 0x19) & 0x40) == 0) {\n    if ((sVar5 < 3) || (string_1[sVar5 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((sVar6 < 3) || (string_2[sVar6 - 2] != '.')) goto LAB_00103202;\n      compare_result = false;\n      goto LAB_001031e7;\n    }\n    last_char_string_1 = string_1[sVar5 - 1];\n    compare_result = last_char_string_1 == 'o' || last_char_string_1 == 'a';\n    if (flag == 0) {\n      if ((sVar6 < 3) || (string_2[sVar6 - 2] != '.')) {\n        if (last_char_string_1 == 'o' || last_char_string_1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (sVar6 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[sVar6 - 2] != '.') {\n      return 0xffffffff;\n    }\n    compare_result = true;\nLAB_001031e7:\n    if ((string_2[sVar6 - 1] != 'o') && (string_2[sVar6 - 1] != 'a')) {\n      if (compare_result) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!compare_result) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(bfd_handle,result);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "numeric_forward.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_binary_files_00105050"
        },
        "FUN_0010c168": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c168",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010c168"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "reverse_and_display_symbols_001049c0",
                "unaff_RBX": "symbolOffset",
                "unaff_R14": "symbolSize",
                "unaff_R13": "symbolAddress",
                "unaff_R12": "symbolCount",
                "unaff_RBP": "bfdObject",
                "unaff_R15": "displayFormat",
                "puVar15": "symbolArray",
                "puVar12": "temp",
                "in_stack_00000018": "symbolData",
                "unaff_retaddr": "dynamicCount",
                "in_stack_00000008": "displayFormatData",
                "in_stack_00000010": "symbolArrayCopy",
                "in_stack_00000038": "noSortFlag",
                "in_stack_00000040": "pluginData",
                "in_stack_00000048": "sortData",
                "bVar16": "sortDynamicFlag"
            },
            "code": "\nvoid reverseAndDisplaySymbols_001049c0(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *symbolOffset;\n  undefined8 *__ptr;\n  undefined8 *bfdObject;\n  undefined8 *puVar11;\n  undefined8 *temp;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *symbolArray;\n  undefined8 *symbolCount;\n  undefined8 *symbolAddress;\n  undefined8 *symbolSize;\n  undefined8 *displayFormat;\n  bool sortDynamicFlag;\n  byte bVar17;\n  ulong dynamicCount;\n  ulong uVar18;\n  undefined8 displayFormatData;\n  undefined8 *symbolArrayCopy;\n  undefined8 *symbolData;\n  undefined8 noSortFlag;\n  void *pluginData;\n  undefined8 *sortData;\n  \n  bVar17 = 0;\n  do {\n    symbolOffset = (undefined8 *)((long)symbolOffset + (long)symbolSize);\nLAB_001049c3:\n    do {\n      do {\n        symbolAddress = (undefined8 *)((long)symbolAddress + (long)symbolSize);\n        symbolArray = symbolCount;\n        temp = bfdObject;\n        if (symbolCount <= symbolAddress) goto LAB_00104b15;\nLAB_001049cf:\n        puVar8 = (undefined8 *)\n                 (**(code **)(bfdObject[1] + 0x270))\n                           (bfdObject,dynamicCount & 0xffffffff,symbolAddress,displayFormat);\n        puVar11 = bfdObject;\n        temp = symbolAddress;\n        symbolArray = displayFormat;\n        if (puVar8 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pcVar1 = (char *)puVar8[1];\n        if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uVar5 = (uint)(puVar8[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uVar5 != 0) goto LAB_00104a2d;\n          symbolAddress = (undefined8 *)((long)symbolAddress + (long)symbolSize);\n          symbolArray = symbolCount;\n          temp = bfdObject;\n          if (symbolCount <= symbolAddress) {\nLAB_00104b15:\n            symbolOffset = (undefined8 *)((long)symbolOffset - (long)symbolData);\n            if (symbolSize == (undefined8 *)0x8) {\n              lVar9 = temp[1];\n              puVar11 = (undefined8 *)((long)symbolOffset + 7);\n              if (-1 < (long)symbolOffset) {\n                puVar11 = symbolOffset;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              pcVar2 = *(code **)(lVar9 + 0x208);\n              puVar11 = (undefined8 *)((long)puVar11 >> 3);\n            }\n            else {\n              puVar11 = (undefined8 *)((long)symbolOffset / (long)symbolSize);\n              lVar9 = temp[1];\n              pcVar2 = *(code **)(lVar9 + 0x208);\n            }\n            bfdObject = temp;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = temp;\n              sort_x = (undefined8 *)(*pcVar2)(temp);\n              sort_y = (undefined8 *)(**(code **)(temp[1] + 0x208))(temp);\n              symbolOffset = sortData;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*temp);\n                __ptr = displayFormat;\n                goto LAB_00102d8e;\n              }\n              symbolCount = (undefined8 *)(ulong)noSortFlag._4_4_;\n              if (sort_by_size != 0) {\n                uVar18 = (ulong)(dynamic != 0);\n                qsort(sortData,(size_t)puVar11,(size_t)symbolCount,size_forward1);\n                symbolArray = (undefined8 *)xmalloc((long)puVar11 << 4);\n                puVar13 = sort_x;\n                bfdObject = sort_y;\n                symbolSize = (undefined8 *)((long)puVar11 * (long)symbolCount + (long)symbolOffset);\n                puVar8 = sort_x;\n                in_R9 = sort_y;\n                if (symbolSize <= symbolOffset) goto LAB_00102ec2;\n                puVar11 = (undefined8 *)\n                          (**(code **)(temp[1] + 0x270))(temp,uVar18 & 0xffffffff,symbolOffset);\n                __ptr = symbolOffset;\n                in_R8 = symbolCount;\n                symbolArrayCopy = symbolArray;\n                if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(sortData,(size_t)puVar11,(size_t)symbolCount,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              lVar9 = temp[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              temp = sortData;\n              puVar8 = (undefined8 *)(ulong)sort_by_size;\n              symbolSize = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                symbolArray = (undefined8 *)(**(code **)(lVar9 + 0x208))(bfdObject);\n                if (symbolArray == (undefined8 *)0x0) goto LAB_00102ed2;\n                symbolOffset = __ptr + (long)puVar11 * 2;\n                puVar11 = __ptr;\n                do {\n                  if (symbolOffset <= puVar11) {\nLAB_00104c75:\n                    if (pluginData == (void *)0x0) {\n                      free(sortData);\n                      free(__ptr);\n                      return;\n                    }\n                    free(pluginData);\n                    free(sortData);\n                    free(__ptr);\n                    return;\n                  }\n                  puVar8 = symbolArray;\n                  lVar9 = (**(code **)(bfdObject[1] + 0x270))(bfdObject,symbolSize,*puVar11);\n                  if (lVar9 == 0) {\n                    bfd_fatal(*bfdObject,0);\nLAB_00102ed2:\n                    temp = (undefined8 *)*bfdObject;\n                    bfd_fatal();\n                    puVar13 = in_R8;\n                    puVar14 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  temp = puVar11 + 1;\n                  puVar11 = puVar11 + 2;\n                  print_symbol(bfdObject,lVar9,*temp,displayFormatData);\n                } while( true );\n              }\n              symbolCount = (undefined8 *)(ulong)noSortFlag._4_4_;\n              displayFormat = (undefined8 *)(**(code **)(lVar9 + 0x208))(bfdObject);\n              if (displayFormat == (undefined8 *)0x0) {\n                bfd_fatal(*bfdObject);\n                temp = symbolCount;\n                if (dynamic == 0) {\n                  lVar9 = (**(code **)(bfdObject[1] + 0x350))(bfdObject);\n                  puVar11 = sortData;\n                  symbolArray = symbolCount;\n                  if (lVar9 < 1) {\n                    puVar8 = (undefined8 *)0x0;\n                    symbolOffset = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    symbolOffset = (undefined8 *)xmalloc();\n                    puVar8 = (undefined8 *)(**(code **)(bfdObject[1] + 0x358))(bfdObject,symbolOffset);\n                    temp = symbolArray;\n                    if ((long)puVar8 < 0) {\n                      temp = (undefined8 *)*bfdObject;\n                      puVar11 = (undefined8 *)bfd_fatal(temp,symbolArray);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  puVar8 = symbolCount;\n                  symbolOffset = sortData;\n                  puVar11 = (undefined8 *)0x0;\n                  symbolArray = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = symbolOffset;\n                lVar9 = (**(code **)(bfdObject[1] + 0x360))(bfdObject,symbolArray,puVar11,puVar8);\n                symbolCount = temp;\n                if (0 < lVar9) {\n                  symbolCount = (undefined8 *)((long)temp + lVar9);\n                  sortData = (undefined8 *)xrealloc(sortData);\n                  lVar7 = 0;\n                  do {\n                    sortData[(long)((long)temp + lVar7)] =\n                         (void *)(lVar7 * 0x30 + (long)pluginData);\n                    lVar7 = lVar7 + 1;\n                  } while (lVar9 != lVar7);\n                  sortData[(long)((long)temp + lVar9)] = 0;\n                }\n                if ((dynamic == 0) && (symbolOffset != (undefined8 *)0x0)) {\n                  free(symbolOffset);\n                }\n                if ((*(byte *)((long)bfdObject + 0x4a) & 0x10) != 0) {\n                  symbolOffset = (undefined8 *)*bfdObject;\n                  report_plugin_err = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(uVar6);\n                }\n                symbolSize = (undefined8 *)(ulong)noSortFlag._4_4_;\n                sortDynamicFlag = dynamic != 0;\n                puVar11 = (undefined8 *)(ulong)sortDynamicFlag;\n                puVar8 = sortData;\n                symbolData = sortData;\n                displayFormat = (undefined8 *)(**(code **)(bfdObject[1] + 0x208))(bfdObject);\n                if (displayFormat != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                puVar11 = (undefined8 *)((long)puVar11 * (long)symbolCount + (long)temp);\n                symbolOffset = temp;\n                while( true ) {\n                  if (puVar11 <= symbolOffset) goto LAB_00104c75;\n                  puVar8 = displayFormat;\n                  lVar9 = (**(code **)(bfdObject[1] + 0x270))(bfdObject,symbolSize,symbolOffset);\n                  if (lVar9 == 0) break;\n                  symbolOffset = (undefined8 *)((long)symbolOffset + (long)symbolCount);\n                  print_symbol(bfdObject,lVar9,0,displayFormatData);\n                }\n                bfd_fatal(*bfdObject,0);\n              }\n              bfd_fatal(*bfdObject);\n              temp = bfdObject;\n              symbolArray = displayFormat;\nLAB_00102eb0:\n              bfd_fatal(*puVar11);\nLAB_00102eb9:\n              bfd_fatal(*temp);\nLAB_00102ec2:\n              puVar11 = (undefined8 *)0x0;\n              __ptr = symbolOffset;\n              in_R8 = symbolCount;\n              puVar13 = puVar8;\n              bfdObject = in_R9;\n              symbolArrayCopy = symbolArray;\nLAB_00104e35:\n              while (in_R9 = puVar13, __ptr < symbolSize) {\n                symbolOffset = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (symbolOffset < symbolSize) {\n                  puVar8 = bfdObject;\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  puVar10 = (undefined8 *)(**(code **)(temp[1] + 0x270))();\n                  if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = puVar14;\n                    in_R8 = puVar13;\n                    temp = (undefined8 *)*temp;\n                    puVar10 = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    puVar8 = (undefined8 *)puVar11[4];\n                    if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  lVar9 = puVar11[2];\nLAB_00102ee7:\n                  if (puVar8 == (undefined8 *)puVar10[4]) {\n                    lVar9 = puVar10[2] - lVar9;\n                    puVar13 = bfdObject;\n                    puVar14 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  lVar9 = puVar8[8] - lVar9;\n                  puVar13 = bfdObject;\n                  puVar14 = __ptr;\n                }\n                else {\n                  puVar8 = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    lVar9 = puVar11[2];\n                    puVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  puVar13 = bfdObject;\n                  puVar14 = __ptr;\n                  if (*(int *)(temp[1] + 8) == 5) {\n                    lVar9 = puVar11[7];\n                  }\n                  else {\n                    lVar9 = puVar11[2];\n                    if ((*(byte *)((long)puVar8 + 0x25) & 0x10) == 0) {\n                      if (symbolOffset < symbolSize) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                puVar11 = puVar10;\n                __ptr = symbolOffset;\n                bfdObject = in_R9;\n                if (lVar9 != 0) {\n                  *symbolArray = puVar14;\n                  symbolArray[1] = lVar9;\n                  symbolArray = symbolArray + 2;\n                }\n              }\n              puVar11 = (undefined8 *)((long)symbolArray - (long)symbolArrayCopy >> 4);\n              qsort(symbolArrayCopy,(size_t)puVar11,0x10,size_forward2);\n              lVar9 = temp[1];\n              symbolOffset = __ptr;\n              bfdObject = temp;\n              __ptr = symbolArrayCopy;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n        symbolArrayCopy = puVar8;\n        if (iVar4 == 0) {\n          if (report_plugin_err != '\\0') {\n            symbolArrayCopy = (undefined8 *)*bfdObject;\n            report_plugin_err = '\\0';\n            uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(uVar6,symbolArrayCopy);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          uVar5 = (*(uint *)(puVar8 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(puVar8 + 3) & 0x800082) == 0) && (puVar8[4] != 0x10c2a8)) &&\n           ((*(byte *)(puVar8[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprint_debug_symbols_00104d5b:\n          if ((puVar8[4] != 0x10c2a8) && (puVar8[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(puVar8 + 3) & 4) != 0);\n      if (sort_by_size != 0) goto print_debug_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        cVar3 = (**(code **)(bfdObject[1] + 0x230))(bfdObject);\n        if (cVar3 != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (puVar8[4] == 0x10c2a8);\nLAB_00104cba:\n    cVar3 = (**(code **)(bfdObject[1] + 0x230))(bfdObject);\n    if (cVar3 != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (symbolOffset != symbolAddress) {\n      if (symbolSize == (undefined8 *)0x8) {\n        *symbolOffset = *symbolAddress;\n        reverseAndDisplaySymbols_001049c0();\n        return;\n      }\n      for (; symbolSize != (undefined8 *)0x0; symbolSize = (undefined8 *)((long)symbolSize + -1)) {\n        *(undefined *)symbolOffset = *(undefined *)symbolAddress;\n        symbolAddress = (undefined8 *)((long)symbolAddress + (ulong)bVar17 * -2 + 1);\n        symbolOffset = (undefined8 *)((long)symbolOffset + (ulong)bVar17 * -2 + 1);\n      }\n      reverseAndDisplaySymbols_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  symbolArray = (undefined8 *)((long)symbolCount * (long)symbolSize);\n  symbolCount = (undefined8 *)((long)symbolData + (long)symbolArray);\n  symbolOffset = symbolData;\n  temp = bfdObject;\n  if (symbolData < symbolCount) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  dynamicCount = (ulong)sortDynamicFlag;\n  symbolAddress = symbolData;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "reverse_and_display_symbols_001049c0"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "display_symbol_information_00103ca0",
                "param_1": "file",
                "param_2": "exitCode",
                "lVar1": "programName",
                "iVar2": "length",
                "iVar3": "result",
                "pcVar4": "text",
                "lVar5": "index",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "target",
                "ppcVar8": "demangler",
                "pcVar9": "delimiter",
                "local_3c": "counter"
            },
            "code": "\nvoid displaySymbolInformation_00103ca0(FILE *file,int exitCode)\n\n{\n  long programName;\n  int length;\n  int result;\n  char *text;\n  long index;\n  size_t stringLength;\n  long *targetList;\n  long *target;\n  char **demangler;\n  char *delimiter;\n  uint counter;\n  \n  programName = program_name;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,text,programName);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    programName = 1;\n    do {\n      index = programName;\n      programName = index + 1;\n    } while (text[index] == ' ');\n    counter = (uint)index;\n  }\n  else {\n    counter = 0;\n  }\n  length = fprintf(file,\"%s\",text);\n  delimiter = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    stringLength = strlen(*demangler);\n    if (0x4a < (long)length + stringLength) {\n      fprintf(file,\"%.1s\\n\",delimiter);\n      delimiter = \"\";\n      length = fprintf(file,\"%.*s\",(ulong)counter,text);\n    }\n    result = fprintf(file,\"%s\\\"%s\\\"\",delimiter,*demangler);\n    length = length + result;\n    delimiter = \", \";\n  }\n  fputc(10,file);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(file,text);\n  programName = program_name;\n  if (program_name == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,text,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    programName = *target;\n    target = target + 1;\n    if (programName == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "free",
                "fputc",
                "exit",
                "bfd_target_list",
                "fseek",
                "usage.cold",
                "fprintf",
                "strlen",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_symbol_information_00103ca0"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "print_debug_symbols_00104d5b",
                "pcVar1": "symbolName",
                "pcVar2": "printSymbolFunc",
                "cVar3": "continueLoop",
                "iVar4": "strcmpResult",
                "uVar5": "isSymbolTypeA",
                "uVar6": "translation",
                "puVar7": "sortX",
                "lVar8": "index",
                "lVar9": "symbolIndex",
                "in_RCX": "symbol",
                "unaff_RBX": "sortedSymbols",
                "unaff_RBP": "fileDescriptor",
                "__ptr": "temporaryPtr",
                "puVar10": "functionResult",
                "param_7": "printOptions",
                "param_8": "sortedSymbols2",
                "param_9": "originalSymbols",
                "param_13": "symbolDataArray",
                "param_14": "temporarySymbols"
            },
            "code": "\nvoid printDebugSymbols_00104d5b(void)\n\n{\n  char *symbolName;\n  code *printSymbolFunc;\n  char continueLoop;\n  int strcmpResult;\n  uint isSymbolTypeA;\n  undefined8 translation;\n  undefined8 *sortX;\n  long index;\n  long symbolIndex;\n  undefined8 *functionResult;\n  undefined8 *symbol;\n  undefined8 *sortedSymbols;\n  undefined8 *temporaryPtr;\n  undefined8 *puVar11;\n  undefined8 *fileDescriptor;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *unaff_R12;\n  undefined8 *unaff_R13;\n  undefined8 *unaff_R14;\n  undefined8 *unaff_R15;\n  bool bVar16;\n  byte bVar17;\n  ulong unaff_retaddr;\n  ulong uVar18;\n  undefined8 printOptions;\n  undefined8 *sortedSymbols2;\n  undefined8 *originalSymbols;\n  undefined8 in_stack_00000038;\n  void *symbolDataArray;\n  undefined8 *temporarySymbols;\n  \n  bVar17 = 0;\n  do {\n    if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n      puVar15 = unaff_R12;\n      puVar12 = fileDescriptor;\n      if (unaff_R12 <= unaff_R13) goto LAB_00104b15;\nLAB_001049cf:\n      symbol = (undefined8 *)\n               (**(code **)(fileDescriptor[1] + 0x270))\n                         (fileDescriptor,unaff_retaddr & 0xffffffff,unaff_R13,unaff_R15);\n      puVar11 = fileDescriptor;\n      puVar12 = unaff_R13;\n      puVar15 = unaff_R15;\n      if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n      symbolName = (char *)symbol[1];\n      if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n        if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        isSymbolTypeA = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n        if (isSymbolTypeA != 0) goto LAB_00104a2d;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (long)unaff_R14);\n        puVar15 = unaff_R12;\n        puVar12 = fileDescriptor;\n        if (unaff_R12 <= unaff_R13) {\nLAB_00104b15:\n          sortedSymbols = (undefined8 *)((long)sortedSymbols - (long)originalSymbols);\n          if (unaff_R14 == (undefined8 *)0x8) {\n            symbolIndex = puVar12[1];\n            puVar11 = (undefined8 *)((long)sortedSymbols + 7);\n            if (-1 < (long)sortedSymbols) {\n              puVar11 = sortedSymbols;\n            }\n            in_R8 = (undefined8 *)(ulong)no_sort;\n            printSymbolFunc = *(code **)(symbolIndex + 0x208);\n            puVar11 = (undefined8 *)((long)puVar11 >> 3);\n          }\n          else {\n            puVar11 = (undefined8 *)((long)sortedSymbols / (long)unaff_R14);\n            symbolIndex = puVar12[1];\n            printSymbolFunc = *(code **)(symbolIndex + 0x208);\n          }\n          fileDescriptor = puVar12;\n          if (no_sort == 0) {\n            sort_dynamic = dynamic != 0;\n            sort_bfd = puVar12;\n            sort_x = (undefined8 *)(*printSymbolFunc)(puVar12);\n            sort_y = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n            sortedSymbols = temporarySymbols;\n            if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n              bfd_fatal(*puVar12);\n              temporaryPtr = unaff_R15;\n              goto LAB_00102d8e;\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (sort_by_size != 0) {\n              uVar18 = (ulong)(dynamic != 0);\n              qsort(temporarySymbols,(size_t)puVar11,(size_t)unaff_R12,size_forward1);\n              puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n              puVar13 = sort_x;\n              fileDescriptor = sort_y;\n              unaff_R14 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)sortedSymbols);\n              symbol = sort_x;\n              in_R9 = sort_y;\n              if (unaff_R14 <= sortedSymbols) goto LAB_00102ec2;\n              puVar11 = (undefined8 *)\n                        (**(code **)(puVar12[1] + 0x270))(puVar12,uVar18 & 0xffffffff,sortedSymbols);\n              temporaryPtr = sortedSymbols;\n              in_R8 = unaff_R12;\n              sortedSymbols2 = puVar15;\n              if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(temporarySymbols,(size_t)puVar11,(size_t)unaff_R12,\n                  *(__compar_fn_t *)\n                   (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n            symbolIndex = puVar12[1];\n          }\n          temporaryPtr = (undefined8 *)0x0;\n          do {\n            puVar12 = temporarySymbols;\n            sortX = (undefined8 *)(ulong)sort_by_size;\n            unaff_R14 = (undefined8 *)(ulong)(dynamic != 0);\n            if (sort_by_size != 0) {\n              puVar15 = (undefined8 *)(**(code **)(symbolIndex + 0x208))(fileDescriptor);\n              if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              sortedSymbols = temporaryPtr + (long)puVar11 * 2;\n              puVar11 = temporaryPtr;\n              do {\n                if (sortedSymbols <= puVar11) {\nLAB_00104c75:\n                  if (symbolDataArray != (void *)0x0) {\n                    free(symbolDataArray);\n                    free(temporarySymbols);\n                    free(temporaryPtr);\n                    return;\n                  }\n                  free(temporarySymbols);\n                  free(temporaryPtr);\n                  return;\n                }\n                sortX = puVar15;\n                symbolIndex = (**(code **)(fileDescriptor[1] + 0x270))(fileDescriptor,unaff_R14,*puVar11);\n                if (symbolIndex == 0) {\n                  bfd_fatal(*fileDescriptor,0);\nLAB_00102ed2:\n                  puVar12 = (undefined8 *)*fileDescriptor;\n                  bfd_fatal();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                puVar12 = puVar11 + 1;\n                puVar11 = puVar11 + 2;\n                print_symbol(fileDescriptor,symbolIndex,*puVar12,printOptions);\n              } while( true );\n            }\n            unaff_R12 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            unaff_R15 = (undefined8 *)(**(code **)(symbolIndex + 0x208))(fileDescriptor);\n            if (unaff_R15 == (undefined8 *)0x0) {\n              bfd_fatal(*fileDescriptor);\n              puVar12 = unaff_R12;\n              if (dynamic == 0) {\n                symbolIndex = (**(code **)(fileDescriptor[1] + 0x350))(fileDescriptor);\n                puVar11 = temporarySymbols;\n                puVar15 = unaff_R12;\n                if (symbolIndex < 1) {\n                  sortX = (undefined8 *)0x0;\n                  sortedSymbols = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  sortedSymbols = (undefined8 *)xmalloc();\n                  sortX = (undefined8 *)(**(code **)(fileDescriptor[1] + 0x358))(fileDescriptor,sortedSymbols);\n                  puVar12 = puVar15;\n                  if ((long)sortX < 0) {\n                    puVar12 = (undefined8 *)*fileDescriptor;\n                    puVar11 = (undefined8 *)bfd_fatal(puVar12,puVar15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                sortX = unaff_R12;\n                sortedSymbols = temporarySymbols;\n                puVar11 = (undefined8 *)0x0;\n                puVar15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = sortedSymbols;\n              symbolIndex = (**(code **)(fileDescriptor[1] + 0x360))(fileDescriptor,puVar15,puVar11,sortX);\n              unaff_R12 = puVar12;\n              if (0 < symbolIndex) {\n                unaff_R12 = (undefined8 *)((long)puVar12 + symbolIndex);\n                temporarySymbols = (undefined8 *)xrealloc(temporarySymbols);\n                index = 0;\n                do {\n                  temporarySymbols[(long)puVar12 + index] = (void *)(index * 0x30 + (long)symbolDataArray);\n                  index = index + 1;\n                } while (symbolIndex != index);\n                temporarySymbols[(long)puVar12 + symbolIndex] = 0;\n              }\n              if ((dynamic == 0) && (sortedSymbols != (undefined8 *)0x0)) {\n                free(sortedSymbols);\n              }\n              if ((*(byte *)((long)fileDescriptor + 0x4a) & 0x10) != 0) {\n                sortedSymbols = (undefined8 *)*fileDescriptor;\n                report_plugin_err = '\\0';\n                translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(translation);\n              }\n              unaff_R14 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              bVar16 = dynamic != 0;\n              puVar11 = (undefined8 *)(ulong)bVar16;\n              symbol = temporarySymbols;\n              originalSymbols = temporarySymbols;\n              unaff_R15 = (undefined8 *)(**(code **)(fileDescriptor[1] + 0x208))(fileDescriptor);\n              if (unaff_R15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              puVar11 = (undefined8 *)((long)puVar11 * (long)unaff_R12 + (long)puVar12);\n              sortedSymbols = puVar12;\n              while( true ) {\n                if (puVar11 <= sortedSymbols) goto LAB_00104c75;\n                symbol = unaff_R15;\n                symbolIndex = (**(code **)(fileDescriptor[1] + 0x270))(fileDescriptor,unaff_R14,sortedSymbols);\n                if (symbolIndex == 0) break;\n                sortedSymbols = (undefined8 *)((long)sortedSymbols + (long)unaff_R12);\n                print_symbol(fileDescriptor,symbolIndex,0,printOptions);\n              }\n              bfd_fatal(*fileDescriptor,0);\n            }\n            bfd_fatal(*fileDescriptor);\n            puVar12 = fileDescriptor;\n            puVar15 = unaff_R15;\nLAB_00102eb0:\n            bfd_fatal(*puVar11);\nLAB_00102eb9:\n            bfd_fatal(*puVar12);\nLAB_00102ec2:\n            puVar11 = (undefined8 *)0x0;\n            temporaryPtr = sortedSymbols;\n            in_R8 = unaff_R12;\n            puVar13 = symbol;\n            fileDescriptor = in_R9;\n            sortedSymbols2 = puVar15;\nLAB_00104e35:\n            while (in_R9 = puVar13, temporaryPtr < unaff_R14) {\n              sortedSymbols = (undefined8 *)((long)temporaryPtr + (long)in_R8);\n              if (sortedSymbols < unaff_R14) {\n                sortX = fileDescriptor;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                functionResult = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                if (functionResult == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  puVar12 = (undefined8 *)*puVar12;\n                  functionResult = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  sortX = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                symbolIndex = puVar11[2];\nLAB_00102ee7:\n                if (sortX == (undefined8 *)functionResult[4]) {\n                  symbolIndex = functionResult[2] - symbolIndex;\n                  puVar13 = fileDescriptor;\n                  puVar14 = temporaryPtr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                symbolIndex = sortX[8] - symbolIndex;\n                puVar13 = fileDescriptor;\n                puVar14 = temporaryPtr;\n              }\n              else {\n                sortX = (undefined8 *)puVar11[4];\n                if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  symbolIndex = puVar11[2];\n                  functionResult = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                functionResult = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = fileDescriptor;\n                puVar14 = temporaryPtr;\n                if (*(int *)(puVar12[1] + 8) == 5) {\n                  symbolIndex = puVar11[7];\n                }\n                else {\n                  symbolIndex = puVar11[2];\n                  if ((*(byte *)((long)sortX + 0x25) & 0x10) == 0) {\n                    if (sortedSymbols < unaff_R14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              puVar11 = functionResult;\n              temporaryPtr = sortedSymbols;\n              fileDescriptor = in_R9;\n              if (symbolIndex != 0) {\n                *puVar15 = puVar14;\n                puVar15[1] = symbolIndex;\n                puVar15 = puVar15 + 2;\n              }\n            }\n            puVar11 = (undefined8 *)((long)puVar15 - (long)sortedSymbols2 >> 4);\n            qsort(sortedSymbols2,(size_t)puVar11,0x10,size_forward2);\n            symbolIndex = puVar12[1];\n            sortedSymbols = temporaryPtr;\n            fileDescriptor = puVar12;\n            temporaryPtr = sortedSymbols2;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      strcmpResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n      sortedSymbols2 = symbol;\n      if (strcmpResult == 0) {\n        if (report_plugin_err != '\\0') {\n          sortedSymbols2 = (undefined8 *)*fileDescriptor;\n          report_plugin_err = '\\0';\n          translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(translation,sortedSymbols2);\n        }\n        goto LAB_00104a03;\n      }\n      if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (external_only == 0) {\n        if (non_weak == 0) goto LAB_00104a2d;\n        isSymbolTypeA = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n         ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((print_debug_syms == 0) && ((*(byte *)(symbol + 3) & 4) != 0));\n  } while (sort_by_size != 0);\n  in_R9 = (undefined8 *)(ulong)defined_only;\n  if (defined_only == 0) {\n    continueLoop = (**(code **)(fileDescriptor[1] + 0x230))(fileDescriptor);\n    if (continueLoop != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (symbol[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    continueLoop = (**(code **)(fileDescriptor[1] + 0x230))(fileDescriptor);\n    if (continueLoop != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (sortedSymbols != unaff_R13) {\n    if (unaff_R14 != (undefined8 *)0x8) {\n      for (; unaff_R14 != (undefined8 *)0x0; unaff_R14 = (undefined8 *)((long)unaff_R14 + -1)) {\n        *(undefined *)sortedSymbols = *(undefined *)unaff_R13;\n        unaff_R13 = (undefined8 *)((long)unaff_R13 + (ulong)bVar17 * -2 + 1);\n        sortedSymbols = (undefined8 *)((long)sortedSymbols + (ulong)bVar17 * -2 + 1);\n      }\n      reverse_and_display_symbols_001049c0();\n      return;\n    }\n    *sortedSymbols = *unaff_R13;\n    reverse_and_display_symbols_001049c0();\n    return;\n  }\n  sortedSymbols = (undefined8 *)((long)sortedSymbols + (long)unaff_R14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)unaff_R12 * (long)unaff_R14);\n  unaff_R12 = (undefined8 *)((long)originalSymbols + (long)puVar15);\n  sortedSymbols = originalSymbols;\n  puVar12 = fileDescriptor;\n  if (originalSymbols < unaff_R12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_retaddr = (ulong)bVar16;\n  unaff_R13 = originalSymbols;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "free",
                "non_fatal",
                "xmalloc",
                "FUN_00104d5b",
                "print_symbol",
                "size_forward2",
                "xrealloc",
                "bfd_fatal",
                "size_forward1",
                "FUN_001049c0",
                "display_rel_file.cold",
                "strcmp",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_debug_symbols_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "unusedParam1",
                "param_10": "unusedParam2",
                "param_11": "unusedParam3",
                "param_12": "unusedParam4",
                "param_13": "unusedParam5",
                "param_14": "unusedParam6",
                "in_AL": "isError",
                "__arg": "args",
                "__format": "formatString",
                "local_d8": "errorCodePtr",
                "local_d4": "stackSize",
                "local_d0": "stackPtr",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "unusedVar1",
                "local_a8": "unusedVar2",
                "local_a0": "unusedVar3",
                "local_98": "unusedVar4",
                "local_90": "unusedVar5",
                "local_88": "errorCodeCopy",
                "local_78": "param2Copy",
                "local_68": "param3Copy",
                "local_58": "param4Copy",
                "local_48": "param5Copy",
                "local_38": "param6Copy",
                "local_28": "param7Copy",
                "local_18": "param8Copy",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid print_error_message_00106300(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 unusedParam1,undefined8 unusedParam2,undefined8 unusedParam3,undefined8 unusedParam4,\n                 undefined8 unusedParam5,undefined8 unusedParam6)\n\n{\n  char isError;\n  undefined4 *args;\n  char *formatString;\n  undefined4 errorCodePtr;\n  undefined4 stackSize;\n  undefined *stackPtr;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 unusedVar1;\n  undefined8 unusedVar2;\n  undefined8 unusedVar3;\n  undefined8 unusedVar4;\n  undefined8 unusedVar5;\n  undefined4 errorCodeCopy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  args = &errorCodePtr;\n  if (isError != '\\0') {\n    errorCodeCopy = errorCode;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  stackPtr = &stack0x00000008;\n  errorCodePtr = 8;\n  buffer = localBuffer;\n  stackSize = 0x30;\n  unusedVar1 = unusedParam2;\n  unusedVar2 = unusedParam3;\n  unusedVar3 = unusedParam4;\n  unusedVar4 = unusedParam5;\n  unusedVar5 = unusedParam6;\n  report();\n  formatString = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",programName);\n  vfprintf(_stderr,formatString,args);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "print_value.constprop.0.cold",
                "print_symbol_info_bsd",
                "main",
                "set_output_format",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_filename_00102f7b",
                "param_1": "filename",
                "filename_per_file": "is_filename_per_file",
                "filename_per_symbol": "is_filename_per_symbol"
            },
            "code": "\nvoid print_filename_00102f7b(undefined8 filename)\n\n{\n  if ((is_filename_per_file != 0) && (is_filename_per_symbol == 0)) {\n    printf(\"%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_bfd_error_message_00106540",
                "param_1": "errorMessage",
                "iVar1": "bfdError",
                "uVar2": "errorString",
                "in_R10": "unusedVar",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printBFDErrorMessage_00106540(long errorMessage)\n\n{\n  int bfdError;\n  undefined8 errorString;\n  undefined8 unusedVar;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(bfdError);\n  }\n  fflush(standardOutput);\n  if (errorMessage != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",programName,errorMessage,errorString,unusedVar);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",programName,errorString,unusedVar);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_nonfatal.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "bfd_fatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_00106540"
        },
        "FUN_0010c160": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c160",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010c160"
        }
    },
    "used_tokens": 87928,
    "layers": [
        [
            "FUN_001055a0",
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00105500",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00102000",
            "FUN_00103573",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00104370",
            "FUN_00102475",
            "FUN_00105110",
            "FUN_00103a66",
            "FUN_001064b0",
            "FUN_00102739",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0",
            "FUN_00104740"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": []
}