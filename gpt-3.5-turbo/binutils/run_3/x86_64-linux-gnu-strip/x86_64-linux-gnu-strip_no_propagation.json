{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "write_value_to_memory_00113dfe",
                "param_1": "size",
                "param_2": "value",
                "lVar1": "ptr"
            },
            "code": "\nvoid writeValueToMemory_00113dfe(undefined4 size,undefined value)\n\n{\n  long ptr;\n  \n  ptr = FUN_00112904(3,size);\n  if (ptr != 0) {\n    *(undefined *)(ptr + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "write_value_to_memory_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_to_global_0010ab4d",
                "param_1": "globalData",
                "param_2": "inputString",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "globalPtr",
                "lVar2": "localVar1",
                "auVar3": "result1",
                "sVar4": "inputLen",
                "pcVar5": "globalStrPtr",
                "sVar6": "globalStrLen",
                "auVar7": "result2"
            },
            "code": "\nundefined  [16] appendStringToGlobal_0010ab4d(long globalData,char *inputString,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  ulong globalPtr;\n  long localVar1;\n  undefined result1 [16];\n  size_t inputLen;\n  char *globalStrPtr;\n  size_t globalStrLen;\n  undefined result2 [16];\n  \n  globalPtr = *(ulong *)(globalData + 0x60);\n  if ((globalPtr != 0) && (*(long *)(globalPtr + 0x20) != 0)) {\n    globalStrPtr = *(char **)(globalPtr + 0x30);\n    inputLen = strlen(inputString);\n    if (globalStrPtr == (char *)0x0) {\n      globalStrPtr = (char *)xmalloc(inputLen + 3);\n      *globalStrPtr = '\\0';\n    }\n    else {\n      globalStrLen = strlen(globalStrPtr);\n      globalStrPtr = (char *)xrealloc(globalStrPtr,inputLen + 4 + globalStrLen);\n    }\n    inputLen = strlen(globalStrPtr);\n    sprintf(globalStrPtr + inputLen,\"%s::\",inputString);\n    localVar1 = *(long *)(globalData + 0x60);\n    *(char **)(localVar1 + 0x30) = globalStrPtr;\n    result2._1_7_ = (undefined7)((ulong)localVar1 >> 8);\n    result2[0] = 1;\n    result2._8_8_ = unusedParam2;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = globalPtr;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "xrealloc",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_string_to_global_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_debug_info_0010c218",
                "param_1": "file_data",
                "param_2": "name_type",
                "param_3": "current_file",
                "uVar1": "error_message",
                "lVar2": "debug_info",
                "pauVar3": "debug_name_ptr",
                "lVar4": "file_ptr"
            },
            "code": "\n\n\nlong process_debug_info_0010c218(long file_data,long name_type,long current_file)\n\n{\n  undefined8 error_message;\n  long debug_info;\n  undefined (*debug_name_ptr) [16];\n  long file_ptr;\n  \n  if ((name_type != 0) && (current_file != 0)) {\n    if ((*(long *)(file_data + 8) == 0) || (*(long *)(file_data + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_info = FUN_00112904(0x16,0);\n      if (debug_info != 0) {\n        debug_name_ptr = (undefined (*) [16])xmalloc(0x10);\n        file_ptr = *(long *)(file_data + 0x10);\n        *debug_name_ptr = ZEXT816(0);\n        *(long *)(*debug_name_ptr + 8) = current_file;\n        *(undefined (**) [16])(debug_info + 0x10) = debug_name_ptr;\n        file_ptr = FUN_00112925(file_ptr + 0x10,name_type,0,3);\n        if (file_ptr != 0) {\n          *(long *)(file_ptr + 0x20) = debug_info;\n          *(long *)*debug_name_ptr = file_ptr;\n          return debug_info;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = FUN_00113f20();\n  DAT_00127a10 = FUN_00113f20();\n  DAT_00127a28 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_00127a00 = FUN_00113f20();\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278e8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = FUN_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    FUN_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = FUN_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = FUN_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    FUN_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "htab_find_slot",
                "FUN_00113f50",
                "getopt_long",
                "FUN_0011a390",
                "FUN_00108c86",
                "mkstemp",
                "FUN_00108d9a",
                "strncasecmp",
                "fseek",
                "FUN_00114460",
                "ftell",
                "strcmp",
                "FUN_00108898",
                "FUN_00119dd0",
                "dup",
                "FUN_00108a2a",
                "FUN_00114c20",
                "getc",
                "FUN_00114190",
                "xmalloc",
                "unlink_if_ordinary",
                "htab_create_alloc",
                "xrealloc",
                "strtol",
                "bfd_errmsg",
                "textdomain",
                "fopen",
                "strlen",
                "strcpy",
                "FUN_00114cf0",
                "bfd_scan_arch",
                "close",
                "FUN_0011a480",
                "FUN_00114690",
                "FUN_00113fe0",
                "memcpy",
                "free",
                "dcgettext",
                "FUN_00113fb0",
                "FUN_00119940",
                "xstrdup",
                "filename_cmp",
                "xcalloc",
                "strerror",
                "FUN_001126c0",
                "bfd_init",
                "FUN_001054af",
                "fread",
                "FUN_00108800",
                "fprintf",
                "FUN_00119970",
                "bfd_set_default_target",
                "strncpy",
                "bfd_get_error",
                "htab_elements",
                "FUN_001199d0",
                "FUN_00114d60",
                "strcasecmp",
                "FUN_00108916",
                "bfd_set_error_program_name",
                "malloc",
                "stat",
                "strchr",
                "FUN_00119ed0",
                "FUN_00115970",
                "strtoul",
                "FUN_00114c80",
                "memmove",
                "ferror",
                "free",
                "__errno_location",
                "fclose",
                "setlocale",
                "bindtextdomain",
                "xmalloc_set_program_name",
                "FUN_00113f20",
                "xexit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "param_1": "block",
                "param_2": "start_address",
                "param_3": "unknown_param",
                "param_4": "unknown_param2",
                "puVar1": "next_block_ptr",
                "uVar2": "result",
                "puVar3": "new_block",
                "puVar4": "current_block_ptr",
                "lVar5": "current_block",
                "puVar6": "previous_block_ptr",
                "puVar7": "temp_ptr",
                "bVar8": "counter",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long block,undefined8 start_address,undefined8 unknown_param,undefined8 unknown_param2)\n\n{\n  undefined8 *next_block_ptr;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *current_block_ptr;\n  long current_block;\n  undefined8 *previous_block_ptr;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  if ((*(long *)(block + 8) == 0) || (*(long *)(block + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_ptr = new_block;\n    for (current_block = 0xc; current_block != 0; current_block = current_block + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n    }\n    current_block = *(long *)(block + 0x20);\n    *(undefined8 *)(new_block + 6) = start_address;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = current_block;\n    next_block_ptr = *(undefined8 **)(current_block + 0x10);\n    previous_block_ptr = (undefined8 *)(current_block + 0x10);\n    while (current_block_ptr = next_block_ptr, current_block_ptr != (undefined8 *)0x0) {\n      previous_block_ptr = current_block_ptr;\n      next_block_ptr = (undefined8 *)*current_block_ptr;\n    }\n    *previous_block_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block + 0x20) = new_block;\n  }\n  return_value._8_8_ = unknown_param2;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e6a8",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "construct_warning_message_0010ba08",
                "param_1": "args",
                "param_2": "fieldName",
                "param_3": "fieldValue",
                "param_4": "fieldSize",
                "param_5": "fieldFlag",
                "cVar1": "fieldFlagCheck",
                "iVar2": "fieldSizeMultiplier",
                "lVar3": "paramOffset",
                "__s": "prefix",
                "sVar4": "prefixLength",
                "sVar5": "fieldNameLength",
                "sVar6": "fieldValueLength",
                "__s_00": "message",
                "uVar7": "warning",
                "uVar8": "result",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\nconstructWarningMessage_0010ba08(undefined8 *args,char *fieldName,undefined8 fieldValue,ulong fieldSize,int fieldFlag)\n\n{\n  char fieldFlagCheck;\n  int fieldSizeMultiplier;\n  long paramOffset;\n  char *prefix;\n  size_t prefixLength;\n  size_t fieldNameLength;\n  size_t fieldValueLength;\n  char *message;\n  undefined8 warning;\n  undefined8 result;\n  char *flagString;\n  \n  fieldFlagCheck = *(char *)(args[0xc] + 0x1c);\n  fieldSizeMultiplier = *(int *)(args[0xc] + 0x18);\n  prefix = (char *)FUN_00109b2f();\n  if (*(char **)(args[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    prefixLength = strlen(*(char **)(args[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    fieldValueLength = strlen(prefix);\n    message = (char *)xmalloc(prefixLength + 0x32 + fieldNameLength + fieldValueLength);\n    if (fieldFlag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((fieldFlag != 2) && (flagString = \"\", fieldFlag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(fieldSizeMultiplier * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*args;\n      warning = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warning,result,fieldName);\n    }\n    sprintf(message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(args[0xc] + 0x20),fieldName,flagString,prefix,\n            fieldValue,fieldSize);\n    free(*(void **)(args[0xc] + 0x20));\n    paramOffset = args[0xc];\n    *(char **)(paramOffset + 0x20) = message;\n    if (fieldFlagCheck != '\\0') {\n      *(undefined *)(paramOffset + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)paramOffset >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "generate_log_entry_0010aa53",
                "param_1": "binaryOffset",
                "param_2": "logData",
                "param_3": "logType",
                "param_4": "logSize",
                "cVar1": "value",
                "__s": "timestamp",
                "sVar5": "timestampLength",
                "pcVar6": "logEntry",
                "cVar3": "logValue",
                "lVar2": "binaryAddress",
                "uVar8": "success",
                "uVar9": "iteration",
                "uVar10": "lastIndex",
                "uVar4": "currentIndex",
                "lVar7": "updatedAddress"
            },
            "code": "\nundefined8 generateLogEntry_0010aa53(long binaryOffset,undefined8 logData,char logType,int logSize)\n\n{\n  char value;\n  long binaryAddress;\n  char logValue;\n  uint currentIndex;\n  char *timestamp;\n  size_t timestampLength;\n  char *logEntry;\n  long updatedAddress;\n  undefined8 success;\n  ulong iteration;\n  ulong lastIndex;\n  \n  value = *(char *)(*(long *)(binaryOffset + 0x60) + 0x1c);\n  timestamp = (char *)FUN_00109b2f();\n  timestampLength = strlen(timestamp);\n  logEntry = (char *)xmalloc(timestampLength + 0x19);\n  *logEntry = logType + '0';\n  if (logSize == 1) {\n    logValue = '1';\n  }\n  else {\n    logValue = '0';\n    if ((logSize != 2) && (logValue = '2', logSize != 0)) {\n                    \n      abort();\n    }\n  }\n  logEntry[1] = logValue;\n  sprintf(logEntry + 2,\"%ld,%s;\",logData);\n  free(timestamp);\n  binaryAddress = *(long *)(binaryOffset + 0x60);\n  success = 0;\n  if ((binaryAddress != 0) && (*(long *)(binaryAddress + 0x20) != 0)) {\n    binaryAddress = *(long *)(binaryAddress + 0x28);\n    lastIndex = 0;\n    if (binaryAddress != 0) {\n      currentIndex = 0;\n      do {\n        iteration = (ulong)currentIndex;\n        lastIndex = (ulong)currentIndex;\n        currentIndex = currentIndex + 1;\n      } while (*(long *)(binaryAddress + iteration * 8) != 0);\n    }\n    updatedAddress = xrealloc(binaryAddress,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(updatedAddress + lastIndex * 8) = logEntry;\n    *(undefined8 *)(updatedAddress + (ulong)((int)lastIndex + 1) * 8) = 0;\n    binaryAddress = *(long *)(binaryOffset + 0x60);\n    *(long *)(binaryAddress + 0x28) = updatedAddress;\n    if (value != '\\0') {\n      *(undefined *)(binaryAddress + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_log_entry_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "FUNC_0011173a"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined FUNC_0011173a(undefined8 param_1,long *param_2,int param_3,int param_4,ulong param_5,\n                      char *param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *__ptr;\n  char cVar3;\n  undefined uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long *plVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  long lVar11;\n  long lVar12;\n  long **pplVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  uint uVar17;\n  long **pplVar18;\n  double dVar19;\n  char *local_48;\n  long **local_40 [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    cVar3 = FUN_0010bbd3(param_1);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    puVar6 = (undefined8 *)xmalloc(8);\n    param_2[0x11] = (long)puVar6;\n    *puVar6 = 0;\n    param_2[4] = 0;\n  }\n  strlen(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    uVar4 = FUN_00108f08(param_1,param_6);\n    return uVar4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      iVar5 = strcmp(param_6,\"gcc2_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      iVar5 = strcmp(param_6,\"gcc_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 != '\\0') {\n            cVar3 = FUN_0010be1a(param_1,param_5);\n            if (cVar3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_2 + 0xc) != '\\0') {\n          uVar14 = param_5;\n          if (((*param_6 != '\\0') && (uVar15 = param_2[0xd], uVar15 != 0xffffffffffffffff)) &&\n             (uVar14 = uVar15, param_5 < uVar15)) {\n            uVar14 = param_5;\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          cVar3 = FUN_0010be1a(param_1,uVar14);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        __ptr = (void *)param_2[4];\n        if (__ptr == (void *)0x0) {\n          lVar12 = xstrdup(param_6);\n          param_2[4] = lVar12;\n        }\n        else {\n          if (*param_6 == '/') {\n            lVar12 = xstrdup(param_6);\n          }\n          else {\n            lVar12 = concat(__ptr,param_6,0);\n          }\n          param_2[4] = lVar12;\n          free(__ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          lVar12 = 0;\n          if (*(char *)(param_2 + 0xc) != '\\0') {\n            lVar12 = param_2[7];\n          }\n          uVar4 = FUN_0010bf86(param_1,(long)param_4,lVar12 + param_5);\n          return uVar4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        plVar7 = (long *)xmalloc();\n        iVar5 = *(int *)(param_2 + 0x10);\n        lVar10 = param_2[10];\n        lVar11 = param_2[0xb];\n        plVar7[5] = 0;\n        lVar12 = param_2[0x11];\n        *(int *)(plVar7 + 4) = iVar5;\n        uVar17 = iVar5 + 1;\n        *(uint *)(param_2 + 0x10) = uVar17;\n        *plVar7 = lVar11;\n        plVar7[1] = lVar10;\n        plVar7[2] = (long)param_6;\n        plVar7[3] = param_5;\n        param_2[10] = (long)plVar7;\n        param_2[0xb] = (long)plVar7;\n        lVar12 = xrealloc(lVar12,(ulong)uVar17 << 3);\n        uVar17 = *(uint *)(plVar7 + 4);\n        param_2[0x11] = lVar12;\n        *(undefined8 *)(lVar12 + (ulong)uVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pcVar8 = strchr(param_6,0x3a);\n    if ((pcVar8 != (char *)0x0) && ((pcVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_2 + 0xc) != '\\0') {\n        uVar14 = param_2[0xd];\n        uVar15 = param_5;\n        if ((uVar14 != 0xffffffffffffffff) && (uVar15 = uVar14, param_5 < uVar14)) {\n          uVar15 = param_5;\n        }\n        cVar3 = FUN_0010c1c6(param_1,param_2);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        cVar3 = FUN_0010be1a(param_1,uVar15);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_48 = strchr(param_6,0x3a);\n    if (local_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_48[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      cVar3 = param_6[1];\n      pcVar16 = \"eh_throw\";\n      if (cVar3 != 'e') {\n        if (cVar3 < 'f') {\n          if ((cVar3 != 'X') && (cVar3 != '_')) {\nLAB_00111d1a:\n            uVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(param_6,uVar9);\n          }\n        }\n        else {\n          pcVar16 = \"this\";\n          if (cVar3 == 't') goto LAB_00111d62;\n          if (cVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pcVar16 = (char *)0x0;\n      if ((param_6 != local_48) && ((*param_6 != ' ' || (local_48 != param_6 + 1)))) {\n        pcVar16 = (char *)FUN_00109a0b(param_6,(int)local_48 - (int)param_6);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_48[1];\n    pcVar8 = local_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    pcVar8 = local_48 + 2;\n    cVar3 = local_48[1];\n    switch(cVar3) {\n    case 'C':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      pcVar8 = \"debug_record_label: not implemented\";\n      if (lVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      cVar3 = FUN_0010bc80(param_1,pcVar16,lVar12,cVar3 == 'F',param_5);\n      if (cVar3 != '\\0') {\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) goto LAB_0011208f;\n      lVar10 = param_2[3];\n      plVar7 = (long *)param_2[2];\n      cVar3 = *(char *)(*(long *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_48 = pcVar8;\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      break;\n    case 'S':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      cVar3 = local_48[2];\n      if (cVar3 == 't') {\n        pcVar8 = local_48 + 3;\n      }\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(param_2 + 0x35);\n      plVar7 = (long *)FUN_0010c6be(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] != (long **)0x0) {\n        *local_40[0] = plVar7;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      pplVar13 = (long **)(param_2 + 0x34);\n      pplVar18 = (long **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pcVar8 = local_48 + 3;\n      if (((local_48[2] != '\\0') && (pcVar8 = local_48 + 4, local_48[3] == 'n')) &&\n         (pcVar8 = local_48 + 5, pcVar16 = local_48 + 4, local_48 = pcVar8, *pcVar16 == '0')) {\n        for (; pcVar8 = local_48, *local_48 != '\\0'; local_48 = local_48 + 1) {\n          if (*local_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      break;\n    case 'c':\n      if (local_48[2] == '=') {\n        pcVar8 = local_48 + 4;\n        cVar3 = local_48[3];\n        local_48 = pcVar8;\n        if (cVar3 == 'i') {\n          lVar12 = strtol(pcVar8,(char **)0x0,10);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar10 = FUN_00112996(param_1,pcVar16,4);\n          if (lVar10 != 0) {\n            *(long *)(lVar10 + 0x20) = (long)(int)lVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'r') {\n          dVar19 = strtod(pcVar8,(char **)0x0);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar12 = FUN_00112996(param_1,pcVar16,5);\n          if (lVar12 != 0) {\n            *(double *)(lVar12 + 0x20) = dVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'e') {\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n          if (lVar12 == 0) {\n            return 0;\n          }\n          pcVar8 = local_48;\n          if (*local_48 == ',') {\n            lVar10 = strtol(local_48,(char **)0x0,10);\n            if (pcVar16 == (char *)0x0) {\n              return 0;\n            }\n            lVar11 = FUN_00112996(param_1,pcVar16,6);\n            if (lVar11 != 0) {\n              plVar7 = (long *)xmalloc(0x10);\n              *plVar7 = lVar12;\n              plVar7[1] = (long)(int)lVar10;\n              *(long **)(lVar11 + 0x20) = plVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_48[2] == 'F') {\n        local_48 = local_48 + 3;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        if (lVar12 == 0) {\n          return 0;\n        }\n        uVar9 = FUN_00113ce0(lVar12,0,0);\n        lVar12 = FUN_00113d3a(uVar9);\n      }\n      else {\n        local_48 = pcVar8;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      }\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 1;\n      break;\n    case 'r':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 5;\nLAB_001123e8:\n      cVar3 = FUN_0010c139(param_1,param_2,pcVar16,lVar12,uVar9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      plVar7 = (long *)FUN_0010c218(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    case 'v':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n    }\n    cVar3 = FUN_0010bd62(param_1,pcVar16,lVar12,uVar9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    cVar3 = FUN_0010c1c6(param_1,param_2);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    cVar3 = FUN_0010bf20(param_1,param_2[7] + param_2[6] + param_5);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int *)param_2 = *(int *)param_2 + -1;\n    pcVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        pcVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pcVar8 = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      uVar9 = dcgettext(0,pcVar8,5);\n      fprintf(_stderr,\"%s\\n\",uVar9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        iVar5 = *(int *)(param_2 + 0x10);\n        *(uint *)(param_2 + 0x10) = iVar5 + 1U;\n        lVar12 = xrealloc(param_2[0x11],(ulong)(iVar5 + 1U) << 3);\n        puVar6 = (undefined8 *)param_2[0xb];\n        param_2[0x11] = lVar12;\n        while( true ) {\n          if (puVar6 == (undefined8 *)0x0) {\n            uVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(param_6,uVar9);\n            *(undefined8 *)(param_2[0x11] + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == puVar6[3]) && (iVar5 = strcmp((char *)puVar6[2],param_6), iVar5 == 0))\n          break;\n          puVar6 = (undefined8 *)*puVar6;\n        }\n        *(undefined8 *)(lVar12 + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = puVar6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        lVar12 = param_2[10];\n        if (lVar12 != 0) {\n          lVar10 = *(long *)(lVar12 + 8);\n          uVar17 = *(uint *)(lVar12 + 0x20);\n          param_2[10] = lVar10;\n          if ((uVar17 < *(uint *)(param_2 + 0x10)) &&\n             (*(undefined8 *)(lVar12 + 0x28) = *(undefined8 *)(param_2[0x11] + (ulong)uVar17 * 8),\n             lVar10 != 0)) {\n            param_6 = *(char **)(lVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_2 + 0xc) != '\\0') {\n      cVar3 = FUN_0010be88(param_1,param_2[7] + param_2[6] + param_5);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      cVar3 = FUN_0010c1c6(param_1,param_2);\n      if (cVar3 != '\\0') {\n        *(int *)(param_2 + 0xe) = *(int *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pcVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pcVar8 = (char *)dcgettext(0,pcVar8,5);\n  fprintf(_stderr,pcVar8);\n  return 0;\ncode_r0x00111cc7:\n  local_48 = local_48 + 2;\n  local_48 = strchr(local_48,0x3a);\n  if (local_48 == (char *)0x0) {\n    pcVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_48 = pcVar8;\n    FUN_00108fb9(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (cVar3 != 't') {\n      return 1;\n    }\n    plVar7 = (long *)FUN_0010c218(param_1,pcVar16,plVar7);\n    if (plVar7 != (long *)0x0) {\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pcVar16) &&\n     (iVar5 = strcmp((char *)pplVar18[1],pcVar16), iVar5 == 0)) {\n    pplVar18[3] = plVar7;\n    *pplVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (lVar10 < 1) {\nLAB_0011208f:\n    uVar9 = 1;\nLAB_001121c4:\n    cVar3 = FUN_0010c05d(param_1,pcVar16,lVar12,uVar9,param_5);\njoined_r0x001123f8:\n    if (cVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pcVar8 = *(char **)(*plVar7 + 8);\n  if ((cVar3 != '\\0') && (cVar3 == *pcVar8)) {\n    pcVar8 = pcVar8 + 1;\n  }\n  if ((*pcVar8 == *pcVar16) && (iVar5 = strcmp(pcVar8,pcVar16), iVar5 == 0)) {\n    param_5 = *(long *)(*plVar7 + 0x10) + *(long *)(*(long *)(*plVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  lVar10 = lVar10 + -1;\n  plVar7 = plVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c05d",
                "xstrdup",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "fprintf",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_0010c139",
                "strcmp",
                "FUN_00113d3a",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "xmalloc",
                "FUN_0010bbd3",
                "strchr",
                "xrealloc",
                "FUN_0010c1c6",
                "FUN_0010c6be",
                "strtod",
                "FUN_00112996",
                "strtol",
                "strlen",
                "FUN_0010bf86",
                "FUN_0010be1a",
                "free",
                "FUN_0010bc80",
                "FUN_0010be88",
                "concat",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUNC_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "fileDescriptor",
                "param_2": "parameters",
                "param_3": "context",
                "cVar1": "isError",
                "iVar2": "errorCode",
                "uVar3": "data",
                "lVar4": "result",
                "puVar5": "relocationArray",
                "uVar6": "relocationCount",
                "uStack_38": "exceptionObject",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "destination",
                "puVar8": "currentDestination",
                "uVar9": "index"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 fileDescriptor,undefined8 *parameters,long context)\n\n{\n  char isError;\n  int errorCode;\n  undefined8 data;\n  long result;\n  undefined8 *relocationArray;\n  ulong relocationCount;\n  code *jumpTable;\n  undefined8 *destination;\n  undefined8 *currentDestination;\n  ulong index;\n  undefined8 exceptionObject;\n  \n  isError = FUN_00115f50(fileDescriptor,parameters,0);\n  if (isError != '\\0') {\n    return;\n  }\n  data = parameters[0xc];\n  if ((((*(byte *)(context + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (result = FUN_00114190(*parameters,0,0x100), result == 0)) {\n    result = bfd_get_reloc_upper_bound(fileDescriptor,parameters);\n    if (result < 0) {\n      if ((result != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a40 = 1;\n        data = 0;\nLAB_00108315:\n        FUN_001126c0(0,fileDescriptor,parameters,data,exceptionObject);\n        return;\n      }\n    }\n    else if (result != 0) {\n      relocationArray = (undefined8 *)parameters[0xe];\n      if (relocationArray == (undefined8 *)0x0) {\n        relocationArray = (undefined8 *)bfd_alloc(context);\n        if (relocationArray == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocationCount = bfd_canonicalize_reloc(fileDescriptor,parameters,relocationArray,DAT_001278d0);\n        if ((long)relocationCount < 0) {\n          DAT_00127a40 = 1;\n          data = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocationCount = (ulong)*(uint *)(parameters + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        destination = relocationArray;\n        for (index = 0; index != relocationCount; index = index + 1) {\n          currentDestination = destination;\n          if (((*(long **)relocationArray[index] != (long *)0x0) &&\n              (result = **(long **)relocationArray[index], result != 0)) &&\n             (isError = FUN_00115d70(*(undefined8 *)(result + 8),DAT_00127a28), isError != '\\0')) {\n            currentDestination = destination + 1;\n            *destination = relocationArray[index];\n          }\n          destination = currentDestination;\n        }\n        *destination = 0;\n        relocationCount = (long)destination - (long)relocationArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(context + 8) + 0x288);\n      if (relocationCount == 0) {\n        relocationCount = 0;\n        relocationArray = (undefined8 *)0x0;\n      }\n      else {\n        relocationCount = relocationCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocationCount = 0;\n  relocationArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(context + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(context,data,relocationArray,relocationCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_0011a110",
                "FUN_001082df",
                "bfd_get_error",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_process_data_0010d559",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "bVar1": "byteValue",
                "pbVar2": "bytePtr",
                "cVar3": "charValue",
                "uVar4": "uintValue",
                "iVar5": "intValue",
                "ppcVar6": "charPtrPtr",
                "sVar7": "sizeValue",
                "lVar8": "longValue",
                "plVar9": "longPtr",
                "pcVar10": "charPtr",
                "__s1": "string1",
                "__ptr": "voidPtr",
                "pbVar11": "bytePtr2",
                "uVar12": "uintValue2",
                "__nptr": "bytePtr3",
                "local_64": "localInt1",
                "local_40": "localStrArray"
            },
            "code": "\nundefined8 parseAndProcessData_0010d559(undefined8 *arg1,byte **arg2,long *arg3)\n\n{\n  byte byteValue;\n  byte *bytePtr;\n  char charValue;\n  uint uintValue;\n  int intValue;\n  char **charPtrPtr;\n  size_t sizeValue;\n  long longValue;\n  long *longPtr;\n  char *charPtr;\n  char *string1;\n  void *voidPtr;\n  byte *bytePtr2;\n  undefined8 uintValue2;\n  byte *bytePtr3;\n  int localInt1;\n  char *localStrArray [2];\n  \n  bytePtr = *arg2;\n  byteValue = bytePtr[1];\n  if ((char)byteValue < ':') {\n    if ((char)byteValue < '1') goto LAB_0010d5d8;\n    localInt1 = (char)byteValue + -0x30;\n    if (bytePtr[2] == 0x5f) {\n      *arg2 = bytePtr + 1;\n    }\n    bytePtr2 = *arg2 + 2;\n  }\n  else {\n    if (((byteValue != 0x5f) || (((&_sch_istable)[(ulong)bytePtr[2] * 2] & 4) == 0)) ||\n       (bytePtr[2] == 0x30)) goto LAB_0010d5d8;\n    bytePtr3 = bytePtr + 2;\n    longValue = strtol((char *)bytePtr3,(char **)0x0,10);\n    localInt1 = (int)longValue;\n    while (((&_sch_istable)[(ulong)*bytePtr3 * 2] & 4) != 0) {\n      bytePtr3 = bytePtr3 + 1;\n    }\n    bytePtr2 = bytePtr3 + 1;\n    if (*bytePtr3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *arg2 = bytePtr2;\n  charPtrPtr = (char **)0x0;\n  if (arg3 != (long *)0x0) {\n    charPtrPtr = localStrArray;\n  }\n  longValue = 0;\n  while( true ) {\n    while( true ) {\n      localInt1 = localInt1 + -1;\n      if (localInt1 == -1) {\n        if (arg3 != (long *)0x0) {\n          *arg3 = longValue;\n        }\n        return 1;\n      }\n      if (**arg2 == 0x5f) {\n        *arg2 = *arg2 + 1;\n      }\n      if (**arg2 != 0x74) break;\n      charValue = FUN_0010d21c(arg1,arg2,charPtrPtr);\n      charPtr = localStrArray[0];\n      if (charValue == '\\0') {\n        return 0;\n      }\n      if (arg3 != (long *)0x0) {\n        sizeValue = strlen(localStrArray[0]);\n        longValue = FUN_0010afd5(*arg1,arg1[1],charPtr,sizeValue & 0xffffffff,9);\n        free(charPtr);\n        if (longValue == 0) {\n          return 0;\n        }\n      }\n    }\n    uintValue = FUN_00108e76(arg2);\n    sizeValue = strlen((char *)*arg2);\n    if (sizeValue < uintValue) break;\n    if (arg3 != (long *)0x0) {\n      if ((longValue != 0) && (longPtr = (long *)FUN_00113b1e(longValue), longPtr != (long *)0x0)) {\n        charPtr = (char *)FUN_00109a0b(*arg2,uintValue);\n        for (; longValue = *longPtr, longValue != 0; longPtr = longPtr + 1) {\n          longValue = *(long *)(longValue + 8);\n          if (longValue == 0) {\n            free(charPtr);\n            return 0;\n          }\n          string1 = (char *)FUN_001129f4(longValue);\n          if ((string1 != (char *)0x0) && (intValue = strcmp(string1,charPtr), intValue == 0)) break;\n        }\n        free(charPtr);\n        if (longValue != 0) goto LAB_0010d7ad;\n      }\n      uintValue2 = 9;\n      if (localInt1 == 0) {\n        voidPtr = (void *)FUN_00109a0b(*arg2,uintValue);\n        longValue = FUN_0010914e(*arg1,voidPtr);\n        free(voidPtr);\n        if (longValue != 0) goto LAB_0010d7ad;\n        uintValue2 = 0;\n      }\n      longValue = FUN_0010afd5(*arg1,arg1[1],*arg2,uintValue,uintValue2);\n      if (longValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *arg2 = *arg2 + uintValue;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(bytePtr);\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010d21c",
                "strcmp",
                "FUN_0010911f",
                "FUN_00113b1e",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "strtol",
                "FUN_001129f4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "__gnuc_va_list": "variableArguments",
                "fflush": "flushStandardOutput",
                "_stdout": "standardOutput",
                "fprintf": "printToStandardError",
                "_stderr": "standardError",
                "vfprintf": "printFormattedToStandardError",
                "putc": "writeCharacterToStandardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,variableArguments param_2)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,message,param_2);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "param_1": "inputPtr",
                "bVar1": "currentByte",
                "iVar2": "parsedInteger"
            },
            "code": "\nint parseInteger_00108e76(byte **inputPtr)\n\n{\n  byte currentByte;\n  int parsedInteger;\n  \n  parsedInteger = 0;\n  while( true ) {\n    currentByte = **inputPtr;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *inputPtr = *inputPtr + 1;\n    parsedInteger = parsedInteger * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return parsedInteger;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "parse_integer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 param_2_value,undefined8 param_3_value)\n\n{\n  long hash_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2_value,0x30), input_value != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_value,param_2_value,param_3_value), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_and_call_function_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "value"
            },
            "code": "\nvoid set_param_and_call_function_thunk_0010e439(long base_address,undefined8 value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = value;\n  FUN_0010e2f0(base_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_call_function_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "path",
                "param_2": "directory",
                "sStack_a8": "stat_result",
                "iVar1": "access_result"
            },
            "code": "\nchar * check_directory_access_0011283f(char *path,char *directory)\n\n{\n  int access_result;\n  stat stat_result;\n  \n  if ((directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&stat_result);\n      if ((access_result == 0) && ((stat_result.st_mode & 0xf000) == 0x4000)) {\n        directory = path;\n      }\n    }\n  }\n  return directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_code_00108237",
                "iVar1": "errorValue",
                "piVar2": "errnoPointer",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeFileAndReturnErrorCode_00108237(void)\n\n{\n  int errorValue;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  errorValue = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = errorValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_code_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00108237"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "context",
                "param_2": "filename",
                "param_3": "recordId",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "result",
                "plVar2": "recordData",
                "puVar3": "mallocedData",
                "lVar4": "loopVar",
                "puVar5": "currentDataLocation",
                "pcVar6": "defaultFilename",
                "bVar7": "defaultValue",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long context,char *filename,long recordId,uint flags,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 result;\n  long *recordData;\n  undefined4 *mallocedData;\n  long loopVar;\n  undefined4 *currentDataLocation;\n  char *defaultFilename;\n  byte defaultValue;\n  undefined returnValue [16];\n  \n  defaultValue = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  if (recordId != 0) {\n    if (*(long *)(context + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      recordData = (long *)xmalloc(0x18);\n      *recordData = recordId;\n      *(undefined (*) [16])(recordData + 1) = ZEXT816(0);\n      mallocedData = (undefined4 *)xmalloc(0x30);\n      *(long **)(context + 0x18) = recordData;\n      recordData[2] = (long)mallocedData;\n      currentDataLocation = mallocedData;\n      for (loopVar = 0xc; loopVar != 0; loopVar = loopVar + -1) {\n        *currentDataLocation = 0;\n        currentDataLocation = currentDataLocation + (ulong)defaultValue * -2 + 1;\n      }\n      *(undefined4 **)(context + 0x20) = mallocedData;\n      loopVar = *(long *)(context + 0x10);\n      *(undefined8 *)(mallocedData + 6) = param5;\n      *(undefined8 *)(mallocedData + 8) = 0xffffffffffffffff;\n      loopVar = FUN_00112925(loopVar + 0x10,defaultFilename,3,(flags & 0xff) + 1);\n      if (loopVar != 0) {\n        *(long **)(loopVar + 0x20) = recordData;\n        result = CONCAT71((int7)((ulong)loopVar >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107880",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "create_file_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlashPos",
                "lVar2": "length",
                "lVar3": "pathLength",
                "lVar4": "folderLength",
                "pcVar5": "newPath",
                "bVar6": "isSlashPresent"
            },
            "code": "\nvoid createFilePath_00114cf0(char *path)\n\n{\n  char *lastSlashPos;\n  long length;\n  long pathLength;\n  long folderLength;\n  char *newPath;\n  byte isSlashPresent;\n  \n  isSlashPresent = 0;\n  lastSlashPos = strrchr(path,0x2f);\n  if (lastSlashPos == (char *)0x0) {\n    lastSlashPos = (char *)xmalloc(9);\n    pathLength = 0;\n  }\n  else {\n    folderLength = (long)lastSlashPos - (long)path;\n    lastSlashPos = (char *)xmalloc(folderLength + 0xb);\n    pathLength = folderLength + 1;\n    newPath = lastSlashPos;\n    for (length = folderLength; length != 0; length = length + -1) {\n      *newPath = *path;\n      path = path + (ulong)isSlashPresent * -2 + 1;\n      newPath = newPath + (ulong)isSlashPresent * -2 + 1;\n    }\n    lastSlashPos[folderLength] = '/';\n  }\n  *(undefined8 *)(lastSlashPos + pathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashPos + pathLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "create_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "data",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "flagChar",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "resultString",
                "local_41": "localFlag",
                "iVar2": "ptr1",
                "lVar7": "counter",
                "iVar3": "result",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long data,long start,long end,byte flag)\n\n{\n  char flagChar;\n  int ptr1;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t len1;\n  size_t len2;\n  char *resultString;\n  long counter;\n  byte localFlag;\n  \n  flagChar = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (flagChar == '\\0') {\n    localFlag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  ptr1 = *(int *)(*(long *)(data + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(data);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  resultString = (char *)xmalloc(len1 + 100 + len2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  len1 = strlen(resultString);\n  sprintf(resultString + len1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = ptr1 * (((int)end - (int)start) + 1);\n  }\n  returnValue = FUN_00109b52(data,resultString,counter,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "iVar1": "column_width",
                "iVar2": "target",
                "iVar3": "comparison_result",
                "pcVar4": "header_message",
                "sVar5": "string_length",
                "pcVar6": "temporary_directory",
                "uVar7": "temporary_directory_result",
                "piVar8": "errno_location_result",
                "iVar9": "loop_counter",
                "lVar10": "length_variable_1",
                "lVar11": "length_variable_2",
                "ppcVar12": "arch_mach_array",
                "uVar13": "max_string_length",
                "uVar14": "max_string_length_temp",
                "local_70": "loop_index"
            },
            "code": "\n\n\nvoid print_bfd_header_info_001199d0(void)\n\n{\n  int column_width;\n  int target;\n  int comparison_result;\n  char *header_message;\n  size_t string_length;\n  char *temporary_directory;\n  undefined8 temporary_directory_result;\n  int *errno_location_result;\n  int loop_counter;\n  long length_variable_1;\n  long length_variable_2;\n  char **arch_mach_array;\n  uint max_string_length;\n  ulong max_string_length_temp;\n  int loop_index;\n  \n  header_message = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header_message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    header_message = getenv(\"TMPDIR\");\n    temporary_directory_result = FUN_0011283f(header_message,0);\n    header_message = getenv(\"TMP\");\n    temporary_directory_result = FUN_0011283f(header_message,temporary_directory_result);\n    header_message = getenv(\"TEMP\");\n    temporary_directory_result = FUN_0011283f(header_message,temporary_directory_result);\n    temporary_directory_result = FUN_0011283f(&DAT_0011b39a,temporary_directory_result);\n    temporary_directory_result = FUN_0011283f(\"/var/tmp\",temporary_directory_result);\n    header_message = (char *)FUN_0011283f(&DAT_00120324,temporary_directory_result);\n    if (header_message == (char *)0x0) {\n      header_message = \".\";\n    }\n    string_length = strlen(header_message);\n    temporary_directory = (char *)xmalloc((int)string_length + 2);\n    DAT_001278e0 = strcpy(temporary_directory,header_message);\n    DAT_001278e0[string_length & 0xffffffff] = '/';\n    DAT_001278e0[(int)string_length + 1] = '\\0';\n  }\n  header_message = DAT_001278e0;\n  string_length = strlen(DAT_001278e0);\n  length_variable_1 = (long)(int)string_length;\n  temporary_directory = (char *)xmalloc(length_variable_1 + 9);\n  strcpy(temporary_directory,header_message);\n  *(undefined2 *)(temporary_directory + length_variable_1) = 0x6363;\n  *(undefined4 *)(temporary_directory + length_variable_1 + 2) = 0x58585858;\n  *(undefined4 *)((long)(temporary_directory + length_variable_1 + 2) + 3) = 0x585858;\n  temporary_directory[length_variable_1 + 8] = '\\0';\n  target = mkstemps(temporary_directory,0);\n  if (target == -1) {\n    errno_location_result = __errno_location();\n    temporary_directory = strerror(*errno_location_result);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",header_message,temporary_directory);\n                    \n    abort();\n  }\n  target = close(target);\n  if (target != 0) {\n                    \n    abort();\n  }\n  max_string_length = 0;\n  target = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(temporary_directory);\n  free(temporary_directory);\n  loop_index = 0;\n  do {\n    header_message = (char *)bfd_printable_arch_mach(target);\n    string_length = strlen(header_message);\n    if ((int)max_string_length < (int)(uint)string_length) {\n      max_string_length = (uint)string_length;\n    }\n    target = target + 1;\n  } while (target != 0x57);\n  header_message = getenv(\"COLUMNS\");\n  target = loop_index;\n  if (header_message != (char *)0x0) {\n    length_variable_1 = strtol(header_message,(char **)0x0,10);\n    column_width = (int)length_variable_1;\n    if (column_width != 0) goto LAB_00119b11;\n  }\n  column_width = 0x50;\nLAB_00119b11:\n  do {\n    loop_index = target;\n    if (-1 < loop_index) {\n      return;\n    }\n    length_variable_2 = (long)loop_index;\n    loop_counter = (column_width - max_string_length) + -1;\n    length_variable_1 = length_variable_2;\n    do {\n      target = (int)length_variable_1;\n      if (-1 < target) break;\n      string_length = strlen(*(char **)(length_variable_1 * 0x60));\n      length_variable_1 = length_variable_1 + 1;\n      loop_counter = (loop_counter - (int)string_length) + -1;\n    } while (-1 < loop_counter);\n    printf(\"\\n%*s\",(ulong)(max_string_length + 1),&DAT_0011b4a1);\n    for (arch_mach_array = (char **)(length_variable_2 * 0x60);\n        ((ulong)(uint)(target - loop_index) + length_variable_2) * 0x60 - (long)arch_mach_array != 0;\n        arch_mach_array = arch_mach_array + 0xc) {\n      printf(\"%s \",*arch_mach_array);\n    }\n    loop_counter = 2;\n    putc(10,_stdout);\n    do {\n      header_message = (char *)bfd_printable_arch_mach(loop_counter,0);\n      comparison_result = strcmp(header_message,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        temporary_directory_result = bfd_printable_arch_mach(loop_counter,0);\n        printf(\"%*s \",(ulong)max_string_length,temporary_directory_result);\n        arch_mach_array = (char **)(length_variable_2 * 0x60);\n        comparison_result = loop_index;\n        while (target != comparison_result) {\n          if (*(char *)((long)arch_mach_array + (ulong)(loop_counter - 2) + 8) == '\\0') {\n            string_length = strlen(*arch_mach_array);\n            for (max_string_length_temp = string_length & 0xffffffff; (int)max_string_length_temp != 0; max_string_length_temp = (ulong)((int)max_string_length_temp - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*arch_mach_array,_stdout);\n          }\n          comparison_result = comparison_result + 1;\n          if (target != comparison_result) {\n            putc(0x20,_stdout);\n          }\n          arch_mach_array = arch_mach_array + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loop_counter = loop_counter + 1;\n    } while (loop_counter != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strerror",
                "mkstemps",
                "bfd_printable_arch_mach",
                "FUN_00119f70",
                "strlen",
                "strcpy",
                "getenv",
                "fprintf",
                "__errno_location",
                "free",
                "bfd_iterate_over_targets",
                "unlink",
                "FUN_0011283f",
                "abort",
                "close",
                "FUN_00104943",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_header_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "decode_and_extract_string_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr1",
                "bVar3": "byteVar2",
                "cVar4": "charVar1",
                "bVar5": "byteVar3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "sizeVar",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystackStr",
                "pcVar11": "pcVar1",
                "uVar12": "resultVar",
                "pcVar13": "pcVar2",
                "bVar14": "byteVar4",
                "pcVar15": "pcVar3",
                "bVar16": "byteVar5",
                "bVar17": "byteVar6",
                "bVar18": "byteVar7",
                "bVar19": "byteVar8",
                "uVar20": "count",
                "uVar21": "ulongVar",
                "local_3c": "buffer"
            },
            "code": "\nundefined4 decode_and_extract_string_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byteVar1;\n  byte *bytePtr1;\n  byte byteVar2;\n  char charVar1;\n  byte byteVar3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t sizeVar;\n  byte *bytePtr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystackStr;\n  char *pcVar1;\n  undefined8 resultVar;\n  char *pcVar2;\n  byte byteVar4;\n  char *pcVar3;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  byte byteVar8;\n  uint count;\n  ulong ulongVar;\n  uint buffer [3];\n  \n  bytePtr1 = *param2;\n  *param2 = bytePtr1 + 1;\n  buffer[0] = FUN_00108e76(param2);\n  ulongVar = (ulong)buffer[0];\n  if (buffer[0] != 0) {\n    bytePtr2 = *param2;\n    sizeVar = strlen((char *)bytePtr2);\n    if (ulongVar <= sizeVar) {\n      *param2 = bytePtr2 + ulongVar;\n      count = 0;\n      result = FUN_00108ea1(param2,buffer);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (buffer[0] <= count) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)FUN_00109a0b(bytePtr1,(int)*param2 - (int)bytePtr1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystackStr = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystackStr != (char *)0x0) &&\n             (pcVar1 = strstr(haystackStr,\"::NoSuchStrinG\"), pcVar2 = haystackStr,\n             pcVar3 = haystackStr, pcVar1 != (char *)0x0)) {\n            for (; pcVar2 != pcVar1; pcVar2 = pcVar2 + 1) {\n              if ((*pcVar2 != ' ') ||\n                 (((pcVar2[1] == '>' && (haystackStr < pcVar2)) && (pcVar2[-1] == '>')))) {\n                *pcVar3 = *pcVar2;\n                pcVar3 = pcVar3 + 1;\n              }\n            }\n            resultVar = FUN_00109a0b(haystackStr,(int)pcVar3 - (int)haystackStr);\n            *param3 = resultVar;\n            free(haystackStr);\n            return result;\n          }\n          FUN_0010911f(bytePtr1);\n          free(haystackStr);\n          return 0;\n        }\n        bytePtr2 = *param2;\n        if (*bytePtr2 != 0x5a) {\n          byteVar3 = FUN_0010c95e(param1,param2,0);\n          if (byteVar3 == 0) {\n            return 0;\n          }\n          byteVar2 = 0;\n          byteVar4 = 0;\n          byteVar7 = 0;\n          byteVar6 = 0;\n          byteVar8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar5 = byteVar2;\n              byteVar1 = *bytePtr2;\n              if ((byteVar4 | byteVar1 == 0) != 0) {\n                byteVar3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar2 = byteVar3;\n              byteVar4 = byteVar3;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = byteVar5;\n              byteVar4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar2 = byteVar5;\n              byteVar7 = byteVar3;\n              break;\n            case 99:\n              byteVar2 = byteVar5;\n              byteVar8 = byteVar3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar2 = byteVar5;\n              byteVar6 = byteVar3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePtr2 + 1;\n        charVar1 = FUN_0010c95e(param1,param2,0);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(bytePtr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar5 == 0) {\n    if (byteVar8 == 0) {\n      if (byteVar7 == 0) {\n        if (byteVar6 == 0) {\n          if (byteVar3 != 0) {\n            uintVar1 = FUN_00108e76(param2);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uintVar1;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePtr2 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *param2 = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *param2;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *param2 = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = FUN_00108e76(param2);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      intVar1 = FUN_00108e76(param2);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "free",
                "strstr",
                "abort",
                "FUN_0010911f",
                "cplus_demangle",
                "FUN_00108e76",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "decode_and_extract_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "clean_up_hash_table_001054af",
                "param_1": "unusedParameter1",
                "param_2": "unusedParameter2",
                "in_RAX": "unusedVariable"
            },
            "code": "\nvoid cleanUpHashTable_001054af(undefined8 unusedParameter1,undefined8 unusedParameter2)\n\n{\n  undefined8 unusedVariable;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unusedParameter2,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "clean_up_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_and_update_0010c139",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "previousParam2Value",
                "cVar2": "charValue",
                "uVar3": "returnValue",
                "puVar4": "allocatedMemory",
                "in_R10": "register10",
                "unaff_R15": "unaffectedRegister15"
            },
            "code": "\nulong allocateAndUpdate_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 previousParam2Value;\n  char charValue;\n  ulong returnValue;\n  undefined8 *allocatedMemory;\n  undefined8 register10;\n  undefined8 unaffectedRegister15;\n  \n  charValue = *(char *)(param2 + 0x60);\n  if ((charValue != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    previousParam2Value = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[2] = param4;\n    *(undefined4 *)(allocatedMemory + 3) = param5;\n    allocatedMemory[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = allocatedMemory;\n    *allocatedMemory = previousParam2Value;\n    allocatedMemory[1] = param3;\n    return CONCAT71((int7)((ulong)unaffectedRegister15 >> 8),charValue) & 0xffffffff;\n  }\n  returnValue = FUN_0010c05d(param1,param3,param4,param5,param6,register10);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_update_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_and_call_function_0010e439",
                "param_1": "objectAddress",
                "param_2": "value"
            },
            "code": "\nvoid setParamAndCallFunction_0010e439(long objectAddress,undefined8 value)\n\n{\n  *(undefined8 *)(objectAddress + 0x210) = value;\n  FUN_0010e2f0(objectAddress,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "set_param_and_call_function_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010abdd",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010e6a8",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_00109dfe",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_00113fb0",
                "FUN_00116b90",
                "FUN_0010abdd",
                "FUN_0010a181",
                "FUN_00113ede",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00115530",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_00104ad6",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "data",
                "param_2": "count",
                "uVar1": "result"
            },
            "code": "\nvoid processData_00109d3e(undefined8 data,int count)\n\n{\n  undefined8 result;\n  \n  result = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    result = *(undefined8 *)(&DAT_00121360 + (ulong)(count - 1U) * 8);\n  }\n  FUN_00109cf4(data,result,count);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_if_value_exists_00112502",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "value",
                "uVar1": "index",
                "puVar2": "ptr",
                "uVar3": "temp",
                "cVar4": "result"
            },
            "code": "\nundefined checkIfValueExists_00112502(long data,undefined8 param2,ulong value)\n\n{\n  uint index;\n  undefined8 *ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(data + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data + 0x48), index < 10 && (ptr[(ulong)index + 2] != -1))) {\n      if (value <= (ulong)ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param2,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    temp = *ptr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "check_if_value_exists_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_and_ignore_rubbish_00104cc1",
                "uVar1": "errorString",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "linePtr",
                "pbVar5": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "lineEnd",
                "unaff_R13": "returnValue",
                "unaff_R14": "currentLineStart",
                "unaff_R15": "currentLineEnd",
                "param_7": "fileName",
                "param_8": "returnAddressPtr",
                "param_9": "linePtr"
            },
            "code": "\nvoid parseAndIgnoreRubbish_00104cc1(void)\n\n{\n  undefined8 errorString;\n  byte **slot;\n  byte *currentChar;\n  byte nextChar;\n  byte *linePtr;\n  byte *currentLine;\n  int lineNumber;\n  byte *lineEnd;\n  undefined8 returnValue;\n  byte *currentLineStart;\n  byte *currentLineEnd;\n  undefined8 fileName;\n  undefined8 *returnAddressPtr;\n  byte *linePtr;\n  \ncode_r0x00104cc1:\n  linePtr = lineEnd;\n  errorString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(errorString,fileName,lineNumber);\n  currentLine = linePtr;\n  lineEnd = linePtr;\nLAB_00114599:\n  do {\n    *lineEnd = 0;\n    if (currentLineEnd < lineEnd) {\n      slot = (byte **)htab_find_slot();\n      *slot = currentLineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = currentLine;\n    if (currentLineStart[1] == 0) {\n      *returnAddressPtr = returnValue;\n      return;\n    }\n    for (; nextChar = *currentChar, currentLineStart = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          linePtr = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          linePtr = currentChar + 1;\n          if (currentChar[1] == 10) {\n            linePtr = currentChar + 2;\n            currentLineStart = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      currentLineStart = currentChar + 1;\n      linePtr = currentChar + 2;\n    }\n    else {\n      linePtr = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *currentLine;\n    currentLineEnd = currentLine;\n    while ((nextChar == 0x20 || (lineEnd = currentLineEnd, nextChar == 9))) {\n      currentLine = currentLineEnd + 1;\n      currentLineEnd = currentLineEnd + 1;\n      nextChar = *currentLine;\n    }\n    do {\n      currentLine = linePtr;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = lineEnd[1];\n      lineEnd = lineEnd + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = lineEnd[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = lineEnd[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = lineEnd[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = lineEnd[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = lineEnd[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = lineEnd[6];\n      currentChar = lineEnd + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_ignore_rubbish_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0011173a",
                "FUN_0010b6ea",
                "FUN_00109c2e",
                "FUN_00109be3",
                "FUN_0010e07c",
                "FUN_0010e2f0",
                "FUN_0010dac0",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_00113bfa",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "result",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_store_00113bfa(long input_1,long input_2)\n\n{\n  long result;\n  long *allocated_memory;\n  \n  if (((input_1 != 0) && (input_2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(long **)(result + 0x10) = allocated_memory;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_store_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "uVar1": "filePointer",
                "uVar2": "errorMessage",
                "unaff_EBX": "registerEBX"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 param_1,undefined8 *param_2,undefined8 param_3)\n\n{\n  undefined8 filePointer;\n  undefined8 errorMessage;\n  uint registerEBX;\n  \n  if (*(int *)(param_2[1] + 8) != 2) {\n    filePointer = *param_2;\n    registerEBX = registerEBX & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(errorMessage,filePointer,param_3);\n  }\n  return registerEBX;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "parse_and_print_data_00109e76",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "lVar1": "recordIndex",
                "local_5a": "formattedString"
            },
            "code": "\nvoid parseAndPrintData_00109e76(long dataPointer,uint dataSize)\n\n{\n  long recordIndex;\n  char formattedString [58];\n  \n  recordIndex = *(long *)(dataPointer + 0x68);\n  *(long *)(dataPointer + 0x68) = recordIndex + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",recordIndex,recordIndex,(ulong)dataSize);\n  FUN_00109b52(dataPointer,formattedString,recordIndex,1,dataSize * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "parse_and_print_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "iVar1": "nextIndex",
                "lVar2": "currentIndex",
                "lVar3": "currentOffset",
                "uVar4": "duplicatedStr"
            },
            "code": "\nulong updateData_001088ae(undefined4 data1,undefined4 data2,undefined8 data3,undefined8 data4)\n\n{\n  int nextIndex;\n  long currentIndex;\n  long currentOffset;\n  undefined8 duplicatedStr;\n  \n  currentIndex = (long)DAT_001278c0;\n  currentOffset = currentIndex * 0x18;\n  free((void *)(&DAT_00127750)[currentIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + currentOffset) = data1;\n  *(undefined4 *)(&DAT_00127744 + currentOffset) = data2;\n  *(undefined8 *)(&DAT_00127748 + currentOffset) = data3;\n  duplicatedStr = xstrdup(data4);\n  (&DAT_00127750)[currentIndex * 3] = duplicatedStr;\n  nextIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = nextIndex % 0x10;\n  return (long)nextIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_nested_structures_0010afd5",
                "param_1": "ptrList",
                "param_2": "dataStruct",
                "param_3": "strPtr",
                "param_4": "var1",
                "param_5": "var2",
                "param_6": "var3",
                "iVar1": "comparisonResult",
                "__s2": "inputString",
                "puVar2": "ptr1",
                "uVar3": "resultVar",
                "lVar4": "var4",
                "puVar5": "ptr2",
                "puVar6": "ptr3",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nfindStringInNestedStructures_0010afd5(undefined8 *ptrList,long dataStruct,undefined8 strPtr,undefined4 var1,\n            undefined4 var2,undefined8 var3)\n\n{\n  int comparisonResult;\n  char *inputString;\n  undefined8 *ptr1;\n  undefined8 resultVar;\n  long var4;\n  undefined8 *ptr2;\n  undefined4 *ptr3;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  inputString = (char *)FUN_00109a0b(strPtr,var1);\n  for (ptrList = (undefined8 *)*ptrList; ptrList != (undefined8 *)0x0;\n      ptrList = (undefined8 *)*ptrList) {\n    for (ptr1 = (undefined8 *)ptrList[1]; ptr1 != (undefined8 *)0x0;\n        ptr1 = (undefined8 *)*ptr1) {\n      if ((undefined8 *)ptr1[2] != (undefined8 *)0x0) {\n        for (ptr2 = *(undefined8 **)(undefined8 *)ptr1[2]; ptr2 != (undefined8 *)0x0;\n            ptr2 = (undefined8 *)*ptr2) {\n          if ((*(int *)((long)ptr2 + 0x14) == 1) && (*(char *)ptr2[1] == *inputString)) {\n            comparisonResult = strcmp((char *)ptr2[1],inputString);\n            if (comparisonResult == 0) {\n              var4 = ptr2[4];\n              if (var4 == 0) goto LAB_0010b05b;\n              free(inputString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  ptr1 = *(undefined8 **)(dataStruct + 0x1a0);\n  do {\n    if (ptr1 == (undefined8 *)0x0) {\n      ptr1 = (undefined8 *)xmalloc(0x28);\n      resultVar = *(undefined8 *)(dataStruct + 0x1a0);\n      ptr3 = (undefined4 *)((long)ptr1 + 0x14);\n      for (var4 = 5; var4 != 0; var4 = var4 + -1) {\n        *ptr3 = 0;\n        ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n      }\n      *(undefined4 *)(ptr1 + 2) = var2;\n      *ptr1 = resultVar;\n      ptr1[1] = inputString;\n      resultVar = FUN_00113e23(ptr1 + 3,inputString);\n      *(undefined8 **)(dataStruct + 0x1a0) = ptr1;\n      ptr1[4] = resultVar;\nLAB_0010b0e7:\n      var4 = ptr1[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = var3;\n      returnValue._0_8_ = var4;\n      return returnValue;\n    }\n    if (*(char *)ptr1[1] == *inputString) {\n      comparisonResult = strcmp((char *)ptr1[1],inputString);\n      if (comparisonResult == 0) {\n        if (*(int *)(ptr1 + 2) == 0) {\n          *(undefined4 *)(ptr1 + 2) = var2;\n        }\n        free(inputString);\n        goto LAB_0010b0e7;\n      }\n    }\n    ptr1 = (undefined8 *)*ptr1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "strcmp",
                "FUN_00109a0b",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_string_in_nested_structures_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "cplus_demangle_init_info",
                "FUN_00113bfa",
                "FUN_001129f4",
                "FUN_00113df2",
                "FUN_00108fb9",
                "cplus_demangle_mangled_name",
                "strcmp",
                "FUN_00113d3a",
                "FUN_00109022",
                "FUN_00108fe8",
                "xmalloc",
                "strspn",
                "xrealloc",
                "strcat",
                "FUN_00113e5e",
                "FUN_00113e17",
                "strtol",
                "FUN_0010d559",
                "FUN_00113c43",
                "strlen",
                "FUN_00112b6e",
                "strcpy",
                "FUN_00113b4a",
                "strstr",
                "FUN_00109ab1",
                "concat",
                "FUN_0010afd5",
                "FUN_00113fb0",
                "dcgettext",
                "FUN_00113dfe",
                "fprintf",
                "strncmp",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00113cb9",
                "FUN_0010911f",
                "sprintf",
                "malloc",
                "FUN_0010ee3f",
                "strchr",
                "FUN_0010d21c",
                "FUN_00113b71",
                "FUN_00108e76",
                "FUN_0010b6ea",
                "FUN_0010c2d2",
                "FUN_00113da9",
                "FUN_00113d6e",
                "free",
                "FUN_00112904",
                "FUN_0010d882",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "__format": "format_string",
                "lVar1": "name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry",
                "iVar5": "count"
            },
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 arg1,undefined8 arg2,undefined8 arg3)\n\n{\n  char *format_string;\n  long name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int count;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  count = DAT_001278c0;\n  do {\n    index = (long)count;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      name = bfd_get_stab_name(*stab_entry);\n      if (name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    count = (count + 1) % 0x10;\n  } while (DAT_001278c0 != count);\n  return arg3;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_0010a083(long data)\n\n{\n  FUN_00109ed3(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_allocate_memory_00109c2e",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "currentSize",
                "param_4": "condition",
                "param_5": "resultArray",
                "param_6": "inputValue",
                "lVar1": "newAddress",
                "plVar2": "currentElement",
                "lVar3": "remainingSize",
                "puVar4": "currentByte",
                "uVar5": "arraySize",
                "bVar6": "flag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandAndAllocateMemory_00109c2e(long baseAddress,long newValue,ulong currentSize,int condition,undefined4 *resultArray,\n            undefined8 inputValue)\n\n{\n  long newAddress;\n  long *currentElement;\n  long remainingSize;\n  undefined *currentByte;\n  ulong arraySize;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  currentSize = currentSize & 0xffffffff;\n  arraySize = *(ulong *)(baseAddress + 0x1b0);\n  if (arraySize <= currentSize) {\n    if (arraySize == 0) {\n      arraySize = 10;\n    }\n    for (; arraySize <= currentSize; arraySize = arraySize * 2) {\n    }\n    newAddress = xrealloc(*(undefined8 *)(baseAddress + 0x1a8),arraySize * 0x18);\n    *(long *)(baseAddress + 0x1a8) = newAddress;\n    currentByte = (undefined *)(*(long *)(baseAddress + 0x1b0) * 0x18 + newAddress);\n    for (remainingSize = (arraySize - *(long *)(baseAddress + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *currentByte = 0;\n      currentByte = currentByte + (ulong)flag * -2 + 1;\n    }\n    *(ulong *)(baseAddress + 0x1b0) = arraySize;\n  }\n  currentElement = (long *)(currentSize * 0x18 + *(long *)(baseAddress + 0x1a8));\n  if (*currentElement == 0) {\n    newAddress = *(long *)(baseAddress + 0x68);\n    *currentElement = newAddress;\n    *(long *)(baseAddress + 0x68) = newAddress + 1;\n    currentElement[1] = newValue;\n    *(int *)(currentElement + 2) = condition;\n  }\n  if (condition == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *resultArray;\n  }\n  else {\n    *resultArray = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  returnValue._8_8_ = inputValue;\n  returnValue._0_8_ = *currentElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "expand_and_allocate_memory_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_bad_format_error_001053b5",
                "uVar1": "errorString"
            },
            "code": "\nvoid displayBadFormatError_001053b5(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "file_ptr",
                "param_2": "ptr_2",
                "param_3": "ptr_3",
                "uVar1": "message",
                "lVar2": "ptr_offset"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_ptr,undefined8 ptr_2,undefined8 ptr_3)\n\n{\n  undefined8 message;\n  long ptr_offset;\n  \n  if ((*(long *)(file_ptr + 8) != 0) && (*(long *)(file_ptr + 0x10) != 0)) {\n    ptr_offset = *(long *)(file_ptr + 0x10) + 0x10;\n    if (*(long *)(file_ptr + 0x20) != 0) {\n      ptr_offset = *(long *)(file_ptr + 0x20) + 0x28;\n    }\n    message = FUN_00112925(ptr_offset,ptr_2,ptr_3,3);\n    return message;\n  }\n  message = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",message);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_identifier_0010c7a0",
                "param_1": "classData",
                "param_2": "className",
                "param_3": "type",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "classId",
                "lVar3": "typeData",
                "piVar4": "typePtr",
                "__s1": "existingClassName",
                "cVar5": "flag",
                "iVar6": "counter",
                "puVar7": "newNode",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassIdentifier_0010c7a0(long classData,char *className,int *type,undefined8 param4)\n\n{\n  undefined8 result;\n  uint classId;\n  long typeData;\n  int *typePtr;\n  char *existingClassName;\n  char flag;\n  int counter;\n  undefined8 *newNode;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeData = *(long *)(type + 4);\n  newNode = (undefined8 *)(ulong)*(uint *)(typeData + 0xc);\n  if (*(uint *)(typeData + 0xc) <= *(uint *)(classData + 0x38)) {\n    for (newNode = *(undefined8 **)(classData + 0x50); newNode != (undefined8 *)0x0;\n        newNode = (undefined8 *)*newNode) {\n      typePtr = (int *)newNode[1];\n      if (*typePtr == *type) {\n        existingClassName = (char *)newNode[2];\n        if (className == (char *)0x0) {\n          if (existingClassName == (char *)0x0) {\nLAB_0010c82c:\n            flag = FUN_0010922b(classData,typePtr,type);\n            if (flag != '\\0') {\n              classId = *(uint *)(*(long *)(newNode[1] + 0x10) + 0xc);\n              newNode = (undefined8 *)(ulong)classId;\n              *(uint *)(typeData + 0xc) = classId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existingClassName != (char *)0x0) && (*existingClassName == *className)) &&\n                (counter = strcmp(existingClassName,className), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(classData + 0x34) + 1;\n    *(int *)(classData + 0x34) = counter;\n    *(int *)(typeData + 0xc) = counter;\n    newNode = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(classData + 0x50);\n    newNode[2] = className;\n    *(undefined8 **)(classData + 0x50) = newNode;\n    *newNode = result;\n    newNode[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)newNode >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strcmp",
                "FUN_0010922b",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_class_identifier_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_2": "array1",
                "param_3": "array2",
                "uVar1": "array1Type",
                "uVar2": "array2Type",
                "pplVar3": "array2Ptr",
                "ppcVar4": "stringArray1",
                "ppcVar5": "stringArray2",
                "lVar6": "array1Value1",
                "lVar7": "array1Value2",
                "lVar8": "array2Value2",
                "pcVar9": "string1",
                "pcVar10": "string2",
                "cVar11": "isEqual",
                "bVar12": "result",
                "iVar13": "stringCmpResult",
                "uVar14": "comparisonValue1",
                "uVar15": "comparisonValue2",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "param_3Ptr",
                "lVar19": "index",
                "plVar20": "array2Value1",
                "plVar21": "array2Ptr1",
                "lVar22": "array1Ptr1",
                "local_70": "localArrayPtr",
                "local_58": "ptrList",
                "plStack_50": "stackPtr",
                "local_48": "localArray"
            },
            "code": "\nbyte checkEquality_0010922b(long param_1,long *array1,long *array2)\n\n{\n  uint array1Type;\n  uint array2Type;\n  long **array2Ptr;\n  char **stringArray1;\n  char **stringArray2;\n  long array1Value1;\n  long array1Value2;\n  long array2Value2;\n  char *string1;\n  char *string2;\n  char isEqual;\n  byte result;\n  int stringCmpResult;\n  undefined8 comparisonValue1;\n  undefined8 comparisonValue2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *param_3Ptr;\n  long index;\n  long *array2Value1;\n  long *array2Ptr1;\n  long array1Ptr1;\n  long *localArrayPtr;\n  undefined8 *ptrList;\n  long *stackPtr;\n  long *localArray;\n  \n  param_3Ptr = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (param_3Ptr == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    array1Type = *(uint *)array1;\n    if (array1Type == 1) goto code_r0x00109263;\n    while (array2Type = *(uint *)array2, array2Type == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (array1Type != 0x16) break;\n    if (array2Type != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((array1Type == 0x17) && (array2Type == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    param_3Ptr = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (array1Type == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (array1Type < 4) {\n    if (array1Type == 2) {\n      return true;\n    }\n  }\n  else if (array1Type - 4 < 3) {\n    return true;\n  }\n  ptrList = *(undefined8 **)(param_1 + 0x58);\n  for (ptr2 = ptrList; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &ptrList;\n  stackPtr = array1;\n  localArray = array2;\n  switch(array1Type) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    param_3Ptr = (long *)array1[2];\n    array2Ptr = (long **)array2[2];\n    if (param_3Ptr == (long *)0x0) {\n      result = array2Ptr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (array2Ptr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)param_3Ptr + 0xc)) &&\n       (*(uint *)((long)param_3Ptr + 0xc) == *(uint *)((long)array2Ptr + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*param_3Ptr;\n    localArrayPtr = *array2Ptr;\n    if (((ptr2 == (undefined8 *)0x0) == (localArrayPtr == (long *)0x0)) &&\n       ((((param_3Ptr[2] == 0) == (array2Ptr[2] == (long *)0x0) &&\n         ((param_3Ptr[3] == 0) == (array2Ptr[3] == (long *)0x0))) &&\n        ((param_3Ptr[4] == 0) == (array2Ptr[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((param_3Ptr[4] != 0) &&\n           (isEqual = checkEquality_0010922b(param_1,param_3Ptr[4],array2Ptr[4]), isEqual == '\\0'))\n        goto LAB_00109382;\n        array2Ptr1 = (long *)param_3Ptr[2];\n        if (array2Ptr1 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)param_3Ptr[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          param_3Ptr = array2Ptr[3];\n          while( true ) {\n            stringArray2 = (char **)*ptr2;\n            if (stringArray2 == (char **)0x0) {\n              result = *param_3Ptr == 0;\n              goto LAB_001099c4;\n            }\n            stringArray1 = (char **)*param_3Ptr;\n            if (stringArray1 == (char **)0x0) break;\n            if ((**stringArray2 != **stringArray1) || (stringCmpResult = strcmp(*stringArray2,*stringArray1), stringCmpResult != 0))\n            break;\n            string1 = stringArray2[1];\n            string2 = stringArray1[1];\n            if ((string1 == (char *)0x0) != (string2 == (char *)0x0)) break;\n            if (string1 != (char *)0x0) {\n              array1Ptr1 = 0;\n              while( true ) {\n                stringArray2 = *(char ***)(string1 + array1Ptr1);\n                stringArray1 = *(char ***)(string2 + array1Ptr1);\n                if (stringArray2 == (char **)0x0) break;\n                if (stringArray1 == (char **)0x0) goto LAB_00109382;\n                if ((((**stringArray2 != **stringArray1) ||\n                     ((((ulong)stringArray2[2] ^ (ulong)stringArray1[2]) & 0xffffffffffff) != 0)) ||\n                    ((stringArray2[3] != stringArray1[3] ||\n                     ((((stringArray2[4] == (char *)0x0) != (stringArray1[4] == (char *)0x0) ||\n                       (stringCmpResult = strcmp(*stringArray2,*stringArray1), stringCmpResult != 0)) ||\n                      (isEqual = checkEquality_0010922b(param_1,stringArray2[1],stringArray1[1]), isEqual == '\\0')))))) ||\n                   ((stringArray2[4] != (char *)0x0 &&\n                    (isEqual = checkEquality_0010922b(param_1,stringArray2[4],stringArray1[4]), isEqual == '\\0'))))\n                goto LAB_00109382;\n                array1Ptr1 = array1Ptr1 + 8;\n              }\n              if (stringArray1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            param_3Ptr = param_3Ptr + 1;\n          }\n        }\n        else {\n          array2Value1 = array2Ptr[2];\n          for (; ptr2 = (undefined8 *)*array2Ptr1, ptr2 != (undefined8 *)0x0;\n              array2Ptr1 = array2Ptr1 + 1) {\n            ptr1 = (undefined8 *)*array2Value1;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (isEqual = checkEquality_0010922b(param_1,*ptr2,*ptr1), isEqual == '\\0'))\n            goto LAB_00109382;\n            array2Value1 = array2Value1 + 1;\n          }\n          if (*array2Value1 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; stringArray2 = (char **)*ptr2, stringArray2 != (char **)0x0; ptr2 = ptr2 + 1) {\n          stringArray1 = (char **)*localArrayPtr;\n          if (stringArray1 == (char **)0x0) goto LAB_00109382;\n          string1 = *stringArray1;\n          string2 = *stringArray2;\n          if ((*string2 != *string1) ||\n             ((((ulong)stringArray2[2] ^ (ulong)stringArray1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)stringArray2 + 0x14) == '\\0') {\n            if (stringArray2[3] == stringArray1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          stringCmpResult = strcmp(stringArray2[3],stringArray1[3]);\n          if (stringCmpResult != 0) goto LAB_00109382;\nLAB_00109480:\n          stringCmpResult = strcmp(string2,string1);\n          if (((stringCmpResult != 0) || (stringArray2[1] == (char *)0x0)) || (stringArray1[1] == (char *)0x0))\n          goto LAB_00109382;\n          comparisonValue1 = FUN_00112b6e(stringArray1[1],0);\n          comparisonValue2 = FUN_00112b6e(stringArray2[1],0);\n          isEqual = checkEquality_0010922b(param_1,comparisonValue2,comparisonValue1);\n          if (isEqual == '\\0') goto LAB_00109382;\n          localArrayPtr = localArrayPtr + 1;\n        }\n        if (*localArrayPtr == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    param_3Ptr = (long *)array1[2];\n    array2Ptr1 = (long *)array2[2];\n    if (param_3Ptr == (long *)0x0) {\n      result = array2Ptr1 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (array2Ptr1 == (long *)0x0) goto LAB_00109382;\n    array1Ptr1 = *param_3Ptr;\n    array1Value1 = *array2Ptr1;\n    index = 0;\n    array1Value2 = param_3Ptr[1];\n    array2Value2 = array2Ptr1[1];\n    do {\n      string1 = *(char **)(array1Ptr1 + index);\n      if (string1 == (char *)0x0) {\n        result = *(long *)(array1Value1 + index) == 0;\n        goto LAB_001099c1;\n      }\n      string2 = *(char **)(array1Value1 + index);\n      if (((string2 == (char *)0x0) || (*string1 != *string2)) ||\n         (*(long *)(array1Value2 + index) != *(long *)(array2Value2 + index))) break;\n      stringCmpResult = strcmp(string1,string2);\n      index = index + 8;\n    } while (stringCmpResult == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(param_1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (isEqual = checkEquality_0010922b(param_1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       isEqual != '\\0')) {\n      param_3Ptr = *(long **)(array1[2] + 8);\n      array2Ptr1 = *(long **)(array2[2] + 8);\n      if ((param_3Ptr == (long *)0x0) == (array2Ptr1 == (long *)0x0)) {\n        if (param_3Ptr == (long *)0x0) goto LAB_001097af;\n        while (((*param_3Ptr != 0 && (*array2Ptr1 != 0)) &&\n               (isEqual = checkEquality_0010922b(param_1), isEqual != '\\0'))) {\n          param_3Ptr = param_3Ptr + 1;\n          array2Ptr1 = array2Ptr1 + 1;\n        }\nLAB_0010995d:\n        if (*param_3Ptr != 0) goto LAB_00109964;\n        result = *array2Ptr1 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(param_1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    isEqual = checkEquality_0010922b(param_1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    result = 0;\n    if (isEqual != '\\0') {\n      result = checkEquality_0010922b(param_1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (isEqual = checkEquality_0010922b(param_1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        isEqual != '\\0')) &&\n       (isEqual = checkEquality_0010922b(param_1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), isEqual != '\\0')) {\n      param_3Ptr = *(long **)(array1[2] + 0x10);\n      array2Ptr1 = *(long **)(array2[2] + 0x10);\n      if ((param_3Ptr == (long *)0x0) == (array2Ptr1 == (long *)0x0)) {\n        if (param_3Ptr != (long *)0x0) {\n          while (((*param_3Ptr != 0 && (*array2Ptr1 != 0)) &&\n                 (isEqual = checkEquality_0010922b(param_1), isEqual != '\\0'))) {\n            param_3Ptr = param_3Ptr + 1;\n            array2Ptr1 = array2Ptr1 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    param_3Ptr = (long *)array2[2];\n    array2Ptr1 = (long *)array1[2];\n    stringCmpResult = strcmp(*(char **)(*array2Ptr1 + 8),*(char **)(*param_3Ptr + 8));\n    result = 0;\n    if (stringCmpResult == 0) {\n      result = checkEquality_0010922b(param_1,array2Ptr1[1],param_3Ptr[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = ptrList;\n  return result;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  param_3Ptr = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_member_001052a2",
                "param_3": "path",
                "cVar1": "formatValid",
                "iVar2": "architecture",
                "iVar3": "statResult",
                "ppcVar4": "statCmd",
                "lVar5": "breadResult",
                "uVar6": "errorMessage",
                "__format": "formatString",
                "puVar7": "dirPtr",
                "piVar8": "errnoPtr",
                "uVar9": "errorMessage",
                "in_RAX": "baseAddress",
                "pcVar10": "currentChar",
                "ppcVar11": "filePtr",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closePtr",
                "lVar15": "bytesLeft",
                "pcVar16": "currentChar",
                "psVar17": "statStruct",
                "unaff_R14": "tempDirPtr",
                "unaff_R15": "archivePtr",
                "bVar18": "isNegative",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "outputPath",
                "in_stack_00000010": "archiveSizePtr",
                "in_stack_00000018": "tempDir",
                "in_stack_00000020": "idx",
                "in_stack_00000028": "format",
                "in_stack_00000030": "isFormatValid",
                "in_stack_000000f8": "mode",
                "in_stack_00000110": "archiveSize"
            },
            "code": "\nvoid copyArchiveMember_001052a2(undefined8 param_1,undefined8 param_2,char *path)\n\n{\n  char formatValid;\n  int architecture;\n  int statResult;\n  char **statCmd;\n  long breadResult;\n  undefined8 errorMessage;\n  char *formatString;\n  undefined8 *dirPtr;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  long baseAddress;\n  char *currentChar;\n  char **filePtr;\n  long fileSize;\n  void *buffer;\n  code *closePtr;\n  long bytesLeft;\n  char *currentChar;\n  stat *statStruct;\n  undefined8 *tempDirPtr;\n  char **archivePtr;\n  byte isNegative;\n  undefined8 returnAddress;\n  undefined8 *outputPath;\n  long *archiveSizePtr;\n  char *tempDir;\n  undefined8 *idx;\n  undefined8 format;\n  undefined8 isFormatValid;\n  uint mode;\n  long archiveSize;\n  \n  isNegative = 0;\n  currentChar = (char *)(baseAddress + 1);\n  do {\n    if (*currentChar == '/') {\n      copyArchiveMember_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(tempDir,&DAT_0011b47d);\n      statResult = stat(currentChar,(stat *)&stack0x00000050);\n      dirPtr = tempDirPtr;\n      if (-1 < statResult) {\n        fileSize = FUN_0011a0e0(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentChar = strerror(*errnoPtr);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorMessage,currentChar);\n          goto LAB_00104e93;\n        }\n        dirPtr = (undefined8 *)xmalloc(0x18);\n        currentChar = *archivePtr;\n        *dirPtr = tempDirPtr;\n        dirPtr[2] = 0;\n        dirPtr[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      statResult = 0;\n      if (DAT_001279eb != '\\0') {\n        statStruct = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statStruct->st_dev = 0;\n          statStruct = (stat *)((long)statStruct + (ulong)isNegative * -8 + 4);\n        }\n        filePtr = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          filePtr = archivePtr;\n        }\n        statResult = (**(code **)(filePtr[1] + 0x1e8))(archivePtr,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          currentChar = *archivePtr;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorMessage,currentChar);\n        }\n      }\n      tempDirPtr = (undefined8 *)xmalloc(0x18);\n      tempDirPtr[1] = currentChar;\n      *tempDirPtr = dirPtr;\n      tempDirPtr[2] = 0;\n      formatValid = bfd_check_format(archivePtr,1);\n      if (formatValid == '\\0') {\n        errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,archivePtr,0,errorMessage);\n        filePtr = (char **)bfd_openw(currentChar,format);\n        if (filePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        statCmd = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          statCmd = archivePtr;\n        }\n        architecture = (**(code **)(statCmd[1] + 0x1e8))(archivePtr,&stack0x000000e0);\n        fileSize = archiveSize;\n        if (architecture == 0) {\n          if (archiveSize < 0) {\n            errorMessage = FUN_001125fa(archivePtr);\n            errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(errorMessage,errorMessage);\n          }\n          else {\n            architecture = bfd_seek(archivePtr,0,0);\n            if (architecture == 0) {\n              if (DAT_001279e9 != '\\0') {\n                currentChar = *filePtr;\n                errorMessage = FUN_001125fa(archivePtr);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,errorMessage,currentChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesLeft) {\n                bytesLeft = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesLeft = fileSize;\n                }\n                breadResult = bfd_bread(buffer,bytesLeft,archivePtr);\n                statCmd = archivePtr;\n                if ((bytesLeft != breadResult) ||\n                   (breadResult = bfd_bwrite(buffer,bytesLeft,filePtr), statCmd = filePtr, bytesLeft != breadResult\n                   )) {\n                  FUN_001126c0(0,statCmd,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*filePtr,mode | 0x100);\n              free(buffer);\n              formatValid = bfd_close_all_done(filePtr);\n              if (formatValid == '\\0') {\n                FUN_001126c0(currentChar,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMessage = FUN_001125fa(archivePtr);\n            FUN_0011a110(errorMessage);\n          }\n        }\n        else {\n          FUN_001126c0(0,archivePtr,0,0);\n        }\nLAB_00104f00:\n        formatValid = bfd_close_all_done(filePtr);\n        if (formatValid == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (isFormatValid._7_1_ == '\\0') {\n          filePtr = (char **)bfd_openw(currentChar,*(undefined8 *)archivePtr[1]);\n        }\n        else {\n          filePtr = (char **)bfd_openw(currentChar,format);\n        }\n        if (filePtr == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatValid = FUNC_00114e50(archivePtr,filePtr,returnAddress);\n        if (formatValid == '\\0') {\n          architecture = bfd_get_arch(archivePtr);\n          if (architecture == 0) goto LAB_00104d75;\n          formatValid = bfd_close_all_done(filePtr);\n          if (formatValid == '\\0') {\n            FUN_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatValid = bfd_close(filePtr);\n        if (formatValid == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (statResult == 0)) {\n          FUN_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,format);\n        tempDirPtr[2] = fileSize;\n        *archiveSizePtr = fileSize;\n        archiveSizePtr = (long *)(fileSize + 0xf0);\n        filePtr = (char **)bfd_openr_next_archived_file(idx,archivePtr);\n        bfd_close(archivePtr);\n        archivePtr = filePtr;\n      }\n      if ((DAT_00127a40 != 0) || (archivePtr == (char **)0x0)) {\n        *archiveSizePtr = 0;\n        buffer = (void *)xstrdup(*outputPath);\n        if (DAT_00127a40 == 0) {\n          closePtr = bfd_close;\n        }\n        else {\n          closePtr = bfd_close_all_done;\n        }\n        formatValid = (*closePtr)(outputPath);\n        if (formatValid == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*idx);\n        formatValid = bfd_close(idx);\n        if (formatValid == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currentChar = *archivePtr;\n      path = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    currentChar = currentChar;\n    if ((*currentChar == '.') && (currentChar = currentChar + 1, currentChar[1] == '.')) {\n      currentChar = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorMessage,path);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (tempDirPtr != (undefined8 *)0x0) {\n          if (tempDirPtr[2] == 0) {\n            rmdir((char *)tempDirPtr[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempDirPtr[1]);\n          }\n          free((void *)tempDirPtr[1]);\n          dirPtr = (undefined8 *)*tempDirPtr;\n          free(tempDirPtr);\n          tempDirPtr = dirPtr;\n        }\n        rmdir(tempDir);\n        free(tempDir);\n        return;\n      }\n    }\n    for (; (currentChar = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_member_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "extract_and_process_data_0010e453",
                "param_1": "dataSize",
                "param_2": "dataString",
                "param_3": "dataPointers",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "tempLength",
                "ppcVar6": "currentPointer",
                "lVar7": "offset",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined8 extractAndProcessData_0010e453(long dataSize,char *dataString,char **dataPointers)\n\n{\n  long length;\n  char result;\n  size_t stringLength;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long tempLength;\n  char **currentPointer;\n  long offset;\n  \n  if (dataPointers == (char **)0x0) {\n    if (dataString != (char *)0x0) {\n      stringLength = strlen(dataString);\n      formattedString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)formattedString,\"xe%s:\",dataString);\nLAB_0010e578:\n      result = FUN_00109b52(dataSize,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    tempLength = 10;\n    currentPointer = dataPointers;\n    if (dataString != (char *)0x0) {\n      stringLength = strlen(dataString);\n      tempLength = stringLength + 10;\n    }\n    for (; *currentPointer != (char *)0x0; currentPointer = currentPointer + 1) {\n      stringLength = strlen(*currentPointer);\n      tempLength = tempLength + 0x14 + stringLength;\n    }\n    formattedString = (undefined2 *)xmalloc(tempLength);\n    if (dataString == (char *)0x0) {\n      *formattedString = 0x65;\n      tempLength = 0;\n    }\n    else {\n      tempLength = *(long *)(dataSize + 0x68);\n      *(long *)(dataSize + 0x68) = tempLength + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",dataString,tempLength);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)dataPointers + offset);\n      stringLength = strlen((char *)formattedString);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + stringLength) = 0x3b;\n    if (dataString == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(dataSize,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = FUN_00109cf4(dataSize,tempLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_process_data_00109d5c",
                "param_1": "input_data",
                "lVar1": "result",
                "uVar2": "processed_data"
            },
            "code": "\nundefined8 check_and_process_data_00109d5c(undefined8 input_data)\n\n{\n  long result;\n  undefined8 processed_data;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    processed_data = FUN_00109cf4(input_data,result,0);\n    return processed_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_param_and_return_value_0010ed2c",
                "param_1": "context",
                "param_2": "newValue",
                "param_3": "extraInput",
                "cVar1": "isValid",
                "iVar2": "counter",
                "extraout_RDX": "extraResult",
                "uVar3": "updatedValue",
                "in_R10": "additionalInput",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] updateParamAndReturnValue_0010ed2c(long context,ulong newValue,undefined8 extraInput)\n\n{\n  char isValid;\n  int counter;\n  undefined8 extraResult;\n  ulong updatedValue;\n  undefined8 additionalInput;\n  undefined returnValue [16];\n  \n  if (*(ulong *)(context + 0x1f0) < newValue) {\n    *(ulong *)(context + 0x1f0) = newValue;\n  }\n  if (*(long *)(context + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(context + 0x1f8) != 0) {\n      counter = *(int *)(context + 0x1f8) + -1;\n      updatedValue = CONCAT71((int7)((ulong)extraInput >> 8),1);\n      *(int *)(context + 0x1f8) = counter;\n      if (counter != 0) {\n        returnValue = FUN_0010e2f0(context,0xe0,0,newValue - *(long *)(context + 0x200),0,additionalInput);\n        return returnValue;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    isValid = FUN_0010e2f0(context,0xc0,0,*(long *)(context + 0x208),0);\n    if (isValid != '\\0') {\n      *(undefined8 *)(context + 0x208) = 0xffffffffffffffff;\n      extraInput = extraResult;\n      goto LAB_0010ed78;\n    }\n  }\n  updatedValue = 0;\nLAB_0010edae:\n  returnValue._0_8_ = updatedValue & 0xffffffff;\n  returnValue._8_8_ = additionalInput;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_param_and_return_value_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_return_0011a1b0",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "result",
                "extraout_var": "extra_var",
                "uVar4": "combined_result",
                "auVar5": "return_value"
            },
            "code": "\nundefined  [16] compareAndReturn_0011a1b0(ulong *array1,ulong *array2,undefined8 param3,undefined8 param4)\n\n{\n  ulong value1;\n  ulong value2;\n  int result;\n  undefined4 extra_var;\n  ulong combined_result;\n  undefined return_value [16];\n  \n  combined_result = *array1;\n  if (*array2 <= *array1) {\n    combined_result = *array2;\n  }\n  result = memcmp((void *)(array1[3] + 3),(void *)(array2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(extra_var,result);\n  if (result == 0) {\n    value1 = array1[8];\n    if (value1 < array2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      value2 = array2[8];\n      if (value2 < array1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (value2 < value1) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (value2 <= value1) {\n              if (array1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return_value._8_8_ = param4;\n  return_value._0_8_ = combined_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_return_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_attributes_001163d0",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "size",
                "param_4": "buffer",
                "uVar1": "result",
                "uVar2": "input_1",
                "uVar3": "input_2",
                "bVar4": "condition",
                "puVar5": "pointer",
                "iVar6": "counter",
                "uVar7": "error_message",
                "lVar8": "result_size",
                "__ptr": "temp_buffer",
                "uVar9": "temp_1",
                "uVar10": "temp_2",
                "uVar11": "temp_3",
                "uVar12": "temp_4",
                "uVar13": "alignment_size",
                "uVar14": "temp_5",
                "uVar15": "temp_6",
                "uVar16": "remaining_size",
                "puVar17": "attribute_pointer",
                "puVar18": "temp_buffer_pointer",
                "cVar19": "temp_char",
                "puVar20": "temp_7",
                "iVar21": "temp_counter",
                "puVar22": "temp_buffer_pointer_2",
                "puVar23": "attributes",
                "uVar24": "temp_8",
                "__nmemb": "attributes_length",
                "puVar25": "temp_buffer_pointer_3",
                "bVar26": "temp_bool",
                "local_88": "var_1",
                "uStack_80": "var_2",
                "local_70": "var_3",
                "local_68": "result_size",
                "local_60": "sorted_attributes",
                "size": "param_3"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_attributes_001163d0(undefined8 *input_param,undefined8 *output_param,ulong size,undefined *buffer)\n\n{\n  ulong result;\n  undefined8 input_1;\n  undefined8 input_2;\n  bool condition;\n  ulong *pointer;\n  int counter;\n  undefined8 error_message;\n  long result_size;\n  void *temp_buffer;\n  ulong temp_1;\n  ulong temp_2;\n  ulong temp_3;\n  ulong temp_4;\n  undefined *temp_buffer_00;\n  ulong alignment_size;\n  ulong temp_5;\n  ulong temp_6;\n  ulong remaining_size;\n  ulong *attribute_pointer;\n  undefined *temp_buffer_pointer;\n  char temp_char;\n  undefined *temp_7;\n  int temp_counter;\n  undefined *temp_buffer_pointer_2;\n  ulong *attributes;\n  ulong temp_8;\n  param_3_t attributes_length;\n  ulong *temp_buffer_pointer_3;\n  byte temp_bool;\n  ulong var_1;\n  ulong var_2;\n  ulong var_3;\n  ulong result_size;\n  ulong *sorted_attributes;\n  \n  temp_bool = 0;\n  result_size = bfd_get_reloc_upper_bound();\n  result_size = size;\n  if (0 < result_size) {\n    temp_buffer = (void *)xmalloc(result_size);\n    result_size = bfd_canonicalize_reloc(input_param,output_param,temp_buffer,DAT_001278d0);\n    free(temp_buffer);\n    if (result_size != 0) {\n      if (_DAT_001264c0 == 0) {\n        input_1 = *input_param;\n        input_2 = *output_param;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(error_message,input_1,input_2);\n      }\n      sorted_attributes = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  sorted_attributes = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  var_1 = 0;\n  var_3 = 0;\n  remaining_size = size;\n  temp_6 = 0;\n  attributes = sorted_attributes;\n  temp_5 = 0;\n  temp_buffer_pointer_2 = buffer;\n  while (0xb < remaining_size) {\n    temp_2 = (**(code **)(input_param[1] + 0x40))(temp_buffer_pointer_2);\n    *attributes = temp_2;\n    temp_2 = (**(code **)(input_param[1] + 0x40))(temp_buffer_pointer_2 + 4);\n    attributes[1] = temp_2;\n    temp_3 = (**(code **)(input_param[1] + 0x40))(temp_buffer_pointer_2 + 8);\n    temp_2 = *attributes;\n    attributes[2] = temp_3;\n    temp_4 = attributes[1];\n    alignment_size = temp_2 + 3 & 0xfffffffffffffffc;\n    attributes[6] = alignment_size;\n    if (temp_4 != (temp_4 + 3 & 0xfffffffffffffffc)) {\n      result_size = dcgettext(0,\"corrupt GNU build attribute note: description param_3 not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_3 - 0x100) {\n      result_size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = alignment_size + temp_4 + 0xc;\n    if (remaining_size < result) {\n      result_size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_2 < 2) {\n      result_size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    attributes[3] = (ulong)(temp_buffer_pointer_2 + 0xc);\n    attributes[4] = (ulong)(temp_buffer_pointer_2 + alignment_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (alignment_size + temp_4));\n    if (temp_2 != 2) {\n      if (temp_buffer_pointer_2[0xc] == '$') {\n        if ((temp_buffer_pointer_2[0xd] == '\\x01') && (temp_buffer_pointer_2[0xe] == '1')) {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < temp_2) && (temp_buffer_pointer_2[0xc] == 'G')) && (temp_buffer_pointer_2[0xd] == 'A')) &&\n              ((temp_buffer_pointer_2[0xe] == '$' && (temp_buffer_pointer_2[0xf] == '\\x01')))) {\n        if (temp_buffer_pointer_2[0x10] == '2') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        if (temp_buffer_pointer_2[0x10] == '3') {\n          remaining_size = FUN_00116490();\n          return remaining_size;\n        }\n        result_size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_1 = temp_6;\n    temp_8 = temp_5;\n    if (temp_4 == 0) {\n      if (temp_3 == 0x100) {\n        attributes[7] = var_1;\nLAB_001164af:\n        temp_4 = temp_5;\n        temp_8 = temp_5;\n      }\n      else {\n        attributes[7] = var_3;\nLAB_0011669e:\n        temp_1 = temp_6;\n        temp_4 = temp_6;\n      }\n    }\n    else {\n      if (temp_4 != 0x10) {\n        if (temp_4 < 0x11) {\n          if (temp_4 == 4) {\n            temp_3 = (**(code **)(input_param[1] + 0x40))();\n            temp_4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_4 == 8) {\n            remaining_size = FUN_001086af();\n            return remaining_size;\n          }\n        }\n        result_size = dcgettext(0,\"corrupt GNU build attribute note: bad description param_3\",5);\n        goto LAB_0010849a;\n      }\n      temp_3 = (**(code **)(input_param[1] + 0x28))(temp_buffer_pointer_2 + alignment_size + 0xc);\n      temp_4 = (**(code **)(input_param[1] + 0x28))();\n      if (temp_4 < temp_3) {\n        temp_3 = temp_4;\n      }\nLAB_00116631:\n      if (attributes[2] == 0x100) {\n        if (temp_3 == 0) {\n          temp_3 = var_1;\n        }\n        temp_2 = *attributes;\n        attributes[7] = temp_3;\n        temp_8 = temp_4;\n        var_1 = temp_3;\n        if (temp_4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_3 == 0) {\n          temp_3 = var_3;\n        }\n        temp_2 = *attributes;\n        attributes[7] = temp_3;\n        temp_1 = temp_4;\n        var_3 = temp_3;\n        if (temp_4 == 0) goto LAB_0011669e;\n      }\n    }\n    attributes[8] = temp_4;\n    if (*(char *)((attributes[3] - 1) + temp_2) != '\\0') {\n      result_size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attributes = attributes + 9;\n    temp_6 = temp_1;\n    temp_5 = temp_8;\n    temp_buffer_pointer_2 = temp_buffer_pointer_2 + result;\n  }\n  if (remaining_size == 0) {\n    input_1 = *input_param;\n    input_2 = *output_param;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(error_message,input_1,input_2);\n    attributes_length = ((long)attributes - (long)sorted_attributes >> 3) * -0x71c71c71c71c71c7;\n    qsort(sorted_attributes,attributes_length,0x48,FUN_0011a1b0);\n    for (attribute_pointer = sorted_attributes; attribute_pointer < attributes; attribute_pointer = attribute_pointer + 9) {\n      remaining_size = attribute_pointer[2];\n      if (remaining_size != 0) {\n        temp_6 = attribute_pointer[7];\n        temp_5 = attribute_pointer[8];\n        temp_buffer_pointer_3 = attribute_pointer;\n        temp_counter = 0;\n        if (temp_6 == temp_5) {\n          attribute_pointer[2] = 0;\n        }\n        else {\n          do {\n            do {\n              pointer = temp_buffer_pointer_3;\n              temp_buffer_pointer_3 = pointer + -9;\n              if (temp_buffer_pointer_3 < sorted_attributes) goto LAB_001167f5;\n              temp_2 = pointer[-7];\n            } while (temp_2 == 0);\n            if ((*temp_buffer_pointer_3 != *attribute_pointer) ||\n               (counter = memcmp((void *)pointer[-6],(void *)attribute_pointer[3],*attribute_pointer), counter != 0)) break;\n            temp_4 = pointer[-2];\n            temp_3 = pointer[-1];\n            if (temp_6 == temp_4) {\n              if (temp_5 == temp_3) {\n                attribute_pointer[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp_5 <= temp_3) {\n                attribute_pointer[2] = 0;\n                break;\n              }\n              if (temp_3 < temp_6) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp_3) || (temp_6 <= (temp_3 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (temp_2 == 0x101)) {\n                if (temp_3 <= temp_5) {\n                  temp_3 = temp_5;\n                }\n                if (temp_4 < temp_6) {\n                  temp_6 = temp_4;\n                }\n                pointer[-1] = temp_3;\n                pointer[-2] = temp_6;\n                attribute_pointer[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_4 <= temp_6) goto LAB_001167a6;\n              if (temp_3 < temp_6) goto LAB_0010852c;\n              if (temp_5 < temp_6) {\n                if ((0xfffffffffffffff0 < temp_5) || (temp_4 <= (temp_5 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp_5 != temp_3) goto LAB_001167b8;\n            }\nFUN_00116852:\n            condition = temp_counter < 0x11;\n            temp_counter = temp_counter + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(sorted_attributes,attributes_length,0x48,FUN_0011a250);\n    temp_buffer_00 = (undefined *)xmalloc(size * 2);\n    var_2 = 0;\n    var_3 = 0;\n    temp_buffer_pointer_2 = temp_buffer_00;\n    for (attribute_pointer = sorted_attributes; attribute_pointer < attributes; attribute_pointer = attribute_pointer + 9) {\n      if (attribute_pointer[2] != 0) {\n        temp_buffer_pointer = temp_buffer_pointer_2 + 0xc;\n        if ((attribute_pointer[7] == var_3) && (attribute_pointer[8] == var_2)) {\n          (**(code **)(input_param[1] + 0x50))(*attribute_pointer,temp_buffer_pointer_2);\n          (**(code **)(input_param[1] + 0x50))(0,temp_buffer_pointer_2 + 4);\n          (**(code **)(input_param[1] + 0x50))(attribute_pointer[2],temp_buffer_pointer_2 + 8);\n          temp_6 = attribute_pointer[6];\n          remaining_size = *attribute_pointer;\n          temp_buffer_pointer_2 = (undefined *)attribute_pointer[3];\n          temp_7 = temp_buffer_pointer;\n          for (temp_5 = remaining_size; temp_5 != 0; temp_5 = temp_5 - 1) {\n            *temp_7 = *temp_buffer_pointer_2;\n            temp_buffer_pointer_2 = temp_buffer_pointer_2 + (ulong)temp_bool * -2 + 1;\n            temp_7 = temp_7 + (ulong)temp_bool * -2 + 1;\n          }\n          if (remaining_size < temp_6) {\n            for (result_size = temp_6 - remaining_size; result_size != 0; result_size = result_size + -1) {\n              *temp_7 = 0;\n              temp_7 = temp_7 + (ulong)temp_bool * -2 + 1;\n            }\n          }\n          temp_buffer_pointer_2 = temp_buffer_pointer + temp_6;\n        }\n        else {\n          (**(code **)(input_param[1] + 0x50))();\n          if (*(int *)(input_param[1] + 8) == 5) {\n            temp_char = (*(char *)(input_param[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            temp_char = '\\b';\n          }\n          (**(code **)(input_param[1] + 0x50))(temp_char,temp_buffer_pointer_2 + 4);\n          (**(code **)(input_param[1] + 0x50))(attribute_pointer[2],temp_buffer_pointer_2 + 8);\n          remaining_size = *attribute_pointer;\n          temp_buffer_pointer_2 = (undefined *)attribute_pointer[3];\n          temp_7 = temp_buffer_pointer;\n          for (temp_6 = remaining_size; temp_6 != 0; temp_6 = temp_6 - 1) {\n            *temp_7 = *temp_buffer_pointer_2;\n            temp_buffer_pointer_2 = temp_buffer_pointer_2 + (ulong)temp_bool * -2 + 1;\n            temp_7 = temp_7 + (ulong)temp_bool * -2 + 1;\n          }\n          temp_6 = attribute_pointer[6];\n          if (remaining_size < temp_6) {\n            for (result_size = temp_6 - remaining_size; result_size != 0; result_size = result_size + -1) {\n              *temp_7 = 0;\n              temp_7 = temp_7 + (ulong)temp_bool * -2 + 1;\n            }\n          }\n          result_size = input_param[1];\n          temp_buffer_pointer = temp_buffer_pointer + temp_6;\n          temp_buffer_pointer_2 = temp_buffer_pointer + 8;\n          if ((*(int *)(result_size + 8) == 5) && (*(char *)(input_param[0x22] + 4) == '\\x02')) {\n            (**(code **)(result_size + 0x38))(attribute_pointer[7],temp_buffer_pointer);\n            (**(code **)(input_param[1] + 0x38))(attribute_pointer[8],temp_buffer_pointer_2);\n            temp_buffer_pointer_2 = temp_buffer_pointer + 0x10;\n          }\n          else {\n            (**(code **)(result_size + 0x50))(attribute_pointer[7],temp_buffer_pointer);\n            (**(code **)(input_param[1] + 0x50))(attribute_pointer[8],temp_buffer_pointer + 4);\n          }\n          var_3 = attribute_pointer[7];\n          var_2 = attribute_pointer[8];\n        }\n      }\n    }\n    temp_6 = (long)temp_buffer_pointer_2 - (long)temp_buffer_00;\n    remaining_size = temp_6;\n    temp_buffer_pointer_2 = temp_buffer_00;\n    result_size = size;\n    if (temp_6 < size) {\n      for (; result_size = temp_6, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *buffer = *temp_buffer_pointer_2;\n        temp_buffer_pointer_2 = temp_buffer_pointer_2 + (ulong)temp_bool * -2 + 1;\n        buffer = buffer + (ulong)temp_bool * -2 + 1;\n      }\n    }\n    free(temp_buffer_00);\n  }\n  else {\n    result_size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (result_size != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,input_param,output_param,result_size);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(sorted_attributes);\n  return result_size;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "xcalloc",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitStatus",
                "uVar1": "usageString",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printUsageAndExit_00108a2a(FILE *outputFile,int exitStatus)\n\n{\n  undefined8 usageString;\n  char *localizedString;\n  \n  usageString = DAT_00127600;\n  localizedString = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedString,usageString);\n  localizedString = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitStatus == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitStatus);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_binary_info_00108c86",
                "param_1": "binary_ptr",
                "cVar1": "is_valid",
                "iVar2": "cmp_result",
                "sVar3": "str_len",
                "puVar4": "new_string",
                "lVar5": "ptr_offset",
                "__s": "current_string",
                "__s1": "arch_string",
                "puVar6": "new_string_ptr",
                "uVar7": "return_value",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_binary_info_00108c86(long *binary_ptr)\n\n{\n  char is_valid;\n  int cmp_result;\n  size_t str_len;\n  undefined2 *new_string;\n  long ptr_offset;\n  char *current_string;\n  char *arch_string;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  ptr_offset = *binary_ptr;\n  current_string = (char *)(ptr_offset + 4);\n  is_valid = FUN_00113fb0(current_string,&DAT_0011b73b);\n  if (is_valid == '\\0') {\n    is_valid = FUN_00113fb0(current_string,\"bsdrv-\");\n    if (is_valid == '\\0') {\n      is_valid = FUN_00113fb0(current_string,\"rtdrv-\");\n      if (is_valid == '\\0') {\n        return 0xffffffff;\n      }\n      current_string = (char *)(ptr_offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      current_string = (char *)(ptr_offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  str_len = strlen(current_string);\n  new_string = (undefined2 *)xmalloc(str_len + 8);\n  arch_string = current_string + 4;\n  new_string_ptr = new_string;\n  for (ptr_offset = str_len + 1; ptr_offset != 0; ptr_offset = ptr_offset + -1) {\n    *(char *)new_string_ptr = *current_string;\n    current_string = current_string + (ulong)flag * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  cmp_result = strcmp(arch_string,\"ia32\");\n  if (cmp_result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    cmp_result = strcmp(arch_string,\"x86_64\");\n    if (cmp_result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      cmp_result = strcmp(arch_string,\"aarch64\");\n      if (cmp_result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *binary_ptr = (long)new_string;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_binary_info_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,errorFormat,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "initialize_and_close_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "pointerArray",
                "bfd_close_all_done": "closeAllDone"
            },
            "code": "\nundefined4 initializeAndClose_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *pointerArray;\n  \n  FUN_0011a110(*pointerArray);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "initialize_and_close_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "registerValue",
                "unaff_R14": "memoryAddress"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint registerValue;\n  long memoryAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((registerValue & 0x10) == 0)) && ((registerValue & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((registerValue & 0x40) == 0)) && ((registerValue & 0x60) != 0x60)) {\n      *(uint *)(memoryAddress + 0x14) = flags | registerValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_string_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "i",
                "puVar3": "destPtr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminateString_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *destPtr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *destPtr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    destPtr = destPtr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0011173a",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_list_ptr",
                "param_2": "slot_index",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "excessive_index_error_msg",
                "plVar2": "new_slot_ptr",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "unused_byte",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_list_ptr,ulong slot_index,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 excessive_index_error_msg;\n  long *new_slot_ptr;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte unused_byte;\n  undefined result [16];\n  \n  unused_byte = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_list_ptr == (long *)0x0) {\n        new_slot_ptr = (long *)xmalloc(0x88);\n        *slot_list_ptr = new_slot_ptr;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)new_slot_ptr = 0;\n          new_slot_ptr = (long *)((long)new_slot_ptr + (ulong)unused_byte * -8 + 4);\n        }\n      }\n      slot_list_ptr = (long **)*slot_list_ptr;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_list_ptr == (long *)0x0) {\n      new_slot_ptr = (long *)xmalloc(0x88);\n      *slot_list_ptr = new_slot_ptr;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot_ptr = 0;\n        new_slot_ptr = (long *)((long)new_slot_ptr + (ulong)unused_byte * -8 + 4);\n      }\n    }\n    result._8_8_ = unused_param_2;\n    result._0_8_ = *slot_list_ptr + slot_index + slot_offset + 1;\n    return result;\n  }\n  excessive_index_error_msg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(excessive_index_error_msg,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_block_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar3": "loopCounter",
                "bVar4": "byteValue",
                "puVar1": "memoryBlock",
                "puVar2": "tempBlock"
            },
            "code": "\nundefined8 *\ninitializeMemoryBlock_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *tempBlock;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  tempBlock = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)tempBlock = 0;\n    tempBlock = (undefined8 *)((long)tempBlock + (ulong)byteValue * -8 + 4);\n  }\n  *memoryBlock = input1;\n  *(undefined *)(memoryBlock + 1) = input2;\n  memoryBlock[2] = input3;\n  memoryBlock[3] = input4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  tempBlock = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = tempBlock;\n  *tempBlock = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_pointer_00109b2f",
                "param_1": "inputPointer",
                "__ptr": "currentPointer",
                "puVar1": "extractedPointer"
            },
            "code": "\nundefined8 * extractNextPointer_00109b2f(long inputPointer)\n\n{\n  undefined8 *currentPointer;\n  undefined8 *extractedPointer;\n  \n  currentPointer = *(undefined8 **)(inputPointer + 0x60);\n  if (currentPointer != (undefined8 *)0x0) {\n    extractedPointer = (undefined8 *)currentPointer[1];\n    *(undefined8 *)(inputPointer + 0x60) = *currentPointer;\n    free(currentPointer);\n    return extractedPointer;\n  }\n  return currentPointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a181",
                "FUN_0010a83e",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "extract_next_pointer_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "errorMessage",
                "param_2": "symbolName1",
                "param_3": "symbolName2",
                "param_4": "result",
                "ppcVar1": "symbolNames",
                "pcVar2": "duplicateSymbol",
                "lVar3": "symbolFound",
                "uVar4": "translationTable",
                "plVar5": "htab_slot",
                "xmalloc": "allocateMemory",
                "strdup": "duplicateString",
                "htab_find": "findSymbol",
                "htab_find_slot": "findSymbolSlot",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nundefined8 checkSymbolRedefinition_00108d9a(undefined8 errorMessage,char *symbolName1,char *symbolName2,undefined8 result)\n\n{\n  char **symbolNames;\n  char *duplicateSymbol;\n  long symbolFound;\n  undefined8 translationTable;\n  long *htab_slot;\n  \n  symbolNames = (char **)xmalloc(0x10);\n  duplicateSymbol = strdup(symbolName1);\n  *symbolNames = duplicateSymbol;\n  duplicateSymbol = strdup(symbolName2);\n  translationTable = DAT_001278f0;\n  symbolNames[1] = duplicateSymbol;\n  symbolFound = htab_find(translationTable,symbolNames);\n  if (symbolFound != 0) {\n    translationTable = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(translationTable,errorMessage,symbolName1);\n  }\n  symbolFound = htab_find(DAT_001278e8,symbolName2);\n  if (symbolFound != 0) {\n    translationTable = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(translationTable,errorMessage,symbolName2);\n  }\n  htab_slot = (long *)htab_find_slot(DAT_001278f0,symbolNames,1);\n  translationTable = DAT_001278e8;\n  *htab_slot = (long)symbolNames;\n  duplicateSymbol = symbolNames[1];\n  symbolNames = (char **)htab_find_slot(translationTable,duplicateSymbol,1);\n  *symbolNames = duplicateSymbol;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "create_formatted_string_0010e9a0",
                "param_1": "inputParam",
                "param_2": "formatParam",
                "param_3": "typeParam",
                "param_4": "outputParam",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "string3",
                "lVar1": "counter",
                "uVar2": "returnValue",
                "uVar6": "formatChar",
                "pcVar5": "typeChar",
                "sVar3": "formatLength",
                "sVar4": "stringLength"
            },
            "code": "\nundefined4 createFormattedString_0010e9a0(long inputParam,char *formatParam,undefined4 typeParam,undefined8 outputParam)\n\n{\n  long counter;\n  undefined4 returnValue;\n  byte *string1;\n  byte *string2;\n  size_t formatLength;\n  size_t stringLength;\n  char *string3;\n  char *typeChar;\n  undefined8 formatChar;\n  \n  string1 = (byte *)FUN_00109b2f();\n  switch(typeParam) {\n  case 1:\n    typeChar = \"G\";\n    formatChar = 0x20;\n    break;\n  case 2:\n    typeChar = \"S\";\n    formatChar = 0x26;\n    break;\n  case 3:\n    typeChar = \"V\";\n    formatChar = 0x26;\n    break;\n  case 4:\n    typeChar = \"\";\n    formatChar = 0x80;\n    if (((&_sch_istable)[(ulong)*string1 * 2] & 4) == 0) {\n      counter = *(long *)(inputParam + 0x68);\n      *(long *)(inputParam + 0x68) = counter + 1;\n      formatLength = strlen((char *)string1);\n      string2 = (byte *)xmalloc(formatLength + 0x14);\n      sprintf((char *)string2,\"%ld=%s\",counter,string1);\n      free(string1);\n      string1 = string2;\n    }\n    break;\n  case 5:\n    typeChar = \"r\";\n    formatChar = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  formatLength = strlen(formatParam);\n  stringLength = strlen((char *)string1);\n  string3 = (char *)xmalloc(formatLength + 3 + stringLength);\n  sprintf(string3,\"%s:%s%s\",formatParam,typeChar,string1);\n  free(string1);\n  returnValue = FUN_0010e2f0(inputParam,formatChar,0,outputParam,string3);\n  if ((char)returnValue != '\\0') {\n    free(string3);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "sectionValue",
                "uVar2": "errorMsg",
                "dcgettext": "getLocalizedError"
            },
            "code": "\nvoid printSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMsg;\n  undefined8 *sectionPtr;\n  \n  sectionValue = *sectionPtr;\n  errorMsg = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMsg,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "obtainLocalizedText"
            },
            "code": "\nvoid printErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTableWithMemoryAllocation",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "freeMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,freeMemory);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "initialize_alignment_00108179",
                "lVar1": "alignmentVar1",
                "lVar2": "alignmentVar2",
                "cVar3": "alignmentChar",
                "lVar4": "alignmentError",
                "lVar5": "alignmentVar5",
                "unaff_RBX": "registerBX",
                "unaff_RBP": "registerBP",
                "unaff_R12": "registerR12",
                "unaff_R14B": "registerR14B",
                "unaff_R15": "registerR15"
            },
            "code": "\nvoid initializeAlignment_00108179(void)\n\n{\n  long alignmentVar1;\n  long alignmentVar2;\n  char alignmentChar;\n  long alignmentError;\n  long alignmentVar5;\n  long registerBX;\n  long registerBP;\n  long registerR12;\n  char registerR14B;\n  long registerR15;\n  \n  alignmentError = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(registerR15 + 0xb4) = *(undefined4 *)(registerBX + 0xb4);\n  *(byte *)(registerR15 + 0x28) =\n       *(byte *)(registerR15 + 0x28) & 0xcf | *(byte *)(registerBX + 0x28) & 0x30;\n  *(long *)(registerBX + 0x60) = registerR15;\n  *(undefined8 *)(registerBX + 0x58) = 0;\n  if ((*(byte *)(registerBX + 0x27) & 2) != 0) {\n    alignmentVar1 = *(long *)(registerBX + 0xd0);\n    alignmentVar5 = FUN_00115d00(alignmentVar1,*(undefined8 *)(registerBX + 0xe0));\n    if ((alignmentVar5 != 0) &&\n       (alignmentVar2 = *(long *)(registerR12 + 8), *(uint *)(alignmentVar5 + 0x18) = *(uint *)(alignmentVar5 + 0x18) | 0x20,\n       *(int *)(alignmentVar2 + 8) == 5)) {\n      *(long *)(alignmentVar1 + 0xb0) = alignmentVar5;\n      alignmentChar = (**(code **)(*(long *)(registerBP + 8) + 0x158))();\n      if (alignmentChar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  alignmentChar = (**(code **)(*(long *)(registerBP + 8) + 0x158))();\n  if (alignmentChar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (registerR14B != '\\0') {\n    *(undefined4 *)(*(long *)(registerR15 + 0xd0) + 4) = 8;\n  }\n  if (alignmentError != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "initialize_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "process_file_00109022",
                "param_1": "fileCount",
                "param_2": "typeNumbers",
                "uVar1": "typeIndex",
                "pcVar2": "errorString",
                "plVar3": "type",
                "lVar4": "loopCount",
                "uVar5": "fileIndex",
                "pplVar6": "typePtr",
                "bVar7": "byteVar",
                "auVar8": "result",
                "dcgettext": "getLocaleString",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nundefined  [16] processFile_00109022(long fileCount,uint *typeNumbers,undefined8 param_3,undefined8 param_4)\n\n{\n  uint typeIndex;\n  char *errorString;\n  long *type;\n  long loopCount;\n  uint fileIndex;\n  long **typePtr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  fileIndex = *typeNumbers;\n  typeIndex = typeNumbers[1];\n  if (((int)fileIndex < 0) || (*(uint *)(fileCount + 0x80) <= fileIndex)) {\n    errorString = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(errorOutput,errorString,(ulong)fileIndex);\n  }\n  else {\n    if (-1 < (int)typeIndex) {\n      typePtr = (long **)(*(long *)(fileCount + 0x88) + (long)(int)fileIndex * 8);\n      for (fileIndex = typeIndex; 0xf < (int)fileIndex; fileIndex = fileIndex - 0x10) {\n        if (*typePtr == (long *)0x0) {\n          type = (long *)xmalloc(0x88);\n          *typePtr = type;\n          for (loopCount = 0x22; loopCount != 0; loopCount = loopCount + -1) {\n            *(undefined4 *)type = 0;\n            type = (long *)((long)type + (ulong)byteVar * -8 + 4);\n          }\n        }\n        typePtr = (long **)*typePtr;\n      }\n      if (*typePtr == (long *)0x0) {\n        type = (long *)xmalloc(0x88);\n        *typePtr = type;\n        for (loopCount = 0x22; loopCount != 0; loopCount = loopCount + -1) {\n          *(undefined4 *)type = 0;\n          type = (long *)((long)type + (ulong)byteVar * -8 + 4);\n        }\n      }\n      type = *typePtr + (long)(int)((typeIndex >> 4) * -0x10 + typeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorString = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(errorOutput,errorString,(ulong)typeIndex);\n  }\n  type = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param_4;\n  result._0_8_ = type;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_file_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file",
                "param_2": "variable",
                "param_3": "value",
                "param_4": "type",
                "param_5": "param5",
                "param_6": "param6",
                "auVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "allocatedMemory",
                "cVar4": "useFirstType",
                "lVar5": "loopCounter",
                "lVar6": "currentFile",
                "piVar7": "allocatedMemoryPointer",
                "bVar8": "iterPositive",
                "auVar9": "finalResult"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file,long variable,ulong value,int type,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined result [16];\n  undefined8 returnValue;\n  int *allocatedMemory;\n  char useFirstType;\n  long loopCounter;\n  long currentFile;\n  int *allocatedMemoryPointer;\n  byte iterPositive;\n  undefined finalResult [16];\n  \n  iterPositive = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = value;\n    return result << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(file + 8) == 0) || (currentFile = *(long *)(file + 0x10), currentFile == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (type - 1U < 2) {\n        currentFile = currentFile + 0x10;\n        useFirstType = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(file + 0x20) == 0) {\n        currentFile = currentFile + 0x10;\n        useFirstType = '\\0';\n      }\n      else {\n        currentFile = *(long *)(file + 0x20) + 0x28;\n        useFirstType = '\\0';\n      }\n      currentFile = FUN_00112925(currentFile,variable,2,useFirstType);\n      if (currentFile != 0) {\n        allocatedMemory = (int *)xmalloc(0x18);\n        allocatedMemoryPointer = allocatedMemory + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *allocatedMemoryPointer = 0;\n          allocatedMemoryPointer = allocatedMemoryPointer + (ulong)iterPositive * -2 + 1;\n        }\n        *allocatedMemory = type;\n        returnValue = 1;\n        *(ulong *)(allocatedMemory + 2) = value;\n        *(undefined8 *)(allocatedMemory + 4) = param5;\n        *(int **)(currentFile + 0x20) = allocatedMemory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  finalResult._8_8_ = param6;\n  finalResult._0_8_ = returnValue;\n  return finalResult;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c139",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_data_00109d97",
                "param_1": "inputData",
                "lVar1": "counter",
                "local_40": "outputString"
            },
            "code": "\nvoid processData_00109d97(long inputData)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(inputData + 0x70) != 0) {\n    FUN_00109cf4(inputData,*(long *)(inputData + 0x70),0);\n    return;\n  }\n  counter = *(long *)(inputData + 0x68);\n  *(long *)(inputData + 0x68) = counter + 1;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(inputData,outputString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attribute_notes_001086af",
                "in_RCX": "attributeNotesSize",
                "unaff_RBX": "attributeNotesRemaining",
                "unaff_RBP": "tempVar1",
                "unaff_R12": "attributeNotes",
                "unaff_R13": "tempVar2",
                "unaff_retaddr": "tempVar3",
                "param_7": "tempVar4",
                "param_8": "tempVar5",
                "param_9": "tempVar6",
                "param_10": "outputSize",
                "param_11": "inputBuffer",
                "param_13": "tempVar7",
                "param_14": "someParams",
                "puVar5": "tempVar8",
                "iVar6": "tempVar9",
                "lVar7": "tempVar10",
                "uVar1": "tempVar11",
                "uVar2": "tempVar12",
                "uVar3": "tempVar13",
                "bVar4": "tempVar14",
                "puVar21": "tempVar15",
                "bVar22": "tempVar16",
                "iVar23": "tempVar17",
                "unaff_R14": "somePointer"
            },
            "code": "\nulong processBuildAttributeNotes_001086af(void)\n\n{\n  ulong tempVar11;\n  undefined8 tempVar12;\n  undefined8 tempVar13;\n  bool tempVar14;\n  ulong *tempVar8;\n  int tempVar9;\n  long tempVar10;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong tempVar110;\n  ulong tempVar111;\n  undefined *__ptr;\n  ulong attributeNotesSize;\n  ulong tempVar112;\n  ulong tempVar113;\n  ulong tempVar114;\n  ulong attributeNotesRemaining;\n  ulong tempVar1;\n  ulong *ptempVar115;\n  undefined *ptempVar116;\n  char cVar17;\n  undefined *ptempVar118;\n  undefined *ptempVar119;\n  ulong *attributeNotes;\n  ulong tempVar2;\n  ulong tempVar120;\n  size_t __nmemb;\n  undefined8 *somePointer;\n  ulong *tempVar15;\n  byte tempVar16;\n  int tempVar17;\n  ulong tempVar3;\n  ulong tempVar4;\n  uint tempVar5;\n  ulong tempVar6;\n  ulong outputSize;\n  ulong *inputBuffer;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint tempVar7;\n  undefined8 *someParams;\n  \n  tempVar16 = 0;\n  tempVar4 = attributeNotesSize;\n  uVar9 = (**(code **)(somePointer[1] + 0x40))();\n  tempVar110 = (**(code **)(somePointer[1] + 0x40))(attributeNotes[4] + 4);\nLAB_0011662a:\n  tempVar113 = tempVar1;\n  tempVar120 = tempVar2;\n  if (tempVar110 < uVar9) {\n    uVar9 = tempVar110;\n  }\n  do {\n    tempVar111 = tempVar4;\n    tempVar112 = tempVar4;\n    ptempVar115 = attributeNotes;\n    if (attributeNotes[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = tempVar3;\n      }\n      tempVar114 = *attributeNotes;\n      attributeNotes[7] = uVar9;\n      tempVar1 = tempVar113;\n      tempVar2 = tempVar110;\n      tempVar3 = uVar9;\n      if (tempVar110 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = tempVar6;\n      }\n      tempVar114 = *attributeNotes;\n      attributeNotes[7] = uVar9;\n      tempVar1 = tempVar110;\n      tempVar2 = tempVar120;\n      tempVar6 = uVar9;\n      if (tempVar110 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    ptempVar115[8] = tempVar110;\n    if (*(char *)((ptempVar115[3] - 1) + tempVar114) != '\\0') {\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attributeNotes = ptempVar115 + 9;\n    if (attributeNotesRemaining < 0xc) {\n      if (attributeNotesRemaining != 0) {\n        tempVar10 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | tempVar7 | tempVar5) != 0) {\n        if (((tempVar7 | tempVar5) == 0) || (in_stack_00000038 == 0)) {\n          if (tempVar7 == 0) {\n            if (tempVar5 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (tempVar5 == 0) goto LAB_001166f8;\n        }\n        tempVar10 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      tempVar12 = *somePointer;\n      tempVar13 = *someParams;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(uVar8,tempVar12,tempVar13);\nLAB_0011671b:\n      __nmemb = ((long)attributeNotes - (long)inputBuffer >> 3) * -0x71c71c71c71c71c7;\n      qsort(inputBuffer,__nmemb,0x48,FUN_0011a1b0);\n      ptempVar115 = inputBuffer;\n      goto LAB_001167f9;\n    }\n    tempVar110 = (**(code **)(somePointer[1] + 0x40))(tempVar112);\n    *attributeNotes = tempVar110;\n    tempVar110 = (**(code **)(somePointer[1] + 0x40))(tempVar112 + 4);\n    ptempVar115[10] = tempVar110;\n    uVar9 = (**(code **)(somePointer[1] + 0x40))(tempVar112 + 8);\n    tempVar114 = *attributeNotes;\n    ptempVar115[0xb] = uVar9;\n    tempVar110 = ptempVar115[10];\n    tempVar113 = tempVar114 + 3 & 0xfffffffffffffffc;\n    ptempVar115[0xf] = tempVar113;\n    if (tempVar110 != (tempVar110 + 3 & 0xfffffffffffffffc)) {\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    tempVar111 = tempVar113 + tempVar110 + 0xc;\n    if (attributeNotesRemaining < tempVar111) {\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (tempVar114 < 2) {\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptempVar115[0xc] = tempVar112 + 0xc;\n    tempVar11 = tempVar112 + 0xc + tempVar113;\n    ptempVar115[0xd] = tempVar11;\n    attributeNotesRemaining = attributeNotesRemaining + (-0xc - (tempVar113 + tempVar110));\n    tempVar111 = tempVar112 + tempVar111;\n    if (tempVar114 != 2) {\n      if (*(char *)(tempVar112 + 0xc) == '$') {\n        if ((*(char *)(tempVar112 + 0xd) == '\\x01') && (*(char *)(tempVar112 + 0xe) == '1')) {\n          tempVar110 = FUN_00116490();\n          return tempVar110;\n        }\n      }\n      else if ((((4 < tempVar114) && (*(char *)(tempVar112 + 0xc) == 'G')) &&\n               (*(char *)(tempVar112 + 0xd) == 'A')) &&\n              ((*(char *)(tempVar112 + 0xe) == '$' && (*(char *)(tempVar112 + 0xf) == '\\x01')))) {\n        if (*(char *)(tempVar112 + 0x10) == '2') {\n          tempVar110 = FUN_00116490();\n          return tempVar110;\n        }\n        if (*(char *)(tempVar112 + 0x10) == '3') {\n          tempVar110 = FUN_00116490();\n          return tempVar110;\n        }\n        tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    tempVar113 = tempVar1;\n    tempVar120 = tempVar2;\n    if (tempVar110 == 0) {\n      if (uVar9 == 0x100) {\n        ptempVar115[0x10] = tempVar3;\nLAB_001164af:\n        tempVar112 = tempVar111;\n        tempVar110 = tempVar120;\n        ptempVar115 = attributeNotes;\n        tempVar2 = tempVar120;\n      }\n      else {\n        ptempVar115[0x10] = tempVar6;\nLAB_0011669e:\n        tempVar1 = tempVar113;\n        tempVar112 = tempVar111;\n        tempVar110 = tempVar113;\n        ptempVar115 = attributeNotes;\n        tempVar2 = tempVar120;\n      }\n      goto LAB_001164bb;\n    }\n    if (tempVar110 == 0x10) break;\n    if (0x10 < tempVar110) {\nLAB_00116679:\n      tempVar10 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (tempVar10 != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,somePointer,someParams,tempVar10);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (tempVar110 != 4) {\n      if (tempVar110 == 8) {\n        tempVar110 = processBuildAttributeNotes_001086af();\n        return tempVar110;\n      }\n      goto LAB_00116679;\n    }\n    tempVar4 = tempVar111;\n    uVar9 = (**(code **)(somePointer[1] + 0x40))();\n    tempVar110 = 0xffffffffffffffff;\n  } while( true );\n  tempVar4 = tempVar111;\n  uVar9 = (**(code **)(somePointer[1] + 0x28))(tempVar11);\n  tempVar110 = (**(code **)(somePointer[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (attributeNotes <= ptempVar115) {\n    qsort(inputBuffer,__nmemb,0x48,FUN_0011a250);\n    __ptr = (undefined *)xmalloc(outputSize * 2);\n    tempVar4 = 0;\n    tempVar6 = 0;\n    ptempVar119 = __ptr;\n    for (ptempVar115 = inputBuffer; ptempVar115 < attributeNotes; ptempVar115 = ptempVar115 + 9) {\n      if (ptempVar115[2] != 0) {\n        ptempVar118 = ptempVar119 + 4;\n        ptempVar116 = ptempVar119 + 0xc;\n        if ((ptempVar115[7] == tempVar6) && (ptempVar115[8] == tempVar4)) {\n          (**(code **)(somePointer[1] + 0x50))(*ptempVar115,ptempVar119);\n          (**(code **)(somePointer[1] + 0x50))(0,ptempVar118);\n          (**(code **)(somePointer[1] + 0x50))(ptempVar115[2],ptempVar119 + 8);\n          uVar9 = ptempVar115[6];\n          tempVar110 = *ptempVar115;\n          ptempVar119 = (undefined *)ptempVar115[3];\n          ptempVar118 = ptempVar116;\n          for (tempVar113 = tempVar110; tempVar113 != 0; tempVar113 = tempVar113 - 1) {\n            *ptempVar118 = *ptempVar119;\n            ptempVar119 = ptempVar119 + (ulong)tempVar16 * -2 + 1;\n            ptempVar118 = ptempVar118 + (ulong)tempVar16 * -2 + 1;\n          }\n          if (tempVar110 < uVar9) {\n            for (tempVar10 = uVar9 - tempVar110; tempVar10 != 0; tempVar10 = tempVar10 + -1) {\n              *ptempVar118 = 0;\n              ptempVar118 = ptempVar118 + (ulong)tempVar16 * -2 + 1;\n            }\n          }\n          ptempVar119 = ptempVar116 + uVar9;\n        }\n        else {\n          (**(code **)(somePointer[1] + 0x50))();\n          if (*(int *)(somePointer[1] + 8) == 5) {\n            cVar17 = (*(char *)(somePointer[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(somePointer[1] + 0x50))(cVar17,ptempVar118);\n          (**(code **)(somePointer[1] + 0x50))(ptempVar115[2],ptempVar119 + 8);\n          tempVar110 = *ptempVar115;\n          ptempVar119 = (undefined *)ptempVar115[3];\n          ptempVar118 = ptempVar116;\n          for (uVar9 = tempVar110; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *ptempVar118 = *ptempVar119;\n            ptempVar119 = ptempVar119 + (ulong)tempVar16 * -2 + 1;\n            ptempVar118 = ptempVar118 + (ulong)tempVar16 * -2 + 1;\n          }\n          uVar9 = ptempVar115[6];\n          if (tempVar110 < uVar9) {\n            for (tempVar10 = uVar9 - tempVar110; tempVar10 != 0; tempVar10 = tempVar10 + -1) {\n              *ptempVar118 = 0;\n              ptempVar118 = ptempVar118 + (ulong)tempVar16 * -2 + 1;\n            }\n          }\n          tempVar10 = somePointer[1];\n          ptempVar116 = ptempVar116 + uVar9;\n          ptempVar119 = ptempVar116 + 8;\n          if ((*(int *)(tempVar10 + 8) == 5) && (*(char *)(somePointer[0x22] + 4) == '\\x02')) {\n            (**(code **)(tempVar10 + 0x38))(ptempVar115[7],ptempVar116);\n            (**(code **)(somePointer[1] + 0x38))(ptempVar115[8],ptempVar119);\n            ptempVar119 = ptempVar116 + 0x10;\n          }\n          else {\n            (**(code **)(tempVar10 + 0x50))(ptempVar115[7],ptempVar116);\n            (**(code **)(somePointer[1] + 0x50))(ptempVar115[8],ptempVar116 + 4);\n          }\n          tempVar6 = ptempVar115[7];\n          tempVar4 = ptempVar115[8];\n        }\n      }\n    }\n    uVar9 = (long)ptempVar119 - (long)__ptr;\n    tempVar110 = uVar9;\n    ptempVar119 = __ptr;\n    if (uVar9 < outputSize) {\n      for (; outputSize = uVar9, tempVar110 != 0; tempVar110 = tempVar110 - 1) {\n        *in_stack_00000030 = *ptempVar119;\n        ptempVar119 = ptempVar119 + (ulong)tempVar16 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)tempVar16 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(inputBuffer);\n    return outputSize;\n  }\n  if (ptempVar115[2] != 0) {\n    tempVar110 = ptempVar115[7];\n    uVar9 = ptempVar115[8];\n    tempVar113 = ptempVar115[2];\n    tempVar15 = ptempVar115;\n    tempVar17 = 0;\n    if (tempVar110 == uVar9) {\n      ptempVar115[2] = 0;\n    }\n    else {\n      do {\n        do {\n          tempVar8 = tempVar15;\n          tempVar15 = tempVar8 + -9;\n          if (tempVar15 < inputBuffer) goto LAB_001167f5;\n          tempVar120 = tempVar8[-7];\n        } while (tempVar120 == 0);\n        tempVar4 = tempVar113;\n        if ((*tempVar15 != *ptempVar115) ||\n           (tempVar9 = memcmp((void *)tempVar8[-6],(void *)ptempVar115[3],*ptempVar115), tempVar9 != 0)) break;\n        tempVar113 = tempVar8[-2];\n        tempVar111 = tempVar8[-1];\n        if (tempVar110 == tempVar113) {\n          if (uVar9 == tempVar111) {\n            ptempVar115[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= tempVar111) {\n            ptempVar115[2] = 0;\n            break;\n          }\n          if (tempVar111 < tempVar110) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < tempVar111) || (tempVar110 <= (tempVar111 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((tempVar4 == 0x101) == (tempVar120 == 0x101)) {\n            if (tempVar111 <= uVar9) {\n              tempVar111 = uVar9;\n            }\n            if (tempVar113 < tempVar110) {\n              tempVar110 = tempVar113;\n            }\n            tempVar8[-1] = tempVar111;\n            tempVar8[-2] = tempVar110;\n            ptempVar115[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (tempVar113 <= tempVar110) goto LAB_001167a6;\n          if (tempVar111 < tempVar110) goto LAB_0010852c;\n          if (uVar9 < tempVar110) {\n            if ((0xfffffffffffffff0 < uVar9) || (tempVar113 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != tempVar111) goto LAB_001167b8;\n        }\nFUN_00116852:\n        tempVar14 = tempVar17 < 0x11;\n        tempVar113 = tempVar4;\n        tempVar17 = tempVar17 + 1;\n      } while (tempVar14);\n    }\n  }\nLAB_001167f5:\n  ptempVar115 = ptempVar115 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_error",
                "FUN_00119ed0",
                "FUN_0011a1b0",
                "FUN_0010847a",
                "FUN_00116490",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_system_0010add5"
            },
            "code": "\nvoid initializeSystem_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_system_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_communication_00113e17"
            },
            "code": "\nvoid initializeCommunication_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_communication_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructurePtr",
                "param_2": "inputString",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "uVar1": "oldDataStructurePtr",
                "puVar2": "newDataStructurePtr",
                "uVar3": "copiedString",
                "xmalloc": "allocateMemory",
                "xstrdup": "copyString",
                "ZEXT816": "zeroExtend16",
                "puVar2[1]": "copiedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructurePtr,undefined8 inputString,undefined8 param3Value,undefined param4Value,\n                      undefined4 param5Value)\n\n{\n  undefined8 oldDataStructurePtr;\n  undefined8 *newDataStructurePtr;\n  undefined8 copiedString;\n  \n  newDataStructurePtr = (undefined8 *)xmalloc(0x40);\n  copiedString = xstrdup(inputString);\n  newDataStructurePtr[2] = param3Value;\n  *(undefined (*) [16])(newDataStructurePtr + 4) = zeroExtend16(0);\n  *(undefined (*) [16])(newDataStructurePtr + 6) = zeroExtend16(0);\n  oldDataStructurePtr = *(undefined8 *)(dataStructurePtr + 0x60);\n  *(undefined *)((long)newDataStructurePtr + 0x1c) = param4Value;\n  *(undefined4 *)(newDataStructurePtr + 3) = param5Value;\n  *(undefined8 **)(dataStructurePtr + 0x60) = newDataStructurePtr;\n  *newDataStructurePtr = oldDataStructurePtr;\n  copiedString = copiedString;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010e453",
                "FUN_0010a69a",
                "FUN_00109ed3",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string_ptr",
                "param_2": "error_indicator",
                "param_3": "string_end",
                "param_4": "unused_param",
                "param_5": "result",
                "__nptr": "string",
                "piVar1": "errno_ptr",
                "uVar2": "numeric_value",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string_ptr,undefined *error_indicator,char *string_end,undefined8 unused_param,undefined8 result)\n\n{\n  char *string;\n  int *errno_ptr;\n  ulong numeric_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (error_indicator != (undefined *)0x0) {\n    *error_indicator = 0;\n  }\n  string = *string_ptr;\n  if ((string < string_end) && (*string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    numeric_value = strtoul(string,string_ptr,0);\n    if ((numeric_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_indicator == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(string,error_message);\n    }\n    else {\n      *error_indicator = 1;\n    }\n  }\n  numeric_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = result;\n  return_value._0_8_ = numeric_value;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00108fe8",
                "__errno_location",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "fileHandle",
                "param_2": "tagName",
                "param_3": "tagData",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTagData",
                "pauVar4": "tagStorage",
                "lVar5": "fileOffset",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * processDebugTag_0010c6be(long fileHandle,char *tagName,int *tagData)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTagData;\n  undefined (*tagStorage) [16];\n  long fileOffset;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagData != (int *)0x0)) {\n    if (*(long *)(fileHandle + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagData != 0x17) {\n        newTagData = (int *)FUN_00112904(0x17,0);\n        if (newTagData == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagStorage = (undefined (*) [16])xmalloc(0x10);\n        fileOffset = *(long *)(fileHandle + 0x10);\n        *tagStorage = ZEXT816(0);\n        *(int **)(*tagStorage + 8) = tagData;\n        *(undefined (**) [16])(newTagData + 4) = tagStorage;\n        fileOffset = FUN_00112925(fileOffset + 0x10,tagName,1,3);\n        if (fileOffset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(fileOffset + 0x20) = newTagData;\n        *(long *)*tagStorage = fileOffset;\n        return newTagData;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagData + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagData;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "errors",
                "__ptr": "allocated_memory",
                "__format": "error_message",
                "lVar1": "result",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "index",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *errors)\n\n{\n  void *allocated_memory;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong capacity;\n  uint index;\n  char buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  allocated_memory = (void *)xmalloc(0x50);\n  *errors = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(allocated_memory);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = FUN_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (result == 0) {\n      if (buffer[0] == '\\0') {\n        free(allocated_memory);\n        return (void *)0x0;\n      }\n      *errors = 1;\n    }\n    else {\n      index = (int)count + 1;\n      if ((uint)capacity <= index) {\n        capacity = (ulong)((uint)capacity + 10);\n        allocated_memory = (void *)xrealloc(allocated_memory,capacity << 3);\n      }\n      *(long *)((long)allocated_memory + count * 8) = result;\n      count = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)allocated_memory + count * 8) = 0;\n  return allocated_memory;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "free",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "section_data",
                "param_2": "binary_data",
                "uVar1": "section_name",
                "uVar2": "error_message",
                "lVar3": "section_info",
                "lVar4": "section_ptr"
            },
            "code": "\nlong extract_section_0011a2e0(long section_data,long binary_data)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_info;\n  long section_ptr;\n  \n  section_info = (**(code **)(*(long *)(binary_data + 8) + 0x208))(binary_data);\n  section_ptr = *(long *)(section_data + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(section_data + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(section_data + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(section_data + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary_data);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_data + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_name);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_ptr;\n  return section_info;\n}\n\n",
            "called": [
                "FUN_00108808",
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_data_0010e8a9",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "dataLength",
                "__s": "formattedData"
            },
            "code": "\nundefined4 processData_0010e8a9(undefined8 input1,undefined8 input2,char *data)\n\n{\n  undefined4 result;\n  size_t dataLength;\n  char *formattedData;\n  \n  dataLength = strlen(data);\n  formattedData = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",input1,data);\n  result = FUN_0010e2f0(input2,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "section_flags_00104ad6",
                "unaff_RBP": "currentSection",
                "__s": "sectionString",
                "sVar4": "sectionStringLength",
                "iVar5": "sectionLength",
                "unaff_R14D": "flags",
                "unaff_R15": "compareString",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress",
                "pcVar3": "delimiter"
            },
            "code": "\nundefined  [16] sectionFlags_00104ad6(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *delimiter;\n  char *currentSection;\n  char *sectionString;\n  size_t sectionStringLength;\n  int sectionLength;\n  uint flags;\n  char *compareString;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    flags = flags | 0x2000;\n    sectionString = currentSection;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionString == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = flags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              delimiter = strchr(sectionString,0x2c);\n              if (delimiter == (char *)0x0) {\n                sectionStringLength = strlen(sectionString);\n                sectionLength = (int)sectionStringLength;\n                currentSection = (char *)0x0;\n              }\n              else {\n                currentSection = delimiter + 1;\n                sectionLength = (int)delimiter - (int)sectionString;\n              }\n              sectionStringLength = (size_t)sectionLength;\n              iVar1 = strncasecmp(compareString,sectionString,sectionStringLength);\n              if (iVar1 != 0) break;\n              flags = flags | 1;\n              sectionString = currentSection;\n            }\n            iVar1 = strncasecmp(\"load\",sectionString,sectionStringLength);\n            if (iVar1 != 0) break;\n            flags = flags | 2;\n            sectionString = currentSection;\n          }\n          iVar1 = strncasecmp(\"noload\",sectionString,sectionStringLength);\n          if (iVar1 != 0) break;\n          flags = flags | 0x200;\n          sectionString = currentSection;\n        }\n        iVar1 = strncasecmp(\"readonly\",sectionString,sectionStringLength);\n        if (iVar1 != 0) break;\n        flags = flags | 8;\n        sectionString = currentSection;\n      }\n      iVar1 = strncasecmp(\"debug\",sectionString,sectionStringLength);\n      if (iVar1 == 0) break;\n      iVar1 = strncasecmp(\"code\",sectionString,sectionStringLength);\n      if (iVar1 == 0) {\n        flags = flags | 0x10;\n        sectionString = currentSection;\n      }\n      else {\n        iVar1 = strncasecmp(\"data\",sectionString,sectionStringLength);\n        if (iVar1 == 0) {\n          flags = flags | 0x20;\n          sectionString = currentSection;\n        }\n        else {\n          iVar1 = strncasecmp(\"rom\",sectionString,sectionStringLength);\n          if (iVar1 == 0) {\n            flags = flags | 0x40;\n            sectionString = currentSection;\n          }\n          else {\n            iVar1 = strncasecmp(\"exclude\",sectionString,sectionStringLength);\n            if (iVar1 == 0) {\n              flags = flags | 0x8000;\n              sectionString = currentSection;\n            }\n            else {\n              iVar1 = strncasecmp(\"share\",sectionString,sectionStringLength);\n              if (iVar1 == 0) {\n                flags = flags | 0x8000000;\n                sectionString = currentSection;\n              }\n              else {\n                iVar1 = strncasecmp(\"contents\",sectionString,sectionStringLength);\n                if (iVar1 == 0) {\n                  flags = flags | 0x100;\n                  sectionString = currentSection;\n                }\n                else {\n                  iVar1 = strncasecmp(\"merge\",sectionString,sectionStringLength);\n                  if (iVar1 == 0) {\n                    flags = flags | 0x800000;\n                    sectionString = currentSection;\n                  }\n                  else {\n                    iVar1 = strncasecmp(\"strings\",sectionString,sectionStringLength);\n                    if (iVar1 != 0) {\n                      delimiter = (char *)xmalloc((long)(sectionLength + 1));\n                      strncpy(delimiter,sectionString,sectionStringLength);\n                      delimiter[sectionStringLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,delimiter);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    flags = flags | 0x1000000;\n                    sectionString = currentSection;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strncasecmp",
                "strncpy",
                "strchr",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "current_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_node",
                "lVar5": "node",
                "puVar6": "list_node",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg3,undefined8 arg4)\n\n{\n  long current_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_node;\n  long node;\n  undefined8 *list_node;\n  undefined result [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (node = *(long *)(compilation_unit + 0x20); node != 0; node = *(long *)(node + 8)) {\n      if (*(undefined8 **)(node + 0x28) != (undefined8 *)0x0) {\n        for (current_node = (undefined8 *)**(undefined8 **)(node + 0x28); current_node != (undefined8 *)0x0;\n            current_node = (undefined8 *)*current_node) {\n          if (*(int *)((long)current_node + 0x14) == 0) {\n            if (*(char *)current_node[1] == *type_name) {\n              comparison_result = strcmp((char *)current_node[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (list_node = *(undefined8 **)(current_unit + 8); list_node != (undefined8 *)0x0;\n        list_node = (undefined8 *)*list_node) {\n      if ((undefined8 *)list_node[2] != (undefined8 *)0x0) {\n        for (current_node = *(undefined8 **)(undefined8 *)list_node[2]; current_node != (undefined8 *)0x0;\n            current_node = (undefined8 *)*current_node) {\n          if (*(int *)((long)current_node + 0x14) == 0) {\n            if (*(char *)current_node[1] == *type_name) {\n              comparison_result = strcmp((char *)current_node[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = arg4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_node[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_ebp_value_0010829e",
                "unaff_EBP": "EBP_value",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_EBP_value_0010829e(void)\n\n{\n  undefined8 result;\n  int EBP_value;\n  \n  if (EBP_value == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((EBP_value != 4) && (EBP_value == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_ebp_value_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_strings_00104943",
                "in_RAX": "str",
                "lVar3": "numStr",
                "sVar4": "strLen",
                "pcVar5": "archMach",
                "uVar6": "archMachPrintable",
                "iVar1": "defaultLength",
                "iVar2": "archMachCmpResult",
                "iVar7": "archMachNum",
                "iVar9": "currentIndex",
                "param_7": "maxIndex",
                "uStack000000000000000c": "indentation",
                "param_11": "stringsArray",
                "param_13": "dataArray",
                "unaff_R15D": "initialIndex",
                "uVar10": "loopCount",
                "uVar11": "archMachIndex"
            },
            "code": "\n\n\nvoid printReverseStrings_00104943(void)\n\n{\n  int defaultLength;\n  int archMachCmpResult;\n  char *str;\n  long numStr;\n  size_t strLen;\n  char *archMach;\n  undefined8 archMachPrintable;\n  int archMachNum;\n  long lVar8;\n  int currentIndex;\n  uint initialIndex;\n  ulong loopCount;\n  uint archMachIndex;\n  int maxIndex;\n  uint indentation;\n  undefined8 stringsArray;\n  long dataArray;\n  \n  numStr = strtol(str,(char **)0x0,10);\n  defaultLength = (int)numStr;\n  currentIndex = maxIndex;\n  indentation = initialIndex;\n  if (defaultLength == 0) {\n    defaultLength = 0x50;\n  }\n  do {\n    maxIndex = currentIndex;\n    if (stringsArray._4_4_ <= maxIndex) {\n      return;\n    }\n    lVar8 = (long)maxIndex;\n    archMachNum = (defaultLength - indentation) + -1;\n    numStr = lVar8;\n    do {\n      currentIndex = (int)numStr;\n      if (stringsArray._4_4_ <= currentIndex) break;\n      strLen = strlen(*(char **)(dataArray + numStr * 0x60));\n      numStr = numStr + 1;\n      archMachNum = (archMachNum - (int)strLen) + -1;\n    } while (-1 < archMachNum);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (numStr = lVar8 * 0x60; ((ulong)(uint)(currentIndex - maxIndex) + lVar8) * 0x60 - numStr != 0;\n        numStr = numStr + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataArray + numStr));\n    }\n    archMachNum = 2;\n    putc(10,_stdout);\n    do {\n      archMach = (char *)bfd_printable_arch_mach(archMachNum,0);\n      archMachCmpResult = strcmp(archMach,\"UNKNOWN!\");\n      if (archMachCmpResult != 0) {\n        archMachPrintable = bfd_printable_arch_mach(archMachNum,0);\n        printf(\"%*s \",(ulong)indentation,archMachPrintable);\n        archMachIndex = archMachNum - 2;\n        numStr = lVar8 * 0x60;\n        archMachCmpResult = maxIndex;\n        while (currentIndex != archMachCmpResult) {\n          archMach = *(char **)(dataArray + numStr);\n          if (*(char *)((long)(char **)(dataArray + numStr) + (ulong)archMachIndex + 8) == '\\0') {\n            strLen = strlen(archMach);\n            for (loopCount = strLen & 0xffffffff; (int)loopCount != 0; loopCount = (ulong)((int)loopCount - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMach,_stdout);\n          }\n          archMachCmpResult = archMachCmpResult + 1;\n          if (currentIndex != archMachCmpResult) {\n            putc(0x20,_stdout);\n          }\n          numStr = numStr + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachNum = archMachNum + 1;\n    } while (archMachNum != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_strings_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "save_data_to_memory_00113e23",
                "param_1": "data",
                "param_2": "address",
                "lVar1": "result",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong saveDataToMemory_00113e23(undefined8 data,undefined8 address)\n\n{\n  long result;\n  undefined8 *allocatedMemory;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = data;\n    allocatedMemory[1] = address;\n    *(undefined8 **)(result + 0x10) = allocatedMemory;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "save_data_to_memory_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stabInput",
                "__format": "errorMessage"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stabInput)\n\n{\n  char *errorMessage;\n  \n  errorMessage = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,errorMessage,stabInput);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_from_string_00108ea1",
                "pbVar2": "current_char_ptr",
                "pbVar3": "next_char_ptr",
                "uVar4": "result"
            },
            "code": "\nulong parse_integer_from_string_00108ea1(byte **param_1,int *param_2)\n\n{\n  int iVar1;\n  byte *current_char_ptr;\n  byte *next_char_ptr;\n  ulong result;\n  \n  current_char_ptr = *param_1;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_char_ptr * 2] & 4) != 0) {\n    next_char_ptr = current_char_ptr + 1;\n    iVar1 = (char)*current_char_ptr + -0x30;\n    *param_2 = iVar1;\n    *param_1 = next_char_ptr;\n    if (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0) {\n      do {\n        current_char_ptr = next_char_ptr;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_char_ptr;\n        next_char_ptr = current_char_ptr + 1;\n      } while (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0);\n      if (current_char_ptr[1] == 0x5f) {\n        next_char_ptr = current_char_ptr + 2;\n        *param_1 = next_char_ptr;\n        *param_2 = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char_ptr >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_integer_from_string_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_memory_sizes_00108072",
                "unaff_RBX": "array",
                "unaff_RBP": "basePointer",
                "unaff_R12": "storePointer",
                "unaff_R15": "memoryPointer",
                "bVar1": "byteVar",
                "uVar2": "undefinedVar",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "lVar5": "errorString",
                "lVar6": "temp1",
                "lVar7": "temp2",
                "lVar8": "temp3",
                "unaff_R14B": "conditionFlag"
            },
            "code": "\n\n\nvoid setMemorySizes_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 undefinedVar;\n  char charVar;\n  uint uintVar;\n  long errorString;\n  long temp1;\n  long temp2;\n  undefined8 *array;\n  long basePointer;\n  long storePointer;\n  long temp3;\n  char conditionFlag;\n  long memoryPointer;\n  \n  errorString = dcgettext(0,\"failed to set size\",5);\n  temp3 = array[6];\n  temp1 = FUN_00114190(*array,0,0x18);\n  if (temp1 == 0) {\n    *(byte *)(memoryPointer + 0x28) = *(byte *)(memoryPointer + 0x28) | 1;\n    undefinedVar = *array;\n    temp3 = temp3 + _DAT_001279b0;\n    *(long *)(memoryPointer + 0x30) = temp3;\n    *(long *)(memoryPointer + 0x38) = temp3;\n    temp3 = array[7];\n    temp1 = FUN_00114190(undefinedVar,0,0x60);\n    if (temp1 == 0) goto LAB_00115695;\nLAB_00115860:\n    temp2 = *(long *)(temp1 + 0x20);\n    if ((*(byte *)(temp1 + 0x14) & 0x40) != 0) {\n      temp2 = temp2 + temp3;\n    }\n    *(long *)(memoryPointer + 0x38) = temp2;\n    temp3 = FUN_00114190(*array,0,0x200);\n    if (temp3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)array + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorString = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(memoryPointer + 0xb4) = *(undefined4 *)((long)array + 0xb4);\n    *(byte *)(memoryPointer + 0x28) =\n         *(byte *)(memoryPointer + 0x28) & 0xcf | *(byte *)(array + 5) & 0x30;\n    array[0xc] = memoryPointer;\n    array[0xb] = 0;\n    byteVar = *(byte *)((long)array + 0x27);\n  }\n  else {\n    temp2 = *(long *)(temp1 + 0x18);\n    if ((*(byte *)(temp1 + 0x14) & 8) == 0) {\n      temp2 = temp2 + temp3;\n    }\n    *(byte *)(memoryPointer + 0x28) = *(byte *)(memoryPointer + 0x28) | 1;\n    undefinedVar = *array;\n    *(long *)(memoryPointer + 0x30) = temp2;\n    *(long *)(memoryPointer + 0x38) = temp2;\n    temp3 = array[7];\n    temp1 = FUN_00114190(undefinedVar,0,0x60);\n    if (temp1 != 0) goto LAB_00115860;\nLAB_00115695:\n    undefinedVar = *array;\n    *(long *)(memoryPointer + 0x38) = temp3 + _DAT_001279b0;\n    temp3 = FUN_00114190(undefinedVar,0,0x200);\n    if (temp3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(temp3 + 0x2c);\n    if (0x3e < uintVar) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(memoryPointer + 0x7c) = uintVar;\n    *(undefined4 *)(memoryPointer + 0xb4) = *(undefined4 *)((long)array + 0xb4);\n    *(byte *)(memoryPointer + 0x28) =\n         *(byte *)(memoryPointer + 0x28) & 0xcf | *(byte *)(array + 5) & 0x30;\n    array[0xc] = memoryPointer;\n    array[0xb] = 0;\n    byteVar = *(byte *)((long)array + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    temp3 = array[0x1a];\n    temp1 = FUN_00115d00(temp3,array[0x1c]);\n    if ((temp1 != 0) &&\n       (temp2 = *(long *)(storePointer + 8), *(uint *)(temp1 + 0x18) = *(uint *)(temp1 + 0x18) | 0x20,\n       *(int *)(temp2 + 8) == 5)) {\n      *(long *)(temp3 + 0xb0) = temp1;\n      charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (conditionFlag != '\\0') {\n    *(undefined4 *)(*(long *)(memoryPointer + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_memory_sizes_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "generate_formatted_string_0010a2b9",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "unused1",
                "param_4": "unused2",
                "cVar1": "flagValue",
                "__s": "sourceString",
                "sVar2": "sourceLength",
                "__s_00": "formattedString",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] generateFormattedString_0010a2b9(long inputData,char flag,undefined8 unused1,undefined8 unused2)\n\n{\n  char flagValue;\n  char *sourceString;\n  size_t sourceLength;\n  char *formattedString;\n  long counter;\n  undefined result [16];\n  \n  flagValue = *(char *)(*(long *)(inputData + 0x60) + 0x1c);\n  sourceString = (char *)FUN_00109b2f();\n  sourceLength = strlen(sourceString);\n  formattedString = (char *)xmalloc(sourceLength + 0x1e);\n  if (flag == '\\0') {\n    *formattedString = '\\0';\n    counter = 0;\n    flag = flagValue;\n  }\n  else {\n    counter = *(long *)(inputData + 0x68);\n    *(long *)(inputData + 0x68) = counter + 1;\n    sprintf(formattedString,\"%ld=@S;\",counter);\n  }\n  sourceLength = strlen(formattedString);\n  sprintf(formattedString + sourceLength,\"S%s\",sourceString);\n  free(sourceString);\n  result._0_4_ = FUN_00109b52(inputData,formattedString,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = unused2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "param_5": "ptr3",
                "param_6": "ptr4",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateData_0010ec73(long *data,long value,undefined8 ptr1,undefined8 ptr2,\n                      undefined8 ptr3,undefined8 ptr4)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = FUN_0010e2f0(data,0xc0,0,data[0x41],0,ptr4,ptr2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessType"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessType)\n\n{\n  if (endiannessType == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessType == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_remove_file_00115970",
                "param_1": "sourcePath",
                "param_2": "destinationPath",
                "param_3": "permissions",
                "param_4": "fileStats",
                "param_5": "shouldRemoveOriginal",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errorPtr",
                "pcVar3": "errorStr",
                "uVar4": "errorMessage",
                "uVar5": "errorNumber",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndRemoveFile_00115970(char *sourcePath,char *destinationPath,undefined4 permissions,undefined8 fileStats,char shouldRemoveOriginal,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errorPtr;\n  char *errorStr;\n  undefined8 errorMessage;\n  ulong errorNumber;\n  undefined returnValue [16];\n  \n  if (destinationPath == sourcePath) {\n    errorNumber = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(permissions,destinationPath,fileStats);\n    errorNumber = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorPtr = __errno_location();\n      errorStr = strerror(*errorPtr);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationPath,errorStr);\n    }\n    unlink(sourcePath);\n  }\n  if (shouldRemoveOriginal != '\\0') {\n    FUN_0011a350(destinationPath,fileStats);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorNumber;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_0010adf2"
            },
            "code": "\nvoid initialize_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "extract_and_store_info_0010d7d4",
                "param_1": "input_param",
                "param_2": "data",
                "param_3": "output_buffer",
                "param_4": "buffer_size",
                "param_5": "buffer_capacity",
                "uVar1": "first_element",
                "cVar2": "check_value",
                "uVar3": "result",
                "lVar4": "temp_value",
                "plVar5": "temp_buffer",
                "local_40": "local_buffer",
                "uVar6": "current_size"
            },
            "code": "\nundefined4\nextract_and_store_info_0010d7d4(undefined8 input_param,undefined8 *data,long *output_buffer,uint *buffer_size,uint *buffer_capacity)\n\n{\n  undefined8 first_element;\n  char check_value;\n  undefined4 result;\n  long temp_value;\n  long *temp_buffer;\n  uint current_size;\n  long local_buffer [2];\n  \n  first_element = *data;\n  temp_buffer = local_buffer;\n  if (output_buffer == (long *)0x0) {\n    temp_buffer = (long *)0x0;\n  }\n  check_value = FUN_0010c95e(input_param,data,temp_buffer);\n  if ((check_value != '\\0') &&\n     (result = FUN_00109be3(input_param,first_element,(int)*data - (int)first_element), (char)result != '\\0')) {\n    if (output_buffer == (long *)0x0) {\n      return result;\n    }\n    if (local_buffer[0] != 0) {\n      if (*buffer_capacity <= *buffer_size + 1) {\n        current_size = *buffer_capacity + 10;\n        temp_value = *output_buffer;\n        *buffer_capacity = current_size;\n        temp_value = xrealloc(temp_value,(ulong)current_size << 3);\n        *output_buffer = temp_value;\n      }\n      current_size = *buffer_size;\n      *(long *)(*output_buffer + (ulong)current_size * 8) = local_buffer[0];\n      *buffer_size = current_size + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xrealloc",
                "FUN_00109be3",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "extract_and_store_info_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_validity_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errorLocation",
                "uVar3": "errorMessage",
                "pcVar4": "errorString",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFileValidity_00113f50(char *filePath)\n\n{\n  int status;\n  int *errorLocation;\n  undefined8 errorMessage;\n  char *errorString;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errorLocation = __errno_location();\n      if (*errorLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorString = strerror(*errorLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filePath,errorString);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_validity_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "defaultFormat",
                "__format": "formatMessage",
                "plVar2": "currentFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 defaultFormat;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  defaultFormat = DAT_00127600;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatMessage,defaultFormat);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "process_binary_0011378f",
                "param_1": "input_file",
                "param_2": "statistics",
                "param_3": "data_buffer",
                "param_4": "metadata",
                "param_5": "string_list",
                "param_6": "output_value",
                "auVar1": "temp_array",
                "cVar2": "result_code",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "ptr",
                "sVar6": "length",
                "lVar7": "counter",
                "puVar8": "ptr_array",
                "puVar9": "ptr_array_2",
                "__dest": "dest_string",
                "puVar10": "ptr_val",
                "plVar11": "ptr_list",
                "bVar12": "bool_value",
                "local_258": "input_ptr",
                "local_250": "memory_allocated",
                "local_248": "var_1",
                "uStack_244": "var_2",
                "uStack_240": "var_3",
                "uStack_23c": "var_4",
                "local_238": "temp_array2",
                "local_228": "var_5",
                "local_220": "temp_buffer",
                "local_1f8": "var_6",
                "local_1f0": "var_7",
                "local_1e8": "data_array",
                "local_a0": "temp_buffer2",
                "local_78": "bool_array",
                "uStack_70": "var_8",
                "local_68": "var_9",
                "local_60": "var_10",
                "local_58": "var_11",
                "uStack_54": "var_12",
                "uStack_50": "var_13",
                "uStack_4c": "var_14"
            },
            "code": "\nundefined4\nprocess_binary_0011378f(undefined8 *input_file,undefined8 *statistics,long *data_buffer,undefined8 *metadata,\n            undefined8 *string_list,undefined8 *output_value)\n\n{\n  undefined temp_array [16];\n  char result_code;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *ptr;\n  size_t length;\n  long counter;\n  undefined8 *ptr_array;\n  undefined4 *ptr_array_2;\n  char *dest_string;\n  undefined8 *ptr_val;\n  long *ptr_list;\n  byte bool_value;\n  undefined8 *input_ptr;\n  long memory_allocated;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined temp_array2 [16];\n  undefined8 var_5;\n  undefined temp_buffer [40];\n  undefined8 var_6;\n  undefined8 var_7;\n  undefined4 data_array [82];\n  undefined temp_buffer2 [40];\n  undefined bool_array [8];\n  undefined8 var_8;\n  undefined8 var_9;\n  undefined4 var_10;\n  undefined4 var_11;\n  undefined4 var_12;\n  undefined4 var_13;\n  undefined4 var_14;\n  \n  bool_value = 0;\n  var_1 = 0;\n  var_2 = 0;\n  var_3 = 500;\n  var_4 = 0;\n  input_ptr = input_file;\n  memory_allocated = xmalloc(500);\n  var_5 = 1;\n  temp_array2 = ZEXT816(0);\n  result_code = bfd_hash_table_init(temp_buffer,FUN_0010bb52,0x30);\n  if ((result_code == '\\0') || (result_code = bfd_hash_table_init(temp_buffer2,FUN_0010bb52,0x30), result_code == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var_6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    bool_array = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    ptr_array_2 = data_array;\n    for (counter = 0x52; counter != 0; counter = counter + -1) {\n      *ptr_array_2 = 0;\n      ptr_array_2 = ptr_array_2 + (ulong)bool_value * -2 + 1;\n    }\n    var_9 = 0;\n    var_10 = 0;\n    var_7 = 1;\n    var_11 = 0;\n    var_12 = 0;\n    var_13 = 0xffffffff;\n    var_14 = 0xffffffff;\n    result_code = FUN_0010e2f0(&input_ptr,0,0,0,0);\n    temp_array = _bool_array;\n    if (result_code != '\\0') {\n      bool_array._4_4_ = var_2;\n      bool_array._0_4_ = var_1;\n      var_8 = temp_array._8_8_;\n      result_code = FUN_0010e2f0(&input_ptr,100,0,0,*input_file);\n      if (result_code != '\\0') {\n        *(int *)(statistics + 6) = *(int *)(statistics + 6) + 1;\n        statistics[10] = 0;\n        ptr_val = (undefined8 *)*statistics;\n        *(undefined4 *)(statistics + 7) = *(undefined4 *)((long)statistics + 0x34);\n        for (; ptr_val != (undefined8 *)0x0; ptr_val = (undefined8 *)*ptr_val) {\n          statistics[8] = ptr_val[2];\n          *(undefined4 *)(statistics + 9) = 0;\n          result_code = thunk_FUN_0010e439(&input_ptr,*(undefined8 *)(ptr_val[1] + 8));\n          if (result_code == '\\0') {\n            return 0;\n          }\n          ptr_list = (long *)ptr_val[1];\n          if (ptr_list != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptr_list[2] != (undefined8 *)0x0) {\n                for (ptr_array = *(undefined8 **)(undefined8 *)ptr_list[2]; ptr_array != (undefined8 *)0x0;\n                    ptr_array = (undefined8 *)*ptr_array) {\n                  result_code = FUN_001135a5(statistics,&input_ptr);\n                  if (result_code == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptr_list = (long *)*ptr_list;\n              if (ptr_list == (long *)0x0) break;\n              result_code = FUN_0010e439(&input_ptr,ptr_list[1]);\n              if (result_code == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result_code = FUN_00112502(statistics,&input_ptr,0xffffffffffffffff);\n          if (result_code == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_14,var_13) == -1) &&\n           (error_code = FUN_0010e2f0(&input_ptr,100,0,var_9,0), (char)error_code != '\\0')) {\n          (**(code **)(input_file[1] + 0x50))(var_5,memory_allocated + 8);\n          *data_buffer = memory_allocated;\n          *metadata = CONCAT44(var_2,var_1);\n          *output_value = var_5;\n          ptr = (undefined *)xmalloc();\n          *ptr = 0;\n          dest_string = ptr + 1;\n          *string_list = ptr;\n          for (counter = temp_array2._0_8_; counter != 0; counter = *(long *)(counter + 0x18)) {\n            strcpy(dest_string,*(char **)(counter + 8));\n            length = strlen(dest_string);\n            dest_string = dest_string + length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_errmsg",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init",
                "FUN_0010e439",
                "strlen",
                "strcpy",
                "FUN_00112502",
                "bfd_get_error",
                "FUN_0010e2f0",
                "FUN_0010bb52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "error_ptr",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *error_ptr;\n  undefined8 error_message;\n  \n  error_ptr = __errno_location();\n  if (*error_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(error_message);\n  }\n  else {\n    strerror(*error_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data"
            },
            "code": "\nvoid processData_0010a0a0(long data)\n\n{\n  FUN_00109ed3(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "process_data_00119ed0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "buffer_ptr",
                "local_c8": "local_buffer",
                "local_b8": "stack_buffer",
                "local_b0": "local_param_10",
                "local_a8": "local_param_11",
                "local_a0": "local_param_12",
                "local_98": "local_param_13",
                "local_90": "local_param_14",
                "local_88": "local_input_1",
                "local_78": "local_input_2",
                "local_68": "local_input_3",
                "local_58": "local_input_4",
                "local_48": "local_input_5",
                "local_38": "local_input_6",
                "local_28": "local_input_7",
                "local_18": "local_input_8"
            },
            "code": "\nvoid process_data_00119ed0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined stack_buffer [8];\n  undefined8 local_param_10;\n  undefined8 local_param_11;\n  undefined8 local_param_12;\n  undefined8 local_param_13;\n  undefined8 local_param_14;\n  undefined4 local_input_1;\n  undefined4 local_input_2;\n  undefined4 local_input_3;\n  undefined4 local_input_4;\n  undefined4 local_input_5;\n  undefined4 local_input_6;\n  undefined4 local_input_7;\n  undefined4 local_input_8;\n  \n  if (flag != '\\0') {\n    local_input_1 = input_1;\n    local_input_2 = input_2;\n    local_input_3 = input_3;\n    local_input_4 = input_4;\n    local_input_5 = input_5;\n    local_input_6 = input_6;\n    local_input_7 = input_7;\n    local_input_8 = input_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  size = 8;\n  local_buffer = stack_buffer;\n  length = 0x30;\n  local_param_10 = input_10;\n  local_param_11 = input_11;\n  local_param_12 = input_12;\n  local_param_13 = input_13;\n  local_param_14 = input_14;\n  FUN_00119e70(param_9,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108375",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00113f50",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00105828",
                "FUN_0010e6a8",
                "FUN_0010b800",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001152b6",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "process_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "reverse_and_improve_00112c1f",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "iteratorPtr",
                "param_4": "tempPtr",
                "plVar1": "pointerVar1",
                "lVar2": "longVar",
                "puVar3": "pointerVar3",
                "puVar4": "pointerVar4",
                "cVar5": "charVar",
                "piVar6": "intVar",
                "uVar7": "resultVar",
                "uVar8": "resultVar2",
                "iVar9": "intVar2",
                "uVar10": "resultVar3",
                "uVar11": "resultVar4",
                "uVar12": "resultVar5",
                "uVar13": "uintVar",
                "bVar14": "boolVar",
                "local_3c": "localVar"
            },
            "code": "\n\n\nundefined8 reverseAndImprove_00112c1f(ulong inputParam,undefined8 outputParam,int *iteratorPtr,long tempPtr)\n\n{\n  long *pointerVar1;\n  long longVar;\n  undefined8 *pointerVar3;\n  undefined8 *pointerVar4;\n  char charVar;\n  int *intVar;\n  undefined8 resultVar;\n  undefined8 resultVar2;\n  int intVar2;\n  undefined4 resultVar3;\n  undefined8 resultVar4;\n  ulong resultVar5;\n  uint uintVar;\n  bool boolVar;\n  uint localVar;\n  \n  resultVar5 = inputParam;\nLAB_00112c39:\n  if (iteratorPtr != (int *)0x0) {\n    intVar2 = *iteratorPtr;\n    if (intVar2 - 0x16U < 2) {\n      do {\n        pointerVar1 = *(long **)(iteratorPtr + 4);\n        uintVar = *(uint *)(inputParam + 0x30);\n        resultVar5 = (ulong)uintVar;\n        longVar = *pointerVar1;\n        if (*(uint *)(longVar + 0x10) == uintVar) {\n          if (intVar2 == 0x16) {\n            resultVar = FUN_0010bba1(outputParam,*(undefined8 *)(longVar + 8));\n            return resultVar;\n          }\nLAB_00112c94:\n          intVar = (int *)FUN_00112b6e(iteratorPtr,0);\n          if (intVar == (int *)0x0) goto LAB_00112dd6;\n          if ((*intVar - 7U < 4) && (*(long *)(intVar + 4) != 0)) {\n            if ((*(uint *)(*(long *)(intVar + 4) + 0xc) <= *(uint *)(inputParam + 0x38)) &&\n               (charVar = FUN_0010c7a0(inputParam,*(undefined8 *)(**(long **)(iteratorPtr + 4) + 8),intVar),\n               charVar == '\\0')) {\n              return 0;\n            }\n            uintVar = *(uint *)(*(long *)(intVar + 4) + 0xc);\n          }\n          else {\n            uintVar = 0;\n          }\n          intVar2 = *intVar;\n          resultVar = *(undefined8 *)(**(long **)(iteratorPtr + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (intVar2 == 0x17) {\n          if (longVar != tempPtr) goto LAB_00112c94;\n          *(uint *)(tempPtr + 0x10) = uintVar;\n          tempPtr = *pointerVar1;\n          iteratorPtr = (int *)pointerVar1[1];\n          goto LAB_00112c39;\n        }\n        if (tempPtr != 0) {\n          *(uint *)(tempPtr + 0x10) = uintVar;\n        }\n        iteratorPtr = (int *)pointerVar1[1];\n        if (iteratorPtr == (int *)0x0) goto LAB_00112dd6;\n        intVar2 = *iteratorPtr;\n        tempPtr = 0;\n      } while (intVar2 - 0x16U < 2);\nLAB_00112d74:\n      resultVar = 0;\n    }\n    else {\n      if (tempPtr == 0) goto LAB_00112d74;\n      *(undefined4 *)(tempPtr + 0x10) = *(undefined4 *)(inputParam + 0x30);\n      if (*(int *)(tempPtr + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      resultVar = *(undefined8 *)(tempPtr + 8);\n    }\n    switch(intVar2) {\n    case 0:\n      resultVar = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",resultVar);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      resultVar = FUN_00109dfe(outputParam);\n      return resultVar;\n    case 3:\n      resultVar = FUN_0010b800(outputParam,iteratorPtr[1],*(undefined *)(iteratorPtr + 4));\n      return resultVar;\n    case 4:\n      resultVar = FUN_0010b948(outputParam,iteratorPtr[1]);\n      return resultVar;\n    case 5:\n      resultVar = FUN_00109e76(outputParam,iteratorPtr[1]);\n      return resultVar;\n    case 6:\n      resultVar = FUN_00109d3e(outputParam,iteratorPtr[1]);\n      return resultVar;\n    case 7:\n    case 8:\n      if (*(long *)(iteratorPtr + 4) != 0) {\n        if ((*(uint *)(*(long *)(iteratorPtr + 4) + 0xc) <= *(uint *)(inputParam + 0x38)) &&\n           (charVar = FUN_0010c7a0(inputParam,resultVar,iteratorPtr), charVar == '\\0')) {\n          return 0;\n        }\n        longVar = *(long *)(iteratorPtr + 4);\n        if (*(int *)(inputParam + 0x30) == *(int *)(longVar + 8)) {\n          uintVar = *(uint *)(longVar + 0xc);\n          if (uintVar <= *(uint *)(inputParam + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          intVar2 = *iteratorPtr;\nLAB_00112ed2:\n          resultVar = FUN_00109d5c(outputParam,resultVar,uintVar,intVar2);\n          return resultVar;\n        }\n        *(int *)(longVar + 8) = *(int *)(inputParam + 0x30);\n      }\n      resultVar3 = 0;\n      if (*(long *)(iteratorPtr + 4) != 0) {\n        resultVar3 = *(undefined4 *)(*(long *)(iteratorPtr + 4) + 0xc);\n      }\n      charVar = FUN_0010a69a(outputParam,resultVar,resultVar3,*iteratorPtr == 7,iteratorPtr[1]);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(iteratorPtr + 4) != (long *)0x0) && (resultVar5 = 0, **(long **)(iteratorPtr + 4) != 0)) {\n        while( true ) {\n          pointerVar4 = *(undefined8 **)(**(long **)(iteratorPtr + 4) + resultVar5 * 8);\n          if (pointerVar4 == (undefined8 *)0x0) break;\n          charVar = reverseAndImprove_00112c1f(inputParam,outputParam,pointerVar4[1],0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          charVar = FUN_0010ba08(outputParam,*pointerVar4,*(undefined4 *)(pointerVar4 + 3),\n                               *(undefined4 *)((long)pointerVar4 + 0x1c),*(undefined4 *)(pointerVar4 + 2));\n          if (charVar == '\\0') {\n            return 0;\n          }\n          resultVar5 = (ulong)((int)resultVar5 + 1);\n        }\n      }\n      resultVar = FUN_0010a77a(outputParam);\n      return resultVar;\n    case 9:\n    case 10:\n      if (*(long *)(iteratorPtr + 4) == 0) {\n        uintVar = 0;\n        intVar = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(iteratorPtr + 4) + 0xc) <= *(uint *)(inputParam + 0x38)) &&\n           (resultVar5 = inputParam, charVar = FUN_0010c7a0(inputParam,resultVar,iteratorPtr), charVar == '\\0')) {\n          return 0;\n        }\n        longVar = *(long *)(iteratorPtr + 4);\n        uintVar = *(uint *)(longVar + 0xc);\n        if (*(int *)(inputParam + 0x30) == *(int *)(longVar + 8)) {\n          if (uintVar <= *(uint *)(inputParam + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          intVar2 = *iteratorPtr;\n          goto LAB_00112ed2;\n        }\n        intVar = *(int **)(longVar + 0x20);\n        *(int *)(longVar + 8) = *(int *)(inputParam + 0x30);\n        if (((intVar != (int *)0x0) && (iteratorPtr != intVar)) &&\n           (resultVar5 = inputParam, charVar = reverseAndImprove_00112c1f(inputParam,outputParam,intVar,0), charVar == '\\0')) {\n          return 0;\n        }\n      }\n      charVar = FUN_0010a83e(outputParam,resultVar,uintVar,*iteratorPtr == 9,iteratorPtr[1],intVar != (int *)0x0,\n                           iteratorPtr == intVar,resultVar5);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(iteratorPtr + 4) != (long *)0x0) {\n        uintVar = 0;\n        if (**(long **)(iteratorPtr + 4) != 0) {\n          while (pointerVar4 = *(undefined8 **)(**(long **)(iteratorPtr + 4) + (ulong)uintVar * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = reverseAndImprove_00112c1f(inputParam,outputParam,pointerVar4[1],0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointerVar4 + 0x14) == '\\0') {\n              charVar = FUN_0010ba08(outputParam,*pointerVar4,*(undefined4 *)(pointerVar4 + 3));\n            }\n            else {\n              charVar = FUN_0010a94e(outputParam,*pointerVar4,pointerVar4[3]);\n            }\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        uintVar = 0;\n        if (*(long *)(*(long *)(iteratorPtr + 4) + 0x10) != 0) {\n          while (pointerVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(iteratorPtr + 4) + 0x10) + (ulong)uintVar * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*pointerVar4,0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            charVar = FUN_0010aa53(outputParam,*(undefined4 *)(pointerVar4 + 1),\n                                 *(undefined *)((long)pointerVar4 + 0xc));\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        localVar = 0;\n        if (*(long *)(*(long *)(iteratorPtr + 4) + 0x18) != 0) {\n          while (pointerVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(iteratorPtr + 4) + 0x18) + (ulong)localVar * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = FUN_0010ab4d(outputParam,*pointerVar4);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = 0;\n            while (pointerVar3 = *(undefined8 **)(pointerVar4[1] + (ulong)uintVar * 8),\n                  pointerVar3 != (undefined8 *)0x0) {\n              if ((pointerVar3[4] != 0) &&\n                 (charVar = reverseAndImprove_00112c1f(inputParam,outputParam,pointerVar3[4],0), charVar == '\\0')) {\n                return 0;\n              }\n              charVar = reverseAndImprove_00112c1f(inputParam,outputParam,pointerVar3[1],0);\n              if (charVar == '\\0') {\n                return 0;\n              }\n              if (pointerVar3[3] == -1) {\n                charVar = FUN_0010adf2(outputParam,*pointerVar3,*(undefined4 *)(pointerVar3 + 2),\n                                     *(undefined *)((long)pointerVar3 + 0x14),\n                                     *(undefined *)((long)pointerVar3 + 0x15));\n              }\n              else {\n                charVar = FUN_0010add5(outputParam);\n              }\n              if (charVar == '\\0') {\n                return 0;\n              }\n              uintVar = uintVar + 1;\n            }\n            charVar = FUN_00109bbb(outputParam);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            localVar = localVar + 1;\n          }\n        }\n      }\n      resultVar = FUN_0010ae0e(outputParam);\n      return resultVar;\n    case 0xb:\n      pointerVar4 = *(undefined8 **)(iteratorPtr + 4);\n      if (pointerVar4 == (undefined8 *)0x0) {\n        resultVar2 = 0;\n        resultVar4 = 0;\n      }\n      else {\n        resultVar2 = pointerVar4[1];\n        resultVar4 = *pointerVar4;\n      }\n      resultVar = FUN_0010e453(outputParam,resultVar,resultVar4,resultVar2);\n      return resultVar;\n    case 0xc:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a083(outputParam);\n      return resultVar;\n    case 0xd:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar5 = 0;\n      if (*(long *)(*(long *)(iteratorPtr + 4) + 8) == 0) {\n        resultVar5 = 0xffffffff;\n      }\n      else {\n        while (longVar = *(long *)(*(long *)(*(long *)(iteratorPtr + 4) + 8) + resultVar5 * 8), longVar != 0) {\n          resultVar5 = resultVar5 + 1;\n          charVar = reverseAndImprove_00112c1f(inputParam,outputParam,longVar,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n        resultVar5 = resultVar5 & 0xffffffff;\n      }\n      resultVar = FUN_0010e5db(outputParam,resultVar5,*(undefined *)(*(long *)(iteratorPtr + 4) + 0x10));\n      return resultVar;\n    case 0xe:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a0a0(outputParam);\n      return resultVar;\n    case 0xf:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a0e9(outputParam,*(undefined8 *)(*(long *)(iteratorPtr + 4) + 8),\n                           *(undefined8 *)(*(long *)(iteratorPtr + 4) + 0x10));\n      return resultVar;\n    case 0x10:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(*(long *)(iteratorPtr + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      longVar = *(long *)(iteratorPtr + 4);\n      resultVar = FUN_0010a181(outputParam,*(undefined8 *)(longVar + 0x10),*(undefined8 *)(longVar + 0x18),\n                           *(undefined *)(longVar + 0x20));\n      return resultVar;\n    case 0x11:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a2b9(outputParam,*(undefined *)(*(long *)(iteratorPtr + 4) + 8));\n      return resultVar;\n    case 0x12:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(*(long *)(iteratorPtr + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a377(outputParam);\n      return resultVar;\n    case 0x13:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,**(undefined8 **)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar5 = 0;\n      if (*(long *)(*(long *)(iteratorPtr + 4) + 0x10) == 0) {\n        resultVar5 = 0xffffffff;\n      }\n      else {\n        while (longVar = *(long *)(*(long *)(*(long *)(iteratorPtr + 4) + 0x10) + resultVar5 * 8), longVar != 0)\n        {\n          resultVar5 = resultVar5 + 1;\n          charVar = reverseAndImprove_00112c1f(inputParam,outputParam,longVar,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(iteratorPtr + 4) + 8) != 0) &&\n         (charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(long *)(*(long *)(iteratorPtr + 4) + 8),0),\n         charVar == '\\0')) {\n        return 0;\n      }\n      resultVar = FUN_0010a424(outputParam,*(long *)(*(long *)(iteratorPtr + 4) + 8) != 0,resultVar5 & 0xffffffff,\n                           *(undefined *)(*(long *)(iteratorPtr + 4) + 0x18));\n      return resultVar;\n    case 0x14:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a0bd(outputParam);\n      return resultVar;\n    case 0x15:\n      charVar = reverseAndImprove_00112c1f(inputParam,outputParam,*(undefined8 *)(iteratorPtr + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = FUN_0010a0d3(outputParam);\n      return resultVar;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(iteratorPtr + 4) == iteratorPtr;\n  iteratorPtr = *(int **)**(undefined8 **)(iteratorPtr + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    resultVar = FUN_00109d97(outputParam);\n    return resultVar;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c7a0",
                "FUN_0010a181",
                "FUN_00109e76",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_00109dfe",
                "__assert_fail",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_0010a0bd",
                "FUN_0010a69a",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010ae0e",
                "FUN_00112b6e",
                "FUN_0010a94e",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010add5",
                "FUN_0010a377",
                "abort",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_00112c1f",
                "FUN_0010a0a0",
                "FUN_0010ab4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "copySuccessful",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char copySuccessful;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (copySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "temp",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 temp;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,source,message,temp);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_or_represent_architecture_00105828",
                "iVar1": "architectureCode",
                "uVar2": "archCode",
                "uVar3": "result",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 recognizeOrRepresentArchitecture_00105828(void)\n\n{\n  int architectureCode;\n  undefined4 archCode;\n  undefined8 result;\n  undefined8 errorMessage;\n  \n  architectureCode = bfd_get_arch();\n  if (architectureCode == 0) {\n    result = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,result);\n  }\n  else {\n    result = bfd_get_mach();\n    archCode = bfd_get_arch();\n    result = bfd_printable_arch_mach(archCode,result);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,result);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_or_represent_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * createTemporaryDirectory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_execute_0010bba1",
                "param_1": "binary_handle",
                "param_2": "entry_point",
                "lVar1": "hash_entry",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_execute_0010bba1(long binary_handle,undefined8 entry_point)\n\n{\n  long hash_entry;\n  undefined8 result;\n  \n  hash_entry = bfd_hash_lookup(binary_handle + 0x1b8,entry_point,0,0);\n  if ((hash_entry != 0) && (0 < *(long *)(hash_entry + 0x20))) {\n    result = FUN_00109cf4(binary_handle,*(long *)(hash_entry + 0x20),*(undefined4 *)(hash_entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_execute_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_0010e6a8",
                "param_1": "data",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "tempString",
                "sVar3": "inputStringLen",
                "sVar4": "tempStringLen",
                "__s_00": "finalString",
                "lVar5": "lookupResult",
                "lVar8": "count",
                "uVar1": "result",
                "uVar2": "errorCode",
                "uVar6": "errorMsg",
                "uVar7": "errorMsgFormat",
                "uVar9": "returnValue",
                "auVar10": "returnData"
            },
            "code": "\nundefined  [16] processString_0010e6a8(long data,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  uint result;\n  undefined4 errorCode;\n  char *tempString;\n  size_t inputStringLen;\n  size_t tempStringLen;\n  char *finalString;\n  long lookupResult;\n  undefined8 errorMsg;\n  undefined8 errorMsgFormat;\n  long count;\n  ulong returnValue;\n  undefined returnData [16];\n  \n  count = *(long *)(*(long *)(data + 0x60) + 0x10);\n  errorCode = *(undefined4 *)(*(long *)(data + 0x60) + 0x18);\n  tempString = (char *)FUN_00109b2f();\n  inputStringLen = strlen(inputString);\n  tempStringLen = strlen(tempString);\n  finalString = (char *)xmalloc(inputStringLen + 0x14 + tempStringLen);\n  if (count < 1) {\n    count = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = count + 1;\n    sprintf(finalString,\"%s:t%ld=%s\",inputString,count,tempString);\n  }\n  else {\n    sprintf(finalString,\"%s:t%s\",inputString,tempString);\n  }\n  free(tempString);\n  result = FUN_0010e2f0(data,0x80,0,0,finalString);\n  returnValue = (ulong)result;\n  if ((char)result != '\\0') {\n    free(finalString);\n    lookupResult = bfd_hash_lookup(data + 0x1b8,inputString,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = count;\n      *(undefined4 *)(lookupResult + 0x28) = errorCode;\n      goto LAB_0010e7b3;\n    }\n    errorCode = bfd_get_error();\n    errorMsg = bfd_errmsg(errorCode);\n    errorMsgFormat = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(errorMsgFormat,errorMsg);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnData._8_8_ = param4;\n  returnData._0_8_ = returnValue;\n  return returnData;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "sprintf",
                "bfd_errmsg",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "create_modified_string_0010e7c2",
                "param_1": "data",
                "param_2": "originalString",
                "__s": "extractedString",
                "sVar1": "originalStringLength",
                "sVar2": "extractedStringLength",
                "__s_00": "modifiedString",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] createModifiedString_0010e7c2(undefined8 data,char *originalString,undefined8 param_3,undefined8 param_4)\n\n{\n  char *extractedString;\n  size_t originalStringLength;\n  size_t extractedStringLength;\n  char *modifiedString;\n  undefined returnValue [16];\n  \n  extractedString = (char *)FUN_00109b2f();\n  originalStringLength = strlen(originalString);\n  extractedStringLength = strlen(extractedString);\n  modifiedString = (char *)xmalloc(originalStringLength + 3 + extractedStringLength);\n  sprintf(modifiedString,\"%s:T%s\",originalString,extractedString);\n  free(extractedString);\n  returnValue._0_4_ = FUN_0010e2f0(data,0x80,0,0,modifiedString);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(modifiedString);\n  }\n  returnValue._8_8_ = param_4;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_modified_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_and_exit_00119dd0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "data_1",
                "param_10": "data_2",
                "param_11": "data_3",
                "param_12": "data_4",
                "param_13": "data_5",
                "param_14": "data_6",
                "in_AL": "flag",
                "local_d8": "size_1",
                "local_d4": "size_2",
                "local_d0": "pointer_1",
                "local_c8": "pointer_2",
                "local_b8": "buffer",
                "local_b0": "data_2_copy",
                "local_a8": "data_3_copy",
                "local_a0": "data_4_copy",
                "local_98": "data_5_copy",
                "local_90": "data_6_copy",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\nvoid initialize_and_exit_00119dd0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 data_1,undefined8 data_2,undefined8 data_3,undefined8 data_4,\n                 undefined8 data_5,undefined8 data_6)\n\n{\n  char flag;\n  undefined4 size_1;\n  undefined4 size_2;\n  undefined *pointer_1;\n  undefined *pointer_2;\n  undefined buffer [8];\n  undefined8 data_2_copy;\n  undefined8 data_3_copy;\n  undefined8 data_4_copy;\n  undefined8 data_5_copy;\n  undefined8 data_6_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (flag != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  pointer_1 = &stack0x00000008;\n  size_1 = 8;\n  pointer_2 = buffer;\n  size_2 = 0x30;\n  data_2_copy = data_2;\n  data_3_copy = data_3;\n  data_4_copy = data_4;\n  data_5_copy = data_5;\n  data_6_copy = data_6;\n  FUN_00119e70(data_1,&size_1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00114190",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00115b70",
                "FUN_00108d9a",
                "FUN_0010543c",
                "FUN_0010da0b",
                "FUN_00108808",
                "FUN_00114460",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001083de"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorFlag",
                "iVar1": "errorCode",
                "unaff_RBP": "arrayPtr",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorFlag)\n\n{\n  int errorCode;\n  undefined8 *arrayPtr;\n  undefined8 returnAddress;\n  \n  if (errorFlag == -1) {\n    errorCode = bfd_get_error();\n    if (errorCode == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*arrayPtr);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_R10": "index",
                "unaff_RBX": "param1",
                "unaff_RBP": "param2",
                "unaff_R13": "dataPtr",
                "unaff_R14": "dataEndPtr",
                "unaff_R15": "param3",
                "in_R11": "condition",
                "psVar13": "currentData",
                "param_7": "param4",
                "param_9": "param5",
                "param_10": "param6",
                "param_11": "array",
                "param_12": "buffer",
                "param_13": "length",
                "param_14": "arraySize",
                "bVar14": "flag"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t sVar1;\n  code *pcVar2;\n  int iVar3;\n  uint uVar4;\n  undefined *__ptr;\n  size_t *in_RCX;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t param1;\n  size_t *param2;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong index;\n  undefined *puVar12;\n  size_t condition;\n  size_t *dataPtr;\n  size_t *dataEndPtr;\n  size_t param3;\n  size_t *currentData;\n  byte flag;\n  size_t param4;\n  size_t param5;\n  ulong param6;\n  size_t *array;\n  undefined *buffer;\n  long length;\n  size_t arraySize;\n  \n  flag = 0;\ncode_r0x00116852:\n  uVar4 = (int)index + 1;\n  if (0x10 < (int)index) goto LAB_001167f5;\nLAB_00116863:\n  dataEndPtr = dataEndPtr + -9;\n  do {\n    if (dataPtr <= dataEndPtr) {\n      sVar1 = dataEndPtr[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      uVar8 = (ulong)uVar4;\n      if ((*dataEndPtr == *param2) &&\n         (iVar3 = memcmp((void *)dataEndPtr[3],(void *)param2[3],*param2), iVar3 == 0)) {\n        uVar6 = dataEndPtr[7];\n        uVar5 = dataEndPtr[8];\n        index = uVar8 & 0xffffffff;\n        if (param3 == uVar6) {\n          if (param1 != uVar5) goto LAB_001167a6;\n          param2[2] = 0;\n        }\n        else {\n          if (param3 < uVar6) {\n            if (uVar5 < param3) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (param3 <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (param1 < param3) {\n              if ((0xfffffffffffffff0 < param1) ||\n                 (uVar6 <= (param1 + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (param1 == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (param1 <= uVar5) {\n              param2[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < param3) goto LAB_0010852c;\n          }\n          if ((condition == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= param1) {\n            uVar5 = param1;\n          }\n          if (uVar6 < param3) {\n            param3 = uVar6;\n          }\n          dataEndPtr[8] = uVar5;\n          dataEndPtr[7] = param3;\n          param2[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        dataEndPtr = param2;\n        param2 = dataEndPtr + 9;\n        if (in_RCX <= param2) {\n          qsort(array,arraySize,0x48,FUN_0011a250);\n          __ptr = (undefined *)xmalloc(param6 * 2);\n          param4 = 0;\n          puVar12 = __ptr;\n          for (currentData = array; currentData < in_RCX; currentData = currentData + 9) {\n            if (currentData[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(length + 8) + 0x50);\n              if ((currentData[7] == param5) && (currentData[8] == param4)) {\n                (*pcVar2)(*currentData,puVar12);\n                (**(code **)(*(long *)(length + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(length + 8) + 0x50))(currentData[2],puVar12 + 8);\n                uVar6 = currentData[6];\n                uVar8 = *currentData;\n                puVar12 = (undefined *)currentData[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)flag * -2 + 1;\n                  puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(length + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(length + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(length + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(length + 8) + 0x50))(currentData[2],puVar12 + 8);\n                uVar8 = *currentData;\n                puVar12 = (undefined *)currentData[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)flag * -2 + 1;\n                  puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                }\n                uVar6 = currentData[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(length + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(length + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(currentData[7],puVar9);\n                  (**(code **)(*(long *)(length + 8) + 0x38))(currentData[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(currentData[7],puVar9);\n                  (**(code **)(*(long *)(length + 8) + 0x50))(currentData[8],puVar9 + 4);\n                }\n                param5 = currentData[7];\n                param4 = currentData[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)__ptr;\n          uVar8 = uVar6;\n          puVar12 = __ptr;\n          if (uVar6 < param6) {\n            for (; param6 = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *buffer = *puVar12;\n              puVar12 = puVar12 + (ulong)flag * -2 + 1;\n              buffer = buffer + (ulong)flag * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(array);\n          return param6;\n        }\n        condition = dataEndPtr[0xb];\n      } while (condition == 0);\n      param3 = dataEndPtr[0x10];\n      param1 = dataEndPtr[0x11];\n      uVar4 = 0;\n      if (param3 != param1) break;\n      dataEndPtr[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "free",
                "qsort",
                "memcmp",
                "FUN_00116852"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "get_next_linked_item_00113d3a",
                "param_1": "current_item",
                "lVar1": "next_linked_item"
            },
            "code": "\nlong get_next_linked_item_00113d3a(long current_item)\n\n{\n  long next_linked_item;\n  \n  if (current_item != 0) {\n    next_linked_item = *(long *)(current_item + 8);\n    if (next_linked_item == 0) {\n      next_linked_item = FUN_00112904(0xc,0);\n      if (next_linked_item == 0) {\n        next_linked_item = 0;\n      }\n      else {\n        *(long *)(next_linked_item + 0x10) = current_item;\n        *(long *)(current_item + 8) = next_linked_item;\n      }\n    }\n    return next_linked_item;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "get_next_linked_item_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_function_0010a0d3",
                "param_1": "input"
            },
            "code": "\nvoid executeFunction_0010a0d3(long input)\n\n{\n  FUN_00109ed3(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_binary_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "result",
                "pcVar2": "ptrVar2",
                "ppcVar3": "ptrPtrVar3",
                "cVar4": "charVar",
                "iVar5": "intVar",
                "uVar6": "uintVar",
                "sVar7": "sizeVar1",
                "sVar8": "sizeVar2",
                "lVar9": "longVar",
                "pcVar10": "ptrVar10",
                "pcVar11": "ptrVar11",
                "pcVar12": "ptrVar12",
                "uVar13": "uintVar2",
                "bVar14": "boolVar",
                "local_50": "localVar1",
                "local_48": "localVar2",
                "local_40": "localVar3"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processBinary_00115530(long param1,char **param2,long param3)\n\n{\n  long result;\n  char *ptrVar2;\n  char **ptrPtrVar3;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  long longVar;\n  char *ptrVar10;\n  char *ptrVar11;\n  char *ptrVar12;\n  uint uintVar2;\n  bool boolVar;\n  long localVar1;\n  char *localVar2;\n  long localVar3 [2];\n  \n  charVar = FUN_001159d0(param2);\n  if (charVar != '\\0') {\n    return;\n  }\n  ptrVar10 = *param2;\n  uintVar2 = *(uint *)((long)param2 + 0x24);\n  localVar2 = ptrVar10;\n  ptrPtrVar3 = DAT_001278f8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    uintVar2 = uintVar2 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; ptrPtrVar3 != (char **)0x0; ptrPtrVar3 = (char **)ptrPtrVar3[3]) {\n    intVar = strcmp(*ptrPtrVar3,ptrVar10);\n    if (intVar == 0) {\n      if (*(uint *)(ptrPtrVar3 + 2) != 0xffffffff) {\n        uintVar2 = *(uint *)(ptrPtrVar3 + 2);\n      }\n      if (ptrVar10 != ptrPtrVar3[1]) {\n        localVar2 = ptrPtrVar3[1];\n        uintVar2 = FUN_00115f30(uintVar2,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (ptrVar10 = DAT_00127918, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (ptrVar10 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    sizeVar1 = strlen(ptrVar10);\n    sizeVar2 = strlen(localVar2);\n    ptrVar12 = (char *)xmalloc(sizeVar1 + 1 + sizeVar2);\n    ptrVar10 = strcpy(ptrVar12,ptrVar10);\n    localVar2 = strcat(ptrVar10,localVar2);\n  }\n  longVar = FUN_00114190(*param2,0,0x80);\n  boolVar = false;\n  if (longVar == 0) {\n    if ((DAT_00127a48 == 4) && ((uintVar2 & 0x2000001) != 0)) {\n      intVar = *(int *)(*(long *)(param1 + 8) + 8);\n      if (intVar == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            boolVar = (uintVar2 & 0x2000000) == 0;\n            uintVar = ~((-(uint)((uintVar2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & uintVar;\n          }\n          else {\n            uintVar = 0xfdfffefd;\n          }\n          uintVar2 = uintVar2 & uintVar;\n        }\n      }\n      else if ((intVar != 2) || (intVar = strcmp(*param2,\".buildid\"), intVar != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uintVar2 = FUN_00115f30(uintVar2 & 0x104 | *(uint *)(longVar + 0x28),param3,*param2);\n  }\n  charVar = bfd_convert_section_setup(param1,param2,param3,&localVar2,localVar3);\n  if (charVar == '\\0') {\n    ptrVar10 = (char *)0x0;\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  ptrVar10 = (char *)bfd_make_section_anyway_with_flags(param3,localVar2,uintVar2);\n  if (ptrVar10 == (char *)0x0) {\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      localVar3[0] = 0;\n      goto LAB_001158e7;\n    }\n    charVar = bfd_set_section_size(ptrVar10,localVar3[0]);\n    if (charVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    localVar3[0] = ((((long)DAT_00127a3c - 1U) + localVar3[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    charVar = bfd_set_section_size(ptrVar10);\n    if (charVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  localVar1 = 0;\n  ptrVar12 = param2[6];\n  longVar = FUN_00114190(*param2,0,0x18);\n  if (longVar == 0) {\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar11 = *param2;\n    ptrVar12 = ptrVar12 + _DAT_001279b0;\n    *(char **)(ptrVar10 + 0x30) = ptrVar12;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12;\n    ptrVar12 = param2[7];\n    longVar = FUN_00114190(ptrVar11,0,0x60);\n    if (longVar == 0) goto LAB_00115695;\nLAB_00115860:\n    ptrVar11 = *(char **)(longVar + 0x20);\n    if ((*(byte *)(longVar + 0x14) & 0x40) != 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    longVar = FUN_00114190(*param2,0,0x200);\n    if (longVar != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar2 = *(uint *)((long)param2 + 0x7c);\n    if (uintVar2 < 0x3f) goto LAB_001156c4;\n    localVar1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptrVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    charVar = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptrVar10);\n    if (charVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    ptrVar11 = *(char **)(longVar + 0x18);\n    if ((*(byte *)(longVar + 0x14) & 8) == 0) {\n      ptrVar11 = ptrVar11 + (long)ptrVar12;\n    }\n    ptrVar10[0x28] = ptrVar10[0x28] | 1;\n    ptrVar2 = *param2;\n    *(char **)(ptrVar10 + 0x30) = ptrVar11;\n    *(char **)(ptrVar10 + 0x38) = ptrVar11;\n    ptrVar12 = param2[7];\n    longVar = FUN_00114190(ptrVar2,0,0x60);\n    if (longVar != 0) goto LAB_00115860;\nLAB_00115695:\n    ptrVar11 = *param2;\n    *(char **)(ptrVar10 + 0x38) = ptrVar12 + _DAT_001279b0;\n    longVar = FUN_00114190(ptrVar11,0,0x200);\n    if (longVar == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar2 = *(uint *)(longVar + 0x2c);\n    if (0x3e < uintVar2) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptrVar10 + 0x7c) = uintVar2;\n    *(undefined4 *)(ptrVar10 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    ptrVar10[0x28] = ptrVar10[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = ptrVar10;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    ptrVar12 = param2[0x1a];\n    longVar = FUN_00115d00(ptrVar12,param2[0x1c]);\n    if ((longVar == 0) ||\n       (result = *(long *)(param1 + 8), *(uint *)(longVar + 0x18) = *(uint *)(longVar + 0x18) | 0x20,\n       *(int *)(result + 8) != 5)) goto LAB_00115700;\n    *(long *)(ptrVar12 + 0xb0) = longVar;\n    charVar = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,ptrVar10);\n    if (charVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (boolVar) {\n    *(undefined4 *)(*(long *)(ptrVar10 + 0xd0) + 4) = 8;\n  }\n  if (localVar1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param3,ptrVar10,localVar1);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00115f30",
                "xmalloc",
                "bfd_set_section_size",
                "strcat",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup",
                "strlen",
                "strcpy",
                "FUN_00108072",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "send_data_0010a0bd",
                "param_1": "data"
            },
            "code": "\nvoid sendData_0010a0bd(long data)\n\n{\n  FUN_00109ed3(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "send_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_input_00113e5e",
                "param_1": "output",
                "param_2": "input",
                "param_3": "length",
                "cVar1": "result",
                "local_20": "temp_arr"
            },
            "code": "\nundefined8 validate_input_00113e5e(undefined8 output,char **input,long length)\n\n{\n  char result;\n  char *temp_arr [2];\n  \n  temp_arr[0] = *input;\n  *input = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)temp_arr[0] < 5) ||\n      (result = FUN_00113fb0(temp_arr[0],\"type\"), result == '\\0')) ||\n     ((temp_arr[0][4] != '$' && (temp_arr[0][4] != '.')))) {\n    if (*temp_arr[0] != '_') {\n      return 1;\n    }\n    if (temp_arr[0][1] != '_') {\n      return 1;\n    }\n    if (temp_arr[0][2] != 'o') {\n      return 1;\n    }\n    if (temp_arr[0][3] != 'p') {\n      return 1;\n    }\n    temp_arr[0] = temp_arr[0] + 4;\n  }\n  else {\n    temp_arr[0] = temp_arr[0] + 5;\n  }\n  result = FUN_0010c95e(output,temp_arr,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_input_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "generate_formatted_string_0010abdd",
                "param_1": "input_param",
                "param_2": "string1",
                "param_3": "size",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "numeric_param",
                "param_8": "flag4",
                "lVar1": "data_ptr",
                "pcVar2": "str_ptr",
                "bVar3": "byte_val",
                "pcVar4": "temp_str_ptr",
                "__s": "additional_str_ptr",
                "sVar5": "str_len1",
                "sVar6": "str_len2",
                "sVar7": "str_len3",
                "sVar8": "str_len4",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "local_byte"
            },
            "code": "\nundefined8\ngenerateFormattedString_0010abdd(long input_param,char *string1,uint size,char flag1,char flag2,char flag3,\n            undefined8 numeric_param,char flag4)\n\n{\n  long data_ptr;\n  char *str_ptr;\n  byte byte_val;\n  char *temp_str_ptr;\n  char *additional_str_ptr;\n  size_t str_len1;\n  size_t str_len2;\n  size_t str_len3;\n  size_t str_len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  additional_str_ptr = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n  temp_str_ptr = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(input_param + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    additional_str_ptr = (char *)FUN_00109b2f(input_param);\n  }\n  data_ptr = *(long *)(input_param + 0x60);\n  if ((data_ptr == 0) || (str_ptr = *(char **)(data_ptr + 0x30), str_ptr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < size) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    str_len1 = strlen(str_ptr);\n    str_len2 = strlen(temp_str_ptr);\n    str_len3 = strlen(string1);\n    str_len4 = 0;\n    if (flag4 != '\\0') {\n      str_len4 = strlen(additional_str_ptr);\n    }\n    result = xrealloc(str_ptr,str_len3 + str_len1 + 0x28 + str_len2 + str_len4);\n    *(undefined8 *)(data_ptr + 0x30) = result;\n    str_ptr = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n    str_len1 = strlen(str_ptr);\n    sprintf(str_ptr + str_len1,\"%s:%s;%c%c%c\",temp_str_ptr,string1,(ulong)(byte)(0x32 - (char)size),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,str_len1);\n    free(temp_str_ptr);\n    if (flag4 != '\\0') {\n      temp_str_ptr = *(char **)(*(long *)(input_param + 0x60) + 0x30);\n      str_len1 = strlen(temp_str_ptr);\n      sprintf(temp_str_ptr + str_len1,\"%ld;%s;\",numeric_param,additional_str_ptr);\n      free(additional_str_ptr);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(input_param + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flag",
                "param_2": "pointers",
                "param_3": "value",
                "uVar1": "firstPointer",
                "uVar2": "warningMessage"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flag,undefined8 *pointers,undefined8 value)\n\n{\n  undefined8 firstPointer;\n  undefined8 warningMessage;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(pointers[1] + 8) != 2)) {\n    firstPointer = *pointers;\n    flag = flag & 0xf7ffffff;\n    warningMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(warningMessage,firstPointer,value);\n  }\n  return flag;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "input",
                "puVar1": "pointer",
                "piVar2": "pointer2"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *input)\n\n{\n  undefined8 *pointer;\n  int *pointer2;\n  \n  do {\n    if (*input != 1) {\n      if (1 < *input - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input + 4) + 8);\n    }\n    pointer = (undefined8 *)(input + 4);\n    pointer2 = **(int ***)(undefined8 *)*pointer;\n  } while ((input != pointer2) && (input = pointer2, pointer2 != (int *)0x0));\n  return ((undefined8 *)*pointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_00114c80",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "get_inverted_result_001082b3",
                "uVar1": "result",
                "^": "bitwiseXor"
            },
            "code": "\nuint getInvertedResult_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result bitwiseXor 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "get_inverted_result_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_binary_file_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDesc",
                "param_4": "mode",
                "param_5": "targetFormat",
                "param_6": "tempDir",
                "param_7": "options",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "strArrayPtr1",
                "pvVar7": "voidVar1",
                "lVar8": "longVar1",
                "puVar9": "ptrVar1",
                "piVar10": "intPtr1",
                "uVar11": "uintVar1",
                "uVar12": "uintVar2",
                "lVar13": "longVar2",
                "puVar14": "ptrVar2",
                "pcVar15": "strVar1",
                "ppcVar16": "strArrayPtr2",
                "pcVar17": "strVar2",
                "pcVar18": "strVar3",
                "pcVar19": "strVar4",
                "pcVar20": "codeVar1",
                "lVar21": "longVar3",
                "uVar22": "uintVar3",
                "pcVar23": "strVar5",
                "psVar24": "statPtr1",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localVar1",
                "local_198": "localVar2",
                "local_158": "localStat",
                "uStack_b0": "uStackVar1",
                "lStack_98": "lStackVar1",
                "dcgettext": "getLocalizedErrorMessage",
                "bfd_openr": "openInputFile",
                "bfd_stat": "getInputFileStats",
                "bfd_check_format": "checkInputFormat",
                "bfd_openw": "openOutputFile",
                "bfd_fdopenw": "openOutputFileWithDesc",
                "ppcVar19": "strArrayPtr3",
                "strerror": "getErrorString",
                "unlink": "deleteFile",
                "chmod": "changeFilePermission",
                "bfd_get_arch": "getArchitecture",
                "stat": "getFileStats",
                "printf": "print",
                "bfd_bread": "readFromInputFile",
                "bfd_bwrite": "writeToOutputFile",
                "close": "closeFile",
                "free": "freeMemory",
                "__errno_location": "getErrorNumber",
                "malloc": "allocateMemory"
            },
            "code": "\n\n\nvoid processBinaryFile_00114690(undefined8 inputFile,undefined8 outputFile,int fileDesc,undefined8 mode,\n                 undefined8 targetFormat,long tempDir,undefined8 options)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **strArrayPtr1;\n  void *voidVar1;\n  long longVar1;\n  undefined8 *ptrVar1;\n  int *intPtr1;\n  undefined8 uintVar1;\n  undefined8 uintVar2;\n  long longVar2;\n  undefined8 *ptrVar2;\n  char *strVar1;\n  char **strArrayPtr2;\n  char *strVar2;\n  char *strVar3;\n  undefined8 *__ptr;\n  char **strArrayPtr3;\n  code *codeVar1;\n  long longVar3;\n  uint uintVar3;\n  char *strVar5;\n  getFileStats *statPtr1;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localVar1;\n  long *localVar2;\n  getFileStats localStat;\n  void *local_c8 [3];\n  uint uStackVar1;\n  long lStackVar1;\n  \n  byteVar2 = 0;\n  longVar2 = FUN_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      uintVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(uintVar2,inputFile);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  ptrVar2 = (undefined8 *)bfd_openr(inputFile,targetFormat);\n  if ((ptrVar2 == (undefined8 *)0x0) || (intVar2 = bfd_stat(ptrVar2,mode), intVar2 != 0)) {\n    FUN_001126c0(inputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)ptrVar2 + 0x44) = *(uint *)((long)ptrVar2 + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(ptrVar2,2);\n  if (charVar1 != '\\0') {\n    if (tempDir == 0) {\n      charVar1 = '\\0';\n      tempDir = *(long *)ptrVar2[1];\n    }\n    if (fileDesc < 0) {\n      localVar1 = (undefined8 *)bfd_openw(outputFile,tempDir);\n    }\n    else {\n      localVar1 = (undefined8 *)bfd_fdopenw(outputFile,tempDir,fileDesc);\n    }\n    if (localVar1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        uintVar2 = *ptrVar2;\n        uintVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(uintVar1,uintVar2);\n        DAT_00127a30 = 0;\n      }\n      FUN_00114d50(localVar1,ptrVar2,DAT_001264b4);\n      localVar2 = localVar1 + 0x1f;\n      if ((*(byte *)((long)ptrVar2 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        uintVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,ptrVar2,0,uintVar2);\n        return;\n      }\n      strVar1 = (char *)FUN_0011a0e0(*localVar1);\n      if (strVar1 == (char *)0x0) {\n        intPtr1 = __errno_location();\n        strVar1 = strerror(*intPtr1);\n        uintVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(uintVar2,strVar1);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)ptrVar2 + 0x49);\n        uintVar3 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)ptrVar2 + 0x49);\n        uintVar3 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar3 << 3) | *(byte *)((long)localVar1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localVar1 + 0x44) = *(uint *)((long)localVar1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      strArrayPtr2 = (char **)bfd_openr_next_archived_file(ptrVar2,0);\n      charVar2 = bfd_set_format(localVar1,*(byte *)(ptrVar2 + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(0,localVar1,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (strArrayPtr2 != (char **)0x0))) {\n        strVar3 = *strArrayPtr2;\n        strVar2 = strVar3;\n        if (*strVar3 == '/') {\nLAB_0010527d:\n          uintVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(uintVar2,strVar3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*strVar2 != '\\0') {\n          strVar5 = strVar2;\n          if ((*strVar2 == '.') && (strVar5 = strVar2 + 1, strVar2[1] == '.')) {\n            strVar5 = strVar2 + 2;\n            if ((strVar2[2] == '\\0') || (strVar2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*strVar5 != '\\0' && (*strVar5 != '/')); strVar5 = strVar5 + 1) {\n          }\n          strVar2 = strVar5;\n          if (*strVar5 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        strVar3 = (char *)concat(strVar1,&DAT_0011b47d);\n        intVar2 = getFileStats(strVar3,&localStat);\n        ptrVar1 = __ptr;\n        if (-1 < intVar2) {\n          longVar2 = FUN_0011a0e0(strVar3);\n          freeMemory(strVar3);\n          if (longVar2 == 0) {\n            intPtr1 = __errno_location();\n            strVar3 = strerror(*intPtr1);\n            uintVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(uintVar2,strVar3);\n            goto LAB_00104e93;\n          }\n          ptrVar1 = (undefined8 *)xmalloc(0x18);\n          strVar3 = *strArrayPtr2;\n          *ptrVar1 = __ptr;\n          ptrVar1[2] = 0;\n          ptrVar1[1] = longVar2;\n          strVar3 = (char *)concat(longVar2,&DAT_0011b47d,strVar3);\n        }\n        intVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          statPtr1 = &localStat;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&statPtr1->st_dev = 0;\n            statPtr1 = (getFileStats *)((long)statPtr1 + (ulong)byteVar2 * -8 + 4);\n          }\n          strArrayPtr3 = (char **)strArrayPtr2[0x1d];\n          if ((char **)strArrayPtr2[0x1d] == (char **)0x0) {\n            strArrayPtr3 = strArrayPtr2;\n          }\n          intVar2 = (**(code **)(strArrayPtr3[1] + 0x1e8))(strArrayPtr2,&localStat);\n          if (intVar2 != 0) {\n            strVar2 = *strArrayPtr2;\n            uintVar2 = dcgettext(0,\"internal getFileStats error on %s\",5);\n            FUN_00119ed0(uintVar2,strVar2);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = strVar3;\n        *__ptr = ptrVar1;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(strArrayPtr2,1);\n        if (charVar2 == '\\0') {\n          uintVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,strArrayPtr2,0,uintVar2);\n          strArrayPtr3 = (char **)bfd_openw(strVar3,tempDir);\n          if (strArrayPtr3 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(strVar3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          strArrayPtr1 = (char **)strArrayPtr2[0x1d];\n          if ((char **)strArrayPtr2[0x1d] == (char **)0x0) {\n            strArrayPtr1 = strArrayPtr2;\n          }\n          intVar1 = (**(code **)(strArrayPtr1[1] + 0x1e8))(strArrayPtr2);\n          longVar2 = lStackVar1;\n          if (intVar1 == 0) {\n            if (lStackVar1 < 0) {\n              FUN_001125fa(strArrayPtr2);\n              uintVar2 = dcgettext(0,\"getFileStats returns negative size for `%s\\'\",5);\n              FUN_00119ed0(uintVar2);\n            }\n            else {\n              intVar1 = bfd_seek(strArrayPtr2,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  strVar2 = *strArrayPtr3;\n                  uintVar2 = FUN_001125fa(strArrayPtr2);\n                  strVar5 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(strVar5,uintVar2,strVar2);\n                }\n                voidVar1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidVar1,longVar3,strArrayPtr2);\n                  strArrayPtr1 = strArrayPtr2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidVar1,longVar3,strArrayPtr3), strArrayPtr1 = strArrayPtr3,\n                     longVar3 != longVar1)) {\n                    FUN_001126c0(0,strArrayPtr1,0,0);\n                    freeMemory(voidVar1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*strArrayPtr3,uStackVar1 | 0x100);\n                freeMemory(voidVar1);\n                charVar2 = bfd_closeFile_all_done(strArrayPtr3);\n                if (charVar2 == '\\0') {\n                  FUN_001126c0(strVar3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              uintVar2 = FUN_001125fa(strArrayPtr2);\n              FUN_0011a110(uintVar2);\n            }\n          }\n          else {\n            FUN_001126c0(0,strArrayPtr2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_closeFile_all_done(strArrayPtr3);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(strVar3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(strVar3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            strArrayPtr3 = (char **)bfd_openw(strVar3,*(undefined8 *)strArrayPtr2[1]);\n          }\n          else {\n            strArrayPtr3 = (char **)bfd_openw(strVar3,tempDir);\n          }\n          if (strArrayPtr3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(strArrayPtr2,strArrayPtr3,options);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(strArrayPtr2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_closeFile_all_done(strArrayPtr3);\n            if (charVar2 == '\\0') {\n              FUN_001126c0(strVar3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_closeFile(strArrayPtr3);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(strVar3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n            FUN_0011a350(strVar3,&localStat);\n          }\n          longVar2 = bfd_openr(strVar3,tempDir);\n          __ptr[2] = longVar2;\n          *localVar2 = longVar2;\n          localVar2 = (long *)(longVar2 + 0xf0);\n          strArrayPtr3 = (char **)bfd_openr_next_archived_file(ptrVar2);\n          bfd_closeFile(strArrayPtr2);\n          strArrayPtr2 = strArrayPtr3;\n        }\n      }\n      *localVar2 = 0;\n      voidVar1 = (void *)xstrdup(*localVar1);\n      if (DAT_00127a40 == 0) {\n        codeVar1 = bfd_closeFile;\n      }\n      else {\n        codeVar1 = bfd_closeFile_all_done;\n      }\n      charVar1 = (*codeVar1)(localVar1);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidVar1,0,0,0);\n      }\n      freeMemory(voidVar1);\n      voidVar1 = (void *)xstrdup(*ptrVar2);\n      charVar1 = bfd_closeFile(ptrVar2);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidVar1,0,0,0);\n      }\n      freeMemory(voidVar1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_closeFile();\n          unlink((char *)__ptr[1]);\n        }\n        freeMemory((void *)__ptr[1]);\n        ptrVar2 = (undefined8 *)*__ptr;\n        freeMemory(__ptr);\n        __ptr = ptrVar2;\n      }\n      rmdir(strVar1);\n      freeMemory(strVar1);\n      return;\n    }\nLAB_00105231:\n    closeFile(fileDesc);\n    FUN_001126c0(outputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(ptrVar2,1,local_c8);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(ptrVar2,3,&localStat);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      FUN_001126c0(inputFile,0,0,0);\n      if (intVar2 == 0xd) {\n        FUN_0011256b(local_c8[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      FUN_0011256b(localStat.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      freeMemory(local_c8[0]);\n    }\n  }\n  if (tempDir == 0) {\n    tempDir = *(long *)ptrVar2[1];\n  }\n  if (fileDesc < 0) {\n    longVar2 = bfd_openw(outputFile,tempDir);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFile,tempDir,fileDesc);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  FUN_00114d50(longVar2,ptrVar2,DAT_001264b4);\n  charVar1 = FUNC_00114e50(ptrVar2,longVar2,options);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar1 = bfd_closeFile(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_closeFile_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_closeFile(ptrVar2);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113f50",
                "strerror",
                "FUN_0011256b",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "bfd_set_format",
                "bfd_get_error",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_openr",
                "FUN_00114d50",
                "bfd_fdopenw",
                "bfd_set_error",
                "bfd_stat",
                "FUN_00119ed0",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_check_format_matches",
                "bfd_openw",
                "FUN_0011a0e0",
                "__errno_location",
                "free",
                "close",
                "bfd_close",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_binary_file_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "parse_integer_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "isSigned",
                "plVar1": "ptrToSize",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2",
                "local_8c": "stringValue",
                "auStack_8a": "tempArray"
            },
            "code": "\nundefined8 parseIntegerType_0010b800(long baseAddress,int size,char isSigned)\n\n{\n  long *ptrToSize;\n  undefined8 result;\n  size_t stringLength;\n  long tempVar1;\n  long tempVar2;\n  undefined2 stringValue;\n  undefined4 tempArray [24];\n  \n  if (size - 1U < 8) {\n    tempVar1 = baseAddress + 0xb8;\n    if (isSigned != '\\0') {\n      tempVar1 = baseAddress + 0x78;\n    }\n    ptrToSize = (long *)(tempVar1 + (ulong)(size - 1U) * 8);\n    tempVar1 = *ptrToSize;\n    if (tempVar1 != 0) {\n      result = FUN_00109cf4(baseAddress,tempVar1,size);\n      return result;\n    }\n    tempVar1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempVar1 + 1;\n    *ptrToSize = tempVar1;\n    sprintf((char *)&stringValue,\"%ld=r%ld;\",tempVar1,tempVar1);\n    if (isSigned == '\\0') {\n      tempVar2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&stringValue);\n      sprintf((char *)((long)&stringValue + stringLength),\"%ld;%ld;\",-tempVar2,tempVar2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&stringValue);\n      *(undefined2 *)((long)&stringValue + stringLength) = 0x3b30;\n      *(undefined *)((long)&stringValue + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&stringValue + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&stringValue + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = FUN_00109b52(baseAddress,&stringValue,tempVar1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "parse_integer_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "inputParam",
                "param_2": "flag",
                "param_3": "buffer",
                "param_4": "dataArray",
                "param_5": "arraySize",
                "uVar1": "count",
                "uVar2": "newCount",
                "cVar3": "result",
                "pcVar4": "tempStr",
                "sVar5": "strLength",
                "__s": "newStr",
                "lVar6": "tempVar",
                "__ptr": "ptr",
                "uVar7": "returnValue",
                "uVar8": "flag2",
                "lVar9": "loopVar",
                "uVar10": "tempCount",
                "puVar11": "ptr2",
                "bVar12": "byteVar"
            },
            "code": "\nundefined8 processData_00109ed3(long inputParam,uint flag,undefined4 buffer,long *dataArray,ulong *arraySize)\n\n{\n  ulong count;\n  ulong newCount;\n  char result;\n  char *tempStr;\n  size_t strLength;\n  char *newStr;\n  long tempVar;\n  void *ptr;\n  undefined8 returnValue;\n  undefined flag2;\n  long loopVar;\n  ulong tempCount;\n  undefined *ptr2;\n  byte byteVar;\n  \n  byteVar = 0;\n  tempVar = *(long *)(inputParam + 0x60);\n  if (tempVar != 0) {\n    count = *(ulong *)(tempVar + 0x10);\n    if (((long)count < 1) || (dataArray == (long *)0x0)) {\n      flag2 = *(undefined *)(tempVar + 0x1c);\n      tempStr = (char *)FUN_00109b2f(inputParam);\n      strLength = strlen(tempStr);\n      newStr = (char *)xmalloc(strLength + 2);\n      sprintf(newStr,\"%c%s\",(ulong)flag,tempStr);\n      free(tempStr);\n      tempVar = 0;\n    }\n    else {\n      tempCount = *arraySize;\n      if (tempCount <= count) {\n        if (tempCount == 0) {\n          tempCount = 10;\n        }\n        for (; tempCount <= count; tempCount = tempCount * 2) {\n        }\n        tempVar = xrealloc(*dataArray,tempCount * 8);\n        newCount = *arraySize;\n        *dataArray = tempVar;\n        ptr2 = (undefined *)(tempVar + newCount * 8);\n        for (loopVar = (tempCount - newCount) * 8; loopVar != 0; loopVar = loopVar + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)byteVar * -2 + 1;\n        }\n        *arraySize = tempCount;\n      }\n      tempVar = *(long *)(*dataArray + count * 8);\n      if ((tempVar != 0) && (*(char *)(*(long *)(inputParam + 0x60) + 0x1c) == '\\0')) {\n        ptr = (void *)FUN_00109b2f(inputParam);\n        free(ptr);\n        returnValue = FUN_00109cf4(inputParam,tempVar,buffer);\n        return returnValue;\n      }\n      tempVar = *(long *)(inputParam + 0x68);\n      *(long *)(inputParam + 0x68) = tempVar + 1;\n      tempStr = (char *)FUN_00109b2f(inputParam);\n      strLength = strlen(tempStr);\n      newStr = (char *)xmalloc(strLength + 0x14);\n      sprintf(newStr,\"%ld=%c%s\",tempVar,(ulong)flag,tempStr);\n      free(tempStr);\n      flag2 = 1;\n      *(long *)(*dataArray + count * 8) = tempVar;\n    }\n    result = FUN_00109b52(inputParam,newStr,tempVar,flag2,buffer);\n    if (result != '\\0') {\n      free(newStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "xrealloc",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_0010a0a0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010c7a0",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_00109022",
                "FUN_00114190",
                "FUN_0010e453",
                "FUN_0010c218",
                "FUN_00116110",
                "FUN_0010bbd3",
                "FUN_0010ebb0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_00113c43",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_00113e23",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109b52",
                "FUN_00114cf0",
                "FUN_00112925",
                "FUN_00107880",
                "FUN_0011a480",
                "FUN_0010afd5",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00113ce0",
                "FUN_0010e07c",
                "FUN_00114d60",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00104ea2",
                "FUN_00114c80",
                "FUN_0010b6ea",
                "FUN_0010bf86",
                "FUN_0010a424",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00112904",
                "FUN_0010a0e9",
                "FUN_0010da0b",
                "FUN_0010a377",
                "FUN_0010bc80",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_00113b98",
                "FUN_00109a0b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "infoUnits",
                "puVar2": "units1",
                "puVar3": "units2",
                "lVar4": "index",
                "puVar5": "currentUnit",
                "pcVar6": "varName",
                "bVar7": "zero",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *infoUnits;\n  undefined4 *units1;\n  undefined4 *units2;\n  long index;\n  undefined4 *currentUnit;\n  char *varName;\n  byte zero;\n  undefined returnValue [16];\n  \n  zero = 0;\n  varName = \"\";\n  if (filename != (char *)0x0) {\n    varName = filename;\n  }\n  units1 = (undefined4 *)xmalloc(0x18);\n  currentUnit = units1;\n  for (index = 6; index != 0; index = index + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)zero * -2 + 1;\n  }\n  *(char **)(units1 + 2) = varName;\n  units2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)units1;\n  currentUnit = units2;\n  for (index = 6; index != 0; index = index + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)zero * -2 + 1;\n  }\n  infoUnits = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(units2 + 2) = units1;\n  if (infoUnits == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)units2;\n  }\n  else {\n    *infoUnits = units2;\n  }\n  debugInfo[1] = (long)units2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUNC_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUNC_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "get_matching_value_00115d00",
                "param_1": "valueToMatch",
                "param_2": "dataStruct",
                "uVar1": "tempVar1",
                "lVar2": "matchingValue"
            },
            "code": "\nlong getMatchingValue_00115d00(long valueToMatch,long dataStruct)\n\n{\n  uint tempVar1;\n  long matchingValue;\n  \n  matchingValue = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(dataStruct + 8) + 8) == 5) {\n      if (*(int *)(valueToMatch + 0x28) == *(int *)(*(long *)(dataStruct + 0x110) + 0xd40)) {\n        tempVar1 = *(uint *)(valueToMatch + 0x2c);\n        if (tempVar1 == 0) {\n          matchingValue = 0;\n        }\n        else if ((ulong)tempVar1 <\n                 *(ulong *)(*(long *)(dataStruct + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(dataStruct + 8) + 0x380) + 0x340) + 5))\n        {\n          matchingValue = *(long *)(DAT_001278d0 + (ulong)(tempVar1 - 1) * 8);\n        }\n        else {\n          matchingValue = 0;\n        }\n      }\n      else {\n        matchingValue = 0;\n      }\n    }\n    else {\n      matchingValue = 0;\n    }\n  }\n  return matchingValue;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "get_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "create_data_structure_00113c43",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "lVar1": "result",
                "plVar2": "dataStructure",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateDataStructure_00113c43(long input1,long input2,long input3,long input4,undefined input5,\n            undefined8 input6)\n\n{\n  long result;\n  long *dataStructure;\n  undefined returnValue [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    result = FUN_00112904(0x10,0);\n    if (result != 0) {\n      dataStructure = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)dataStructure + 0x21) = 0;\n      *dataStructure = input1;\n      *(undefined4 *)((long)dataStructure + 0x24) = 0;\n      dataStructure[1] = input2;\n      dataStructure[2] = input3;\n      dataStructure[3] = input4;\n      *(undefined *)(dataStructure + 4) = input5;\n      *(long **)(result + 0x10) = dataStructure;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  returnValue._8_8_ = input6;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_data_00112a33",
                "param_1": "data",
                "param_2": "ptr_param",
                "param_3": "ptr_data",
                "param_4": "byte_param",
                "param_7": "length",
                "uVar1": "result",
                "lVar2": "returnValue",
                "plVar3": "ptr_returnValue"
            },
            "code": "\nbool processData_00112a33(undefined8 data,long ptr_param,undefined8 ptr_data,byte byte_param,undefined8 param_5\n                 ,undefined8 param_6,uint length)\n\n{\n  undefined result;\n  long returnValue;\n  long *ptr_returnValue;\n  \n  if (byte_param < 0x12) {\n    if (byte_param != 0) {\n      switch(byte_param) {\n      case 1:\n        result = FUN_0010c05d(param_5,*(undefined8 *)(ptr_param + 8),param_6,4,\n                             *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(param_5,*(undefined8 *)(ptr_param + 8),param_6,(length & 0xff) + 2,\n                             *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(param_5,*(undefined8 *)(ptr_param + 8),param_6,5,\n                             *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(param_5,*(undefined8 *)(ptr_param + 8),param_6,1,\n                             *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        returnValue = FUN_0010c6be(param_5,*(undefined8 *)(ptr_param + 8));\n        if (returnValue == 0) {\n          return false;\n        }\n        ptr_returnValue = (long *)FUN_0010da0b(data,ptr_data);\n        *ptr_returnValue = returnValue;\n        break;\n      case 0xd:\n        returnValue = FUN_0010c218(param_5,*(undefined8 *)(ptr_param + 8));\n        return returnValue != 0;\n      case 0x11:\n        result = FUN_0010bd62(param_5,*(undefined8 *)(ptr_param + 8),param_6,2,\n                             *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (byte_param == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(param_5,*(undefined8 *)(ptr_param + 8),param_6,1,\n                         *(long *)(ptr_param + 0x10) + *(long *)(*(long *)(ptr_param + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_0010c6be",
                "FUN_0010bd62"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_info_0010c2d2",
                "param_1": "result",
                "param_2": "data",
                "param_3": "typeCode",
                "uVar1": "type",
                "pcVar2": "typeName",
                "uVar3": "typeInfo",
                "lVar4": "returnValue",
                "plVar5": "ptrValue",
                "uVar6": "index"
            },
            "code": "\n\n\nlong getTypeInfo_0010c2d2(undefined8 result,long data,int *typeCode)\n\n{\n  uint type;\n  char *typeName;\n  undefined8 typeInfo;\n  long returnValue;\n  long *ptrValue;\n  uint index;\n  \n  if ((*typeCode == 0) && (type = typeCode[1], (int)type < 0)) {\n    index = ~type;\n    if (index < 0x22) {\n      returnValue = *(long *)(data + 0x90 + (ulong)index * 8);\n      if (returnValue == 0) {\n        switch(index) {\n        case 1:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          typeInfo = FUN_00113dfe(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          typeInfo = FUN_00113dfe(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          typeInfo = FUN_00113e17();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          typeInfo = FUN_00113df2(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          typeInfo = FUN_00113df2(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          typeInfo = 0;\n          break;\n        case 0x13:\n          typeInfo = FUN_00113dfe(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          typeInfo = FUN_00112904(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          typeInfo = FUN_00112904(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          typeInfo = FUN_00112904(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          typeInfo = FUN_00112904(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          typeInfo = FUN_00113dfe(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          typeInfo = FUN_00113dfe(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          typeInfo = FUN_00112904(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          typeInfo = FUN_00113dfe(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"int\";\n        }\n        returnValue = FUN_0010c218(result,typeName,typeInfo);\n        *(long *)(data + 0x90 + (ulong)index * 8) = returnValue;\n        return returnValue;\n      }\n      return returnValue;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)type);\n  }\n  else {\n    ptrValue = (long *)FUN_00109022(data);\n    if (ptrValue != (long *)0x0) {\n      if (*ptrValue == 0) {\n        returnValue = FUN_00113e23(ptrValue,0);\n        return returnValue;\n      }\n      return *ptrValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113df2",
                "FUN_00109022",
                "fprintf",
                "FUN_0010c218",
                "FUN_00112904",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_type_info_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_0010e07c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "length1",
                "lVar2": "length2",
                "lVar3": "length3",
                "cVar4": "character",
                "uVar5": "error",
                "__ptr": "memory",
                "uVar6": "result1",
                "uVar7": "result2",
                "puVar8": "auxPtr",
                "pcVar9": "errorMessage",
                "puVar10": "auxData",
                "uVar11": "value",
                "lVar12": "count",
                "iVar13": "index1",
                "iVar14": "index2",
                "local_a8": "localVar1",
                "uStack_a4": "localVar2",
                "uStack_a0": "localVar3",
                "uStack_9c": "localVar4",
                "local_88": "buffer",
                "local_6a": "localVar5",
                "local_68": "byte1",
                "local_67": "byte2",
                "local_60": "localBuffer",
                "local_56": "localVar6"
            },
            "code": "\nundefined8\nprocessBinary_0010e07c(undefined8 param1,long *param2,undefined8 param3,int param4,long param5,\n            undefined8 param6)\n\n{\n  long length1;\n  long length2;\n  long length3;\n  char character;\n  undefined4 error;\n  void *memory;\n  undefined8 result1;\n  undefined8 result2;\n  undefined4 *auxPtr;\n  char *errorMessage;\n  undefined *auxData;\n  uint value;\n  long count;\n  int index1;\n  int index2;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined buffer [30];\n  undefined2 localVar5;\n  byte byte1;\n  byte byte2;\n  undefined localBuffer [10];\n  ushort localVar6;\n  \n  index2 = 10;\n  count = 0;\n  length1 = *(long *)(param5 + 0x18);\n  memory = (void *)xmalloc(0x50);\n  while ((param2[3] < length1 && (param2[2] < param2[1]))) {\n    length2 = *(long *)(*param2 + param2[2] * 8);\n    character = bfd_coff_get_syment(param1,length2,buffer);\n    if (character == '\\0') {\n      error = bfd_get_error();\n      result1 = bfd_errmsg(error);\n      errorMessage = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      result2 = dcgettext(0,errorMessage,5);\n      FUN_00119ed0(result2,result1);\n      free(memory);\n      return 0;\n    }\n    length3 = param2[3];\n    auxData = (undefined *)0x0;\n    param2[2] = param2[2] + 1;\n    param2[3] = length3 + 1 + (ulong)byte2;\n    if (byte2 != 0) {\n      auxData = localBuffer;\n      character = bfd_coff_get_auxent(param1,length2,0,auxData);\n      if (character == '\\0') {\n        error = bfd_get_error();\n        result1 = bfd_errmsg(error);\n        errorMessage = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (byte1 == 0x12) {\n      value = (uint)localVar6;\n      index1 = (int)*(undefined8 *)(length2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(length2 + 0x20) + 0x30);\n    }\n    else {\n      if (byte1 < 0x13) {\n        if ((byte1 == 8) || (byte1 == 0xb)) {\n          value = 0;\n          index1 = ((int)*(undefined8 *)(length2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(length2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (byte1 == 0x66) break;\n      value = 0;\n      index1 = 0;\n    }\nLAB_0010e214:\n    result2 = FUN_0010dac0(param1,param2,param3,length3,localVar5,auxData,1);\n    result1 = *(undefined8 *)(length2 + 8);\n    auxPtr = (undefined4 *)xmalloc(0x20);\n    localVar1 = (undefined4)result1;\n    localVar2 = (undefined4)((ulong)result1 >> 0x20);\n    localVar3 = (undefined4)result2;\n    localVar4 = (undefined4)((ulong)result2 >> 0x20);\n    *(undefined8 *)(auxPtr + 5) = 0;\n    auxPtr[6] = index1;\n    auxPtr[7] = value;\n    auxPtr[4] = 0;\n    *auxPtr = localVar1;\n    auxPtr[1] = localVar2;\n    auxPtr[2] = localVar3;\n    auxPtr[3] = localVar4;\n    if (index2 <= (int)count + 1) {\n      index2 = index2 + 10;\n      memory = (void *)xrealloc(memory,(long)index2 << 3,auxPtr,0,param6);\n    }\n    *(undefined4 **)((long)memory + count * 8) = auxPtr;\n    count = count + 1;\n  }\n  *(undefined8 *)((long)memory + (long)(int)count * 8) = 0;\n  result1 = FUN_00113da9(param4 == 8,*(undefined2 *)(param5 + 10),memory);\n  return result1;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_coff_get_auxent",
                "FUN_00113da9",
                "xmalloc",
                "bfd_get_error",
                "free",
                "FUN_00119ed0",
                "xrealloc",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_zero_result_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_zero_result_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_zero_result_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_file_and_store_lines_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "lines",
                "iVar1": "lineNumber",
                "piVar2": "errorNumberPointer",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "__n": "fileSize",
                "__ptr": "fileContents",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "extraSpaces",
                "bVar8": "currentByte",
                "pbVar9": "nextByte",
                "pbVar10": "currentChar",
                "pbVar11": "nextChar",
                "pbVar12": "startOfLine"
            },
            "code": "\nvoid readFileAndStoreLines_00114460(char *filename,undefined8 hashTable,byte **lines)\n\n{\n  int lineNumber;\n  int *errorNumberPointer;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  size_t fileSize;\n  byte *fileContents;\n  FILE *file;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *extraSpaces;\n  byte currentByte;\n  byte *nextByte;\n  byte *currentChar;\n  byte *nextChar;\n  byte *startOfLine;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    fileContents = (byte *)xmalloc(fileSize + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errorNumberPointer = __errno_location();\n      errorMessage = strerror(*errorNumberPointer);\n      localizedErrorMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(localizedErrorMessage,filename,errorMessage);\n    }\n    bytesRead = fread(fileContents,1,fileSize,file);\n    if ((bytesRead == 0) || (lineNumber = ferror(file), lineNumber != 0)) {\n      localizedErrorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(localizedErrorMessage,filename);\n    }\n    lineNumber = 1;\n    fclose(file);\n    *(undefined2 *)(fileContents + fileSize) = 10;\n    currentByte = *fileContents;\n    startOfLine = fileContents;\n    while (currentChar = startOfLine, currentByte != 0) {\n      for (; currentByte = *currentChar, nextChar = currentChar, currentByte != 10; currentChar = currentChar + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextByte = currentChar + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentChar = 0;\n            nextByte = currentChar + 1;\n            if (currentChar[1] == 10) {\n              nextByte = currentChar + 2;\n              nextChar = currentChar + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentChar = 0;\n      if (currentChar[1] == 0xd) {\n        nextChar = currentChar + 1;\n        nextByte = currentChar + 2;\n      }\n      else {\n        nextByte = currentChar + 1;\n      }\nLAB_00114553:\n      currentByte = *startOfLine;\n      while ((currentByte == 0x20 || (currentChar = startOfLine, currentByte == 9))) {\n        currentChar = startOfLine + 1;\n        startOfLine = startOfLine + 1;\n        currentByte = *currentChar;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentChar[1];\n        currentChar = currentChar + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentChar[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentChar[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentChar[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentChar[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentChar[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentChar[6];\n          extraSpaces = currentChar + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = extraSpaces[1];\n                extraSpaces = extraSpaces + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          localizedErrorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(localizedErrorMessage,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentChar = 0;\n      if (startOfLine < currentChar) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,startOfLine,1);\n        *hashTableSlot = startOfLine;\n      }\n      lineNumber = lineNumber + 1;\n      startOfLine = nextByte;\n      currentByte = nextChar[1];\n    }\n    *lines = fileContents;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "FUN_00113f50",
                "FUN_00119dd0",
                "fclose",
                "strerror",
                "ferror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_store_lines_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "param1",
                "param_2": "inputString1",
                "param_3": "inputString2",
                "param_4": "flag",
                "cVar1": "characterFlag",
                "lVar2": "localVar1",
                "__s": "stringFromFunction",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long param1,char *inputString1,char *inputString2,int flag)\n\n{\n  char characterFlag;\n  long localVar1;\n  char *stringFromFunction;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *flagString;\n  \n  characterFlag = *(char *)(*(long *)(param1 + 0x60) + 0x1c);\n  stringFromFunction = (char *)FUN_00109b2f();\n  formattedString = *(char **)(*(long *)(param1 + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(inputString1);\n    length3 = strlen(stringFromFunction);\n    length4 = strlen(inputString2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param1 + 0x60) + 0x20),inputString1,flagString,\n            stringFromFunction,inputString2,*(long *)(param1 + 0x60));\n    free(*(void **)(*(long *)(param1 + 0x60) + 0x20));\n    localVar1 = *(long *)(param1 + 0x60);\n    *(char **)(localVar1 + 0x20) = formattedString;\n    if (characterFlag != '\\0') {\n      *(undefined *)(localVar1 + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)localVar1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_data_00113b1e",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "auVar1": "returnVal1",
                "piVar2": "ptr",
                "uVar3": "result",
                "auVar4": "returnVal2"
            },
            "code": "\nundefined  [16] extractData_00113b1e(long data,undefined8 param2,ulong param3,undefined8 param4)\n\n{\n  undefined returnVal1 [16];\n  int *ptr;\n  undefined8 result;\n  undefined returnVal2 [16];\n  \n  if (data != 0) {\n    ptr = (int *)FUN_00112b6e(data,0);\n    if ((ptr == (int *)0x0) || (3 < *ptr - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(ptr + 4);\n    }\n    returnVal2._8_8_ = param4;\n    returnVal2._0_8_ = result;\n    return returnVal2;\n  }\n  returnVal1._8_8_ = 0;\n  returnVal1._0_8_ = param3;\n  return returnVal1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_data_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "perform_request_0010a0e9",
                "param_1": "binaryAddress",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "value1",
                "uVar2": "value2",
                "__s": "string1",
                "sVar3": "stringLength",
                "__s_00": "string2"
            },
            "code": "\nundefined4 performRequest_0010a0e9(long binaryAddress,undefined8 param1,undefined8 param2)\n\n{\n  undefined value1;\n  undefined4 value2;\n  char *string1;\n  size_t stringLength;\n  char *string2;\n  \n  value1 = *(undefined *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  value2 = *(undefined4 *)(*(long *)(binaryAddress + 0x60) + 0x18);\n  string1 = (char *)FUN_00109b2f();\n  stringLength = strlen(string1);\n  string2 = (char *)xmalloc(stringLength + 100);\n  sprintf(string2,\"r%s;%ld;%ld;\",string1,param1,param2);\n  free(string1);\n  value2 = FUN_00109b52(binaryAddress,string2,0,value1,value2);\n  if ((char)value2 != '\\0') {\n    free(string2);\n  }\n  return value2;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "perform_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_duplicate_string_00115f50",
                "param_1": "length",
                "param_2": "strings",
                "param_3": "flag",
                "__s1": "currentString",
                "uVar1": "stringComparisonResult",
                "uVar2": "result",
                "extraout_EDX": "extraResult",
                "plVar3": "stringList",
                "auVar4": "tempVariable"
            },
            "code": "\nuint checkDuplicateString_00115f50(long length,char **strings,char flag)\n\n{\n  char *currentString;\n  uint stringComparisonResult;\n  undefined4 result;\n  undefined4 extraResult;\n  long *stringList;\n  undefined tempVariable [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  tempVariable = FUN_001159d0(strings);\n  if (tempVariable[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      currentString = *strings;\n      stringList = DAT_001279d8;\n      do {\n        stringComparisonResult = strcmp(currentString,(char *)stringList[1]);\n        tempVariable._4_4_ = 0;\n        tempVariable._0_4_ = stringComparisonResult;\n        tempVariable._8_4_ = extraResult;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        stringList = (long *)*stringList;\n      } while (stringList != (long *)0x0);\n    }\n    result = tempVariable._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (tempVariable._8_4_ = result, tempVariable._0_8_ = *(long *)(length + 8),\n         *(int *)(*(long *)(length + 8) + 8) != 5)) ||\n        ((tempVariable._0_8_ = (ulong)strings[0x1a], *(int *)(strings[0x1a] + 4) != 7 ||\n         (tempVariable = FUN_00113fb0(*strings,\".gnu.build.attributes\"), tempVariable[0] == '\\0')))) &&\n       ((*(byte *)((long)strings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(tempVariable._1_7_,strings[8] == (char *)0x0) |\n             CONCAT31(tempVariable._9_3_,strings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_duplicate_string_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "process_section_bytes_001083de",
                "unaff_RBX": "sectionDataPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionData",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid processSectionBytes_001083de(void)\n\n{\n  undefined8 sectionData;\n  undefined8 errorMessage;\n  undefined8 *sectionDataPointer;\n  undefined4 sectionLength;\n  \n  sectionData = *sectionDataPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionData,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "process_section_bytes_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPtr",
                "param_2": "size",
                "lVar1": "element",
                "cVar2": "isValid",
                "__ptr": "stringPtr",
                "uVar3": "sizeulong",
                "uVar4": "sizeMinusOne",
                "local_5a": "message"
            },
            "code": "\nvoid processData_0010b948(long dataPtr,uint size)\n\n{\n  long element;\n  char isValid;\n  void *stringPtr;\n  ulong sizeulong;\n  uint sizeMinusOne;\n  char message [50];\n  \n  sizeMinusOne = size - 1;\n  sizeulong = (ulong)size;\n  if ((sizeMinusOne < 0x10) && (element = *(long *)(dataPtr + 0xf8 + (ulong)sizeMinusOne * 8), element != 0)) {\n    FUN_00109cf4(dataPtr,element,sizeulong);\n    return;\n  }\n  isValid = FUN_0010b800(dataPtr,4,0);\n  if (isValid != '\\0') {\n    stringPtr = (void *)FUN_00109b2f(dataPtr);\n    element = *(long *)(dataPtr + 0x68);\n    *(long *)(dataPtr + 0x68) = element + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(dataPtr + 0xf8 + (ulong)sizeMinusOne * 8) = element;\n    }\n    sprintf(message,\"%ld=r%s;%u;0;\",element,stringPtr,sizeulong);\n    free(stringPtr);\n    FUN_00109b52(dataPtr,message,element,1,sizeulong);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010827b",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00113f50",
                "FUN_00109a32",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_001053b5",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010551d",
                "FUN_00108fb9",
                "FUN_00114460",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00114190",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_00116490",
                "FUN_00119f70",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00115b70",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_0010543c",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00108808",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_00114690",
                "FUN_00112c1f",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_001086af",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00119970",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_00104920",
                "FUN_0010911f",
                "FUN_00108916",
                "FUN_001083de",
                "FUN_0010808f",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_00104966",
                "FUN_00114dc7",
                "FUN_00104ea2",
                "FUN_00112996",
                "FUN_0010882c",
                "FUN_0010b6ea",
                "FUN_00107976",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_0010b800",
                "FUN_00108b3e",
                "FUN_00108200",
                "FUN_0010da0b",
                "FUN_0010bc80",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "input_value",
                "param_2": "debug_info",
                "iVar1": "value",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "debug_ptr",
                "bVar5": "is_circular",
                "local_18": "debug_list",
                "local_10": "input_list",
                "uVar2": "error_message"
            },
            "code": "\n\n\nint * find_real_type_00112b6e(int *input_value,long *debug_info)\n\n{\n  int value;\n  undefined8 error_message;\n  char *format_string;\n  int *result;\n  long *debug_ptr;\n  bool is_circular;\n  long *debug_list;\n  int *input_list;\n  \n  value = *input_value;\n  if ((value != 1) && (1 < value - 0x16U)) {\n    return input_value;\n  }\n  debug_ptr = debug_info;\n  while (debug_ptr != (long *)0x0) {\n    if ((input_value == (int *)debug_ptr[1]) ||\n       (is_circular = debug_ptr == (long *)*debug_ptr, debug_ptr = (long *)*debug_ptr, is_circular)) {\n      error_message = FUN_001129f4(input_value,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,error_message);\n      return (int *)0x0;\n    }\n  }\n  debug_list = debug_info;\n  input_list = input_value;\n  if (value - 0x16U < 2) {\n    result = (int *)find_real_type_00112b6e((*(undefined8 **)(input_value + 4))[1],&debug_list);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_value + 4);\n  if (input_value == result) {\n    return input_value;\n  }\n  if (result == (int *)0x0) {\n    return input_value;\n  }\n  result = (int *)find_real_type_00112b6e(result,&debug_list);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "param_3": "param1",
                "param_4": "param2",
                "param_5": "param3",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "returnValue",
                "__s": "str1",
                "__s_00": "str2",
                "sVar2": "length",
                "cVar3": "charVar"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long inputPointer,undefined8 inputValue,ulong param1,undefined param2,ulong param3,\n            byte flag1,byte flag2)\n\n{\n  undefined4 returnValue;\n  char *str1;\n  char *str2;\n  size_t length;\n  char charVar;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    str1 = (char *)0x0;\n    charVar = '\\0';\n  }\n  else {\n    charVar = *(char *)(*(long *)(inputPointer + 0x60) + 0x1c);\n    str1 = (char *)FUN_00109b2f();\n    param3 = param3 & 0xffffffff;\n    param1 = param1 & 0xffffffff;\n  }\n  returnValue = FUN_0010a69a(inputPointer,inputValue,param1,param2,param3);\n  if ((char)returnValue != '\\0') {\n    if (flag1 == 0) {\n      return returnValue;\n    }\n    if (flag2 == 0) {\n      if (str1 == (char *)0x0) {\n        return 0;\n      }\n      length = strlen(str1);\n      str2 = (char *)xmalloc(length + 3);\n      sprintf(str2,\"~%%%s\",str1);\n      free(str1);\n      if (charVar != '\\0') {\n        *(undefined *)(*(long *)(inputPointer + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(inputPointer + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str2 = (char *)xmalloc(0x14);\n      sprintf(str2,\"~%%%ld\",*(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(inputPointer + 0x60) + 0x38) = str2;\n    return returnValue;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "result",
                "puVar2": "allocated_data"
            },
            "code": "\nlong allocate_and_store_data_00113d6e(undefined8 data_1,undefined8 data_2)\n\n{\n  long result;\n  undefined8 *allocated_data;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocated_data = (undefined8 *)xmalloc(0x10);\n    *allocated_data = data_1;\n    allocated_data[1] = data_2;\n    *(undefined8 **)(result + 0x10) = allocated_data;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_0010abdd",
                "FUN_00108863",
                "FUN_0011256b",
                "FUN_0010e6a8",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_001088ae",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_00116110",
                "FUN_0010ebb0",
                "FUN_0010c1c6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_00114690",
                "FUN_00114b84",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_0011173a",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_00109b2f",
                "FUN_0010b6ea",
                "FUN_0010a424",
                "FUN_0010a0e9",
                "FUN_001081e9",
                "FUN_0010a377"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "sourcePtr",
                "param_2": "destinationPtr",
                "param_3": "condition"
            },
            "code": "\nvoid executeFunction_00114d50(long sourcePtr,long destinationPtr,uint condition)\n\n{\n  if (*(int *)(*(long *)(sourcePtr + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(destinationPtr + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(destinationPtr + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(sourcePtr + 8) + 0x380) + 0x78))(sourcePtr,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0011283f",
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_binary_file_copy_options_00108916",
                "param_1": "outputFilePtr",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "textPtr"
            },
            "code": "\nvoid printBinaryFileCopyOptions_00108916(FILE *outputFilePtr,int exitCode)\n\n{\n  undefined8 usageString;\n  char *textPtr;\n  \n  usageString = DAT_00127600;\n  textPtr = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFilePtr,textPtr,usageString);\n  textPtr = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFilePtr,textPtr);\n  textPtr = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFilePtr,textPtr);\n  textPtr = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFilePtr,textPtr);\n  textPtr = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFilePtr,textPtr);\n  textPtr = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFilePtr,textPtr);\n  FUN_00104a35(DAT_00127600,outputFilePtr);\n  if (exitCode == 0) {\n    textPtr = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFilePtr,textPtr,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_file_copy_options_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "bfdHandle",
                "param_2": "sectionIndex",
                "param_3": "segmentIndex",
                "param_4": "offset",
                "param_5": "address",
                "param_6": "size",
                "param_7": "flags",
                "param_8": "target",
                "param_9": "errorMessage",
                "param_10": "errorNumber",
                "param_11": "stringsArray",
                "param_12": "formatString",
                "param_13": "param1",
                "param_14": "param2"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 bfdHandle,undefined4 sectionIndex,undefined4 segmentIndex,undefined4 offset,\n                 undefined4 address,undefined4 size,undefined4 flags,undefined4 target,\n                 long errorMessage,long errorNumber,long *stringsArray,char *formatString,undefined8 param1,\n                 undefined8 param2)\n\n{\n  char in_AL;\n  int iVar1;\n  undefined8 uVar2;\n  undefined4 local_100;\n  undefined4 local_fc;\n  undefined *local_f8;\n  undefined *local_f0;\n  undefined local_e8 [32];\n  undefined8 local_c8;\n  undefined8 local_c0;\n  undefined4 local_b8;\n  undefined4 local_a8;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  \n  if (in_AL != '\\0') {\n    local_b8 = bfdHandle;\n    local_a8 = sectionIndex;\n    local_98 = segmentIndex;\n    local_88 = offset;\n    local_78 = address;\n    local_68 = size;\n    local_58 = flags;\n    local_48 = target;\n  }\n  local_c8 = param1;\n  local_c0 = param2;\n  iVar1 = bfd_get_error();\n  if (iVar1 == 0) {\n    uVar2 = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (errorNumber != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(errorNumber);\n    }\n    if ((stringsArray != (long *)0x0) && (*stringsArray != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    local_f8 = &stack0x00000008;\n    local_f0 = local_e8;\n    local_100 = 0x20;\n    local_fc = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&local_100);\n  }\n  fprintf(_stderr,\": %s\\n\",uVar2);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "fprintf",
                "bfd_get_error",
                "fwrite",
                "fputs",
                "fflush",
                "bfd_errmsg",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00108466",
                "FUN_0010551d",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010808f"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00109b52",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_001088ae"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_pointer_00113b4a",
                "param_1": "inputValue",
                "lVar1": "returnValue"
            },
            "code": "\nlong initializePointer_00113b4a(long inputValue)\n\n{\n  long returnValue;\n  \n  if (inputValue != 0) {\n    returnValue = FUN_00112904(0x15,0);\n    if (returnValue == 0) {\n      returnValue = 0;\n    }\n    else {\n      *(long *)(returnValue + 0x10) = inputValue;\n    }\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_information_0010edb4",
                "param_1": "file_information",
                "param_2": "new_filename",
                "param_3": "extra_data",
                "param_4": "file_size",
                "cVar1": "is_rename_successful",
                "iVar2": "filename_comparison_result",
                "uVar3": "result",
                "in_R10": "additional_argument"
            },
            "code": "\nundefined8 update_file_information_0010edb4(long file_information,undefined8 new_filename,undefined4 extra_data,ulong file_size)\n\n{\n  char is_rename_successful;\n  int filename_comparison_result;\n  undefined8 result;\n  undefined8 additional_argument;\n  \n  if (*(long *)(file_information + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_information + 0x1f0) < file_size) {\n    *(ulong *)(file_information + 0x1f0) = file_size;\n  }\n  filename_comparison_result = filename_cmp(new_filename);\n  if (filename_comparison_result != 0) {\n    is_rename_successful = FUN_0010e2f0(file_information,0x84,0,file_size,new_filename);\n    if (is_rename_successful == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_information + 0x210) = new_filename;\n  }\n  result = FUN_0010e2f0(file_information,0x44,extra_data,file_size - *(long *)(file_information + 0x200),0,additional_argument);\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_information_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_00119e70",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00104a35",
                "FUN_00108fb9",
                "FUN_001199d0",
                "FUN_0010911f",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00109022",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010871c",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "FUN_0010be1a",
                "FUN_0010bc80",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_0010b0fa",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_function_0010e5db",
                "param_1": "baseAddress",
                "param_2": "count",
                "cVar1": "result",
                "__ptr": "ptr1",
                "__s": "str1",
                "sVar2": "length",
                "__s_00": "str2",
                "in_R10": "constant",
                "iVar3": "iteration"
            },
            "code": "\nundefined  [16] reverseFunction_0010e5db(long baseAddress,int count)\n\n{\n  char result;\n  void *ptr1;\n  char *str1;\n  size_t length;\n  char *str2;\n  ulong constant;\n  int iteration;\n  undefined auVar4 [16];\n  \n  iteration = 0;\n  do {\n    if (count <= iteration) {\n      auVar4 = FUN_00109ed3(baseAddress,0x66,0,baseAddress + 0x188,baseAddress + 400,constant);\n      return auVar4;\n    }\n    if (*(char *)(*(long *)(baseAddress + 0x60) + 0x1c) == '\\0') {\n      ptr1 = (void *)FUN_00109b2f(baseAddress);\n      free(ptr1);\n    }\n    else {\n      str1 = (char *)FUN_00109b2f(baseAddress);\n      length = strlen(str1);\n      str2 = (char *)xmalloc(length + 3);\n      sprintf(str2,\":t%s\",str1);\n      free(str1);\n      result = FUN_0010e2f0(baseAddress,0x80,0,0,str2);\n      if (result == '\\0') {\n        auVar4._8_8_ = 0;\n        auVar4._0_8_ = constant;\n        return auVar4 << 0x40;\n      }\n      free(str2);\n    }\n    iteration = iteration + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_function_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_application_00104d25",
                "param_7": "inputArg"
            },
            "code": "\nvoid initializeApplication_00104d25(void)\n\n{\n  undefined8 inputArg;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0,inputArg,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_application_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_and_merge_debug_sections_0010551d",
                "puVar1": "sectionFlags",
                "bVar2": "isRelocation",
                "puVar3": "sectionName",
                "pcVar4": "sectionFunction",
                "puVar5": "debugSections",
                "uVar6": "mergedNotesSize",
                "uVar7": "sectionSize",
                "__s": "debugLinkSectionName",
                "cVar9": "result",
                "uVar10": "sectionFlags",
                "iVar11": "sectionType",
                "uVar12": "length",
                "uVar13": "error",
                "iVar14": "index",
                "plVar15": "sectionArray",
                "lVar21": "mergedNotesOffset",
                "plVar32": "currentSection",
                "lVar25": "stabSection",
                "lVar27": "stabStrSection",
                "__ptr": "sectionContents",
                "__ptr_00": "debugContents",
                "uVar20": "mergedOffset",
                "pcVar28": "mergedSymbol",
                "pcVar33": "previousSymbol",
                "ppuVar37": "stabPointer",
                "ppcVar35": "debugPointer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractAndMergeDebugSections_0010551d(void)\n\n{\n  uint *sectionFlags;\n  byte isRelocation;\n  undefined *sectionName;\n  code *sectionFunction;\n  undefined8 *debugSections;\n  ulong mergedNotesSize;\n  ulong sectionSize;\n  char *debugLinkSectionName;\n  char cVar8;\n  char result;\n  uint sectionFlags;\n  int sectionType;\n  uint length;\n  undefined4 error;\n  int index;\n  long *sectionArray;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *sectionContents;\n  void *debugContents;\n  ulong mergedOffset;\n  long mergedNotesOffset;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long stabSection;\n  FILE *debugLinkSectionName_00;\n  size_t sVar26;\n  long stabStrSection;\n  long *unaff_RBX;\n  char *mergedSymbol;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *currentSection;\n  char *previousSymbol;\n  undefined4 *sectionName4;\n  char **debugPointer;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **stabPointer;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (result = FUN_00113fb0(), result == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (stabSection = *(long *)(unaff_RBP + 0x40), stabSection == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    result = bfd_get_full_section_contents();\n    if (result != '\\0') {\n      stabStrSection = FUN_001163d0();\n      unaff_RBX[2] = stabStrSection;\n      if ((stabStrSection == stabSection) || (result = bfd_set_section_size(), result != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (stabSection = *(long *)(unaff_RBP + 8); stabSection != 0; stabSection = *(long *)(stabSection + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    stabSection = bfd_get_section_by_name();\n    if (stabSection == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(stabSection + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar18 = *(size_t *)(stabSection + 0x40);\n      debugLinkSectionName_00 = fopen((char *)puVar29[2],\"w\");\n      if (debugLinkSectionName_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        result = bfd_malloc_and_get_section();\n        if (result == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,debugLinkSectionName_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          previousSymbol = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar16,uVar17,previousSymbol);\n          free(in_stack_00000140);\n          fclose(debugLinkSectionName_00);\n          return 0;\n        }\n        fclose(debugLinkSectionName_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    stabSection = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (stabSection != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar17);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    stabSection = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17,stabSection);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      mergedOffset = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = mergedOffset;\n        mergedNotesSize = uVar24;\n        sectionSize = mergedOffset;\n        if (uVar22 != 0) {\n          while ((uVar30 = mergedNotesSize, sectionSize != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(mergedOffset + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            mergedNotesSize = mergedOffset;\n            sectionSize = uVar22;\n          }\n        }\n        mergedOffset = uVar30;\n      }\nLAB_00107db8:\n      if (mergedOffset == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        mergedOffset = *(long *)(mergedOffset + 0x40) + *(long *)(mergedOffset + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (mergedOffset < 0xfffffffffffff001) {\n          uVar24 = mergedOffset + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  currentSection = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUNC_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    stabPointer = &PTR_sdebugLinkSectionNametab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    sectionName4 = puStack0000000000000020;\n    for (stabSection = 0x18; stabSection != 0; stabSection = stabSection + -1) {\n      *sectionName4 = 0;\n      sectionName4 = sectionName4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      sectionName = *stabPointer;\n      stabSection = bfd_get_section_by_name();\n      stabStrSection = bfd_get_section_by_name();\n      if ((stabSection != 0) && (stabStrSection != 0)) {\n        stabSection = *(long *)(stabSection + 0x40);\n        sectionContents = (void *)xmalloc(stabSection);\n        result = bfd_get_section_contents();\n        if (result == '\\0') {\n          error = bfd_get_error();\n          bfd_errmsg(error);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(sectionContents);\n        }\n        else {\n          uVar24 = *(ulong *)(stabStrSection + 0x40);\n          debugContents = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            error = bfd_get_error();\n            bfd_errmsg(error);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)debugContents + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = sectionContents; pvVar36 <= (void *)((long)sectionContents + stabSection + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                mergedOffset = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                isRelocation = *(byte *)((long)pvVar36 + 4);\n                error = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                stabStrSection = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (isRelocation == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + stabStrSection;\n                }\n                else {\n                  uVar22 = (mergedOffset & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    previousSymbol = (char *)((long)debugContents + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(previousSymbol);\n                      if (((sVar18 == 0) || (mergedSymbol = previousSymbol + (sVar18 - 1), *mergedSymbol != '\\')) ||\n                         ((ulong)((long)sectionContents + stabSection) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *mergedSymbol = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      sectionType = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      mergedOffset = (ulong)(uint)(sectionType + (int)lStack0000000000000088);\n                      if (uVar24 <= mergedOffset) break;\n                      previousSymbol = (char *)concat(previousSymbol,(long)debugContents + mergedOffset,0);\n                      *mergedSymbol = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = previousSymbol;\n                    }\n                    uVar17 = *unaff_R14;\n                    mergedSymbol = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,mergedSymbol,uVar17,sectionName,((long)pvVar36 - (long)sectionContents) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)isRelocation,error,stabStrSection,previousSymbol);\n                    result = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,isRelocation);\n                    if (result == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(sectionContents);\n                      free(debugContents);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    previousSymbol = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,previousSymbol,uVar17,sectionName,((long)pvVar36 - (long)sectionContents) / 0xc,\n                            mergedOffset & 0xffffffff,(ulong)isRelocation,((long)pvVar36 - (long)sectionContents) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(sectionContents);\n              goto LAB_001058eb;\n            }\n          }\n          free(debugContents);\n          free(sectionContents);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      stabPointer = stabPointer + 2;\n    } while (stabPointer != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (result = FUN_0010c892(), result == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      stabSection = 0;\n      for (sectionArray = currentSection; sectionArray < currentSection + in_stack_00000010; sectionArray = sectionArray + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((stabSection != 0) || (stabSection = FUN_00112894(), stabSection != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            previousSymbol = (char *)0x0;\n            mergedSymbol = in_stack_00000150;\n            while (((*mergedSymbol != '\\0' && (sVar18 = strlen(mergedSymbol), mergedSymbol[sVar18 - 1] == '\\')) &&\n                   (sectionArray + 1 < currentSection + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(mergedSymbol);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              mergedSymbol = (char *)concat(pcVar19,*(undefined8 *)(sectionArray[1] + 8),0);\n              free(pcVar19);\n              free(previousSymbol);\n              sectionArray = sectionArray + 1;\n              previousSymbol = mergedSymbol;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         mergedSymbol);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,stabSection,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((stabSection != 0) && (result = FUN_0010c892(), result == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        previousSymbol = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = currentSection;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (stabSection = 0x22; stabSection != 0; stabSection = stabSection + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      result = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        stabSection = currentSection[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        stabStrSection = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          error = bfd_get_error();\n          bfd_errmsg(error);\n          previousSymbol = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,previousSymbol,5);\n          FUN_00119ed0(uVar17);\n          goto LAB_00105981;\n        }\n        previousSymbol = *(char **)(stabSection + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          error = bfd_get_error();\n          bfd_errmsg(error);\n          previousSymbol = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)stabStrSection) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = previousSymbol;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              sectionType = strcmp(previousSymbol,\".bb\");\n              if (sectionType == 0) {\n                cVar8 = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              sectionType = strcmp(previousSymbol,\".eb\");\n              if (sectionType == 0) {\n                cVar8 = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              sectionType = strcmp(previousSymbol,\".bf\");\n              if (sectionType == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  stabStrSection = FUN_0010dac0();\n                  if ((stabStrSection == 0) ||\n                     (result = FUN_0010bc80(puStack0000000000000020), result == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    sectionType = 0;\n                    if (bStack0000000000000101 != 0) {\n                      sectionType = in_stack_00000118 - 1;\n                    }\n                    stabSection = *(long *)(*(long *)(stabSection + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = FUN_0010bf86(puStack0000000000000020,sectionType + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + stabSection);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                previousSymbol = \"%ld: .bf without preceding function\";\n              }\n              else {\n                sectionType = strcmp(previousSymbol,\".ef\");\n                if (sectionType != 0) goto switchD_00106e1a_caseD_68;\n                if (result != '\\0') {\n                  result = FUN_0010be1a(puStack0000000000000020);\n                  if (result == '\\0') goto LAB_00105981;\n                  result = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                previousSymbol = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,previousSymbol,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          mergedNotesOffset = FUN_0010dac0();\n          if (mergedNotesOffset == 0) goto LAB_00105981;\n          cVar8 = FUN_00112a33(&stack0x00000140,stabSection,stabStrSection);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        currentSection = DAT_001278d0 + in_stack_00000010;\n        sectionArray = DAT_001278d0;\n        do {\n          sectionFlags = *(uint *)(*sectionArray + 0x18);\n          if ((sectionFlags & 0x1000000) != 0) {\n            *(uint *)(*sectionArray + 0x18) = sectionFlags & 0xfeffffff;\n          }\n          sectionArray = sectionArray + 1;\n        } while (currentSection != sectionArray);\n      }\n    }\n    else {\n      for (stabSection = *(long *)(in_stack_00000008 + 0x90); stabSection != 0; stabSection = *(long *)(stabSection + 8)\n          ) {\n        if (*(long *)(stabSection + 0xe8) != 0) {\n          sectionFlags = (uint *)(*(long *)(stabSection + 0xe8) + 0x18);\n          *sectionFlags = *sectionFlags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      sectionType = bfd_get_error();\n      if (sectionType != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    stabSection = xmalloc();\n    currentSection = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = stabSection;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        sectionType = DAT_001279c0;\n        sectionArray = (long *)currentSection[_in_stack_00000018];\n        sectionFunction = (code *)sectionArray[4];\n        sectionFlags = *(uint *)(sectionArray + 3);\n        previousSymbol = (char *)sectionArray[1];\n        mergedSymbol = previousSymbol;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((sectionType <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          index = strcmp(pcVar19,previousSymbol);\n          if (index != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          mergedOffset = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = FUN_0011a2e0(puVar29);\n          uVar17 = DAT_001278f0;\n          *(undefined8 *)(stabSection + uVar24 * 8) = uVar16;\n          stabStrSection = htab_elements(uVar17);\n          if ((stabStrSection != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          result = *previousSymbol;\n          if (result != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          previousSymbol = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            stabStrSection = unaff_R14[1];\n            result = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        stabStrSection = htab_elements(DAT_001278f0);\n        mergedOffset = uVar24;\n        if ((stabStrSection == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (previousSymbol != (char *)0x0) {\nLAB_001064eb:\n          if (((*previousSymbol == '_') && (previousSymbol[1] == '_')) &&\n             (sectionType = strcmp(previousSymbol + (previousSymbol[2] == '_'),\"__gnu_lto_slim\"), sectionType == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = previousSymbol;\n        stabStrSection = htab_find(DAT_001278f0);\n        if (((stabStrSection == 0) || (mergedSymbol = *(char **)(stabStrSection + 8), previousSymbol == mergedSymbol)) &&\n           (mergedSymbol = previousSymbol, debugPointer = DAT_001278f8, (sectionFlags & 0x100) != 0)) {\n          for (; debugPointer != (char **)0x0; debugPointer = (char **)debugPointer[3]) {\n            sectionType = strcmp(*debugPointer,previousSymbol);\n            if (sectionType == 0) {\n              mergedSymbol = debugPointer[1];\n              break;\n            }\n          }\n        }\n        sectionArray[1] = (long)mergedSymbol;\n        result = *mergedSymbol;\n        if (result == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        previousSymbol = DAT_00127928;\n        stabStrSection = unaff_R14[1];\n        if (*(char *)(stabStrSection + 0x1c) == result) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((sectionFlags & 0x82) == 0 && (sectionFunction != bfd_map_over_sections)) &&\n                ((*(byte *)(sectionArray[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            mergedSymbol = mergedSymbol + 1;\n            sectionArray[1] = (long)mergedSymbol;\n            goto joined_r0x00106565;\n          }\n          result = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (result == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            mergedSymbol = mergedSymbol + 1;\n            sectionArray[1] = (long)mergedSymbol;\n            sVar18 = strlen(mergedSymbol);\n            stabStrSection = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *mergedSymbol = result;\n          sectionArray[1] = (long)mergedSymbol;\n          uVar24 = mergedOffset;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = mergedOffset;\n            if (previousSymbol == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(mergedSymbol);\n            sVar26 = strlen(previousSymbol);\n            previousSymbol = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = previousSymbol;\n          }\n          else {\nLAB_0010668d:\n            previousSymbol = DAT_00127928;\n            if ((*(char *)(stabStrSection + 0x1c) != '\\0') && (result != *(char *)(stabStrSection + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(mergedSymbol);\n            stabStrSection = sVar18 + 2;\n            if (previousSymbol == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(stabStrSection);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(previousSymbol);\n              pcVar19 = (char *)xmalloc(sVar18 + stabStrSection);\n            }\n            previousSymbol = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          debugLinkSectionName = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(previousSymbol,DAT_00127928);\n            sVar18 = strlen(debugLinkSectionName);\n            previousSymbol = previousSymbol + sVar18;\n          }\n          strcpy(previousSymbol,mergedSymbol);\n          sectionArray[1] = (long)pcVar19;\n          mergedSymbol = pcVar19;\n          uVar24 = mergedOffset;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((sectionFlags & 0x20) == 0) &&\n           (((sectionFlags & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(sectionArray[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((sectionFlags & 0x82) != 0 || ((*(byte *)(sectionArray[4] + 0x25) & 0x10) != 0)))) ||\n             (sectionType = bfd_decode_symclass(sectionArray), sectionType == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              stabStrSection = htab_find();\n              if (stabStrSection == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = mergedSymbol;\n              htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((sectionFlags & 0x82) == 0) && (sectionFunction != bfd_map_over_sections)) &&\n                  ((*(byte *)(sectionArray[4] + 0x25) & 0x10) == 0)) {\n            if ((sectionFlags & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (stabStrSection = *(long *)(sectionArray[4] + 0xd0), stabStrSection == 0)) ||\n                 (*(long *)(stabStrSection + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  result = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            result = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (result == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          stabStrSection = htab_find();\n          if (stabStrSection != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(uVar17);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = mergedSymbol;\n          htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((sectionFlags & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = mergedSymbol;\n            htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          stabStrSection = htab_find();\n          if (stabStrSection == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((sectionFlags & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            stabStrSection = htab_find();\n            if (stabStrSection != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = mergedSymbol;\n            htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          result = FUN_001159d0(sectionArray[4]);\n          if (result == '\\0') {\n            if (((sectionFlags & 0x800002) == 0) && (sectionFunction != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((sectionFlags & 0x82) != 0) {\n                result = FUN_00115d70(mergedSymbol);\n                if ((result == '\\0') &&\n                   ((stabStrSection = htab_elements(DAT_001279f8), stabStrSection == 0 ||\n                    (result = FUN_00115d70(mergedSymbol), result != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (length = *(uint *)(sectionArray + 3), (length & 0x200000) != 0)) ||\n                       (stabStrSection = *sectionArray, stabStrSection == 0)) ||\n                      ((*(int *)(*(long *)(stabStrSection + 8) + 8) != 5 || (*(long *)(stabStrSection + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)sectionArray + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  length = *(uint *)(sectionArray + 3);\n                }\n                *(uint *)(sectionArray + 3) = length & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((sectionFlags & 1) != 0) && (result = FUN_00115d70(mergedSymbol), result != '\\0')) {\n                *(uint *)(sectionArray + 3) = *(uint *)(sectionArray + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (result = FUN_00115d70(mergedSymbol), result != '\\0')) {\n                *(uint *)(sectionArray + 3) = *(uint *)(sectionArray + 3) & 0xff7ffffd | 0x80;\n              }\n              if (sectionFunction != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(stabSection + uVar24 * 8) = sectionArray;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      sectionType = DAT_001279c0;\n      for (stabStrSection = 0; stabStrSection < sectionType; stabStrSection = stabStrSection + 1) {\n        previousSymbol = (char *)puVar29[5];\n        if (previousSymbol == (char *)0x0) {\n          mergedNotesOffset = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = FUN_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(stabSection + mergedNotesOffset) = uVar17;\n          sectionType = DAT_001279c0;\n        }\n        else if (previousSymbol != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(uVar17,previousSymbol);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = DAT_001279a0 != '\\0';\n    *(undefined8 *)(stabSection + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      sectionType = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((sectionType != 5) && (sectionType != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      result = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (result == '\\0') goto LAB_00105d8c;\n      stabSection = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      stabStrSection = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((stabSection == 0) || (stabStrSection == 0)) ||\n          (result = bfd_set_section_size(stabSection,in_stack_00000110), result == '\\0')) ||\n         (result = bfd_set_section_size(stabStrSection,in_stack_00000140), result == '\\0')) {\n        previousSymbol = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,previousSymbol,5);\n        FUN_001126c0(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(stabSection + 0x7c) = 2;\n      *(undefined4 *)(stabStrSection + 0x7c) = 0;\n      result = bfd_set_section_contents\n                        (in_stack_00000008,stabSection,in_stack_000000c0,0,in_stack_00000110);\n      if ((result == '\\0') ||\n         (result = bfd_set_section_contents\n                            (in_stack_00000008,stabStrSection,in_stack_000000e0,0,in_stack_00000140),\n         result == '\\0')) {\n        previousSymbol = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    stabSection = htab_elements(DAT_00127a18);\n    if (((stabSection != 0) ||\n        (((((((stabSection = htab_elements(DAT_00127a28), stabSection != 0 ||\n              (stabSection = htab_elements(DAT_00127a08), stabSection != 0)) ||\n             (stabSection = htab_elements(DAT_00127a00), stabSection != 0)) ||\n            ((stabSection = htab_elements(DAT_001279f8), stabSection != 0 ||\n             (stabSection = htab_elements(DAT_001279f0), stabSection != 0)))) ||\n           (stabSection = htab_elements(DAT_001278f0), stabSection != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279e0; debugSections = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    result = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (result == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; debugSections != (undefined8 *)0x0; debugSections = (undefined8 *)*debugSections) {\n    uVar17 = *(undefined8 *)(debugSections[5] + 0x60);\n    result = bfd_set_section_contents(in_stack_00000008,uVar17,debugSections[4],0,debugSections[3]);\n    if (result == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (result = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       stabSection = DAT_00127a30, result != '\\0')) {\n      sectionFlags = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)sectionFlags;\n      if ((char)sectionFlags != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        result = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        mergedOffset = DAT_00127930;\n        if (result != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(uVar17,mergedOffset);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17,stabSection);\n    }\n    return 0;\n  }\n  currentSection = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        currentSection = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = currentSection;\n      } while (currentSection != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (result = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), result != '\\0')) {\n      if (currentSection == (long *)0x0) {\n        currentSection = unaff_R13;\n      }\n      sectionArray = unaff_R13;\n      if (*(undefined8 **)(*currentSection + 0x60) == puVar29) {\nLAB_0010625f:\n        previousSymbol = \"error: failed to merge notes\";\n        if (currentSection[1] != 0) {\n          result = bfd_set_section_contents(in_stack_00000008,puVar29,currentSection[1],0,currentSection[2]);\n          if (result == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          currentSection = (long *)currentSection[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          currentSection = sectionArray;\n          if (*(undefined8 **)(*sectionArray + 0x60) == puVar29) goto LAB_0010625f;\n          currentSection = (long *)sectionArray[3];\n          sectionArray = currentSection;\n        } while (currentSection != (long *)0x0);\n        previousSymbol = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,previousSymbol,5);\n      FUN_001126c0(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_merge_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00105828",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800"
            },
            "code": "\nvoid hash_string_00108800(undefined8 *param_1)\n\n{\n  htab_hash_string_00108800(*param_1);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "free_and_clear_list_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextPointer",
                "cVar2": "result",
                "__ptr": "currentPointer"
            },
            "code": "\nundefined freeAndClearList_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPointer;\n  char result;\n  undefined8 *currentPointer;\n  \n  currentPointer = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentPointer == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(param1,currentPointer[1],currentPointer[2],*(undefined4 *)(currentPointer + 3),currentPointer[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    nextPointer = (undefined8 *)*currentPointer;\n    free(currentPointer);\n    currentPointer = nextPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "free_and_clear_list_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "extract_valid_pointers_001082df",
                "unaff_RBX": "baseAddress",
                "puVar4": "newPointer",
                "puVar5": "nextPointer",
                "unaff_RBP": "frameBaseAddress",
                "uVar6": "currentIndex",
                "unaff_R13": "pointerArray",
                "uVar1": "pointerCount",
                "lVar2": "currentPointerValue",
                "cVar3": "returnValue"
            },
            "code": "\nvoid extractValidPointers_001082df(void)\n\n{\n  uint pointerCount;\n  long currentPointerValue;\n  char returnValue;\n  long baseAddress;\n  undefined8 *newPointer;\n  undefined8 *nextPointer;\n  long frameBaseAddress;\n  ulong currentIndex;\n  undefined8 *pointerArray;\n  \n  pointerCount = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    newPointer = pointerArray;\n    for (currentIndex = 0; currentIndex != pointerCount; currentIndex = currentIndex + 1) {\n      nextPointer = newPointer;\n      if (((*(long **)pointerArray[currentIndex] != (long *)0x0) &&\n          (currentPointerValue = **(long **)pointerArray[currentIndex], currentPointerValue != 0)) &&\n         (returnValue = FUN_00115d70(*(undefined8 *)(currentPointerValue + 8),DAT_00127a28), returnValue != '\\0')) {\n        nextPointer = newPointer + 1;\n        *newPointer = pointerArray[currentIndex];\n      }\n      newPointer = nextPointer;\n    }\n    *newPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(frameBaseAddress + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "extract_valid_pointers_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_content_00114d60",
                "param_1": "filePath",
                "iVar1": "endOfFile",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "__stream": "fileStream",
                "uVar4": "errorString",
                "uVar5": "allocatedMemory",
                "__errno_location()": "getErrorMessageLocation",
                "lVar7": "currentPosition",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreFileContent_00114d60(long filePath)\n\n{\n  int endOfFile;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 errorString;\n  FILE *fileStream;\n  undefined8 allocatedMemory;\n  size_t sVar6;\n  long currentPosition;\n  long bufferSize;\n  \n  fileStream = fopen(*(char **)(filePath + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errorNumber = getErrorMessageLocation;\n    errorMessage = strerror(*errorNumber);\n    allocatedMemory = *(undefined8 *)(filePath + 0x10);\n    errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(errorString,allocatedMemory,errorMessage);\n  }\n  bufferSize = 0x1000;\n  currentPosition = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n  while( true ) {\n    endOfFile = feof(fileStream);\n    if (endOfFile != 0) {\n      *(long *)(filePath + 0x18) = currentPosition;\n      fclose(fileStream);\n      return;\n    }\n    if (currentPosition == bufferSize) {\n      bufferSize = currentPosition * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(filePath + 0x20),bufferSize);\n      *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n    }\n    sVar6 = fread((void *)(*(long *)(filePath + 0x20) + currentPosition),1,bufferSize - currentPosition,fileStream);\n    endOfFile = ferror(fileStream);\n    if (endOfFile != 0) break;\n    currentPosition = currentPosition + sVar6;\n  }\n  allocatedMemory = *(undefined8 *)(filePath + 0x10);\n  errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(errorString,allocatedMemory);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010543c",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_content_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_and_print_section_00108808",
                "unaff_RBP": "stackBase",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findAndPrintSection_00108808(void)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long stackBase;\n  \n  sectionPointer = *(undefined8 *)(stackBase + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionPointer);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_and_print_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_input_lines_00104d1c",
                "uVar1": "message",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "currentByte",
                "pbVar5": "nextChar",
                "unaff_EBP": "lineCount",
                "pbVar6": "nextByte",
                "unaff_R13": "callback",
                "pbVar7": "prevChar",
                "unaff_R14": "line",
                "unaff_R15": "nextLine",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "callbackPtr"
            },
            "code": "\nvoid processInputLines_00104d1c(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  int lineCount;\n  byte *nextByte;\n  undefined8 callback;\n  byte *prevChar;\n  byte *line;\n  byte *nextLine;\n  undefined8 filename;\n  undefined8 *callbackPtr;\n  \n  *line = 0;\nLAB_00114520:\n  line = line + 1;\n  do {\n    currentByte = *line;\n    prevChar = line;\n    if (currentByte == 10) {\n      *line = 0;\n      if (line[1] == 0xd) {\n        prevChar = line + 1;\n        nextChar = line + 2;\n      }\n      else {\n        nextChar = line + 1;\n      }\n    }\n    else if ((char)currentByte < '\\v') {\n      if (currentByte != 0) goto LAB_00114520;\n      nextChar = line + 1;\n    }\n    else {\n      if (currentByte != 0xd) break;\n      *line = 0;\n      nextChar = line + 1;\n      if (line[1] == 10) {\n        nextChar = line + 2;\n        prevChar = line + 1;\n      }\n    }\n    currentByte = *nextLine;\n    while ((currentByte == 0x20 || (nextByte = nextLine, currentByte == 9))) {\n      nextByte = nextLine + 1;\n      nextLine = nextLine + 1;\n      currentByte = *nextByte;\n    }\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = nextByte[1];\n      nextByte = nextByte + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentByte = nextByte[1];\n      if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n            ((currentByte = nextByte[2], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = nextByte[3], currentByte == 9 || (currentByte == 0x20)))) &&\n          ((currentByte = nextByte[4], currentByte == 9 || (currentByte == 0x20)))) &&\n         ((currentByte = nextByte[5], currentByte == 9 || (currentByte == 0x20)))) {\n        currentByte = nextByte[6];\n        currentChar = nextByte + 6;\n        if ((currentByte == 9) || (currentByte == 0x20)) {\n          do {\n            do {\n              currentByte = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (currentByte == 0x20);\n          } while (currentByte == 9);\n        }\n      }\n      if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n        message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(message,filename,lineCount);\n      }\n    }\nLAB_00114599:\n    *nextByte = 0;\n    if (nextLine < nextByte) {\n      slot = (byte **)htab_find_slot();\n      *slot = nextLine;\n    }\n    lineCount = lineCount + 1;\n    line = nextChar;\n    nextLine = nextChar;\n    if (prevChar[1] == 0) {\n      *callbackPtr = callback;\n      return;\n    }\n  } while( true );\n  if (currentByte == 0x23) {\n    processInputLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_print_error_00119940",
                "param_1": "input_value",
                "param_2": "error_message",
                "uVar1": "error_text",
                "local_20": "scan_result"
            },
            "code": "\nvoid validate_and_print_error_00119940(undefined8 input_value,undefined8 error_message)\n\n{\n  undefined8 error_text;\n  char *scan_result [2];\n  \n  bfd_scan_vma(input_value,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_text = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(error_text,error_message,input_value);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "param_3": "flag",
                "in_RAX": "temp_register"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 input_param,long data_ptr,uint flag)\n\n{\n  long temp_register;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(data_ptr + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(data_ptr + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(temp_register + 0x380) + 0x78))(input_param,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "check_and_process_data_00113a4d",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_ptr",
                "cVar1": "result",
                "uVar2": "output",
                "puVar3": "ptr",
                "auVar4": "temp_array"
            },
            "code": "\nundefined8\ncheck_and_process_data_00113a4d(undefined8 input_1,undefined8 input_2,long data_ptr,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  char result;\n  undefined8 output;\n  undefined8 *ptr;\n  undefined temp_array [16];\n  \n  result = FUN_00112502(input_1,input_2,*(undefined8 *)(data_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (result = FUN_0010ec73(input_2,*(undefined8 *)(data_ptr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = FUN_001135a5(input_1,input_2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = check_and_process_data_00113a4d(input_1,input_2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    temp_array = FUN_00112502(input_1,input_2,*(undefined8 *)(data_ptr + 0x20));\n    if (temp_array[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return temp_array._0_8_;\n      }\n      output = FUN_0010ed2c(input_2,*(undefined8 *)(data_ptr + 0x20),temp_array._8_8_,param_5);\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00112502",
                "FUN_00113a4d",
                "FUN_0010ec73",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "return_and_free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "pointerToFree"
            },
            "code": "\nundefined8 returnAndFreeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *pointerToFree;\n  undefined8 param_7;\n  \n  param_7 = returnValue;\n  free(pointerToFree);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "return_and_free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_structures_00113b71",
                "param_1": "inputValue",
                "lVar1": "dataStructurePtr"
            },
            "code": "\nlong initializeDataStructures_00113b71(long inputValue)\n\n{\n  long dataStructurePtr;\n  \n  if (inputValue != 0) {\n    dataStructurePtr = FUN_00112904(0x14,0);\n    if (dataStructurePtr == 0) {\n      dataStructurePtr = 0;\n    }\n    else {\n      *(long *)(dataStructurePtr + 0x10) = inputValue;\n    }\n    return dataStructurePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_structures_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_parameter_00109dfe",
                "param_1": "parameter",
                "lVar1": "counter",
                "local_40": "outputString"
            },
            "code": "\nvoid processParameter_00109dfe(long parameter)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(parameter + 0x70) != 0) {\n    FUN_00109cf4(parameter,*(long *)(parameter + 0x70),0);\n    return;\n  }\n  counter = *(long *)(parameter + 0x68);\n  *(long *)(parameter + 0x68) = counter + 1;\n  *(long *)(parameter + 0x70) = counter;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(parameter,outputString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_parameter_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "address",
                "__s": "string",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long address)\n\n{\n  char *string;\n  size_t stringLength;\n  \n  if (*(long *)(address + 0x60) != 0) {\n    string = *(char **)(*(long *)(address + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      stringLength = strlen(string);\n      *(undefined2 *)(string + stringLength) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reconstruct_string_0010ae0e",
                "param_1": "param",
                "lVar1": "string_info",
                "lVar2": "ptr_array",
                "__ptr": "ptr",
                "pcVar3": "temp_str",
                "sVar4": "str_length_1",
                "sVar5": "str_length_2",
                "pcVar6": "reconstructed_str",
                "uVar7": "return_val",
                "lVar8": "total_length",
                "uVar9": "counter",
                "uVar10": "num_ptrs"
            },
            "code": "\nundefined8 reconstruct_string_0010ae0e(long param)\n\n{\n  long string_info;\n  long ptr_array;\n  void *ptr;\n  char *temp_str;\n  size_t str_length_1;\n  size_t str_length_2;\n  char *reconstructed_str;\n  undefined8 return_val;\n  long total_length;\n  uint counter;\n  ulong num_ptrs;\n  \n  return_val = 0;\n  string_info = *(long *)(param + 0x60);\n  if (((string_info != 0) && (*(char **)(string_info + 8) != (char *)0x0)) &&\n     (reconstructed_str = *(char **)(string_info + 0x20), reconstructed_str != (char *)0x0)) {\n    str_length_1 = strlen(*(char **)(string_info + 8));\n    str_length_2 = strlen(reconstructed_str);\n    ptr_array = *(long *)(string_info + 0x28);\n    if (ptr_array == 0) {\n      total_length = str_length_1 + str_length_2 + 10;\n      num_ptrs = 0;\n    }\n    else {\n      total_length = str_length_1 + str_length_2 + 0x1e;\n      num_ptrs = 0;\n      while( true ) {\n        reconstructed_str = *(char **)(ptr_array + num_ptrs * 8);\n        if (reconstructed_str == (char *)0x0) break;\n        str_length_1 = strlen(reconstructed_str);\n        num_ptrs = (ulong)((int)num_ptrs + 1);\n        total_length = total_length + str_length_1;\n      }\n    }\n    if (*(char **)(string_info + 0x30) != (char *)0x0) {\n      str_length_1 = strlen(*(char **)(string_info + 0x30));\n      total_length = total_length + str_length_1;\n    }\n    if (*(char **)(string_info + 0x38) != (char *)0x0) {\n      str_length_1 = strlen(*(char **)(string_info + 0x38));\n      total_length = total_length + str_length_1;\n    }\n    reconstructed_str = (char *)xmalloc(total_length);\n    string_info = *(long *)(param + 0x60);\n    strcpy(reconstructed_str,*(char **)(string_info + 8));\n    if (*(long *)(string_info + 0x28) != 0) {\n      counter = 0;\n      str_length_1 = strlen(reconstructed_str);\n      sprintf(reconstructed_str + str_length_1,\"!%u,\",num_ptrs);\n      while( true ) {\n        string_info = *(long *)(param + 0x60);\n        num_ptrs = (ulong)counter;\n        ptr = *(void **)(string_info + 0x28);\n        temp_str = *(char **)((long)ptr + num_ptrs * 8);\n        if (temp_str == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(reconstructed_str,temp_str);\n        free(*(void **)(*(long *)(string_info + 0x28) + num_ptrs * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(param + 0x60) + 0x28) = 0;\n    }\n    string_info = *(long *)(param + 0x60);\n    strcat(reconstructed_str,*(char **)(string_info + 0x20));\n    free(*(void **)(string_info + 0x20));\n    string_info = *(long *)(param + 0x60);\n    *(undefined8 *)(string_info + 0x20) = 0;\n    if (*(char **)(string_info + 0x30) != (char *)0x0) {\n      strcat(reconstructed_str,*(char **)(string_info + 0x30));\n      free(*(void **)(string_info + 0x30));\n      *(undefined8 *)(*(long *)(param + 0x60) + 0x30) = 0;\n    }\n    str_length_1 = strlen(reconstructed_str);\n    string_info = *(long *)(param + 0x60);\n    *(undefined2 *)(reconstructed_str + str_length_1) = 0x3b;\n    temp_str = *(char **)(string_info + 0x38);\n    if (temp_str != (char *)0x0) {\n      strcpy(reconstructed_str + str_length_1 + 1,temp_str);\n      free(*(void **)(string_info + 0x38));\n      *(undefined8 *)(*(long *)(param + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(param + 0x60) + 8));\n    string_info = *(long *)(param + 0x60);\n    *(char **)(string_info + 8) = reconstructed_str;\n    return_val = CONCAT71((int7)((ulong)string_info >> 8),1);\n  }\n  return return_val;\n}\n\n",
            "called": [
                "strcpy",
                "xmalloc",
                "free",
                "strcat",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reconstruct_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data",
                "iVar1": "counter",
                "cVar2": "isSuccessful",
                "uVar3": "result",
                "puVar4": "currentElement",
                "puVar5": "dataArray"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input_1,undefined8 input_2,long data)\n\n{\n  int counter;\n  char isSuccessful;\n  undefined8 result;\n  undefined8 *currentElement;\n  undefined8 *dataArray;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    isSuccessful = FUN_00112c1f(input_1,input_2,*(undefined8 *)(data + 0x20),data);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e6a8(input_2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    isSuccessful = FUN_00112c1f(input_1,input_2,*(undefined8 *)(data + 0x20),data);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e7c2(input_2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    isSuccessful = FUN_00112c1f(input_1,input_2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e9a0(input_2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    dataArray = *(undefined8 **)(data + 0x20);\n    counter = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    isSuccessful = FUN_00112502(input_1,input_2,*(undefined8 *)(dataArray[2] + 0x18));\n    if (((isSuccessful != '\\0') && (isSuccessful = FUN_00112c1f(input_1,input_2,*dataArray,0), isSuccessful != '\\0')) &&\n       (isSuccessful = FUN_0010eafe(input_2,result,counter == 2), isSuccessful != '\\0')) {\n      for (currentElement = (undefined8 *)dataArray[1]; currentElement != (undefined8 *)0x0;\n          currentElement = (undefined8 *)*currentElement) {\n        isSuccessful = FUN_00112c1f(input_1,input_2,currentElement[2],0);\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n        isSuccessful = FUN_0010ebb0(input_2,currentElement[1],*(undefined4 *)(currentElement + 3));\n        if (isSuccessful == '\\0') {\n          return 0;\n        }\n      }\n      dataArray = (undefined8 *)dataArray[2];\n      while( true ) {\n        if (dataArray == (undefined8 *)0x0) {\n          result = FUN_00108f05(input_2);\n          return result;\n        }\n        isSuccessful = FUN_00113a4d(input_1,input_2,dataArray);\n        if (isSuccessful == '\\0') break;\n        dataArray = (undefined8 *)*dataArray;\n      }\n    }\n    break;\n  case 4:\n    result = FUN_0010e842(input_2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = FUN_0010e8a9(*(undefined8 *)(data + 0x20),input_2,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    isSuccessful = FUN_00112c1f(input_1,input_2,**(undefined8 **)(data + 0x20),0);\n    if (isSuccessful != '\\0') {\n      result = FUN_0010e918(input_2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010ebb0",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010e6a8",
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "abort",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_get_mach",
                "bfd_set_start_address",
                "FUN_001152b6",
                "bfd_set_file_flags",
                "printf",
                "bfd_get_arch"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00119f70",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00115530",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "extract_and_print_type_info_0010b0fa",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "typeInfo",
                "param_4": "size",
                "param_5": "errorFlag",
                "uVar1": "type",
                "iVar2": "result",
                "pcVar3": "typeString",
                "plVar4": "templateTypes",
                "pcVar5": "message",
                "sVar6": "stringLength",
                "__ptr": "typeInfoPointer",
                "lVar7": "length",
                "local_40": "buffer"
            },
            "code": "\n\n\nchar * extractAndPrintTypeInfo_0010b0fa(undefined8 input_1,undefined8 input_2,uint *typeInfo,long size,\n                   undefined *errorFlag)\n\n{\n  uint type;\n  int result;\n  char *typeString;\n  long *templateTypes;\n  char *message;\n  size_t stringLength;\n  void *typeInfoPointer;\n  long length;\n  undefined buffer [16];\n  \n  if (errorFlag != (undefined *)0x0) {\n    *errorFlag = 0;\n  }\n  while( true ) {\n    type = *typeInfo;\n    if (0x29 < type) break;\n    if (0x17 < type) {\n      switch(type) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        typeString = (char *)extractAndPrintTypeInfo_0010b0fa(input_1,input_2,*(undefined8 *)(typeInfo + 4),0,0);\n        if (typeString != (char *)0x0) {\n          switch(*typeInfo) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            typeString = (char *)FUN_00113b4a(typeString);\n            return typeString;\n          case 0x1b:\n            typeString = (char *)FUN_00113b71(typeString);\n            return typeString;\n          default:\n                    \n            abort();\n          case 0x22:\n            typeString = (char *)FUN_00113d3a(typeString);\n            return typeString;\n          case 0x23:\n            typeString = (char *)FUN_00113cb9(typeString);\n            return typeString;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        typeString = (char *)cplus_demangle_print(3,typeInfo,0x14,buffer);\n        if (typeString == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          typeString = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        result = strcmp(typeString,\"signed char\");\n        if (result == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"bool\");\n        if (result == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"char\");\n        if (result == 0) goto LAB_0010b406;\n        result = strcmp(typeString,\"double\");\n        if ((result == 0) || (result = strcmp(typeString,\"long double\"), result == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"float\");\n        if (result == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"__float128\");\n        if (result == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"unsigned char\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"int\");\n        if (result == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"unsigned int\");\n        if (result == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"long\");\n        if (result == 0) goto LAB_0010b504;\n        result = strcmp(typeString,\"unsigned long\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(typeString,\"__int128\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"unsigned __int128\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"short\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"unsigned short\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"void\");\n        if (result == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"wchar_t\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(typeString,\"long long\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"unsigned long long\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(typeString,\"...\");\n        if (result == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (errorFlag == (undefined *)0x0) goto LAB_0010b6a9;\n          *errorFlag = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(typeString);\n        return message;\n      case 0x29:\n        if (*(long *)(typeInfo + 4) == 0) {\n          typeInfoPointer = (void *)FUN_00113e17();\n        }\n        else {\n          typeInfoPointer = (void *)extractAndPrintTypeInfo_0010b0fa(input_1,input_2,*(long *)(typeInfo + 4),0,0);\n        }\n        if (typeInfoPointer != (void *)0x0) {\n          length = FUN_0010b6ea(input_1,input_2,*(undefined8 *)(typeInfo + 6),buffer);\n          if (length != 0) {\n            typeString = (char *)FUN_00113ce0(typeInfoPointer,length,buffer[0]);\n            return typeString;\n          }\n          free(typeInfoPointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (type != 1) {\n      if (type == 4) {\n        typeString = (char *)cplus_demangle_print(3,typeInfo,0x14,buffer);\n        message = \"Failed to print demangled template\\n\";\n        if (typeString != (char *)0x0) {\n          stringLength = strlen(typeString);\n          message = (char *)FUN_0010afd5(input_1,input_2,typeString,stringLength & 0xffffffff,9);\n          free(typeString);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return typeString;\n      }\n      if (type == 0) {\n        if ((size == 0) || (templateTypes = (long *)FUN_00113b1e(size), templateTypes == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    size = extractAndPrintTypeInfo_0010b0fa(input_1,input_2,*(undefined8 *)(typeInfo + 4),size,0);\n    if (size == 0) goto LAB_0010b38c;\n    typeInfo = *(uint **)(typeInfo + 6);\n    errorFlag = (undefined *)0x0;\n  }\n  typeString = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,typeString,(ulong)type);\nLAB_0010b38c:\n  typeString = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return typeString;\nLAB_0010b1a5:\n  if (*templateTypes == 0) {\nswitchD_0010b158_caseD_18:\n    typeString = (char *)FUN_0010afd5(input_1,input_2,*(undefined8 *)(typeInfo + 4),typeInfo[6],0);\n    return typeString;\n  }\n  typeString = *(char **)(*templateTypes + 8);\n  if (typeString == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(typeString);\n  if (message != (char *)0x0) {\n    stringLength = strlen(message);\n    if ((typeInfo[6] == (uint)stringLength) &&\n       (result = strncmp(message,*(char **)(typeInfo + 4),(long)(int)typeInfo[6]), result == 0)) {\n      return typeString;\n    }\n  }\n  templateTypes = templateTypes + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113dfe",
                "FUN_00113b1e",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_0010b6ea",
                "cplus_demangle_print",
                "strlen",
                "FUN_00113df2",
                "fprintf",
                "FUN_00113b4a",
                "strncmp",
                "FUN_00112904",
                "free",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113cb9",
                "abort",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "extract_and_print_type_info_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "ppbVar2": "lineSlot",
                "pbVar3": "currentChar",
                "in_CL": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "dataPointer",
                "unaff_EBP": "lineIndex",
                "pbVar5": "lineStart",
                "unaff_R13": "result",
                "unaff_R14": "lineEnd",
                "unaff_R15": "lineEnd",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "resultPointer",
                "uVar1": "message",
                "htab_find_slot": "findSlot",
                "dcgettext": "getText"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 message;\n  byte **lineSlot;\n  byte *currentChar;\n  byte currentChar;\n  byte nextChar;\n  byte *dataPointer;\n  int lineIndex;\n  byte *lineStart;\n  undefined8 result;\n  byte *lineEnd;\n  byte *lineEnd;\n  undefined8 formatString;\n  undefined8 *resultPointer;\n  \n  do {\n    lineStart = lineEnd;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = lineStart[1];\n      lineStart = lineStart + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = lineStart[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = lineStart[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = lineStart[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = lineStart[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = lineStart[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = lineStart[6];\n        currentChar = lineStart + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(message,formatString,lineIndex);\n      }\n    }\nLAB_00114599:\n    *lineStart = 0;\n    if (lineEnd < lineStart) {\n      lineSlot = (byte **)htab_find_slot();\n      *lineSlot = lineEnd;\n    }\n    lineIndex = lineIndex + 1;\n    lineStart = dataPointer;\n    if (lineEnd[1] == 0) {\n      *resultPointer = result;\n      return;\n    }\n    for (; nextChar = *lineStart, lineEnd = lineStart, nextChar != 10; lineStart = lineStart + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentChar = lineStart + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *lineStart = 0;\n          currentChar = lineStart + 1;\n          if (lineStart[1] == 10) {\n            currentChar = lineStart + 2;\n            lineEnd = lineStart + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *lineStart = 0;\n    if (lineStart[1] == 0xd) {\n      lineEnd = lineStart + 1;\n      currentChar = lineStart + 2;\n    }\n    else {\n      currentChar = lineStart + 1;\n    }\nLAB_00114553:\n    currentChar = *dataPointer;\n    lineEnd = dataPointer;\n    while (dataPointer = currentChar, currentChar == 0x20) {\nLAB_00104c3f:\n      lineStart = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      currentChar = dataPointer;\n      currentChar = *lineStart;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,FUN_0010870e,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,param_7,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUNC_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = FUNC_0011173a(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278d0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_alt_mach_code",
                "bfd_set_section_size",
                "FUN_0010870e",
                "FUN_0010bf20",
                "FUN_00108863",
                "bfd_set_section_contents",
                "bfd_map_over_sections",
                "strcmp",
                "FUN_00119dd0",
                "FUN_0010dac0",
                "FUN_001088ae",
                "bfd_coff_get_syment",
                "bfd_coff_get_auxent",
                "xmalloc",
                "htab_traverse",
                "bfd_set_error",
                "FUN_00116110",
                "FUN_0010bbd3",
                "bfd_decode_symclass",
                "bfd_get_section_by_name",
                "bfd_errmsg",
                "bfd_make_section_with_flags",
                "strlen",
                "FUN_0010c892",
                "strcpy",
                "bfd_is_local_label",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_0010be1a",
                "htab_find",
                "FUN_001159d0",
                "concat",
                "dcgettext",
                "FUN_00113fb0",
                "xstrdup",
                "qsort",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00112a33",
                "FUN_0011a170",
                "fprintf",
                "bfd_get_error",
                "htab_elements",
                "FUN_0010875d",
                "FUN_0011378f",
                "bfd_octets_per_byte",
                "bfd_set_symtab",
                "FUN_00116030",
                "FUN_00119ed0",
                "FUN_00115d70",
                "bfd_map_over_sections",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "free",
                "FUN_0010bc80",
                "FUN_0011a2e0",
                "FUN_0010be88"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_call_function_00109cf4",
                "param_1": "output",
                "param_2": "input",
                "param_3": "flag",
                "local_3c": "inputAsString"
            },
            "code": "\nvoid formatAndCallFunction_00109cf4(undefined8 output,undefined8 input,undefined4 flag)\n\n{\n  char inputAsString [28];\n  \n  sprintf(inputAsString,\"%ld\",input);\n  FUN_00109b52(output,inputAsString,input,0,flag);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "format_and_call_function_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_function_arguments_00109ab1",
                "param_1": "pArgumentString",
                "param_2": "pParsedArguments",
                "param_3": "unused",
                "param_4": "unused",
                "param_5": "unused",
                "uVar1": "parsedArgument1",
                "pcVar2": "currentChar",
                "uVar3": "returnValue",
                "auVar4": "resultArray"
            },
            "code": "\nundefined  [16]\nparseFunctionArguments_00109ab1(char **pArgumentString,undefined4 *pParsedArguments,undefined8 unused,undefined8 unused,\n            undefined8 unused)\n\n{\n  undefined4 parsedArgument1;\n  char *currentChar;\n  undefined8 returnValue;\n  undefined resultArray [16];\n  \n  currentChar = *pArgumentString;\n  if (*currentChar == '(') {\n    *pArgumentString = currentChar + 1;\n    parsedArgument1 = FUN_00109a32(pArgumentString,0);\n    *pParsedArguments = parsedArgument1;\n    if (**pArgumentString == ',') {\n      *pArgumentString = *pArgumentString + 1;\n      parsedArgument1 = FUN_00109a32(pArgumentString,0,unused);\n      pParsedArguments[1] = parsedArgument1;\n      if (**pArgumentString == ')') {\n        currentChar = *pArgumentString + 1;\n        *pArgumentString = currentChar;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(currentChar);\n    returnValue = 0;\n  }\n  else {\n    *pParsedArguments = 0;\n    currentChar = (char *)FUN_00109a32(pArgumentString,0);\n    pParsedArguments[1] = (int)currentChar;\nLAB_00109b25:\n    returnValue = CONCAT71((int7)((ulong)currentChar >> 8),1);\n  }\n  resultArray._8_8_ = unused;\n  resultArray._0_8_ = returnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_function_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_conditions_001159d0",
                "param_1": "inputParam",
                "uVar1": "returnValue",
                "cVar2": "flag",
                "uVar3": "result",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2"
            },
            "code": "\nundefined4 checkConditions_001159d0(long inputParam)\n\n{\n  undefined8 returnValue;\n  char flag;\n  undefined4 result;\n  long tempVar1;\n  long tempVar2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(inputParam + 0x27) & 2) == 0) {\n      return result;\n    }\n    tempVar1 = FUN_00115d00(*(undefined8 *)(inputParam + 0xd0),*(undefined8 *)(inputParam + 0xe0));\n    if ((tempVar1 != 0) &&\n       (((returnValue = *(undefined8 *)(tempVar1 + 8), DAT_00127a48 != 7 ||\n         (flag = FUN_00115d70(returnValue,DAT_00127a28), flag != '\\0')) &&\n        (flag = FUN_00115d70(returnValue,DAT_00127a18), flag == '\\0')))) {\n      tempVar1 = *(long *)(*(long *)(inputParam + 0xd0) + 0xc0);\n      tempVar2 = tempVar1;\n      do {\n        if (tempVar2 == 0) {\n          return 1;\n        }\n        flag = FUN_00115b70(tempVar2);\n        if (flag == '\\0') {\n          return result;\n        }\n        tempVar2 = *(long *)(*(long *)(tempVar2 + 0xd0) + 0xc0);\n      } while (tempVar1 != tempVar2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d00",
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_conditions_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "data",
                "uVar1": "dataType",
                "lVar2": "structPtr",
                "__s": "stringPtr",
                "uVar3": "ptrValue",
                "uVar4": "result",
                "__s_00": "tempString",
                "sVar5": "tempStringLength",
                "sVar6": "stringLength",
                "__s_01": "combinedString"
            },
            "code": "\nundefined4 processData_0010a77a(long data)\n\n{\n  undefined dataType;\n  long structPtr;\n  char *stringPtr;\n  undefined8 ptrValue;\n  undefined4 result;\n  char *tempString;\n  size_t tempStringLength;\n  size_t stringLength;\n  char *combinedString;\n  \n  structPtr = *(long *)(data + 0x60);\n  if ((structPtr != 0) && (stringPtr = *(char **)(structPtr + 0x20), stringPtr != (char *)0x0)) {\n    result = *(undefined4 *)(structPtr + 0x18);\n    dataType = *(undefined *)(structPtr + 0x1c);\n    ptrValue = *(undefined8 *)(structPtr + 0x10);\n    tempString = (char *)FUN_00109b2f();\n    tempStringLength = strlen(tempString);\n    stringLength = strlen(stringPtr);\n    combinedString = (char *)xmalloc(tempStringLength + 2 + stringLength);\n    sprintf(combinedString,\"%s%s;\",tempString,stringPtr);\n    free(tempString);\n    free(stringPtr);\n    result = FUN_00109b52(data,combinedString,ptrValue,dataType,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_with_error_handling_0010543c",
                "piVar2": "errnoAddress",
                "pcVar3": "errorMessage",
                "uVar1": "filePointer",
                "uVar4": "errorMessageFormat"
            },
            "code": "\nvoid openFileWithErrorHandling_0010543c(void)\n\n{\n  undefined8 filePointer;\n  int *errnoAddress;\n  char *errorMessage;\n  undefined8 errorMessageFormat;\n  long unaff_RBP;\n  \n  errnoAddress = __errno_location();\n  errorMessage = strerror(*errnoAddress);\n  filePointer = *(undefined8 *)(unaff_RBP + 0x10);\n  errorMessageFormat = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(errorMessageFormat,filePointer,errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_with_error_handling_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_data_0010a424",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "arrayLength",
                "param_4": "additionalFlag",
                "cVar1": "result",
                "bVar2": "tempByte",
                "iVar3": "tempInt",
                "uVar4": "returnValue",
                "pcVar5": "string1",
                "__ptr": "arrayPointer",
                "uVar6": "tempValue",
                "__s": "string2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "finalString",
                "lVar9": "loopCounter",
                "bVar10": "flag2",
                "lVar11": "loopCounter2",
                "uVar12": "tempUndefined"
            },
            "code": "\nundefined4 generateData_0010a424(long dataPointer,char flag,int arrayLength,char additionalFlag)\n\n{\n  char result;\n  byte tempByte;\n  int tempInt;\n  undefined4 returnValue;\n  char *string1;\n  undefined8 *arrayPointer;\n  undefined8 tempValue;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *finalString;\n  long loopCounter;\n  byte flag2;\n  long loopCounter2;\n  undefined tempUndefined;\n  \n  if ((flag == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  flag2 = *(byte *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f(dataPointer);\n  if (arrayLength < 0) {\n    arrayPointer = (undefined8 *)0x0;\n    arrayLength = 0;\nLAB_0010a582:\n    tempUndefined = 1;\n    if (flag2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (arrayLength != 0) {\n      tempInt = arrayLength + 1;\n      arrayPointer = (undefined8 *)xmalloc((long)tempInt * 8);\n      loopCounter = (long)(arrayLength + -1);\n      do {\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(dataPointer + 0x60) + 0x1c);\n        }\n        tempValue = FUN_00109b2f(dataPointer);\n        flag2 = tempByte & 1;\n        arrayPointer[loopCounter] = tempValue;\n        loopCounter = loopCounter + -1;\n      } while ((int)loopCounter != -1);\n      if (additionalFlag == '\\0') {\n        result = FUN_00109d97(dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(dataPointer + 0x60) + 0x1c);\n        }\n        flag2 = tempByte & 1;\n        tempValue = FUN_00109b2f(dataPointer);\n        arrayPointer[(long)tempInt + -1] = tempValue;\n        arrayLength = tempInt;\n      }\n      goto LAB_0010a582;\n    }\n    arrayPointer = (undefined8 *)0x0;\n    if (additionalFlag != '\\0') goto LAB_0010a582;\n    arrayPointer = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(dataPointer);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag2 != 0) || (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) != '\\0')) {\n      tempValue = FUN_00109b2f(dataPointer);\n      arrayLength = 1;\n      tempUndefined = 1;\n      *arrayPointer = tempValue;\n      goto LAB_0010a596;\n    }\n    tempValue = FUN_00109b2f(dataPointer);\n    arrayLength = 1;\n    *arrayPointer = tempValue;\n  }\n  tempUndefined = *(undefined *)(*(long *)(dataPointer + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)FUN_00109b2f(dataPointer);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  loopCounter = length1 + 10 + length2;\n  for (loopCounter2 = 0; (int)loopCounter2 < arrayLength; loopCounter2 = loopCounter2 + 1) {\n    length1 = strlen((char *)arrayPointer[loopCounter2]);\n    loopCounter = loopCounter + length1;\n  }\n  finalString = (char *)xmalloc(loopCounter);\n  sprintf(finalString,\"#%s,%s\",string1,string2);\n  loopCounter = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    length1 = strlen(finalString);\n    if (arrayLength <= (int)loopCounter) break;\n    *(undefined2 *)(finalString + length1) = 0x2c;\n    string1 = (char *)arrayPointer[loopCounter];\n    loopCounter = loopCounter + 1;\n    strcpy(finalString + length1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(finalString + length1) = 0x3b;\n  free(arrayPointer);\n  returnValue = FUN_00109b52(dataPointer,finalString,0,tempUndefined,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(finalString);\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "FUN_00109d97",
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "compilerVersion",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 compilerVersion)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",compilerVersion,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_2",
                "pcVar1": "equal_sign_position",
                "uVar2": "format_error",
                "auVar3": "extracted_data"
            },
            "code": "\nundefined  [16] extract_parameter_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_2)\n\n{\n  char *equal_sign_position;\n  undefined8 format_error;\n  undefined extracted_data [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    extracted_data._0_8_ = (undefined8 *)xmalloc(0x30);\n    format_error = FUN_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    extracted_data._0_8_[2] = equal_sign_position + 1;\n    extracted_data._0_8_[1] = format_error;\n    extracted_data._0_8_[4] = 0;\n    extracted_data._0_8_[3] = 0;\n    *extracted_data._0_8_ = value_1;\n    extracted_data._8_8_ = value_2;\n    return extracted_data;\n  }\n  format_error = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(format_error,error_message);\n}\n\n",
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_0010870e",
                "param_1": "pointerAddress",
                "param_2": "newValue",
                "param_3": "pointer",
                "puVar1": "pointerToUpdate"
            },
            "code": "\nvoid updatePointer_0010870e(undefined8 pointerAddress,undefined8 newValue,long *pointer)\n\n{\n  undefined8 *pointerToUpdate;\n  \n  pointerToUpdate = (undefined8 *)*pointer;\n  *pointerToUpdate = newValue;\n  *pointer = (long)(pointerToUpdate + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_handle",
                "param_2": "symbol_table",
                "param_3": "section",
                "param_4": "subsec",
                "param_5": "type",
                "param_6": "string_table",
                "param_7": "flag",
                "param_8": "error_string",
                "lVar1": "symbol",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "result",
                "uVar6": "result",
                "plVar7": "ptr",
                "__ptr": "data_ptr",
                "__ptr_00": "size_ptr",
                "bVar8": "bit_offset",
                "iVar9": "counter",
                "pcVar10": "type_name",
                "uVar11": "mask",
                "lVar12": "index",
                "uVar13": "mask_a",
                "uVar14": "mask_b",
                "uVar15": "bit_size",
                "local_68": "buffer",
                "local_48": "type_code",
                "local_47": "modifier"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_handle,long *symbol_table,long section,undefined8 subsec,uint type,\n                 long *string_table,char flag,undefined8 error_string)\n\n{\n  long symbol;\n  char result;\n  undefined4 error_code;\n  undefined8 result;\n  long result;\n  undefined8 result;\n  long *ptr;\n  void *data_ptr;\n  void *size_ptr;\n  byte bit_offset;\n  int counter;\n  char *type_name;\n  ulong mask;\n  long index;\n  uint mask_a;\n  uint mask_b;\n  undefined8 bit_size;\n  undefined buffer [32];\n  char type_code;\n  byte modifier;\n  \n  result = *(long *)(coff_handle + 0x110);\n  if ((~*(uint *)(result + 0x38) & type) != 0) {\n    mask_a = (int)type >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    mask = (ulong)(type & *(uint *)(result + 0x40));\n    bit_offset = (byte)*(undefined4 *)(result + 0x3c);\n    mask_a = (mask_a ^ type) & *(uint *)(result + 0x38) ^ mask_a;\n    if (mask == 1L << (bit_offset & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_handle,symbol_table,section,subsec,mask_a,string_table,flag,error_string);\n      result = FUN_00113d3a(result);\n      return result;\n    }\n    if (mask != 2L << (bit_offset & 0x3f)) {\n      if (mask != 3L << (bit_offset & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          mask_a);\n        FUN_00119ed0(result,type);\n        return 0;\n      }\n      mask_b = 0;\n      if (string_table != (long *)0x0) {\n        mask_b = (uint)*(ushort *)(string_table + 2);\n        ptr = string_table + 2;\n        for (counter = 0; (*(short *)ptr != 0 && (counter != 3)); counter = counter + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      bit_size = 0;\n      result = error_string;\n      result = parse_coff_type_0010dac0(coff_handle,symbol_table,section,subsec,mask_a,string_table,0);\n      result = *(long *)(section + 0x28);\n      if (result == 0) {\n        result = FUN_00113dfe(4,0,bit_size,result);\n        result = FUN_0010c218(error_string,\"int\",result);\n        *(long *)(section + 0x28) = result;\n      }\n      result = FUN_00113c43(result,result,0,(long)(int)(mask_b - 1),0);\n      return result;\n    }\n    result = parse_coff_type_0010dac0(coff_handle,symbol_table,section,subsec,mask_a,string_table,flag,error_string);\n    result = FUN_00113ce0(result,0,0);\n    return result;\n  }\n  if ((string_table != (long *)0x0) && (0 < *string_table)) {\n    ptr = (long *)FUN_0010da0b(section);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    result = FUN_00113e23(ptr,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    string_table = (long *)0x0;\n  }\n  if (0x10 < type) {\n    result = FUN_00113e17();\n    return result;\n  }\n  result = *(long *)(section + 8 + (long)(int)type * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type) {\n  default:\n    result = FUN_00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    result = FUN_00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result = FUN_00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result = FUN_00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result = FUN_00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result = FUN_00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result = FUN_00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (string_table == (long *)0x0) {\n      result = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (string_table == (long *)0x0) {\n      result = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    result = FUN_0010e07c(coff_handle,symbol_table,section,result,string_table,error_string);\nLAB_0010e046:\n    ptr = (long *)FUN_0010da0b(section,subsec);\n    *ptr = result;\n    return result;\n  case 10:\n    if (string_table == (long *)0x0) {\n      result = FUN_00113d6e(0,0);\n    }\n    else {\n      result = string_table[3];\n      data_ptr = (void *)xmalloc(0x50);\n      size_ptr = (void *)xmalloc(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          counter = (int)index;\n          symbol = *(long *)(*symbol_table + symbol_table[2] * 8);\n          result = bfd_coff_get_syment(coff_handle,symbol,buffer);\n          index = (long)counter;\n          if (result == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            result = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(result,result);\n            free(data_ptr);\n            free(size_ptr);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)modifier + 1 + symbol_table[3];\n          if (type_code != '\\x10') break;\n          if ((int)type <= counter + 1) {\n            type = type + 10;\n            data_ptr = (void *)xrealloc(data_ptr);\n            size_ptr = (void *)xrealloc(size_ptr,(long)(int)type << 3);\n          }\n          index = *(long *)(symbol + 0x20);\n          *(undefined8 *)((long)data_ptr + (long)counter * 8) = *(undefined8 *)(symbol + 8);\n          *(long *)((long)size_ptr + (long)counter * 8) =\n               *(long *)(symbol + 0x10) + *(long *)(index + 0x30);\n          index = (long)(counter + 1);\n        }\n      } while (type_code != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)data_ptr + index * 8) = 0;\n      result = FUN_00113d6e(data_ptr,size_ptr);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = FUN_00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result = FUN_00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result = FUN_00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result = FUN_00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result = FUN_00113df2(0xc);\n    type_name = \"long double\";\n  }\n  result = FUN_0010c218(error_string,type_name,result);\nLAB_0010e065:\n  *(long *)(section + 8 + (long)(int)type * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c218",
                "xmalloc",
                "FUN_00119ed0",
                "xrealloc",
                "FUN_00113dfe",
                "FUN_00113e17",
                "bfd_errmsg",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_00113df2",
                "FUN_00113d6e",
                "FUN_00113da9",
                "bfd_get_error",
                "free",
                "FUN_00113ce0",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "extraOutput",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 extraOutput;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraOutput,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "piVar1": "errorCodePointer",
                "uVar2": "errorString",
                "__errno_location": "getErrorCode",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedMessage"
            },
            "code": "\nvoid printErrorMessage_0010882c(void)\n\n{\n  int *errorCodePointer;\n  undefined8 errorString;\n  \n  errorCodePointer = __errno_location();\n  strerror(*errorCodePointer);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_message_0010ebb0",
                "param_1": "messageId",
                "param_2": "tag",
                "param_3": "tagLength",
                "param_4": "context",
                "__s": "messagePayload",
                "cVar1": "tagCharacter",
                "uVar2": "validTagIndex",
                "uVar3": "result",
                "sVar4": "tagLengthParam2",
                "sVar5": "payloadLength",
                "__s_00": "formattedMessage"
            },
            "code": "\nundefined4 processMessage_0010ebb0(undefined8 messageId,char *tag,int tagLength,undefined8 context)\n\n{\n  char tagCharacter;\n  uint validTagIndex;\n  undefined4 result;\n  char *messagePayload;\n  size_t tagLengthParam2;\n  size_t payloadLength;\n  char *formattedMessage;\n  \n  messagePayload = (char *)FUN_00109b2f();\n  validTagIndex = tagLength - 1;\n  if (validTagIndex < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)validTagIndex * 4);\n    tagCharacter = (&DAT_00121334)[validTagIndex];\n    tagLengthParam2 = strlen(tag);\n    payloadLength = strlen(messagePayload);\n    formattedMessage = (char *)xmalloc(tagLengthParam2 + 3 + payloadLength);\n    sprintf(formattedMessage,\"%s:%c%s\",tag,(ulong)(uint)(int)tagCharacter,messagePayload);\n    free(messagePayload);\n    result = FUN_0010e2f0(messageId,result,0,context,formattedMessage);\n    if ((char)result != '\\0') {\n      free(formattedMessage);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_message_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "allocate_and_initialize_structure_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "structure_address",
                "plVar2": "allocated_structure_pointer"
            },
            "code": "\nlong allocate_and_initialize_structure_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long structure_address;\n  long *allocated_structure_pointer;\n  \n  if ((input1 != 0) && (structure_address = FUN_00112904(0x13,0), structure_address != 0)) {\n    allocated_structure_pointer = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_structure_pointer + 0x19) = 0;\n    *allocated_structure_pointer = input1;\n    *(undefined4 *)((long)allocated_structure_pointer + 0x1c) = 0;\n    allocated_structure_pointer[1] = input2;\n    allocated_structure_pointer[2] = input3;\n    *(undefined *)(allocated_structure_pointer + 3) = input4;\n    *(long **)(structure_address + 0x10) = allocated_structure_pointer;\n    return structure_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_structure_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_value_in_hash_table_00115d70",
                "param_1": "value",
                "param_2": "hashTable",
                "lVar1": "result",
                "local_18": "tempValue",
                "local_10": "isPresent"
            },
            "code": "\nundefined checkValueInHashTable_00115d70(undefined8 value,undefined8 hashTable)\n\n{\n  long result;\n  undefined8 tempValue;\n  undefined isPresent;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(hashTable,value);\n    isPresent = result != 0;\n  }\n  else {\n    isPresent = 0;\n    tempValue = value;\n    htab_traverse(hashTable,FUN_0011a170,&tempValue);\n  }\n  return isPresent;\n}\n\n",
            "called": [
                "htab_traverse",
                "htab_find",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_0010554f",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_value_in_hash_table_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_entry_00109be3",
                "param_1": "array",
                "param_2": "entry",
                "param_3": "value",
                "uVar1": "newArray",
                "puVar2": "newEntryAddress",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndAddEntry_00109be3(long array,undefined8 entry,undefined4 value)\n\n{\n  undefined8 newArray;\n  undefined8 *newEntryAddress;\n  uint currentSize;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    currentSize = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = currentSize;\n    newArray = xrealloc(*(undefined8 *)(array + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(array + 0x20) = newArray;\n  }\n  currentSize = *(uint *)(array + 0x28);\n  newEntryAddress = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(array + 0x20));\n  *newEntryAddress = entry;\n  *(undefined4 *)(newEntryAddress + 1) = value;\n  *(uint *)(array + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)newEntryAddress >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "expand_and_add_entry_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "xmalloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_data_to_server_0010e918",
                "param_1": "socket",
                "param_2": "message",
                "param_3": "length",
                "__s": "response",
                "sVar2": "messageLength",
                "sVar3": "responseLength",
                "__s_00": "formattedMessage",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendDataToServer_0010e918(undefined8 socket,char *message,undefined8 length)\n\n{\n  undefined4 result;\n  char *response;\n  size_t messageLength;\n  size_t responseLength;\n  char *formattedMessage;\n  \n  response = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  responseLength = strlen(response);\n  formattedMessage = (char *)xmalloc(messageLength + 0x14 + responseLength);\n  sprintf(formattedMessage,\"%s:c=e%s,%ld\",message,response,length);\n  free(response);\n  result = FUN_0010e2f0(socket,0x80,0,0,formattedMessage);\n  if ((char)result != '\\0') {\n    free(formattedMessage);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_data_to_server_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0010a424",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_and_copy_section_contents_00116110",
                "param_1": "sourceBinary",
                "param_2": "sectionHeader",
                "param_3": "destinationBinary",
                "uVar1": "byte1",
                "uVar2": "byte2",
                "lVar3": "sectionHeaderAddress",
                "iVar4": "halfLength1",
                "iVar5": "halfLength2",
                "cVar6": "isSuccess",
                "uVar7": "errorMessage",
                "__ptr": "bufferPointer",
                "lVar8": "offset",
                "uVar9": "index",
                "iVar10": "lengthDivisor",
                "uVar11": "offset1",
                "puVar12": "bytePtr",
                "lVar13": "lengthDiff",
                "puVar14": "bufferPtr",
                "puVar15": "bufferPtr2",
                "pvVar16": "dataPtr",
                "uVar17": "offset2",
                "uVar18": "length",
                "uVar19": "startIndex",
                "bVar20": "isOdd",
                "local_38": "sectionSize",
                "local_30": "sectionData"
            },
            "code": "\nvoid reverseAndCopySectionContents_00116110(undefined8 sourceBinary,undefined8 *sectionHeader,undefined8 destinationBinary)\n\n{\n  undefined byte1;\n  undefined8 byte2;\n  long sectionHeaderAddress;\n  int halfLength1;\n  int halfLength2;\n  char isSuccess;\n  undefined8 errorMessage;\n  undefined8 *bufferPointer;\n  long offset;\n  ulong index;\n  int lengthDivisor;\n  ulong offset1;\n  undefined *bytePtr;\n  long lengthDiff;\n  undefined8 *bufferPtr;\n  undefined8 *bufferPtr2;\n  void *dataPtr;\n  ulong offset2;\n  ulong length;\n  ulong startIndex;\n  byte isOdd;\n  ulong sectionSize;\n  void *sectionData;\n  \n  isOdd = 0;\n  isSuccess = FUN_00115f50(sourceBinary,sectionHeader,1);\n  if (isSuccess != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeader[8];\n  sectionHeaderAddress = sectionHeader[0xc];\n  if (((*(byte *)((long)sectionHeader + 0x25) & 1) == 0) || ((*(byte *)(sectionHeaderAddress + 0x25) & 1) == 0)) {\n    lengthDiff = FUN_00114190(*sectionHeader,0,0x80);\n    if (lengthDiff == 0) {\n      return;\n    }\n    if ((*(byte *)(lengthDiff + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPointer = (undefined8 *)xmalloc(sectionSize);\n    bufferPtr2 = bufferPointer;\n    if (7 < sectionSize) {\n      for (length = sectionSize >> 3; length != 0; length = length - 1) {\n        *bufferPtr2 = 0;\n        bufferPtr2 = bufferPtr2 + (ulong)isOdd * -2 + 1;\n      }\n    }\n    bufferPtr = bufferPtr2;\n    if ((sectionSize & 4) != 0) {\n      bufferPtr = (undefined8 *)((long)bufferPtr2 + (ulong)isOdd * -8 + 4);\n      *(undefined4 *)bufferPtr2 = 0;\n    }\n    bufferPtr2 = bufferPtr;\n    if ((sectionSize & 2) != 0) {\n      bufferPtr2 = (undefined8 *)((long)bufferPtr + (ulong)isOdd * -4 + 2);\n      *(undefined2 *)bufferPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)bufferPtr2 = 0;\n    }\n    isSuccess = bfd_set_section_contents(destinationBinary,sectionHeaderAddress,bufferPointer,0);\n    if (isSuccess != '\\0') {\n      free(bufferPointer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,destinationBinary,sectionHeaderAddress,0);\n    free(bufferPointer);\n    return;\n  }\n  sectionData = (void *)0x0;\n  isSuccess = bfd_get_full_section_contents(sourceBinary,sectionHeader,&sectionData);\n  if ((isSuccess == '\\0') ||\n     (isSuccess = bfd_convert_section_contents(sourceBinary,sectionHeader,destinationBinary,&sectionData,&sectionSize),\n     lengthDivisor = DAT_00127908, isSuccess == '\\0')) {\n    bfd_set_section_size(sectionHeaderAddress,0);\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,sourceBinary,sectionHeader,0);\n    free(sectionData);\n    return;\n  }\n  halfLength1 = DAT_001264b8;\n  halfLength2 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    length = (ulong)DAT_00127908;\n    if (sectionSize % length != 0) {\n      byte2 = *sectionHeader;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(errorMessage,byte2,lengthDivisor);\n    }\n    lengthDivisor = DAT_00127908 / 2;\n    offset1 = 0;\n    while (startIndex = offset1, halfLength1 = DAT_001264b8, halfLength2 = DAT_001264bc, startIndex < sectionSize) {\n      offset1 = length + startIndex;\n      offset2 = offset1;\n      for (index = 0; index < (ulong)(long)lengthDivisor; index = index + 1) {\n        offset2 = offset2 - 1;\n        bytePtr = (undefined *)(startIndex + index + (long)sectionData);\n        byte1 = *bytePtr;\n        *bytePtr = *(undefined *)((long)sectionData + offset2);\n        *(undefined *)((long)sectionData + offset2) = byte1;\n      }\n    }\n  }\n  DAT_001264b8 = halfLength1;\n  DAT_001264bc = halfLength2;\n  if (-1 < halfLength2) {\n    length = (ulong)DAT_00127a3c;\n    lengthDivisor = (int)((ulong)sectionHeader[7] % length);\n    offset1 = ((long)halfLength2 - (long)lengthDivisor) + (long)sectionData;\n    if (halfLength2 < lengthDivisor) {\n      offset1 = offset1 + length;\n    }\n    lengthDiff = (sectionSize + (long)sectionData) - offset1;\n    dataPtr = sectionData;\n    for (; offset1 < sectionSize + (long)sectionData; offset1 = offset1 + length) {\n      for (offset = 0; ((int)offset < halfLength1 && (offset != lengthDiff)); offset = offset + 1) {\n        *(undefined *)((long)dataPtr + offset) = *(undefined *)(offset1 + offset);\n      }\n      dataPtr = (void *)((long)dataPtr + offset);\n      lengthDiff = lengthDiff - length;\n    }\n    sectionSize = ((((length - 1) + sectionSize) - (long)halfLength2) / length) * (long)halfLength1;\n    length = *(ulong *)(sectionHeaderAddress + 0x38) / length;\n    *(ulong *)(sectionHeaderAddress + 0x38) = length;\n    if (halfLength2 < lengthDivisor) {\n      *(ulong *)(sectionHeaderAddress + 0x38) = length + 1;\n      isSuccess = bfd_set_section_contents(destinationBinary,sectionHeaderAddress,sectionData,0,sectionSize);\n      if (isSuccess == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  isSuccess = bfd_set_section_contents(destinationBinary,sectionHeaderAddress,sectionData,0,sectionSize);\n  if (isSuccess == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00115f50",
                "xmalloc",
                "free",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_001083de",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_section_contents_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printToStream",
                "fflush": "flushStream"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_00127600,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_debugging_0010bf20",
                "param_1": "blockPtr",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "param_4": "newParam4",
                "lVar1": "currentBlockPtr",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endBlockDebugging_0010bf20(long blockPtr,undefined8 newParam2,undefined8 newParam3,undefined8 newParam4)\n\n{\n  long currentBlockPtr;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlockPtr = *(long *)(blockPtr + 0x20), currentBlockPtr == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlockPtr + 8) != 0) {\n      *(undefined8 *)(currentBlockPtr + 0x20) = newParam2;\n      errorMessage = CONCAT71((int7)((ulong)currentBlockPtr >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlockPtr + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = newParam4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_block_debugging_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_data_type_0010c95e",
                "param_1": "paramList",
                "param_2": "bytePtr",
                "param_3": "dataType",
                "bVar1": "firstChar",
                "bVar2": "secondChar",
                "pbVar3": "ptr3",
                "bVar4": "isSigned",
                "bVar5": "isUnsigned",
                "bVar6": "isVoid",
                "cVar7": "flag",
                "uVar8": "size",
                "pbVar9": "ptr9",
                "lVar10": "length",
                "uVar11": "returnValue",
                "pcVar12": "varType",
                "sVar13": "varSize",
                "uVar14": "varLength",
                "__ptr": "ptr",
                "lVar15": "result",
                "pcVar19": "strVar",
                "ppcVar18": "strVarPtr",
                "local_49": "localFlag",
                "local_48": "localSize",
                "local_40": "localStrVar"
            },
            "code": "\nundefined8 parseDataType_0010c95e(undefined8 *paramList,byte **bytePtr,long *dataType)\n\n{\n  byte firstChar;\n  byte secondChar;\n  byte *ptr3;\n  bool isSigned;\n  bool isUnsigned;\n  bool isVoid;\n  char flag;\n  uint size;\n  byte *ptr9;\n  long length;\n  undefined8 returnValue;\n  char *varType;\n  size_t varSize;\n  ulong varLength;\n  void *ptr;\n  long result;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **strVarPtr;\n  char *strVar;\n  byte *psecondChar0;\n  undefined localFlag;\n  ulong localSize;\n  char *localStrVar [2];\n  \n  while( true ) {\n    psecondChar0 = *bytePtr;\n    firstChar = *psecondChar0;\n    if ('T' < (char)firstChar) break;\n    if ((char)firstChar < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(firstChar) {\n    case 0x41:\n      result = 0;\n      ptr3 = psecondChar0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *bytePtr = psecondChar0 + 1;\n      flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (dataType == (long *)0x0) {\n        return 1;\n      }\n      result = FUN_00113b71(*dataType);\n      *dataType = result;\n      return 1;\n    case 0x46:\n      *bytePtr = psecondChar0 + 1;\n      if (dataType == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        strVarPtr = (char **)0x0;\n      }\n      else {\n        puVar16 = &localSize;\n        strVarPtr = localStrVar;\n      }\n      flag = FUN_0010d882(paramList,bytePtr,strVarPtr,puVar16);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (**bytePtr == 0x5f) {\n        *bytePtr = *bytePtr + 1;\n        flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n        if (flag == '\\0') {\n          return 0;\n        }\n        if (dataType == (long *)0x0) {\n          return 1;\n        }\n        result = FUN_00113ce0(*dataType,localStrVar[0],localSize & 0xff);\n        *dataType = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *bytePtr = psecondChar0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      localFlag = 0;\n      localStrVar[0] = (char *)0x0;\n      localSize = 0;\n      *bytePtr = psecondChar0 + 1;\n      if (((&_sch_istable)[(ulong)psecondChar0[1] * 2] & 4) == 0) {\n        if (psecondChar0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        strVarPtr = localStrVar;\n        if (dataType == (long *)0x0) {\n          strVarPtr = (char **)0x0;\n        }\n        flag = FUN_0010d559(paramList,bytePtr,strVarPtr);\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        size = FUN_00108e76(bytePtr);\n        ptr3 = *bytePtr;\n        varSize = strlen((char *)ptr3);\n        if (varSize < size) goto switchD_0010cdf9_caseD_60;\n        *bytePtr = ptr3 + size;\n        if ((dataType != (long *)0x0) &&\n           (localStrVar[0] = (char *)FUN_0010afd5(*paramList,paramList[1],ptr3,size,9),\n           localStrVar[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      secondChar = **bytePtr;\n      if (firstChar == 0x4d) {\n        if ((secondChar == 0x43) || (secondChar == 0x56)) {\n          *bytePtr = *bytePtr + 1;\n        }\n        if (**bytePtr != 0x46) goto switchD_0010cdf9_caseD_60;\n        *bytePtr = *bytePtr + 1;\n        if (dataType == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &localFlag;\n          puVar16 = &localSize;\n        }\n        flag = FUN_0010d882(paramList,bytePtr,puVar16,puVar17);\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      if (**bytePtr == 0x5f) {\n        *bytePtr = *bytePtr + 1;\n        flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n        if (flag == '\\0') {\n          return 0;\n        }\n        if (dataType == (long *)0x0) {\n          return 1;\n        }\n        if (firstChar != 0x4d) {\n          result = FUN_00113bfa(localStrVar[0],*dataType);\n          *dataType = result;\n          return 1;\n        }\n        result = FUN_00113b98(*dataType,localStrVar[0],localSize,localFlag);\n        *dataType = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnValue = FUN_0010d559(paramList,bytePtr,dataType);\n      return returnValue;\n    case 0x52:\n      *bytePtr = psecondChar0 + 1;\n      flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (dataType == (long *)0x0) {\n        return 1;\n      }\n      result = FUN_00113cb9(*dataType);\n      *dataType = result;\n      return 1;\n    case 0x54:\n      *bytePtr = psecondChar0 + 1;\n      flag = FUN_00108ea1(bytePtr,&localSize);\n      if (flag != '\\0') {\n        if ((uint)localSize < *(uint *)(paramList + 5)) {\n          localStrVar[0] = *(char **)((localSize & 0xffffffff) * 0x10 + paramList[4]);\n          flag = parseDataType_0010c95e(paramList,localStrVar,dataType);\n          if (flag == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (firstChar == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *bytePtr = psecondChar0 + 1;\n    flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n    if (flag == '\\0') {\n      return 0;\n    }\n    if (dataType == (long *)0x0) {\n      return 1;\n    }\n    result = FUN_00113d3a(*dataType);\n    *dataType = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isVoid = false;\n  isSigned = false;\n  flag = '\\0';\n  isUnsigned = false;\n  do {\n    ptr3 = *bytePtr;\n    firstChar = *ptr3;\n    if (firstChar == 0x55) {\n      flag = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)firstChar) {\n      if (firstChar == 0x56) {\n        isVoid = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)firstChar) goto switchD_0010cdf9_caseD_60;\n      if ((char)firstChar < '_') goto LAB_0010cdfb;\n      switch(firstChar) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (dataType == (long *)0x0) {\nLAB_0010d0aa:\n          *bytePtr = ptr3 + 1;\n          return 1;\n        }\n        result = FUN_0010914e(*paramList,&DAT_00120436);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00112904(6,4);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"unsigned char\";\n        if ((flag == '\\0') && (strVar = \"char\", isSigned)) {\n          strVar = \"signed char\";\n        }\n        result = FUN_0010914e(*paramList,strVar);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113dfe(1,flag);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*paramList,\"float\");\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113df2(4);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"unsigned int\";\n        varType = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"long unsigned int\";\n        varType = \"long int\";\nLAB_0010ced2:\n        if (flag == '\\0') {\n          strVar = varType;\n        }\n        result = FUN_0010914e(*paramList,strVar);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113dfe(4,flag);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        strVar = \"long double\";\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = FUN_0010914e(*paramList,strVar);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113df2(8);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"short unsigned int\";\n        if (flag == '\\0') {\n          strVar = \"short int\";\n        }\n        result = FUN_0010914e(*paramList,strVar);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113dfe(2,flag);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        strVarPtr = localStrVar;\n        if (dataType == (long *)0x0) {\n          strVarPtr = (char **)0x0;\n        }\n        flag = FUN_0010d21c(paramList,bytePtr,strVarPtr);\n        if (flag == '\\0') {\n          return 0;\n        }\n        if (dataType == (long *)0x0) {\n          return 1;\n        }\n        varSize = strlen(localStrVar[0]);\n        result = FUN_0010afd5(*paramList,paramList[1],localStrVar[0],varSize & 0xffffffff,9);\n        *dataType = result;\n        free(localStrVar[0]);\n        result = *dataType;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*paramList,&DAT_00120495);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113e17();\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        result = FUN_0010914e(*paramList,\"__wchar_t\");\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113dfe(2,1);\n          *dataType = result;\n          *bytePtr = *bytePtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (dataType == (long *)0x0) goto LAB_0010d0aa;\n        strVar = \"long long unsigned int\";\n        if (flag == '\\0') {\n          strVar = \"long long int\";\n        }\n        result = FUN_0010914e(*paramList,strVar);\n        *dataType = result;\n        if (result == 0) {\n          result = FUN_00113dfe(8,flag);\n          *dataType = result;\n        }\n      }\n      *bytePtr = *bytePtr + 1;\n      goto LAB_0010d1de;\n    }\n    if (firstChar == 0x43) {\n      isUnsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (firstChar != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *bytePtr = ptr3 + 1;\n  } while( true );\nLAB_0010ca26:\n  ptr9 = ptr3 + 1;\n  *bytePtr = ptr9;\n  firstChar = *ptr9;\n  if (firstChar == 0) goto switchD_0010cdf9_caseD_60;\n  if (firstChar == 0x5f) {\n    *bytePtr = ptr3 + 2;\n    flag = parseDataType_0010c95e(paramList,bytePtr,dataType);\n    if (flag == '\\0') {\n      return 0;\n    }\n    if (dataType == (long *)0x0) {\n      return 1;\n    }\n    length = FUN_0010914e(*paramList,\"int\");\n    if (length == 0) {\n      length = FUN_00113dfe(4,0);\n    }\n    result = FUN_00113c43(*dataType,length,0,result,0);\n    *dataType = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)firstChar * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)firstChar + -0x30);\n  ptr3 = ptr9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)firstChar < ':') {\n    if ((char)firstChar < '0') {\n      if (firstChar != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(psecondChar0);\n      if (dataType == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((firstChar != 0x47) || (*bytePtr = ptr3 + 1, ((&_sch_istable)[(ulong)ptr3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  psecondChar0 = *bytePtr;\n  size = FUN_00108e76(bytePtr);\n  ptr3 = *bytePtr;\n  varSize = strlen((char *)ptr3);\n  varLength = (ulong)size;\n  if (varLength <= varSize) {\n    *bytePtr = ptr3 + varLength;\n    if (dataType == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)FUN_00109a0b(ptr3,varLength);\n    result = FUN_0010914e(*paramList,ptr);\n    *dataType = result;\n    free(ptr);\n    if (*dataType == 0) {\n      result = FUN_0010afd5(*paramList,paramList[1],ptr3,(int)*bytePtr - (int)ptr3,0);\n      *dataType = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isUnsigned) {\n      result = FUN_00113b71(*dataType);\n      *dataType = result;\n    }\n    if (isVoid) {\n      result = FUN_00113b4a(*dataType);\n      *dataType = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(psecondChar0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010d21c",
                "FUN_00113dfe",
                "FUN_00108e76",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00113c43",
                "strlen",
                "FUN_00113df2",
                "FUN_00113b4a",
                "free",
                "FUN_00112904",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010911f",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d21c",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "parse_data_type_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUNC_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "dcgettext",
                "FUN_001163d0",
                "bfd_set_section_size",
                "fwrite",
                "strerror",
                "FUN_001126c0",
                "FUN_00105828",
                "bfd_get_full_section_contents",
                "bfd_set_format",
                "FUN_0010551d",
                "bfd_map_over_sections",
                "FUN_0010554f",
                "bfd_get_arch",
                "FUN_00114190",
                "FUN_00115f30",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_00115530",
                "bfd_malloc_and_get_section",
                "bfd_get_section_by_name",
                "bfd_make_section_with_flags",
                "bfd_create_gnu_debuglink_section",
                "fopen",
                "free",
                "__errno_location",
                "fclose"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "metadata",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "localizedErrMsg",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "timeSpec5"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long metadata)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 localizedErrMsg;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 timeSpec5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  timeSpec5 = *(undefined4 *)(metadata + 0x58);\n  uStack_24 = *(undefined4 *)(metadata + 0x5c);\n  uStack_20 = *(undefined4 *)(metadata + 0x60);\n  uStack_1c = *(undefined4 *)(metadata + 100);\n  timeSpec1 = *(undefined4 *)(metadata + 0x48);\n  timeSpec2 = *(undefined4 *)(metadata + 0x4c);\n  timeSpec3 = *(undefined4 *)(metadata + 0x50);\n  timeSpec4 = *(undefined4 *)(metadata + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    localizedErrMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(localizedErrMsg,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorCode)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "bfdObject",
                "param_2": "undefinedParam",
                "param_3": "lengthParam",
                "param_4": "param4",
                "param_5": "inputString",
                "lVar1": "tempVar1",
                "uVar2": "bfdError",
                "lVar3": "tempVar3",
                "uVar4": "bfdErrMsg",
                "uVar5": "errMsg",
                "sVar6": "strLength",
                "lVar7": "tempVar7",
                "local_44": "localVar1",
                "uStack_40": "uStack40",
                "uStack_3f": "uStack3f",
                "uStack_3e": "uStack3e",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *bfdObject,undefined undefinedParam,int lengthParam,undefined8 param4,char *inputString)\n\n{\n  long tempVar1;\n  undefined4 bfdError;\n  long tempVar3;\n  undefined8 bfdErrMsg;\n  undefined8 errMsg;\n  size_t strLength;\n  long tempVar7;\n  undefined4 localVar1;\n  undefined uStack40;\n  undefined uStack3f;\n  undefined2 uStack3e;\n  undefined4 localVar2 [3];\n  \n  if (inputString == (char *)0x0) {\n    tempVar7 = 0;\n  }\n  else {\n    tempVar3 = bfd_hash_lookup(bfdObject + 7,inputString,1,1);\n    if (tempVar3 == 0) {\n      bfdError = bfd_get_error();\n      bfdErrMsg = bfd_errmsg(bfdError);\n      errMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(errMsg,bfdErrMsg);\n      return 0;\n    }\n    tempVar7 = *(long *)(tempVar3 + 0x20);\n    if (tempVar7 == -1) {\n      tempVar7 = bfdObject[6];\n      tempVar1 = bfdObject[5];\n      *(long *)(tempVar3 + 0x20) = tempVar7;\n      if (tempVar1 == 0) {\n        bfdObject[4] = tempVar3;\n      }\n      else {\n        *(long *)(tempVar1 + 0x18) = tempVar3;\n      }\n      bfdObject[5] = tempVar3;\n      strLength = strlen(inputString);\n      bfdObject[6] = tempVar7 + 1 + strLength;\n    }\n  }\n  (**(code **)(*(long *)(*bfdObject + 8) + 0x50))(tempVar7,&localVar1);\n  uStack3f = 0;\n  uStack40 = undefinedParam;\n  (**(code **)(*(long *)(*bfdObject + 8) + 0x68))((long)lengthParam,&uStack3e);\n  (**(code **)(*(long *)(*bfdObject + 8) + 0x50))(param4,localVar2);\n  if ((ulong)bfdObject[3] < bfdObject[2] + 0xcU) {\n    bfdObject[3] = bfdObject[3] * 2;\n    tempVar7 = xrealloc(bfdObject[1]);\n    bfdObject[1] = tempVar7;\n  }\n  tempVar7 = bfdObject[2];\n  tempVar3 = bfdObject[1];\n  *(ulong *)(tempVar3 + tempVar7) = CONCAT26(uStack3e,CONCAT15(uStack3f,CONCAT14(uStack40,localVar1)));\n  *(undefined4 *)(tempVar3 + 8 + tempVar7) = localVar2[0];\n  bfdObject[2] = bfdObject[2] + 0xc;\n  return CONCAT71((int7)((ulong)tempVar7 >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_error",
                "xrealloc",
                "FUN_00119ed0",
                "bfd_hash_lookup",
                "bfd_errmsg",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e453",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010ed2c",
                "FUN_0010e439",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "comparisonResult",
                "uVar2": "message",
                "pcVar3": "commaPosition",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "flagIndex",
                "uVar7": "resultFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparisonResult;\n  undefined8 message;\n  char *commaPosition;\n  char *nextFlag;\n  size_t flagLength;\n  int flagIndex;\n  uint resultFlags;\n  undefined result [16];\n  \n  resultFlags = 0;\n  do {\n    commaPosition = strchr(sectionFlags,0x2c);\n    if (commaPosition == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      flagIndex = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPosition + 1;\n      flagIndex = (int)commaPosition - (int)sectionFlags;\n    }\n    flagLength = (size_t)flagIndex;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (comparisonResult == 0) {\n      resultFlags = resultFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        resultFlags = resultFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          resultFlags = resultFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            resultFlags = resultFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              resultFlags = resultFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                resultFlags = resultFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  resultFlags = resultFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    resultFlags = resultFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (comparisonResult == 0) {\n                      resultFlags = resultFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (comparisonResult == 0) {\n                        resultFlags = resultFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (comparisonResult == 0) {\n                          resultFlags = resultFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (comparisonResult == 0) {\n                            resultFlags = resultFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (comparisonResult != 0) {\n                              commaPosition = (char *)xmalloc((long)(flagIndex + 1));\n                              strncpy(commaPosition,sectionFlags,flagLength);\n                              commaPosition[flagLength] = '\\0';\n                              message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(message,commaPosition);\n                              message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            resultFlags = resultFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = resultFlags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "param_1": "args",
                "ppcVar2": "ptr",
                "sVar3": "len1",
                "sVar4": "len2",
                "__s": "str",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getFormattedString_001125fa(char **args)\n\n{\n  ulong totalLength;\n  char **ptr;\n  size_t len1;\n  size_t len2;\n  char *str;\n  \n  if (args == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptr = (char **)args[0x1d];\n  str = *args;\n  if ((ptr != (char **)0x0) && ((*(byte *)((long)ptr + 0x49) & 0x10) == 0)) {\n    len1 = strlen(*ptr);\n    len2 = strlen(str);\n    totalLength = len1 + 3 + len2;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)args[0x1d],*args);\n    str = DAT_00127a50;\n  }\n  return str;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "get_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_return_value_00108f05"
            },
            "code": "\nundefined getReturnValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_return_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_memory_00108863",
                "puVar1": "currentPtr",
                "puVar2": "nextPtr"
            },
            "code": "\nvoid cleanupMemory_00108863(void)\n\n{\n  undefined4 *currentPtr;\n  undefined4 *nextPtr;\n  \n  currentPtr = (undefined4 *)&DAT_00127740;\n  do {\n    nextPtr = currentPtr + 6;\n    free(*(void **)(currentPtr + 4));\n    *(undefined8 *)(currentPtr + 4) = 0;\n    currentPtr = nextPtr;\n  } while (nextPtr != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_call_00104020"
            },
            "code": "\nvoid executeIndirectCall_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "find_debug_file_00108f08",
                "param_1": "fileInfo",
                "param_2": "filename",
                "iVar1": "result",
                "uVar2": "success",
                "puVar3": "debugFiles",
                "puVar4": "temp",
                "lVar5": "counter",
                "puVar6": "head",
                "pcVar7": "currentFile",
                "puVar8": "tail",
                "bVar9": "flag"
            },
            "code": "\n\n\nundefined8 findDebugFile_00108f08(long fileInfo,char *filename)\n\n{\n  int result;\n  undefined8 success;\n  undefined8 *debugFiles;\n  undefined8 *temp;\n  long counter;\n  undefined8 *head;\n  char *currentFile;\n  undefined8 *tail;\n  byte flag;\n  \n  flag = 0;\n  currentFile = \"\";\n  if (filename != (char *)0x0) {\n    currentFile = filename;\n  }\n  if (*(long *)(fileInfo + 8) == 0) {\n    success = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    for (debugFiles = *(undefined8 **)(*(long *)(fileInfo + 8) + 8); debugFiles != (undefined8 *)0x0;\n        debugFiles = (undefined8 *)*debugFiles) {\n      result = filename_cmp(debugFiles[1],currentFile);\n      if (result == 0) goto LAB_00108fad;\n    }\n    debugFiles = (undefined8 *)xmalloc(0x18);\n    head = *(undefined8 **)(fileInfo + 0x10);\n    tail = debugFiles;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)tail = 0;\n      tail = (undefined8 *)((long)tail + (ulong)flag * -8 + 4);\n    }\n    debugFiles[1] = currentFile;\n    tail = (undefined8 *)*head;\n    while (temp = tail, temp != (undefined8 *)0x0) {\n      head = temp;\n      tail = (undefined8 *)*temp;\n    }\n    *head = debugFiles;\nLAB_00108fad:\n    *(undefined8 **)(fileInfo + 0x10) = debugFiles;\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "find_debug_file_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "find_matching_entry_00114190",
                "param_1": "input",
                "param_2": "exactMatch",
                "param_3": "flags",
                "uVar1": "flagsAndValue",
                "plVar2": "entry",
                "pplVar3": "result",
                "iVar4": "matchResult",
                "uVar5": "errorMessage",
                "pplVar6": "currentEntry",
                "pplVar7": "prevEntry",
                "pplVar8": "nextEntry"
            },
            "code": "\nlong ** findMatchingEntry_00114190(long *input,char exactMatch,uint flags)\n\n{\n  uint flagsAndValue;\n  long *entry;\n  long **result;\n  int matchResult;\n  undefined8 errorMessage;\n  long **currentEntry;\n  long **prevEntry;\n  long **nextEntry;\n  \n  prevEntry = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (exactMatch == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (exactMatch == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      currentEntry = (long **)*prevEntry;\n      if (currentEntry == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prevEntry = (long **)0x0;\n    }\n    else {\n      entry = DAT_00127900[1];\n      if (*(char *)entry == '!') {\n        matchResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n        currentEntry = prevEntry;\n        if (matchResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      matchResult = fnmatch((char *)entry,(char *)input,0);\n      if (matchResult != 0) goto LAB_001141e5;\n      currentEntry = (long **)*prevEntry;\n      if (currentEntry == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)currentEntry + 0x14)) != 0) {\n      entry = currentEntry[1];\n      if (*(char *)entry == '!') {\n        matchResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n        if (matchResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentEntry + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        matchResult = fnmatch((char *)entry,(char *)input,0);\n        if ((prevEntry == (long **)0x0) && (matchResult == 0)) {\n          nextEntry = (long **)*currentEntry;\n          prevEntry = currentEntry;\n          if (nextEntry == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextEntry = (long **)*currentEntry;\n    currentEntry = prevEntry;\n    if (nextEntry != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    matchResult = strcmp((char *)DAT_00127900[1],(char *)input);\n    if (matchResult == 0) {\nLAB_001143cd:\n      flagsAndValue = *(uint *)((long)prevEntry + 0x14);\n      if ((((flagsAndValue & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flagsAndValue & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorMessage,input);\n      }\n      if ((((flagsAndValue & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorMessage,input);\n      }\n      if ((((flagsAndValue & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)prevEntry + 0x14) = flagsAndValue | flags;\n        return prevEntry;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorMessage,input);\n    }\n    prevEntry = (long **)*prevEntry;\n    if (prevEntry == (long **)0x0) goto LAB_001142a9;\n    matchResult = strcmp((char *)prevEntry[1],(char *)input);\n    if (matchResult == 0) goto LAB_001143cd;\n    nextEntry = (long **)*prevEntry;\n    currentEntry = (long **)0x0;\n    if (nextEntry == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prevEntry = currentEntry;\n      if (exactMatch == '\\0') {\n        while (currentEntry = nextEntry, result = prevEntry, nextEntry = currentEntry,\n              (flags & *(uint *)((long)currentEntry + 0x14)) != 0) {\n          entry = currentEntry[1];\n          if (*(char *)entry == '!') {\n            matchResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n            if (matchResult == 0) goto LAB_0011438e;\n            nextEntry = (long **)*currentEntry;\n            if ((long **)*currentEntry == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            matchResult = fnmatch((char *)entry,(char *)input,0);\n            if ((prevEntry == (long **)0x0) && (matchResult == 0)) {\n              prevEntry = currentEntry;\n              nextEntry = (long **)*currentEntry;\n              if ((long **)*currentEntry == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextEntry = (long **)*currentEntry;\n              if ((long **)*currentEntry == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        matchResult = strcmp((char *)nextEntry[1],(char *)input);\n        result = currentEntry;\n        prevEntry = nextEntry;\n        if (matchResult == 0) goto LAB_001143cd;\n      }\n      currentEntry = result;\n      nextEntry = (long **)*nextEntry;\n      prevEntry = currentEntry;\n    } while (nextEntry != (long **)0x0);\nLAB_001142a1:\n    if (exactMatch != '\\0') {\nLAB_001142a9:\n      currentEntry = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentEntry + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentEntry + 2) = 0;\n      *(uint *)((long)currentEntry + 0x14) = flags;\n      currentEntry[5] = (long *)0x0;\n      prevEntry = currentEntry;\n      *currentEntry = (long *)DAT_00127900;\n      DAT_00127900 = prevEntry;\n      currentEntry[1] = input;\n      return currentEntry;\n    }\n  }\nLAB_00114212:\n  if (prevEntry == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prevEntry + 2) = 1;\n  return prevEntry;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_00114c20"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "parse_build_attributes_00116490",
                "param_1": "param1",
                "param_2": "note_size",
                "param_3": "note_name",
                "param_4": "data_ptr",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "temp2",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "msg",
                "in_RAX": "note_type",
                "uVar9": "temp3",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "__ptr": "buffer",
                "uVar13": "temp7",
                "unaff_RBX": "total_size",
                "unaff_RBP": "version",
                "puVar14": "notes",
                "puVar15": "ptr1",
                "cVar16": "char1",
                "puVar17": "ptr2",
                "puVar18": "ptr3",
                "in_R11": "description_size",
                "unaff_R12": "note",
                "puVar19": "note_ptr",
                "unaff_R13": "temp8",
                "__nmemb": "num_elements",
                "unaff_R14": "param_list",
                "puVar20": "ptr4",
                "bVar21": "byte_var",
                "iVar22": "loop_index",
                "unaff_retaddr": "return_address",
                "param_7": "result_size",
                "param_8": "flag1",
                "param_9": "flag2",
                "in_stack_00000020": "buffer_size",
                "in_stack_00000028": "notes_ptr",
                "in_stack_00000030": "char_ptr",
                "in_stack_00000038": "flag3",
                "in_stack_00000040": "flag4",
                "in_stack_00000048": "msg_ptr"
            },
            "code": "\nulong parseBuildAttributes_00116490(undefined8 param1,ulong note_size,ulong note_name,long data_ptr)\n\n{\n  undefined8 result;\n  undefined8 temp;\n  ulong temp2;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 msg;\n  ulong note_type;\n  ulong temp3;\n  ulong temp4;\n  ulong temp5;\n  ulong temp6;\n  undefined *buffer;\n  ulong temp7;\n  ulong total_size;\n  ulong version;\n  ulong *notes;\n  undefined *ptr1;\n  char char1;\n  undefined *ptr2;\n  undefined *ptr3;\n  ulong description_size;\n  ulong *note;\n  ulong *note_ptr;\n  ulong temp8;\n  size_t num_elements;\n  undefined8 *param_list;\n  ulong *ptr4;\n  byte byte_var;\n  int loop_index;\n  ulong return_address;\n  ulong result_size;\n  uint flag1;\n  ulong flag2;\n  ulong buffer_size;\n  ulong *notes_ptr;\n  undefined *char_ptr;\n  uint flag3;\n  uint flag4;\n  undefined8 *msg_ptr;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = data_ptr;\n  temp4 = version;\n  temp7 = temp8;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      note[7] = return_address;\n      temp5 = return_address;\nLAB_001164af:\n      temp3 = temp8;\n      temp7 = temp8;\n      return_address = temp5;\n    }\n    else {\n      note[7] = flag2;\nLAB_0011669e:\n      temp4 = version;\n      temp3 = version;\n    }\nLAB_001164bb:\n    note[8] = temp3;\n    if (*(char *)((note[3] - 1) + note_name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_ptr = note + 9;\n    if (0xb < total_size) {\n      temp3 = (**(code **)(param_list[1] + 0x40))(length);\n      *note_ptr = temp3;\n      temp3 = (**(code **)(param_list[1] + 0x40))(length + 4);\n      note[10] = temp3;\n      note_size = (**(code **)(param_list[1] + 0x40))(length + 8);\n      note_name = *note_ptr;\n      note[0xb] = note_size;\n      note_type = note[10];\n      temp3 = note_name + 3 & 0xfffffffffffffffc;\n      note[0xf] = temp3;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp5 = temp3 + note_type + 0xc;\n      if (total_size < temp5) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      note[0xc] = length + 0xc;\n      description_size = length + 0xc + temp3;\n      note[0xd] = description_size;\n      total_size = total_size + (-0xc - (temp3 + note_type));\n      data_ptr = length + temp5;\n      version = temp4;\n      note = note_ptr;\n      temp8 = temp7;\n      if (note_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            temp4 = parseBuildAttributes_00116490();\n            return temp4;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            temp4 = parseBuildAttributes_00116490();\n            return temp4;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            temp4 = parseBuildAttributes_00116490();\n            return temp4;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (total_size != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag3 | flag4 | flag1) == 0) {\n      result = *param_list;\n      temp = *msg_ptr;\n      msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(msg,result,temp);\nLAB_0011671b:\n      num_elements = ((long)note_ptr - (long)notes_ptr >> 3) * -0x71c71c71c71c71c7;\n      qsort(notes_ptr,num_elements,0x48,FUN_0011a1b0);\n      for (notes = notes_ptr; notes < note_ptr; notes = notes + 9) {\n        temp4 = notes[2];\n        if (temp4 != 0) {\n          temp7 = notes[7];\n          temp3 = notes[8];\n          ptr4 = notes;\n          loop_index = 0;\n          if (temp7 == temp3) {\n            notes[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = ptr4;\n                ptr4 = ptr + -9;\n                if (ptr4 < notes_ptr) goto LAB_001167f5;\n                temp5 = ptr[-7];\n              } while (temp5 == 0);\n              if ((*ptr4 != *notes) ||\n                 (index = memcmp((void *)ptr[-6],(void *)notes[3],*notes), index != 0))\n              break;\n              temp2 = ptr[-2];\n              temp6 = ptr[-1];\n              if (temp7 == temp2) {\n                if (temp3 == temp6) {\n                  notes[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp3 <= temp6) {\n                  notes[2] = 0;\n                  break;\n                }\n                if (temp6 < temp7) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp6) ||\n                     (temp7 <= (temp6 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((temp4 == 0x101) == (temp5 == 0x101)) {\n                  if (temp6 <= temp3) {\n                    temp6 = temp3;\n                  }\n                  if (temp2 < temp7) {\n                    temp7 = temp2;\n                  }\n                  ptr[-1] = temp6;\n                  ptr[-2] = temp7;\n                  notes[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp2 <= temp7) goto LAB_001167a6;\n                if (temp6 < temp7) goto LAB_0010852c;\n                if (temp3 < temp7) {\n                  if ((0xfffffffffffffff0 < temp3) || (temp2 <= (temp3 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp3 != temp6) goto LAB_001167b8;\n              }\nFUN_00116852:\n              flag = loop_index < 0x11;\n              loop_index = loop_index + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(notes_ptr,num_elements,0x48,FUN_0011a250);\n      buffer = (undefined *)xmalloc(buffer_size * 2);\n      result_size = 0;\n      flag2 = 0;\n      ptr3 = buffer;\n      for (notes = notes_ptr; notes < note_ptr; notes = notes + 9) {\n        if (notes[2] != 0) {\n          ptr2 = ptr3 + 4;\n          ptr1 = ptr3 + 0xc;\n          if ((notes[7] == flag2) && (notes[8] == result_size)) {\n            (**(code **)(param_list[1] + 0x50))(*notes,ptr3);\n            (**(code **)(param_list[1] + 0x50))(0,ptr2);\n            (**(code **)(param_list[1] + 0x50))(notes[2],ptr3 + 8);\n            temp7 = notes[6];\n            temp4 = *notes;\n            ptr3 = (undefined *)notes[3];\n            ptr2 = ptr1;\n            for (temp3 = temp4; temp3 != 0; temp3 = temp3 - 1) {\n              *ptr2 = *ptr3;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n              ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n            }\n            if (temp4 < temp7) {\n              for (length = temp7 - temp4; length != 0; length = length + -1) {\n                *ptr2 = 0;\n                ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr3 = ptr1 + temp7;\n          }\n          else {\n            (**(code **)(param_list[1] + 0x50))();\n            if (*(int *)(param_list[1] + 8) == 5) {\n              char1 = (*(char *)(param_list[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char1 = '\\b';\n            }\n            (**(code **)(param_list[1] + 0x50))(char1,ptr2);\n            (**(code **)(param_list[1] + 0x50))(notes[2],ptr3 + 8);\n            temp4 = *notes;\n            ptr3 = (undefined *)notes[3];\n            ptr2 = ptr1;\n            for (temp7 = temp4; temp7 != 0; temp7 = temp7 - 1) {\n              *ptr2 = *ptr3;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n              ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n            }\n            temp7 = notes[6];\n            if (temp4 < temp7) {\n              for (length = temp7 - temp4; length != 0; length = length + -1) {\n                *ptr2 = 0;\n                ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = param_list[1];\n            ptr1 = ptr1 + temp7;\n            ptr3 = ptr1 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(param_list[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(notes[7],ptr1);\n              (**(code **)(param_list[1] + 0x38))(notes[8],ptr3);\n              ptr3 = ptr1 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(notes[7],ptr1);\n              (**(code **)(param_list[1] + 0x50))(notes[8],ptr1 + 4);\n            }\n            flag2 = notes[7];\n            result_size = notes[8];\n          }\n        }\n      }\n      temp7 = (long)ptr3 - (long)buffer;\n      temp4 = temp7;\n      ptr3 = buffer;\n      if (temp7 < buffer_size) {\n        for (; buffer_size = temp7, temp4 != 0; temp4 = temp4 - 1) {\n          *char_ptr = *ptr3;\n          ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n          char_ptr = char_ptr + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(buffer);\nLAB_001166f8:\n      free(notes_ptr);\n      return buffer_size;\n    }\n    if (((flag4 | flag1) == 0) || (flag3 == 0)) {\n      if (flag4 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      temp5 = (**(code **)(param_list[1] + 0x28))(description_size);\n      temp3 = (**(code **)(param_list[1] + 0x28))(note[4] + 8);\n      if (temp3 < temp5) {\n        temp5 = temp3;\n      }\nLAB_00116631:\n      if (note[2] == 0x100) {\n        if (temp5 == 0) {\n          temp5 = return_address;\n        }\n        note_name = *note;\n        note[7] = temp5;\n        temp7 = temp3;\n        return_address = temp5;\n        if (temp3 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp5 == 0) {\n          temp5 = flag2;\n        }\n        note_name = *note;\n        note[7] = temp5;\n        temp4 = temp3;\n        flag2 = temp5;\n        if (temp3 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        temp5 = (**(code **)(param_list[1] + 0x40))(description_size);\n        temp3 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        temp4 = FUN_001086af();\n        return temp4;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,param_list,msg_ptr,length);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "parse_build_attributes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptrToTargets"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long targetName,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *ptrToTargets;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  ptrToTargets = targetList;\n  while( true ) {\n    currentTarget = *ptrToTargets;\n    ptrToTargets = ptrToTargets + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionInfo",
                "param_2": "newFunctionAddress",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "errorString",
                "pcVar3": "errorMessage",
                "auVar4": "returnData"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionInfo,undefined8 newFunctionAddress,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 errorString;\n  char *errorMessage;\n  undefined returnData [16];\n  \n  if (((*(long *)(functionInfo + 8) == 0) || (currentBlock = *(long *)(functionInfo + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionInfo + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newFunctionAddress;\n      errorString = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionInfo + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  errorString = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorString);\n  errorString = 0;\nLAB_0010be86:\n  returnData._8_8_ = returnValue;\n  returnData._0_8_ = errorString;\n  return returnData;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "offset",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "puVar1": "memoryBlock",
                "lVar2": "count",
                "puVar3": "currentPointer",
                "bVar4": "index",
                "auVar5": "resultArray"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte offset,undefined8 input1,undefined8 input2,undefined8 input3)\n\n{\n  undefined8 *memoryBlock;\n  long count;\n  undefined8 *currentPointer;\n  byte index;\n  undefined resultArray [16];\n  \n  index = 0;\n  resultArray._0_8_ = FUN_00112904(8 - (uint)offset);\n  if (resultArray._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPointer = memoryBlock + 1;\n    for (count = 8; count != 0; count = count + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)index * -8 + 4);\n    }\n    *memoryBlock = input2;\n    *(undefined8 **)(resultArray._0_8_ + 0x10) = memoryBlock;\n  }\n  resultArray._8_8_ = input3;\n  return resultArray;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_a",
                "param_2": "record_b",
                "uVar1": "record_a_timestamp"
            },
            "code": "\nint compare_records_0011a250(ulong *record_a,ulong *record_b)\n\n{\n  ulong record_a_timestamp;\n  \n  record_a_timestamp = record_a[2];\n  if (record_a_timestamp == record_b[2]) {\n    if (record_b[7] <= record_a[7]) {\n      if (record_a[7] <= record_b[7]) {\n        if (record_b[8] < record_a[8]) {\n          return -1;\n        }\n        if (record_b[8] <= record_a[8]) {\n          if ((4 < *record_a) && (4 < *record_b)) {\n            if (*(char *)(record_a[3] + 3) != *(char *)(record_b[3] + 3)) {\n              return (int)*(char *)(record_a[3] + 3) - (int)*(char *)(record_b[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record_a_timestamp == 0) || ((record_a_timestamp != 0x100 && (record_b[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "count",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "number",
                "sVar3": "length",
                "uVar4": "allocatedPtr",
                "uVar5": "isAllocated",
                "local_60": "buffer"
            },
            "code": "\nundefined4 processData_0010a69a(long dataPtr,undefined8 paramPtr,int count,char flag,uint value)\n\n{\n  undefined4 result;\n  long number;\n  size_t length;\n  undefined8 allocatedPtr;\n  undefined isAllocated;\n  char buffer [48];\n  \n  if (count == 0) {\n    buffer[0] = '\\0';\n    isAllocated = 0;\n    number = 0;\n  }\n  else {\n    number = FUN_00109c2e();\n    if (number < 0) {\n      return 0;\n    }\n    isAllocated = 1;\n    sprintf(buffer,\"%ld=\",number);\n  }\n  length = strlen(buffer);\n  sprintf(buffer + length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = FUN_00109b52(dataPtr,buffer,number,isAllocated,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  number = *(long *)(dataPtr + 0x60);\n  allocatedPtr = xmalloc(1);\n  *(undefined8 *)(number + 0x20) = allocatedPtr;\n  **(undefined **)(*(long *)(dataPtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "sections_list",
                "pcVar1": "section_name",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "result_1",
                "lVar5": "result_2",
                "uVar6": "error_message",
                "plVar7": "linked_sections_list"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **sections_list)\n\n{\n  char *section_name;\n  int comparison_result;\n  int section_type;\n  long result_1;\n  long result_2;\n  undefined8 error_message;\n  long *linked_sections_list;\n  \n  result_1 = FUN_00114190(*sections_list,0,4);\n  if (result_1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      result_1 = FUN_00114190(*sections_list,0,1);\n      result_2 = FUN_00114190(*sections_list,0,2);\n      if (result_1 != 0) {\n        if (result_2 != 0) {\n          section_name = *sections_list;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(error_message,section_name);\n        }\n        if (result_1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          section_name = *sections_list;\n          linked_sections_list = DAT_001279d8;\n          do {\n            section_type = strcmp(section_name,(char *)linked_sections_list[1]);\n            if (section_type == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(error_message,section_name);\n            }\n            linked_sections_list = (long *)*linked_sections_list;\n          } while (linked_sections_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (result_2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)sections_list + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        section_name = *sections_list;\n        comparison_result = strcmp(section_name,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(section_name,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(section_name,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          error_message = FUN_0010829e();\n          return error_message;\n        }\n      }\n      if (section_type == 5) {\n        error_message = FUN_00113ede(sections_list);\n        return error_message;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      error_message = FUN_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_0010827b",
                "FUN_0010829e",
                "strcmp",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "param_1": "param_array",
                "param_2": "param_length",
                "plVar1": "pointer",
                "lVar2": "value",
                "lVar3": "data1",
                "lVar4": "data2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "bound",
                "__ptr": "reloc_array",
                "lVar7": "reloc_length",
                "extraout_RAX": "extra_result",
                "lVar8": "counter",
                "uStack_28": "stack_value"
            },
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *param_array,long param_length)\n\n{\n  long *pointer;\n  long value;\n  long data1;\n  long data2;\n  int error_code;\n  undefined8 result;\n  long bound;\n  void *reloc_array;\n  long reloc_length;\n  undefined8 extra_result;\n  long counter;\n  undefined8 stack_value;\n  \n  if (*(long *)(param_length + 0x60) == 0) {\n    return result;\n  }\n  bound = bfd_get_reloc_upper_bound();\n  if (bound < 0) {\n    if ((bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*param_array);\n                    \n      xexit(1);\n    }\n  }\n  else if (bound != 0) {\n    reloc_array = (void *)xmalloc();\n    reloc_length = bfd_canonicalize_reloc(param_array,param_length,reloc_array);\n    data2 = _DAT_00128680;\n    data1 = _DAT_00128568;\n    bound = _fwrite;\n    if (reloc_length < 0) {\n      FUN_0011a110(*param_array);\n                    \n      xexit(1);\n    }\n    if (reloc_length != 0) {\n      counter = 0;\n      do {\n        pointer = **(long ***)((long)reloc_array + counter * 8);\n        if ((((pointer != (long *)0x0) && (value = *pointer, value != 0)) && (value != bound)) &&\n           ((value != data2 && (value != data1)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        counter = counter + 1;\n      } while (reloc_length != counter);\n    }\n    free(reloc_array);\n    return extra_result;\n  }\n  return stack_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a110",
                "FUN_001083b7",
                "free",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocation_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "validate_string_length_00113ede",
                "param_1": "string_array",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 validate_string_length_00113ede(char **string_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string = *string_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "validate_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Value",
                "lVar2": "record2Value",
                "iVar3": "result",
                "uVar4": "flags"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Value;\n  long record2Value;\n  int result;\n  uint flags;\n  \n  record1Value = *record1;\n  record2Value = *record2;\n  flags = *(uint *)(record2Value + 0x24) & 0x102;\n  if ((*(uint *)(record1Value + 0x24) & 0x102) == 0x102) {\n    if (flags != 0x102) {\n      return 1;\n    }\n  }\n  else if (flags == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Value + 0x38) <= *(ulong *)(record2Value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Value + 0x38) <= *(ulong *)(record1Value + 0x38)) {\n      if (*(ulong *)(record2Value + 0x40) < *(ulong *)(record1Value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Value + 0x40) <= *(ulong *)(record1Value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Value + 0x18) <= *(uint *)(record2Value + 0x18)) {\n            return -(uint)(*(uint *)(record1Value + 0x18) < *(uint *)(record2Value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "param_1": "input_data",
                "param_2": "data_address",
                "cVar1": "result_char",
                "lVar2": "temp_var1",
                "lVar3": "temp_var2",
                "uVar4": "result",
                "puVar5": "ptr_iterator",
                "iVar6": "kind",
                "dcgettext": "localized_message",
                "_stderr": "error_output_stream"
            },
            "code": "\n\n\nundefined8 processData_0010c892(undefined8 input_data,long data_address)\n\n{\n  char result_char;\n  long temp_var1;\n  long temp_var2;\n  undefined8 result;\n  undefined8 *ptr_iterator;\n  int kind;\n  \n  if (*(char *)(data_address + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr_iterator = *(undefined8 **)(data_address + 0x1a0); ptr_iterator != (undefined8 *)0x0;\n        ptr_iterator = (undefined8 *)*ptr_iterator) {\n      kind = *(int *)(ptr_iterator + 2);\n      temp_var2 = ptr_iterator[1];\n      if (kind != 0) {\n        if (temp_var2 != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(error_output_stream,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptr_iterator[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (temp_var2 == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      temp_var1 = FUN_00112904(kind,0);\n      if (temp_var1 == 0) goto LAB_0010c910;\n      temp_var2 = FUN_0010c6be(input_data,temp_var2,temp_var1);\n      ptr_iterator[3] = temp_var2;\n      if (temp_var2 == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    result_char = FUN_0010c1c6();\n    if (result_char != '\\0') {\n      result_char = FUN_0010be1a(input_data,*(undefined8 *)(data_address + 0x68));\n      if (result_char != '\\0') {\n        *(undefined *)(data_address + 0x60) = 0;\n        *(undefined8 *)(data_address + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112904",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "puVar1": "dataStructure"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  undefined4 *dataStructure;\n  \n  dataStructure = (undefined4 *)xmalloc(0x18);\n  *dataStructure = inputValue1;\n  dataStructure[1] = inputValue2;\n  *(undefined (*) [16])(dataStructure + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_00113bfa",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_0010c2d2",
                "FUN_00113b4a",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113cb9",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_00113d3a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparison_result",
                "in_RAX": "undefined_value",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 undefined_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = undefined_value;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_0010882c",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010c7a0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_00115b70",
                "FUN_00108898",
                "FUN_0010914e",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "currentFunctionOffset",
                "lVar2": "previousFunctionOffset",
                "lVar3": "tempOffset",
                "plVar4": "functionChain",
                "uVar5": "functionIndex"
            },
            "code": "\nvoid executeFunctionChain_0011a390(void)\n\n{\n  long currentFunctionOffset;\n  long previousFunctionOffset;\n  long tempOffset;\n  long *functionChain;\n  uint functionIndex;\n  \n  functionChain = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      functionIndex = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)functionIndex) {\n        currentFunctionOffset = (long)(int)functionIndex;\n        functionIndex = functionIndex & 7;\n        (*(code *)functionChain[currentFunctionOffset + 2])();\n        previousFunctionOffset = currentFunctionOffset + -1;\n        if (-1 < (int)previousFunctionOffset) {\n          tempOffset = previousFunctionOffset;\n          if (functionIndex != 0) {\n            if (functionIndex != 1) {\n              if (functionIndex != 2) {\n                if (functionIndex != 3) {\n                  if (functionIndex != 4) {\n                    if (functionIndex != 5) {\n                      if (functionIndex != 6) {\n                        (*(code *)functionChain[currentFunctionOffset + 1])();\n                        previousFunctionOffset = currentFunctionOffset + -2;\n                      }\n                      (*(code *)functionChain[previousFunctionOffset + 2])();\n                      previousFunctionOffset = previousFunctionOffset + -1;\n                    }\n                    (*(code *)functionChain[previousFunctionOffset + 2])();\n                    previousFunctionOffset = previousFunctionOffset + -1;\n                  }\n                  (*(code *)functionChain[previousFunctionOffset + 2])();\n                  previousFunctionOffset = previousFunctionOffset + -1;\n                }\n                (*(code *)functionChain[previousFunctionOffset + 2])();\n                previousFunctionOffset = previousFunctionOffset + -1;\n              }\n              (*(code *)functionChain[previousFunctionOffset + 2])();\n              previousFunctionOffset = previousFunctionOffset + -1;\n            }\n            (*(code *)functionChain[previousFunctionOffset + 2])();\n            tempOffset = previousFunctionOffset + -1;\n            if ((int)(previousFunctionOffset + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[tempOffset + 2])();\n            currentFunctionOffset = tempOffset + -1;\n            (*(code *)functionChain[tempOffset + 1])();\n            (*(code *)functionChain[tempOffset])();\n            (*(code *)functionChain[currentFunctionOffset])();\n            (*(code *)functionChain[tempOffset + -2])();\n            (*(code *)functionChain[tempOffset + -3])();\n            (*(code *)functionChain[tempOffset + -4])();\n            (*(code *)functionChain[tempOffset + -5])();\n            tempOffset = tempOffset + -8;\n          } while (-1 < (int)currentFunctionOffset + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "create_formatted_message_0010e842",
                "param_1": "inputValue",
                "param_2": "inputString",
                "param_3": "count",
                "param_4": "outputValue",
                "__s": "formattedMessage",
                "auVar2": "returnValue",
                "sVar1": "inputStringLength"
            },
            "code": "\nundefined  [16] createFormattedMessage_0010e842(undefined8 inputValue,char *inputString,undefined8 count,undefined8 outputValue)\n\n{\n  size_t inputStringLength;\n  char *formattedMessage;\n  undefined returnValue [16];\n  \n  inputStringLength = strlen(inputString);\n  formattedMessage = (char *)xmalloc(inputStringLength + 0x14);\n  sprintf(formattedMessage,\"%s:c=i%ld\",inputString,count);\n  returnValue._0_4_ = FUN_0010e2f0(inputValue,0x80,0,0,formattedMessage);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(formattedMessage);\n  }\n  returnValue._8_8_ = outputValue;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_formatted_message_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_pointer_00113cb9",
                "param_1": "inputValue",
                "lVar1": "pointer"
            },
            "code": "\nlong initializePointer_00113cb9(long inputValue)\n\n{\n  long pointer;\n  \n  if (inputValue != 0) {\n    pointer = FUN_00112904(0xe,0);\n    if (pointer == 0) {\n      pointer = 0;\n    }\n    else {\n      *(long *)(pointer + 0x10) = inputValue;\n    }\n    return pointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "dataStruct",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "resultString",
                "sVar2": "inputLength",
                "sVar3": "resultLength",
                "__s_00": "modifiedString",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 processData_0010eafe(long dataStruct,char *inputString,char flag)\n\n{\n  undefined4 returnValue;\n  char *resultString;\n  size_t inputLength;\n  size_t resultLength;\n  char *modifiedString;\n  \n  if ((*(int *)(dataStruct + 0x1f8) == 0) && (*(long *)(dataStruct + 0x1e8) == -1)) {\n    resultString = (char *)FUN_00109b2f();\n    inputLength = strlen(inputString);\n    resultLength = strlen(resultString);\n    modifiedString = (char *)xmalloc(inputLength + 3 + resultLength);\n    sprintf(modifiedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),resultString);\n    *(undefined8 *)(dataStruct + 0x1e8) = *(undefined8 *)(dataStruct + 0x10);\n    returnValue = FUN_0010e2f0(dataStruct,0x24,0,0,modifiedString);\n    if ((char)returnValue != '\\0') {\n      free(modifiedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_something_00113df2",
                "param_1": "inputParameter"
            },
            "code": "\nvoid initializeSomething_00113df2(undefined4 inputParameter)\n\n{\n  FUN_00112904(4,inputParameter);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_something_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "construct_message_0010a377",
                "param_1": "inputValue",
                "cVar1": "flag",
                "__s": "firstString",
                "__s_00": "secondString",
                "sVar3": "firstStringLength",
                "sVar4": "secondStringLength",
                "__s_01": "finalString",
                "uVar2": "returnValue",
                "uVar5": "useFlag"
            },
            "code": "\nundefined4 constructMessage_0010a377(long inputValue)\n\n{\n  char flag;\n  undefined4 returnValue;\n  char *firstString;\n  char *secondString;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *finalString;\n  undefined useFlag;\n  \n  useFlag = 1;\n  flag = *(char *)(*(long *)(inputValue + 0x60) + 0x1c);\n  firstString = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    useFlag = *(undefined *)(*(long *)(inputValue + 0x60) + 0x1c);\n  }\n  secondString = (char *)FUN_00109b2f(inputValue);\n  firstStringLength = strlen(firstString);\n  secondStringLength = strlen(secondString);\n  finalString = (char *)xmalloc(firstStringLength + 3 + secondStringLength);\n  sprintf(finalString,\"@%s,%s\",secondString,firstString);\n  free(secondString);\n  free(firstString);\n  returnValue = FUN_00109b52(inputValue,finalString,0,useFlag,0);\n  if ((char)returnValue != '\\0') {\n    free(finalString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_message_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_0010d882",
                "param_1": "ptr1",
                "param_2": "ptrArray",
                "param_3": "outputPtr",
                "param_4": "flagPtr",
                "iVar1": "loopCounter",
                "pcVar2": "currentPtr",
                "cVar3": "currentChar",
                "lVar4": "allocatedPtr",
                "pcVar5": "currentPtr",
                "uVar6": "index",
                "bVar7": "loopCondition",
                "local_50": "count",
                "local_4c": "constantValue",
                "local_48": "value",
                "local_44": "flag",
                "local_40": "tempArray"
            },
            "code": "\nundefined8 processData_0010d882(long ptr1,char **ptrArray,long *outputPtr,undefined *flagPtr)\n\n{\n  int loopCounter;\n  char *currentPtr;\n  char currentChar;\n  long allocatedPtr;\n  char *currentPtr;\n  ulong index;\n  bool loopCondition;\n  uint count;\n  undefined4 constantValue;\n  uint value;\n  int flag;\n  undefined8 tempArray [2];\n  \n  currentPtr = *ptrArray;\n  constantValue = 10;\n  if (outputPtr != (long *)0x0) {\n    allocatedPtr = xmalloc();\n    *outputPtr = allocatedPtr;\n    *flagPtr = 0;\n  }\n  count = 0;\n  while( true ) {\n    currentPtr = *ptrArray;\n    currentChar = *currentPtr;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *ptrArray = currentPtr + 1;\n      if (currentChar == 'T') {\n        flag = 1;\n      }\n      else {\n        currentChar = FUN_00108ea1(ptrArray,&flag);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = FUN_00108ea1(ptrArray,&value);\n      if ((currentChar == '\\0') || (*(uint *)(ptr1 + 0x28) <= value)) {\nLAB_0010d958:\n        FUN_0010911f(currentPtr);\n        return 0;\n      }\n      index = (ulong)value;\n      while (loopCounter = flag + -1, loopCondition = flag != 0, flag = loopCounter, loopCondition) {\n        tempArray[0] = *(undefined8 *)(*(long *)(ptr1 + 0x20) + index * 0x10);\n        currentChar = FUN_0010d7d4(ptr1,tempArray,outputPtr,&count,&constantValue);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = FUN_0010d7d4(ptr1,ptrArray,outputPtr,&count,&constantValue);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputPtr == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputPtr + (ulong)count * 8) = 0;\n    if (*currentPtr != 'e') goto LAB_0010d9fa;\n    *flagPtr = 1;\n  }\n  currentPtr = currentPtr + 1;\n  *ptrArray = currentPtr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentPtr >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_00108ea1",
                "FUN_0010d7d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "puVar1": "memoryBlock",
                "pauVar2": "existingMemory",
                "lVar3": "i",
                "puVar4": "currentBlock",
                "bVar5": "flag"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memory) [16],undefined8 value,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 *memoryBlock;\n  undefined (*existingMemory) [16];\n  long i;\n  undefined4 *currentBlock;\n  byte flag;\n  \n  flag = 0;\n  memoryBlock = (undefined4 *)xmalloc(0x28);\n  currentBlock = memoryBlock;\n  for (i = 10; i != 0; i = i + -1) {\n    *currentBlock = 0;\n    currentBlock = currentBlock + (ulong)flag * -2 + 1;\n  }\n  existingMemory = *memory;\n  *(undefined8 *)(memoryBlock + 2) = value;\n  memoryBlock[5] = param1;\n  memoryBlock[6] = param2;\n  if (existingMemory == (undefined (*) [16])0x0) {\n    existingMemory = (undefined (*) [16])xmalloc(0x10);\n    *existingMemory = ZEXT816(0);\n    *memory = existingMemory;\n    *(undefined (**) [16])(*existingMemory + 8) = existingMemory;\n  }\n  **(undefined8 **)(*existingMemory + 8) = memoryBlock;\n  *(undefined4 **)(*existingMemory + 8) = memoryBlock;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "record",
                "param_2": "line",
                "param_3": "unit",
                "uVar1": "errorMessage",
                "puVar2": "currentUnit",
                "uVar3": "index",
                "puVar4": "dynamicMemory",
                "lVar5": "counter",
                "puVar6": "pointer",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long record,undefined8 line,undefined8 unit)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentUnit;\n  ulong index;\n  undefined4 *dynamicMemory;\n  long counter;\n  undefined4 *pointer;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    counter = *(long *)(record + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(record + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          currentUnit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)currentUnit * 8) = line;\n          *(undefined8 *)(counter + 0x60 + (long)currentUnit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    dynamicMemory = (undefined4 *)xmalloc(0xb0);\n    pointer = dynamicMemory;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *pointer = 0;\n      pointer = pointer + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(record + 0x10);\n    *(undefined8 *)(dynamicMemory + 4) = line;\n    *(undefined8 *)(dynamicMemory + 2) = errorMessage;\n    *(undefined8 *)(dynamicMemory + 0x18) = unit;\n    pointer = dynamicMemory + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)pointer = 0xff;\n      pointer = (undefined4 *)((long)pointer + (ulong)flag * -2 + 1);\n    }\n    currentUnit = *(undefined8 **)(record + 0x28);\n    if (currentUnit == (undefined8 *)0x0) {\n      currentUnit = *(undefined8 **)(record + 8);\n      currentUnit[2] = dynamicMemory;\n    }\n    else {\n      *currentUnit = dynamicMemory;\n    }\n    *(undefined4 **)(record + 0x28) = dynamicMemory;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentUnit >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **input)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*input,0);\n    if (matchResult == 0) {\n      *(undefined *)(input + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*input,0);\n    if (matchResult == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionData",
                "puVar1": "currentPtr",
                "uVar2": "errorStr",
                "puVar3": "allocatedMemory",
                "puVar4": "tempPtr",
                "puVar6": "lastPtr",
                "puVar7": "loopVar",
                "bVar8": "byteVar",
                "lVar5": "loopCounter",
                "fprintf": "printError",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionData,long param_2,long param_3,undefined4 param_4,undefined8 param_5)\n\n{\n  undefined8 *currentPtr;\n  undefined8 errorStr;\n  undefined4 *allocatedMemory;\n  undefined8 *tempPtr;\n  long loopCounter;\n  undefined8 *lastPtr;\n  undefined4 *loopVar;\n  byte byteVar;\n  \n  byteVar = 0;\n  if (param_2 == 0) {\n    return 0;\n  }\n  if (param_3 != 0) {\n    if ((*(long *)(functionData + 8) != 0) && (*(long *)(functionData + 0x18) != 0)) {\n      allocatedMemory = (undefined4 *)xmalloc(0x28);\n      loopVar = allocatedMemory;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *loopVar = 0;\n        loopVar = loopVar + (ulong)byteVar * -2 + 1;\n      }\n      loopCounter = *(long *)(functionData + 0x18);\n      *(long *)(allocatedMemory + 2) = param_2;\n      *(long *)(allocatedMemory + 4) = param_3;\n      allocatedMemory[6] = param_4;\n      currentPtr = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(allocatedMemory + 8) = param_5;\n      lastPtr = (undefined8 *)(loopCounter + 8);\n      while (tempPtr = currentPtr, tempPtr != (undefined8 *)0x0) {\n        lastPtr = tempPtr;\n        currentPtr = (undefined8 *)*tempPtr;\n      }\n      *lastPtr = allocatedMemory;\n      return 1;\n    }\n    errorStr = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(errorOutput,\"%s\\n\",errorStr);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_00104ea2",
                "unaff_R12": "targetDir",
                "param_11": "mode",
                "ppcVar3": "archiveFilePtr",
                "ppcVar6": "outputFilePtr",
                "cVar1": "successFlag",
                "unaff_R15": "archiveFiles",
                "unaff_RBP": "fileStat",
                "pcVar15": "currentChar",
                "unaff_R13": "tempDirList",
                "pcVar7": "currentPath",
                "puVar8": "archiveEntry",
                "lVar12": "remainingSize",
                "pcVar10": "sourceFile",
                "unaff_EBX": "statError",
                "psVar16": "statBuffer",
                "unaff_retaddr": "returnAddr",
                "param_7": "targetDirPtr",
                "param_8": "resultPtr",
                "param_9": "tempDir",
                "param_10": "sourceFilePtr",
                "param_18": "filePermission",
                "param_19": "archiveSize"
            },
            "code": "\nvoid copyArchive_00104ea2(void)\n\n{\n  char successFlag;\n  int iVar2;\n  char **archiveFilePtr;\n  void *pvVar4;\n  long lVar5;\n  char **outputFilePtr;\n  char *currentPath;\n  undefined8 *archiveEntry;\n  int *piVar9;\n  char *sourceFile;\n  undefined8 uVar11;\n  long remainingSize;\n  code *psuccessFlag3;\n  long lVar14;\n  int statError;\n  stat *fileStat;\n  char *currentChar;\n  stat *statBuffer;\n  char *targetDir;\n  undefined8 *tempDirList;\n  char **archiveFiles;\n  byte bVar17;\n  undefined8 returnAddr;\n  undefined8 *targetDirPtr;\n  long *resultPtr;\n  char *tempDir;\n  undefined8 *sourceFilePtr;\n  undefined8 mode;\n  undefined8 in_stack_00000030;\n  uint filePermission;\n  long archiveSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  outputFilePtr = (char **)bfd_openw(targetDir,mode);\n  if (outputFilePtr == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(targetDir,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    successFlag = FUNC_00114e50(archiveFiles,outputFilePtr,returnAddr);\n    if (successFlag == '\\0') {\n      iVar2 = bfd_get_arch(archiveFiles);\n      if (iVar2 == 0) goto LAB_00104d75;\n      successFlag = bfd_close_all_done(outputFilePtr);\n      if (successFlag != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(targetDir,0,0,0);\n      goto LAB_00104ec9;\n    }\n    successFlag = bfd_close(outputFilePtr);\n    outputFilePtr = archiveFiles;\n    if (successFlag == '\\0') {\n      FUN_001126c0(targetDir,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (statError == 0)) {\n      FUN_0011a350(targetDir,fileStat);\n    }\n    remainingSize = bfd_openr(targetDir,mode);\n    tempDirList[2] = remainingSize;\n    *resultPtr = remainingSize;\n    resultPtr = (long *)(remainingSize + 0xf0);\n    archiveFiles = (char **)bfd_openr_next_archived_file(sourceFilePtr,outputFilePtr);\n    bfd_close(outputFilePtr);\n    while ((DAT_00127a40 == 0 && (archiveFiles != (char **)0x0))) {\n      sourceFile = *archiveFiles;\n      currentPath = sourceFile;\n      if (*sourceFile == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(uVar11,sourceFile);\n        goto LAB_00104e93;\n      }\n      while (*currentPath != '\\0') {\n        currentChar = currentPath;\n        if ((*currentPath == '.') && (currentChar = currentPath + 1, currentPath[1] == '.')) {\n          currentChar = currentPath + 2;\n          if ((currentPath[2] == '\\0') || (currentPath[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n        }\n        currentPath = currentChar;\n        if (*currentChar == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      targetDir = (char *)concat(tempDir,&DAT_0011b47d);\n      iVar2 = stat(targetDir,fileStat);\n      archiveEntry = tempDirList;\n      if (-1 < iVar2) {\n        remainingSize = FUN_0011a0e0(targetDir);\n        free(targetDir);\n        if (remainingSize == 0) {\n          piVar9 = __errno_location();\n          sourceFile = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(uVar11,sourceFile);\n          goto LAB_00104e93;\n        }\n        archiveEntry = (undefined8 *)xmalloc(0x18);\n        sourceFile = *archiveFiles;\n        *archiveEntry = tempDirList;\n        archiveEntry[2] = 0;\n        archiveEntry[1] = remainingSize;\n        targetDir = (char *)concat(remainingSize,&DAT_0011b47d,sourceFile);\n      }\n      statError = 0;\n      if (DAT_001279eb != '\\0') {\n        statBuffer = fileStat;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&statBuffer->st_dev = 0;\n          statBuffer = (stat *)((long)statBuffer + (ulong)bVar17 * -8 + 4);\n        }\n        outputFilePtr = (char **)archiveFiles[0x1d];\n        if ((char **)archiveFiles[0x1d] == (char **)0x0) {\n          outputFilePtr = archiveFiles;\n        }\n        statError = (**(code **)(outputFilePtr[1] + 0x1e8))(archiveFiles,fileStat);\n        if (statError != 0) {\n          sourceFile = *archiveFiles;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(uVar11,sourceFile);\n        }\n      }\n      tempDirList = (undefined8 *)xmalloc(0x18);\n      tempDirList[1] = targetDir;\n      *tempDirList = archiveEntry;\n      tempDirList[2] = 0;\n      successFlag = bfd_check_format(archiveFiles,1);\n      if (successFlag != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        outputFilePtr = (char **)bfd_openw(targetDir,*(undefined8 *)archiveFiles[1]);\n        if (outputFilePtr == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,archiveFiles,0,uVar11);\n      outputFilePtr = (char **)bfd_openw(targetDir,mode);\n      if (outputFilePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archiveFilePtr = (char **)archiveFiles[0x1d];\n      if ((char **)archiveFiles[0x1d] == (char **)0x0) {\n        archiveFilePtr = archiveFiles;\n      }\n      iVar2 = (**(code **)(archiveFilePtr[1] + 0x1e8))(archiveFiles);\n      remainingSize = archiveSize;\n      if (iVar2 == 0) {\n        if (archiveSize < 0) {\n          FUN_001125fa(archiveFiles);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archiveFiles,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279e9 != '\\0') {\n              sourceFile = *outputFilePtr;\n              uVar11 = FUN_001125fa(archiveFiles);\n              currentPath = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentPath,uVar11,sourceFile);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingSize == 0) {\n                chmod(*outputFilePtr,filePermission | 0x100);\n                free(pvVar4);\n                successFlag = bfd_close_all_done(outputFilePtr);\n                outputFilePtr = archiveFiles;\n                if (successFlag == '\\0') {\n                  FUN_001126c0(targetDir,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (remainingSize < 0x2001) {\n                lVar14 = remainingSize;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archiveFiles);\n              archiveFilePtr = archiveFiles;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,outputFilePtr), archiveFilePtr = outputFilePtr, lVar14 != lVar5))\n              break;\n              remainingSize = remainingSize - lVar14;\n            }\n            FUN_001126c0(0,archiveFilePtr,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = FUN_001125fa(archiveFiles);\n            FUN_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,archiveFiles,0,0);\n      }\n      successFlag = bfd_close_all_done(outputFilePtr);\n      if (successFlag == '\\0') {\n        FUN_001126c0(targetDir,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(targetDir);\n      DAT_00127a40 = 1;\n    }\n    *resultPtr = 0;\n    pvVar4 = (void *)xstrdup(*targetDirPtr);\n    if (DAT_00127a40 == 0) {\n      psuccessFlag3 = bfd_close;\n    }\n    else {\n      psuccessFlag3 = bfd_close_all_done;\n    }\n    successFlag = (*psuccessFlag3)(targetDirPtr);\n    if (successFlag == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*sourceFilePtr);\n    successFlag = bfd_close(sourceFilePtr);\n    if (successFlag == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempDirList != (undefined8 *)0x0) {\n    if (tempDirList[2] == 0) {\n      rmdir((char *)tempDirList[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirList[1]);\n    }\n    free((void *)tempDirList[1]);\n    archiveEntry = (undefined8 *)*tempDirList;\n    free(tempDirList);\n    tempDirList = archiveEntry;\n  }\n  rmdir(tempDir);\n  free(tempDir);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_bwrite",
                "FUN_00114b84",
                "FUN_001052a2",
                "xstrdup",
                "strerror",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_0011a350",
                "bfd_bread",
                "bfd_openr",
                "bfd_seek",
                "bfd_close",
                "bfd_get_arch",
                "stat",
                "xmalloc",
                "FUN_0011a110",
                "FUN_00119ed0",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_openw",
                "FUN_0011a0e0",
                "free",
                "__errno_location",
                "unlink",
                "bfd_close_all_done",
                "printf",
                "bfd_close",
                "concat",
                "rmdir",
                "chmod",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001126c0",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_00107880",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_00113ce0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "output"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_00113ce0(long input_param1,long input_param2,undefined input_param3,undefined8 input_param4,undefined8 input_param5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined output [16];\n  \n  if (input_param1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param2;\n      *(undefined *)(allocated_memory + 2) = input_param3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  output._8_8_ = input_param5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_process_file_00114dc7",
                "unaff_RBX": "filePointer",
                "unaff_RBP": "bufferBasePointer",
                "unaff_R12": "bufferOffset",
                "unaff_R14": "bufferSize",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorString",
                "uVar3": "errorMessage"
            },
            "code": "\nvoid readAndProcessFile_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 errorMessage;\n  size_t bytesRead;\n  FILE *filePointer;\n  long bufferBasePointer;\n  long bufferOffset;\n  long bufferSize;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferBasePointer + 0x20) + bufferOffset),1,bufferSize - bufferOffset,\n                  filePointer);\n    error = ferror(filePointer);\n    if (error != 0) {\n      errorMessage = *(undefined8 *)(bufferBasePointer + 0x10);\n      errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorString,errorMessage);\n    }\n    bufferOffset = bufferOffset + bytesRead;\n    error = feof(filePointer);\n    if (error != 0) break;\n    if (bufferOffset == bufferSize) {\n      bufferSize = bufferOffset * 2;\n      errorMessage = xrealloc(*(undefined8 *)(bufferBasePointer + 0x20),bufferSize);\n      *(undefined8 *)(bufferBasePointer + 0x20) = errorMessage;\n    }\n  }\n  *(long *)(bufferBasePointer + 0x18) = bufferOffset;\n  fclose(filePointer);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xrealloc",
                "FUN_00114dc7",
                "fclose",
                "FUN_00119dd0",
                "feof",
                "ferror",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_data_00119f70",
                "param_1": "inputHeader",
                "param_2": "outputData",
                "uVar1": "returnValue",
                "cVar2": "charValue",
                "iVar3": "increment",
                "uVar4": "formattedValue1",
                "uVar5": "formattedValue2",
                "__format": "formatString",
                "lVar6": "size",
                "uVar7": "headerValue",
                "lVar8": "newSize"
            },
            "code": "\nundefined4 processData_00119f70(undefined8 *inputHeader,undefined8 *outputData)\n\n{\n  undefined4 returnValue;\n  char charValue;\n  int increment;\n  undefined8 formattedValue1;\n  undefined8 formattedValue2;\n  char *formatString;\n  long size;\n  undefined8 headerValue;\n  long newSize;\n  \n  increment = *(int *)((long)outputData + 0xc) + 1;\n  *(int *)((long)outputData + 0xc) = increment;\n  if ((ulong)outputData[2] < (ulong)((long)increment * 0x60)) {\n    size = 0x3000;\n    if (0x3f < increment) {\n      size = (long)increment * 0xc0;\n    }\n    newSize = xrealloc(outputData[3]);\n    outputData[3] = newSize;\n    memset((void *)(newSize + outputData[2]),0,size - outputData[2]);\n    outputData[2] = size;\n  }\n  returnValue = *(undefined4 *)((long)inputHeader + 0xc);\n  *(undefined8 *)((long)*(int *)((long)outputData + 0xc) * 0x60 + outputData[3] + -0x60) = *inputHeader;\n  formattedValue1 = FUN_00114e00(returnValue);\n  formattedValue2 = FUN_00114e00(*(undefined4 *)(inputHeader + 2));\n  headerValue = *inputHeader;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,formattedValue2,formattedValue1);\n  size = bfd_openw(*outputData,*inputHeader);\n  if (size == 0) {\n    FUN_0011a110(*outputData);\n    *(undefined4 *)(outputData + 1) = 1;\n  }\n  else {\n    increment = 2;\n    charValue = bfd_set_format(size,1);\n    if (charValue == '\\0') {\n      increment = bfd_get_error();\n      if (increment != 5) {\n        FUN_0011a110(*inputHeader);\n        *(undefined4 *)(outputData + 1) = 1;\n      }\n    }\n    else {\n      do {\n        charValue = (**(code **)(*(long *)(size + 8) + 0x2a0))(size,increment,0);\n        if (charValue != '\\0') {\n          headerValue = bfd_printable_arch_mach(increment,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)outputData + 0xc) * 0x60 + outputData[3] + -0x58 + (ulong)(increment - 2)) =\n               1;\n        }\n        increment = increment + 1;\n      } while (increment != 0x57);\n    }\n    bfd_close_all_done(size);\n  }\n  return *(undefined4 *)(outputData + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "bfd_get_error",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "printf",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "fileStatStructureAddress",
                "iVar1": "errnoValue",
                "__fd": "destinationFileDescriptor",
                "iVar2": "readBytes",
                "_Var3": "currentFilePosition",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoLocationPointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int sourceFileDescriptor,char *destinationFilePath,long fileStatStructureAddress)\n\n{\n  int errnoValue;\n  int destinationFileDescriptor;\n  int readBytes;\n  __off_t currentFilePosition;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoLocationPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (currentFilePosition = lseek(sourceFileDescriptor,0,0), currentFilePosition == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = FUN_00108237();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      readBytes = (int)returnValue;\n      if (readBytes < 1) {\n        errnoLocationPointer = __errno_location();\n        errnoValue = *errnoLocationPointer;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(fileStatStructureAddress + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readBytes != 0) {\n          *errnoLocationPointer = errnoValue;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)readBytes);\n    } while (bytesWritten == (long)readBytes);\n    errnoLocationPointer = __errno_location();\n    readBytes = *errnoLocationPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoLocationPointer = readBytes;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "__errno_location",
                "write",
                "open",
                "close",
                "FUN_00108237",
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_failed_reason_00108200",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "copyCondition",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFailedReason_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  char *fileToCopy;\n  char copyCondition;\n  ulong errorCode;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(errorMessage);\n  unlink(fileToCopy);\n  if (copyCondition != '\\0') {\n    FUN_0011a350();\n  }\n  returnValue._0_8_ = errorCode & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a350",
                "__errno_location",
                "FUN_00119ed0",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_failed_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 250834,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}